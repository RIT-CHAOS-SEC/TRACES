
TRACES_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009640  0c000200  0c000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0c009840  0c009840  00019840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c0099a4  0c0099a4  0002e060  2**0
                  CONTENTS
  4 .ARM          00000008  0c0099a4  0c0099a4  000199a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0c0099ac  0c0099ac  0002e060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c0099ac  0c0099ac  000199ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c0099b0  0c0099b0  000199b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  30000000  0c0099b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .cfa_data     00002068  30000074  0c009a28  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .gnu.sgstubs  00000060  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .bss          00000384  300020dc  300020dc  000320dc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  30002460  30002460  000320dc  2**0
                  ALLOC
 13 .ARM.attributes 00000036  00000000  00000000  0002e060  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c0d3  00000000  00000000  0002e096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003eb0  00000000  00000000  0004a169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019e0  00000000  00000000  0004e020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001848  00000000  00000000  0004fa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00007021  00000000  00000000  00051248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d924  00000000  00000000  00058269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00112b9b  00000000  00000000  00075b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00188728  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006cc4  00000000  00000000  00188778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c000200 <__do_global_dtors_aux>:
 c000200:	b510      	push	{r4, lr}
 c000202:	4c05      	ldr	r4, [pc, #20]	; (c000218 <__do_global_dtors_aux+0x18>)
 c000204:	7823      	ldrb	r3, [r4, #0]
 c000206:	b933      	cbnz	r3, c000216 <__do_global_dtors_aux+0x16>
 c000208:	4b04      	ldr	r3, [pc, #16]	; (c00021c <__do_global_dtors_aux+0x1c>)
 c00020a:	b113      	cbz	r3, c000212 <__do_global_dtors_aux+0x12>
 c00020c:	4804      	ldr	r0, [pc, #16]	; (c000220 <__do_global_dtors_aux+0x20>)
 c00020e:	e000      	b.n	c000212 <__do_global_dtors_aux+0x12>
 c000210:	bf00      	nop
 c000212:	2301      	movs	r3, #1
 c000214:	7023      	strb	r3, [r4, #0]
 c000216:	bd10      	pop	{r4, pc}
 c000218:	300020dc 	.word	0x300020dc
 c00021c:	00000000 	.word	0x00000000
 c000220:	0c009828 	.word	0x0c009828

0c000224 <frame_dummy>:
 c000224:	b508      	push	{r3, lr}
 c000226:	4b03      	ldr	r3, [pc, #12]	; (c000234 <frame_dummy+0x10>)
 c000228:	b11b      	cbz	r3, c000232 <frame_dummy+0xe>
 c00022a:	4903      	ldr	r1, [pc, #12]	; (c000238 <frame_dummy+0x14>)
 c00022c:	4803      	ldr	r0, [pc, #12]	; (c00023c <frame_dummy+0x18>)
 c00022e:	e000      	b.n	c000232 <frame_dummy+0xe>
 c000230:	bf00      	nop
 c000232:	bd08      	pop	{r3, pc}
 c000234:	00000000 	.word	0x00000000
 c000238:	300020e0 	.word	0x300020e0
 c00023c:	0c009828 	.word	0x0c009828

0c000240 <strcmp>:
 c000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 c000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 c000248:	2a01      	cmp	r2, #1
 c00024a:	bf28      	it	cs
 c00024c:	429a      	cmpcs	r2, r3
 c00024e:	d0f7      	beq.n	c000240 <strcmp>
 c000250:	1ad0      	subs	r0, r2, r3
 c000252:	4770      	bx	lr

0c000254 <__gnu_cmse_nonsecure_call>:
 c000254:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000258:	4627      	mov	r7, r4
 c00025a:	46a0      	mov	r8, r4
 c00025c:	46a1      	mov	r9, r4
 c00025e:	46a2      	mov	sl, r4
 c000260:	46a3      	mov	fp, r4
 c000262:	46a4      	mov	ip, r4
 c000264:	ed2d 8b10 	vpush	{d8-d15}
 c000268:	f04f 0500 	mov.w	r5, #0
 c00026c:	ec45 5b18 	vmov	d8, r5, r5
 c000270:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000274:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000278:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c00027c:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000280:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000284:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000288:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c00028c:	eef1 5a10 	vmrs	r5, fpscr
 c000290:	f64f 7660 	movw	r6, #65376	; 0xff60
 c000294:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c000298:	4035      	ands	r5, r6
 c00029a:	eee1 5a10 	vmsr	fpscr, r5
 c00029e:	f384 8800 	msr	CPSR_f, r4
 c0002a2:	4625      	mov	r5, r4
 c0002a4:	4626      	mov	r6, r4
 c0002a6:	47a4      	blxns	r4
 c0002a8:	ecbd 8b10 	vpop	{d8-d15}
 c0002ac:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c0002b0 <__aeabi_uldivmod>:
 c0002b0:	b953      	cbnz	r3, c0002c8 <__aeabi_uldivmod+0x18>
 c0002b2:	b94a      	cbnz	r2, c0002c8 <__aeabi_uldivmod+0x18>
 c0002b4:	2900      	cmp	r1, #0
 c0002b6:	bf08      	it	eq
 c0002b8:	2800      	cmpeq	r0, #0
 c0002ba:	bf1c      	itt	ne
 c0002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 c0002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 c0002c4:	f000 b982 	b.w	c0005cc <__aeabi_idiv0>
 c0002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 c0002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c0002d0:	f000 f806 	bl	c0002e0 <__udivmoddi4>
 c0002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 c0002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c0002dc:	b004      	add	sp, #16
 c0002de:	4770      	bx	lr

0c0002e0 <__udivmoddi4>:
 c0002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0002e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 c0002e6:	4604      	mov	r4, r0
 c0002e8:	460f      	mov	r7, r1
 c0002ea:	2b00      	cmp	r3, #0
 c0002ec:	d148      	bne.n	c000380 <__udivmoddi4+0xa0>
 c0002ee:	428a      	cmp	r2, r1
 c0002f0:	4694      	mov	ip, r2
 c0002f2:	d961      	bls.n	c0003b8 <__udivmoddi4+0xd8>
 c0002f4:	fab2 f382 	clz	r3, r2
 c0002f8:	b143      	cbz	r3, c00030c <__udivmoddi4+0x2c>
 c0002fa:	f1c3 0120 	rsb	r1, r3, #32
 c0002fe:	409f      	lsls	r7, r3
 c000300:	fa02 fc03 	lsl.w	ip, r2, r3
 c000304:	409c      	lsls	r4, r3
 c000306:	fa20 f101 	lsr.w	r1, r0, r1
 c00030a:	430f      	orrs	r7, r1
 c00030c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 c000310:	fa1f fe8c 	uxth.w	lr, ip
 c000314:	0c22      	lsrs	r2, r4, #16
 c000316:	fbb7 f6f1 	udiv	r6, r7, r1
 c00031a:	fb01 7716 	mls	r7, r1, r6, r7
 c00031e:	fb06 f00e 	mul.w	r0, r6, lr
 c000322:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 c000326:	4290      	cmp	r0, r2
 c000328:	d908      	bls.n	c00033c <__udivmoddi4+0x5c>
 c00032a:	eb1c 0202 	adds.w	r2, ip, r2
 c00032e:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 c000332:	d202      	bcs.n	c00033a <__udivmoddi4+0x5a>
 c000334:	4290      	cmp	r0, r2
 c000336:	f200 8137 	bhi.w	c0005a8 <__udivmoddi4+0x2c8>
 c00033a:	463e      	mov	r6, r7
 c00033c:	1a12      	subs	r2, r2, r0
 c00033e:	b2a4      	uxth	r4, r4
 c000340:	fbb2 f0f1 	udiv	r0, r2, r1
 c000344:	fb01 2210 	mls	r2, r1, r0, r2
 c000348:	fb00 fe0e 	mul.w	lr, r0, lr
 c00034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 c000350:	45a6      	cmp	lr, r4
 c000352:	d908      	bls.n	c000366 <__udivmoddi4+0x86>
 c000354:	eb1c 0404 	adds.w	r4, ip, r4
 c000358:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 c00035c:	d202      	bcs.n	c000364 <__udivmoddi4+0x84>
 c00035e:	45a6      	cmp	lr, r4
 c000360:	f200 811c 	bhi.w	c00059c <__udivmoddi4+0x2bc>
 c000364:	4610      	mov	r0, r2
 c000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 c00036a:	eba4 040e 	sub.w	r4, r4, lr
 c00036e:	2600      	movs	r6, #0
 c000370:	b11d      	cbz	r5, c00037a <__udivmoddi4+0x9a>
 c000372:	40dc      	lsrs	r4, r3
 c000374:	2300      	movs	r3, #0
 c000376:	e9c5 4300 	strd	r4, r3, [r5]
 c00037a:	4631      	mov	r1, r6
 c00037c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000380:	428b      	cmp	r3, r1
 c000382:	d909      	bls.n	c000398 <__udivmoddi4+0xb8>
 c000384:	2d00      	cmp	r5, #0
 c000386:	f000 80fd 	beq.w	c000584 <__udivmoddi4+0x2a4>
 c00038a:	2600      	movs	r6, #0
 c00038c:	e9c5 0100 	strd	r0, r1, [r5]
 c000390:	4630      	mov	r0, r6
 c000392:	4631      	mov	r1, r6
 c000394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000398:	fab3 f683 	clz	r6, r3
 c00039c:	2e00      	cmp	r6, #0
 c00039e:	d14b      	bne.n	c000438 <__udivmoddi4+0x158>
 c0003a0:	428b      	cmp	r3, r1
 c0003a2:	f0c0 80f2 	bcc.w	c00058a <__udivmoddi4+0x2aa>
 c0003a6:	4282      	cmp	r2, r0
 c0003a8:	f240 80ef 	bls.w	c00058a <__udivmoddi4+0x2aa>
 c0003ac:	4630      	mov	r0, r6
 c0003ae:	2d00      	cmp	r5, #0
 c0003b0:	d0e3      	beq.n	c00037a <__udivmoddi4+0x9a>
 c0003b2:	e9c5 4700 	strd	r4, r7, [r5]
 c0003b6:	e7e0      	b.n	c00037a <__udivmoddi4+0x9a>
 c0003b8:	b902      	cbnz	r2, c0003bc <__udivmoddi4+0xdc>
 c0003ba:	deff      	udf	#255	; 0xff
 c0003bc:	fab2 f382 	clz	r3, r2
 c0003c0:	2b00      	cmp	r3, #0
 c0003c2:	f040 809d 	bne.w	c000500 <__udivmoddi4+0x220>
 c0003c6:	1a89      	subs	r1, r1, r2
 c0003c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 c0003cc:	b297      	uxth	r7, r2
 c0003ce:	2601      	movs	r6, #1
 c0003d0:	0c20      	lsrs	r0, r4, #16
 c0003d2:	fbb1 f2fe 	udiv	r2, r1, lr
 c0003d6:	fb0e 1112 	mls	r1, lr, r2, r1
 c0003da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c0003de:	fb07 f002 	mul.w	r0, r7, r2
 c0003e2:	4288      	cmp	r0, r1
 c0003e4:	d90f      	bls.n	c000406 <__udivmoddi4+0x126>
 c0003e6:	eb1c 0101 	adds.w	r1, ip, r1
 c0003ea:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 c0003ee:	bf2c      	ite	cs
 c0003f0:	f04f 0901 	movcs.w	r9, #1
 c0003f4:	f04f 0900 	movcc.w	r9, #0
 c0003f8:	4288      	cmp	r0, r1
 c0003fa:	d903      	bls.n	c000404 <__udivmoddi4+0x124>
 c0003fc:	f1b9 0f00 	cmp.w	r9, #0
 c000400:	f000 80cf 	beq.w	c0005a2 <__udivmoddi4+0x2c2>
 c000404:	4642      	mov	r2, r8
 c000406:	1a09      	subs	r1, r1, r0
 c000408:	b2a4      	uxth	r4, r4
 c00040a:	fbb1 f0fe 	udiv	r0, r1, lr
 c00040e:	fb0e 1110 	mls	r1, lr, r0, r1
 c000412:	fb00 f707 	mul.w	r7, r0, r7
 c000416:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 c00041a:	42a7      	cmp	r7, r4
 c00041c:	d908      	bls.n	c000430 <__udivmoddi4+0x150>
 c00041e:	eb1c 0404 	adds.w	r4, ip, r4
 c000422:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 c000426:	d202      	bcs.n	c00042e <__udivmoddi4+0x14e>
 c000428:	42a7      	cmp	r7, r4
 c00042a:	f200 80b4 	bhi.w	c000596 <__udivmoddi4+0x2b6>
 c00042e:	4608      	mov	r0, r1
 c000430:	1be4      	subs	r4, r4, r7
 c000432:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 c000436:	e79b      	b.n	c000370 <__udivmoddi4+0x90>
 c000438:	f1c6 0720 	rsb	r7, r6, #32
 c00043c:	40b3      	lsls	r3, r6
 c00043e:	fa01 f406 	lsl.w	r4, r1, r6
 c000442:	fa22 fc07 	lsr.w	ip, r2, r7
 c000446:	40f9      	lsrs	r1, r7
 c000448:	40b2      	lsls	r2, r6
 c00044a:	ea4c 0c03 	orr.w	ip, ip, r3
 c00044e:	fa20 f307 	lsr.w	r3, r0, r7
 c000452:	ea4f 491c 	mov.w	r9, ip, lsr #16
 c000456:	431c      	orrs	r4, r3
 c000458:	fa1f fe8c 	uxth.w	lr, ip
 c00045c:	fa00 f306 	lsl.w	r3, r0, r6
 c000460:	0c20      	lsrs	r0, r4, #16
 c000462:	fbb1 f8f9 	udiv	r8, r1, r9
 c000466:	fb09 1118 	mls	r1, r9, r8, r1
 c00046a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c00046e:	fb08 f00e 	mul.w	r0, r8, lr
 c000472:	4288      	cmp	r0, r1
 c000474:	d90f      	bls.n	c000496 <__udivmoddi4+0x1b6>
 c000476:	eb1c 0101 	adds.w	r1, ip, r1
 c00047a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 c00047e:	bf2c      	ite	cs
 c000480:	f04f 0b01 	movcs.w	fp, #1
 c000484:	f04f 0b00 	movcc.w	fp, #0
 c000488:	4288      	cmp	r0, r1
 c00048a:	d903      	bls.n	c000494 <__udivmoddi4+0x1b4>
 c00048c:	f1bb 0f00 	cmp.w	fp, #0
 c000490:	f000 808d 	beq.w	c0005ae <__udivmoddi4+0x2ce>
 c000494:	46d0      	mov	r8, sl
 c000496:	1a09      	subs	r1, r1, r0
 c000498:	b2a4      	uxth	r4, r4
 c00049a:	fbb1 f0f9 	udiv	r0, r1, r9
 c00049e:	fb09 1110 	mls	r1, r9, r0, r1
 c0004a2:	fb00 fe0e 	mul.w	lr, r0, lr
 c0004a6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 c0004aa:	458e      	cmp	lr, r1
 c0004ac:	d907      	bls.n	c0004be <__udivmoddi4+0x1de>
 c0004ae:	eb1c 0101 	adds.w	r1, ip, r1
 c0004b2:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 c0004b6:	d201      	bcs.n	c0004bc <__udivmoddi4+0x1dc>
 c0004b8:	458e      	cmp	lr, r1
 c0004ba:	d87f      	bhi.n	c0005bc <__udivmoddi4+0x2dc>
 c0004bc:	4620      	mov	r0, r4
 c0004be:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 c0004c2:	eba1 010e 	sub.w	r1, r1, lr
 c0004c6:	fba0 9802 	umull	r9, r8, r0, r2
 c0004ca:	4541      	cmp	r1, r8
 c0004cc:	464c      	mov	r4, r9
 c0004ce:	46c6      	mov	lr, r8
 c0004d0:	d302      	bcc.n	c0004d8 <__udivmoddi4+0x1f8>
 c0004d2:	d106      	bne.n	c0004e2 <__udivmoddi4+0x202>
 c0004d4:	454b      	cmp	r3, r9
 c0004d6:	d204      	bcs.n	c0004e2 <__udivmoddi4+0x202>
 c0004d8:	3801      	subs	r0, #1
 c0004da:	ebb9 0402 	subs.w	r4, r9, r2
 c0004de:	eb68 0e0c 	sbc.w	lr, r8, ip
 c0004e2:	2d00      	cmp	r5, #0
 c0004e4:	d070      	beq.n	c0005c8 <__udivmoddi4+0x2e8>
 c0004e6:	1b1a      	subs	r2, r3, r4
 c0004e8:	eb61 010e 	sbc.w	r1, r1, lr
 c0004ec:	fa22 f306 	lsr.w	r3, r2, r6
 c0004f0:	fa01 f707 	lsl.w	r7, r1, r7
 c0004f4:	40f1      	lsrs	r1, r6
 c0004f6:	2600      	movs	r6, #0
 c0004f8:	431f      	orrs	r7, r3
 c0004fa:	e9c5 7100 	strd	r7, r1, [r5]
 c0004fe:	e73c      	b.n	c00037a <__udivmoddi4+0x9a>
 c000500:	fa02 fc03 	lsl.w	ip, r2, r3
 c000504:	f1c3 0020 	rsb	r0, r3, #32
 c000508:	fa01 f203 	lsl.w	r2, r1, r3
 c00050c:	fa21 f600 	lsr.w	r6, r1, r0
 c000510:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 c000514:	fa24 f100 	lsr.w	r1, r4, r0
 c000518:	fa1f f78c 	uxth.w	r7, ip
 c00051c:	409c      	lsls	r4, r3
 c00051e:	4311      	orrs	r1, r2
 c000520:	fbb6 f0fe 	udiv	r0, r6, lr
 c000524:	0c0a      	lsrs	r2, r1, #16
 c000526:	fb0e 6610 	mls	r6, lr, r0, r6
 c00052a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 c00052e:	fb00 f607 	mul.w	r6, r0, r7
 c000532:	4296      	cmp	r6, r2
 c000534:	d90e      	bls.n	c000554 <__udivmoddi4+0x274>
 c000536:	eb1c 0202 	adds.w	r2, ip, r2
 c00053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 c00053e:	bf2c      	ite	cs
 c000540:	f04f 0901 	movcs.w	r9, #1
 c000544:	f04f 0900 	movcc.w	r9, #0
 c000548:	4296      	cmp	r6, r2
 c00054a:	d902      	bls.n	c000552 <__udivmoddi4+0x272>
 c00054c:	f1b9 0f00 	cmp.w	r9, #0
 c000550:	d031      	beq.n	c0005b6 <__udivmoddi4+0x2d6>
 c000552:	4640      	mov	r0, r8
 c000554:	1b92      	subs	r2, r2, r6
 c000556:	b289      	uxth	r1, r1
 c000558:	fbb2 f6fe 	udiv	r6, r2, lr
 c00055c:	fb0e 2216 	mls	r2, lr, r6, r2
 c000560:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 c000564:	fb06 f207 	mul.w	r2, r6, r7
 c000568:	428a      	cmp	r2, r1
 c00056a:	d907      	bls.n	c00057c <__udivmoddi4+0x29c>
 c00056c:	eb1c 0101 	adds.w	r1, ip, r1
 c000570:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 c000574:	d201      	bcs.n	c00057a <__udivmoddi4+0x29a>
 c000576:	428a      	cmp	r2, r1
 c000578:	d823      	bhi.n	c0005c2 <__udivmoddi4+0x2e2>
 c00057a:	4646      	mov	r6, r8
 c00057c:	1a89      	subs	r1, r1, r2
 c00057e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 c000582:	e725      	b.n	c0003d0 <__udivmoddi4+0xf0>
 c000584:	462e      	mov	r6, r5
 c000586:	4628      	mov	r0, r5
 c000588:	e6f7      	b.n	c00037a <__udivmoddi4+0x9a>
 c00058a:	1a84      	subs	r4, r0, r2
 c00058c:	eb61 0303 	sbc.w	r3, r1, r3
 c000590:	2001      	movs	r0, #1
 c000592:	461f      	mov	r7, r3
 c000594:	e70b      	b.n	c0003ae <__udivmoddi4+0xce>
 c000596:	4464      	add	r4, ip
 c000598:	3802      	subs	r0, #2
 c00059a:	e749      	b.n	c000430 <__udivmoddi4+0x150>
 c00059c:	4464      	add	r4, ip
 c00059e:	3802      	subs	r0, #2
 c0005a0:	e6e1      	b.n	c000366 <__udivmoddi4+0x86>
 c0005a2:	3a02      	subs	r2, #2
 c0005a4:	4461      	add	r1, ip
 c0005a6:	e72e      	b.n	c000406 <__udivmoddi4+0x126>
 c0005a8:	3e02      	subs	r6, #2
 c0005aa:	4462      	add	r2, ip
 c0005ac:	e6c6      	b.n	c00033c <__udivmoddi4+0x5c>
 c0005ae:	f1a8 0802 	sub.w	r8, r8, #2
 c0005b2:	4461      	add	r1, ip
 c0005b4:	e76f      	b.n	c000496 <__udivmoddi4+0x1b6>
 c0005b6:	3802      	subs	r0, #2
 c0005b8:	4462      	add	r2, ip
 c0005ba:	e7cb      	b.n	c000554 <__udivmoddi4+0x274>
 c0005bc:	3802      	subs	r0, #2
 c0005be:	4461      	add	r1, ip
 c0005c0:	e77d      	b.n	c0004be <__udivmoddi4+0x1de>
 c0005c2:	3e02      	subs	r6, #2
 c0005c4:	4461      	add	r1, ip
 c0005c6:	e7d9      	b.n	c00057c <__udivmoddi4+0x29c>
 c0005c8:	462e      	mov	r6, r5
 c0005ca:	e6d6      	b.n	c00037a <__udivmoddi4+0x9a>

0c0005cc <__aeabi_idiv0>:
 c0005cc:	4770      	bx	lr
 c0005ce:	bf00      	nop

0c0005d0 <load32>:
  uint16_t x;
  memcpy(&x, b, 2);
  return x;
}

inline static uint32_t load32(uint8_t *b) {
 c0005d0:	b480      	push	{r7}
 c0005d2:	b085      	sub	sp, #20
 c0005d4:	af00      	add	r7, sp, #0
 c0005d6:	6078      	str	r0, [r7, #4]
 c0005d8:	687b      	ldr	r3, [r7, #4]
 c0005da:	681b      	ldr	r3, [r3, #0]
  uint32_t x;
  memcpy(&x, b, 4);
 c0005dc:	60fb      	str	r3, [r7, #12]
  return x;
 c0005de:	68fb      	ldr	r3, [r7, #12]
}
 c0005e0:	4618      	mov	r0, r3
 c0005e2:	3714      	adds	r7, #20
 c0005e4:	46bd      	mov	sp, r7
 c0005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0005ea:	4770      	bx	lr

0c0005ec <store32>:
  return x;
}

inline static void store16(uint8_t *b, uint16_t i) { memcpy(b, &i, 2); }

inline static void store32(uint8_t *b, uint32_t i) { memcpy(b, &i, 4); }
 c0005ec:	b480      	push	{r7}
 c0005ee:	b083      	sub	sp, #12
 c0005f0:	af00      	add	r7, sp, #0
 c0005f2:	6078      	str	r0, [r7, #4]
 c0005f4:	6039      	str	r1, [r7, #0]
 c0005f6:	683a      	ldr	r2, [r7, #0]
 c0005f8:	687b      	ldr	r3, [r7, #4]
 c0005fa:	601a      	str	r2, [r3, #0]
 c0005fc:	bf00      	nop
 c0005fe:	370c      	adds	r7, #12
 c000600:	46bd      	mov	sp, r7
 c000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000606:	4770      	bx	lr

0c000608 <store64>:

inline static void store64(uint8_t *b, uint64_t i) { memcpy(b, &i, 8); }
 c000608:	b580      	push	{r7, lr}
 c00060a:	b084      	sub	sp, #16
 c00060c:	af00      	add	r7, sp, #0
 c00060e:	60f8      	str	r0, [r7, #12]
 c000610:	e9c7 2300 	strd	r2, r3, [r7]
 c000614:	463b      	mov	r3, r7
 c000616:	2208      	movs	r2, #8
 c000618:	4619      	mov	r1, r3
 c00061a:	68f8      	ldr	r0, [r7, #12]
 c00061c:	f009 f8ee 	bl	c0097fc <memcpy>
 c000620:	bf00      	nop
 c000622:	3710      	adds	r7, #16
 c000624:	46bd      	mov	sp, r7
 c000626:	bd80      	pop	{r7, pc}

0c000628 <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes>:

#include "Hacl_HMAC_SHA2_256.h"

static void
Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes(uint32_t *output, uint8_t *input, uint32_t len)
{
 c000628:	b580      	push	{r7, lr}
 c00062a:	b088      	sub	sp, #32
 c00062c:	af00      	add	r7, sp, #0
 c00062e:	60f8      	str	r0, [r7, #12]
 c000630:	60b9      	str	r1, [r7, #8]
 c000632:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c000634:	2300      	movs	r3, #0
 c000636:	61fb      	str	r3, [r7, #28]
 c000638:	e021      	b.n	c00067e <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes+0x56>
  {
    uint8_t *x0 = input + (uint32_t)4U * i;
 c00063a:	69fb      	ldr	r3, [r7, #28]
 c00063c:	009b      	lsls	r3, r3, #2
 c00063e:	68ba      	ldr	r2, [r7, #8]
 c000640:	4413      	add	r3, r2
 c000642:	61bb      	str	r3, [r7, #24]
    uint32_t inputi = load32_be(x0);
 c000644:	69b8      	ldr	r0, [r7, #24]
 c000646:	f7ff ffc3 	bl	c0005d0 <load32>
 c00064a:	6178      	str	r0, [r7, #20]
 c00064c:	697b      	ldr	r3, [r7, #20]
 c00064e:	0e1a      	lsrs	r2, r3, #24
 c000650:	697b      	ldr	r3, [r7, #20]
 c000652:	0a1b      	lsrs	r3, r3, #8
 c000654:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c000658:	431a      	orrs	r2, r3
 c00065a:	697b      	ldr	r3, [r7, #20]
 c00065c:	021b      	lsls	r3, r3, #8
 c00065e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c000662:	431a      	orrs	r2, r3
 c000664:	697b      	ldr	r3, [r7, #20]
 c000666:	061b      	lsls	r3, r3, #24
 c000668:	4313      	orrs	r3, r2
 c00066a:	613b      	str	r3, [r7, #16]
    output[i] = inputi;
 c00066c:	69fb      	ldr	r3, [r7, #28]
 c00066e:	009b      	lsls	r3, r3, #2
 c000670:	68fa      	ldr	r2, [r7, #12]
 c000672:	4413      	add	r3, r2
 c000674:	693a      	ldr	r2, [r7, #16]
 c000676:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c000678:	69fb      	ldr	r3, [r7, #28]
 c00067a:	3301      	adds	r3, #1
 c00067c:	61fb      	str	r3, [r7, #28]
 c00067e:	69fa      	ldr	r2, [r7, #28]
 c000680:	687b      	ldr	r3, [r7, #4]
 c000682:	429a      	cmp	r2, r3
 c000684:	d3d9      	bcc.n	c00063a <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes+0x12>
  }
}
 c000686:	bf00      	nop
 c000688:	bf00      	nop
 c00068a:	3720      	adds	r7, #32
 c00068c:	46bd      	mov	sp, r7
 c00068e:	bd80      	pop	{r7, pc}

0c000690 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes>:

static void
Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes(uint8_t *output, uint32_t *input, uint32_t len)
{
 c000690:	b580      	push	{r7, lr}
 c000692:	b088      	sub	sp, #32
 c000694:	af00      	add	r7, sp, #0
 c000696:	60f8      	str	r0, [r7, #12]
 c000698:	60b9      	str	r1, [r7, #8]
 c00069a:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c00069c:	2300      	movs	r3, #0
 c00069e:	61fb      	str	r3, [r7, #28]
 c0006a0:	e022      	b.n	c0006e8 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes+0x58>
  {
    uint32_t hd1 = input[i];
 c0006a2:	69fb      	ldr	r3, [r7, #28]
 c0006a4:	009b      	lsls	r3, r3, #2
 c0006a6:	68ba      	ldr	r2, [r7, #8]
 c0006a8:	4413      	add	r3, r2
 c0006aa:	681b      	ldr	r3, [r3, #0]
 c0006ac:	61bb      	str	r3, [r7, #24]
    uint8_t *x0 = output + (uint32_t)4U * i;
 c0006ae:	69fb      	ldr	r3, [r7, #28]
 c0006b0:	009b      	lsls	r3, r3, #2
 c0006b2:	68fa      	ldr	r2, [r7, #12]
 c0006b4:	4413      	add	r3, r2
 c0006b6:	617b      	str	r3, [r7, #20]
    store32_be(x0, hd1);
 c0006b8:	69bb      	ldr	r3, [r7, #24]
 c0006ba:	613b      	str	r3, [r7, #16]
 c0006bc:	693b      	ldr	r3, [r7, #16]
 c0006be:	0e1a      	lsrs	r2, r3, #24
 c0006c0:	693b      	ldr	r3, [r7, #16]
 c0006c2:	0a1b      	lsrs	r3, r3, #8
 c0006c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c0006c8:	431a      	orrs	r2, r3
 c0006ca:	693b      	ldr	r3, [r7, #16]
 c0006cc:	021b      	lsls	r3, r3, #8
 c0006ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c0006d2:	431a      	orrs	r2, r3
 c0006d4:	693b      	ldr	r3, [r7, #16]
 c0006d6:	061b      	lsls	r3, r3, #24
 c0006d8:	4313      	orrs	r3, r2
 c0006da:	4619      	mov	r1, r3
 c0006dc:	6978      	ldr	r0, [r7, #20]
 c0006de:	f7ff ff85 	bl	c0005ec <store32>
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c0006e2:	69fb      	ldr	r3, [r7, #28]
 c0006e4:	3301      	adds	r3, #1
 c0006e6:	61fb      	str	r3, [r7, #28]
 c0006e8:	69fa      	ldr	r2, [r7, #28]
 c0006ea:	687b      	ldr	r3, [r7, #4]
 c0006ec:	429a      	cmp	r2, r3
 c0006ee:	d3d8      	bcc.n	c0006a2 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes+0x12>
  }
}
 c0006f0:	bf00      	nop
 c0006f2:	bf00      	nop
 c0006f4:	3720      	adds	r7, #32
 c0006f6:	46bd      	mov	sp, r7
 c0006f8:	bd80      	pop	{r7, pc}
	...

0c0006fc <Hacl_Impl_SHA2_256_init>:

static void Hacl_Impl_SHA2_256_init(uint32_t *state)
{
 c0006fc:	b480      	push	{r7}
 c0006fe:	b0a3      	sub	sp, #140	; 0x8c
 c000700:	af00      	add	r7, sp, #0
 c000702:	6078      	str	r0, [r7, #4]
  uint32_t *k1 = state;
 c000704:	687b      	ldr	r3, [r7, #4]
 c000706:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t *h_01 = state + (uint32_t)128U;
 c00070a:	687b      	ldr	r3, [r7, #4]
 c00070c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c000710:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t *p10 = k1;
 c000714:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000718:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t *p20 = k1 + (uint32_t)16U;
 c00071a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c00071e:	3340      	adds	r3, #64	; 0x40
 c000720:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t *p3 = k1 + (uint32_t)32U;
 c000722:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000726:	3380      	adds	r3, #128	; 0x80
 c000728:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t *p4 = k1 + (uint32_t)48U;
 c00072a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c00072e:	33c0      	adds	r3, #192	; 0xc0
 c000730:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t *p11 = p10;
 c000732:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 c000734:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t *p21 = p10 + (uint32_t)8U;
 c000736:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 c000738:	3320      	adds	r3, #32
 c00073a:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t *p12 = p11;
 c00073c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00073e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t *p22 = p11 + (uint32_t)4U;
 c000740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c000742:	3310      	adds	r3, #16
 c000744:	663b      	str	r3, [r7, #96]	; 0x60
  p12[0U] = (uint32_t)0x428a2f98U;
 c000746:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c000748:	4a8d      	ldr	r2, [pc, #564]	; (c000980 <Hacl_Impl_SHA2_256_init+0x284>)
 c00074a:	601a      	str	r2, [r3, #0]
  p12[1U] = (uint32_t)0x71374491U;
 c00074c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c00074e:	3304      	adds	r3, #4
 c000750:	4a8c      	ldr	r2, [pc, #560]	; (c000984 <Hacl_Impl_SHA2_256_init+0x288>)
 c000752:	601a      	str	r2, [r3, #0]
  p12[2U] = (uint32_t)0xb5c0fbcfU;
 c000754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c000756:	3308      	adds	r3, #8
 c000758:	4a8b      	ldr	r2, [pc, #556]	; (c000988 <Hacl_Impl_SHA2_256_init+0x28c>)
 c00075a:	601a      	str	r2, [r3, #0]
  p12[3U] = (uint32_t)0xe9b5dba5U;
 c00075c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c00075e:	330c      	adds	r3, #12
 c000760:	4a8a      	ldr	r2, [pc, #552]	; (c00098c <Hacl_Impl_SHA2_256_init+0x290>)
 c000762:	601a      	str	r2, [r3, #0]
  p22[0U] = (uint32_t)0x3956c25bU;
 c000764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c000766:	4a8a      	ldr	r2, [pc, #552]	; (c000990 <Hacl_Impl_SHA2_256_init+0x294>)
 c000768:	601a      	str	r2, [r3, #0]
  p22[1U] = (uint32_t)0x59f111f1U;
 c00076a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c00076c:	3304      	adds	r3, #4
 c00076e:	4a89      	ldr	r2, [pc, #548]	; (c000994 <Hacl_Impl_SHA2_256_init+0x298>)
 c000770:	601a      	str	r2, [r3, #0]
  p22[2U] = (uint32_t)0x923f82a4U;
 c000772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c000774:	3308      	adds	r3, #8
 c000776:	4a88      	ldr	r2, [pc, #544]	; (c000998 <Hacl_Impl_SHA2_256_init+0x29c>)
 c000778:	601a      	str	r2, [r3, #0]
  p22[3U] = (uint32_t)0xab1c5ed5U;
 c00077a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c00077c:	330c      	adds	r3, #12
 c00077e:	4a87      	ldr	r2, [pc, #540]	; (c00099c <Hacl_Impl_SHA2_256_init+0x2a0>)
 c000780:	601a      	str	r2, [r3, #0]
  uint32_t *p13 = p21;
 c000782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c000784:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t *p23 = p21 + (uint32_t)4U;
 c000786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c000788:	3310      	adds	r3, #16
 c00078a:	65bb      	str	r3, [r7, #88]	; 0x58
  p13[0U] = (uint32_t)0xd807aa98U;
 c00078c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00078e:	4a84      	ldr	r2, [pc, #528]	; (c0009a0 <Hacl_Impl_SHA2_256_init+0x2a4>)
 c000790:	601a      	str	r2, [r3, #0]
  p13[1U] = (uint32_t)0x12835b01U;
 c000792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c000794:	3304      	adds	r3, #4
 c000796:	4a83      	ldr	r2, [pc, #524]	; (c0009a4 <Hacl_Impl_SHA2_256_init+0x2a8>)
 c000798:	601a      	str	r2, [r3, #0]
  p13[2U] = (uint32_t)0x243185beU;
 c00079a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00079c:	3308      	adds	r3, #8
 c00079e:	4a82      	ldr	r2, [pc, #520]	; (c0009a8 <Hacl_Impl_SHA2_256_init+0x2ac>)
 c0007a0:	601a      	str	r2, [r3, #0]
  p13[3U] = (uint32_t)0x550c7dc3U;
 c0007a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c0007a4:	330c      	adds	r3, #12
 c0007a6:	4a81      	ldr	r2, [pc, #516]	; (c0009ac <Hacl_Impl_SHA2_256_init+0x2b0>)
 c0007a8:	601a      	str	r2, [r3, #0]
  p23[0U] = (uint32_t)0x72be5d74U;
 c0007aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0007ac:	4a80      	ldr	r2, [pc, #512]	; (c0009b0 <Hacl_Impl_SHA2_256_init+0x2b4>)
 c0007ae:	601a      	str	r2, [r3, #0]
  p23[1U] = (uint32_t)0x80deb1feU;
 c0007b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0007b2:	3304      	adds	r3, #4
 c0007b4:	4a7f      	ldr	r2, [pc, #508]	; (c0009b4 <Hacl_Impl_SHA2_256_init+0x2b8>)
 c0007b6:	601a      	str	r2, [r3, #0]
  p23[2U] = (uint32_t)0x9bdc06a7U;
 c0007b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0007ba:	3308      	adds	r3, #8
 c0007bc:	4a7e      	ldr	r2, [pc, #504]	; (c0009b8 <Hacl_Impl_SHA2_256_init+0x2bc>)
 c0007be:	601a      	str	r2, [r3, #0]
  p23[3U] = (uint32_t)0xc19bf174U;
 c0007c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0007c2:	330c      	adds	r3, #12
 c0007c4:	4a7d      	ldr	r2, [pc, #500]	; (c0009bc <Hacl_Impl_SHA2_256_init+0x2c0>)
 c0007c6:	601a      	str	r2, [r3, #0]
  uint32_t *p14 = p20;
 c0007c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c0007ca:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t *p24 = p20 + (uint32_t)8U;
 c0007cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c0007ce:	3320      	adds	r3, #32
 c0007d0:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t *p15 = p14;
 c0007d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c0007d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t *p25 = p14 + (uint32_t)4U;
 c0007d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c0007d8:	3310      	adds	r3, #16
 c0007da:	64bb      	str	r3, [r7, #72]	; 0x48
  p15[0U] = (uint32_t)0xe49b69c1U;
 c0007dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0007de:	4a78      	ldr	r2, [pc, #480]	; (c0009c0 <Hacl_Impl_SHA2_256_init+0x2c4>)
 c0007e0:	601a      	str	r2, [r3, #0]
  p15[1U] = (uint32_t)0xefbe4786U;
 c0007e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0007e4:	3304      	adds	r3, #4
 c0007e6:	4a77      	ldr	r2, [pc, #476]	; (c0009c4 <Hacl_Impl_SHA2_256_init+0x2c8>)
 c0007e8:	601a      	str	r2, [r3, #0]
  p15[2U] = (uint32_t)0x0fc19dc6U;
 c0007ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0007ec:	3308      	adds	r3, #8
 c0007ee:	4a76      	ldr	r2, [pc, #472]	; (c0009c8 <Hacl_Impl_SHA2_256_init+0x2cc>)
 c0007f0:	601a      	str	r2, [r3, #0]
  p15[3U] = (uint32_t)0x240ca1ccU;
 c0007f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0007f4:	330c      	adds	r3, #12
 c0007f6:	4a75      	ldr	r2, [pc, #468]	; (c0009cc <Hacl_Impl_SHA2_256_init+0x2d0>)
 c0007f8:	601a      	str	r2, [r3, #0]
  p25[0U] = (uint32_t)0x2de92c6fU;
 c0007fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c0007fc:	4a74      	ldr	r2, [pc, #464]	; (c0009d0 <Hacl_Impl_SHA2_256_init+0x2d4>)
 c0007fe:	601a      	str	r2, [r3, #0]
  p25[1U] = (uint32_t)0x4a7484aaU;
 c000800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c000802:	3304      	adds	r3, #4
 c000804:	4a73      	ldr	r2, [pc, #460]	; (c0009d4 <Hacl_Impl_SHA2_256_init+0x2d8>)
 c000806:	601a      	str	r2, [r3, #0]
  p25[2U] = (uint32_t)0x5cb0a9dcU;
 c000808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c00080a:	3308      	adds	r3, #8
 c00080c:	4a72      	ldr	r2, [pc, #456]	; (c0009d8 <Hacl_Impl_SHA2_256_init+0x2dc>)
 c00080e:	601a      	str	r2, [r3, #0]
  p25[3U] = (uint32_t)0x76f988daU;
 c000810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c000812:	330c      	adds	r3, #12
 c000814:	4a71      	ldr	r2, [pc, #452]	; (c0009dc <Hacl_Impl_SHA2_256_init+0x2e0>)
 c000816:	601a      	str	r2, [r3, #0]
  uint32_t *p16 = p24;
 c000818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00081a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t *p26 = p24 + (uint32_t)4U;
 c00081c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00081e:	3310      	adds	r3, #16
 c000820:	643b      	str	r3, [r7, #64]	; 0x40
  p16[0U] = (uint32_t)0x983e5152U;
 c000822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c000824:	4a6e      	ldr	r2, [pc, #440]	; (c0009e0 <Hacl_Impl_SHA2_256_init+0x2e4>)
 c000826:	601a      	str	r2, [r3, #0]
  p16[1U] = (uint32_t)0xa831c66dU;
 c000828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00082a:	3304      	adds	r3, #4
 c00082c:	4a6d      	ldr	r2, [pc, #436]	; (c0009e4 <Hacl_Impl_SHA2_256_init+0x2e8>)
 c00082e:	601a      	str	r2, [r3, #0]
  p16[2U] = (uint32_t)0xb00327c8U;
 c000830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c000832:	3308      	adds	r3, #8
 c000834:	4a6c      	ldr	r2, [pc, #432]	; (c0009e8 <Hacl_Impl_SHA2_256_init+0x2ec>)
 c000836:	601a      	str	r2, [r3, #0]
  p16[3U] = (uint32_t)0xbf597fc7U;
 c000838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00083a:	330c      	adds	r3, #12
 c00083c:	4a6b      	ldr	r2, [pc, #428]	; (c0009ec <Hacl_Impl_SHA2_256_init+0x2f0>)
 c00083e:	601a      	str	r2, [r3, #0]
  p26[0U] = (uint32_t)0xc6e00bf3U;
 c000840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c000842:	4a6b      	ldr	r2, [pc, #428]	; (c0009f0 <Hacl_Impl_SHA2_256_init+0x2f4>)
 c000844:	601a      	str	r2, [r3, #0]
  p26[1U] = (uint32_t)0xd5a79147U;
 c000846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c000848:	3304      	adds	r3, #4
 c00084a:	4a6a      	ldr	r2, [pc, #424]	; (c0009f4 <Hacl_Impl_SHA2_256_init+0x2f8>)
 c00084c:	601a      	str	r2, [r3, #0]
  p26[2U] = (uint32_t)0x06ca6351U;
 c00084e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c000850:	3308      	adds	r3, #8
 c000852:	4a69      	ldr	r2, [pc, #420]	; (c0009f8 <Hacl_Impl_SHA2_256_init+0x2fc>)
 c000854:	601a      	str	r2, [r3, #0]
  p26[3U] = (uint32_t)0x14292967U;
 c000856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c000858:	330c      	adds	r3, #12
 c00085a:	4a68      	ldr	r2, [pc, #416]	; (c0009fc <Hacl_Impl_SHA2_256_init+0x300>)
 c00085c:	601a      	str	r2, [r3, #0]
  uint32_t *p17 = p3;
 c00085e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c000860:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t *p27 = p3 + (uint32_t)8U;
 c000862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c000864:	3320      	adds	r3, #32
 c000866:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t *p18 = p17;
 c000868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c00086a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t *p28 = p17 + (uint32_t)4U;
 c00086c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c00086e:	3310      	adds	r3, #16
 c000870:	633b      	str	r3, [r7, #48]	; 0x30
  p18[0U] = (uint32_t)0x27b70a85U;
 c000872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c000874:	4a62      	ldr	r2, [pc, #392]	; (c000a00 <Hacl_Impl_SHA2_256_init+0x304>)
 c000876:	601a      	str	r2, [r3, #0]
  p18[1U] = (uint32_t)0x2e1b2138U;
 c000878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00087a:	3304      	adds	r3, #4
 c00087c:	4a61      	ldr	r2, [pc, #388]	; (c000a04 <Hacl_Impl_SHA2_256_init+0x308>)
 c00087e:	601a      	str	r2, [r3, #0]
  p18[2U] = (uint32_t)0x4d2c6dfcU;
 c000880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c000882:	3308      	adds	r3, #8
 c000884:	4a60      	ldr	r2, [pc, #384]	; (c000a08 <Hacl_Impl_SHA2_256_init+0x30c>)
 c000886:	601a      	str	r2, [r3, #0]
  p18[3U] = (uint32_t)0x53380d13U;
 c000888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00088a:	330c      	adds	r3, #12
 c00088c:	4a5f      	ldr	r2, [pc, #380]	; (c000a0c <Hacl_Impl_SHA2_256_init+0x310>)
 c00088e:	601a      	str	r2, [r3, #0]
  p28[0U] = (uint32_t)0x650a7354U;
 c000890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c000892:	4a5f      	ldr	r2, [pc, #380]	; (c000a10 <Hacl_Impl_SHA2_256_init+0x314>)
 c000894:	601a      	str	r2, [r3, #0]
  p28[1U] = (uint32_t)0x766a0abbU;
 c000896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c000898:	3304      	adds	r3, #4
 c00089a:	4a5e      	ldr	r2, [pc, #376]	; (c000a14 <Hacl_Impl_SHA2_256_init+0x318>)
 c00089c:	601a      	str	r2, [r3, #0]
  p28[2U] = (uint32_t)0x81c2c92eU;
 c00089e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c0008a0:	3308      	adds	r3, #8
 c0008a2:	4a5d      	ldr	r2, [pc, #372]	; (c000a18 <Hacl_Impl_SHA2_256_init+0x31c>)
 c0008a4:	601a      	str	r2, [r3, #0]
  p28[3U] = (uint32_t)0x92722c85U;
 c0008a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c0008a8:	330c      	adds	r3, #12
 c0008aa:	4a5c      	ldr	r2, [pc, #368]	; (c000a1c <Hacl_Impl_SHA2_256_init+0x320>)
 c0008ac:	601a      	str	r2, [r3, #0]
  uint32_t *p19 = p27;
 c0008ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t *p29 = p27 + (uint32_t)4U;
 c0008b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0008b4:	3310      	adds	r3, #16
 c0008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  p19[0U] = (uint32_t)0xa2bfe8a1U;
 c0008b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0008ba:	4a59      	ldr	r2, [pc, #356]	; (c000a20 <Hacl_Impl_SHA2_256_init+0x324>)
 c0008bc:	601a      	str	r2, [r3, #0]
  p19[1U] = (uint32_t)0xa81a664bU;
 c0008be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0008c0:	3304      	adds	r3, #4
 c0008c2:	4a58      	ldr	r2, [pc, #352]	; (c000a24 <Hacl_Impl_SHA2_256_init+0x328>)
 c0008c4:	601a      	str	r2, [r3, #0]
  p19[2U] = (uint32_t)0xc24b8b70U;
 c0008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0008c8:	3308      	adds	r3, #8
 c0008ca:	4a57      	ldr	r2, [pc, #348]	; (c000a28 <Hacl_Impl_SHA2_256_init+0x32c>)
 c0008cc:	601a      	str	r2, [r3, #0]
  p19[3U] = (uint32_t)0xc76c51a3U;
 c0008ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0008d0:	330c      	adds	r3, #12
 c0008d2:	4a56      	ldr	r2, [pc, #344]	; (c000a2c <Hacl_Impl_SHA2_256_init+0x330>)
 c0008d4:	601a      	str	r2, [r3, #0]
  p29[0U] = (uint32_t)0xd192e819U;
 c0008d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0008d8:	4a55      	ldr	r2, [pc, #340]	; (c000a30 <Hacl_Impl_SHA2_256_init+0x334>)
 c0008da:	601a      	str	r2, [r3, #0]
  p29[1U] = (uint32_t)0xd6990624U;
 c0008dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0008de:	3304      	adds	r3, #4
 c0008e0:	4a54      	ldr	r2, [pc, #336]	; (c000a34 <Hacl_Impl_SHA2_256_init+0x338>)
 c0008e2:	601a      	str	r2, [r3, #0]
  p29[2U] = (uint32_t)0xf40e3585U;
 c0008e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0008e6:	3308      	adds	r3, #8
 c0008e8:	4a53      	ldr	r2, [pc, #332]	; (c000a38 <Hacl_Impl_SHA2_256_init+0x33c>)
 c0008ea:	601a      	str	r2, [r3, #0]
  p29[3U] = (uint32_t)0x106aa070U;
 c0008ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0008ee:	330c      	adds	r3, #12
 c0008f0:	4a52      	ldr	r2, [pc, #328]	; (c000a3c <Hacl_Impl_SHA2_256_init+0x340>)
 c0008f2:	601a      	str	r2, [r3, #0]
  uint32_t *p110 = p4;
 c0008f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c0008f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t *p210 = p4 + (uint32_t)8U;
 c0008f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c0008fa:	3320      	adds	r3, #32
 c0008fc:	623b      	str	r3, [r7, #32]
  uint32_t *p1 = p110;
 c0008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000900:	61fb      	str	r3, [r7, #28]
  uint32_t *p211 = p110 + (uint32_t)4U;
 c000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000904:	3310      	adds	r3, #16
 c000906:	61bb      	str	r3, [r7, #24]
  p1[0U] = (uint32_t)0x19a4c116U;
 c000908:	69fb      	ldr	r3, [r7, #28]
 c00090a:	4a4d      	ldr	r2, [pc, #308]	; (c000a40 <Hacl_Impl_SHA2_256_init+0x344>)
 c00090c:	601a      	str	r2, [r3, #0]
  p1[1U] = (uint32_t)0x1e376c08U;
 c00090e:	69fb      	ldr	r3, [r7, #28]
 c000910:	3304      	adds	r3, #4
 c000912:	4a4c      	ldr	r2, [pc, #304]	; (c000a44 <Hacl_Impl_SHA2_256_init+0x348>)
 c000914:	601a      	str	r2, [r3, #0]
  p1[2U] = (uint32_t)0x2748774cU;
 c000916:	69fb      	ldr	r3, [r7, #28]
 c000918:	3308      	adds	r3, #8
 c00091a:	4a4b      	ldr	r2, [pc, #300]	; (c000a48 <Hacl_Impl_SHA2_256_init+0x34c>)
 c00091c:	601a      	str	r2, [r3, #0]
  p1[3U] = (uint32_t)0x34b0bcb5U;
 c00091e:	69fb      	ldr	r3, [r7, #28]
 c000920:	330c      	adds	r3, #12
 c000922:	4a4a      	ldr	r2, [pc, #296]	; (c000a4c <Hacl_Impl_SHA2_256_init+0x350>)
 c000924:	601a      	str	r2, [r3, #0]
  p211[0U] = (uint32_t)0x391c0cb3U;
 c000926:	69bb      	ldr	r3, [r7, #24]
 c000928:	4a49      	ldr	r2, [pc, #292]	; (c000a50 <Hacl_Impl_SHA2_256_init+0x354>)
 c00092a:	601a      	str	r2, [r3, #0]
  p211[1U] = (uint32_t)0x4ed8aa4aU;
 c00092c:	69bb      	ldr	r3, [r7, #24]
 c00092e:	3304      	adds	r3, #4
 c000930:	4a48      	ldr	r2, [pc, #288]	; (c000a54 <Hacl_Impl_SHA2_256_init+0x358>)
 c000932:	601a      	str	r2, [r3, #0]
  p211[2U] = (uint32_t)0x5b9cca4fU;
 c000934:	69bb      	ldr	r3, [r7, #24]
 c000936:	3308      	adds	r3, #8
 c000938:	4a47      	ldr	r2, [pc, #284]	; (c000a58 <Hacl_Impl_SHA2_256_init+0x35c>)
 c00093a:	601a      	str	r2, [r3, #0]
  p211[3U] = (uint32_t)0x682e6ff3U;
 c00093c:	69bb      	ldr	r3, [r7, #24]
 c00093e:	330c      	adds	r3, #12
 c000940:	4a46      	ldr	r2, [pc, #280]	; (c000a5c <Hacl_Impl_SHA2_256_init+0x360>)
 c000942:	601a      	str	r2, [r3, #0]
  uint32_t *p111 = p210;
 c000944:	6a3b      	ldr	r3, [r7, #32]
 c000946:	617b      	str	r3, [r7, #20]
  uint32_t *p212 = p210 + (uint32_t)4U;
 c000948:	6a3b      	ldr	r3, [r7, #32]
 c00094a:	3310      	adds	r3, #16
 c00094c:	613b      	str	r3, [r7, #16]
  p111[0U] = (uint32_t)0x748f82eeU;
 c00094e:	697b      	ldr	r3, [r7, #20]
 c000950:	4a43      	ldr	r2, [pc, #268]	; (c000a60 <Hacl_Impl_SHA2_256_init+0x364>)
 c000952:	601a      	str	r2, [r3, #0]
  p111[1U] = (uint32_t)0x78a5636fU;
 c000954:	697b      	ldr	r3, [r7, #20]
 c000956:	3304      	adds	r3, #4
 c000958:	4a42      	ldr	r2, [pc, #264]	; (c000a64 <Hacl_Impl_SHA2_256_init+0x368>)
 c00095a:	601a      	str	r2, [r3, #0]
  p111[2U] = (uint32_t)0x84c87814U;
 c00095c:	697b      	ldr	r3, [r7, #20]
 c00095e:	3308      	adds	r3, #8
 c000960:	4a41      	ldr	r2, [pc, #260]	; (c000a68 <Hacl_Impl_SHA2_256_init+0x36c>)
 c000962:	601a      	str	r2, [r3, #0]
  p111[3U] = (uint32_t)0x8cc70208U;
 c000964:	697b      	ldr	r3, [r7, #20]
 c000966:	330c      	adds	r3, #12
 c000968:	4a40      	ldr	r2, [pc, #256]	; (c000a6c <Hacl_Impl_SHA2_256_init+0x370>)
 c00096a:	601a      	str	r2, [r3, #0]
  p212[0U] = (uint32_t)0x90befffaU;
 c00096c:	693b      	ldr	r3, [r7, #16]
 c00096e:	4a40      	ldr	r2, [pc, #256]	; (c000a70 <Hacl_Impl_SHA2_256_init+0x374>)
 c000970:	601a      	str	r2, [r3, #0]
  p212[1U] = (uint32_t)0xa4506cebU;
 c000972:	693b      	ldr	r3, [r7, #16]
 c000974:	3304      	adds	r3, #4
 c000976:	4a3f      	ldr	r2, [pc, #252]	; (c000a74 <Hacl_Impl_SHA2_256_init+0x378>)
 c000978:	601a      	str	r2, [r3, #0]
  p212[2U] = (uint32_t)0xbef9a3f7U;
 c00097a:	693b      	ldr	r3, [r7, #16]
 c00097c:	e07c      	b.n	c000a78 <Hacl_Impl_SHA2_256_init+0x37c>
 c00097e:	bf00      	nop
 c000980:	428a2f98 	.word	0x428a2f98
 c000984:	71374491 	.word	0x71374491
 c000988:	b5c0fbcf 	.word	0xb5c0fbcf
 c00098c:	e9b5dba5 	.word	0xe9b5dba5
 c000990:	3956c25b 	.word	0x3956c25b
 c000994:	59f111f1 	.word	0x59f111f1
 c000998:	923f82a4 	.word	0x923f82a4
 c00099c:	ab1c5ed5 	.word	0xab1c5ed5
 c0009a0:	d807aa98 	.word	0xd807aa98
 c0009a4:	12835b01 	.word	0x12835b01
 c0009a8:	243185be 	.word	0x243185be
 c0009ac:	550c7dc3 	.word	0x550c7dc3
 c0009b0:	72be5d74 	.word	0x72be5d74
 c0009b4:	80deb1fe 	.word	0x80deb1fe
 c0009b8:	9bdc06a7 	.word	0x9bdc06a7
 c0009bc:	c19bf174 	.word	0xc19bf174
 c0009c0:	e49b69c1 	.word	0xe49b69c1
 c0009c4:	efbe4786 	.word	0xefbe4786
 c0009c8:	0fc19dc6 	.word	0x0fc19dc6
 c0009cc:	240ca1cc 	.word	0x240ca1cc
 c0009d0:	2de92c6f 	.word	0x2de92c6f
 c0009d4:	4a7484aa 	.word	0x4a7484aa
 c0009d8:	5cb0a9dc 	.word	0x5cb0a9dc
 c0009dc:	76f988da 	.word	0x76f988da
 c0009e0:	983e5152 	.word	0x983e5152
 c0009e4:	a831c66d 	.word	0xa831c66d
 c0009e8:	b00327c8 	.word	0xb00327c8
 c0009ec:	bf597fc7 	.word	0xbf597fc7
 c0009f0:	c6e00bf3 	.word	0xc6e00bf3
 c0009f4:	d5a79147 	.word	0xd5a79147
 c0009f8:	06ca6351 	.word	0x06ca6351
 c0009fc:	14292967 	.word	0x14292967
 c000a00:	27b70a85 	.word	0x27b70a85
 c000a04:	2e1b2138 	.word	0x2e1b2138
 c000a08:	4d2c6dfc 	.word	0x4d2c6dfc
 c000a0c:	53380d13 	.word	0x53380d13
 c000a10:	650a7354 	.word	0x650a7354
 c000a14:	766a0abb 	.word	0x766a0abb
 c000a18:	81c2c92e 	.word	0x81c2c92e
 c000a1c:	92722c85 	.word	0x92722c85
 c000a20:	a2bfe8a1 	.word	0xa2bfe8a1
 c000a24:	a81a664b 	.word	0xa81a664b
 c000a28:	c24b8b70 	.word	0xc24b8b70
 c000a2c:	c76c51a3 	.word	0xc76c51a3
 c000a30:	d192e819 	.word	0xd192e819
 c000a34:	d6990624 	.word	0xd6990624
 c000a38:	f40e3585 	.word	0xf40e3585
 c000a3c:	106aa070 	.word	0x106aa070
 c000a40:	19a4c116 	.word	0x19a4c116
 c000a44:	1e376c08 	.word	0x1e376c08
 c000a48:	2748774c 	.word	0x2748774c
 c000a4c:	34b0bcb5 	.word	0x34b0bcb5
 c000a50:	391c0cb3 	.word	0x391c0cb3
 c000a54:	4ed8aa4a 	.word	0x4ed8aa4a
 c000a58:	5b9cca4f 	.word	0x5b9cca4f
 c000a5c:	682e6ff3 	.word	0x682e6ff3
 c000a60:	748f82ee 	.word	0x748f82ee
 c000a64:	78a5636f 	.word	0x78a5636f
 c000a68:	84c87814 	.word	0x84c87814
 c000a6c:	8cc70208 	.word	0x8cc70208
 c000a70:	90befffa 	.word	0x90befffa
 c000a74:	a4506ceb 	.word	0xa4506ceb
 c000a78:	3308      	adds	r3, #8
 c000a7a:	4a18      	ldr	r2, [pc, #96]	; (c000adc <Hacl_Impl_SHA2_256_init+0x3e0>)
 c000a7c:	601a      	str	r2, [r3, #0]
  p212[3U] = (uint32_t)0xc67178f2U;
 c000a7e:	693b      	ldr	r3, [r7, #16]
 c000a80:	330c      	adds	r3, #12
 c000a82:	4a17      	ldr	r2, [pc, #92]	; (c000ae0 <Hacl_Impl_SHA2_256_init+0x3e4>)
 c000a84:	601a      	str	r2, [r3, #0]
  uint32_t *p112 = h_01;
 c000a86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000a8a:	60fb      	str	r3, [r7, #12]
  uint32_t *p2 = h_01 + (uint32_t)4U;
 c000a8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000a90:	3310      	adds	r3, #16
 c000a92:	60bb      	str	r3, [r7, #8]
  p112[0U] = (uint32_t)0x6a09e667U;
 c000a94:	68fb      	ldr	r3, [r7, #12]
 c000a96:	4a13      	ldr	r2, [pc, #76]	; (c000ae4 <Hacl_Impl_SHA2_256_init+0x3e8>)
 c000a98:	601a      	str	r2, [r3, #0]
  p112[1U] = (uint32_t)0xbb67ae85U;
 c000a9a:	68fb      	ldr	r3, [r7, #12]
 c000a9c:	3304      	adds	r3, #4
 c000a9e:	4a12      	ldr	r2, [pc, #72]	; (c000ae8 <Hacl_Impl_SHA2_256_init+0x3ec>)
 c000aa0:	601a      	str	r2, [r3, #0]
  p112[2U] = (uint32_t)0x3c6ef372U;
 c000aa2:	68fb      	ldr	r3, [r7, #12]
 c000aa4:	3308      	adds	r3, #8
 c000aa6:	4a11      	ldr	r2, [pc, #68]	; (c000aec <Hacl_Impl_SHA2_256_init+0x3f0>)
 c000aa8:	601a      	str	r2, [r3, #0]
  p112[3U] = (uint32_t)0xa54ff53aU;
 c000aaa:	68fb      	ldr	r3, [r7, #12]
 c000aac:	330c      	adds	r3, #12
 c000aae:	4a10      	ldr	r2, [pc, #64]	; (c000af0 <Hacl_Impl_SHA2_256_init+0x3f4>)
 c000ab0:	601a      	str	r2, [r3, #0]
  p2[0U] = (uint32_t)0x510e527fU;
 c000ab2:	68bb      	ldr	r3, [r7, #8]
 c000ab4:	4a0f      	ldr	r2, [pc, #60]	; (c000af4 <Hacl_Impl_SHA2_256_init+0x3f8>)
 c000ab6:	601a      	str	r2, [r3, #0]
  p2[1U] = (uint32_t)0x9b05688cU;
 c000ab8:	68bb      	ldr	r3, [r7, #8]
 c000aba:	3304      	adds	r3, #4
 c000abc:	4a0e      	ldr	r2, [pc, #56]	; (c000af8 <Hacl_Impl_SHA2_256_init+0x3fc>)
 c000abe:	601a      	str	r2, [r3, #0]
  p2[2U] = (uint32_t)0x1f83d9abU;
 c000ac0:	68bb      	ldr	r3, [r7, #8]
 c000ac2:	3308      	adds	r3, #8
 c000ac4:	4a0d      	ldr	r2, [pc, #52]	; (c000afc <Hacl_Impl_SHA2_256_init+0x400>)
 c000ac6:	601a      	str	r2, [r3, #0]
  p2[3U] = (uint32_t)0x5be0cd19U;
 c000ac8:	68bb      	ldr	r3, [r7, #8]
 c000aca:	330c      	adds	r3, #12
 c000acc:	4a0c      	ldr	r2, [pc, #48]	; (c000b00 <Hacl_Impl_SHA2_256_init+0x404>)
 c000ace:	601a      	str	r2, [r3, #0]
}
 c000ad0:	bf00      	nop
 c000ad2:	378c      	adds	r7, #140	; 0x8c
 c000ad4:	46bd      	mov	sp, r7
 c000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ada:	4770      	bx	lr
 c000adc:	bef9a3f7 	.word	0xbef9a3f7
 c000ae0:	c67178f2 	.word	0xc67178f2
 c000ae4:	6a09e667 	.word	0x6a09e667
 c000ae8:	bb67ae85 	.word	0xbb67ae85
 c000aec:	3c6ef372 	.word	0x3c6ef372
 c000af0:	a54ff53a 	.word	0xa54ff53a
 c000af4:	510e527f 	.word	0x510e527f
 c000af8:	9b05688c 	.word	0x9b05688c
 c000afc:	1f83d9ab 	.word	0x1f83d9ab
 c000b00:	5be0cd19 	.word	0x5be0cd19

0c000b04 <Hacl_Impl_SHA2_256_update>:

static void Hacl_Impl_SHA2_256_update(uint32_t *state, uint8_t *data)
{
 c000b04:	b580      	push	{r7, lr}
 c000b06:	b0bc      	sub	sp, #240	; 0xf0
 c000b08:	af00      	add	r7, sp, #0
 c000b0a:	6078      	str	r0, [r7, #4]
 c000b0c:	6039      	str	r1, [r7, #0]
  uint32_t data_w[16U] = { 0U };
 c000b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c000b12:	2240      	movs	r2, #64	; 0x40
 c000b14:	2100      	movs	r1, #0
 c000b16:	4618      	mov	r0, r3
 c000b18:	f008 fe7d 	bl	c009816 <memset>
  Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes(data_w, data, (uint32_t)16U);
 c000b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c000b20:	2210      	movs	r2, #16
 c000b22:	6839      	ldr	r1, [r7, #0]
 c000b24:	4618      	mov	r0, r3
 c000b26:	f7ff fd7f 	bl	c000628 <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes>
  uint32_t *hash_w = state + (uint32_t)128U;
 c000b2a:	687b      	ldr	r3, [r7, #4]
 c000b2c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c000b30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t *ws_w = state + (uint32_t)64U;
 c000b34:	687b      	ldr	r3, [r7, #4]
 c000b36:	f503 7380 	add.w	r3, r3, #256	; 0x100
 c000b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t *k_w = state;
 c000b3e:	687b      	ldr	r3, [r7, #4]
 c000b40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint32_t *counter_w = state + (uint32_t)136U;
 c000b44:	687b      	ldr	r3, [r7, #4]
 c000b46:	f503 7308 	add.w	r3, r3, #544	; 0x220
 c000b4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)16U; i = i + (uint32_t)1U)
 c000b4e:	2300      	movs	r3, #0
 c000b50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000b54:	e014      	b.n	c000b80 <Hacl_Impl_SHA2_256_update+0x7c>
  {
    uint32_t b = data_w[i];
 c000b56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000b5a:	009b      	lsls	r3, r3, #2
 c000b5c:	33f0      	adds	r3, #240	; 0xf0
 c000b5e:	443b      	add	r3, r7
 c000b60:	f853 3cc4 	ldr.w	r3, [r3, #-196]
 c000b64:	66fb      	str	r3, [r7, #108]	; 0x6c
    ws_w[i] = b;
 c000b66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000b6a:	009b      	lsls	r3, r3, #2
 c000b6c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000b70:	4413      	add	r3, r2
 c000b72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 c000b74:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)16U; i = i + (uint32_t)1U)
 c000b76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000b7a:	3301      	adds	r3, #1
 c000b7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000b80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000b84:	2b0f      	cmp	r3, #15
 c000b86:	d9e6      	bls.n	c000b56 <Hacl_Impl_SHA2_256_update+0x52>
  }
  for (uint32_t i = (uint32_t)16U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000b88:	2310      	movs	r3, #16
 c000b8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 c000b8e:	e050      	b.n	c000c32 <Hacl_Impl_SHA2_256_update+0x12e>
  {
    uint32_t t16 = ws_w[i - (uint32_t)16U];
 c000b90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000b94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c000b98:	3b10      	subs	r3, #16
 c000b9a:	009b      	lsls	r3, r3, #2
 c000b9c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000ba0:	4413      	add	r3, r2
 c000ba2:	681b      	ldr	r3, [r3, #0]
 c000ba4:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint32_t t15 = ws_w[i - (uint32_t)15U];
 c000ba6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000baa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c000bae:	3b0f      	subs	r3, #15
 c000bb0:	009b      	lsls	r3, r3, #2
 c000bb2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000bb6:	4413      	add	r3, r2
 c000bb8:	681b      	ldr	r3, [r3, #0]
 c000bba:	67bb      	str	r3, [r7, #120]	; 0x78
    uint32_t t7 = ws_w[i - (uint32_t)7U];
 c000bbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000bc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c000bc4:	3b07      	subs	r3, #7
 c000bc6:	009b      	lsls	r3, r3, #2
 c000bc8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000bcc:	4413      	add	r3, r2
 c000bce:	681b      	ldr	r3, [r3, #0]
 c000bd0:	677b      	str	r3, [r7, #116]	; 0x74
    uint32_t t2 = ws_w[i - (uint32_t)2U];
 c000bd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000bd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c000bda:	3b02      	subs	r3, #2
 c000bdc:	009b      	lsls	r3, r3, #2
 c000bde:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000be2:	4413      	add	r3, r2
 c000be4:	681b      	ldr	r3, [r3, #0]
 c000be6:	673b      	str	r3, [r7, #112]	; 0x70
    ws_w[i] =
      ((t2 >> (uint32_t)17U | t2 << ((uint32_t)32U - (uint32_t)17U))
 c000be8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c000bea:	ea4f 4273 	mov.w	r2, r3, ror #17
      ^ ((t2 >> (uint32_t)19U | t2 << ((uint32_t)32U - (uint32_t)19U)) ^ t2 >> (uint32_t)10U))
 c000bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c000bf0:	ea4f 41f3 	mov.w	r1, r3, ror #19
 c000bf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c000bf6:	0a9b      	lsrs	r3, r3, #10
 c000bf8:	404b      	eors	r3, r1
 c000bfa:	405a      	eors	r2, r3
      +
 c000bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c000bfe:	441a      	add	r2, r3
        t7
        +
          ((t15 >> (uint32_t)7U | t15 << ((uint32_t)32U - (uint32_t)7U))
 c000c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c000c02:	ea4f 11f3 	mov.w	r1, r3, ror #7
          ^ ((t15 >> (uint32_t)18U | t15 << ((uint32_t)32U - (uint32_t)18U)) ^ t15 >> (uint32_t)3U))
 c000c06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c000c08:	ea4f 40b3 	mov.w	r0, r3, ror #18
 c000c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c000c0e:	08db      	lsrs	r3, r3, #3
 c000c10:	4043      	eors	r3, r0
 c000c12:	404b      	eors	r3, r1
        +
 c000c14:	18d1      	adds	r1, r2, r3
    ws_w[i] =
 c000c16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000c1a:	009b      	lsls	r3, r3, #2
 c000c1c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000c20:	4413      	add	r3, r2
          + t16;
 c000c22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 c000c24:	440a      	add	r2, r1
    ws_w[i] =
 c000c26:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)16U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000c28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000c2c:	3301      	adds	r3, #1
 c000c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 c000c32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000c36:	2b3f      	cmp	r3, #63	; 0x3f
 c000c38:	d9aa      	bls.n	c000b90 <Hacl_Impl_SHA2_256_update+0x8c>
  }
  uint32_t hash_0[8U] = { 0U };
 c000c3a:	f107 030c 	add.w	r3, r7, #12
 c000c3e:	2220      	movs	r2, #32
 c000c40:	2100      	movs	r1, #0
 c000c42:	4618      	mov	r0, r3
 c000c44:	f008 fde7 	bl	c009816 <memset>
  memcpy(hash_0, hash_w, (uint32_t)8U * sizeof hash_w[0U]);
 c000c48:	f107 030c 	add.w	r3, r7, #12
 c000c4c:	2220      	movs	r2, #32
 c000c4e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 c000c52:	4618      	mov	r0, r3
 c000c54:	f008 fdd2 	bl	c0097fc <memcpy>
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000c58:	2300      	movs	r3, #0
 c000c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c000c5e:	e0b8      	b.n	c000dd2 <Hacl_Impl_SHA2_256_update+0x2ce>
  {
    uint32_t a = hash_0[0U];
 c000c60:	68fb      	ldr	r3, [r7, #12]
 c000c62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    uint32_t b = hash_0[1U];
 c000c66:	693b      	ldr	r3, [r7, #16]
 c000c68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    uint32_t c = hash_0[2U];
 c000c6c:	697b      	ldr	r3, [r7, #20]
 c000c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    uint32_t d = hash_0[3U];
 c000c72:	69bb      	ldr	r3, [r7, #24]
 c000c74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint32_t e = hash_0[4U];
 c000c78:	69fb      	ldr	r3, [r7, #28]
 c000c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    uint32_t f1 = hash_0[5U];
 c000c7e:	6a3b      	ldr	r3, [r7, #32]
 c000c80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    uint32_t g = hash_0[6U];
 c000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000c86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    uint32_t h = hash_0[7U];
 c000c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c000c8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    uint32_t kt = k_w[i];
 c000c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000c94:	009b      	lsls	r3, r3, #2
 c000c96:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 c000c9a:	4413      	add	r3, r2
 c000c9c:	681b      	ldr	r3, [r3, #0]
 c000c9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t wst = ws_w[i];
 c000ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000ca6:	009b      	lsls	r3, r3, #2
 c000ca8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000cac:	4413      	add	r3, r2
 c000cae:	681b      	ldr	r3, [r3, #0]
 c000cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint32_t
    t1 =
      h
      +
        ((e >> (uint32_t)6U | e << ((uint32_t)32U - (uint32_t)6U))
 c000cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000cb8:	ea4f 12b3 	mov.w	r2, r3, ror #6
        ^
          ((e >> (uint32_t)11U | e << ((uint32_t)32U - (uint32_t)11U))
 c000cbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000cc0:	ea4f 21f3 	mov.w	r1, r3, ror #11
          ^ (e >> (uint32_t)25U | e << ((uint32_t)32U - (uint32_t)25U))))
 c000cc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000cc8:	ea4f 6373 	mov.w	r3, r3, ror #25
 c000ccc:	404b      	eors	r3, r1
        ^
 c000cce:	405a      	eors	r2, r3
      +
 c000cd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 c000cd4:	441a      	add	r2, r3
      + ((e & f1) ^ (~e & g))
 c000cd6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 c000cda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 c000cde:	4019      	ands	r1, r3
 c000ce0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000ce4:	43d8      	mvns	r0, r3
 c000ce6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 c000cea:	4003      	ands	r3, r0
 c000cec:	404b      	eors	r3, r1
 c000cee:	441a      	add	r2, r3
      + kt
 c000cf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 c000cf4:	4413      	add	r3, r2
    t1 =
 c000cf6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 c000cfa:	4413      	add	r3, r2
 c000cfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      + wst;
    uint32_t
    t2 =
      ((a >> (uint32_t)2U | a << ((uint32_t)32U - (uint32_t)2U))
 c000d00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c000d04:	ea4f 02b3 	mov.w	r2, r3, ror #2
      ^
        ((a >> (uint32_t)13U | a << ((uint32_t)32U - (uint32_t)13U))
 c000d08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c000d0c:	ea4f 3173 	mov.w	r1, r3, ror #13
        ^ (a >> (uint32_t)22U | a << ((uint32_t)32U - (uint32_t)22U))))
 c000d10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c000d14:	ea4f 53b3 	mov.w	r3, r3, ror #22
 c000d18:	404b      	eors	r3, r1
      ^
 c000d1a:	405a      	eors	r2, r3
      + ((a & b) ^ ((a & c) ^ (b & c)));
 c000d1c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 c000d20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c000d24:	4019      	ands	r1, r3
 c000d26:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 c000d2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c000d2e:	4058      	eors	r0, r3
 c000d30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000d34:	4003      	ands	r3, r0
 c000d36:	404b      	eors	r3, r1
    t2 =
 c000d38:	4413      	add	r3, r2
 c000d3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    uint32_t x1 = t1 + t2;
 c000d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 c000d42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c000d46:	4413      	add	r3, r2
 c000d48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint32_t x5 = d + t1;
 c000d4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 c000d50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 c000d54:	4413      	add	r3, r2
 c000d56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    uint32_t *p1 = hash_0;
 c000d5a:	f107 030c 	add.w	r3, r7, #12
 c000d5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t *p2 = hash_0 + (uint32_t)4U;
 c000d62:	f107 030c 	add.w	r3, r7, #12
 c000d66:	3310      	adds	r3, #16
 c000d68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    p1[0U] = x1;
 c000d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000d70:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 c000d74:	601a      	str	r2, [r3, #0]
    p1[1U] = a;
 c000d76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000d7a:	3304      	adds	r3, #4
 c000d7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 c000d80:	601a      	str	r2, [r3, #0]
    p1[2U] = b;
 c000d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000d86:	3308      	adds	r3, #8
 c000d88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 c000d8c:	601a      	str	r2, [r3, #0]
    p1[3U] = c;
 c000d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000d92:	330c      	adds	r3, #12
 c000d94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 c000d98:	601a      	str	r2, [r3, #0]
    p2[0U] = x5;
 c000d9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000d9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 c000da2:	601a      	str	r2, [r3, #0]
    p2[1U] = e;
 c000da4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000da8:	3304      	adds	r3, #4
 c000daa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 c000dae:	601a      	str	r2, [r3, #0]
    p2[2U] = f1;
 c000db0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000db4:	3308      	adds	r3, #8
 c000db6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 c000dba:	601a      	str	r2, [r3, #0]
    p2[3U] = g;
 c000dbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000dc0:	330c      	adds	r3, #12
 c000dc2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 c000dc6:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000dcc:	3301      	adds	r3, #1
 c000dce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c000dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000dd6:	2b3f      	cmp	r3, #63	; 0x3f
 c000dd8:	f67f af42 	bls.w	c000c60 <Hacl_Impl_SHA2_256_update+0x15c>
  }
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)8U; i = i + (uint32_t)1U)
 c000ddc:	2300      	movs	r3, #0
 c000dde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c000de2:	e022      	b.n	c000e2a <Hacl_Impl_SHA2_256_update+0x326>
  {
    uint32_t xi = hash_w[i];
 c000de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000de8:	009b      	lsls	r3, r3, #2
 c000dea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 c000dee:	4413      	add	r3, r2
 c000df0:	681b      	ldr	r3, [r3, #0]
 c000df2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32_t yi = hash_0[i];
 c000df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000dfa:	009b      	lsls	r3, r3, #2
 c000dfc:	33f0      	adds	r3, #240	; 0xf0
 c000dfe:	443b      	add	r3, r7
 c000e00:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 c000e04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    hash_w[i] = xi + yi;
 c000e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000e0c:	009b      	lsls	r3, r3, #2
 c000e0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 c000e12:	4413      	add	r3, r2
 c000e14:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 c000e18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 c000e1c:	440a      	add	r2, r1
 c000e1e:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)8U; i = i + (uint32_t)1U)
 c000e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000e24:	3301      	adds	r3, #1
 c000e26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c000e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000e2e:	2b07      	cmp	r3, #7
 c000e30:	d9d8      	bls.n	c000de4 <Hacl_Impl_SHA2_256_update+0x2e0>
  }
  uint32_t c0 = counter_w[0U];
 c000e32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c000e36:	681b      	ldr	r3, [r3, #0]
 c000e38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  uint32_t one1 = (uint32_t)1U;
 c000e3c:	2301      	movs	r3, #1
 c000e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  counter_w[0U] = c0 + one1;
 c000e42:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 c000e46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 c000e4a:	441a      	add	r2, r3
 c000e4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c000e50:	601a      	str	r2, [r3, #0]
}
 c000e52:	bf00      	nop
 c000e54:	37f0      	adds	r7, #240	; 0xf0
 c000e56:	46bd      	mov	sp, r7
 c000e58:	bd80      	pop	{r7, pc}

0c000e5a <Hacl_Impl_SHA2_256_update_multi>:

static void Hacl_Impl_SHA2_256_update_multi(uint32_t *state, uint8_t *data, uint32_t n1)
{
 c000e5a:	b580      	push	{r7, lr}
 c000e5c:	b086      	sub	sp, #24
 c000e5e:	af00      	add	r7, sp, #0
 c000e60:	60f8      	str	r0, [r7, #12]
 c000e62:	60b9      	str	r1, [r7, #8]
 c000e64:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < n1; i = i + (uint32_t)1U)
 c000e66:	2300      	movs	r3, #0
 c000e68:	617b      	str	r3, [r7, #20]
 c000e6a:	e00b      	b.n	c000e84 <Hacl_Impl_SHA2_256_update_multi+0x2a>
  {
    uint8_t *b = data + i * (uint32_t)64U;
 c000e6c:	697b      	ldr	r3, [r7, #20]
 c000e6e:	019b      	lsls	r3, r3, #6
 c000e70:	68ba      	ldr	r2, [r7, #8]
 c000e72:	4413      	add	r3, r2
 c000e74:	613b      	str	r3, [r7, #16]
    Hacl_Impl_SHA2_256_update(state, b);
 c000e76:	6939      	ldr	r1, [r7, #16]
 c000e78:	68f8      	ldr	r0, [r7, #12]
 c000e7a:	f7ff fe43 	bl	c000b04 <Hacl_Impl_SHA2_256_update>
  for (uint32_t i = (uint32_t)0U; i < n1; i = i + (uint32_t)1U)
 c000e7e:	697b      	ldr	r3, [r7, #20]
 c000e80:	3301      	adds	r3, #1
 c000e82:	617b      	str	r3, [r7, #20]
 c000e84:	697a      	ldr	r2, [r7, #20]
 c000e86:	687b      	ldr	r3, [r7, #4]
 c000e88:	429a      	cmp	r2, r3
 c000e8a:	d3ef      	bcc.n	c000e6c <Hacl_Impl_SHA2_256_update_multi+0x12>
  }
}
 c000e8c:	bf00      	nop
 c000e8e:	bf00      	nop
 c000e90:	3718      	adds	r7, #24
 c000e92:	46bd      	mov	sp, r7
 c000e94:	bd80      	pop	{r7, pc}

0c000e96 <Hacl_Impl_SHA2_256_update_last>:

static void Hacl_Impl_SHA2_256_update_last(uint32_t *state, uint8_t *data, uint32_t len)
{
 c000e96:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c000e9a:	b0ba      	sub	sp, #232	; 0xe8
 c000e9c:	af00      	add	r7, sp, #0
 c000e9e:	6278      	str	r0, [r7, #36]	; 0x24
 c000ea0:	6239      	str	r1, [r7, #32]
 c000ea2:	61fa      	str	r2, [r7, #28]
  uint8_t blocks[128U] = { 0U };
 c000ea4:	2300      	movs	r3, #0
 c000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 c000ea8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 c000eac:	237c      	movs	r3, #124	; 0x7c
 c000eae:	461a      	mov	r2, r3
 c000eb0:	2100      	movs	r1, #0
 c000eb2:	f008 fcb0 	bl	c009816 <memset>
  uint32_t nb;
  if (len < (uint32_t)56U)
 c000eb6:	69fb      	ldr	r3, [r7, #28]
 c000eb8:	2b37      	cmp	r3, #55	; 0x37
 c000eba:	d803      	bhi.n	c000ec4 <Hacl_Impl_SHA2_256_update_last+0x2e>
    nb = (uint32_t)1U;
 c000ebc:	2301      	movs	r3, #1
 c000ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c000ec2:	e002      	b.n	c000eca <Hacl_Impl_SHA2_256_update_last+0x34>
  else
    nb = (uint32_t)2U;
 c000ec4:	2302      	movs	r3, #2
 c000ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint8_t *final_blocks;
  if (len < (uint32_t)56U)
 c000eca:	69fb      	ldr	r3, [r7, #28]
 c000ecc:	2b37      	cmp	r3, #55	; 0x37
 c000ece:	d805      	bhi.n	c000edc <Hacl_Impl_SHA2_256_update_last+0x46>
    final_blocks = blocks + (uint32_t)64U;
 c000ed0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 c000ed4:	3340      	adds	r3, #64	; 0x40
 c000ed6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c000eda:	e003      	b.n	c000ee4 <Hacl_Impl_SHA2_256_update_last+0x4e>
  else
    final_blocks = blocks;
 c000edc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 c000ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  memcpy(final_blocks, data, len * sizeof data[0U]);
 c000ee4:	69fa      	ldr	r2, [r7, #28]
 c000ee6:	6a39      	ldr	r1, [r7, #32]
 c000ee8:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 c000eec:	f008 fc86 	bl	c0097fc <memcpy>
  uint32_t n1 = state[136U];
 c000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000ef2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 c000ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint8_t *padding = final_blocks + len;
 c000efa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 c000efe:	69fb      	ldr	r3, [r7, #28]
 c000f00:	4413      	add	r3, r2
 c000f02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t
  pad0len = ((uint32_t)64U - (len + (uint32_t)8U + (uint32_t)1U) % (uint32_t)64U) % (uint32_t)64U;
 c000f06:	69fa      	ldr	r2, [r7, #28]
 c000f08:	f06f 0308 	mvn.w	r3, #8
 c000f0c:	1a9b      	subs	r3, r3, r2
 c000f0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c000f12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint8_t *buf1 = padding;
 c000f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 c000f1a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  uint8_t *buf2 = padding + (uint32_t)1U + pad0len;
 c000f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 c000f22:	3301      	adds	r3, #1
 c000f24:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000f28:	4413      	add	r3, r2
 c000f2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  uint64_t
  encodedlen = ((uint64_t)n1 * (uint64_t)(uint32_t)64U + (uint64_t)len) * (uint64_t)(uint32_t)8U;
 c000f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 c000f32:	2200      	movs	r2, #0
 c000f34:	4698      	mov	r8, r3
 c000f36:	4691      	mov	r9, r2
 c000f38:	f04f 0200 	mov.w	r2, #0
 c000f3c:	f04f 0300 	mov.w	r3, #0
 c000f40:	ea4f 1389 	mov.w	r3, r9, lsl #6
 c000f44:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 c000f48:	ea4f 1288 	mov.w	r2, r8, lsl #6
 c000f4c:	69f9      	ldr	r1, [r7, #28]
 c000f4e:	2000      	movs	r0, #0
 c000f50:	6139      	str	r1, [r7, #16]
 c000f52:	6178      	str	r0, [r7, #20]
 c000f54:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 c000f58:	4641      	mov	r1, r8
 c000f5a:	1854      	adds	r4, r2, r1
 c000f5c:	4649      	mov	r1, r9
 c000f5e:	eb43 0101 	adc.w	r1, r3, r1
 c000f62:	460d      	mov	r5, r1
 c000f64:	f04f 0200 	mov.w	r2, #0
 c000f68:	f04f 0300 	mov.w	r3, #0
 c000f6c:	00eb      	lsls	r3, r5, #3
 c000f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 c000f72:	00e2      	lsls	r2, r4, #3
 c000f74:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  buf1[0U] = (uint8_t)0x80U;
 c000f78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c000f7c:	2280      	movs	r2, #128	; 0x80
 c000f7e:	701a      	strb	r2, [r3, #0]
  store64_be(buf2, encodedlen);
 c000f80:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 c000f84:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 c000f88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c000f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 c000f90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000f94:	0e1a      	lsrs	r2, r3, #24
 c000f96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000f9a:	0a1b      	lsrs	r3, r3, #8
 c000f9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c000fa0:	431a      	orrs	r2, r3
 c000fa2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000fa6:	021b      	lsls	r3, r3, #8
 c000fa8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c000fac:	431a      	orrs	r2, r3
 c000fae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000fb2:	061b      	lsls	r3, r3, #24
 c000fb4:	4313      	orrs	r3, r2
 c000fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 c000fba:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 c000fbe:	f04f 0200 	mov.w	r2, #0
 c000fc2:	f04f 0300 	mov.w	r3, #0
 c000fc6:	000a      	movs	r2, r1
 c000fc8:	2300      	movs	r3, #0
 c000fca:	4613      	mov	r3, r2
 c000fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c000fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000fd4:	0e1a      	lsrs	r2, r3, #24
 c000fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000fda:	0a1b      	lsrs	r3, r3, #8
 c000fdc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c000fe0:	431a      	orrs	r2, r3
 c000fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000fe6:	021b      	lsls	r3, r3, #8
 c000fe8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c000fec:	431a      	orrs	r2, r3
 c000fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000ff2:	061b      	lsls	r3, r3, #24
 c000ff4:	4313      	orrs	r3, r2
 c000ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 c000ffa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c000ffe:	2200      	movs	r2, #0
 c001000:	60bb      	str	r3, [r7, #8]
 c001002:	60fa      	str	r2, [r7, #12]
 c001004:	f04f 0200 	mov.w	r2, #0
 c001008:	f04f 0300 	mov.w	r3, #0
 c00100c:	68b9      	ldr	r1, [r7, #8]
 c00100e:	000b      	movs	r3, r1
 c001010:	2200      	movs	r2, #0
 c001012:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 c001016:	2000      	movs	r0, #0
 c001018:	468a      	mov	sl, r1
 c00101a:	4683      	mov	fp, r0
 c00101c:	ea42 010a 	orr.w	r1, r2, sl
 c001020:	6039      	str	r1, [r7, #0]
 c001022:	ea43 030b 	orr.w	r3, r3, fp
 c001026:	607b      	str	r3, [r7, #4]
 c001028:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00102c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 c001030:	f7ff faea 	bl	c000608 <store64>
  Hacl_Impl_SHA2_256_update_multi(state, final_blocks, nb);
 c001034:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 c001038:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 c00103c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 c00103e:	f7ff ff0c 	bl	c000e5a <Hacl_Impl_SHA2_256_update_multi>
}
 c001042:	bf00      	nop
 c001044:	37e8      	adds	r7, #232	; 0xe8
 c001046:	46bd      	mov	sp, r7
 c001048:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c00104c <Hacl_Impl_SHA2_256_finish>:

static void Hacl_Impl_SHA2_256_finish(uint32_t *state, uint8_t *hash1)
{
 c00104c:	b580      	push	{r7, lr}
 c00104e:	b084      	sub	sp, #16
 c001050:	af00      	add	r7, sp, #0
 c001052:	6078      	str	r0, [r7, #4]
 c001054:	6039      	str	r1, [r7, #0]
  uint32_t *hash_w = state + (uint32_t)128U;
 c001056:	687b      	ldr	r3, [r7, #4]
 c001058:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c00105c:	60fb      	str	r3, [r7, #12]
  Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes(hash1, hash_w, (uint32_t)8U);
 c00105e:	2208      	movs	r2, #8
 c001060:	68f9      	ldr	r1, [r7, #12]
 c001062:	6838      	ldr	r0, [r7, #0]
 c001064:	f7ff fb14 	bl	c000690 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes>
}
 c001068:	bf00      	nop
 c00106a:	3710      	adds	r7, #16
 c00106c:	46bd      	mov	sp, r7
 c00106e:	bd80      	pop	{r7, pc}

0c001070 <Hacl_Impl_SHA2_256_hash>:

static void Hacl_Impl_SHA2_256_hash(uint8_t *hash1, uint8_t *input, uint32_t len)
{
 c001070:	b580      	push	{r7, lr}
 c001072:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 c001076:	af00      	add	r7, sp, #0
 c001078:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c00107c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 c001080:	6018      	str	r0, [r3, #0]
 c001082:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001086:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 c00108a:	6019      	str	r1, [r3, #0]
 c00108c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001090:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c001094:	601a      	str	r2, [r3, #0]
  uint32_t state[137U] = { 0U };
 c001096:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c00109a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 c00109e:	4618      	mov	r0, r3
 c0010a0:	f44f 7309 	mov.w	r3, #548	; 0x224
 c0010a4:	461a      	mov	r2, r3
 c0010a6:	2100      	movs	r1, #0
 c0010a8:	f008 fbb5 	bl	c009816 <memset>
  uint32_t n1 = len / (uint32_t)64U;
 c0010ac:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c0010b0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c0010b4:	681b      	ldr	r3, [r3, #0]
 c0010b6:	099b      	lsrs	r3, r3, #6
 c0010b8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  uint32_t r = len % (uint32_t)64U;
 c0010bc:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c0010c0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c0010c4:	681b      	ldr	r3, [r3, #0]
 c0010c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c0010ca:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  uint8_t *input_blocks = input;
 c0010ce:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c0010d2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 c0010d6:	681b      	ldr	r3, [r3, #0]
 c0010d8:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  uint8_t *input_last = input + n1 * (uint32_t)64U;
 c0010dc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 c0010e0:	019b      	lsls	r3, r3, #6
 c0010e2:	f507 7212 	add.w	r2, r7, #584	; 0x248
 c0010e6:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 c0010ea:	6812      	ldr	r2, [r2, #0]
 c0010ec:	4413      	add	r3, r2
 c0010ee:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
  Hacl_Impl_SHA2_256_init(state);
 c0010f2:	f107 0314 	add.w	r3, r7, #20
 c0010f6:	4618      	mov	r0, r3
 c0010f8:	f7ff fb00 	bl	c0006fc <Hacl_Impl_SHA2_256_init>
  Hacl_Impl_SHA2_256_update_multi(state, input_blocks, n1);
 c0010fc:	f107 0314 	add.w	r3, r7, #20
 c001100:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 c001104:	f8d7 123c 	ldr.w	r1, [r7, #572]	; 0x23c
 c001108:	4618      	mov	r0, r3
 c00110a:	f7ff fea6 	bl	c000e5a <Hacl_Impl_SHA2_256_update_multi>
  Hacl_Impl_SHA2_256_update_last(state, input_last, r);
 c00110e:	f107 0314 	add.w	r3, r7, #20
 c001112:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 c001116:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 c00111a:	4618      	mov	r0, r3
 c00111c:	f7ff febb 	bl	c000e96 <Hacl_Impl_SHA2_256_update_last>
  Hacl_Impl_SHA2_256_finish(state, hash1);
 c001120:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001124:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 c001128:	f107 0214 	add.w	r2, r7, #20
 c00112c:	6819      	ldr	r1, [r3, #0]
 c00112e:	4610      	mov	r0, r2
 c001130:	f7ff ff8c 	bl	c00104c <Hacl_Impl_SHA2_256_finish>
}
 c001134:	bf00      	nop
 c001136:	f507 7712 	add.w	r7, r7, #584	; 0x248
 c00113a:	46bd      	mov	sp, r7
 c00113c:	bd80      	pop	{r7, pc}

0c00113e <Hacl_Impl_HMAC_SHA2_256_xor_bytes_inplace>:

static void Hacl_Impl_HMAC_SHA2_256_xor_bytes_inplace(uint8_t *a, uint8_t *b, uint32_t len)
{
 c00113e:	b480      	push	{r7}
 c001140:	b087      	sub	sp, #28
 c001142:	af00      	add	r7, sp, #0
 c001144:	60f8      	str	r0, [r7, #12]
 c001146:	60b9      	str	r1, [r7, #8]
 c001148:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c00114a:	2300      	movs	r3, #0
 c00114c:	617b      	str	r3, [r7, #20]
 c00114e:	e014      	b.n	c00117a <Hacl_Impl_HMAC_SHA2_256_xor_bytes_inplace+0x3c>
  {
    uint8_t xi = a[i];
 c001150:	68fa      	ldr	r2, [r7, #12]
 c001152:	697b      	ldr	r3, [r7, #20]
 c001154:	4413      	add	r3, r2
 c001156:	781b      	ldrb	r3, [r3, #0]
 c001158:	74fb      	strb	r3, [r7, #19]
    uint8_t yi = b[i];
 c00115a:	68ba      	ldr	r2, [r7, #8]
 c00115c:	697b      	ldr	r3, [r7, #20]
 c00115e:	4413      	add	r3, r2
 c001160:	781b      	ldrb	r3, [r3, #0]
 c001162:	74bb      	strb	r3, [r7, #18]
    a[i] = xi ^ yi;
 c001164:	68fa      	ldr	r2, [r7, #12]
 c001166:	697b      	ldr	r3, [r7, #20]
 c001168:	4413      	add	r3, r2
 c00116a:	7cf9      	ldrb	r1, [r7, #19]
 c00116c:	7cba      	ldrb	r2, [r7, #18]
 c00116e:	404a      	eors	r2, r1
 c001170:	b2d2      	uxtb	r2, r2
 c001172:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c001174:	697b      	ldr	r3, [r7, #20]
 c001176:	3301      	adds	r3, #1
 c001178:	617b      	str	r3, [r7, #20]
 c00117a:	697a      	ldr	r2, [r7, #20]
 c00117c:	687b      	ldr	r3, [r7, #4]
 c00117e:	429a      	cmp	r2, r3
 c001180:	d3e6      	bcc.n	c001150 <Hacl_Impl_HMAC_SHA2_256_xor_bytes_inplace+0x12>
  }
}
 c001182:	bf00      	nop
 c001184:	bf00      	nop
 c001186:	371c      	adds	r7, #28
 c001188:	46bd      	mov	sp, r7
 c00118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00118e:	4770      	bx	lr

0c001190 <Hacl_Impl_HMAC_SHA2_256_hmac_core>:

static void
Hacl_Impl_HMAC_SHA2_256_hmac_core(uint8_t *mac, uint8_t *key, uint8_t *data, uint32_t len)
{
 c001190:	b590      	push	{r4, r7, lr}
 c001192:	f2ad 4dfc 	subw	sp, sp, #1276	; 0x4fc
 c001196:	af00      	add	r7, sp, #0
 c001198:	f507 649f 	add.w	r4, r7, #1272	; 0x4f8
 c00119c:	f2a4 44ec 	subw	r4, r4, #1260	; 0x4ec
 c0011a0:	6020      	str	r0, [r4, #0]
 c0011a2:	f507 609f 	add.w	r0, r7, #1272	; 0x4f8
 c0011a6:	f5a0 609e 	sub.w	r0, r0, #1264	; 0x4f0
 c0011aa:	6001      	str	r1, [r0, #0]
 c0011ac:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 c0011b0:	f2a1 41f4 	subw	r1, r1, #1268	; 0x4f4
 c0011b4:	600a      	str	r2, [r1, #0]
 c0011b6:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 c0011ba:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 c0011be:	6013      	str	r3, [r2, #0]
  uint8_t ipad[64U];
  for (uint32_t _i = 0U; _i < (uint32_t)64U; ++_i)
 c0011c0:	2300      	movs	r3, #0
 c0011c2:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 c0011c6:	e00b      	b.n	c0011e0 <Hacl_Impl_HMAC_SHA2_256_hmac_core+0x50>
    ipad[_i] = (uint8_t)0x36U;
 c0011c8:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 c0011cc:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 c0011d0:	4413      	add	r3, r2
 c0011d2:	2236      	movs	r2, #54	; 0x36
 c0011d4:	701a      	strb	r2, [r3, #0]
  for (uint32_t _i = 0U; _i < (uint32_t)64U; ++_i)
 c0011d6:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 c0011da:	3301      	adds	r3, #1
 c0011dc:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 c0011e0:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 c0011e4:	2b3f      	cmp	r3, #63	; 0x3f
 c0011e6:	d9ef      	bls.n	c0011c8 <Hacl_Impl_HMAC_SHA2_256_hmac_core+0x38>
  uint8_t opad[64U];
  for (uint32_t _i = 0U; _i < (uint32_t)64U; ++_i)
 c0011e8:	2300      	movs	r3, #0
 c0011ea:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 c0011ee:	e00b      	b.n	c001208 <Hacl_Impl_HMAC_SHA2_256_hmac_core+0x78>
    opad[_i] = (uint8_t)0x5cU;
 c0011f0:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 c0011f4:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 c0011f8:	4413      	add	r3, r2
 c0011fa:	225c      	movs	r2, #92	; 0x5c
 c0011fc:	701a      	strb	r2, [r3, #0]
  for (uint32_t _i = 0U; _i < (uint32_t)64U; ++_i)
 c0011fe:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 c001202:	3301      	adds	r3, #1
 c001204:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 c001208:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 c00120c:	2b3f      	cmp	r3, #63	; 0x3f
 c00120e:	d9ef      	bls.n	c0011f0 <Hacl_Impl_HMAC_SHA2_256_hmac_core+0x60>
  Hacl_Impl_HMAC_SHA2_256_xor_bytes_inplace(ipad, key, (uint32_t)64U);
 c001210:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 c001214:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 c001218:	f507 6093 	add.w	r0, r7, #1176	; 0x498
 c00121c:	2240      	movs	r2, #64	; 0x40
 c00121e:	6819      	ldr	r1, [r3, #0]
 c001220:	f7ff ff8d 	bl	c00113e <Hacl_Impl_HMAC_SHA2_256_xor_bytes_inplace>
  uint32_t state0[137U] = { 0U };
 c001224:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 c001228:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 c00122c:	4618      	mov	r0, r3
 c00122e:	f44f 7309 	mov.w	r3, #548	; 0x224
 c001232:	461a      	mov	r2, r3
 c001234:	2100      	movs	r1, #0
 c001236:	f008 faee 	bl	c009816 <memset>
  uint32_t n0 = len / (uint32_t)64U;
 c00123a:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 c00123e:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 c001242:	681b      	ldr	r3, [r3, #0]
 c001244:	099b      	lsrs	r3, r3, #6
 c001246:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
  uint32_t r0 = len % (uint32_t)64U;
 c00124a:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 c00124e:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 c001252:	681b      	ldr	r3, [r3, #0]
 c001254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c001258:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
  uint8_t *blocks0 = data;
 c00125c:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 c001260:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 c001264:	681b      	ldr	r3, [r3, #0]
 c001266:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
  uint8_t *last0 = data + n0 * (uint32_t)64U;
 c00126a:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 c00126e:	019b      	lsls	r3, r3, #6
 c001270:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 c001274:	f2a2 42f4 	subw	r2, r2, #1268	; 0x4f4
 c001278:	6812      	ldr	r2, [r2, #0]
 c00127a:	4413      	add	r3, r2
 c00127c:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
  Hacl_Impl_SHA2_256_init(state0);
 c001280:	f507 730d 	add.w	r3, r7, #564	; 0x234
 c001284:	4618      	mov	r0, r3
 c001286:	f7ff fa39 	bl	c0006fc <Hacl_Impl_SHA2_256_init>
  Hacl_Impl_SHA2_256_update(state0, ipad);
 c00128a:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 c00128e:	f507 730d 	add.w	r3, r7, #564	; 0x234
 c001292:	4611      	mov	r1, r2
 c001294:	4618      	mov	r0, r3
 c001296:	f7ff fc35 	bl	c000b04 <Hacl_Impl_SHA2_256_update>
  Hacl_Impl_SHA2_256_update_multi(state0, blocks0, n0);
 c00129a:	f507 730d 	add.w	r3, r7, #564	; 0x234
 c00129e:	f8d7 24ec 	ldr.w	r2, [r7, #1260]	; 0x4ec
 c0012a2:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 c0012a6:	4618      	mov	r0, r3
 c0012a8:	f7ff fdd7 	bl	c000e5a <Hacl_Impl_SHA2_256_update_multi>
  Hacl_Impl_SHA2_256_update_last(state0, last0, r0);
 c0012ac:	f507 730d 	add.w	r3, r7, #564	; 0x234
 c0012b0:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	; 0x4e8
 c0012b4:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 c0012b8:	4618      	mov	r0, r3
 c0012ba:	f7ff fdec 	bl	c000e96 <Hacl_Impl_SHA2_256_update_last>
  uint8_t *hash0 = ipad;
 c0012be:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 c0012c2:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
  Hacl_Impl_SHA2_256_finish(state0, hash0);
 c0012c6:	f507 730d 	add.w	r3, r7, #564	; 0x234
 c0012ca:	f8d7 14dc 	ldr.w	r1, [r7, #1244]	; 0x4dc
 c0012ce:	4618      	mov	r0, r3
 c0012d0:	f7ff febc 	bl	c00104c <Hacl_Impl_SHA2_256_finish>
  uint8_t *s4 = ipad;
 c0012d4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 c0012d8:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
  Hacl_Impl_HMAC_SHA2_256_xor_bytes_inplace(opad, key, (uint32_t)64U);
 c0012dc:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 c0012e0:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 c0012e4:	f507 608b 	add.w	r0, r7, #1112	; 0x458
 c0012e8:	2240      	movs	r2, #64	; 0x40
 c0012ea:	6819      	ldr	r1, [r3, #0]
 c0012ec:	f7ff ff27 	bl	c00113e <Hacl_Impl_HMAC_SHA2_256_xor_bytes_inplace>
  uint32_t state1[137U] = { 0U };
 c0012f0:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 c0012f4:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 c0012f8:	4618      	mov	r0, r3
 c0012fa:	f44f 7309 	mov.w	r3, #548	; 0x224
 c0012fe:	461a      	mov	r2, r3
 c001300:	2100      	movs	r1, #0
 c001302:	f008 fa88 	bl	c009816 <memset>
  Hacl_Impl_SHA2_256_init(state1);
 c001306:	f107 0310 	add.w	r3, r7, #16
 c00130a:	4618      	mov	r0, r3
 c00130c:	f7ff f9f6 	bl	c0006fc <Hacl_Impl_SHA2_256_init>
  Hacl_Impl_SHA2_256_update(state1, opad);
 c001310:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 c001314:	f107 0310 	add.w	r3, r7, #16
 c001318:	4611      	mov	r1, r2
 c00131a:	4618      	mov	r0, r3
 c00131c:	f7ff fbf2 	bl	c000b04 <Hacl_Impl_SHA2_256_update>
  Hacl_Impl_SHA2_256_update_last(state1, s4, (uint32_t)32U);
 c001320:	f107 0310 	add.w	r3, r7, #16
 c001324:	2220      	movs	r2, #32
 c001326:	f8d7 14d8 	ldr.w	r1, [r7, #1240]	; 0x4d8
 c00132a:	4618      	mov	r0, r3
 c00132c:	f7ff fdb3 	bl	c000e96 <Hacl_Impl_SHA2_256_update_last>
  Hacl_Impl_SHA2_256_finish(state1, mac);
 c001330:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 c001334:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 c001338:	f107 0210 	add.w	r2, r7, #16
 c00133c:	6819      	ldr	r1, [r3, #0]
 c00133e:	4610      	mov	r0, r2
 c001340:	f7ff fe84 	bl	c00104c <Hacl_Impl_SHA2_256_finish>
}
 c001344:	bf00      	nop
 c001346:	f207 47fc 	addw	r7, r7, #1276	; 0x4fc
 c00134a:	46bd      	mov	sp, r7
 c00134c:	bd90      	pop	{r4, r7, pc}

0c00134e <Hacl_Impl_HMAC_SHA2_256_hmac>:
  uint8_t *key,
  uint32_t keylen,
  uint8_t *data,
  uint32_t datalen
)
{
 c00134e:	b580      	push	{r7, lr}
 c001350:	b096      	sub	sp, #88	; 0x58
 c001352:	af00      	add	r7, sp, #0
 c001354:	60f8      	str	r0, [r7, #12]
 c001356:	60b9      	str	r1, [r7, #8]
 c001358:	607a      	str	r2, [r7, #4]
 c00135a:	603b      	str	r3, [r7, #0]
  uint8_t nkey[64U];
  for (uint32_t _i = 0U; _i < (uint32_t)64U; ++_i)
 c00135c:	2300      	movs	r3, #0
 c00135e:	657b      	str	r3, [r7, #84]	; 0x54
 c001360:	e008      	b.n	c001374 <Hacl_Impl_HMAC_SHA2_256_hmac+0x26>
    nkey[_i] = (uint8_t)0x00U;
 c001362:	f107 0210 	add.w	r2, r7, #16
 c001366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c001368:	4413      	add	r3, r2
 c00136a:	2200      	movs	r2, #0
 c00136c:	701a      	strb	r2, [r3, #0]
  for (uint32_t _i = 0U; _i < (uint32_t)64U; ++_i)
 c00136e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c001370:	3301      	adds	r3, #1
 c001372:	657b      	str	r3, [r7, #84]	; 0x54
 c001374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c001376:	2b3f      	cmp	r3, #63	; 0x3f
 c001378:	d9f3      	bls.n	c001362 <Hacl_Impl_HMAC_SHA2_256_hmac+0x14>
  if (keylen <= (uint32_t)64U)
 c00137a:	687b      	ldr	r3, [r7, #4]
 c00137c:	2b40      	cmp	r3, #64	; 0x40
 c00137e:	d807      	bhi.n	c001390 <Hacl_Impl_HMAC_SHA2_256_hmac+0x42>
    memcpy(nkey, key, keylen * sizeof key[0U]);
 c001380:	f107 0310 	add.w	r3, r7, #16
 c001384:	687a      	ldr	r2, [r7, #4]
 c001386:	68b9      	ldr	r1, [r7, #8]
 c001388:	4618      	mov	r0, r3
 c00138a:	f008 fa37 	bl	c0097fc <memcpy>
 c00138e:	e007      	b.n	c0013a0 <Hacl_Impl_HMAC_SHA2_256_hmac+0x52>
  else
  {
    uint8_t *nkey0 = nkey;
 c001390:	f107 0310 	add.w	r3, r7, #16
 c001394:	653b      	str	r3, [r7, #80]	; 0x50
    Hacl_Impl_SHA2_256_hash(nkey0, key, keylen);
 c001396:	687a      	ldr	r2, [r7, #4]
 c001398:	68b9      	ldr	r1, [r7, #8]
 c00139a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 c00139c:	f7ff fe68 	bl	c001070 <Hacl_Impl_SHA2_256_hash>
  }
  Hacl_Impl_HMAC_SHA2_256_hmac_core(mac, nkey, data, datalen);
 c0013a0:	f107 0110 	add.w	r1, r7, #16
 c0013a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c0013a6:	683a      	ldr	r2, [r7, #0]
 c0013a8:	68f8      	ldr	r0, [r7, #12]
 c0013aa:	f7ff fef1 	bl	c001190 <Hacl_Impl_HMAC_SHA2_256_hmac_core>
}
 c0013ae:	bf00      	nop
 c0013b0:	3758      	adds	r7, #88	; 0x58
 c0013b2:	46bd      	mov	sp, r7
 c0013b4:	bd80      	pop	{r7, pc}

0c0013b6 <hmac>:
{
  Hacl_Impl_HMAC_SHA2_256_hmac_core(mac, key, data, len);
}

void hmac(uint8_t *mac, uint8_t *key, uint32_t keylen, uint8_t *data, uint32_t datalen)
{
 c0013b6:	b580      	push	{r7, lr}
 c0013b8:	b086      	sub	sp, #24
 c0013ba:	af02      	add	r7, sp, #8
 c0013bc:	60f8      	str	r0, [r7, #12]
 c0013be:	60b9      	str	r1, [r7, #8]
 c0013c0:	607a      	str	r2, [r7, #4]
 c0013c2:	603b      	str	r3, [r7, #0]
  Hacl_Impl_HMAC_SHA2_256_hmac(mac, key, keylen, data, datalen);
 c0013c4:	69bb      	ldr	r3, [r7, #24]
 c0013c6:	9300      	str	r3, [sp, #0]
 c0013c8:	683b      	ldr	r3, [r7, #0]
 c0013ca:	687a      	ldr	r2, [r7, #4]
 c0013cc:	68b9      	ldr	r1, [r7, #8]
 c0013ce:	68f8      	ldr	r0, [r7, #12]
 c0013d0:	f7ff ffbd 	bl	c00134e <Hacl_Impl_HMAC_SHA2_256_hmac>
}
 c0013d4:	bf00      	nop
 c0013d6:	3710      	adds	r7, #16
 c0013d8:	46bd      	mov	sp, r7
 c0013da:	bd80      	pop	{r7, pc}

0c0013dc <load32>:
inline static uint32_t load32(uint8_t *b) {
 c0013dc:	b480      	push	{r7}
 c0013de:	b085      	sub	sp, #20
 c0013e0:	af00      	add	r7, sp, #0
 c0013e2:	6078      	str	r0, [r7, #4]
 c0013e4:	687b      	ldr	r3, [r7, #4]
 c0013e6:	681b      	ldr	r3, [r3, #0]
  memcpy(&x, b, 4);
 c0013e8:	60fb      	str	r3, [r7, #12]
  return x;
 c0013ea:	68fb      	ldr	r3, [r7, #12]
}
 c0013ec:	4618      	mov	r0, r3
 c0013ee:	3714      	adds	r7, #20
 c0013f0:	46bd      	mov	sp, r7
 c0013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0013f6:	4770      	bx	lr

0c0013f8 <store32>:
inline static void store32(uint8_t *b, uint32_t i) { memcpy(b, &i, 4); }
 c0013f8:	b480      	push	{r7}
 c0013fa:	b083      	sub	sp, #12
 c0013fc:	af00      	add	r7, sp, #0
 c0013fe:	6078      	str	r0, [r7, #4]
 c001400:	6039      	str	r1, [r7, #0]
 c001402:	683a      	ldr	r2, [r7, #0]
 c001404:	687b      	ldr	r3, [r7, #4]
 c001406:	601a      	str	r2, [r3, #0]
 c001408:	bf00      	nop
 c00140a:	370c      	adds	r7, #12
 c00140c:	46bd      	mov	sp, r7
 c00140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001412:	4770      	bx	lr

0c001414 <store64>:
inline static void store64(uint8_t *b, uint64_t i) { memcpy(b, &i, 8); }
 c001414:	b580      	push	{r7, lr}
 c001416:	b084      	sub	sp, #16
 c001418:	af00      	add	r7, sp, #0
 c00141a:	60f8      	str	r0, [r7, #12]
 c00141c:	e9c7 2300 	strd	r2, r3, [r7]
 c001420:	463b      	mov	r3, r7
 c001422:	2208      	movs	r2, #8
 c001424:	4619      	mov	r1, r3
 c001426:	68f8      	ldr	r0, [r7, #12]
 c001428:	f008 f9e8 	bl	c0097fc <memcpy>
 c00142c:	bf00      	nop
 c00142e:	3710      	adds	r7, #16
 c001430:	46bd      	mov	sp, r7
 c001432:	bd80      	pop	{r7, pc}

0c001434 <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes>:

#include "Hacl_SHA2_256.h"

static void
Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes(uint32_t *output, uint8_t *input, uint32_t len)
{
 c001434:	b580      	push	{r7, lr}
 c001436:	b088      	sub	sp, #32
 c001438:	af00      	add	r7, sp, #0
 c00143a:	60f8      	str	r0, [r7, #12]
 c00143c:	60b9      	str	r1, [r7, #8]
 c00143e:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c001440:	2300      	movs	r3, #0
 c001442:	61fb      	str	r3, [r7, #28]
 c001444:	e021      	b.n	c00148a <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes+0x56>
  {
    uint8_t *x0 = input + (uint32_t)4U * i;
 c001446:	69fb      	ldr	r3, [r7, #28]
 c001448:	009b      	lsls	r3, r3, #2
 c00144a:	68ba      	ldr	r2, [r7, #8]
 c00144c:	4413      	add	r3, r2
 c00144e:	61bb      	str	r3, [r7, #24]
    uint32_t inputi = load32_be(x0);
 c001450:	69b8      	ldr	r0, [r7, #24]
 c001452:	f7ff ffc3 	bl	c0013dc <load32>
 c001456:	6178      	str	r0, [r7, #20]
 c001458:	697b      	ldr	r3, [r7, #20]
 c00145a:	0e1a      	lsrs	r2, r3, #24
 c00145c:	697b      	ldr	r3, [r7, #20]
 c00145e:	0a1b      	lsrs	r3, r3, #8
 c001460:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c001464:	431a      	orrs	r2, r3
 c001466:	697b      	ldr	r3, [r7, #20]
 c001468:	021b      	lsls	r3, r3, #8
 c00146a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c00146e:	431a      	orrs	r2, r3
 c001470:	697b      	ldr	r3, [r7, #20]
 c001472:	061b      	lsls	r3, r3, #24
 c001474:	4313      	orrs	r3, r2
 c001476:	613b      	str	r3, [r7, #16]
    output[i] = inputi;
 c001478:	69fb      	ldr	r3, [r7, #28]
 c00147a:	009b      	lsls	r3, r3, #2
 c00147c:	68fa      	ldr	r2, [r7, #12]
 c00147e:	4413      	add	r3, r2
 c001480:	693a      	ldr	r2, [r7, #16]
 c001482:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c001484:	69fb      	ldr	r3, [r7, #28]
 c001486:	3301      	adds	r3, #1
 c001488:	61fb      	str	r3, [r7, #28]
 c00148a:	69fa      	ldr	r2, [r7, #28]
 c00148c:	687b      	ldr	r3, [r7, #4]
 c00148e:	429a      	cmp	r2, r3
 c001490:	d3d9      	bcc.n	c001446 <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes+0x12>
  }
}
 c001492:	bf00      	nop
 c001494:	bf00      	nop
 c001496:	3720      	adds	r7, #32
 c001498:	46bd      	mov	sp, r7
 c00149a:	bd80      	pop	{r7, pc}

0c00149c <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes>:

static void
Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes(uint8_t *output, uint32_t *input, uint32_t len)
{
 c00149c:	b580      	push	{r7, lr}
 c00149e:	b088      	sub	sp, #32
 c0014a0:	af00      	add	r7, sp, #0
 c0014a2:	60f8      	str	r0, [r7, #12]
 c0014a4:	60b9      	str	r1, [r7, #8]
 c0014a6:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c0014a8:	2300      	movs	r3, #0
 c0014aa:	61fb      	str	r3, [r7, #28]
 c0014ac:	e022      	b.n	c0014f4 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes+0x58>
  {
    uint32_t hd1 = input[i];
 c0014ae:	69fb      	ldr	r3, [r7, #28]
 c0014b0:	009b      	lsls	r3, r3, #2
 c0014b2:	68ba      	ldr	r2, [r7, #8]
 c0014b4:	4413      	add	r3, r2
 c0014b6:	681b      	ldr	r3, [r3, #0]
 c0014b8:	61bb      	str	r3, [r7, #24]
    uint8_t *x0 = output + (uint32_t)4U * i;
 c0014ba:	69fb      	ldr	r3, [r7, #28]
 c0014bc:	009b      	lsls	r3, r3, #2
 c0014be:	68fa      	ldr	r2, [r7, #12]
 c0014c0:	4413      	add	r3, r2
 c0014c2:	617b      	str	r3, [r7, #20]
    store32_be(x0, hd1);
 c0014c4:	69bb      	ldr	r3, [r7, #24]
 c0014c6:	613b      	str	r3, [r7, #16]
 c0014c8:	693b      	ldr	r3, [r7, #16]
 c0014ca:	0e1a      	lsrs	r2, r3, #24
 c0014cc:	693b      	ldr	r3, [r7, #16]
 c0014ce:	0a1b      	lsrs	r3, r3, #8
 c0014d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c0014d4:	431a      	orrs	r2, r3
 c0014d6:	693b      	ldr	r3, [r7, #16]
 c0014d8:	021b      	lsls	r3, r3, #8
 c0014da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c0014de:	431a      	orrs	r2, r3
 c0014e0:	693b      	ldr	r3, [r7, #16]
 c0014e2:	061b      	lsls	r3, r3, #24
 c0014e4:	4313      	orrs	r3, r2
 c0014e6:	4619      	mov	r1, r3
 c0014e8:	6978      	ldr	r0, [r7, #20]
 c0014ea:	f7ff ff85 	bl	c0013f8 <store32>
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c0014ee:	69fb      	ldr	r3, [r7, #28]
 c0014f0:	3301      	adds	r3, #1
 c0014f2:	61fb      	str	r3, [r7, #28]
 c0014f4:	69fa      	ldr	r2, [r7, #28]
 c0014f6:	687b      	ldr	r3, [r7, #4]
 c0014f8:	429a      	cmp	r2, r3
 c0014fa:	d3d8      	bcc.n	c0014ae <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes+0x12>
  }
}
 c0014fc:	bf00      	nop
 c0014fe:	bf00      	nop
 c001500:	3720      	adds	r7, #32
 c001502:	46bd      	mov	sp, r7
 c001504:	bd80      	pop	{r7, pc}
	...

0c001508 <Hacl_Impl_SHA2_256_init>:

static void Hacl_Impl_SHA2_256_init(uint32_t *state)
{
 c001508:	b480      	push	{r7}
 c00150a:	b0a3      	sub	sp, #140	; 0x8c
 c00150c:	af00      	add	r7, sp, #0
 c00150e:	6078      	str	r0, [r7, #4]
  uint32_t *k1 = state;
 c001510:	687b      	ldr	r3, [r7, #4]
 c001512:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t *h_01 = state + (uint32_t)128U;
 c001516:	687b      	ldr	r3, [r7, #4]
 c001518:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c00151c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t *p10 = k1;
 c001520:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c001524:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t *p20 = k1 + (uint32_t)16U;
 c001526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c00152a:	3340      	adds	r3, #64	; 0x40
 c00152c:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t *p3 = k1 + (uint32_t)32U;
 c00152e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c001532:	3380      	adds	r3, #128	; 0x80
 c001534:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t *p4 = k1 + (uint32_t)48U;
 c001536:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c00153a:	33c0      	adds	r3, #192	; 0xc0
 c00153c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t *p11 = p10;
 c00153e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 c001540:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t *p21 = p10 + (uint32_t)8U;
 c001542:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 c001544:	3320      	adds	r3, #32
 c001546:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t *p12 = p11;
 c001548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00154a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t *p22 = p11 + (uint32_t)4U;
 c00154c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00154e:	3310      	adds	r3, #16
 c001550:	663b      	str	r3, [r7, #96]	; 0x60
  p12[0U] = (uint32_t)0x428a2f98U;
 c001552:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c001554:	4a8d      	ldr	r2, [pc, #564]	; (c00178c <Hacl_Impl_SHA2_256_init+0x284>)
 c001556:	601a      	str	r2, [r3, #0]
  p12[1U] = (uint32_t)0x71374491U;
 c001558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c00155a:	3304      	adds	r3, #4
 c00155c:	4a8c      	ldr	r2, [pc, #560]	; (c001790 <Hacl_Impl_SHA2_256_init+0x288>)
 c00155e:	601a      	str	r2, [r3, #0]
  p12[2U] = (uint32_t)0xb5c0fbcfU;
 c001560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c001562:	3308      	adds	r3, #8
 c001564:	4a8b      	ldr	r2, [pc, #556]	; (c001794 <Hacl_Impl_SHA2_256_init+0x28c>)
 c001566:	601a      	str	r2, [r3, #0]
  p12[3U] = (uint32_t)0xe9b5dba5U;
 c001568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c00156a:	330c      	adds	r3, #12
 c00156c:	4a8a      	ldr	r2, [pc, #552]	; (c001798 <Hacl_Impl_SHA2_256_init+0x290>)
 c00156e:	601a      	str	r2, [r3, #0]
  p22[0U] = (uint32_t)0x3956c25bU;
 c001570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c001572:	4a8a      	ldr	r2, [pc, #552]	; (c00179c <Hacl_Impl_SHA2_256_init+0x294>)
 c001574:	601a      	str	r2, [r3, #0]
  p22[1U] = (uint32_t)0x59f111f1U;
 c001576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c001578:	3304      	adds	r3, #4
 c00157a:	4a89      	ldr	r2, [pc, #548]	; (c0017a0 <Hacl_Impl_SHA2_256_init+0x298>)
 c00157c:	601a      	str	r2, [r3, #0]
  p22[2U] = (uint32_t)0x923f82a4U;
 c00157e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c001580:	3308      	adds	r3, #8
 c001582:	4a88      	ldr	r2, [pc, #544]	; (c0017a4 <Hacl_Impl_SHA2_256_init+0x29c>)
 c001584:	601a      	str	r2, [r3, #0]
  p22[3U] = (uint32_t)0xab1c5ed5U;
 c001586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c001588:	330c      	adds	r3, #12
 c00158a:	4a87      	ldr	r2, [pc, #540]	; (c0017a8 <Hacl_Impl_SHA2_256_init+0x2a0>)
 c00158c:	601a      	str	r2, [r3, #0]
  uint32_t *p13 = p21;
 c00158e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c001590:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t *p23 = p21 + (uint32_t)4U;
 c001592:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c001594:	3310      	adds	r3, #16
 c001596:	65bb      	str	r3, [r7, #88]	; 0x58
  p13[0U] = (uint32_t)0xd807aa98U;
 c001598:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00159a:	4a84      	ldr	r2, [pc, #528]	; (c0017ac <Hacl_Impl_SHA2_256_init+0x2a4>)
 c00159c:	601a      	str	r2, [r3, #0]
  p13[1U] = (uint32_t)0x12835b01U;
 c00159e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c0015a0:	3304      	adds	r3, #4
 c0015a2:	4a83      	ldr	r2, [pc, #524]	; (c0017b0 <Hacl_Impl_SHA2_256_init+0x2a8>)
 c0015a4:	601a      	str	r2, [r3, #0]
  p13[2U] = (uint32_t)0x243185beU;
 c0015a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c0015a8:	3308      	adds	r3, #8
 c0015aa:	4a82      	ldr	r2, [pc, #520]	; (c0017b4 <Hacl_Impl_SHA2_256_init+0x2ac>)
 c0015ac:	601a      	str	r2, [r3, #0]
  p13[3U] = (uint32_t)0x550c7dc3U;
 c0015ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c0015b0:	330c      	adds	r3, #12
 c0015b2:	4a81      	ldr	r2, [pc, #516]	; (c0017b8 <Hacl_Impl_SHA2_256_init+0x2b0>)
 c0015b4:	601a      	str	r2, [r3, #0]
  p23[0U] = (uint32_t)0x72be5d74U;
 c0015b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0015b8:	4a80      	ldr	r2, [pc, #512]	; (c0017bc <Hacl_Impl_SHA2_256_init+0x2b4>)
 c0015ba:	601a      	str	r2, [r3, #0]
  p23[1U] = (uint32_t)0x80deb1feU;
 c0015bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0015be:	3304      	adds	r3, #4
 c0015c0:	4a7f      	ldr	r2, [pc, #508]	; (c0017c0 <Hacl_Impl_SHA2_256_init+0x2b8>)
 c0015c2:	601a      	str	r2, [r3, #0]
  p23[2U] = (uint32_t)0x9bdc06a7U;
 c0015c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0015c6:	3308      	adds	r3, #8
 c0015c8:	4a7e      	ldr	r2, [pc, #504]	; (c0017c4 <Hacl_Impl_SHA2_256_init+0x2bc>)
 c0015ca:	601a      	str	r2, [r3, #0]
  p23[3U] = (uint32_t)0xc19bf174U;
 c0015cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0015ce:	330c      	adds	r3, #12
 c0015d0:	4a7d      	ldr	r2, [pc, #500]	; (c0017c8 <Hacl_Impl_SHA2_256_init+0x2c0>)
 c0015d2:	601a      	str	r2, [r3, #0]
  uint32_t *p14 = p20;
 c0015d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c0015d6:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t *p24 = p20 + (uint32_t)8U;
 c0015d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c0015da:	3320      	adds	r3, #32
 c0015dc:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t *p15 = p14;
 c0015de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c0015e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t *p25 = p14 + (uint32_t)4U;
 c0015e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c0015e4:	3310      	adds	r3, #16
 c0015e6:	64bb      	str	r3, [r7, #72]	; 0x48
  p15[0U] = (uint32_t)0xe49b69c1U;
 c0015e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0015ea:	4a78      	ldr	r2, [pc, #480]	; (c0017cc <Hacl_Impl_SHA2_256_init+0x2c4>)
 c0015ec:	601a      	str	r2, [r3, #0]
  p15[1U] = (uint32_t)0xefbe4786U;
 c0015ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0015f0:	3304      	adds	r3, #4
 c0015f2:	4a77      	ldr	r2, [pc, #476]	; (c0017d0 <Hacl_Impl_SHA2_256_init+0x2c8>)
 c0015f4:	601a      	str	r2, [r3, #0]
  p15[2U] = (uint32_t)0x0fc19dc6U;
 c0015f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0015f8:	3308      	adds	r3, #8
 c0015fa:	4a76      	ldr	r2, [pc, #472]	; (c0017d4 <Hacl_Impl_SHA2_256_init+0x2cc>)
 c0015fc:	601a      	str	r2, [r3, #0]
  p15[3U] = (uint32_t)0x240ca1ccU;
 c0015fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c001600:	330c      	adds	r3, #12
 c001602:	4a75      	ldr	r2, [pc, #468]	; (c0017d8 <Hacl_Impl_SHA2_256_init+0x2d0>)
 c001604:	601a      	str	r2, [r3, #0]
  p25[0U] = (uint32_t)0x2de92c6fU;
 c001606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c001608:	4a74      	ldr	r2, [pc, #464]	; (c0017dc <Hacl_Impl_SHA2_256_init+0x2d4>)
 c00160a:	601a      	str	r2, [r3, #0]
  p25[1U] = (uint32_t)0x4a7484aaU;
 c00160c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c00160e:	3304      	adds	r3, #4
 c001610:	4a73      	ldr	r2, [pc, #460]	; (c0017e0 <Hacl_Impl_SHA2_256_init+0x2d8>)
 c001612:	601a      	str	r2, [r3, #0]
  p25[2U] = (uint32_t)0x5cb0a9dcU;
 c001614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c001616:	3308      	adds	r3, #8
 c001618:	4a72      	ldr	r2, [pc, #456]	; (c0017e4 <Hacl_Impl_SHA2_256_init+0x2dc>)
 c00161a:	601a      	str	r2, [r3, #0]
  p25[3U] = (uint32_t)0x76f988daU;
 c00161c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c00161e:	330c      	adds	r3, #12
 c001620:	4a71      	ldr	r2, [pc, #452]	; (c0017e8 <Hacl_Impl_SHA2_256_init+0x2e0>)
 c001622:	601a      	str	r2, [r3, #0]
  uint32_t *p16 = p24;
 c001624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c001626:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t *p26 = p24 + (uint32_t)4U;
 c001628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00162a:	3310      	adds	r3, #16
 c00162c:	643b      	str	r3, [r7, #64]	; 0x40
  p16[0U] = (uint32_t)0x983e5152U;
 c00162e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c001630:	4a6e      	ldr	r2, [pc, #440]	; (c0017ec <Hacl_Impl_SHA2_256_init+0x2e4>)
 c001632:	601a      	str	r2, [r3, #0]
  p16[1U] = (uint32_t)0xa831c66dU;
 c001634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c001636:	3304      	adds	r3, #4
 c001638:	4a6d      	ldr	r2, [pc, #436]	; (c0017f0 <Hacl_Impl_SHA2_256_init+0x2e8>)
 c00163a:	601a      	str	r2, [r3, #0]
  p16[2U] = (uint32_t)0xb00327c8U;
 c00163c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00163e:	3308      	adds	r3, #8
 c001640:	4a6c      	ldr	r2, [pc, #432]	; (c0017f4 <Hacl_Impl_SHA2_256_init+0x2ec>)
 c001642:	601a      	str	r2, [r3, #0]
  p16[3U] = (uint32_t)0xbf597fc7U;
 c001644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c001646:	330c      	adds	r3, #12
 c001648:	4a6b      	ldr	r2, [pc, #428]	; (c0017f8 <Hacl_Impl_SHA2_256_init+0x2f0>)
 c00164a:	601a      	str	r2, [r3, #0]
  p26[0U] = (uint32_t)0xc6e00bf3U;
 c00164c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c00164e:	4a6b      	ldr	r2, [pc, #428]	; (c0017fc <Hacl_Impl_SHA2_256_init+0x2f4>)
 c001650:	601a      	str	r2, [r3, #0]
  p26[1U] = (uint32_t)0xd5a79147U;
 c001652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c001654:	3304      	adds	r3, #4
 c001656:	4a6a      	ldr	r2, [pc, #424]	; (c001800 <Hacl_Impl_SHA2_256_init+0x2f8>)
 c001658:	601a      	str	r2, [r3, #0]
  p26[2U] = (uint32_t)0x06ca6351U;
 c00165a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c00165c:	3308      	adds	r3, #8
 c00165e:	4a69      	ldr	r2, [pc, #420]	; (c001804 <Hacl_Impl_SHA2_256_init+0x2fc>)
 c001660:	601a      	str	r2, [r3, #0]
  p26[3U] = (uint32_t)0x14292967U;
 c001662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c001664:	330c      	adds	r3, #12
 c001666:	4a68      	ldr	r2, [pc, #416]	; (c001808 <Hacl_Impl_SHA2_256_init+0x300>)
 c001668:	601a      	str	r2, [r3, #0]
  uint32_t *p17 = p3;
 c00166a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c00166c:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t *p27 = p3 + (uint32_t)8U;
 c00166e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c001670:	3320      	adds	r3, #32
 c001672:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t *p18 = p17;
 c001674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c001676:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t *p28 = p17 + (uint32_t)4U;
 c001678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c00167a:	3310      	adds	r3, #16
 c00167c:	633b      	str	r3, [r7, #48]	; 0x30
  p18[0U] = (uint32_t)0x27b70a85U;
 c00167e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c001680:	4a62      	ldr	r2, [pc, #392]	; (c00180c <Hacl_Impl_SHA2_256_init+0x304>)
 c001682:	601a      	str	r2, [r3, #0]
  p18[1U] = (uint32_t)0x2e1b2138U;
 c001684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c001686:	3304      	adds	r3, #4
 c001688:	4a61      	ldr	r2, [pc, #388]	; (c001810 <Hacl_Impl_SHA2_256_init+0x308>)
 c00168a:	601a      	str	r2, [r3, #0]
  p18[2U] = (uint32_t)0x4d2c6dfcU;
 c00168c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00168e:	3308      	adds	r3, #8
 c001690:	4a60      	ldr	r2, [pc, #384]	; (c001814 <Hacl_Impl_SHA2_256_init+0x30c>)
 c001692:	601a      	str	r2, [r3, #0]
  p18[3U] = (uint32_t)0x53380d13U;
 c001694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c001696:	330c      	adds	r3, #12
 c001698:	4a5f      	ldr	r2, [pc, #380]	; (c001818 <Hacl_Impl_SHA2_256_init+0x310>)
 c00169a:	601a      	str	r2, [r3, #0]
  p28[0U] = (uint32_t)0x650a7354U;
 c00169c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00169e:	4a5f      	ldr	r2, [pc, #380]	; (c00181c <Hacl_Impl_SHA2_256_init+0x314>)
 c0016a0:	601a      	str	r2, [r3, #0]
  p28[1U] = (uint32_t)0x766a0abbU;
 c0016a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c0016a4:	3304      	adds	r3, #4
 c0016a6:	4a5e      	ldr	r2, [pc, #376]	; (c001820 <Hacl_Impl_SHA2_256_init+0x318>)
 c0016a8:	601a      	str	r2, [r3, #0]
  p28[2U] = (uint32_t)0x81c2c92eU;
 c0016aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c0016ac:	3308      	adds	r3, #8
 c0016ae:	4a5d      	ldr	r2, [pc, #372]	; (c001824 <Hacl_Impl_SHA2_256_init+0x31c>)
 c0016b0:	601a      	str	r2, [r3, #0]
  p28[3U] = (uint32_t)0x92722c85U;
 c0016b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c0016b4:	330c      	adds	r3, #12
 c0016b6:	4a5c      	ldr	r2, [pc, #368]	; (c001828 <Hacl_Impl_SHA2_256_init+0x320>)
 c0016b8:	601a      	str	r2, [r3, #0]
  uint32_t *p19 = p27;
 c0016ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t *p29 = p27 + (uint32_t)4U;
 c0016be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0016c0:	3310      	adds	r3, #16
 c0016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  p19[0U] = (uint32_t)0xa2bfe8a1U;
 c0016c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0016c6:	4a59      	ldr	r2, [pc, #356]	; (c00182c <Hacl_Impl_SHA2_256_init+0x324>)
 c0016c8:	601a      	str	r2, [r3, #0]
  p19[1U] = (uint32_t)0xa81a664bU;
 c0016ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0016cc:	3304      	adds	r3, #4
 c0016ce:	4a58      	ldr	r2, [pc, #352]	; (c001830 <Hacl_Impl_SHA2_256_init+0x328>)
 c0016d0:	601a      	str	r2, [r3, #0]
  p19[2U] = (uint32_t)0xc24b8b70U;
 c0016d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0016d4:	3308      	adds	r3, #8
 c0016d6:	4a57      	ldr	r2, [pc, #348]	; (c001834 <Hacl_Impl_SHA2_256_init+0x32c>)
 c0016d8:	601a      	str	r2, [r3, #0]
  p19[3U] = (uint32_t)0xc76c51a3U;
 c0016da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0016dc:	330c      	adds	r3, #12
 c0016de:	4a56      	ldr	r2, [pc, #344]	; (c001838 <Hacl_Impl_SHA2_256_init+0x330>)
 c0016e0:	601a      	str	r2, [r3, #0]
  p29[0U] = (uint32_t)0xd192e819U;
 c0016e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0016e4:	4a55      	ldr	r2, [pc, #340]	; (c00183c <Hacl_Impl_SHA2_256_init+0x334>)
 c0016e6:	601a      	str	r2, [r3, #0]
  p29[1U] = (uint32_t)0xd6990624U;
 c0016e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0016ea:	3304      	adds	r3, #4
 c0016ec:	4a54      	ldr	r2, [pc, #336]	; (c001840 <Hacl_Impl_SHA2_256_init+0x338>)
 c0016ee:	601a      	str	r2, [r3, #0]
  p29[2U] = (uint32_t)0xf40e3585U;
 c0016f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0016f2:	3308      	adds	r3, #8
 c0016f4:	4a53      	ldr	r2, [pc, #332]	; (c001844 <Hacl_Impl_SHA2_256_init+0x33c>)
 c0016f6:	601a      	str	r2, [r3, #0]
  p29[3U] = (uint32_t)0x106aa070U;
 c0016f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0016fa:	330c      	adds	r3, #12
 c0016fc:	4a52      	ldr	r2, [pc, #328]	; (c001848 <Hacl_Impl_SHA2_256_init+0x340>)
 c0016fe:	601a      	str	r2, [r3, #0]
  uint32_t *p110 = p4;
 c001700:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c001702:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t *p210 = p4 + (uint32_t)8U;
 c001704:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c001706:	3320      	adds	r3, #32
 c001708:	623b      	str	r3, [r7, #32]
  uint32_t *p1 = p110;
 c00170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00170c:	61fb      	str	r3, [r7, #28]
  uint32_t *p211 = p110 + (uint32_t)4U;
 c00170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c001710:	3310      	adds	r3, #16
 c001712:	61bb      	str	r3, [r7, #24]
  p1[0U] = (uint32_t)0x19a4c116U;
 c001714:	69fb      	ldr	r3, [r7, #28]
 c001716:	4a4d      	ldr	r2, [pc, #308]	; (c00184c <Hacl_Impl_SHA2_256_init+0x344>)
 c001718:	601a      	str	r2, [r3, #0]
  p1[1U] = (uint32_t)0x1e376c08U;
 c00171a:	69fb      	ldr	r3, [r7, #28]
 c00171c:	3304      	adds	r3, #4
 c00171e:	4a4c      	ldr	r2, [pc, #304]	; (c001850 <Hacl_Impl_SHA2_256_init+0x348>)
 c001720:	601a      	str	r2, [r3, #0]
  p1[2U] = (uint32_t)0x2748774cU;
 c001722:	69fb      	ldr	r3, [r7, #28]
 c001724:	3308      	adds	r3, #8
 c001726:	4a4b      	ldr	r2, [pc, #300]	; (c001854 <Hacl_Impl_SHA2_256_init+0x34c>)
 c001728:	601a      	str	r2, [r3, #0]
  p1[3U] = (uint32_t)0x34b0bcb5U;
 c00172a:	69fb      	ldr	r3, [r7, #28]
 c00172c:	330c      	adds	r3, #12
 c00172e:	4a4a      	ldr	r2, [pc, #296]	; (c001858 <Hacl_Impl_SHA2_256_init+0x350>)
 c001730:	601a      	str	r2, [r3, #0]
  p211[0U] = (uint32_t)0x391c0cb3U;
 c001732:	69bb      	ldr	r3, [r7, #24]
 c001734:	4a49      	ldr	r2, [pc, #292]	; (c00185c <Hacl_Impl_SHA2_256_init+0x354>)
 c001736:	601a      	str	r2, [r3, #0]
  p211[1U] = (uint32_t)0x4ed8aa4aU;
 c001738:	69bb      	ldr	r3, [r7, #24]
 c00173a:	3304      	adds	r3, #4
 c00173c:	4a48      	ldr	r2, [pc, #288]	; (c001860 <Hacl_Impl_SHA2_256_init+0x358>)
 c00173e:	601a      	str	r2, [r3, #0]
  p211[2U] = (uint32_t)0x5b9cca4fU;
 c001740:	69bb      	ldr	r3, [r7, #24]
 c001742:	3308      	adds	r3, #8
 c001744:	4a47      	ldr	r2, [pc, #284]	; (c001864 <Hacl_Impl_SHA2_256_init+0x35c>)
 c001746:	601a      	str	r2, [r3, #0]
  p211[3U] = (uint32_t)0x682e6ff3U;
 c001748:	69bb      	ldr	r3, [r7, #24]
 c00174a:	330c      	adds	r3, #12
 c00174c:	4a46      	ldr	r2, [pc, #280]	; (c001868 <Hacl_Impl_SHA2_256_init+0x360>)
 c00174e:	601a      	str	r2, [r3, #0]
  uint32_t *p111 = p210;
 c001750:	6a3b      	ldr	r3, [r7, #32]
 c001752:	617b      	str	r3, [r7, #20]
  uint32_t *p212 = p210 + (uint32_t)4U;
 c001754:	6a3b      	ldr	r3, [r7, #32]
 c001756:	3310      	adds	r3, #16
 c001758:	613b      	str	r3, [r7, #16]
  p111[0U] = (uint32_t)0x748f82eeU;
 c00175a:	697b      	ldr	r3, [r7, #20]
 c00175c:	4a43      	ldr	r2, [pc, #268]	; (c00186c <Hacl_Impl_SHA2_256_init+0x364>)
 c00175e:	601a      	str	r2, [r3, #0]
  p111[1U] = (uint32_t)0x78a5636fU;
 c001760:	697b      	ldr	r3, [r7, #20]
 c001762:	3304      	adds	r3, #4
 c001764:	4a42      	ldr	r2, [pc, #264]	; (c001870 <Hacl_Impl_SHA2_256_init+0x368>)
 c001766:	601a      	str	r2, [r3, #0]
  p111[2U] = (uint32_t)0x84c87814U;
 c001768:	697b      	ldr	r3, [r7, #20]
 c00176a:	3308      	adds	r3, #8
 c00176c:	4a41      	ldr	r2, [pc, #260]	; (c001874 <Hacl_Impl_SHA2_256_init+0x36c>)
 c00176e:	601a      	str	r2, [r3, #0]
  p111[3U] = (uint32_t)0x8cc70208U;
 c001770:	697b      	ldr	r3, [r7, #20]
 c001772:	330c      	adds	r3, #12
 c001774:	4a40      	ldr	r2, [pc, #256]	; (c001878 <Hacl_Impl_SHA2_256_init+0x370>)
 c001776:	601a      	str	r2, [r3, #0]
  p212[0U] = (uint32_t)0x90befffaU;
 c001778:	693b      	ldr	r3, [r7, #16]
 c00177a:	4a40      	ldr	r2, [pc, #256]	; (c00187c <Hacl_Impl_SHA2_256_init+0x374>)
 c00177c:	601a      	str	r2, [r3, #0]
  p212[1U] = (uint32_t)0xa4506cebU;
 c00177e:	693b      	ldr	r3, [r7, #16]
 c001780:	3304      	adds	r3, #4
 c001782:	4a3f      	ldr	r2, [pc, #252]	; (c001880 <Hacl_Impl_SHA2_256_init+0x378>)
 c001784:	601a      	str	r2, [r3, #0]
  p212[2U] = (uint32_t)0xbef9a3f7U;
 c001786:	693b      	ldr	r3, [r7, #16]
 c001788:	e07c      	b.n	c001884 <Hacl_Impl_SHA2_256_init+0x37c>
 c00178a:	bf00      	nop
 c00178c:	428a2f98 	.word	0x428a2f98
 c001790:	71374491 	.word	0x71374491
 c001794:	b5c0fbcf 	.word	0xb5c0fbcf
 c001798:	e9b5dba5 	.word	0xe9b5dba5
 c00179c:	3956c25b 	.word	0x3956c25b
 c0017a0:	59f111f1 	.word	0x59f111f1
 c0017a4:	923f82a4 	.word	0x923f82a4
 c0017a8:	ab1c5ed5 	.word	0xab1c5ed5
 c0017ac:	d807aa98 	.word	0xd807aa98
 c0017b0:	12835b01 	.word	0x12835b01
 c0017b4:	243185be 	.word	0x243185be
 c0017b8:	550c7dc3 	.word	0x550c7dc3
 c0017bc:	72be5d74 	.word	0x72be5d74
 c0017c0:	80deb1fe 	.word	0x80deb1fe
 c0017c4:	9bdc06a7 	.word	0x9bdc06a7
 c0017c8:	c19bf174 	.word	0xc19bf174
 c0017cc:	e49b69c1 	.word	0xe49b69c1
 c0017d0:	efbe4786 	.word	0xefbe4786
 c0017d4:	0fc19dc6 	.word	0x0fc19dc6
 c0017d8:	240ca1cc 	.word	0x240ca1cc
 c0017dc:	2de92c6f 	.word	0x2de92c6f
 c0017e0:	4a7484aa 	.word	0x4a7484aa
 c0017e4:	5cb0a9dc 	.word	0x5cb0a9dc
 c0017e8:	76f988da 	.word	0x76f988da
 c0017ec:	983e5152 	.word	0x983e5152
 c0017f0:	a831c66d 	.word	0xa831c66d
 c0017f4:	b00327c8 	.word	0xb00327c8
 c0017f8:	bf597fc7 	.word	0xbf597fc7
 c0017fc:	c6e00bf3 	.word	0xc6e00bf3
 c001800:	d5a79147 	.word	0xd5a79147
 c001804:	06ca6351 	.word	0x06ca6351
 c001808:	14292967 	.word	0x14292967
 c00180c:	27b70a85 	.word	0x27b70a85
 c001810:	2e1b2138 	.word	0x2e1b2138
 c001814:	4d2c6dfc 	.word	0x4d2c6dfc
 c001818:	53380d13 	.word	0x53380d13
 c00181c:	650a7354 	.word	0x650a7354
 c001820:	766a0abb 	.word	0x766a0abb
 c001824:	81c2c92e 	.word	0x81c2c92e
 c001828:	92722c85 	.word	0x92722c85
 c00182c:	a2bfe8a1 	.word	0xa2bfe8a1
 c001830:	a81a664b 	.word	0xa81a664b
 c001834:	c24b8b70 	.word	0xc24b8b70
 c001838:	c76c51a3 	.word	0xc76c51a3
 c00183c:	d192e819 	.word	0xd192e819
 c001840:	d6990624 	.word	0xd6990624
 c001844:	f40e3585 	.word	0xf40e3585
 c001848:	106aa070 	.word	0x106aa070
 c00184c:	19a4c116 	.word	0x19a4c116
 c001850:	1e376c08 	.word	0x1e376c08
 c001854:	2748774c 	.word	0x2748774c
 c001858:	34b0bcb5 	.word	0x34b0bcb5
 c00185c:	391c0cb3 	.word	0x391c0cb3
 c001860:	4ed8aa4a 	.word	0x4ed8aa4a
 c001864:	5b9cca4f 	.word	0x5b9cca4f
 c001868:	682e6ff3 	.word	0x682e6ff3
 c00186c:	748f82ee 	.word	0x748f82ee
 c001870:	78a5636f 	.word	0x78a5636f
 c001874:	84c87814 	.word	0x84c87814
 c001878:	8cc70208 	.word	0x8cc70208
 c00187c:	90befffa 	.word	0x90befffa
 c001880:	a4506ceb 	.word	0xa4506ceb
 c001884:	3308      	adds	r3, #8
 c001886:	4a18      	ldr	r2, [pc, #96]	; (c0018e8 <Hacl_Impl_SHA2_256_init+0x3e0>)
 c001888:	601a      	str	r2, [r3, #0]
  p212[3U] = (uint32_t)0xc67178f2U;
 c00188a:	693b      	ldr	r3, [r7, #16]
 c00188c:	330c      	adds	r3, #12
 c00188e:	4a17      	ldr	r2, [pc, #92]	; (c0018ec <Hacl_Impl_SHA2_256_init+0x3e4>)
 c001890:	601a      	str	r2, [r3, #0]
  uint32_t *p112 = h_01;
 c001892:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c001896:	60fb      	str	r3, [r7, #12]
  uint32_t *p2 = h_01 + (uint32_t)4U;
 c001898:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c00189c:	3310      	adds	r3, #16
 c00189e:	60bb      	str	r3, [r7, #8]
  p112[0U] = (uint32_t)0x6a09e667U;
 c0018a0:	68fb      	ldr	r3, [r7, #12]
 c0018a2:	4a13      	ldr	r2, [pc, #76]	; (c0018f0 <Hacl_Impl_SHA2_256_init+0x3e8>)
 c0018a4:	601a      	str	r2, [r3, #0]
  p112[1U] = (uint32_t)0xbb67ae85U;
 c0018a6:	68fb      	ldr	r3, [r7, #12]
 c0018a8:	3304      	adds	r3, #4
 c0018aa:	4a12      	ldr	r2, [pc, #72]	; (c0018f4 <Hacl_Impl_SHA2_256_init+0x3ec>)
 c0018ac:	601a      	str	r2, [r3, #0]
  p112[2U] = (uint32_t)0x3c6ef372U;
 c0018ae:	68fb      	ldr	r3, [r7, #12]
 c0018b0:	3308      	adds	r3, #8
 c0018b2:	4a11      	ldr	r2, [pc, #68]	; (c0018f8 <Hacl_Impl_SHA2_256_init+0x3f0>)
 c0018b4:	601a      	str	r2, [r3, #0]
  p112[3U] = (uint32_t)0xa54ff53aU;
 c0018b6:	68fb      	ldr	r3, [r7, #12]
 c0018b8:	330c      	adds	r3, #12
 c0018ba:	4a10      	ldr	r2, [pc, #64]	; (c0018fc <Hacl_Impl_SHA2_256_init+0x3f4>)
 c0018bc:	601a      	str	r2, [r3, #0]
  p2[0U] = (uint32_t)0x510e527fU;
 c0018be:	68bb      	ldr	r3, [r7, #8]
 c0018c0:	4a0f      	ldr	r2, [pc, #60]	; (c001900 <Hacl_Impl_SHA2_256_init+0x3f8>)
 c0018c2:	601a      	str	r2, [r3, #0]
  p2[1U] = (uint32_t)0x9b05688cU;
 c0018c4:	68bb      	ldr	r3, [r7, #8]
 c0018c6:	3304      	adds	r3, #4
 c0018c8:	4a0e      	ldr	r2, [pc, #56]	; (c001904 <Hacl_Impl_SHA2_256_init+0x3fc>)
 c0018ca:	601a      	str	r2, [r3, #0]
  p2[2U] = (uint32_t)0x1f83d9abU;
 c0018cc:	68bb      	ldr	r3, [r7, #8]
 c0018ce:	3308      	adds	r3, #8
 c0018d0:	4a0d      	ldr	r2, [pc, #52]	; (c001908 <Hacl_Impl_SHA2_256_init+0x400>)
 c0018d2:	601a      	str	r2, [r3, #0]
  p2[3U] = (uint32_t)0x5be0cd19U;
 c0018d4:	68bb      	ldr	r3, [r7, #8]
 c0018d6:	330c      	adds	r3, #12
 c0018d8:	4a0c      	ldr	r2, [pc, #48]	; (c00190c <Hacl_Impl_SHA2_256_init+0x404>)
 c0018da:	601a      	str	r2, [r3, #0]
}
 c0018dc:	bf00      	nop
 c0018de:	378c      	adds	r7, #140	; 0x8c
 c0018e0:	46bd      	mov	sp, r7
 c0018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0018e6:	4770      	bx	lr
 c0018e8:	bef9a3f7 	.word	0xbef9a3f7
 c0018ec:	c67178f2 	.word	0xc67178f2
 c0018f0:	6a09e667 	.word	0x6a09e667
 c0018f4:	bb67ae85 	.word	0xbb67ae85
 c0018f8:	3c6ef372 	.word	0x3c6ef372
 c0018fc:	a54ff53a 	.word	0xa54ff53a
 c001900:	510e527f 	.word	0x510e527f
 c001904:	9b05688c 	.word	0x9b05688c
 c001908:	1f83d9ab 	.word	0x1f83d9ab
 c00190c:	5be0cd19 	.word	0x5be0cd19

0c001910 <Hacl_Impl_SHA2_256_update>:

static void Hacl_Impl_SHA2_256_update(uint32_t *state, uint8_t *data)
{
 c001910:	b580      	push	{r7, lr}
 c001912:	b0bc      	sub	sp, #240	; 0xf0
 c001914:	af00      	add	r7, sp, #0
 c001916:	6078      	str	r0, [r7, #4]
 c001918:	6039      	str	r1, [r7, #0]
  uint32_t data_w[16U] = { 0U };
 c00191a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c00191e:	2240      	movs	r2, #64	; 0x40
 c001920:	2100      	movs	r1, #0
 c001922:	4618      	mov	r0, r3
 c001924:	f007 ff77 	bl	c009816 <memset>
  Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes(data_w, data, (uint32_t)16U);
 c001928:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c00192c:	2210      	movs	r2, #16
 c00192e:	6839      	ldr	r1, [r7, #0]
 c001930:	4618      	mov	r0, r3
 c001932:	f7ff fd7f 	bl	c001434 <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes>
  uint32_t *hash_w = state + (uint32_t)128U;
 c001936:	687b      	ldr	r3, [r7, #4]
 c001938:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c00193c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t *ws_w = state + (uint32_t)64U;
 c001940:	687b      	ldr	r3, [r7, #4]
 c001942:	f503 7380 	add.w	r3, r3, #256	; 0x100
 c001946:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t *k_w = state;
 c00194a:	687b      	ldr	r3, [r7, #4]
 c00194c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint32_t *counter_w = state + (uint32_t)136U;
 c001950:	687b      	ldr	r3, [r7, #4]
 c001952:	f503 7308 	add.w	r3, r3, #544	; 0x220
 c001956:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)16U; i = i + (uint32_t)1U)
 c00195a:	2300      	movs	r3, #0
 c00195c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c001960:	e014      	b.n	c00198c <Hacl_Impl_SHA2_256_update+0x7c>
  {
    uint32_t b = data_w[i];
 c001962:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c001966:	009b      	lsls	r3, r3, #2
 c001968:	33f0      	adds	r3, #240	; 0xf0
 c00196a:	443b      	add	r3, r7
 c00196c:	f853 3cc4 	ldr.w	r3, [r3, #-196]
 c001970:	66fb      	str	r3, [r7, #108]	; 0x6c
    ws_w[i] = b;
 c001972:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c001976:	009b      	lsls	r3, r3, #2
 c001978:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c00197c:	4413      	add	r3, r2
 c00197e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 c001980:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)16U; i = i + (uint32_t)1U)
 c001982:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c001986:	3301      	adds	r3, #1
 c001988:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c00198c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c001990:	2b0f      	cmp	r3, #15
 c001992:	d9e6      	bls.n	c001962 <Hacl_Impl_SHA2_256_update+0x52>
  }
  for (uint32_t i = (uint32_t)16U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c001994:	2310      	movs	r3, #16
 c001996:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 c00199a:	e050      	b.n	c001a3e <Hacl_Impl_SHA2_256_update+0x12e>
  {
    uint32_t t16 = ws_w[i - (uint32_t)16U];
 c00199c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c0019a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c0019a4:	3b10      	subs	r3, #16
 c0019a6:	009b      	lsls	r3, r3, #2
 c0019a8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c0019ac:	4413      	add	r3, r2
 c0019ae:	681b      	ldr	r3, [r3, #0]
 c0019b0:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint32_t t15 = ws_w[i - (uint32_t)15U];
 c0019b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c0019b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c0019ba:	3b0f      	subs	r3, #15
 c0019bc:	009b      	lsls	r3, r3, #2
 c0019be:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c0019c2:	4413      	add	r3, r2
 c0019c4:	681b      	ldr	r3, [r3, #0]
 c0019c6:	67bb      	str	r3, [r7, #120]	; 0x78
    uint32_t t7 = ws_w[i - (uint32_t)7U];
 c0019c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c0019cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c0019d0:	3b07      	subs	r3, #7
 c0019d2:	009b      	lsls	r3, r3, #2
 c0019d4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c0019d8:	4413      	add	r3, r2
 c0019da:	681b      	ldr	r3, [r3, #0]
 c0019dc:	677b      	str	r3, [r7, #116]	; 0x74
    uint32_t t2 = ws_w[i - (uint32_t)2U];
 c0019de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c0019e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c0019e6:	3b02      	subs	r3, #2
 c0019e8:	009b      	lsls	r3, r3, #2
 c0019ea:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c0019ee:	4413      	add	r3, r2
 c0019f0:	681b      	ldr	r3, [r3, #0]
 c0019f2:	673b      	str	r3, [r7, #112]	; 0x70
    ws_w[i] =
      ((t2 >> (uint32_t)17U | t2 << ((uint32_t)32U - (uint32_t)17U))
 c0019f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c0019f6:	ea4f 4273 	mov.w	r2, r3, ror #17
      ^ ((t2 >> (uint32_t)19U | t2 << ((uint32_t)32U - (uint32_t)19U)) ^ t2 >> (uint32_t)10U))
 c0019fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c0019fc:	ea4f 41f3 	mov.w	r1, r3, ror #19
 c001a00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c001a02:	0a9b      	lsrs	r3, r3, #10
 c001a04:	404b      	eors	r3, r1
 c001a06:	405a      	eors	r2, r3
      +
 c001a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c001a0a:	441a      	add	r2, r3
        t7
        +
          ((t15 >> (uint32_t)7U | t15 << ((uint32_t)32U - (uint32_t)7U))
 c001a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c001a0e:	ea4f 11f3 	mov.w	r1, r3, ror #7
          ^ ((t15 >> (uint32_t)18U | t15 << ((uint32_t)32U - (uint32_t)18U)) ^ t15 >> (uint32_t)3U))
 c001a12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c001a14:	ea4f 40b3 	mov.w	r0, r3, ror #18
 c001a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c001a1a:	08db      	lsrs	r3, r3, #3
 c001a1c:	4043      	eors	r3, r0
 c001a1e:	404b      	eors	r3, r1
        +
 c001a20:	18d1      	adds	r1, r2, r3
    ws_w[i] =
 c001a22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c001a26:	009b      	lsls	r3, r3, #2
 c001a28:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c001a2c:	4413      	add	r3, r2
          + t16;
 c001a2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 c001a30:	440a      	add	r2, r1
    ws_w[i] =
 c001a32:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)16U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c001a34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c001a38:	3301      	adds	r3, #1
 c001a3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 c001a3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c001a42:	2b3f      	cmp	r3, #63	; 0x3f
 c001a44:	d9aa      	bls.n	c00199c <Hacl_Impl_SHA2_256_update+0x8c>
  }
  uint32_t hash_0[8U] = { 0U };
 c001a46:	f107 030c 	add.w	r3, r7, #12
 c001a4a:	2220      	movs	r2, #32
 c001a4c:	2100      	movs	r1, #0
 c001a4e:	4618      	mov	r0, r3
 c001a50:	f007 fee1 	bl	c009816 <memset>
  memcpy(hash_0, hash_w, (uint32_t)8U * sizeof hash_w[0U]);
 c001a54:	f107 030c 	add.w	r3, r7, #12
 c001a58:	2220      	movs	r2, #32
 c001a5a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 c001a5e:	4618      	mov	r0, r3
 c001a60:	f007 fecc 	bl	c0097fc <memcpy>
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c001a64:	2300      	movs	r3, #0
 c001a66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c001a6a:	e0b8      	b.n	c001bde <Hacl_Impl_SHA2_256_update+0x2ce>
  {
    uint32_t a = hash_0[0U];
 c001a6c:	68fb      	ldr	r3, [r7, #12]
 c001a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    uint32_t b = hash_0[1U];
 c001a72:	693b      	ldr	r3, [r7, #16]
 c001a74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    uint32_t c = hash_0[2U];
 c001a78:	697b      	ldr	r3, [r7, #20]
 c001a7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    uint32_t d = hash_0[3U];
 c001a7e:	69bb      	ldr	r3, [r7, #24]
 c001a80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint32_t e = hash_0[4U];
 c001a84:	69fb      	ldr	r3, [r7, #28]
 c001a86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    uint32_t f1 = hash_0[5U];
 c001a8a:	6a3b      	ldr	r3, [r7, #32]
 c001a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    uint32_t g = hash_0[6U];
 c001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c001a92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    uint32_t h = hash_0[7U];
 c001a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c001a98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    uint32_t kt = k_w[i];
 c001a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c001aa0:	009b      	lsls	r3, r3, #2
 c001aa2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 c001aa6:	4413      	add	r3, r2
 c001aa8:	681b      	ldr	r3, [r3, #0]
 c001aaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t wst = ws_w[i];
 c001aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c001ab2:	009b      	lsls	r3, r3, #2
 c001ab4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c001ab8:	4413      	add	r3, r2
 c001aba:	681b      	ldr	r3, [r3, #0]
 c001abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint32_t
    t1 =
      h
      +
        ((e >> (uint32_t)6U | e << ((uint32_t)32U - (uint32_t)6U))
 c001ac0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c001ac4:	ea4f 12b3 	mov.w	r2, r3, ror #6
        ^
          ((e >> (uint32_t)11U | e << ((uint32_t)32U - (uint32_t)11U))
 c001ac8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c001acc:	ea4f 21f3 	mov.w	r1, r3, ror #11
          ^ (e >> (uint32_t)25U | e << ((uint32_t)32U - (uint32_t)25U))))
 c001ad0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c001ad4:	ea4f 6373 	mov.w	r3, r3, ror #25
 c001ad8:	404b      	eors	r3, r1
        ^
 c001ada:	405a      	eors	r2, r3
      +
 c001adc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 c001ae0:	441a      	add	r2, r3
      + ((e & f1) ^ (~e & g))
 c001ae2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 c001ae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 c001aea:	4019      	ands	r1, r3
 c001aec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c001af0:	43d8      	mvns	r0, r3
 c001af2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 c001af6:	4003      	ands	r3, r0
 c001af8:	404b      	eors	r3, r1
 c001afa:	441a      	add	r2, r3
      + kt
 c001afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 c001b00:	4413      	add	r3, r2
    t1 =
 c001b02:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 c001b06:	4413      	add	r3, r2
 c001b08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      + wst;
    uint32_t
    t2 =
      ((a >> (uint32_t)2U | a << ((uint32_t)32U - (uint32_t)2U))
 c001b0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c001b10:	ea4f 02b3 	mov.w	r2, r3, ror #2
      ^
        ((a >> (uint32_t)13U | a << ((uint32_t)32U - (uint32_t)13U))
 c001b14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c001b18:	ea4f 3173 	mov.w	r1, r3, ror #13
        ^ (a >> (uint32_t)22U | a << ((uint32_t)32U - (uint32_t)22U))))
 c001b1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c001b20:	ea4f 53b3 	mov.w	r3, r3, ror #22
 c001b24:	404b      	eors	r3, r1
      ^
 c001b26:	405a      	eors	r2, r3
      + ((a & b) ^ ((a & c) ^ (b & c)));
 c001b28:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 c001b2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c001b30:	4019      	ands	r1, r3
 c001b32:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 c001b36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c001b3a:	4058      	eors	r0, r3
 c001b3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c001b40:	4003      	ands	r3, r0
 c001b42:	404b      	eors	r3, r1
    t2 =
 c001b44:	4413      	add	r3, r2
 c001b46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    uint32_t x1 = t1 + t2;
 c001b4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 c001b4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c001b52:	4413      	add	r3, r2
 c001b54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint32_t x5 = d + t1;
 c001b58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 c001b5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 c001b60:	4413      	add	r3, r2
 c001b62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    uint32_t *p1 = hash_0;
 c001b66:	f107 030c 	add.w	r3, r7, #12
 c001b6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t *p2 = hash_0 + (uint32_t)4U;
 c001b6e:	f107 030c 	add.w	r3, r7, #12
 c001b72:	3310      	adds	r3, #16
 c001b74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    p1[0U] = x1;
 c001b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c001b7c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 c001b80:	601a      	str	r2, [r3, #0]
    p1[1U] = a;
 c001b82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c001b86:	3304      	adds	r3, #4
 c001b88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 c001b8c:	601a      	str	r2, [r3, #0]
    p1[2U] = b;
 c001b8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c001b92:	3308      	adds	r3, #8
 c001b94:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 c001b98:	601a      	str	r2, [r3, #0]
    p1[3U] = c;
 c001b9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c001b9e:	330c      	adds	r3, #12
 c001ba0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 c001ba4:	601a      	str	r2, [r3, #0]
    p2[0U] = x5;
 c001ba6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c001baa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 c001bae:	601a      	str	r2, [r3, #0]
    p2[1U] = e;
 c001bb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c001bb4:	3304      	adds	r3, #4
 c001bb6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 c001bba:	601a      	str	r2, [r3, #0]
    p2[2U] = f1;
 c001bbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c001bc0:	3308      	adds	r3, #8
 c001bc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 c001bc6:	601a      	str	r2, [r3, #0]
    p2[3U] = g;
 c001bc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c001bcc:	330c      	adds	r3, #12
 c001bce:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 c001bd2:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c001bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c001bd8:	3301      	adds	r3, #1
 c001bda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c001bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c001be2:	2b3f      	cmp	r3, #63	; 0x3f
 c001be4:	f67f af42 	bls.w	c001a6c <Hacl_Impl_SHA2_256_update+0x15c>
  }
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)8U; i = i + (uint32_t)1U)
 c001be8:	2300      	movs	r3, #0
 c001bea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c001bee:	e022      	b.n	c001c36 <Hacl_Impl_SHA2_256_update+0x326>
  {
    uint32_t xi = hash_w[i];
 c001bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c001bf4:	009b      	lsls	r3, r3, #2
 c001bf6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 c001bfa:	4413      	add	r3, r2
 c001bfc:	681b      	ldr	r3, [r3, #0]
 c001bfe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32_t yi = hash_0[i];
 c001c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c001c06:	009b      	lsls	r3, r3, #2
 c001c08:	33f0      	adds	r3, #240	; 0xf0
 c001c0a:	443b      	add	r3, r7
 c001c0c:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 c001c10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    hash_w[i] = xi + yi;
 c001c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c001c18:	009b      	lsls	r3, r3, #2
 c001c1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 c001c1e:	4413      	add	r3, r2
 c001c20:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 c001c24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 c001c28:	440a      	add	r2, r1
 c001c2a:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)8U; i = i + (uint32_t)1U)
 c001c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c001c30:	3301      	adds	r3, #1
 c001c32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c001c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c001c3a:	2b07      	cmp	r3, #7
 c001c3c:	d9d8      	bls.n	c001bf0 <Hacl_Impl_SHA2_256_update+0x2e0>
  }
  uint32_t c0 = counter_w[0U];
 c001c3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c001c42:	681b      	ldr	r3, [r3, #0]
 c001c44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  uint32_t one1 = (uint32_t)1U;
 c001c48:	2301      	movs	r3, #1
 c001c4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  counter_w[0U] = c0 + one1;
 c001c4e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 c001c52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 c001c56:	441a      	add	r2, r3
 c001c58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c001c5c:	601a      	str	r2, [r3, #0]
}
 c001c5e:	bf00      	nop
 c001c60:	37f0      	adds	r7, #240	; 0xf0
 c001c62:	46bd      	mov	sp, r7
 c001c64:	bd80      	pop	{r7, pc}

0c001c66 <Hacl_Impl_SHA2_256_update_multi>:

static void Hacl_Impl_SHA2_256_update_multi(uint32_t *state, uint8_t *data, uint32_t n1)
{
 c001c66:	b580      	push	{r7, lr}
 c001c68:	b086      	sub	sp, #24
 c001c6a:	af00      	add	r7, sp, #0
 c001c6c:	60f8      	str	r0, [r7, #12]
 c001c6e:	60b9      	str	r1, [r7, #8]
 c001c70:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < n1; i = i + (uint32_t)1U)
 c001c72:	2300      	movs	r3, #0
 c001c74:	617b      	str	r3, [r7, #20]
 c001c76:	e00b      	b.n	c001c90 <Hacl_Impl_SHA2_256_update_multi+0x2a>
  {
    uint8_t *b = data + i * (uint32_t)64U;
 c001c78:	697b      	ldr	r3, [r7, #20]
 c001c7a:	019b      	lsls	r3, r3, #6
 c001c7c:	68ba      	ldr	r2, [r7, #8]
 c001c7e:	4413      	add	r3, r2
 c001c80:	613b      	str	r3, [r7, #16]
    Hacl_Impl_SHA2_256_update(state, b);
 c001c82:	6939      	ldr	r1, [r7, #16]
 c001c84:	68f8      	ldr	r0, [r7, #12]
 c001c86:	f7ff fe43 	bl	c001910 <Hacl_Impl_SHA2_256_update>
  for (uint32_t i = (uint32_t)0U; i < n1; i = i + (uint32_t)1U)
 c001c8a:	697b      	ldr	r3, [r7, #20]
 c001c8c:	3301      	adds	r3, #1
 c001c8e:	617b      	str	r3, [r7, #20]
 c001c90:	697a      	ldr	r2, [r7, #20]
 c001c92:	687b      	ldr	r3, [r7, #4]
 c001c94:	429a      	cmp	r2, r3
 c001c96:	d3ef      	bcc.n	c001c78 <Hacl_Impl_SHA2_256_update_multi+0x12>
  }
}
 c001c98:	bf00      	nop
 c001c9a:	bf00      	nop
 c001c9c:	3718      	adds	r7, #24
 c001c9e:	46bd      	mov	sp, r7
 c001ca0:	bd80      	pop	{r7, pc}

0c001ca2 <Hacl_Impl_SHA2_256_update_last>:

static void Hacl_Impl_SHA2_256_update_last(uint32_t *state, uint8_t *data, uint32_t len)
{
 c001ca2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c001ca6:	b0ba      	sub	sp, #232	; 0xe8
 c001ca8:	af00      	add	r7, sp, #0
 c001caa:	6278      	str	r0, [r7, #36]	; 0x24
 c001cac:	6239      	str	r1, [r7, #32]
 c001cae:	61fa      	str	r2, [r7, #28]
  uint8_t blocks[128U] = { 0U };
 c001cb0:	2300      	movs	r3, #0
 c001cb2:	62bb      	str	r3, [r7, #40]	; 0x28
 c001cb4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 c001cb8:	237c      	movs	r3, #124	; 0x7c
 c001cba:	461a      	mov	r2, r3
 c001cbc:	2100      	movs	r1, #0
 c001cbe:	f007 fdaa 	bl	c009816 <memset>
  uint32_t nb;
  if (len < (uint32_t)56U)
 c001cc2:	69fb      	ldr	r3, [r7, #28]
 c001cc4:	2b37      	cmp	r3, #55	; 0x37
 c001cc6:	d803      	bhi.n	c001cd0 <Hacl_Impl_SHA2_256_update_last+0x2e>
    nb = (uint32_t)1U;
 c001cc8:	2301      	movs	r3, #1
 c001cca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c001cce:	e002      	b.n	c001cd6 <Hacl_Impl_SHA2_256_update_last+0x34>
  else
    nb = (uint32_t)2U;
 c001cd0:	2302      	movs	r3, #2
 c001cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint8_t *final_blocks;
  if (len < (uint32_t)56U)
 c001cd6:	69fb      	ldr	r3, [r7, #28]
 c001cd8:	2b37      	cmp	r3, #55	; 0x37
 c001cda:	d805      	bhi.n	c001ce8 <Hacl_Impl_SHA2_256_update_last+0x46>
    final_blocks = blocks + (uint32_t)64U;
 c001cdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 c001ce0:	3340      	adds	r3, #64	; 0x40
 c001ce2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c001ce6:	e003      	b.n	c001cf0 <Hacl_Impl_SHA2_256_update_last+0x4e>
  else
    final_blocks = blocks;
 c001ce8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 c001cec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  memcpy(final_blocks, data, len * sizeof data[0U]);
 c001cf0:	69fa      	ldr	r2, [r7, #28]
 c001cf2:	6a39      	ldr	r1, [r7, #32]
 c001cf4:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 c001cf8:	f007 fd80 	bl	c0097fc <memcpy>
  uint32_t n1 = state[136U];
 c001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c001cfe:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 c001d02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint8_t *padding = final_blocks + len;
 c001d06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 c001d0a:	69fb      	ldr	r3, [r7, #28]
 c001d0c:	4413      	add	r3, r2
 c001d0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t
  pad0len = ((uint32_t)64U - (len + (uint32_t)8U + (uint32_t)1U) % (uint32_t)64U) % (uint32_t)64U;
 c001d12:	69fa      	ldr	r2, [r7, #28]
 c001d14:	f06f 0308 	mvn.w	r3, #8
 c001d18:	1a9b      	subs	r3, r3, r2
 c001d1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c001d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint8_t *buf1 = padding;
 c001d22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 c001d26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  uint8_t *buf2 = padding + (uint32_t)1U + pad0len;
 c001d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 c001d2e:	3301      	adds	r3, #1
 c001d30:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c001d34:	4413      	add	r3, r2
 c001d36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  uint64_t
  encodedlen = ((uint64_t)n1 * (uint64_t)(uint32_t)64U + (uint64_t)len) * (uint64_t)(uint32_t)8U;
 c001d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 c001d3e:	2200      	movs	r2, #0
 c001d40:	4698      	mov	r8, r3
 c001d42:	4691      	mov	r9, r2
 c001d44:	f04f 0200 	mov.w	r2, #0
 c001d48:	f04f 0300 	mov.w	r3, #0
 c001d4c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 c001d50:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 c001d54:	ea4f 1288 	mov.w	r2, r8, lsl #6
 c001d58:	69f9      	ldr	r1, [r7, #28]
 c001d5a:	2000      	movs	r0, #0
 c001d5c:	6139      	str	r1, [r7, #16]
 c001d5e:	6178      	str	r0, [r7, #20]
 c001d60:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 c001d64:	4641      	mov	r1, r8
 c001d66:	1854      	adds	r4, r2, r1
 c001d68:	4649      	mov	r1, r9
 c001d6a:	eb43 0101 	adc.w	r1, r3, r1
 c001d6e:	460d      	mov	r5, r1
 c001d70:	f04f 0200 	mov.w	r2, #0
 c001d74:	f04f 0300 	mov.w	r3, #0
 c001d78:	00eb      	lsls	r3, r5, #3
 c001d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 c001d7e:	00e2      	lsls	r2, r4, #3
 c001d80:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  buf1[0U] = (uint8_t)0x80U;
 c001d84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c001d88:	2280      	movs	r2, #128	; 0x80
 c001d8a:	701a      	strb	r2, [r3, #0]
  store64_be(buf2, encodedlen);
 c001d8c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 c001d90:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 c001d94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c001d98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 c001d9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c001da0:	0e1a      	lsrs	r2, r3, #24
 c001da2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c001da6:	0a1b      	lsrs	r3, r3, #8
 c001da8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c001dac:	431a      	orrs	r2, r3
 c001dae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c001db2:	021b      	lsls	r3, r3, #8
 c001db4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c001db8:	431a      	orrs	r2, r3
 c001dba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c001dbe:	061b      	lsls	r3, r3, #24
 c001dc0:	4313      	orrs	r3, r2
 c001dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 c001dc6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 c001dca:	f04f 0200 	mov.w	r2, #0
 c001dce:	f04f 0300 	mov.w	r3, #0
 c001dd2:	000a      	movs	r2, r1
 c001dd4:	2300      	movs	r3, #0
 c001dd6:	4613      	mov	r3, r2
 c001dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c001ddc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c001de0:	0e1a      	lsrs	r2, r3, #24
 c001de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c001de6:	0a1b      	lsrs	r3, r3, #8
 c001de8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c001dec:	431a      	orrs	r2, r3
 c001dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c001df2:	021b      	lsls	r3, r3, #8
 c001df4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c001df8:	431a      	orrs	r2, r3
 c001dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c001dfe:	061b      	lsls	r3, r3, #24
 c001e00:	4313      	orrs	r3, r2
 c001e02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 c001e06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c001e0a:	2200      	movs	r2, #0
 c001e0c:	60bb      	str	r3, [r7, #8]
 c001e0e:	60fa      	str	r2, [r7, #12]
 c001e10:	f04f 0200 	mov.w	r2, #0
 c001e14:	f04f 0300 	mov.w	r3, #0
 c001e18:	68b9      	ldr	r1, [r7, #8]
 c001e1a:	000b      	movs	r3, r1
 c001e1c:	2200      	movs	r2, #0
 c001e1e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 c001e22:	2000      	movs	r0, #0
 c001e24:	468a      	mov	sl, r1
 c001e26:	4683      	mov	fp, r0
 c001e28:	ea42 010a 	orr.w	r1, r2, sl
 c001e2c:	6039      	str	r1, [r7, #0]
 c001e2e:	ea43 030b 	orr.w	r3, r3, fp
 c001e32:	607b      	str	r3, [r7, #4]
 c001e34:	e9d7 2300 	ldrd	r2, r3, [r7]
 c001e38:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 c001e3c:	f7ff faea 	bl	c001414 <store64>
  Hacl_Impl_SHA2_256_update_multi(state, final_blocks, nb);
 c001e40:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 c001e44:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 c001e48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 c001e4a:	f7ff ff0c 	bl	c001c66 <Hacl_Impl_SHA2_256_update_multi>
}
 c001e4e:	bf00      	nop
 c001e50:	37e8      	adds	r7, #232	; 0xe8
 c001e52:	46bd      	mov	sp, r7
 c001e54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c001e58 <Hacl_Impl_SHA2_256_finish>:

static void Hacl_Impl_SHA2_256_finish(uint32_t *state, uint8_t *hash1)
{
 c001e58:	b580      	push	{r7, lr}
 c001e5a:	b084      	sub	sp, #16
 c001e5c:	af00      	add	r7, sp, #0
 c001e5e:	6078      	str	r0, [r7, #4]
 c001e60:	6039      	str	r1, [r7, #0]
  uint32_t *hash_w = state + (uint32_t)128U;
 c001e62:	687b      	ldr	r3, [r7, #4]
 c001e64:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c001e68:	60fb      	str	r3, [r7, #12]
  Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes(hash1, hash_w, (uint32_t)8U);
 c001e6a:	2208      	movs	r2, #8
 c001e6c:	68f9      	ldr	r1, [r7, #12]
 c001e6e:	6838      	ldr	r0, [r7, #0]
 c001e70:	f7ff fb14 	bl	c00149c <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes>
}
 c001e74:	bf00      	nop
 c001e76:	3710      	adds	r7, #16
 c001e78:	46bd      	mov	sp, r7
 c001e7a:	bd80      	pop	{r7, pc}

0c001e7c <Hacl_Impl_SHA2_256_hash>:

static void Hacl_Impl_SHA2_256_hash(uint8_t *hash1, uint8_t *input, uint32_t len)
{
 c001e7c:	b580      	push	{r7, lr}
 c001e7e:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 c001e82:	af00      	add	r7, sp, #0
 c001e84:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001e88:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 c001e8c:	6018      	str	r0, [r3, #0]
 c001e8e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001e92:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 c001e96:	6019      	str	r1, [r3, #0]
 c001e98:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001e9c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c001ea0:	601a      	str	r2, [r3, #0]
  uint32_t state[137U] = { 0U };
 c001ea2:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001ea6:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 c001eaa:	4618      	mov	r0, r3
 c001eac:	f44f 7309 	mov.w	r3, #548	; 0x224
 c001eb0:	461a      	mov	r2, r3
 c001eb2:	2100      	movs	r1, #0
 c001eb4:	f007 fcaf 	bl	c009816 <memset>
  uint32_t n1 = len / (uint32_t)64U;
 c001eb8:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001ebc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c001ec0:	681b      	ldr	r3, [r3, #0]
 c001ec2:	099b      	lsrs	r3, r3, #6
 c001ec4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  uint32_t r = len % (uint32_t)64U;
 c001ec8:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001ecc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c001ed0:	681b      	ldr	r3, [r3, #0]
 c001ed2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c001ed6:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  uint8_t *input_blocks = input;
 c001eda:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001ede:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 c001ee2:	681b      	ldr	r3, [r3, #0]
 c001ee4:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  uint8_t *input_last = input + n1 * (uint32_t)64U;
 c001ee8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 c001eec:	019b      	lsls	r3, r3, #6
 c001eee:	f507 7212 	add.w	r2, r7, #584	; 0x248
 c001ef2:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 c001ef6:	6812      	ldr	r2, [r2, #0]
 c001ef8:	4413      	add	r3, r2
 c001efa:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
  Hacl_Impl_SHA2_256_init(state);
 c001efe:	f107 0314 	add.w	r3, r7, #20
 c001f02:	4618      	mov	r0, r3
 c001f04:	f7ff fb00 	bl	c001508 <Hacl_Impl_SHA2_256_init>
  Hacl_Impl_SHA2_256_update_multi(state, input_blocks, n1);
 c001f08:	f107 0314 	add.w	r3, r7, #20
 c001f0c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 c001f10:	f8d7 123c 	ldr.w	r1, [r7, #572]	; 0x23c
 c001f14:	4618      	mov	r0, r3
 c001f16:	f7ff fea6 	bl	c001c66 <Hacl_Impl_SHA2_256_update_multi>
  Hacl_Impl_SHA2_256_update_last(state, input_last, r);
 c001f1a:	f107 0314 	add.w	r3, r7, #20
 c001f1e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 c001f22:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 c001f26:	4618      	mov	r0, r3
 c001f28:	f7ff febb 	bl	c001ca2 <Hacl_Impl_SHA2_256_update_last>
  Hacl_Impl_SHA2_256_finish(state, hash1);
 c001f2c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001f30:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 c001f34:	f107 0214 	add.w	r2, r7, #20
 c001f38:	6819      	ldr	r1, [r3, #0]
 c001f3a:	4610      	mov	r0, r2
 c001f3c:	f7ff ff8c 	bl	c001e58 <Hacl_Impl_SHA2_256_finish>
}
 c001f40:	bf00      	nop
 c001f42:	f507 7712 	add.w	r7, r7, #584	; 0x248
 c001f46:	46bd      	mov	sp, r7
 c001f48:	bd80      	pop	{r7, pc}

0c001f4a <Hacl_SHA2_256_hash>:
{
  Hacl_Impl_SHA2_256_finish(state, hash1);
}

void Hacl_SHA2_256_hash(uint8_t *hash1, uint8_t *input, uint32_t len)
{
 c001f4a:	b580      	push	{r7, lr}
 c001f4c:	b084      	sub	sp, #16
 c001f4e:	af00      	add	r7, sp, #0
 c001f50:	60f8      	str	r0, [r7, #12]
 c001f52:	60b9      	str	r1, [r7, #8]
 c001f54:	607a      	str	r2, [r7, #4]
  Hacl_Impl_SHA2_256_hash(hash1, input, len);
 c001f56:	687a      	ldr	r2, [r7, #4]
 c001f58:	68b9      	ldr	r1, [r7, #8]
 c001f5a:	68f8      	ldr	r0, [r7, #12]
 c001f5c:	f7ff ff8e 	bl	c001e7c <Hacl_Impl_SHA2_256_hash>
}
 c001f60:	bf00      	nop
 c001f62:	3710      	adds	r7, #16
 c001f64:	46bd      	mov	sp, r7
 c001f66:	bd80      	pop	{r7, pc}

0c001f68 <_setup_data>:
	----------------------------- SUPERVISOR  --------------------------------------------
	---------------------------------------------------------------------------------
*/

//-------------------------- UTILS -------//
void _setup_data(){
 c001f68:	b480      	push	{r7}
 c001f6a:	b083      	sub	sp, #12
 c001f6c:	af00      	add	r7, sp, #0
	for(unsigned int i = 0; i < CHAL_SIZE; ++i ){
 c001f6e:	2300      	movs	r3, #0
 c001f70:	607b      	str	r3, [r7, #4]
 c001f72:	e014      	b.n	c001f9e <_setup_data+0x36>
		cfa_engine_conf.hash_key[i] = i;
 c001f74:	687b      	ldr	r3, [r7, #4]
 c001f76:	b2d9      	uxtb	r1, r3
 c001f78:	4a0e      	ldr	r2, [pc, #56]	; (c001fb4 <_setup_data+0x4c>)
 c001f7a:	687b      	ldr	r3, [r7, #4]
 c001f7c:	4413      	add	r3, r2
 c001f7e:	334a      	adds	r3, #74	; 0x4a
 c001f80:	460a      	mov	r2, r1
 c001f82:	701a      	strb	r2, [r3, #0]
		cfa_engine_conf.challenge[i] = 0x65+i;
 c001f84:	687b      	ldr	r3, [r7, #4]
 c001f86:	b2db      	uxtb	r3, r3
 c001f88:	3365      	adds	r3, #101	; 0x65
 c001f8a:	b2d9      	uxtb	r1, r3
 c001f8c:	4a09      	ldr	r2, [pc, #36]	; (c001fb4 <_setup_data+0x4c>)
 c001f8e:	687b      	ldr	r3, [r7, #4]
 c001f90:	4413      	add	r3, r2
 c001f92:	3308      	adds	r3, #8
 c001f94:	460a      	mov	r2, r1
 c001f96:	701a      	strb	r2, [r3, #0]
	for(unsigned int i = 0; i < CHAL_SIZE; ++i ){
 c001f98:	687b      	ldr	r3, [r7, #4]
 c001f9a:	3301      	adds	r3, #1
 c001f9c:	607b      	str	r3, [r7, #4]
 c001f9e:	687b      	ldr	r3, [r7, #4]
 c001fa0:	2b3f      	cmp	r3, #63	; 0x3f
 c001fa2:	d9e7      	bls.n	c001f74 <_setup_data+0xc>
	}
}
 c001fa4:	bf00      	nop
 c001fa6:	bf00      	nop
 c001fa8:	370c      	adds	r7, #12
 c001faa:	46bd      	mov	sp, r7
 c001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001fb0:	4770      	bx	lr
 c001fb2:	bf00      	nop
 c001fb4:	300020f8 	.word	0x300020f8

0c001fb8 <_update_challenge>:

void _update_challenge(uint8_t* chl){
 c001fb8:	b4f0      	push	{r4, r5, r6, r7}
 c001fba:	b082      	sub	sp, #8
 c001fbc:	af00      	add	r7, sp, #0
 c001fbe:	6078      	str	r0, [r7, #4]
	memcpy(cfa_engine_conf.challenge,chl, CHAL_SIZE);
 c001fc0:	4b15      	ldr	r3, [pc, #84]	; (c002018 <_update_challenge+0x60>)
 c001fc2:	687a      	ldr	r2, [r7, #4]
 c001fc4:	4614      	mov	r4, r2
 c001fc6:	f103 0608 	add.w	r6, r3, #8
 c001fca:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 c001fce:	4635      	mov	r5, r6
 c001fd0:	4623      	mov	r3, r4
 c001fd2:	6818      	ldr	r0, [r3, #0]
 c001fd4:	6859      	ldr	r1, [r3, #4]
 c001fd6:	689a      	ldr	r2, [r3, #8]
 c001fd8:	68db      	ldr	r3, [r3, #12]
 c001fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 c001fdc:	3410      	adds	r4, #16
 c001fde:	3610      	adds	r6, #16
 c001fe0:	4564      	cmp	r4, ip
 c001fe2:	d1f4      	bne.n	c001fce <_update_challenge+0x16>
	memcpy(vrf_resp.new_challenge,chl, CHAL_SIZE);
 c001fe4:	4a0d      	ldr	r2, [pc, #52]	; (c00201c <_update_challenge+0x64>)
 c001fe6:	687b      	ldr	r3, [r7, #4]
 c001fe8:	461c      	mov	r4, r3
 c001fea:	4616      	mov	r6, r2
 c001fec:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 c001ff0:	4635      	mov	r5, r6
 c001ff2:	4623      	mov	r3, r4
 c001ff4:	6818      	ldr	r0, [r3, #0]
 c001ff6:	6859      	ldr	r1, [r3, #4]
 c001ff8:	689a      	ldr	r2, [r3, #8]
 c001ffa:	68db      	ldr	r3, [r3, #12]
 c001ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 c001ffe:	3410      	adds	r4, #16
 c002000:	3610      	adds	r6, #16
 c002002:	4564      	cmp	r4, ip
 c002004:	d1f4      	bne.n	c001ff0 <_update_challenge+0x38>
	cfa_engine_conf.challenge_renewed = TRUE;
 c002006:	4b04      	ldr	r3, [pc, #16]	; (c002018 <_update_challenge+0x60>)
 c002008:	2201      	movs	r2, #1
 c00200a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 c00200e:	bf00      	nop
 c002010:	3708      	adds	r7, #8
 c002012:	46bd      	mov	sp, r7
 c002014:	bcf0      	pop	{r4, r5, r6, r7}
 c002016:	4770      	bx	lr
 c002018:	300020f8 	.word	0x300020f8
 c00201c:	30002184 	.word	0x30002184

0c002020 <_clean>:

void _clean(){
 c002020:	b480      	push	{r7}
 c002022:	af00      	add	r7, sp, #0
	cfa_engine_conf.log_counter = 0;
 c002024:	4b10      	ldr	r3, [pc, #64]	; (c002068 <_clean+0x48>)
 c002026:	2200      	movs	r2, #0
 c002028:	80da      	strh	r2, [r3, #6]
	report_secure.number_of_logs_sent = 0;
 c00202a:	4b10      	ldr	r3, [pc, #64]	; (c00206c <_clean+0x4c>)
 c00202c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 c002030:	2200      	movs	r2, #0
 c002032:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	cfa_engine_conf.initialized = INITIALIZED;
 c002036:	4b0c      	ldr	r3, [pc, #48]	; (c002068 <_clean+0x48>)
 c002038:	22ee      	movs	r2, #238	; 0xee
 c00203a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	cfa_engine_conf.attestation_status = INACTIVE;
 c00203e:	4b0a      	ldr	r3, [pc, #40]	; (c002068 <_clean+0x48>)
 c002040:	2200      	movs	r2, #0
 c002042:	711a      	strb	r2, [r3, #4]
	report_secure.num_CF_Log_size = 0;
 c002044:	4b09      	ldr	r3, [pc, #36]	; (c00206c <_clean+0x4c>)
 c002046:	2200      	movs	r2, #0
 c002048:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	cfa_engine_conf.challenge_renewed = FALSE;
 c00204c:	4b06      	ldr	r3, [pc, #24]	; (c002068 <_clean+0x48>)
 c00204e:	2200      	movs	r2, #0
 c002050:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	report_secure.isFinal = FALSE;
 c002054:	4b05      	ldr	r3, [pc, #20]	; (c00206c <_clean+0x4c>)
 c002056:	2200      	movs	r2, #0
 c002058:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 c00205c:	bf00      	nop
 c00205e:	46bd      	mov	sp, r7
 c002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002064:	4770      	bx	lr
 c002066:	bf00      	nop
 c002068:	300020f8 	.word	0x300020f8
 c00206c:	30000074 	.word	0x30000074

0c002070 <_clean_partial>:

void _clean_partial(){
 c002070:	b480      	push	{r7}
 c002072:	af00      	add	r7, sp, #0
	report_secure.num_CF_Log_size = 0;
 c002074:	4b04      	ldr	r3, [pc, #16]	; (c002088 <_clean_partial+0x18>)
 c002076:	2200      	movs	r2, #0
 c002078:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
}
 c00207c:	bf00      	nop
 c00207e:	46bd      	mov	sp, r7
 c002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002084:	4770      	bx	lr
 c002086:	bf00      	nop
 c002088:	30000074 	.word	0x30000074

0c00208c <_run_application>:

void _run_application(){
 c00208c:	b598      	push	{r3, r4, r7, lr}
 c00208e:	af00      	add	r7, sp, #0
	//start app
	if (cfa_engine_conf.iac.app_start_address != NULL){
 c002090:	4b18      	ldr	r3, [pc, #96]	; (c0020f4 <_run_application+0x68>)
 c002092:	681b      	ldr	r3, [r3, #0]
 c002094:	2b00      	cmp	r3, #0
 c002096:	d02b      	beq.n	c0020f0 <_run_application+0x64>
		cfa_engine_conf.iac.app_start_address();
 c002098:	4b16      	ldr	r3, [pc, #88]	; (c0020f4 <_run_application+0x68>)
 c00209a:	681b      	ldr	r3, [r3, #0]
 c00209c:	461c      	mov	r4, r3
 c00209e:	0864      	lsrs	r4, r4, #1
 c0020a0:	0064      	lsls	r4, r4, #1
 c0020a2:	4620      	mov	r0, r4
 c0020a4:	4621      	mov	r1, r4
 c0020a6:	4622      	mov	r2, r4
 c0020a8:	4623      	mov	r3, r4
 c0020aa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0020ae:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0020b2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0020b6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0020ba:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0020be:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0020c2:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0020c6:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0020ca:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0020ce:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0020d2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0020d6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0020da:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0020de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0020e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0020e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0020ea:	f7fe f8b3 	bl	c000254 <__gnu_cmse_nonsecure_call>
	}
	return;
 c0020ee:	bf00      	nop
 c0020f0:	bf00      	nop
}
 c0020f2:	bd98      	pop	{r3, r4, r7, pc}
 c0020f4:	300020f8 	.word	0x300020f8

0c0020f8 <record_output_data>:

uint32_t output_data = 0;
void record_output_data(uint32_t value){
 c0020f8:	b480      	push	{r7}
 c0020fa:	b083      	sub	sp, #12
 c0020fc:	af00      	add	r7, sp, #0
 c0020fe:	6078      	str	r0, [r7, #4]
	output_data = value;
 c002100:	4a04      	ldr	r2, [pc, #16]	; (c002114 <record_output_data+0x1c>)
 c002102:	687b      	ldr	r3, [r7, #4]
 c002104:	6013      	str	r3, [r2, #0]
}
 c002106:	bf00      	nop
 c002108:	370c      	adds	r7, #12
 c00210a:	46bd      	mov	sp, r7
 c00210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002110:	4770      	bx	lr
 c002112:	bf00      	nop
 c002114:	300022a4 	.word	0x300022a4

0c002118 <CFA_ENGINE_start>:
}
#endif

/* -------------  NON SECURE CALLABLES */

void CFA_ENGINE_start(){
 c002118:	b580      	push	{r7, lr}
 c00211a:	af00      	add	r7, sp, #0
	while(1){
		_attest_memory();
 c00211c:	f000 faaa 	bl	c002674 <_attest_memory>
		_setup_data();
 c002120:	f7ff ff22 	bl	c001f68 <_setup_data>
		_clean();
 c002124:	f7ff ff7c 	bl	c002020 <_clean>
		_read_serial_loop();
 c002128:	f000 f8d8 	bl	c0022dc <_read_serial_loop>
		_attest_memory();
 c00212c:	e7f6      	b.n	c00211c <CFA_ENGINE_start+0x4>
	...

0c002130 <CFA_ENGINE_register_callback>:
	}
}

void CFA_ENGINE_register_callback(){
 c002130:	b480      	push	{r7}
 c002132:	af00      	add	r7, sp, #0
	cfa_engine_conf.iac.app_start_address = (funcptr_NS)  pAttestationFunctionCallback;
 c002134:	4b04      	ldr	r3, [pc, #16]	; (c002148 <CFA_ENGINE_register_callback+0x18>)
 c002136:	681b      	ldr	r3, [r3, #0]
 c002138:	461a      	mov	r2, r3
 c00213a:	4b04      	ldr	r3, [pc, #16]	; (c00214c <CFA_ENGINE_register_callback+0x1c>)
 c00213c:	601a      	str	r2, [r3, #0]
	return;
 c00213e:	bf00      	nop
}
 c002140:	46bd      	mov	sp, r7
 c002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002146:	4770      	bx	lr
 c002148:	30002330 	.word	0x30002330
 c00214c:	300020f8 	.word	0x300020f8

0c002150 <STATE_initialize_attestation>:

/* --------------- - STATE HANDLING --------------------- */



int STATE_initialize_attestation(){
 c002150:	b580      	push	{r7, lr}
 c002152:	b082      	sub	sp, #8
 c002154:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.attestation_status == INACTIVE){
 c002156:	4b13      	ldr	r3, [pc, #76]	; (c0021a4 <STATE_initialize_attestation+0x54>)
 c002158:	791b      	ldrb	r3, [r3, #4]
 c00215a:	2b00      	cmp	r3, #0
 c00215c:	d11c      	bne.n	c002198 <STATE_initialize_attestation+0x48>

		// send response to vrf
		uint8_t ready_char[COMMAND_SIZE+1] = INIT_ATTESTATION;
 c00215e:	4a12      	ldr	r2, [pc, #72]	; (c0021a8 <STATE_initialize_attestation+0x58>)
 c002160:	463b      	mov	r3, r7
 c002162:	e892 0003 	ldmia.w	r2, {r0, r1}
 c002166:	6018      	str	r0, [r3, #0]
 c002168:	3304      	adds	r3, #4
 c00216a:	7019      	strb	r1, [r3, #0]
		SecureUartTx(ready_char, COMMAND_SIZE);
 c00216c:	463b      	mov	r3, r7
 c00216e:	2104      	movs	r1, #4
 c002170:	4618      	mov	r0, r3
 c002172:	f003 f9c5 	bl	c005500 <SecureUartTx>

		// receive challange
		if(_receive_challenge()) return 1;
 c002176:	f000 f955 	bl	c002424 <_receive_challenge>
 c00217a:	4603      	mov	r3, r0
 c00217c:	2b00      	cmp	r3, #0
 c00217e:	d001      	beq.n	c002184 <STATE_initialize_attestation+0x34>
 c002180:	2301      	movs	r3, #1
 c002182:	e00a      	b.n	c00219a <STATE_initialize_attestation+0x4a>

		// start application
		cfa_engine_conf.attestation_status = ACTIVE;
 c002184:	4b07      	ldr	r3, [pc, #28]	; (c0021a4 <STATE_initialize_attestation+0x54>)
 c002186:	2201      	movs	r2, #1
 c002188:	711a      	strb	r2, [r3, #4]
		CFA_ENGINE_run_attestation();
 c00218a:	f000 fb87 	bl	c00289c <CFA_ENGINE_run_attestation>
		cfa_engine_conf.attestation_status = COMPLETE;
 c00218e:	4b05      	ldr	r3, [pc, #20]	; (c0021a4 <STATE_initialize_attestation+0x54>)
 c002190:	2202      	movs	r2, #2
 c002192:	711a      	strb	r2, [r3, #4]

		// Send final report
		_send_report();
 c002194:	f000 fa1c 	bl	c0025d0 <_send_report>
	}
	return CONTINUE_LOOP;
 c002198:	2301      	movs	r3, #1
}
 c00219a:	4618      	mov	r0, r3
 c00219c:	3708      	adds	r7, #8
 c00219e:	46bd      	mov	sp, r7
 c0021a0:	bd80      	pop	{r7, pc}
 c0021a2:	bf00      	nop
 c0021a4:	300020f8 	.word	0x300020f8
 c0021a8:	0c009840 	.word	0x0c009840

0c0021ac <STATE_accept_report>:

int STATE_accept_report(){
 c0021ac:	b580      	push	{r7, lr}
 c0021ae:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.attestation_status == COMPLETE){
 c0021b0:	4b06      	ldr	r3, [pc, #24]	; (c0021cc <STATE_accept_report+0x20>)
 c0021b2:	791b      	ldrb	r3, [r3, #4]
 c0021b4:	2b02      	cmp	r3, #2
 c0021b6:	d106      	bne.n	c0021c6 <STATE_accept_report+0x1a>
		cfa_engine_conf.attestation_status = INACTIVE; //temp
 c0021b8:	4b04      	ldr	r3, [pc, #16]	; (c0021cc <STATE_accept_report+0x20>)
 c0021ba:	2200      	movs	r2, #0
 c0021bc:	711a      	strb	r2, [r3, #4]
		_clean();
 c0021be:	f7ff ff2f 	bl	c002020 <_clean>
		return EXIT_LOOP;
 c0021c2:	2300      	movs	r3, #0
 c0021c4:	e000      	b.n	c0021c8 <STATE_accept_report+0x1c>
	}
	return CONTINUE_LOOP;
 c0021c6:	2301      	movs	r3, #1
}
 c0021c8:	4618      	mov	r0, r3
 c0021ca:	bd80      	pop	{r7, pc}
 c0021cc:	300020f8 	.word	0x300020f8

0c0021d0 <STATE_heal>:

int STATE_heal(){
 c0021d0:	b580      	push	{r7, lr}
 c0021d2:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.attestation_status == COMPLETE || cfa_engine_conf.attestation_status == WAITING_PARTIAL){
 c0021d4:	4b07      	ldr	r3, [pc, #28]	; (c0021f4 <STATE_heal+0x24>)
 c0021d6:	791b      	ldrb	r3, [r3, #4]
 c0021d8:	2b02      	cmp	r3, #2
 c0021da:	d003      	beq.n	c0021e4 <STATE_heal+0x14>
 c0021dc:	4b05      	ldr	r3, [pc, #20]	; (c0021f4 <STATE_heal+0x24>)
 c0021de:	791b      	ldrb	r3, [r3, #4]
 c0021e0:	2b04      	cmp	r3, #4
 c0021e2:	d103      	bne.n	c0021ec <STATE_heal+0x1c>
		_heal_function();
 c0021e4:	f000 fc16 	bl	c002a14 <_heal_function>
		return EXIT_LOOP;
 c0021e8:	2300      	movs	r3, #0
 c0021ea:	e000      	b.n	c0021ee <STATE_heal+0x1e>
	}
	return CONTINUE_LOOP;
 c0021ec:	2301      	movs	r3, #1
}
 c0021ee:	4618      	mov	r0, r3
 c0021f0:	bd80      	pop	{r7, pc}
 c0021f2:	bf00      	nop
 c0021f4:	300020f8 	.word	0x300020f8

0c0021f8 <STATE_continue>:

int STATE_continue(){
 c0021f8:	b580      	push	{r7, lr}
 c0021fa:	af00      	add	r7, sp, #0

	_receive_challenge();
 c0021fc:	f000 f912 	bl	c002424 <_receive_challenge>

	cfa_engine_conf.attestation_status = ACTIVE;
 c002200:	4b02      	ldr	r3, [pc, #8]	; (c00220c <STATE_continue+0x14>)
 c002202:	2201      	movs	r2, #1
 c002204:	711a      	strb	r2, [r3, #4]

//	_initialize_timer_interrupt();

	return EXIT_LOOP;
 c002206:	2300      	movs	r3, #0
}
 c002208:	4618      	mov	r0, r3
 c00220a:	bd80      	pop	{r7, pc}
 c00220c:	300020f8 	.word	0x300020f8

0c002210 <translate_command>:

/* ---------------------------  PROTOCOL  ----------------------------------------- */


char translate_command(int8_t command_received[]){
 c002210:	b580      	push	{r7, lr}
 c002212:	b082      	sub	sp, #8
 c002214:	af00      	add	r7, sp, #0
 c002216:	6078      	str	r0, [r7, #4]
	command_received[COMMAND_SIZE] = '\0';
 c002218:	687b      	ldr	r3, [r7, #4]
 c00221a:	3304      	adds	r3, #4
 c00221c:	2200      	movs	r2, #0
 c00221e:	701a      	strb	r2, [r3, #0]
	if (!strcmp(command_received,INIT_ATTESTATION))
 c002220:	4914      	ldr	r1, [pc, #80]	; (c002274 <translate_command+0x64>)
 c002222:	6878      	ldr	r0, [r7, #4]
 c002224:	f7fe f80c 	bl	c000240 <strcmp>
 c002228:	4603      	mov	r3, r0
 c00222a:	2b00      	cmp	r3, #0
 c00222c:	d101      	bne.n	c002232 <translate_command+0x22>
		return INIT_ATTESTATION_CHAR;
 c00222e:	2369      	movs	r3, #105	; 0x69
 c002230:	e01b      	b.n	c00226a <translate_command+0x5a>
	else if (!strcmp(command_received,ACCEPTED_REPORT))
 c002232:	4911      	ldr	r1, [pc, #68]	; (c002278 <translate_command+0x68>)
 c002234:	6878      	ldr	r0, [r7, #4]
 c002236:	f7fe f803 	bl	c000240 <strcmp>
 c00223a:	4603      	mov	r3, r0
 c00223c:	2b00      	cmp	r3, #0
 c00223e:	d101      	bne.n	c002244 <translate_command+0x34>
		return ACCEPT_REPORT_CHAR;
 c002240:	2376      	movs	r3, #118	; 0x76
 c002242:	e012      	b.n	c00226a <translate_command+0x5a>
	else if (!strcmp(command_received,CONTINUE_REQUEST))
 c002244:	490d      	ldr	r1, [pc, #52]	; (c00227c <translate_command+0x6c>)
 c002246:	6878      	ldr	r0, [r7, #4]
 c002248:	f7fd fffa 	bl	c000240 <strcmp>
 c00224c:	4603      	mov	r3, r0
 c00224e:	2b00      	cmp	r3, #0
 c002250:	d101      	bne.n	c002256 <translate_command+0x46>
		return CONTINUE_CHAR;
 c002252:	2363      	movs	r3, #99	; 0x63
 c002254:	e009      	b.n	c00226a <translate_command+0x5a>
	else if (!strcmp(command_received,HEAL_REQUEST))
 c002256:	490a      	ldr	r1, [pc, #40]	; (c002280 <translate_command+0x70>)
 c002258:	6878      	ldr	r0, [r7, #4]
 c00225a:	f7fd fff1 	bl	c000240 <strcmp>
 c00225e:	4603      	mov	r3, r0
 c002260:	2b00      	cmp	r3, #0
 c002262:	d101      	bne.n	c002268 <translate_command+0x58>
		return HEAL_CHAR;
 c002264:	2368      	movs	r3, #104	; 0x68
 c002266:	e000      	b.n	c00226a <translate_command+0x5a>
	return 'X';
 c002268:	2358      	movs	r3, #88	; 0x58

}
 c00226a:	4618      	mov	r0, r3
 c00226c:	3708      	adds	r7, #8
 c00226e:	46bd      	mov	sp, r7
 c002270:	bd80      	pop	{r7, pc}
 c002272:	bf00      	nop
 c002274:	0c009840 	.word	0x0c009840
 c002278:	0c009848 	.word	0x0c009848
 c00227c:	0c009850 	.word	0x0c009850
 c002280:	0c009858 	.word	0x0c009858

0c002284 <wait_for_command>:

void wait_for_command(char pattern[],int size){
 c002284:	b580      	push	{r7, lr}
 c002286:	b086      	sub	sp, #24
 c002288:	af00      	add	r7, sp, #0
 c00228a:	6078      	str	r0, [r7, #4]
 c00228c:	6039      	str	r1, [r7, #0]
	int found_size = 0;
 c00228e:	2300      	movs	r3, #0
 c002290:	617b      	str	r3, [r7, #20]
	int i = 0;
 c002292:	2300      	movs	r3, #0
 c002294:	613b      	str	r3, [r7, #16]
	char read_char;
	while(found_size != size){
 c002296:	e017      	b.n	c0022c8 <wait_for_command+0x44>
		SecureUartRx((uint8_t*)&read_char, 1);
 c002298:	f107 030f 	add.w	r3, r7, #15
 c00229c:	2101      	movs	r1, #1
 c00229e:	4618      	mov	r0, r3
 c0022a0:	f003 f942 	bl	c005528 <SecureUartRx>
		if (read_char == pattern[i]){
 c0022a4:	693b      	ldr	r3, [r7, #16]
 c0022a6:	687a      	ldr	r2, [r7, #4]
 c0022a8:	4413      	add	r3, r2
 c0022aa:	781a      	ldrb	r2, [r3, #0]
 c0022ac:	7bfb      	ldrb	r3, [r7, #15]
 c0022ae:	429a      	cmp	r2, r3
 c0022b0:	d106      	bne.n	c0022c0 <wait_for_command+0x3c>
			i++;
 c0022b2:	693b      	ldr	r3, [r7, #16]
 c0022b4:	3301      	adds	r3, #1
 c0022b6:	613b      	str	r3, [r7, #16]
			found_size++;
 c0022b8:	697b      	ldr	r3, [r7, #20]
 c0022ba:	3301      	adds	r3, #1
 c0022bc:	617b      	str	r3, [r7, #20]
 c0022be:	e003      	b.n	c0022c8 <wait_for_command+0x44>
		}
		else{
			i = 0;
 c0022c0:	2300      	movs	r3, #0
 c0022c2:	613b      	str	r3, [r7, #16]
			found_size = 0;
 c0022c4:	2300      	movs	r3, #0
 c0022c6:	617b      	str	r3, [r7, #20]
	while(found_size != size){
 c0022c8:	697a      	ldr	r2, [r7, #20]
 c0022ca:	683b      	ldr	r3, [r7, #0]
 c0022cc:	429a      	cmp	r2, r3
 c0022ce:	d1e3      	bne.n	c002298 <wait_for_command+0x14>
		}
	}
}
 c0022d0:	bf00      	nop
 c0022d2:	bf00      	nop
 c0022d4:	3718      	adds	r7, #24
 c0022d6:	46bd      	mov	sp, r7
 c0022d8:	bd80      	pop	{r7, pc}
	...

0c0022dc <_read_serial_loop>:

void _read_serial_loop(){
 c0022dc:	b580      	push	{r7, lr}
 c0022de:	b082      	sub	sp, #8
 c0022e0:	af00      	add	r7, sp, #0
	uint8_t command_received[COMMAND_SIZE+1];
	uint8_t state = CONTINUE_LOOP;
 c0022e2:	2301      	movs	r3, #1
 c0022e4:	71fb      	strb	r3, [r7, #7]
	char aaa;
	while(state == CONTINUE_LOOP){
 c0022e6:	e054      	b.n	c002392 <_read_serial_loop+0xb6>
		wait_for_command(BEGGINING_OF_COMMAND,COMMAND_SIZE);
 c0022e8:	2104      	movs	r1, #4
 c0022ea:	482e      	ldr	r0, [pc, #184]	; (c0023a4 <_read_serial_loop+0xc8>)
 c0022ec:	f7ff ffca 	bl	c002284 <wait_for_command>
		_receive_request(COMMAND_SIZE, command_received);
 c0022f0:	463b      	mov	r3, r7
 c0022f2:	4619      	mov	r1, r3
 c0022f4:	2004      	movs	r0, #4
 c0022f6:	f000 f915 	bl	c002524 <_receive_request>
		aaa = translate_command(command_received);
 c0022fa:	463b      	mov	r3, r7
 c0022fc:	4618      	mov	r0, r3
 c0022fe:	f7ff ff87 	bl	c002210 <translate_command>
 c002302:	4603      	mov	r3, r0
 c002304:	71bb      	strb	r3, [r7, #6]
		switch(aaa){
 c002306:	79bb      	ldrb	r3, [r7, #6]
 c002308:	3b63      	subs	r3, #99	; 0x63
 c00230a:	2b13      	cmp	r3, #19
 c00230c:	d83e      	bhi.n	c00238c <_read_serial_loop+0xb0>
 c00230e:	a201      	add	r2, pc, #4	; (adr r2, c002314 <_read_serial_loop+0x38>)
 c002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c002314:	0c002383 	.word	0x0c002383
 c002318:	0c00238d 	.word	0x0c00238d
 c00231c:	0c00238d 	.word	0x0c00238d
 c002320:	0c00238d 	.word	0x0c00238d
 c002324:	0c00238d 	.word	0x0c00238d
 c002328:	0c002379 	.word	0x0c002379
 c00232c:	0c002365 	.word	0x0c002365
 c002330:	0c00238d 	.word	0x0c00238d
 c002334:	0c00238d 	.word	0x0c00238d
 c002338:	0c00238d 	.word	0x0c00238d
 c00233c:	0c00238d 	.word	0x0c00238d
 c002340:	0c00238d 	.word	0x0c00238d
 c002344:	0c00238d 	.word	0x0c00238d
 c002348:	0c00238d 	.word	0x0c00238d
 c00234c:	0c00238d 	.word	0x0c00238d
 c002350:	0c00238d 	.word	0x0c00238d
 c002354:	0c00238d 	.word	0x0c00238d
 c002358:	0c00238d 	.word	0x0c00238d
 c00235c:	0c00238d 	.word	0x0c00238d
 c002360:	0c00236f 	.word	0x0c00236f

			case INIT_ATTESTATION_CHAR:
				state = STATE_initialize_attestation();
 c002364:	f7ff fef4 	bl	c002150 <STATE_initialize_attestation>
 c002368:	4603      	mov	r3, r0
 c00236a:	71fb      	strb	r3, [r7, #7]
				break;
 c00236c:	e011      	b.n	c002392 <_read_serial_loop+0xb6>

			case ACCEPT_REPORT_CHAR:
				state = STATE_accept_report();
 c00236e:	f7ff ff1d 	bl	c0021ac <STATE_accept_report>
 c002372:	4603      	mov	r3, r0
 c002374:	71fb      	strb	r3, [r7, #7]
				break;
 c002376:	e00c      	b.n	c002392 <_read_serial_loop+0xb6>

			case HEAL_CHAR:
				state = STATE_heal();
 c002378:	f7ff ff2a 	bl	c0021d0 <STATE_heal>
 c00237c:	4603      	mov	r3, r0
 c00237e:	71fb      	strb	r3, [r7, #7]
				break;
 c002380:	e007      	b.n	c002392 <_read_serial_loop+0xb6>

			case CONTINUE_CHAR:
				state = STATE_continue();
 c002382:	f7ff ff39 	bl	c0021f8 <STATE_continue>
 c002386:	4603      	mov	r3, r0
 c002388:	71fb      	strb	r3, [r7, #7]
				break;
 c00238a:	e002      	b.n	c002392 <_read_serial_loop+0xb6>

			default:
				state = CONTINUE_LOOP;
 c00238c:	2301      	movs	r3, #1
 c00238e:	71fb      	strb	r3, [r7, #7]
				break;
 c002390:	bf00      	nop
	while(state == CONTINUE_LOOP){
 c002392:	79fb      	ldrb	r3, [r7, #7]
 c002394:	2b01      	cmp	r3, #1
 c002396:	d0a7      	beq.n	c0022e8 <_read_serial_loop+0xc>
		}
	}
}
 c002398:	bf00      	nop
 c00239a:	bf00      	nop
 c00239c:	3708      	adds	r7, #8
 c00239e:	46bd      	mov	sp, r7
 c0023a0:	bd80      	pop	{r7, pc}
 c0023a2:	bf00      	nop
 c0023a4:	0c009860 	.word	0x0c009860

0c0023a8 <_deactivate_timer_interrupt>:
void _activate_timeout_interrupt(){
	HAL_TIM_Base_Start(&htim3);
}


void _deactivate_timer_interrupt(){
 c0023a8:	b580      	push	{r7, lr}
 c0023aa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim3);
 c0023ac:	4804      	ldr	r0, [pc, #16]	; (c0023c0 <_deactivate_timer_interrupt+0x18>)
 c0023ae:	f005 febe 	bl	c00812e <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim3, 0); // reset count
 c0023b2:	4b03      	ldr	r3, [pc, #12]	; (c0023c0 <_deactivate_timer_interrupt+0x18>)
 c0023b4:	681b      	ldr	r3, [r3, #0]
 c0023b6:	2200      	movs	r2, #0
 c0023b8:	625a      	str	r2, [r3, #36]	; 0x24
}
 c0023ba:	bf00      	nop
 c0023bc:	bd80      	pop	{r7, pc}
 c0023be:	bf00      	nop
 c0023c0:	30002334 	.word	0x30002334

0c0023c4 <CFA_time_interrupt_handler>:

void CFA_time_interrupt_handler(){
 c0023c4:	b580      	push	{r7, lr}
 c0023c6:	b082      	sub	sp, #8
 c0023c8:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM3_CLK_DISABLE();
 c0023ca:	4b13      	ldr	r3, [pc, #76]	; (c002418 <CFA_time_interrupt_handler+0x54>)
 c0023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0023ce:	4a12      	ldr	r2, [pc, #72]	; (c002418 <CFA_time_interrupt_handler+0x54>)
 c0023d0:	f023 0302 	bic.w	r3, r3, #2
 c0023d4:	6593      	str	r3, [r2, #88]	; 0x58
	report_secure.isFinal = PARTIAL_REPORT;
 c0023d6:	4b11      	ldr	r3, [pc, #68]	; (c00241c <CFA_time_interrupt_handler+0x58>)
 c0023d8:	2250      	movs	r2, #80	; 0x50
 c0023da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	_sign_report();
 c0023de:	f000 f96f 	bl	c0026c0 <_sign_report>
	_send_report_message();
 c0023e2:	f000 f8af 	bl	c002544 <_send_report_message>
	_clean_partial();
 c0023e6:	f7ff fe43 	bl	c002070 <_clean_partial>
	_read_serial_loop();
 c0023ea:	f7ff ff77 	bl	c0022dc <_read_serial_loop>
	ti_reset_timer_counter(TIMER_INTERRUPT);
 c0023ee:	4b0c      	ldr	r3, [pc, #48]	; (c002420 <CFA_time_interrupt_handler+0x5c>)
 c0023f0:	681b      	ldr	r3, [r3, #0]
 c0023f2:	2200      	movs	r2, #0
 c0023f4:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RCC_TIM3_CLK_ENABLE();
 c0023f6:	4b08      	ldr	r3, [pc, #32]	; (c002418 <CFA_time_interrupt_handler+0x54>)
 c0023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0023fa:	4a07      	ldr	r2, [pc, #28]	; (c002418 <CFA_time_interrupt_handler+0x54>)
 c0023fc:	f043 0302 	orr.w	r3, r3, #2
 c002400:	6593      	str	r3, [r2, #88]	; 0x58
 c002402:	4b05      	ldr	r3, [pc, #20]	; (c002418 <CFA_time_interrupt_handler+0x54>)
 c002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002406:	f003 0302 	and.w	r3, r3, #2
 c00240a:	607b      	str	r3, [r7, #4]
 c00240c:	687b      	ldr	r3, [r7, #4]
}
 c00240e:	bf00      	nop
 c002410:	3708      	adds	r7, #8
 c002412:	46bd      	mov	sp, r7
 c002414:	bd80      	pop	{r7, pc}
 c002416:	bf00      	nop
 c002418:	50021000 	.word	0x50021000
 c00241c:	30000074 	.word	0x30000074
 c002420:	30002334 	.word	0x30002334

0c002424 <_receive_challenge>:

/* -----------------------------  SENDING REPORT ------------------------------------ */
uint32_t receive_resp_time;
uint32_t verify_resp_time;
uint8_t  _receive_challenge(){
 c002424:	b580      	push	{r7, lr}
 c002426:	b098      	sub	sp, #96	; 0x60
 c002428:	af02      	add	r7, sp, #8
	uint8_t chl[64];
//	uint8_t init_chal[] = BEGGINING_OF_CHALLANGE;

	uint32_t start = HAL_GetTick();
 c00242a:	f003 f925 	bl	c005678 <HAL_GetTick>
 c00242e:	64f8      	str	r0, [r7, #76]	; 0x4c
	SecureUartRx((uint8_t*)chl, CHAL_SIZE);
 c002430:	463b      	mov	r3, r7
 c002432:	2140      	movs	r1, #64	; 0x40
 c002434:	4618      	mov	r0, r3
 c002436:	f003 f877 	bl	c005528 <SecureUartRx>
//	SecureUartTx(init_chal, COMMAND_SIZE); // echo for debug
//	SecureUartTx((uint8_t*)chl, 64);

	// read verifier signature
	SecureUartRx((uint8_t*)(&vrf_resp.signature), SIGNATURE_SIZE_BYTES);
 c00243a:	2140      	movs	r1, #64	; 0x40
 c00243c:	4830      	ldr	r0, [pc, #192]	; (c002500 <_receive_challenge+0xdc>)
 c00243e:	f003 f873 	bl	c005528 <SecureUartRx>
//	SecureUartTx((uint8_t*)(&vrf_resp.signature), SIGNATURE_SIZE_BYTES);


	uint32_t stop = HAL_GetTick();
 c002442:	f003 f919 	bl	c005678 <HAL_GetTick>
 c002446:	64b8      	str	r0, [r7, #72]	; 0x48
	receive_resp_time = stop-start;
 c002448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c00244a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c00244c:	1ad3      	subs	r3, r2, r3
 c00244e:	4a2d      	ldr	r2, [pc, #180]	; (c002504 <_receive_challenge+0xe0>)
 c002450:	6013      	str	r3, [r2, #0]

	start = HAL_GetTick();
 c002452:	f003 f911 	bl	c005678 <HAL_GetTick>
 c002456:	64f8      	str	r0, [r7, #76]	; 0x4c

	// Check chal is greater than prev chal
	#if MODE == AUD
	unsigned int i;
	int valid_next_chal = 1;
 c002458:	2301      	movs	r3, #1
 c00245a:	653b      	str	r3, [r7, #80]	; 0x50
	for(i=0; i<CHAL_SIZE; i++){
 c00245c:	2300      	movs	r3, #0
 c00245e:	657b      	str	r3, [r7, #84]	; 0x54
 c002460:	e010      	b.n	c002484 <_receive_challenge+0x60>
		if(chl[i] < cfa_engine_conf.challenge[i]){
 c002462:	463a      	mov	r2, r7
 c002464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c002466:	4413      	add	r3, r2
 c002468:	781a      	ldrb	r2, [r3, #0]
 c00246a:	4927      	ldr	r1, [pc, #156]	; (c002508 <_receive_challenge+0xe4>)
 c00246c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c00246e:	440b      	add	r3, r1
 c002470:	3308      	adds	r3, #8
 c002472:	781b      	ldrb	r3, [r3, #0]
 c002474:	429a      	cmp	r2, r3
 c002476:	d202      	bcs.n	c00247e <_receive_challenge+0x5a>
			valid_next_chal = 0;
 c002478:	2300      	movs	r3, #0
 c00247a:	653b      	str	r3, [r7, #80]	; 0x50
			break;
 c00247c:	e005      	b.n	c00248a <_receive_challenge+0x66>
	for(i=0; i<CHAL_SIZE; i++){
 c00247e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c002480:	3301      	adds	r3, #1
 c002482:	657b      	str	r3, [r7, #84]	; 0x54
 c002484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c002486:	2b3f      	cmp	r3, #63	; 0x3f
 c002488:	d9eb      	bls.n	c002462 <_receive_challenge+0x3e>
		}
	}
	#endif

	_update_challenge(chl);
 c00248a:	463b      	mov	r3, r7
 c00248c:	4618      	mov	r0, r3
 c00248e:	f7ff fd93 	bl	c001fb8 <_update_challenge>

	// check verifier signature by sig = ECDSA(private_key, hash(report))
	// 1) get SHA256 hash over report (excluding buffer that holds signature)
	uint32_t response_size = CHAL_SIZE + 1 + HASH_SIZE_BYTES;
 c002492:	2361      	movs	r3, #97	; 0x61
 c002494:	647b      	str	r3, [r7, #68]	; 0x44
	Hacl_SHA2_256_hash(response_hash, (uint8_t*)(&vrf_resp), response_size);
 c002496:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 c002498:	491c      	ldr	r1, [pc, #112]	; (c00250c <_receive_challenge+0xe8>)
 c00249a:	481d      	ldr	r0, [pc, #116]	; (c002510 <_receive_challenge+0xec>)
 c00249c:	f7ff fd55 	bl	c001f4a <Hacl_SHA2_256_hash>
	// 2) verify signature of hash
    curve = uECC_secp256r1();
 c0024a0:	f002 f9e0 	bl	c004864 <uECC_secp256r1>
 c0024a4:	4603      	mov	r3, r0
 c0024a6:	4a1b      	ldr	r2, [pc, #108]	; (c002514 <_receive_challenge+0xf0>)
 c0024a8:	6013      	str	r3, [r2, #0]
    int valid_sig =  uECC_verify(public_key, response_hash, HASH_SIZE_BYTES, vrf_resp.signature, curve);
 c0024aa:	4b1a      	ldr	r3, [pc, #104]	; (c002514 <_receive_challenge+0xf0>)
 c0024ac:	681b      	ldr	r3, [r3, #0]
 c0024ae:	9300      	str	r3, [sp, #0]
 c0024b0:	4b13      	ldr	r3, [pc, #76]	; (c002500 <_receive_challenge+0xdc>)
 c0024b2:	2220      	movs	r2, #32
 c0024b4:	4916      	ldr	r1, [pc, #88]	; (c002510 <_receive_challenge+0xec>)
 c0024b6:	4818      	ldr	r0, [pc, #96]	; (c002518 <_receive_challenge+0xf4>)
 c0024b8:	f002 fcaa 	bl	c004e10 <uECC_verify>
 c0024bc:	6438      	str	r0, [r7, #64]	; 0x40

    vrf_resp.verify_result = (valid_next_chal & valid_sig);
 c0024be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c0024c0:	b25a      	sxtb	r2, r3
 c0024c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c0024c4:	b25b      	sxtb	r3, r3
 c0024c6:	4013      	ands	r3, r2
 c0024c8:	b25b      	sxtb	r3, r3
 c0024ca:	b2da      	uxtb	r2, r3
 c0024cc:	4b0f      	ldr	r3, [pc, #60]	; (c00250c <_receive_challenge+0xe8>)
 c0024ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    stop = HAL_GetTick();
 c0024d2:	f003 f8d1 	bl	c005678 <HAL_GetTick>
 c0024d6:	64b8      	str	r0, [r7, #72]	; 0x48
    verify_resp_time = stop-start;
 c0024d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c0024da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0024dc:	1ad3      	subs	r3, r2, r3
 c0024de:	4a0f      	ldr	r2, [pc, #60]	; (c00251c <_receive_challenge+0xf8>)
 c0024e0:	6013      	str	r3, [r2, #0]
    recv_verify_response_time = receive_resp_time + verify_resp_time;
 c0024e2:	4b08      	ldr	r3, [pc, #32]	; (c002504 <_receive_challenge+0xe0>)
 c0024e4:	681a      	ldr	r2, [r3, #0]
 c0024e6:	4b0d      	ldr	r3, [pc, #52]	; (c00251c <_receive_challenge+0xf8>)
 c0024e8:	681b      	ldr	r3, [r3, #0]
 c0024ea:	4413      	add	r3, r2
 c0024ec:	4a0c      	ldr	r2, [pc, #48]	; (c002520 <_receive_challenge+0xfc>)
 c0024ee:	6013      	str	r3, [r2, #0]

	return vrf_resp.verify_result;
 c0024f0:	4b06      	ldr	r3, [pc, #24]	; (c00250c <_receive_challenge+0xe8>)
 c0024f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
}
 c0024f6:	4618      	mov	r0, r3
 c0024f8:	3758      	adds	r7, #88	; 0x58
 c0024fa:	46bd      	mov	sp, r7
 c0024fc:	bd80      	pop	{r7, pc}
 c0024fe:	bf00      	nop
 c002500:	300021c5 	.word	0x300021c5
 c002504:	300022a8 	.word	0x300022a8
 c002508:	300020f8 	.word	0x300020f8
 c00250c:	30002184 	.word	0x30002184
 c002510:	30002270 	.word	0x30002270
 c002514:	30002290 	.word	0x30002290
 c002518:	30000020 	.word	0x30000020
 c00251c:	300022ac 	.word	0x300022ac
 c002520:	30002294 	.word	0x30002294

0c002524 <_receive_request>:

void _receive_request(int size,uint8_t* read_char){
 c002524:	b580      	push	{r7, lr}
 c002526:	b082      	sub	sp, #8
 c002528:	af00      	add	r7, sp, #0
 c00252a:	6078      	str	r0, [r7, #4]
 c00252c:	6039      	str	r1, [r7, #0]
	SecureUartRx(read_char, size);
 c00252e:	687b      	ldr	r3, [r7, #4]
 c002530:	b29b      	uxth	r3, r3
 c002532:	4619      	mov	r1, r3
 c002534:	6838      	ldr	r0, [r7, #0]
 c002536:	f002 fff7 	bl	c005528 <SecureUartRx>
	return;
 c00253a:	bf00      	nop
}
 c00253c:	3708      	adds	r7, #8
 c00253e:	46bd      	mov	sp, r7
 c002540:	bd80      	pop	{r7, pc}
	...

0c002544 <_send_report_message>:

uint32_t send_report_time;
uint32_t send_report_start;
uint32_t send_report_stop;
void _send_report_message(){
 c002544:	b580      	push	{r7, lr}
 c002546:	b084      	sub	sp, #16
 c002548:	af00      	add	r7, sp, #0
	send_report_start = HAL_GetTick();
 c00254a:	f003 f895 	bl	c005678 <HAL_GetTick>
 c00254e:	4603      	mov	r3, r0
 c002550:	4a19      	ldr	r2, [pc, #100]	; (c0025b8 <_send_report_message+0x74>)
 c002552:	6013      	str	r3, [r2, #0]
	uint8_t init_report[] = BEGGINING_OF_REPORT;
 c002554:	4a19      	ldr	r2, [pc, #100]	; (c0025bc <_send_report_message+0x78>)
 c002556:	463b      	mov	r3, r7
 c002558:	e892 0003 	ldmia.w	r2, {r0, r1}
 c00255c:	6018      	str	r0, [r3, #0]
 c00255e:	3304      	adds	r3, #4
 c002560:	7019      	strb	r1, [r3, #0]
	SecureUartTx(init_report, COMMAND_SIZE);
 c002562:	463b      	mov	r3, r7
 c002564:	2104      	movs	r1, #4
 c002566:	4618      	mov	r0, r3
 c002568:	f002 ffca 	bl	c005500 <SecureUartTx>
	// Baseline End-to-end APP
//	SecureUartTx((uint8_t *)(&output_data), 4);
//	SecureUartTx(report_secure.signature, SIGNATURE_SIZE_BYTES);

	// CFA or TRACES
	SecureUartTx(report_secure.signature, SIGNATURE_SIZE_BYTES+2);
 c00256c:	2142      	movs	r1, #66	; 0x42
 c00256e:	4814      	ldr	r0, [pc, #80]	; (c0025c0 <_send_report_message+0x7c>)
 c002570:	f002 ffc6 	bl	c005500 <SecureUartTx>
	int data_size = 2 + 4*report_secure.num_CF_Log_size;
 c002574:	4b12      	ldr	r3, [pc, #72]	; (c0025c0 <_send_report_message+0x7c>)
 c002576:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c00257a:	009b      	lsls	r3, r3, #2
 c00257c:	3302      	adds	r3, #2
 c00257e:	60fb      	str	r3, [r7, #12]
	uint8_t * report_addr = (uint8_t*)(&(report_secure.num_CF_Log_size));
 c002580:	4b10      	ldr	r3, [pc, #64]	; (c0025c4 <_send_report_message+0x80>)
 c002582:	60bb      	str	r3, [r7, #8]
	SecureUartTx(report_addr, data_size);
 c002584:	68fb      	ldr	r3, [r7, #12]
 c002586:	b29b      	uxth	r3, r3
 c002588:	4619      	mov	r1, r3
 c00258a:	68b8      	ldr	r0, [r7, #8]
 c00258c:	f002 ffb8 	bl	c005500 <SecureUartTx>
	send_report_stop = HAL_GetTick();
 c002590:	f003 f872 	bl	c005678 <HAL_GetTick>
 c002594:	4603      	mov	r3, r0
 c002596:	4a0c      	ldr	r2, [pc, #48]	; (c0025c8 <_send_report_message+0x84>)
 c002598:	6013      	str	r3, [r2, #0]
	send_report_time = send_report_stop - send_report_start;
 c00259a:	4b0b      	ldr	r3, [pc, #44]	; (c0025c8 <_send_report_message+0x84>)
 c00259c:	681a      	ldr	r2, [r3, #0]
 c00259e:	4b06      	ldr	r3, [pc, #24]	; (c0025b8 <_send_report_message+0x74>)
 c0025a0:	681b      	ldr	r3, [r3, #0]
 c0025a2:	1ad3      	subs	r3, r2, r3
 c0025a4:	4a09      	ldr	r2, [pc, #36]	; (c0025cc <_send_report_message+0x88>)
 c0025a6:	6013      	str	r3, [r2, #0]

	// timing for debug
	SecureUartTx((uint8_t *)(&send_report_time), 4);
 c0025a8:	2104      	movs	r1, #4
 c0025aa:	4808      	ldr	r0, [pc, #32]	; (c0025cc <_send_report_message+0x88>)
 c0025ac:	f002 ffa8 	bl	c005500 <SecureUartTx>
}
 c0025b0:	bf00      	nop
 c0025b2:	3710      	adds	r7, #16
 c0025b4:	46bd      	mov	sp, r7
 c0025b6:	bd80      	pop	{r7, pc}
 c0025b8:	300022b4 	.word	0x300022b4
 c0025bc:	0c009868 	.word	0x0c009868
 c0025c0:	30000074 	.word	0x30000074
 c0025c4:	300000d6 	.word	0x300000d6
 c0025c8:	300022b8 	.word	0x300022b8
 c0025cc:	300022b0 	.word	0x300022b0

0c0025d0 <_send_report>:

uint32_t compute_send_report_time;
uint32_t compute_send_report_start;
uint32_t compute_send_report_stop;
void _send_report(){
 c0025d0:	b580      	push	{r7, lr}
 c0025d2:	af00      	add	r7, sp, #0
	_deactivate_timer_interrupt();
 c0025d4:	f7ff fee8 	bl	c0023a8 <_deactivate_timer_interrupt>
	report_secure.number_of_logs_sent ++;
 c0025d8:	4b21      	ldr	r3, [pc, #132]	; (c002660 <_send_report+0x90>)
 c0025da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 c0025de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 c0025e2:	3301      	adds	r3, #1
 c0025e4:	b29a      	uxth	r2, r3
 c0025e6:	4b1e      	ldr	r3, [pc, #120]	; (c002660 <_send_report+0x90>)
 c0025e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 c0025ec:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	if (cfa_engine_conf.attestation_status == COMPLETE){
 c0025f0:	4b1c      	ldr	r3, [pc, #112]	; (c002664 <_send_report+0x94>)
 c0025f2:	791b      	ldrb	r3, [r3, #4]
 c0025f4:	2b02      	cmp	r3, #2
 c0025f6:	d112      	bne.n	c00261e <_send_report+0x4e>
		report_secure.isFinal = FINAL_REPORT;
 c0025f8:	4b19      	ldr	r3, [pc, #100]	; (c002660 <_send_report+0x90>)
 c0025fa:	2246      	movs	r2, #70	; 0x46
 c0025fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		compute_send_report_start = HAL_GetTick();
 c002600:	f003 f83a 	bl	c005678 <HAL_GetTick>
 c002604:	4603      	mov	r3, r0
 c002606:	4a18      	ldr	r2, [pc, #96]	; (c002668 <_send_report+0x98>)
 c002608:	6013      	str	r3, [r2, #0]
		_sign_report(); // must come after isFinal is set since signs all report data
 c00260a:	f000 f859 	bl	c0026c0 <_sign_report>
		_send_report_message();
 c00260e:	f7ff ff99 	bl	c002544 <_send_report_message>
		compute_send_report_stop = HAL_GetTick();
 c002612:	f003 f831 	bl	c005678 <HAL_GetTick>
 c002616:	4603      	mov	r3, r0
 c002618:	4a14      	ldr	r2, [pc, #80]	; (c00266c <_send_report+0x9c>)
 c00261a:	6013      	str	r3, [r2, #0]
 c00261c:	e017      	b.n	c00264e <_send_report+0x7e>
	}
	else if(cfa_engine_conf.attestation_status == WAITING_PARTIAL){
 c00261e:	4b11      	ldr	r3, [pc, #68]	; (c002664 <_send_report+0x94>)
 c002620:	791b      	ldrb	r3, [r3, #4]
 c002622:	2b04      	cmp	r3, #4
 c002624:	d113      	bne.n	c00264e <_send_report+0x7e>
		report_secure.isFinal = PARTIAL_REPORT;
 c002626:	4b0e      	ldr	r3, [pc, #56]	; (c002660 <_send_report+0x90>)
 c002628:	2250      	movs	r2, #80	; 0x50
 c00262a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		compute_send_report_start = HAL_GetTick();
 c00262e:	f003 f823 	bl	c005678 <HAL_GetTick>
 c002632:	4603      	mov	r3, r0
 c002634:	4a0c      	ldr	r2, [pc, #48]	; (c002668 <_send_report+0x98>)
 c002636:	6013      	str	r3, [r2, #0]
		_sign_report();
 c002638:	f000 f842 	bl	c0026c0 <_sign_report>
		_send_report_message();
 c00263c:	f7ff ff82 	bl	c002544 <_send_report_message>
		_clean_partial();
 c002640:	f7ff fd16 	bl	c002070 <_clean_partial>
		compute_send_report_stop = HAL_GetTick();
 c002644:	f003 f818 	bl	c005678 <HAL_GetTick>
 c002648:	4603      	mov	r3, r0
 c00264a:	4a08      	ldr	r2, [pc, #32]	; (c00266c <_send_report+0x9c>)
 c00264c:	6013      	str	r3, [r2, #0]
	}

	compute_send_report_time = compute_send_report_stop - compute_send_report_start;
 c00264e:	4b07      	ldr	r3, [pc, #28]	; (c00266c <_send_report+0x9c>)
 c002650:	681a      	ldr	r2, [r3, #0]
 c002652:	4b05      	ldr	r3, [pc, #20]	; (c002668 <_send_report+0x98>)
 c002654:	681b      	ldr	r3, [r3, #0]
 c002656:	1ad3      	subs	r3, r2, r3
 c002658:	4a05      	ldr	r2, [pc, #20]	; (c002670 <_send_report+0xa0>)
 c00265a:	6013      	str	r3, [r2, #0]
	return;
 c00265c:	bf00      	nop
}
 c00265e:	bd80      	pop	{r7, pc}
 c002660:	30000074 	.word	0x30000074
 c002664:	300020f8 	.word	0x300020f8
 c002668:	300022c0 	.word	0x300022c0
 c00266c:	300022c4 	.word	0x300022c4
 c002670:	300022bc 	.word	0x300022bc

0c002674 <_attest_memory>:

/* ----------------------------- CRYPTO-OPERATIONS --------------------------------- */
uint32_t time_hash_memory;
uint32_t time_hash_memory_start;
uint32_t time_hash_memory_end;
void _attest_memory(){
 c002674:	b580      	push	{r7, lr}
 c002676:	af00      	add	r7, sp, #0
	time_hash_memory_start = HAL_GetTick();
 c002678:	f002 fffe 	bl	c005678 <HAL_GetTick>
 c00267c:	4603      	mov	r3, r0
 c00267e:	4a0b      	ldr	r2, [pc, #44]	; (c0026ac <_attest_memory+0x38>)
 c002680:	6013      	str	r3, [r2, #0]
	// Compute sigle hash of non-secure memory
	Hacl_SHA2_256_hash(report_secure.mem_hash, (uint8_t*)(NONSECURE_FLASH_START), NONSECURE_FLASH_SIZE);
 c002682:	f44f 6236 	mov.w	r2, #2912	; 0xb60
 c002686:	490a      	ldr	r1, [pc, #40]	; (c0026b0 <_attest_memory+0x3c>)
 c002688:	480a      	ldr	r0, [pc, #40]	; (c0026b4 <_attest_memory+0x40>)
 c00268a:	f7ff fc5e 	bl	c001f4a <Hacl_SHA2_256_hash>
	time_hash_memory_end = HAL_GetTick();
 c00268e:	f002 fff3 	bl	c005678 <HAL_GetTick>
 c002692:	4603      	mov	r3, r0
 c002694:	4a08      	ldr	r2, [pc, #32]	; (c0026b8 <_attest_memory+0x44>)
 c002696:	6013      	str	r3, [r2, #0]
	time_hash_memory = time_hash_memory_end-time_hash_memory_start;
 c002698:	4b07      	ldr	r3, [pc, #28]	; (c0026b8 <_attest_memory+0x44>)
 c00269a:	681a      	ldr	r2, [r3, #0]
 c00269c:	4b03      	ldr	r3, [pc, #12]	; (c0026ac <_attest_memory+0x38>)
 c00269e:	681b      	ldr	r3, [r3, #0]
 c0026a0:	1ad3      	subs	r3, r2, r3
 c0026a2:	4a06      	ldr	r2, [pc, #24]	; (c0026bc <_attest_memory+0x48>)
 c0026a4:	6013      	str	r3, [r2, #0]
}
 c0026a6:	bf00      	nop
 c0026a8:	bd80      	pop	{r7, pc}
 c0026aa:	bf00      	nop
 c0026ac:	300022cc 	.word	0x300022cc
 c0026b0:	080401f8 	.word	0x080401f8
 c0026b4:	300000b6 	.word	0x300000b6
 c0026b8:	300022d0 	.word	0x300022d0
 c0026bc:	300022c8 	.word	0x300022c8

0c0026c0 <_sign_report>:

uint32_t time_sign_report;
uint32_t time_sign_report_start;
uint32_t time_sign_report_end;
void _sign_report(){
 c0026c0:	b580      	push	{r7, lr}
 c0026c2:	b084      	sub	sp, #16
 c0026c4:	af02      	add	r7, sp, #8
	time_sign_report_start = HAL_GetTick();
 c0026c6:	f002 ffd7 	bl	c005678 <HAL_GetTick>
 c0026ca:	4603      	mov	r3, r0
 c0026cc:	4a10      	ldr	r2, [pc, #64]	; (c002710 <_sign_report+0x50>)
 c0026ce:	6013      	str	r3, [r2, #0]
	// Baseline End-to-end APP
//	uint32_t report_size = 4; // in bytes
//	Hacl_SHA2_256_hash(report_hash, (uint8_t*)(&output_data), report_size);

	// CFA or TRACES
	uint32_t report_size = 2 + HASH_SIZE_BYTES + 2 + 4*report_secure.num_CF_Log_size;
 c0026d0:	4b10      	ldr	r3, [pc, #64]	; (c002714 <_sign_report+0x54>)
 c0026d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c0026d6:	3309      	adds	r3, #9
 c0026d8:	009b      	lsls	r3, r3, #2
 c0026da:	607b      	str	r3, [r7, #4]
//	Hacl_SHA2_256_hash(report_hash, (uint8_t*)(&report_secure.isFinal), report_size);

	hmac(report_secure.signature, att_key, 32, (uint8_t*)(&report_secure.isFinal), (uint32_t) report_size);
 c0026dc:	4b0e      	ldr	r3, [pc, #56]	; (c002718 <_sign_report+0x58>)
 c0026de:	6819      	ldr	r1, [r3, #0]
 c0026e0:	687b      	ldr	r3, [r7, #4]
 c0026e2:	9300      	str	r3, [sp, #0]
 c0026e4:	4b0d      	ldr	r3, [pc, #52]	; (c00271c <_sign_report+0x5c>)
 c0026e6:	2220      	movs	r2, #32
 c0026e8:	480a      	ldr	r0, [pc, #40]	; (c002714 <_sign_report+0x54>)
 c0026ea:	f7fe fe64 	bl	c0013b6 <hmac>
//
//	// sign hash
//    curve = uECC_secp256r1();
//    int t =  uECC_sign(private_key, report_hash, HASH_SIZE_BYTES, report_secure.signature, curve);

    time_sign_report_end = HAL_GetTick();
 c0026ee:	f002 ffc3 	bl	c005678 <HAL_GetTick>
 c0026f2:	4603      	mov	r3, r0
 c0026f4:	4a0a      	ldr	r2, [pc, #40]	; (c002720 <_sign_report+0x60>)
 c0026f6:	6013      	str	r3, [r2, #0]
	time_sign_report = time_sign_report_end-time_sign_report_start;
 c0026f8:	4b09      	ldr	r3, [pc, #36]	; (c002720 <_sign_report+0x60>)
 c0026fa:	681a      	ldr	r2, [r3, #0]
 c0026fc:	4b04      	ldr	r3, [pc, #16]	; (c002710 <_sign_report+0x50>)
 c0026fe:	681b      	ldr	r3, [r3, #0]
 c002700:	1ad3      	subs	r3, r2, r3
 c002702:	4a08      	ldr	r2, [pc, #32]	; (c002724 <_sign_report+0x64>)
 c002704:	6013      	str	r3, [r2, #0]
}
 c002706:	bf00      	nop
 c002708:	3708      	adds	r7, #8
 c00270a:	46bd      	mov	sp, r7
 c00270c:	bd80      	pop	{r7, pc}
 c00270e:	bf00      	nop
 c002710:	300022d8 	.word	0x300022d8
 c002714:	30000074 	.word	0x30000074
 c002718:	30000060 	.word	0x30000060
 c00271c:	300000b4 	.word	0x300000b4
 c002720:	300022dc 	.word	0x300022dc
 c002724:	300022d4 	.word	0x300022d4

0c002728 <CFA_ENGINE_new_log_entry>:
uint8_t loop_detect = 0;
uint16_t loop_counter = 1;
uint32_t prev_entry;

//void CFA_ENGINE_new_log_entry(CFA_ENTRY value){
void CFA_ENGINE_new_log_entry(uint32_t value){
 c002728:	b580      	push	{r7, lr}
 c00272a:	b082      	sub	sp, #8
 c00272c:	af00      	add	r7, sp, #0
 c00272e:	6078      	str	r0, [r7, #4]
	if(cfa_engine_conf.log_counter % MAX_CF_LOG_SIZE == 0 && cfa_engine_conf.log_counter > 0){
 c002730:	4b53      	ldr	r3, [pc, #332]	; (c002880 <CFA_ENGINE_new_log_entry+0x158>)
 c002732:	88db      	ldrh	r3, [r3, #6]
 c002734:	f3c3 030a 	ubfx	r3, r3, #0, #11
 c002738:	b29b      	uxth	r3, r3
 c00273a:	2b00      	cmp	r3, #0
 c00273c:	d136      	bne.n	c0027ac <CFA_ENGINE_new_log_entry+0x84>
 c00273e:	4b50      	ldr	r3, [pc, #320]	; (c002880 <CFA_ENGINE_new_log_entry+0x158>)
 c002740:	88db      	ldrh	r3, [r3, #6]
 c002742:	2b00      	cmp	r3, #0
 c002744:	d032      	beq.n	c0027ac <CFA_ENGINE_new_log_entry+0x84>
		end = HAL_GetTick();
 c002746:	f002 ff97 	bl	c005678 <HAL_GetTick>
 c00274a:	4603      	mov	r3, r0
 c00274c:	4a4d      	ldr	r2, [pc, #308]	; (c002884 <CFA_ENGINE_new_log_entry+0x15c>)
 c00274e:	6013      	str	r3, [r2, #0]
		app_exec_time += end - start;
 c002750:	4b4c      	ldr	r3, [pc, #304]	; (c002884 <CFA_ENGINE_new_log_entry+0x15c>)
 c002752:	681a      	ldr	r2, [r3, #0]
 c002754:	4b4c      	ldr	r3, [pc, #304]	; (c002888 <CFA_ENGINE_new_log_entry+0x160>)
 c002756:	681b      	ldr	r3, [r3, #0]
 c002758:	1ad2      	subs	r2, r2, r3
 c00275a:	4b4c      	ldr	r3, [pc, #304]	; (c00288c <CFA_ENGINE_new_log_entry+0x164>)
 c00275c:	681b      	ldr	r3, [r3, #0]
 c00275e:	4413      	add	r3, r2
 c002760:	4a4a      	ldr	r2, [pc, #296]	; (c00288c <CFA_ENGINE_new_log_entry+0x164>)
 c002762:	6013      	str	r3, [r2, #0]
		cfa_engine_conf.attestation_status = WAITING_PARTIAL;
 c002764:	4b46      	ldr	r3, [pc, #280]	; (c002880 <CFA_ENGINE_new_log_entry+0x158>)
 c002766:	2204      	movs	r2, #4
 c002768:	711a      	strb	r2, [r3, #4]
		_send_report();
 c00276a:	f7ff ff31 	bl	c0025d0 <_send_report>

		#if CFLOG_TYPE == CFLOG_RAM
		report_secure.CFLog[report_secure.num_CF_Log_size] = value;
 c00276e:	4b48      	ldr	r3, [pc, #288]	; (c002890 <CFA_ENGINE_new_log_entry+0x168>)
 c002770:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c002774:	4a46      	ldr	r2, [pc, #280]	; (c002890 <CFA_ENGINE_new_log_entry+0x168>)
 c002776:	3318      	adds	r3, #24
 c002778:	009b      	lsls	r3, r3, #2
 c00277a:	4413      	add	r3, r2
 c00277c:	687a      	ldr	r2, [r7, #4]
 c00277e:	605a      	str	r2, [r3, #4]
		uint32_t addr = (uint32_t)(&FLASH_CFLog[report_secure.num_CF_Log_size]);
//		update_flash(addr, value);
		FLASH_CFLog[report_secure.num_CF_Log_size] = value;
		#endif

		report_secure.num_CF_Log_size++;
 c002780:	4b43      	ldr	r3, [pc, #268]	; (c002890 <CFA_ENGINE_new_log_entry+0x168>)
 c002782:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c002786:	3301      	adds	r3, #1
 c002788:	b29a      	uxth	r2, r3
 c00278a:	4b41      	ldr	r3, [pc, #260]	; (c002890 <CFA_ENGINE_new_log_entry+0x168>)
 c00278c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		cfa_engine_conf.log_counter++;
 c002790:	4b3b      	ldr	r3, [pc, #236]	; (c002880 <CFA_ENGINE_new_log_entry+0x158>)
 c002792:	88db      	ldrh	r3, [r3, #6]
 c002794:	3301      	adds	r3, #1
 c002796:	b29a      	uxth	r2, r3
 c002798:	4b39      	ldr	r3, [pc, #228]	; (c002880 <CFA_ENGINE_new_log_entry+0x158>)
 c00279a:	80da      	strh	r2, [r3, #6]
		_read_serial_loop();
 c00279c:	f7ff fd9e 	bl	c0022dc <_read_serial_loop>
		start = HAL_GetTick();
 c0027a0:	f002 ff6a 	bl	c005678 <HAL_GetTick>
 c0027a4:	4603      	mov	r3, r0
 c0027a6:	4a38      	ldr	r2, [pc, #224]	; (c002888 <CFA_ENGINE_new_log_entry+0x160>)
 c0027a8:	6013      	str	r3, [r2, #0]
 c0027aa:	e065      	b.n	c002878 <CFA_ENGINE_new_log_entry+0x150>
	}
	else{
		// compare current value to previous, if equal, replace with counter
		#if CFLOG_TYPE == CFLOG_RAM
		if(report_secure.num_CF_Log_size != 0 && report_secure.CFLog[report_secure.num_CF_Log_size - 1] == value){
 c0027ac:	4b38      	ldr	r3, [pc, #224]	; (c002890 <CFA_ENGINE_new_log_entry+0x168>)
 c0027ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c0027b2:	2b00      	cmp	r3, #0
 c0027b4:	d022      	beq.n	c0027fc <CFA_ENGINE_new_log_entry+0xd4>
 c0027b6:	4b36      	ldr	r3, [pc, #216]	; (c002890 <CFA_ENGINE_new_log_entry+0x168>)
 c0027b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c0027bc:	3b01      	subs	r3, #1
 c0027be:	4a34      	ldr	r2, [pc, #208]	; (c002890 <CFA_ENGINE_new_log_entry+0x168>)
 c0027c0:	3318      	adds	r3, #24
 c0027c2:	009b      	lsls	r3, r3, #2
 c0027c4:	4413      	add	r3, r2
 c0027c6:	685b      	ldr	r3, [r3, #4]
 c0027c8:	687a      	ldr	r2, [r7, #4]
 c0027ca:	429a      	cmp	r2, r3
 c0027cc:	d116      	bne.n	c0027fc <CFA_ENGINE_new_log_entry+0xd4>
		#else
		prev_entry = FLASH_CFLog[report_secure.num_CF_Log_size - 1];
		if(report_secure.num_CF_Log_size != 0 && prev_entry == value){
		#endif
			if (loop_detect == 0){
 c0027ce:	4b31      	ldr	r3, [pc, #196]	; (c002894 <CFA_ENGINE_new_log_entry+0x16c>)
 c0027d0:	781b      	ldrb	r3, [r3, #0]
 c0027d2:	2b00      	cmp	r3, #0
 c0027d4:	d107      	bne.n	c0027e6 <CFA_ENGINE_new_log_entry+0xbe>
				// since first instance of repeat, set flag
				loop_detect ^= 1;
 c0027d6:	4b2f      	ldr	r3, [pc, #188]	; (c002894 <CFA_ENGINE_new_log_entry+0x16c>)
 c0027d8:	781b      	ldrb	r3, [r3, #0]
 c0027da:	f083 0301 	eor.w	r3, r3, #1
 c0027de:	b2da      	uxtb	r2, r3
 c0027e0:	4b2c      	ldr	r3, [pc, #176]	; (c002894 <CFA_ENGINE_new_log_entry+0x16c>)
 c0027e2:	701a      	strb	r2, [r3, #0]
			if (loop_detect == 0){
 c0027e4:	e047      	b.n	c002876 <CFA_ENGINE_new_log_entry+0x14e>
			} else if (loop_detect == 1){
 c0027e6:	4b2b      	ldr	r3, [pc, #172]	; (c002894 <CFA_ENGINE_new_log_entry+0x16c>)
 c0027e8:	781b      	ldrb	r3, [r3, #0]
 c0027ea:	2b01      	cmp	r3, #1
 c0027ec:	d143      	bne.n	c002876 <CFA_ENGINE_new_log_entry+0x14e>
				// if more than one instance, increment counter
				loop_counter++;
 c0027ee:	4b2a      	ldr	r3, [pc, #168]	; (c002898 <CFA_ENGINE_new_log_entry+0x170>)
 c0027f0:	881b      	ldrh	r3, [r3, #0]
 c0027f2:	3301      	adds	r3, #1
 c0027f4:	b29a      	uxth	r2, r3
 c0027f6:	4b28      	ldr	r3, [pc, #160]	; (c002898 <CFA_ENGINE_new_log_entry+0x170>)
 c0027f8:	801a      	strh	r2, [r3, #0]
			if (loop_detect == 0){
 c0027fa:	e03c      	b.n	c002876 <CFA_ENGINE_new_log_entry+0x14e>
			}
		}
		else{ // enter this block either because 1) not a loop or 2) loop exit
			if(loop_detect == 1){
 c0027fc:	4b25      	ldr	r3, [pc, #148]	; (c002894 <CFA_ENGINE_new_log_entry+0x16c>)
 c0027fe:	781b      	ldrb	r3, [r3, #0]
 c002800:	2b01      	cmp	r3, #1
 c002802:	d120      	bne.n	c002846 <CFA_ENGINE_new_log_entry+0x11e>
				uint32_t addr = (uint32_t)(&FLASH_CFLog[report_secure.num_CF_Log_size]);
				uint32_t data = 0xffff0000 + loop_counter;
//				update_flash(addr, data);
				FLASH_CFLog[report_secure.num_CF_Log_size] = data;
				#else
					report_secure.CFLog[report_secure.num_CF_Log_size] = (0xffff0000 + loop_counter);
 c002804:	4b24      	ldr	r3, [pc, #144]	; (c002898 <CFA_ENGINE_new_log_entry+0x170>)
 c002806:	881b      	ldrh	r3, [r3, #0]
 c002808:	461a      	mov	r2, r3
 c00280a:	4b21      	ldr	r3, [pc, #132]	; (c002890 <CFA_ENGINE_new_log_entry+0x168>)
 c00280c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c002810:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 c002814:	491e      	ldr	r1, [pc, #120]	; (c002890 <CFA_ENGINE_new_log_entry+0x168>)
 c002816:	3318      	adds	r3, #24
 c002818:	009b      	lsls	r3, r3, #2
 c00281a:	440b      	add	r3, r1
 c00281c:	605a      	str	r2, [r3, #4]
				#endif

				loop_detect = 0;
 c00281e:	4b1d      	ldr	r3, [pc, #116]	; (c002894 <CFA_ENGINE_new_log_entry+0x16c>)
 c002820:	2200      	movs	r2, #0
 c002822:	701a      	strb	r2, [r3, #0]
				cfa_engine_conf.log_counter++;
 c002824:	4b16      	ldr	r3, [pc, #88]	; (c002880 <CFA_ENGINE_new_log_entry+0x158>)
 c002826:	88db      	ldrh	r3, [r3, #6]
 c002828:	3301      	adds	r3, #1
 c00282a:	b29a      	uxth	r2, r3
 c00282c:	4b14      	ldr	r3, [pc, #80]	; (c002880 <CFA_ENGINE_new_log_entry+0x158>)
 c00282e:	80da      	strh	r2, [r3, #6]
				report_secure.num_CF_Log_size++;
 c002830:	4b17      	ldr	r3, [pc, #92]	; (c002890 <CFA_ENGINE_new_log_entry+0x168>)
 c002832:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c002836:	3301      	adds	r3, #1
 c002838:	b29a      	uxth	r2, r3
 c00283a:	4b15      	ldr	r3, [pc, #84]	; (c002890 <CFA_ENGINE_new_log_entry+0x168>)
 c00283c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
				loop_counter = 1;
 c002840:	4b15      	ldr	r3, [pc, #84]	; (c002898 <CFA_ENGINE_new_log_entry+0x170>)
 c002842:	2201      	movs	r2, #1
 c002844:	801a      	strh	r2, [r3, #0]
			}

			#if CFLOG_TYPE == CFLOG_RAM
			report_secure.CFLog[report_secure.num_CF_Log_size] = value;
 c002846:	4b12      	ldr	r3, [pc, #72]	; (c002890 <CFA_ENGINE_new_log_entry+0x168>)
 c002848:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c00284c:	4a10      	ldr	r2, [pc, #64]	; (c002890 <CFA_ENGINE_new_log_entry+0x168>)
 c00284e:	3318      	adds	r3, #24
 c002850:	009b      	lsls	r3, r3, #2
 c002852:	4413      	add	r3, r2
 c002854:	687a      	ldr	r2, [r7, #4]
 c002856:	605a      	str	r2, [r3, #4]
//			update_flash(addr, value);
			FLASH_CFLog[report_secure.num_CF_Log_size] = value;
			prev_entry = value;
			#endif

			cfa_engine_conf.log_counter++;
 c002858:	4b09      	ldr	r3, [pc, #36]	; (c002880 <CFA_ENGINE_new_log_entry+0x158>)
 c00285a:	88db      	ldrh	r3, [r3, #6]
 c00285c:	3301      	adds	r3, #1
 c00285e:	b29a      	uxth	r2, r3
 c002860:	4b07      	ldr	r3, [pc, #28]	; (c002880 <CFA_ENGINE_new_log_entry+0x158>)
 c002862:	80da      	strh	r2, [r3, #6]
			report_secure.num_CF_Log_size++;
 c002864:	4b0a      	ldr	r3, [pc, #40]	; (c002890 <CFA_ENGINE_new_log_entry+0x168>)
 c002866:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c00286a:	3301      	adds	r3, #1
 c00286c:	b29a      	uxth	r2, r3
 c00286e:	4b08      	ldr	r3, [pc, #32]	; (c002890 <CFA_ENGINE_new_log_entry+0x168>)
 c002870:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		}
	}
	return;
 c002874:	e000      	b.n	c002878 <CFA_ENGINE_new_log_entry+0x150>
			if (loop_detect == 0){
 c002876:	bf00      	nop
	return;
 c002878:	bf00      	nop
}
 c00287a:	3708      	adds	r7, #8
 c00287c:	46bd      	mov	sp, r7
 c00287e:	bd80      	pop	{r7, pc}
 c002880:	300020f8 	.word	0x300020f8
 c002884:	300022a0 	.word	0x300022a0
 c002888:	3000229c 	.word	0x3000229c
 c00288c:	30002298 	.word	0x30002298
 c002890:	30000074 	.word	0x30000074
 c002894:	300022e0 	.word	0x300022e0
 c002898:	30000064 	.word	0x30000064

0c00289c <CFA_ENGINE_run_attestation>:


void CFA_ENGINE_run_attestation(){
 c00289c:	b580      	push	{r7, lr}
 c00289e:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.initialized != INITIALIZED){
 c0028a0:	4b19      	ldr	r3, [pc, #100]	; (c002908 <CFA_ENGINE_run_attestation+0x6c>)
 c0028a2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 c0028a6:	2bee      	cmp	r3, #238	; 0xee
 c0028a8:	d12c      	bne.n	c002904 <CFA_ENGINE_run_attestation+0x68>
	//	*ERROR = ERROR_CFA_ENGINE_NOT_INITIALIZED;
		return;
	}

	report_secure.num_CF_Log_size = 0;
 c0028aa:	4b18      	ldr	r3, [pc, #96]	; (c00290c <CFA_ENGINE_run_attestation+0x70>)
 c0028ac:	2200      	movs	r2, #0
 c0028ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	cfa_engine_conf.attestation_status = ACTIVE;
 c0028b2:	4b15      	ldr	r3, [pc, #84]	; (c002908 <CFA_ENGINE_run_attestation+0x6c>)
 c0028b4:	2201      	movs	r2, #1
 c0028b6:	711a      	strb	r2, [r3, #4]
	cfa_engine_conf.log_counter = 0;
 c0028b8:	4b13      	ldr	r3, [pc, #76]	; (c002908 <CFA_ENGINE_run_attestation+0x6c>)
 c0028ba:	2200      	movs	r2, #0
 c0028bc:	80da      	strh	r2, [r3, #6]
	report_secure.number_of_logs_sent = 0;
 c0028be:	4b13      	ldr	r3, [pc, #76]	; (c00290c <CFA_ENGINE_run_attestation+0x70>)
 c0028c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 c0028c4:	2200      	movs	r2, #0
 c0028c6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64


//	_initialize_timer_interrupt();

	// Call the application
	start = HAL_GetTick();
 c0028ca:	f002 fed5 	bl	c005678 <HAL_GetTick>
 c0028ce:	4603      	mov	r3, r0
 c0028d0:	4a0f      	ldr	r2, [pc, #60]	; (c002910 <CFA_ENGINE_run_attestation+0x74>)
 c0028d2:	6013      	str	r3, [r2, #0]
	_run_application();
 c0028d4:	f7ff fbda 	bl	c00208c <_run_application>
	end = HAL_GetTick();
 c0028d8:	f002 fece 	bl	c005678 <HAL_GetTick>
 c0028dc:	4603      	mov	r3, r0
 c0028de:	4a0d      	ldr	r2, [pc, #52]	; (c002914 <CFA_ENGINE_run_attestation+0x78>)
 c0028e0:	6013      	str	r3, [r2, #0]
	app_exec_time += end - start;
 c0028e2:	4b0c      	ldr	r3, [pc, #48]	; (c002914 <CFA_ENGINE_run_attestation+0x78>)
 c0028e4:	681a      	ldr	r2, [r3, #0]
 c0028e6:	4b0a      	ldr	r3, [pc, #40]	; (c002910 <CFA_ENGINE_run_attestation+0x74>)
 c0028e8:	681b      	ldr	r3, [r3, #0]
 c0028ea:	1ad2      	subs	r2, r2, r3
 c0028ec:	4b0a      	ldr	r3, [pc, #40]	; (c002918 <CFA_ENGINE_run_attestation+0x7c>)
 c0028ee:	681b      	ldr	r3, [r3, #0]
 c0028f0:	4413      	add	r3, r2
 c0028f2:	4a09      	ldr	r2, [pc, #36]	; (c002918 <CFA_ENGINE_run_attestation+0x7c>)
 c0028f4:	6013      	str	r3, [r2, #0]

	_deactivate_timer_interrupt();
 c0028f6:	f7ff fd57 	bl	c0023a8 <_deactivate_timer_interrupt>

	// Set Final report Flag
	report_secure.isFinal = TRUE;
 c0028fa:	4b04      	ldr	r3, [pc, #16]	; (c00290c <CFA_ENGINE_run_attestation+0x70>)
 c0028fc:	2201      	movs	r2, #1
 c0028fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	return;
 c002902:	e000      	b.n	c002906 <CFA_ENGINE_run_attestation+0x6a>
		return;
 c002904:	bf00      	nop
}
 c002906:	bd80      	pop	{r7, pc}
 c002908:	300020f8 	.word	0x300020f8
 c00290c:	30000074 	.word	0x30000074
 c002910:	3000229c 	.word	0x3000229c
 c002914:	300022a0 	.word	0x300022a0
 c002918:	30002298 	.word	0x30002298

0c00291c <TRACES_DMA_init>:

void TRACES_DMA_init(){
 c00291c:	b580      	push	{r7, lr}
 c00291e:	b082      	sub	sp, #8
 c002920:	af00      	add	r7, sp, #0
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 c002922:	4b2f      	ldr	r3, [pc, #188]	; (c0029e0 <TRACES_DMA_init+0xc4>)
 c002924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002926:	4a2e      	ldr	r2, [pc, #184]	; (c0029e0 <TRACES_DMA_init+0xc4>)
 c002928:	f043 0301 	orr.w	r3, r3, #1
 c00292c:	6493      	str	r3, [r2, #72]	; 0x48
 c00292e:	4b2c      	ldr	r3, [pc, #176]	; (c0029e0 <TRACES_DMA_init+0xc4>)
 c002930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002932:	f003 0301 	and.w	r3, r3, #1
 c002936:	607b      	str	r3, [r7, #4]
 c002938:	687b      	ldr	r3, [r7, #4]

	  /* Configure DMA request hdma on DMA1_Channel1 */
	  hdma.Instance = DMA1_Channel1;
 c00293a:	4b2a      	ldr	r3, [pc, #168]	; (c0029e4 <TRACES_DMA_init+0xc8>)
 c00293c:	4a2a      	ldr	r2, [pc, #168]	; (c0029e8 <TRACES_DMA_init+0xcc>)
 c00293e:	601a      	str	r2, [r3, #0]
	  hdma.Init.Request = DMA_REQUEST_MEM2MEM;
 c002940:	4b28      	ldr	r3, [pc, #160]	; (c0029e4 <TRACES_DMA_init+0xc8>)
 c002942:	2200      	movs	r2, #0
 c002944:	605a      	str	r2, [r3, #4]
	  hdma.Init.Direction = DMA_MEMORY_TO_MEMORY;
 c002946:	4b27      	ldr	r3, [pc, #156]	; (c0029e4 <TRACES_DMA_init+0xc8>)
 c002948:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 c00294c:	609a      	str	r2, [r3, #8]
	  hdma.Init.PeriphInc = DMA_PINC_ENABLE;
 c00294e:	4b25      	ldr	r3, [pc, #148]	; (c0029e4 <TRACES_DMA_init+0xc8>)
 c002950:	2240      	movs	r2, #64	; 0x40
 c002952:	60da      	str	r2, [r3, #12]
	  hdma.Init.MemInc = DMA_MINC_ENABLE;
 c002954:	4b23      	ldr	r3, [pc, #140]	; (c0029e4 <TRACES_DMA_init+0xc8>)
 c002956:	2280      	movs	r2, #128	; 0x80
 c002958:	611a      	str	r2, [r3, #16]
	  hdma.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 c00295a:	4b22      	ldr	r3, [pc, #136]	; (c0029e4 <TRACES_DMA_init+0xc8>)
 c00295c:	f44f 7200 	mov.w	r2, #512	; 0x200
 c002960:	615a      	str	r2, [r3, #20]
	  hdma.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 c002962:	4b20      	ldr	r3, [pc, #128]	; (c0029e4 <TRACES_DMA_init+0xc8>)
 c002964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c002968:	619a      	str	r2, [r3, #24]
	  hdma.Init.Mode = DMA_NORMAL;
 c00296a:	4b1e      	ldr	r3, [pc, #120]	; (c0029e4 <TRACES_DMA_init+0xc8>)
 c00296c:	2200      	movs	r2, #0
 c00296e:	61da      	str	r2, [r3, #28]
	  hdma.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 c002970:	4b1c      	ldr	r3, [pc, #112]	; (c0029e4 <TRACES_DMA_init+0xc8>)
 c002972:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 c002976:	621a      	str	r2, [r3, #32]
	  if (HAL_DMA_Init(&hdma) != HAL_OK)
 c002978:	481a      	ldr	r0, [pc, #104]	; (c0029e4 <TRACES_DMA_init+0xc8>)
 c00297a:	f003 f815 	bl	c0059a8 <HAL_DMA_Init>
 c00297e:	4603      	mov	r3, r0
 c002980:	2b00      	cmp	r3, #0
 c002982:	d001      	beq.n	c002988 <TRACES_DMA_init+0x6c>
	  {
	    Error_Handler( );
 c002984:	f000 faca 	bl	c002f1c <Error_Handler>
	  }

	  /*  */
	  if (HAL_DMA_ConfigChannelAttributes(&hdma, DMA_CHANNEL_NPRIV) != HAL_OK)
 c002988:	2110      	movs	r1, #16
 c00298a:	4816      	ldr	r0, [pc, #88]	; (c0029e4 <TRACES_DMA_init+0xc8>)
 c00298c:	f003 f8b4 	bl	c005af8 <HAL_DMA_ConfigChannelAttributes>
 c002990:	4603      	mov	r3, r0
 c002992:	2b00      	cmp	r3, #0
 c002994:	d001      	beq.n	c00299a <TRACES_DMA_init+0x7e>
	  {
	    Error_Handler( );
 c002996:	f000 fac1 	bl	c002f1c <Error_Handler>
	  }

	  /*  */
	  if (HAL_DMA_ConfigChannelAttributes(&hdma, DMA_CHANNEL_SEC) != HAL_OK)
 c00299a:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c00299e:	4811      	ldr	r0, [pc, #68]	; (c0029e4 <TRACES_DMA_init+0xc8>)
 c0029a0:	f003 f8aa 	bl	c005af8 <HAL_DMA_ConfigChannelAttributes>
 c0029a4:	4603      	mov	r3, r0
 c0029a6:	2b00      	cmp	r3, #0
 c0029a8:	d001      	beq.n	c0029ae <TRACES_DMA_init+0x92>
	  {
	    Error_Handler( );
 c0029aa:	f000 fab7 	bl	c002f1c <Error_Handler>
	  }

	  /*  */
	  if (HAL_DMA_ConfigChannelAttributes(&hdma, DMA_CHANNEL_SRC_SEC) != HAL_OK)
 c0029ae:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 c0029b2:	480c      	ldr	r0, [pc, #48]	; (c0029e4 <TRACES_DMA_init+0xc8>)
 c0029b4:	f003 f8a0 	bl	c005af8 <HAL_DMA_ConfigChannelAttributes>
 c0029b8:	4603      	mov	r3, r0
 c0029ba:	2b00      	cmp	r3, #0
 c0029bc:	d001      	beq.n	c0029c2 <TRACES_DMA_init+0xa6>
	  {
	    Error_Handler( );
 c0029be:	f000 faad 	bl	c002f1c <Error_Handler>
	  }

	  /*  */
	  if (HAL_DMA_ConfigChannelAttributes(&hdma, DMA_CHANNEL_DEST_SEC) != HAL_OK)
 c0029c2:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 c0029c6:	4807      	ldr	r0, [pc, #28]	; (c0029e4 <TRACES_DMA_init+0xc8>)
 c0029c8:	f003 f896 	bl	c005af8 <HAL_DMA_ConfigChannelAttributes>
 c0029cc:	4603      	mov	r3, r0
 c0029ce:	2b00      	cmp	r3, #0
 c0029d0:	d001      	beq.n	c0029d6 <TRACES_DMA_init+0xba>
	  {
	    Error_Handler( );
 c0029d2:	f000 faa3 	bl	c002f1c <Error_Handler>
	  }
}
 c0029d6:	bf00      	nop
 c0029d8:	3708      	adds	r7, #8
 c0029da:	46bd      	mov	sp, r7
 c0029dc:	bd80      	pop	{r7, pc}
 c0029de:	bf00      	nop
 c0029e0:	50021000 	.word	0x50021000
 c0029e4:	30002208 	.word	0x30002208
 c0029e8:	50020008 	.word	0x50020008

0c0029ec <CFA_ENGINE_initialize>:

void CFA_ENGINE_initialize(){
 c0029ec:	b580      	push	{r7, lr}
 c0029ee:	af00      	add	r7, sp, #0

	if (cfa_engine_conf.initialized == INITIALIZED){
 c0029f0:	4b07      	ldr	r3, [pc, #28]	; (c002a10 <CFA_ENGINE_initialize+0x24>)
 c0029f2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 c0029f6:	2bee      	cmp	r3, #238	; 0xee
 c0029f8:	d008      	beq.n	c002a0c <CFA_ENGINE_initialize+0x20>
		return; //ERROR_cfa_engine_ALREADY_INITIALIZED;;
	}
	_attest_memory();
 c0029fa:	f7ff fe3b 	bl	c002674 <_attest_memory>
	_setup_data();
 c0029fe:	f7ff fab3 	bl	c001f68 <_setup_data>
	_clean();
 c002a02:	f7ff fb0d 	bl	c002020 <_clean>

	// init DMA
	TRACES_DMA_init();
 c002a06:	f7ff ff89 	bl	c00291c <TRACES_DMA_init>
	////

	return;
 c002a0a:	e000      	b.n	c002a0e <CFA_ENGINE_initialize+0x22>
		return; //ERROR_cfa_engine_ALREADY_INITIALIZED;;
 c002a0c:	bf00      	nop
}
 c002a0e:	bd80      	pop	{r7, pc}
 c002a10:	300020f8 	.word	0x300020f8

0c002a14 <_heal_function>:
	HAL_NVIC_SystemReset();
	return;
}


void _heal_function(){
 c002a14:	b480      	push	{r7}
 c002a16:	af00      	add	r7, sp, #0
	while(1);
 c002a18:	e7fe      	b.n	c002a18 <_heal_function+0x4>
	...

0c002a1c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 c002a1c:	b580      	push	{r7, lr}
 c002a1e:	b082      	sub	sp, #8
 c002a20:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c002a22:	4b09      	ldr	r3, [pc, #36]	; (c002a48 <MX_GPIO_Init+0x2c>)
 c002a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002a26:	4a08      	ldr	r2, [pc, #32]	; (c002a48 <MX_GPIO_Init+0x2c>)
 c002a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c002a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 c002a2e:	4b06      	ldr	r3, [pc, #24]	; (c002a48 <MX_GPIO_Init+0x2c>)
 c002a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c002a36:	607b      	str	r3, [r7, #4]
 c002a38:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 c002a3a:	f003 fe09 	bl	c006650 <HAL_PWREx_EnableVddIO2>

}
 c002a3e:	bf00      	nop
 c002a40:	3708      	adds	r7, #8
 c002a42:	46bd      	mov	sp, r7
 c002a44:	bd80      	pop	{r7, pc}
 c002a46:	bf00      	nop
 c002a48:	50021000 	.word	0x50021000

0c002a4c <MX_GTZC_S_Init>:

/* USER CODE END 0 */

/* GTZC_S init function */
void MX_GTZC_S_Init(void)
{
 c002a4c:	b580      	push	{r7, lr}
 c002a4e:	b09c      	sub	sp, #112	; 0x70
 c002a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c002a52:	1d3b      	adds	r3, r7, #4
 c002a54:	226c      	movs	r2, #108	; 0x6c
 c002a56:	2100      	movs	r1, #0
 c002a58:	4618      	mov	r0, r3
 c002a5a:	f006 fedc 	bl	c009816 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_TIM3, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c002a5e:	f240 3101 	movw	r1, #769	; 0x301
 c002a62:	2001      	movs	r0, #1
 c002a64:	f003 fab2 	bl	c005fcc <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c002a68:	4603      	mov	r3, r0
 c002a6a:	2b00      	cmp	r3, #0
 c002a6c:	d001      	beq.n	c002a72 <MX_GTZC_S_Init+0x26>
  {
    Error_Handler();
 c002a6e:	f000 fa55 	bl	c002f1c <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_TIM4, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c002a72:	f240 3101 	movw	r1, #769	; 0x301
 c002a76:	2002      	movs	r0, #2
 c002a78:	f003 faa8 	bl	c005fcc <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c002a7c:	4603      	mov	r3, r0
 c002a7e:	2b00      	cmp	r3, #0
 c002a80:	d001      	beq.n	c002a86 <MX_GTZC_S_Init+0x3a>
  {
    Error_Handler();
 c002a82:	f000 fa4b 	bl	c002f1c <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_LPUART1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c002a86:	f240 3101 	movw	r1, #769	; 0x301
 c002a8a:	2015      	movs	r0, #21
 c002a8c:	f003 fa9e 	bl	c005fcc <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c002a90:	4603      	mov	r3, r0
 c002a92:	2b00      	cmp	r3, #0
 c002a94:	d001      	beq.n	c002a9a <MX_GTZC_S_Init+0x4e>
  {
    Error_Handler();
 c002a96:	f000 fa41 	bl	c002f1c <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c002a9a:	2300      	movs	r3, #0
 c002a9c:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c002a9e:	2300      	movs	r3, #0
 c002aa0:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c002aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002aa6:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c002aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002aac:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c002aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002ab2:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c002ab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002ab8:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c002aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002abe:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c002ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002ac4:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c002ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002aca:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c002acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c002ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c002ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002adc:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c002ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002ae2:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c002ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c002aea:	2300      	movs	r3, #0
 c002aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c002aee:	2300      	movs	r3, #0
 c002af0:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c002af2:	2300      	movs	r3, #0
 c002af4:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c002af6:	2300      	movs	r3, #0
 c002af8:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c002afa:	2300      	movs	r3, #0
 c002afc:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c002afe:	2300      	movs	r3, #0
 c002b00:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c002b02:	2300      	movs	r3, #0
 c002b04:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c002b06:	2300      	movs	r3, #0
 c002b08:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c002b0a:	2300      	movs	r3, #0
 c002b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c002b0e:	2300      	movs	r3, #0
 c002b10:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c002b12:	2300      	movs	r3, #0
 c002b14:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c002b16:	2300      	movs	r3, #0
 c002b18:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c002b1a:	2300      	movs	r3, #0
 c002b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c002b1e:	1d3b      	adds	r3, r7, #4
 c002b20:	4619      	mov	r1, r3
 c002b22:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c002b26:	f003 fb29 	bl	c00617c <HAL_GTZC_MPCBB_ConfigMem>
 c002b2a:	4603      	mov	r3, r0
 c002b2c:	2b00      	cmp	r3, #0
 c002b2e:	d001      	beq.n	c002b34 <MX_GTZC_S_Init+0xe8>
  {
    Error_Handler();
 c002b30:	f000 f9f4 	bl	c002f1c <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c002b34:	2300      	movs	r3, #0
 c002b36:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c002b38:	2300      	movs	r3, #0
 c002b3a:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c002b3c:	2300      	movs	r3, #0
 c002b3e:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c002b40:	2300      	movs	r3, #0
 c002b42:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c002b44:	2300      	movs	r3, #0
 c002b46:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c002b48:	2300      	movs	r3, #0
 c002b4a:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c002b4c:	2300      	movs	r3, #0
 c002b4e:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c002b50:	2300      	movs	r3, #0
 c002b52:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c002b54:	2300      	movs	r3, #0
 c002b56:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c002b58:	1d3b      	adds	r3, r7, #4
 c002b5a:	4619      	mov	r1, r3
 c002b5c:	4809      	ldr	r0, [pc, #36]	; (c002b84 <MX_GTZC_S_Init+0x138>)
 c002b5e:	f003 fb0d 	bl	c00617c <HAL_GTZC_MPCBB_ConfigMem>
 c002b62:	4603      	mov	r3, r0
 c002b64:	2b00      	cmp	r3, #0
 c002b66:	d001      	beq.n	c002b6c <MX_GTZC_S_Init+0x120>
  {
    Error_Handler();
 c002b68:	f000 f9d8 	bl	c002f1c <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */
  if (HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_LPUART1) != HAL_OK)
 c002b6c:	2015      	movs	r0, #21
 c002b6e:	f003 fb89 	bl	c006284 <HAL_GTZC_TZIC_EnableIT>
 c002b72:	4603      	mov	r3, r0
 c002b74:	2b00      	cmp	r3, #0
 c002b76:	d001      	beq.n	c002b7c <MX_GTZC_S_Init+0x130>
  {
    Error_Handler();
 c002b78:	f000 f9d0 	bl	c002f1c <Error_Handler>
  }

  /* USER CODE END GTZC_S_Init 2 */

}
 c002b7c:	bf00      	nop
 c002b7e:	3770      	adds	r7, #112	; 0x70
 c002b80:	46bd      	mov	sp, r7
 c002b82:	bd80      	pop	{r7, pc}
 c002b84:	30030000 	.word	0x30030000

0c002b88 <MX_HASH_Init>:
  * @retval None
  */
HASH_HandleTypeDef hhash;

void MX_HASH_Init(void)
{
 c002b88:	b580      	push	{r7, lr}
 c002b8a:	b082      	sub	sp, #8
 c002b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_Init 0 */

  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */
  __HASH_CLK_ENABLE();
 c002b8e:	4b0d      	ldr	r3, [pc, #52]	; (c002bc4 <MX_HASH_Init+0x3c>)
 c002b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002b92:	4a0c      	ldr	r2, [pc, #48]	; (c002bc4 <MX_HASH_Init+0x3c>)
 c002b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c002b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 c002b9a:	4b0a      	ldr	r3, [pc, #40]	; (c002bc4 <MX_HASH_Init+0x3c>)
 c002b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002ba2:	607b      	str	r3, [r7, #4]
 c002ba4:	687b      	ldr	r3, [r7, #4]
  hhash.Init.DataType = HASH_DATATYPE_8B;
 c002ba6:	4b08      	ldr	r3, [pc, #32]	; (c002bc8 <MX_HASH_Init+0x40>)
 c002ba8:	2220      	movs	r2, #32
 c002baa:	601a      	str	r2, [r3, #0]

  /* USER CODE END HASH_Init 1 */

  /* USER CODE BEGIN HASH_Init 2 */
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 c002bac:	4806      	ldr	r0, [pc, #24]	; (c002bc8 <MX_HASH_Init+0x40>)
 c002bae:	f003 fc41 	bl	c006434 <HAL_HASH_Init>
 c002bb2:	4603      	mov	r3, r0
 c002bb4:	2b00      	cmp	r3, #0
 c002bb6:	d001      	beq.n	c002bbc <MX_HASH_Init+0x34>
  {
	  Error_Handler();
 c002bb8:	f000 f9b0 	bl	c002f1c <Error_Handler>
  }
}
 c002bbc:	bf00      	nop
 c002bbe:	3708      	adds	r7, #8
 c002bc0:	46bd      	mov	sp, r7
 c002bc2:	bd80      	pop	{r7, pc}
 c002bc4:	50021000 	.word	0x50021000
 c002bc8:	300022e4 	.word	0x300022e4

0c002bcc <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c002bcc:	b480      	push	{r7}
 c002bce:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c002bd0:	4b34      	ldr	r3, [pc, #208]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002bd2:	2200      	movs	r2, #0
 c002bd4:	609a      	str	r2, [r3, #8]
 c002bd6:	4b33      	ldr	r3, [pc, #204]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002bd8:	4a33      	ldr	r2, [pc, #204]	; (c002ca8 <TZ_SAU_Setup+0xdc>)
 c002bda:	60da      	str	r2, [r3, #12]
 c002bdc:	4b31      	ldr	r3, [pc, #196]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002bde:	4a33      	ldr	r2, [pc, #204]	; (c002cac <TZ_SAU_Setup+0xe0>)
 c002be0:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c002be2:	4b30      	ldr	r3, [pc, #192]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002be4:	2201      	movs	r2, #1
 c002be6:	609a      	str	r2, [r3, #8]
 c002be8:	4b2e      	ldr	r3, [pc, #184]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002bea:	4a31      	ldr	r2, [pc, #196]	; (c002cb0 <TZ_SAU_Setup+0xe4>)
 c002bec:	60da      	str	r2, [r3, #12]
 c002bee:	4b2d      	ldr	r3, [pc, #180]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002bf0:	4a30      	ldr	r2, [pc, #192]	; (c002cb4 <TZ_SAU_Setup+0xe8>)
 c002bf2:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c002bf4:	4b2b      	ldr	r3, [pc, #172]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002bf6:	2202      	movs	r2, #2
 c002bf8:	609a      	str	r2, [r3, #8]
 c002bfa:	4b2a      	ldr	r3, [pc, #168]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002bfc:	4a2e      	ldr	r2, [pc, #184]	; (c002cb8 <TZ_SAU_Setup+0xec>)
 c002bfe:	60da      	str	r2, [r3, #12]
 c002c00:	4b28      	ldr	r3, [pc, #160]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002c02:	4a2e      	ldr	r2, [pc, #184]	; (c002cbc <TZ_SAU_Setup+0xf0>)
 c002c04:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c002c06:	4b27      	ldr	r3, [pc, #156]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002c08:	2203      	movs	r2, #3
 c002c0a:	609a      	str	r2, [r3, #8]
 c002c0c:	4b25      	ldr	r3, [pc, #148]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002c0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c002c12:	60da      	str	r2, [r3, #12]
 c002c14:	4b23      	ldr	r3, [pc, #140]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002c16:	4a2a      	ldr	r2, [pc, #168]	; (c002cc0 <TZ_SAU_Setup+0xf4>)
 c002c18:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c002c1a:	4b22      	ldr	r3, [pc, #136]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002c1c:	2204      	movs	r2, #4
 c002c1e:	609a      	str	r2, [r3, #8]
 c002c20:	4b20      	ldr	r3, [pc, #128]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002c22:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c002c26:	60da      	str	r2, [r3, #12]
 c002c28:	4b1e      	ldr	r3, [pc, #120]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002c2a:	4a26      	ldr	r2, [pc, #152]	; (c002cc4 <TZ_SAU_Setup+0xf8>)
 c002c2c:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c002c2e:	4b1d      	ldr	r3, [pc, #116]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002c30:	2205      	movs	r2, #5
 c002c32:	609a      	str	r2, [r3, #8]
 c002c34:	4b1b      	ldr	r3, [pc, #108]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002c36:	4a24      	ldr	r2, [pc, #144]	; (c002cc8 <TZ_SAU_Setup+0xfc>)
 c002c38:	60da      	str	r2, [r3, #12]
 c002c3a:	4b1a      	ldr	r3, [pc, #104]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002c3c:	4a23      	ldr	r2, [pc, #140]	; (c002ccc <TZ_SAU_Setup+0x100>)
 c002c3e:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION6) && (SAU_INIT_REGION6 == 1U)
    SAU_INIT_REGION(6);
 c002c40:	4b18      	ldr	r3, [pc, #96]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002c42:	2206      	movs	r2, #6
 c002c44:	609a      	str	r2, [r3, #8]
 c002c46:	4b17      	ldr	r3, [pc, #92]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002c48:	4a21      	ldr	r2, [pc, #132]	; (c002cd0 <TZ_SAU_Setup+0x104>)
 c002c4a:	60da      	str	r2, [r3, #12]
 c002c4c:	4b15      	ldr	r3, [pc, #84]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002c4e:	4a21      	ldr	r2, [pc, #132]	; (c002cd4 <TZ_SAU_Setup+0x108>)
 c002c50:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c002c52:	4b14      	ldr	r3, [pc, #80]	; (c002ca4 <TZ_SAU_Setup+0xd8>)
 c002c54:	2201      	movs	r2, #1
 c002c56:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c002c58:	4b1f      	ldr	r3, [pc, #124]	; (c002cd8 <TZ_SAU_Setup+0x10c>)
 c002c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c002c5e:	4a1e      	ldr	r2, [pc, #120]	; (c002cd8 <TZ_SAU_Setup+0x10c>)
 c002c60:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c002c64:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c002c68:	4b1c      	ldr	r3, [pc, #112]	; (c002cdc <TZ_SAU_Setup+0x110>)
 c002c6a:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c002c6c:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c002c70:	4a1a      	ldr	r2, [pc, #104]	; (c002cdc <TZ_SAU_Setup+0x110>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c002c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c002c76:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c002c78:	4b19      	ldr	r3, [pc, #100]	; (c002ce0 <TZ_SAU_Setup+0x114>)
 c002c7a:	2200      	movs	r2, #0
 c002c7c:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c002c80:	4b17      	ldr	r3, [pc, #92]	; (c002ce0 <TZ_SAU_Setup+0x114>)
 c002c82:	2200      	movs	r2, #0
 c002c84:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c002c88:	4b15      	ldr	r3, [pc, #84]	; (c002ce0 <TZ_SAU_Setup+0x114>)
 c002c8a:	2200      	movs	r2, #0
 c002c8c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c002c90:	4b13      	ldr	r3, [pc, #76]	; (c002ce0 <TZ_SAU_Setup+0x114>)
 c002c92:	2200      	movs	r2, #0
 c002c94:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c002c98:	bf00      	nop
 c002c9a:	46bd      	mov	sp, r7
 c002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002ca0:	4770      	bx	lr
 c002ca2:	bf00      	nop
 c002ca4:	e000edd0 	.word	0xe000edd0
 c002ca8:	0c03e000 	.word	0x0c03e000
 c002cac:	0c03ffe3 	.word	0x0c03ffe3
 c002cb0:	08040000 	.word	0x08040000
 c002cb4:	0807ffe1 	.word	0x0807ffe1
 c002cb8:	20018000 	.word	0x20018000
 c002cbc:	2003ffe1 	.word	0x2003ffe1
 c002cc0:	4fffffe1 	.word	0x4fffffe1
 c002cc4:	9fffffe1 	.word	0x9fffffe1
 c002cc8:	0bf90000 	.word	0x0bf90000
 c002ccc:	0bfa8fe1 	.word	0x0bfa8fe1
 c002cd0:	e002ed80 	.word	0xe002ed80
 c002cd4:	e002edc3 	.word	0xe002edc3
 c002cd8:	e000ed00 	.word	0xe000ed00
 c002cdc:	e000ef30 	.word	0xe000ef30
 c002ce0:	e000e100 	.word	0xe000e100

0c002ce4 <FLASH_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void FLASH_init(){
 c002ce4:	b480      	push	{r7}
 c002ce6:	b083      	sub	sp, #12
 c002ce8:	af00      	add	r7, sp, #0
	__HAL_RCC_FLASH_CLK_ENABLE();
 c002cea:	4b0c      	ldr	r3, [pc, #48]	; (c002d1c <FLASH_init+0x38>)
 c002cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002cee:	4a0b      	ldr	r2, [pc, #44]	; (c002d1c <FLASH_init+0x38>)
 c002cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c002cf4:	6493      	str	r3, [r2, #72]	; 0x48
 c002cf6:	4b09      	ldr	r3, [pc, #36]	; (c002d1c <FLASH_init+0x38>)
 c002cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c002cfe:	607b      	str	r3, [r7, #4]
 c002d00:	687b      	ldr	r3, [r7, #4]

	// set register to disable SRAM2 erase from software resets
	FLASH->OPTR |= OB_SRAM2_RST_NOT_ERASE;
 c002d02:	4b07      	ldr	r3, [pc, #28]	; (c002d20 <FLASH_init+0x3c>)
 c002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c002d06:	4a06      	ldr	r2, [pc, #24]	; (c002d20 <FLASH_init+0x3c>)
 c002d08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 c002d0c:	6413      	str	r3, [r2, #64]	; 0x40
}
 c002d0e:	bf00      	nop
 c002d10:	370c      	adds	r7, #12
 c002d12:	46bd      	mov	sp, r7
 c002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002d18:	4770      	bx	lr
 c002d1a:	bf00      	nop
 c002d1c:	50021000 	.word	0x50021000
 c002d20:	50022000 	.word	0x50022000

0c002d24 <MPU_init>:

void MPU_init(){
 c002d24:	b580      	push	{r7, lr}
 c002d26:	b084      	sub	sp, #16
 c002d28:	af00      	add	r7, sp, #0
//	                                                     This parameter can be a value of @ref CORTEX_MPU_Instruction_Access            */
//	  uint8_t                IsShareable;           /*!< Specifies the shareability status of the protected region.
//	                                                     This parameter can be a value of @ref CORTEX_MPU_Access_Shareable              */

	/* Disable MPU */
	HAL_MPU_Disable();
 c002d2a:	f002 fde1 	bl	c0058f0 <HAL_MPU_Disable>

	/* Configure NS-RAM region as Region 0 as R/W region */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 c002d2e:	2301      	movs	r3, #1
 c002d30:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x20000000;
 c002d32:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 c002d36:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.LimitAddress = 0x20040000;
 c002d38:	4b17      	ldr	r3, [pc, #92]	; (c002d98 <MPU_init+0x74>)
 c002d3a:	60bb      	str	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_ALL_RW;
 c002d3c:	2301      	movs	r3, #1
 c002d3e:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 c002d40:	2300      	movs	r3, #0
 c002d42:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 c002d44:	2301      	movs	r3, #1
 c002d46:	73bb      	strb	r3, [r7, #14]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 c002d48:	463b      	mov	r3, r7
 c002d4a:	4618      	mov	r0, r3
 c002d4c:	f002 fde2 	bl	c005914 <HAL_MPU_ConfigRegion>

	/* Configure NS-FLASH region as REGION 1 as R/X region */
	MPU_InitStruct.BaseAddress = 0x08000000;
 c002d50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 c002d54:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.LimitAddress = 0x08080000;
 c002d56:	4b11      	ldr	r3, [pc, #68]	; (c002d9c <MPU_init+0x78>)
 c002d58:	60bb      	str	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_ALL_RO;
 c002d5a:	2303      	movs	r3, #3
 c002d5c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 c002d5e:	2301      	movs	r3, #1
 c002d60:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 c002d62:	2300      	movs	r3, #0
 c002d64:	73bb      	strb	r3, [r7, #14]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 c002d66:	463b      	mov	r3, r7
 c002d68:	4618      	mov	r0, r3
 c002d6a:	f002 fdd3 	bl	c005914 <HAL_MPU_ConfigRegion>

	/* Configure FLASH POTR region as REGION 2 as R only region */
//	uint32_t flash_addr = (uint32_t)FLASH;
//	flash_addr = &FLASH->PRIVCFGR;
	MPU_InitStruct.BaseAddress = (uint32_t)FLASH;
 c002d6e:	4b0c      	ldr	r3, [pc, #48]	; (c002da0 <MPU_init+0x7c>)
 c002d70:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.LimitAddress = (uint32_t)(&FLASH->PRIVCFGR);
 c002d72:	4b0c      	ldr	r3, [pc, #48]	; (c002da4 <MPU_init+0x80>)
 c002d74:	60bb      	str	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_ALL_RO;
 c002d76:	2303      	movs	r3, #3
 c002d78:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 c002d7a:	2302      	movs	r3, #2
 c002d7c:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 c002d7e:	2301      	movs	r3, #1
 c002d80:	73bb      	strb	r3, [r7, #14]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 c002d82:	463b      	mov	r3, r7
 c002d84:	4618      	mov	r0, r3
 c002d86:	f002 fdc5 	bl	c005914 <HAL_MPU_ConfigRegion>


	/* Enable MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 c002d8a:	2004      	movs	r0, #4
 c002d8c:	f002 fd90 	bl	c0058b0 <HAL_MPU_Enable>
}
 c002d90:	bf00      	nop
 c002d92:	3710      	adds	r7, #16
 c002d94:	46bd      	mov	sp, r7
 c002d96:	bd80      	pop	{r7, pc}
 c002d98:	20040000 	.word	0x20040000
 c002d9c:	08080000 	.word	0x08080000
 c002da0:	50022000 	.word	0x50022000
 c002da4:	500220c4 	.word	0x500220c4

0c002da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c002da8:	b580      	push	{r7, lr}
 c002daa:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and interrupts secure/non-secure allocation setup done */
  /* in SystemInit() based on partition_stm32l552xx.h file's definitions. */
  /* USER CODE BEGIN 1 */

  //enable SecureFault_Handler, without this HardFault_Handler will be raised.
  SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
 c002dac:	4b10      	ldr	r3, [pc, #64]	; (c002df0 <main+0x48>)
 c002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002db0:	4a0f      	ldr	r2, [pc, #60]	; (c002df0 <main+0x48>)
 c002db2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c002db6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c002db8:	f002 fbf3 	bl	c0055a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c002dbc:	f000 f85e 	bl	c002e7c <SystemClock_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c002dc0:	f7ff fe44 	bl	c002a4c <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
 
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c002dc4:	f7ff fe2a 	bl	c002a1c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 c002dc8:	f002 faee 	bl	c0053a8 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 c002dcc:	f000 fd68 	bl	c0038a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 c002dd0:	f000 fdb4 	bl	c00393c <MX_TIM4_Init>
  MX_HASH_Init();
 c002dd4:	f7ff fed8 	bl	c002b88 <MX_HASH_Init>

  /* USER CODE BEGIN 2 */
  // Configure SAU and NVIC
  TZ_SAU_Setup();
 c002dd8:	f7ff fef8 	bl	c002bcc <TZ_SAU_Setup>
  FLASH_init();
 c002ddc:	f7ff ff82 	bl	c002ce4 <FLASH_init>
  MPU_init();
 c002de0:	f7ff ffa0 	bl	c002d24 <MPU_init>
  CFA_ENGINE_initialize();
 c002de4:	f7ff fe02 	bl	c0029ec <CFA_ENGINE_initialize>
  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/


  NonSecure_Init();
 c002de8:	f000 f804 	bl	c002df4 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c002dec:	e7fe      	b.n	c002dec <main+0x44>
 c002dee:	bf00      	nop
 c002df0:	e000ed00 	.word	0xe000ed00

0c002df4 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c002df4:	b590      	push	{r4, r7, lr}
 c002df6:	b083      	sub	sp, #12
 c002df8:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c002dfa:	4b1d      	ldr	r3, [pc, #116]	; (c002e70 <NonSecure_Init+0x7c>)
 c002dfc:	4a1d      	ldr	r2, [pc, #116]	; (c002e74 <NonSecure_Init+0x80>)
 c002dfe:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c002e00:	4b1c      	ldr	r3, [pc, #112]	; (c002e74 <NonSecure_Init+0x80>)
 c002e02:	681b      	ldr	r3, [r3, #0]
 c002e04:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c002e06:	683b      	ldr	r3, [r7, #0]
 c002e08:	f383 8888 	msr	MSP_NS, r3
}
 c002e0c:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c002e0e:	4b1a      	ldr	r3, [pc, #104]	; (c002e78 <NonSecure_Init+0x84>)
 c002e10:	681b      	ldr	r3, [r3, #0]
 c002e12:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c002e14:	687b      	ldr	r3, [r7, #4]
 c002e16:	461c      	mov	r4, r3
 c002e18:	0864      	lsrs	r4, r4, #1
 c002e1a:	0064      	lsls	r4, r4, #1
 c002e1c:	4620      	mov	r0, r4
 c002e1e:	4621      	mov	r1, r4
 c002e20:	4622      	mov	r2, r4
 c002e22:	4623      	mov	r3, r4
 c002e24:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c002e28:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c002e2c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c002e30:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c002e34:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c002e38:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c002e3c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c002e40:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c002e44:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c002e48:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c002e4c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c002e50:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c002e54:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c002e58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002e5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c002e60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c002e64:	f7fd f9f6 	bl	c000254 <__gnu_cmse_nonsecure_call>
}
 c002e68:	bf00      	nop
 c002e6a:	370c      	adds	r7, #12
 c002e6c:	46bd      	mov	sp, r7
 c002e6e:	bd90      	pop	{r4, r7, pc}
 c002e70:	e002ed00 	.word	0xe002ed00
 c002e74:	08040000 	.word	0x08040000
 c002e78:	08040004 	.word	0x08040004

0c002e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c002e7c:	b580      	push	{r7, lr}
 c002e7e:	b098      	sub	sp, #96	; 0x60
 c002e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c002e82:	f107 0318 	add.w	r3, r7, #24
 c002e86:	2248      	movs	r2, #72	; 0x48
 c002e88:	2100      	movs	r1, #0
 c002e8a:	4618      	mov	r0, r3
 c002e8c:	f006 fcc3 	bl	c009816 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c002e90:	1d3b      	adds	r3, r7, #4
 c002e92:	2200      	movs	r2, #0
 c002e94:	601a      	str	r2, [r3, #0]
 c002e96:	605a      	str	r2, [r3, #4]
 c002e98:	609a      	str	r2, [r3, #8]
 c002e9a:	60da      	str	r2, [r3, #12]
 c002e9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c002e9e:	2000      	movs	r0, #0
 c002ea0:	f003 fb7a 	bl	c006598 <HAL_PWREx_ControlVoltageScaling>
 c002ea4:	4603      	mov	r3, r0
 c002ea6:	2b00      	cmp	r3, #0
 c002ea8:	d001      	beq.n	c002eae <SystemClock_Config+0x32>
  {
    Error_Handler();
 c002eaa:	f000 f837 	bl	c002f1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 c002eae:	2302      	movs	r3, #2
 c002eb0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 c002eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 c002eb6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 c002eb8:	2340      	movs	r3, #64	; 0x40
 c002eba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c002ebc:	2302      	movs	r3, #2
 c002ebe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 c002ec0:	2302      	movs	r3, #2
 c002ec2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 c002ec4:	2304      	movs	r3, #4
 c002ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 c002ec8:	2337      	movs	r3, #55	; 0x37
 c002eca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c002ecc:	2307      	movs	r3, #7
 c002ece:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 c002ed0:	2302      	movs	r3, #2
 c002ed2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c002ed4:	2302      	movs	r3, #2
 c002ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c002ed8:	f107 0318 	add.w	r3, r7, #24
 c002edc:	4618      	mov	r0, r3
 c002ede:	f003 fbfb 	bl	c0066d8 <HAL_RCC_OscConfig>
 c002ee2:	4603      	mov	r3, r0
 c002ee4:	2b00      	cmp	r3, #0
 c002ee6:	d001      	beq.n	c002eec <SystemClock_Config+0x70>
  {
    Error_Handler();
 c002ee8:	f000 f818 	bl	c002f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c002eec:	230f      	movs	r3, #15
 c002eee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c002ef0:	2303      	movs	r3, #3
 c002ef2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c002ef4:	2300      	movs	r3, #0
 c002ef6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c002ef8:	2300      	movs	r3, #0
 c002efa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c002efc:	2300      	movs	r3, #0
 c002efe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c002f00:	1d3b      	adds	r3, r7, #4
 c002f02:	2105      	movs	r1, #5
 c002f04:	4618      	mov	r0, r3
 c002f06:	f004 f8c9 	bl	c00709c <HAL_RCC_ClockConfig>
 c002f0a:	4603      	mov	r3, r0
 c002f0c:	2b00      	cmp	r3, #0
 c002f0e:	d001      	beq.n	c002f14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 c002f10:	f000 f804 	bl	c002f1c <Error_Handler>
  }
}
 c002f14:	bf00      	nop
 c002f16:	3760      	adds	r7, #96	; 0x60
 c002f18:	46bd      	mov	sp, r7
 c002f1a:	bd80      	pop	{r7, pc}

0c002f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c002f1c:	b480      	push	{r7}
 c002f1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c002f20:	b672      	cpsid	i
}
 c002f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c002f24:	e7fe      	b.n	c002f24 <Error_Handler+0x8>
	...

0c002f28 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */

CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func){
 c002f28:	b580      	push	{r7, lr}
 c002f2a:	b082      	sub	sp, #8
 c002f2c:	af00      	add	r7, sp, #0
 c002f2e:	4603      	mov	r3, r0
 c002f30:	6039      	str	r1, [r7, #0]
 c002f32:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c002f34:	683b      	ldr	r3, [r7, #0]
 c002f36:	2b00      	cmp	r3, #0
 c002f38:	d017      	beq.n	c002f6a <__acle_se_SECURE_RegisterCallback+0x42>
  {
    switch(CallbackId)
 c002f3a:	79fb      	ldrb	r3, [r7, #7]
 c002f3c:	2b02      	cmp	r3, #2
 c002f3e:	d00e      	beq.n	c002f5e <__acle_se_SECURE_RegisterCallback+0x36>
 c002f40:	2b02      	cmp	r3, #2
 c002f42:	dc14      	bgt.n	c002f6e <__acle_se_SECURE_RegisterCallback+0x46>
 c002f44:	2b00      	cmp	r3, #0
 c002f46:	d002      	beq.n	c002f4e <__acle_se_SECURE_RegisterCallback+0x26>
 c002f48:	2b01      	cmp	r3, #1
 c002f4a:	d004      	beq.n	c002f56 <__acle_se_SECURE_RegisterCallback+0x2e>
      case ATTESTATION_APP_ID:
			pAttestationFunctionCallback = func;
			CFA_ENGINE_register_callback();
			break;
      default:
        break;
 c002f4c:	e00f      	b.n	c002f6e <__acle_se_SECURE_RegisterCallback+0x46>
			pSecureFaultCallback = func;
 c002f4e:	4a25      	ldr	r2, [pc, #148]	; (c002fe4 <__acle_se_SECURE_RegisterCallback+0xbc>)
 c002f50:	683b      	ldr	r3, [r7, #0]
 c002f52:	6013      	str	r3, [r2, #0]
			break;
 c002f54:	e00c      	b.n	c002f70 <__acle_se_SECURE_RegisterCallback+0x48>
			pSecureErrorCallback = func;
 c002f56:	4a24      	ldr	r2, [pc, #144]	; (c002fe8 <__acle_se_SECURE_RegisterCallback+0xc0>)
 c002f58:	683b      	ldr	r3, [r7, #0]
 c002f5a:	6013      	str	r3, [r2, #0]
			break;
 c002f5c:	e008      	b.n	c002f70 <__acle_se_SECURE_RegisterCallback+0x48>
			pAttestationFunctionCallback = func;
 c002f5e:	4a23      	ldr	r2, [pc, #140]	; (c002fec <__acle_se_SECURE_RegisterCallback+0xc4>)
 c002f60:	683b      	ldr	r3, [r7, #0]
 c002f62:	6013      	str	r3, [r2, #0]
			CFA_ENGINE_register_callback();
 c002f64:	f7ff f8e4 	bl	c002130 <CFA_ENGINE_register_callback>
			break;
 c002f68:	e002      	b.n	c002f70 <__acle_se_SECURE_RegisterCallback+0x48>
    }
  }
 c002f6a:	bf00      	nop
 c002f6c:	e000      	b.n	c002f70 <__acle_se_SECURE_RegisterCallback+0x48>
        break;
 c002f6e:	bf00      	nop
}
 c002f70:	bf00      	nop
 c002f72:	3708      	adds	r7, #8
 c002f74:	46bd      	mov	sp, r7
 c002f76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c002f7a:	4670      	mov	r0, lr
 c002f7c:	4671      	mov	r1, lr
 c002f7e:	4672      	mov	r2, lr
 c002f80:	4673      	mov	r3, lr
 c002f82:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c002f86:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c002f8a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c002f8e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c002f92:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c002f96:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c002f9a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c002f9e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c002fa2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c002fa6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c002faa:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c002fae:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c002fb2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c002fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002fba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c002fbe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c002fc2:	f38e 8c00 	msr	CPSR_fs, lr
 c002fc6:	b410      	push	{r4}
 c002fc8:	eef1 ca10 	vmrs	ip, fpscr
 c002fcc:	f64f 7460 	movw	r4, #65376	; 0xff60
 c002fd0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c002fd4:	ea0c 0c04 	and.w	ip, ip, r4
 c002fd8:	eee1 ca10 	vmsr	fpscr, ip
 c002fdc:	bc10      	pop	{r4}
 c002fde:	46f4      	mov	ip, lr
 c002fe0:	4774      	bxns	lr
 c002fe2:	bf00      	nop
 c002fe4:	30002328 	.word	0x30002328
 c002fe8:	3000232c 	.word	0x3000232c
 c002fec:	30002330 	.word	0x30002330

0c002ff0 <__acle_se_SECURE_RunCallback>:

CMSE_NS_ENTRY void SECURE_RunCallback(){
 c002ff0:	b580      	push	{r7, lr}
 c002ff2:	af00      	add	r7, sp, #0
	CFA_ENGINE_run_attestation(0x23FA);
 c002ff4:	f242 30fa 	movw	r0, #9210	; 0x23fa
 c002ff8:	f7ff fc50 	bl	c00289c <CFA_ENGINE_run_attestation>
	return;
 c002ffc:	bf00      	nop
}
 c002ffe:	46bd      	mov	sp, r7
 c003000:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c003004:	4670      	mov	r0, lr
 c003006:	4671      	mov	r1, lr
 c003008:	4672      	mov	r2, lr
 c00300a:	4673      	mov	r3, lr
 c00300c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c003010:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c003014:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c003018:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00301c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c003020:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c003024:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c003028:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00302c:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c003030:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c003034:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c003038:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00303c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c003040:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c003044:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c003048:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00304c:	f38e 8c00 	msr	CPSR_fs, lr
 c003050:	b410      	push	{r4}
 c003052:	eef1 ca10 	vmrs	ip, fpscr
 c003056:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00305a:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00305e:	ea0c 0c04 	and.w	ip, ip, r4
 c003062:	eee1 ca10 	vmsr	fpscr, ip
 c003066:	bc10      	pop	{r4}
 c003068:	46f4      	mov	ip, lr
 c00306a:	4774      	bxns	lr

0c00306c <__acle_se_SECURE_Initialize_CFA_engine>:

CMSE_NS_ENTRY void SECURE_Initialize_CFA_engine(){
 c00306c:	b580      	push	{r7, lr}
 c00306e:	af00      	add	r7, sp, #0
	CFA_ENGINE_initialize();
 c003070:	f7ff fcbc 	bl	c0029ec <CFA_ENGINE_initialize>
	return;
 c003074:	bf00      	nop
}
 c003076:	46bd      	mov	sp, r7
 c003078:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00307c:	4670      	mov	r0, lr
 c00307e:	4671      	mov	r1, lr
 c003080:	4672      	mov	r2, lr
 c003082:	4673      	mov	r3, lr
 c003084:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c003088:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00308c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c003090:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c003094:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c003098:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00309c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0030a0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0030a4:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0030a8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0030ac:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0030b0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0030b4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0030b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0030bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0030c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0030c4:	f38e 8c00 	msr	CPSR_fs, lr
 c0030c8:	b410      	push	{r4}
 c0030ca:	eef1 ca10 	vmrs	ip, fpscr
 c0030ce:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0030d2:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0030d6:	ea0c 0c04 	and.w	ip, ip, r4
 c0030da:	eee1 ca10 	vmsr	fpscr, ip
 c0030de:	bc10      	pop	{r4}
 c0030e0:	46f4      	mov	ip, lr
 c0030e2:	4774      	bxns	lr

0c0030e4 <__acle_se_SECURE_Initialize_Attestation>:

CMSE_NS_ENTRY void SECURE_Initialize_Attestation(){
 c0030e4:	b580      	push	{r7, lr}
 c0030e6:	af00      	add	r7, sp, #0
	CFA_ENGINE_initialize();
 c0030e8:	f7ff fc80 	bl	c0029ec <CFA_ENGINE_initialize>
	return;
 c0030ec:	bf00      	nop
}
 c0030ee:	46bd      	mov	sp, r7
 c0030f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0030f4:	4670      	mov	r0, lr
 c0030f6:	4671      	mov	r1, lr
 c0030f8:	4672      	mov	r2, lr
 c0030fa:	4673      	mov	r3, lr
 c0030fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c003100:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c003104:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c003108:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00310c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c003110:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c003114:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c003118:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00311c:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c003120:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c003124:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c003128:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00312c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c003130:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c003134:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c003138:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00313c:	f38e 8c00 	msr	CPSR_fs, lr
 c003140:	b410      	push	{r4}
 c003142:	eef1 ca10 	vmrs	ip, fpscr
 c003146:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00314a:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00314e:	ea0c 0c04 	and.w	ip, ip, r4
 c003152:	eee1 ca10 	vmsr	fpscr, ip
 c003156:	bc10      	pop	{r4}
 c003158:	46f4      	mov	ip, lr
 c00315a:	4774      	bxns	lr

0c00315c <__acle_se_SECURE_log_ret>:

CMSE_NS_ENTRY __attribute ((naked)) void SECURE_log_ret(){
	__asm__ volatile("push	{r0, r1, r2, r3, r7, r12}");
 c00315c:	e92d 108f 	stmdb	sp!, {r0, r1, r2, r3, r7, ip}
	__asm__ volatile("sub	sp, sp, #24");
 c003160:	b086      	sub	sp, #24
	__asm__ volatile("add	r7, sp, #0");
 c003162:	af00      	add	r7, sp, #0
	__asm__ volatile("push	{r7, lr}");
 c003164:	b580      	push	{r7, lr}
	__asm__ volatile("sub	sp, sp, #8");
 c003166:	b082      	sub	sp, #8
	__asm__ volatile("add	r7, sp, #0");
 c003168:	af00      	add	r7, sp, #0

	uint32_t inst_addr;
	asm("mov %0, lr" : "=r"(inst_addr));
 c00316a:	4673      	mov	r3, lr
 c00316c:	461c      	mov	r4, r3
	CFA_ENGINE_new_log_entry(inst_addr);
 c00316e:	4620      	mov	r0, r4
 c003170:	f7ff fada 	bl	c002728 <CFA_ENGINE_new_log_entry>

	__asm__ volatile("nop");
 c003174:	bf00      	nop
	__asm__ volatile("adds	r7, r7, #8");
 c003176:	3708      	adds	r7, #8
	__asm__ volatile("mov	sp, r7");
 c003178:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r7, lr}");
 c00317a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	__asm__ volatile("mov	r0, lr");
 c00317e:	4670      	mov	r0, lr
	__asm__ volatile("mov	r1, lr");
 c003180:	4671      	mov	r1, lr
	__asm__ volatile("mov	r2, lr");
 c003182:	4672      	mov	r2, lr
	__asm__ volatile("mov	r3, lr");
 c003184:	4673      	mov	r3, lr
	__asm__ volatile("vmov.f32	s0, #1.0e+0");
 c003186:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s1, #1.0e+0");
 c00318a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s2, #1.0e+0");
 c00318e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s3, #1.0e+0");
 c003192:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s4, #1.0e+0");
 c003196:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s5, #1.0e+0");
 c00319a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s6, #1.0e+0");
 c00319e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s7, #1.0e+0");
 c0031a2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s8, #1.0e+0");
 c0031a6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s9, #1.0e+0");
 c0031aa:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s10, #1.0e+0");
 c0031ae:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s11, #1.0e+0");
 c0031b2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s12, #1.0e+0");
 c0031b6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s13, #1.0e+0");
 c0031ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s14, #1.0e+0");
 c0031be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s15, #1.0e+0");
 c0031c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	__asm__ volatile("msr	APSR_nzcvqg, lr");
 c0031c6:	f38e 8c00 	msr	CPSR_fs, lr
	__asm__ volatile("push	{r4}");
 c0031ca:	b410      	push	{r4}
	__asm__ volatile("vmrs	ip, fpscr");
 c0031cc:	eef1 ca10 	vmrs	ip, fpscr
	__asm__ volatile("movw	r4, #65376");
 c0031d0:	f64f 7460 	movw	r4, #65376	; 0xff60
	__asm__ volatile("movt	r4, #4095");
 c0031d4:	f6c0 74ff 	movt	r4, #4095	; 0xfff
	__asm__ volatile("and	ip, r4");
 c0031d8:	ea0c 0c04 	and.w	ip, ip, r4
	__asm__ volatile("vmsr	fpscr, ip");
 c0031dc:	eee1 ca10 	vmsr	fpscr, ip
	__asm__ volatile("pop	{r4}");
 c0031e0:	bc10      	pop	{r4}
	__asm__ volatile("mov	ip, lr");
 c0031e2:	46f4      	mov	ip, lr
	__asm__ volatile("adds	r7, r7, #24");
 c0031e4:	3718      	adds	r7, #24
	__asm__ volatile("mov	sp, r7");
 c0031e6:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r0, r1, r2, r3, r7, r12}");
 c0031e8:	e8bd 108f 	ldmia.w	sp!, {r0, r1, r2, r3, r7, ip}
	__asm__ volatile("bics	lr, #1");
 c0031ec:	f03e 0e01 	bics.w	lr, lr, #1
	__asm__ volatile("bxns	lr");
 c0031f0:	4774      	bxns	lr
}
 c0031f2:	bf00      	nop

0c0031f4 <__acle_se_SECURE_log_call>:

CMSE_NS_ENTRY __attribute ((naked)) void SECURE_log_call(uint32_t addr){
	__asm__ volatile("push	{r0, r1, r2, r3, r7, r10}");
 c0031f4:	e92d 048f 	stmdb	sp!, {r0, r1, r2, r3, r7, sl}
	__asm__ volatile("sub	sp, sp, #24");
 c0031f8:	b086      	sub	sp, #24
	__asm__ volatile("add	r7, sp, #0");
 c0031fa:	af00      	add	r7, sp, #0
	__asm__ volatile("push	{r7, lr}");
 c0031fc:	b580      	push	{r7, lr}
	__asm__ volatile("sub	sp, sp, #8");
 c0031fe:	b082      	sub	sp, #8
	__asm__ volatile("add	r7, sp, #0");
 c003200:	af00      	add	r7, sp, #0
	__asm__ volatile("sub	r0, r10, #1");
 c003202:	f1aa 0001 	sub.w	r0, sl, #1
	__asm__ volatile("bl	CFA_ENGINE_new_log_entry");
 c003206:	f7ff fa8f 	bl	c002728 <CFA_ENGINE_new_log_entry>
	__asm__ volatile("nop");
 c00320a:	bf00      	nop
	__asm__ volatile("adds	r7, r7, #8");
 c00320c:	3708      	adds	r7, #8
	__asm__ volatile("mov	sp, r7");
 c00320e:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r7, lr}");
 c003210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	__asm__ volatile("mov	r0, lr");
 c003214:	4670      	mov	r0, lr
	__asm__ volatile("mov	r1, lr");
 c003216:	4671      	mov	r1, lr
	__asm__ volatile("mov	r2, lr");
 c003218:	4672      	mov	r2, lr
	__asm__ volatile("mov	r3, lr");
 c00321a:	4673      	mov	r3, lr
	__asm__ volatile("vmov.f32	s0, #1.0e+0");
 c00321c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s1, #1.0e+0");
 c003220:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s2, #1.0e+0");
 c003224:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s3, #1.0e+0");
 c003228:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s4, #1.0e+0");
 c00322c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s5, #1.0e+0");
 c003230:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s6, #1.0e+0");
 c003234:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s7, #1.0e+0");
 c003238:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s8, #1.0e+0");
 c00323c:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s9, #1.0e+0");
 c003240:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s10, #1.0e+0");
 c003244:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s11, #1.0e+0");
 c003248:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s12, #1.0e+0");
 c00324c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s13, #1.0e+0");
 c003250:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s14, #1.0e+0");
 c003254:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s15, #1.0e+0");
 c003258:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	__asm__ volatile("msr	APSR_nzcvqg, lr");
 c00325c:	f38e 8c00 	msr	CPSR_fs, lr
	__asm__ volatile("vmrs	ip, fpscr");
 c003260:	eef1 ca10 	vmrs	ip, fpscr
	__asm__ volatile("movw	r4, #65376");
 c003264:	f64f 7460 	movw	r4, #65376	; 0xff60
	__asm__ volatile("movt	r4, #4095");
 c003268:	f6c0 74ff 	movt	r4, #4095	; 0xfff
	__asm__ volatile("and	ip, r4");
 c00326c:	ea0c 0c04 	and.w	ip, ip, r4
	__asm__ volatile("vmsr	fpscr, ip");
 c003270:	eee1 ca10 	vmsr	fpscr, ip
	__asm__ volatile("mov	ip, lr");
 c003274:	46f4      	mov	ip, lr
	__asm__ volatile("adds	r7, r7, #24");
 c003276:	3718      	adds	r7, #24
	__asm__ volatile("mov	sp, r7");
 c003278:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r0, r1, r2, r3, r7, r10}");
 c00327a:	e8bd 048f 	ldmia.w	sp!, {r0, r1, r2, r3, r7, sl}
	__asm__ volatile("bics	r10, #1");
 c00327e:	f03a 0a01 	bics.w	sl, sl, #1
	__asm__ volatile("bxns	r10");
 c003282:	4754      	bxns	sl
}
 c003284:	bf00      	nop

0c003286 <__acle_se_SECURE_log_cond_br>:


CMSE_NS_ENTRY __attribute ((naked)) void SECURE_log_cond_br(){;
	__asm__ volatile("push	{r0, r1, r2, r3, r7, r12}");
 c003286:	e92d 108f 	stmdb	sp!, {r0, r1, r2, r3, r7, ip}
	__asm__ volatile("sub	sp, sp, #24");
 c00328a:	b086      	sub	sp, #24
	__asm__ volatile("add	r7, sp, #0");
 c00328c:	af00      	add	r7, sp, #0
	__asm__ volatile("push	{r7, lr}");
 c00328e:	b580      	push	{r7, lr}
	__asm__ volatile("sub	sp, sp, #8");
 c003290:	b082      	sub	sp, #8
	__asm__ volatile("add	r7, sp, #0");
 c003292:	af00      	add	r7, sp, #0

	uint32_t inst_addr;
	asm("mov %0, lr" : "=r"(inst_addr));
 c003294:	4673      	mov	r3, lr
 c003296:	461c      	mov	r4, r3
	inst_addr -= 4;
 c003298:	3c04      	subs	r4, #4
	CFA_ENGINE_new_log_entry(inst_addr);
 c00329a:	4620      	mov	r0, r4
 c00329c:	f7ff fa44 	bl	c002728 <CFA_ENGINE_new_log_entry>

	__asm__ volatile("nop");
 c0032a0:	bf00      	nop
	__asm__ volatile("adds	r7, r7, #8");
 c0032a2:	3708      	adds	r7, #8
	__asm__ volatile("mov	sp, r7");
 c0032a4:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r7, lr}");
 c0032a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	__asm__ volatile("mov	r0, lr");
 c0032aa:	4670      	mov	r0, lr
	__asm__ volatile("mov	r1, lr");
 c0032ac:	4671      	mov	r1, lr
	__asm__ volatile("mov	r2, lr");
 c0032ae:	4672      	mov	r2, lr
	__asm__ volatile("mov	r3, lr");
 c0032b0:	4673      	mov	r3, lr
	__asm__ volatile("vmov.f32	s0, #1.0e+0");
 c0032b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s1, #1.0e+0");
 c0032b6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s2, #1.0e+0");
 c0032ba:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s3, #1.0e+0");
 c0032be:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s4, #1.0e+0");
 c0032c2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s5, #1.0e+0");
 c0032c6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s6, #1.0e+0");
 c0032ca:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s7, #1.0e+0");
 c0032ce:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s8, #1.0e+0");
 c0032d2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s9, #1.0e+0");
 c0032d6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s10, #1.0e+0");
 c0032da:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s11, #1.0e+0");
 c0032de:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s12, #1.0e+0");
 c0032e2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s13, #1.0e+0");
 c0032e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s14, #1.0e+0");
 c0032ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s15, #1.0e+0");
 c0032ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	__asm__ volatile("msr	APSR_nzcvqg, lr");
 c0032f2:	f38e 8c00 	msr	CPSR_fs, lr
	__asm__ volatile("push	{r4}");
 c0032f6:	b410      	push	{r4}
	__asm__ volatile("vmrs	ip, fpscr");
 c0032f8:	eef1 ca10 	vmrs	ip, fpscr
	__asm__ volatile("movw	r4, #65376");
 c0032fc:	f64f 7460 	movw	r4, #65376	; 0xff60
	__asm__ volatile("movt	r4, #4095");
 c003300:	f6c0 74ff 	movt	r4, #4095	; 0xfff
	__asm__ volatile("and	ip, r4");
 c003304:	ea0c 0c04 	and.w	ip, ip, r4
	__asm__ volatile("vmsr	fpscr, ip");
 c003308:	eee1 ca10 	vmsr	fpscr, ip
	__asm__ volatile("pop	{r4}");
 c00330c:	bc10      	pop	{r4}
	__asm__ volatile("mov	ip, lr");
 c00330e:	46f4      	mov	ip, lr
	__asm__ volatile("adds	r7, r7, #24");
 c003310:	3718      	adds	r7, #24
	__asm__ volatile("mov	sp, r7");
 c003312:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r0, r1, r2, r3, r7, r12}");
 c003314:	e8bd 108f 	ldmia.w	sp!, {r0, r1, r2, r3, r7, ip}
	__asm__ volatile("bics	lr, #1");
 c003318:	f03e 0e01 	bics.w	lr, lr, #1
	__asm__ volatile("bxns	lr");
 c00331c:	4774      	bxns	lr
}
 c00331e:	bf00      	nop

0c003320 <__acle_se_SECURE_run_attestation_wait_mode>:

CMSE_NS_ENTRY void  SECURE_run_attestation_wait_mode(){
 c003320:	b580      	push	{r7, lr}
 c003322:	af00      	add	r7, sp, #0
	CFA_ENGINE_start();
 c003324:	f7fe fef8 	bl	c002118 <CFA_ENGINE_start>
	return;
 c003328:	bf00      	nop
};
 c00332a:	46bd      	mov	sp, r7
 c00332c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c003330:	4670      	mov	r0, lr
 c003332:	4671      	mov	r1, lr
 c003334:	4672      	mov	r2, lr
 c003336:	4673      	mov	r3, lr
 c003338:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00333c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c003340:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c003344:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c003348:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00334c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c003350:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c003354:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c003358:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00335c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c003360:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c003364:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c003368:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00336c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c003370:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c003374:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c003378:	f38e 8c00 	msr	CPSR_fs, lr
 c00337c:	b410      	push	{r4}
 c00337e:	eef1 ca10 	vmrs	ip, fpscr
 c003382:	f64f 7460 	movw	r4, #65376	; 0xff60
 c003386:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00338a:	ea0c 0c04 	and.w	ip, ip, r4
 c00338e:	eee1 ca10 	vmsr	fpscr, ip
 c003392:	bc10      	pop	{r4}
 c003394:	46f4      	mov	ip, lr
 c003396:	4774      	bxns	lr

0c003398 <__acle_se_SECURE_record_output_data>:

CMSE_NS_ENTRY void SECURE_record_output_data(uint32_t value){
 c003398:	b580      	push	{r7, lr}
 c00339a:	b082      	sub	sp, #8
 c00339c:	af00      	add	r7, sp, #0
 c00339e:	6078      	str	r0, [r7, #4]
	record_output_data(value);
 c0033a0:	6878      	ldr	r0, [r7, #4]
 c0033a2:	f7fe fea9 	bl	c0020f8 <record_output_data>
	return;
 c0033a6:	bf00      	nop
};
 c0033a8:	3708      	adds	r7, #8
 c0033aa:	46bd      	mov	sp, r7
 c0033ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0033b0:	4670      	mov	r0, lr
 c0033b2:	4671      	mov	r1, lr
 c0033b4:	4672      	mov	r2, lr
 c0033b6:	4673      	mov	r3, lr
 c0033b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0033bc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0033c0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0033c4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0033c8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0033cc:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0033d0:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0033d4:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0033d8:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0033dc:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0033e0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0033e4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0033e8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0033ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0033f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0033f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0033f8:	f38e 8c00 	msr	CPSR_fs, lr
 c0033fc:	b410      	push	{r4}
 c0033fe:	eef1 ca10 	vmrs	ip, fpscr
 c003402:	f64f 7460 	movw	r4, #65376	; 0xff60
 c003406:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00340a:	ea0c 0c04 	and.w	ip, ip, r4
 c00340e:	eee1 ca10 	vmsr	fpscr, ip
 c003412:	bc10      	pop	{r4}
 c003414:	46f4      	mov	ip, lr
 c003416:	4774      	bxns	lr

0c003418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c003418:	b580      	push	{r7, lr}
 c00341a:	b084      	sub	sp, #16
 c00341c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c00341e:	4b31      	ldr	r3, [pc, #196]	; (c0034e4 <HAL_MspInit+0xcc>)
 c003420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c003422:	4a30      	ldr	r2, [pc, #192]	; (c0034e4 <HAL_MspInit+0xcc>)
 c003424:	f043 0301 	orr.w	r3, r3, #1
 c003428:	6613      	str	r3, [r2, #96]	; 0x60
 c00342a:	4b2e      	ldr	r3, [pc, #184]	; (c0034e4 <HAL_MspInit+0xcc>)
 c00342c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00342e:	f003 0301 	and.w	r3, r3, #1
 c003432:	60fb      	str	r3, [r7, #12]
 c003434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c003436:	4b2b      	ldr	r3, [pc, #172]	; (c0034e4 <HAL_MspInit+0xcc>)
 c003438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00343a:	4a2a      	ldr	r2, [pc, #168]	; (c0034e4 <HAL_MspInit+0xcc>)
 c00343c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c003440:	6593      	str	r3, [r2, #88]	; 0x58
 c003442:	4b28      	ldr	r3, [pc, #160]	; (c0034e4 <HAL_MspInit+0xcc>)
 c003444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00344a:	60bb      	str	r3, [r7, #8]
 c00344c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c00344e:	4b25      	ldr	r3, [pc, #148]	; (c0034e4 <HAL_MspInit+0xcc>)
 c003450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c003452:	4a24      	ldr	r2, [pc, #144]	; (c0034e4 <HAL_MspInit+0xcc>)
 c003454:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c003458:	6493      	str	r3, [r2, #72]	; 0x48
 c00345a:	4b22      	ldr	r3, [pc, #136]	; (c0034e4 <HAL_MspInit+0xcc>)
 c00345c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c00345e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c003462:	607b      	str	r3, [r7, #4]
 c003464:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c003466:	2200      	movs	r2, #0
 c003468:	2100      	movs	r1, #0
 c00346a:	2008      	movs	r0, #8
 c00346c:	f002 f9eb 	bl	c005846 <HAL_NVIC_SetPriority>
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(GTZC_IRQn);
 c003470:	2008      	movs	r0, #8
 c003472:	f002 fa02 	bl	c00587a <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 c003476:	f003 f8fb 	bl	c006670 <HAL_PWREx_DisableUCPDDeadBattery>

  /** PWR Non-Privilege/Non-Secure Items Configurations
  */
  HAL_PWR_ConfigAttributes(PWR_WKUP1, PWR_NSEC |PWR_NPRIV);
 c00347a:	f44f 7140 	mov.w	r1, #768	; 0x300
 c00347e:	2001      	movs	r0, #1
 c003480:	f003 f836 	bl	c0064f0 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP2, PWR_NSEC |PWR_NPRIV);
 c003484:	f44f 7140 	mov.w	r1, #768	; 0x300
 c003488:	2002      	movs	r0, #2
 c00348a:	f003 f831 	bl	c0064f0 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP3, PWR_NSEC |PWR_NPRIV);
 c00348e:	f44f 7140 	mov.w	r1, #768	; 0x300
 c003492:	2004      	movs	r0, #4
 c003494:	f003 f82c 	bl	c0064f0 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP4, PWR_NSEC |PWR_NPRIV);
 c003498:	f44f 7140 	mov.w	r1, #768	; 0x300
 c00349c:	2008      	movs	r0, #8
 c00349e:	f003 f827 	bl	c0064f0 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP5, PWR_NSEC |PWR_NPRIV);
 c0034a2:	f44f 7140 	mov.w	r1, #768	; 0x300
 c0034a6:	2010      	movs	r0, #16
 c0034a8:	f003 f822 	bl	c0064f0 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_VDM, PWR_NSEC |PWR_NPRIV);
 c0034ac:	f44f 7140 	mov.w	r1, #768	; 0x300
 c0034b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 c0034b4:	f003 f81c 	bl	c0064f0 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_APC, PWR_NSEC |PWR_NPRIV);
 c0034b8:	f44f 7140 	mov.w	r1, #768	; 0x300
 c0034bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 c0034c0:	f003 f816 	bl	c0064f0 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_LPM, PWR_NSEC |PWR_NPRIV);
 c0034c4:	f44f 7140 	mov.w	r1, #768	; 0x300
 c0034c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 c0034cc:	f003 f810 	bl	c0064f0 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_VB, PWR_NSEC |PWR_NPRIV);
 c0034d0:	f44f 7140 	mov.w	r1, #768	; 0x300
 c0034d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 c0034d8:	f003 f80a 	bl	c0064f0 <HAL_PWR_ConfigAttributes>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c0034dc:	bf00      	nop
 c0034de:	3710      	adds	r7, #16
 c0034e0:	46bd      	mov	sp, r7
 c0034e2:	bd80      	pop	{r7, pc}
 c0034e4:	50021000 	.word	0x50021000

0c0034e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c0034e8:	b480      	push	{r7}
 c0034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c0034ec:	e7fe      	b.n	c0034ec <NMI_Handler+0x4>

0c0034ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c0034ee:	b480      	push	{r7}
 c0034f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c0034f2:	e7fe      	b.n	c0034f2 <HardFault_Handler+0x4>

0c0034f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c0034f4:	b480      	push	{r7}
 c0034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c0034f8:	e7fe      	b.n	c0034f8 <MemManage_Handler+0x4>

0c0034fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c0034fa:	b480      	push	{r7}
 c0034fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c0034fe:	e7fe      	b.n	c0034fe <BusFault_Handler+0x4>

0c003500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c003500:	b480      	push	{r7}
 c003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c003504:	e7fe      	b.n	c003504 <UsageFault_Handler+0x4>

0c003506 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c003506:	b480      	push	{r7}
 c003508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c00350a:	e7fe      	b.n	c00350a <SecureFault_Handler+0x4>

0c00350c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c00350c:	b480      	push	{r7}
 c00350e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c003510:	bf00      	nop
 c003512:	46bd      	mov	sp, r7
 c003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003518:	4770      	bx	lr

0c00351a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c00351a:	b480      	push	{r7}
 c00351c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c00351e:	bf00      	nop
 c003520:	46bd      	mov	sp, r7
 c003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003526:	4770      	bx	lr

0c003528 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c003528:	b480      	push	{r7}
 c00352a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c00352c:	bf00      	nop
 c00352e:	46bd      	mov	sp, r7
 c003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003534:	4770      	bx	lr

0c003536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c003536:	b580      	push	{r7, lr}
 c003538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c00353a:	f002 f889 	bl	c005650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c00353e:	bf00      	nop
 c003540:	bd80      	pop	{r7, pc}

0c003542 <GTZC_IRQHandler>:

/**
  * @brief This function handles Global TrustZone controller global interrupt.
  */
void GTZC_IRQHandler(void)
{
 c003542:	b580      	push	{r7, lr}
 c003544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GTZC_IRQn 0 */

  /* USER CODE END GTZC_IRQn 0 */
  HAL_GTZC_IRQHandler();
 c003546:	f002 fee7 	bl	c006318 <HAL_GTZC_IRQHandler>
  /* USER CODE BEGIN GTZC_IRQn 1 */

  /* USER CODE END GTZC_IRQn 1 */
}
 c00354a:	bf00      	nop
 c00354c:	bd80      	pop	{r7, pc}
	...

0c003550 <TIM3_IRQHandler>:
  * @brief This function handles TIM3 global interrupt.
  */

#include "cfa_engine.h"
void TIM3_IRQHandler(void)
{
 c003550:	b580      	push	{r7, lr}
 c003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	CFA_time_interrupt_handler();
 c003554:	f7fe ff36 	bl	c0023c4 <CFA_time_interrupt_handler>

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 c003558:	4802      	ldr	r0, [pc, #8]	; (c003564 <TIM3_IRQHandler+0x14>)
 c00355a:	f004 fe0f 	bl	c00817c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 c00355e:	bf00      	nop
 c003560:	bd80      	pop	{r7, pc}
 c003562:	bf00      	nop
 c003564:	30002334 	.word	0x30002334

0c003568 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 c003568:	b580      	push	{r7, lr}
 c00356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 c00356c:	4802      	ldr	r0, [pc, #8]	; (c003578 <TIM4_IRQHandler+0x10>)
 c00356e:	f004 fe05 	bl	c00817c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 c003572:	bf00      	nop
 c003574:	bd80      	pop	{r7, pc}
 c003576:	bf00      	nop
 c003578:	30002380 	.word	0x30002380

0c00357c <TZ_SAU_Setup>:
{
 c00357c:	b480      	push	{r7}
 c00357e:	af00      	add	r7, sp, #0
    SAU_INIT_REGION(0);
 c003580:	4b34      	ldr	r3, [pc, #208]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c003582:	2200      	movs	r2, #0
 c003584:	609a      	str	r2, [r3, #8]
 c003586:	4b33      	ldr	r3, [pc, #204]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c003588:	4a33      	ldr	r2, [pc, #204]	; (c003658 <TZ_SAU_Setup+0xdc>)
 c00358a:	60da      	str	r2, [r3, #12]
 c00358c:	4b31      	ldr	r3, [pc, #196]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c00358e:	4a33      	ldr	r2, [pc, #204]	; (c00365c <TZ_SAU_Setup+0xe0>)
 c003590:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(1);
 c003592:	4b30      	ldr	r3, [pc, #192]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c003594:	2201      	movs	r2, #1
 c003596:	609a      	str	r2, [r3, #8]
 c003598:	4b2e      	ldr	r3, [pc, #184]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c00359a:	4a31      	ldr	r2, [pc, #196]	; (c003660 <TZ_SAU_Setup+0xe4>)
 c00359c:	60da      	str	r2, [r3, #12]
 c00359e:	4b2d      	ldr	r3, [pc, #180]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c0035a0:	4a30      	ldr	r2, [pc, #192]	; (c003664 <TZ_SAU_Setup+0xe8>)
 c0035a2:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(2);
 c0035a4:	4b2b      	ldr	r3, [pc, #172]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c0035a6:	2202      	movs	r2, #2
 c0035a8:	609a      	str	r2, [r3, #8]
 c0035aa:	4b2a      	ldr	r3, [pc, #168]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c0035ac:	4a2e      	ldr	r2, [pc, #184]	; (c003668 <TZ_SAU_Setup+0xec>)
 c0035ae:	60da      	str	r2, [r3, #12]
 c0035b0:	4b28      	ldr	r3, [pc, #160]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c0035b2:	4a2e      	ldr	r2, [pc, #184]	; (c00366c <TZ_SAU_Setup+0xf0>)
 c0035b4:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(3);
 c0035b6:	4b27      	ldr	r3, [pc, #156]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c0035b8:	2203      	movs	r2, #3
 c0035ba:	609a      	str	r2, [r3, #8]
 c0035bc:	4b25      	ldr	r3, [pc, #148]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c0035be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c0035c2:	60da      	str	r2, [r3, #12]
 c0035c4:	4b23      	ldr	r3, [pc, #140]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c0035c6:	4a2a      	ldr	r2, [pc, #168]	; (c003670 <TZ_SAU_Setup+0xf4>)
 c0035c8:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(4);
 c0035ca:	4b22      	ldr	r3, [pc, #136]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c0035cc:	2204      	movs	r2, #4
 c0035ce:	609a      	str	r2, [r3, #8]
 c0035d0:	4b20      	ldr	r3, [pc, #128]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c0035d2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c0035d6:	60da      	str	r2, [r3, #12]
 c0035d8:	4b1e      	ldr	r3, [pc, #120]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c0035da:	4a26      	ldr	r2, [pc, #152]	; (c003674 <TZ_SAU_Setup+0xf8>)
 c0035dc:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(5);
 c0035de:	4b1d      	ldr	r3, [pc, #116]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c0035e0:	2205      	movs	r2, #5
 c0035e2:	609a      	str	r2, [r3, #8]
 c0035e4:	4b1b      	ldr	r3, [pc, #108]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c0035e6:	4a24      	ldr	r2, [pc, #144]	; (c003678 <TZ_SAU_Setup+0xfc>)
 c0035e8:	60da      	str	r2, [r3, #12]
 c0035ea:	4b1a      	ldr	r3, [pc, #104]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c0035ec:	4a23      	ldr	r2, [pc, #140]	; (c00367c <TZ_SAU_Setup+0x100>)
 c0035ee:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(6);
 c0035f0:	4b18      	ldr	r3, [pc, #96]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c0035f2:	2206      	movs	r2, #6
 c0035f4:	609a      	str	r2, [r3, #8]
 c0035f6:	4b17      	ldr	r3, [pc, #92]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c0035f8:	4a21      	ldr	r2, [pc, #132]	; (c003680 <TZ_SAU_Setup+0x104>)
 c0035fa:	60da      	str	r2, [r3, #12]
 c0035fc:	4b15      	ldr	r3, [pc, #84]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c0035fe:	4a21      	ldr	r2, [pc, #132]	; (c003684 <TZ_SAU_Setup+0x108>)
 c003600:	611a      	str	r2, [r3, #16]
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c003602:	4b14      	ldr	r3, [pc, #80]	; (c003654 <TZ_SAU_Setup+0xd8>)
 c003604:	2201      	movs	r2, #1
 c003606:	601a      	str	r2, [r3, #0]
    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c003608:	4b1f      	ldr	r3, [pc, #124]	; (c003688 <TZ_SAU_Setup+0x10c>)
 c00360a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c00360e:	4a1e      	ldr	r2, [pc, #120]	; (c003688 <TZ_SAU_Setup+0x10c>)
 c003610:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c003614:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c003618:	4b1c      	ldr	r3, [pc, #112]	; (c00368c <TZ_SAU_Setup+0x110>)
 c00361a:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c00361c:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c003620:	4a1a      	ldr	r2, [pc, #104]	; (c00368c <TZ_SAU_Setup+0x110>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c003622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c003626:	6053      	str	r3, [r2, #4]
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c003628:	4b19      	ldr	r3, [pc, #100]	; (c003690 <TZ_SAU_Setup+0x114>)
 c00362a:	2200      	movs	r2, #0
 c00362c:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c003630:	4b17      	ldr	r3, [pc, #92]	; (c003690 <TZ_SAU_Setup+0x114>)
 c003632:	2200      	movs	r2, #0
 c003634:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c003638:	4b15      	ldr	r3, [pc, #84]	; (c003690 <TZ_SAU_Setup+0x114>)
 c00363a:	2200      	movs	r2, #0
 c00363c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c003640:	4b13      	ldr	r3, [pc, #76]	; (c003690 <TZ_SAU_Setup+0x114>)
 c003642:	2200      	movs	r2, #0
 c003644:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
}
 c003648:	bf00      	nop
 c00364a:	46bd      	mov	sp, r7
 c00364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003650:	4770      	bx	lr
 c003652:	bf00      	nop
 c003654:	e000edd0 	.word	0xe000edd0
 c003658:	0c03e000 	.word	0x0c03e000
 c00365c:	0c03ffe3 	.word	0x0c03ffe3
 c003660:	08040000 	.word	0x08040000
 c003664:	0807ffe1 	.word	0x0807ffe1
 c003668:	20018000 	.word	0x20018000
 c00366c:	2003ffe1 	.word	0x2003ffe1
 c003670:	4fffffe1 	.word	0x4fffffe1
 c003674:	9fffffe1 	.word	0x9fffffe1
 c003678:	0bf90000 	.word	0x0bf90000
 c00367c:	0bfa8fe1 	.word	0x0bfa8fe1
 c003680:	e002ed80 	.word	0xe002ed80
 c003684:	e002edc3 	.word	0xe002edc3
 c003688:	e000ed00 	.word	0xe000ed00
 c00368c:	e000ef30 	.word	0xe000ef30
 c003690:	e000e100 	.word	0xe000e100

0c003694 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c003694:	b580      	push	{r7, lr}
 c003696:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c003698:	f7ff ff70 	bl	c00357c <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c00369c:	4b08      	ldr	r3, [pc, #32]	; (c0036c0 <SystemInit+0x2c>)
 c00369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0036a2:	4a07      	ldr	r2, [pc, #28]	; (c0036c0 <SystemInit+0x2c>)
 c0036a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c0036a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c0036ac:	4b05      	ldr	r3, [pc, #20]	; (c0036c4 <SystemInit+0x30>)
 c0036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0036b2:	4a04      	ldr	r2, [pc, #16]	; (c0036c4 <SystemInit+0x30>)
 c0036b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c0036b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c0036bc:	bf00      	nop
 c0036be:	bd80      	pop	{r7, pc}
 c0036c0:	e000ed00 	.word	0xe000ed00
 c0036c4:	e002ed00 	.word	0xe002ed00

0c0036c8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c0036c8:	b480      	push	{r7}
 c0036ca:	b087      	sub	sp, #28
 c0036cc:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c0036ce:	4b4f      	ldr	r3, [pc, #316]	; (c00380c <SystemCoreClockUpdate+0x144>)
 c0036d0:	681b      	ldr	r3, [r3, #0]
 c0036d2:	f003 0308 	and.w	r3, r3, #8
 c0036d6:	2b00      	cmp	r3, #0
 c0036d8:	d107      	bne.n	c0036ea <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c0036da:	4b4c      	ldr	r3, [pc, #304]	; (c00380c <SystemCoreClockUpdate+0x144>)
 c0036dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0036e0:	0a1b      	lsrs	r3, r3, #8
 c0036e2:	f003 030f 	and.w	r3, r3, #15
 c0036e6:	617b      	str	r3, [r7, #20]
 c0036e8:	e005      	b.n	c0036f6 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c0036ea:	4b48      	ldr	r3, [pc, #288]	; (c00380c <SystemCoreClockUpdate+0x144>)
 c0036ec:	681b      	ldr	r3, [r3, #0]
 c0036ee:	091b      	lsrs	r3, r3, #4
 c0036f0:	f003 030f 	and.w	r3, r3, #15
 c0036f4:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c0036f6:	4a46      	ldr	r2, [pc, #280]	; (c003810 <SystemCoreClockUpdate+0x148>)
 c0036f8:	697b      	ldr	r3, [r7, #20]
 c0036fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0036fe:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c003700:	4b42      	ldr	r3, [pc, #264]	; (c00380c <SystemCoreClockUpdate+0x144>)
 c003702:	689b      	ldr	r3, [r3, #8]
 c003704:	f003 030c 	and.w	r3, r3, #12
 c003708:	2b0c      	cmp	r3, #12
 c00370a:	d866      	bhi.n	c0037da <SystemCoreClockUpdate+0x112>
 c00370c:	a201      	add	r2, pc, #4	; (adr r2, c003714 <SystemCoreClockUpdate+0x4c>)
 c00370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c003712:	bf00      	nop
 c003714:	0c003749 	.word	0x0c003749
 c003718:	0c0037db 	.word	0x0c0037db
 c00371c:	0c0037db 	.word	0x0c0037db
 c003720:	0c0037db 	.word	0x0c0037db
 c003724:	0c003751 	.word	0x0c003751
 c003728:	0c0037db 	.word	0x0c0037db
 c00372c:	0c0037db 	.word	0x0c0037db
 c003730:	0c0037db 	.word	0x0c0037db
 c003734:	0c003759 	.word	0x0c003759
 c003738:	0c0037db 	.word	0x0c0037db
 c00373c:	0c0037db 	.word	0x0c0037db
 c003740:	0c0037db 	.word	0x0c0037db
 c003744:	0c003761 	.word	0x0c003761
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c003748:	4a32      	ldr	r2, [pc, #200]	; (c003814 <SystemCoreClockUpdate+0x14c>)
 c00374a:	697b      	ldr	r3, [r7, #20]
 c00374c:	6013      	str	r3, [r2, #0]
      break;
 c00374e:	e048      	b.n	c0037e2 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c003750:	4b30      	ldr	r3, [pc, #192]	; (c003814 <SystemCoreClockUpdate+0x14c>)
 c003752:	4a31      	ldr	r2, [pc, #196]	; (c003818 <SystemCoreClockUpdate+0x150>)
 c003754:	601a      	str	r2, [r3, #0]
      break;
 c003756:	e044      	b.n	c0037e2 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c003758:	4b2e      	ldr	r3, [pc, #184]	; (c003814 <SystemCoreClockUpdate+0x14c>)
 c00375a:	4a2f      	ldr	r2, [pc, #188]	; (c003818 <SystemCoreClockUpdate+0x150>)
 c00375c:	601a      	str	r2, [r3, #0]
      break;
 c00375e:	e040      	b.n	c0037e2 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c003760:	4b2a      	ldr	r3, [pc, #168]	; (c00380c <SystemCoreClockUpdate+0x144>)
 c003762:	68db      	ldr	r3, [r3, #12]
 c003764:	f003 0303 	and.w	r3, r3, #3
 c003768:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c00376a:	4b28      	ldr	r3, [pc, #160]	; (c00380c <SystemCoreClockUpdate+0x144>)
 c00376c:	68db      	ldr	r3, [r3, #12]
 c00376e:	091b      	lsrs	r3, r3, #4
 c003770:	f003 030f 	and.w	r3, r3, #15
 c003774:	3301      	adds	r3, #1
 c003776:	60bb      	str	r3, [r7, #8]
 c003778:	68fb      	ldr	r3, [r7, #12]
 c00377a:	2b02      	cmp	r3, #2
 c00377c:	d003      	beq.n	c003786 <SystemCoreClockUpdate+0xbe>
 c00377e:	68fb      	ldr	r3, [r7, #12]
 c003780:	2b03      	cmp	r3, #3
 c003782:	d006      	beq.n	c003792 <SystemCoreClockUpdate+0xca>
 c003784:	e00b      	b.n	c00379e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c003786:	4a24      	ldr	r2, [pc, #144]	; (c003818 <SystemCoreClockUpdate+0x150>)
 c003788:	68bb      	ldr	r3, [r7, #8]
 c00378a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00378e:	613b      	str	r3, [r7, #16]
          break;
 c003790:	e00b      	b.n	c0037aa <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c003792:	4a21      	ldr	r2, [pc, #132]	; (c003818 <SystemCoreClockUpdate+0x150>)
 c003794:	68bb      	ldr	r3, [r7, #8]
 c003796:	fbb2 f3f3 	udiv	r3, r2, r3
 c00379a:	613b      	str	r3, [r7, #16]
          break;
 c00379c:	e005      	b.n	c0037aa <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c00379e:	697a      	ldr	r2, [r7, #20]
 c0037a0:	68bb      	ldr	r3, [r7, #8]
 c0037a2:	fbb2 f3f3 	udiv	r3, r2, r3
 c0037a6:	613b      	str	r3, [r7, #16]
          break;
 c0037a8:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c0037aa:	4b18      	ldr	r3, [pc, #96]	; (c00380c <SystemCoreClockUpdate+0x144>)
 c0037ac:	68db      	ldr	r3, [r3, #12]
 c0037ae:	0a1b      	lsrs	r3, r3, #8
 c0037b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c0037b4:	693b      	ldr	r3, [r7, #16]
 c0037b6:	fb02 f303 	mul.w	r3, r2, r3
 c0037ba:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c0037bc:	4b13      	ldr	r3, [pc, #76]	; (c00380c <SystemCoreClockUpdate+0x144>)
 c0037be:	68db      	ldr	r3, [r3, #12]
 c0037c0:	0e5b      	lsrs	r3, r3, #25
 c0037c2:	f003 0303 	and.w	r3, r3, #3
 c0037c6:	3301      	adds	r3, #1
 c0037c8:	005b      	lsls	r3, r3, #1
 c0037ca:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c0037cc:	693a      	ldr	r2, [r7, #16]
 c0037ce:	687b      	ldr	r3, [r7, #4]
 c0037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 c0037d4:	4a0f      	ldr	r2, [pc, #60]	; (c003814 <SystemCoreClockUpdate+0x14c>)
 c0037d6:	6013      	str	r3, [r2, #0]
      break;
 c0037d8:	e003      	b.n	c0037e2 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c0037da:	4a0e      	ldr	r2, [pc, #56]	; (c003814 <SystemCoreClockUpdate+0x14c>)
 c0037dc:	697b      	ldr	r3, [r7, #20]
 c0037de:	6013      	str	r3, [r2, #0]
      break;
 c0037e0:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c0037e2:	4b0a      	ldr	r3, [pc, #40]	; (c00380c <SystemCoreClockUpdate+0x144>)
 c0037e4:	689b      	ldr	r3, [r3, #8]
 c0037e6:	091b      	lsrs	r3, r3, #4
 c0037e8:	f003 030f 	and.w	r3, r3, #15
 c0037ec:	4a0b      	ldr	r2, [pc, #44]	; (c00381c <SystemCoreClockUpdate+0x154>)
 c0037ee:	5cd3      	ldrb	r3, [r2, r3]
 c0037f0:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c0037f2:	4b08      	ldr	r3, [pc, #32]	; (c003814 <SystemCoreClockUpdate+0x14c>)
 c0037f4:	681a      	ldr	r2, [r3, #0]
 c0037f6:	683b      	ldr	r3, [r7, #0]
 c0037f8:	fa22 f303 	lsr.w	r3, r2, r3
 c0037fc:	4a05      	ldr	r2, [pc, #20]	; (c003814 <SystemCoreClockUpdate+0x14c>)
 c0037fe:	6013      	str	r3, [r2, #0]
}
 c003800:	bf00      	nop
 c003802:	371c      	adds	r7, #28
 c003804:	46bd      	mov	sp, r7
 c003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00380a:	4770      	bx	lr
 c00380c:	50021000 	.word	0x50021000
 c003810:	0c009888 	.word	0x0c009888
 c003814:	30000068 	.word	0x30000068
 c003818:	00f42400 	.word	0x00f42400
 c00381c:	0c009870 	.word	0x0c009870

0c003820 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c003820:	b580      	push	{r7, lr}
 c003822:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c003824:	f7ff ff50 	bl	c0036c8 <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c003828:	4b1c      	ldr	r3, [pc, #112]	; (c00389c <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c00382a:	681b      	ldr	r3, [r3, #0]
}
 c00382c:	4618      	mov	r0, r3
 c00382e:	46bd      	mov	sp, r7
 c003830:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c003834:	4671      	mov	r1, lr
 c003836:	4672      	mov	r2, lr
 c003838:	4673      	mov	r3, lr
 c00383a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00383e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c003842:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c003846:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00384a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00384e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c003852:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c003856:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00385a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00385e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c003862:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c003866:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00386a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00386e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c003872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c003876:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00387a:	f38e 8c00 	msr	CPSR_fs, lr
 c00387e:	b410      	push	{r4}
 c003880:	eef1 ca10 	vmrs	ip, fpscr
 c003884:	f64f 7460 	movw	r4, #65376	; 0xff60
 c003888:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00388c:	ea0c 0c04 	and.w	ip, ip, r4
 c003890:	eee1 ca10 	vmsr	fpscr, ip
 c003894:	bc10      	pop	{r4}
 c003896:	46f4      	mov	ip, lr
 c003898:	4774      	bxns	lr
 c00389a:	bf00      	nop
 c00389c:	30000068 	.word	0x30000068

0c0038a0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 c0038a0:	b580      	push	{r7, lr}
 c0038a2:	b088      	sub	sp, #32
 c0038a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 c0038a6:	f107 0310 	add.w	r3, r7, #16
 c0038aa:	2200      	movs	r2, #0
 c0038ac:	601a      	str	r2, [r3, #0]
 c0038ae:	605a      	str	r2, [r3, #4]
 c0038b0:	609a      	str	r2, [r3, #8]
 c0038b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 c0038b4:	1d3b      	adds	r3, r7, #4
 c0038b6:	2200      	movs	r2, #0
 c0038b8:	601a      	str	r2, [r3, #0]
 c0038ba:	605a      	str	r2, [r3, #4]
 c0038bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 c0038be:	4b1d      	ldr	r3, [pc, #116]	; (c003934 <MX_TIM3_Init+0x94>)
 c0038c0:	4a1d      	ldr	r2, [pc, #116]	; (c003938 <MX_TIM3_Init+0x98>)
 c0038c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 c0038c4:	4b1b      	ldr	r3, [pc, #108]	; (c003934 <MX_TIM3_Init+0x94>)
 c0038c6:	2200      	movs	r2, #0
 c0038c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 c0038ca:	4b1a      	ldr	r3, [pc, #104]	; (c003934 <MX_TIM3_Init+0x94>)
 c0038cc:	2200      	movs	r2, #0
 c0038ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 c0038d0:	4b18      	ldr	r3, [pc, #96]	; (c003934 <MX_TIM3_Init+0x94>)
 c0038d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 c0038d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 c0038d8:	4b16      	ldr	r3, [pc, #88]	; (c003934 <MX_TIM3_Init+0x94>)
 c0038da:	2200      	movs	r2, #0
 c0038dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 c0038de:	4b15      	ldr	r3, [pc, #84]	; (c003934 <MX_TIM3_Init+0x94>)
 c0038e0:	2200      	movs	r2, #0
 c0038e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 c0038e4:	4813      	ldr	r0, [pc, #76]	; (c003934 <MX_TIM3_Init+0x94>)
 c0038e6:	f004 fbcb 	bl	c008080 <HAL_TIM_Base_Init>
 c0038ea:	4603      	mov	r3, r0
 c0038ec:	2b00      	cmp	r3, #0
 c0038ee:	d001      	beq.n	c0038f4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 c0038f0:	f7ff fb14 	bl	c002f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 c0038f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c0038f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 c0038fa:	f107 0310 	add.w	r3, r7, #16
 c0038fe:	4619      	mov	r1, r3
 c003900:	480c      	ldr	r0, [pc, #48]	; (c003934 <MX_TIM3_Init+0x94>)
 c003902:	f004 fd5a 	bl	c0083ba <HAL_TIM_ConfigClockSource>
 c003906:	4603      	mov	r3, r0
 c003908:	2b00      	cmp	r3, #0
 c00390a:	d001      	beq.n	c003910 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 c00390c:	f7ff fb06 	bl	c002f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 c003910:	2300      	movs	r3, #0
 c003912:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 c003914:	2300      	movs	r3, #0
 c003916:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 c003918:	1d3b      	adds	r3, r7, #4
 c00391a:	4619      	mov	r1, r3
 c00391c:	4805      	ldr	r0, [pc, #20]	; (c003934 <MX_TIM3_Init+0x94>)
 c00391e:	f004 ff7b 	bl	c008818 <HAL_TIMEx_MasterConfigSynchronization>
 c003922:	4603      	mov	r3, r0
 c003924:	2b00      	cmp	r3, #0
 c003926:	d001      	beq.n	c00392c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 c003928:	f7ff faf8 	bl	c002f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 c00392c:	bf00      	nop
 c00392e:	3720      	adds	r7, #32
 c003930:	46bd      	mov	sp, r7
 c003932:	bd80      	pop	{r7, pc}
 c003934:	30002334 	.word	0x30002334
 c003938:	50000400 	.word	0x50000400

0c00393c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 c00393c:	b580      	push	{r7, lr}
 c00393e:	b088      	sub	sp, #32
 c003940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 c003942:	f107 0310 	add.w	r3, r7, #16
 c003946:	2200      	movs	r2, #0
 c003948:	601a      	str	r2, [r3, #0]
 c00394a:	605a      	str	r2, [r3, #4]
 c00394c:	609a      	str	r2, [r3, #8]
 c00394e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 c003950:	1d3b      	adds	r3, r7, #4
 c003952:	2200      	movs	r2, #0
 c003954:	601a      	str	r2, [r3, #0]
 c003956:	605a      	str	r2, [r3, #4]
 c003958:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 c00395a:	4b1d      	ldr	r3, [pc, #116]	; (c0039d0 <MX_TIM4_Init+0x94>)
 c00395c:	4a1d      	ldr	r2, [pc, #116]	; (c0039d4 <MX_TIM4_Init+0x98>)
 c00395e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 c003960:	4b1b      	ldr	r3, [pc, #108]	; (c0039d0 <MX_TIM4_Init+0x94>)
 c003962:	2200      	movs	r2, #0
 c003964:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 c003966:	4b1a      	ldr	r3, [pc, #104]	; (c0039d0 <MX_TIM4_Init+0x94>)
 c003968:	2200      	movs	r2, #0
 c00396a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 c00396c:	4b18      	ldr	r3, [pc, #96]	; (c0039d0 <MX_TIM4_Init+0x94>)
 c00396e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 c003972:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 c003974:	4b16      	ldr	r3, [pc, #88]	; (c0039d0 <MX_TIM4_Init+0x94>)
 c003976:	2200      	movs	r2, #0
 c003978:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 c00397a:	4b15      	ldr	r3, [pc, #84]	; (c0039d0 <MX_TIM4_Init+0x94>)
 c00397c:	2200      	movs	r2, #0
 c00397e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 c003980:	4813      	ldr	r0, [pc, #76]	; (c0039d0 <MX_TIM4_Init+0x94>)
 c003982:	f004 fb7d 	bl	c008080 <HAL_TIM_Base_Init>
 c003986:	4603      	mov	r3, r0
 c003988:	2b00      	cmp	r3, #0
 c00398a:	d001      	beq.n	c003990 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 c00398c:	f7ff fac6 	bl	c002f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 c003990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c003994:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 c003996:	f107 0310 	add.w	r3, r7, #16
 c00399a:	4619      	mov	r1, r3
 c00399c:	480c      	ldr	r0, [pc, #48]	; (c0039d0 <MX_TIM4_Init+0x94>)
 c00399e:	f004 fd0c 	bl	c0083ba <HAL_TIM_ConfigClockSource>
 c0039a2:	4603      	mov	r3, r0
 c0039a4:	2b00      	cmp	r3, #0
 c0039a6:	d001      	beq.n	c0039ac <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 c0039a8:	f7ff fab8 	bl	c002f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 c0039ac:	2300      	movs	r3, #0
 c0039ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 c0039b0:	2300      	movs	r3, #0
 c0039b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 c0039b4:	1d3b      	adds	r3, r7, #4
 c0039b6:	4619      	mov	r1, r3
 c0039b8:	4805      	ldr	r0, [pc, #20]	; (c0039d0 <MX_TIM4_Init+0x94>)
 c0039ba:	f004 ff2d 	bl	c008818 <HAL_TIMEx_MasterConfigSynchronization>
 c0039be:	4603      	mov	r3, r0
 c0039c0:	2b00      	cmp	r3, #0
 c0039c2:	d001      	beq.n	c0039c8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 c0039c4:	f7ff faaa 	bl	c002f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 c0039c8:	bf00      	nop
 c0039ca:	3720      	adds	r7, #32
 c0039cc:	46bd      	mov	sp, r7
 c0039ce:	bd80      	pop	{r7, pc}
 c0039d0:	30002380 	.word	0x30002380
 c0039d4:	50000800 	.word	0x50000800

0c0039d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 c0039d8:	b580      	push	{r7, lr}
 c0039da:	b084      	sub	sp, #16
 c0039dc:	af00      	add	r7, sp, #0
 c0039de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 c0039e0:	687b      	ldr	r3, [r7, #4]
 c0039e2:	681b      	ldr	r3, [r3, #0]
 c0039e4:	4a1a      	ldr	r2, [pc, #104]	; (c003a50 <HAL_TIM_Base_MspInit+0x78>)
 c0039e6:	4293      	cmp	r3, r2
 c0039e8:	d114      	bne.n	c003a14 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 c0039ea:	4b1a      	ldr	r3, [pc, #104]	; (c003a54 <HAL_TIM_Base_MspInit+0x7c>)
 c0039ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0039ee:	4a19      	ldr	r2, [pc, #100]	; (c003a54 <HAL_TIM_Base_MspInit+0x7c>)
 c0039f0:	f043 0302 	orr.w	r3, r3, #2
 c0039f4:	6593      	str	r3, [r2, #88]	; 0x58
 c0039f6:	4b17      	ldr	r3, [pc, #92]	; (c003a54 <HAL_TIM_Base_MspInit+0x7c>)
 c0039f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0039fa:	f003 0302 	and.w	r3, r3, #2
 c0039fe:	60fb      	str	r3, [r7, #12]
 c003a00:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 c003a02:	2200      	movs	r2, #0
 c003a04:	2100      	movs	r1, #0
 c003a06:	202e      	movs	r0, #46	; 0x2e
 c003a08:	f001 ff1d 	bl	c005846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 c003a0c:	202e      	movs	r0, #46	; 0x2e
 c003a0e:	f001 ff34 	bl	c00587a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 c003a12:	e018      	b.n	c003a46 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 c003a14:	687b      	ldr	r3, [r7, #4]
 c003a16:	681b      	ldr	r3, [r3, #0]
 c003a18:	4a0f      	ldr	r2, [pc, #60]	; (c003a58 <HAL_TIM_Base_MspInit+0x80>)
 c003a1a:	4293      	cmp	r3, r2
 c003a1c:	d113      	bne.n	c003a46 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 c003a1e:	4b0d      	ldr	r3, [pc, #52]	; (c003a54 <HAL_TIM_Base_MspInit+0x7c>)
 c003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003a22:	4a0c      	ldr	r2, [pc, #48]	; (c003a54 <HAL_TIM_Base_MspInit+0x7c>)
 c003a24:	f043 0304 	orr.w	r3, r3, #4
 c003a28:	6593      	str	r3, [r2, #88]	; 0x58
 c003a2a:	4b0a      	ldr	r3, [pc, #40]	; (c003a54 <HAL_TIM_Base_MspInit+0x7c>)
 c003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003a2e:	f003 0304 	and.w	r3, r3, #4
 c003a32:	60bb      	str	r3, [r7, #8]
 c003a34:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 c003a36:	2200      	movs	r2, #0
 c003a38:	2100      	movs	r1, #0
 c003a3a:	202f      	movs	r0, #47	; 0x2f
 c003a3c:	f001 ff03 	bl	c005846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 c003a40:	202f      	movs	r0, #47	; 0x2f
 c003a42:	f001 ff1a 	bl	c00587a <HAL_NVIC_EnableIRQ>
}
 c003a46:	bf00      	nop
 c003a48:	3710      	adds	r7, #16
 c003a4a:	46bd      	mov	sp, r7
 c003a4c:	bd80      	pop	{r7, pc}
 c003a4e:	bf00      	nop
 c003a50:	50000400 	.word	0x50000400
 c003a54:	50021000 	.word	0x50021000
 c003a58:	50000800 	.word	0x50000800
 c003a5c:	00000000 	.word	0x00000000

0c003a60 <uECC_vli_add>:
#if (uECC_OPTIMIZATION_LEVEL >= 2)

uECC_VLI_API uECC_word_t uECC_vli_add(uECC_word_t *result,
                                      const uECC_word_t *left,
                                      const uECC_word_t *right,
                                      wordcount_t num_words) {
 c003a60:	b4f0      	push	{r4, r5, r6, r7}
 c003a62:	b088      	sub	sp, #32
 c003a64:	af00      	add	r7, sp, #0
 c003a66:	60f8      	str	r0, [r7, #12]
 c003a68:	60b9      	str	r1, [r7, #8]
 c003a6a:	607a      	str	r2, [r7, #4]
 c003a6c:	70fb      	strb	r3, [r7, #3]
#if (uECC_MAX_WORDS != uECC_MIN_WORDS)
  #if (uECC_PLATFORM == uECC_arm_thumb) || (uECC_PLATFORM == uECC_arm_thumb2)
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
 c003a6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003a72:	f1c3 0308 	rsb	r3, r3, #8
 c003a76:	00db      	lsls	r3, r3, #3
 c003a78:	3301      	adds	r3, #1
 c003a7a:	61fb      	str	r3, [r7, #28]
#endif
    uint32_t carry;
    uint32_t left_word;
    uint32_t right_word;
    
    __asm__ volatile (
 c003a7c:	68f8      	ldr	r0, [r7, #12]
 c003a7e:	68b9      	ldr	r1, [r7, #8]
 c003a80:	687a      	ldr	r2, [r7, #4]
 c003a82:	69fb      	ldr	r3, [r7, #28]
 c003a84:	2600      	movs	r6, #0
 c003a86:	a505      	add	r5, pc, #20	; (adr r5, c003a9c <uECC_vli_add+0x3c>)
 c003a88:	f3af 8000 	nop.w
 c003a8c:	f3af 8000 	nop.w
 c003a90:	195b      	adds	r3, r3, r5
 c003a92:	c920      	ldmia	r1!, {r5}
 c003a94:	ca10      	ldmia	r2!, {r4}
 c003a96:	192d      	adds	r5, r5, r4
 c003a98:	c020      	stmia	r0!, {r5}
 c003a9a:	4718      	bx	r3
 c003a9c:	c920      	ldmia	r1!, {r5}
 c003a9e:	ca10      	ldmia	r2!, {r4}
 c003aa0:	4165      	adcs	r5, r4
 c003aa2:	c020      	stmia	r0!, {r5}
 c003aa4:	c920      	ldmia	r1!, {r5}
 c003aa6:	ca10      	ldmia	r2!, {r4}
 c003aa8:	4165      	adcs	r5, r4
 c003aaa:	c020      	stmia	r0!, {r5}
 c003aac:	c920      	ldmia	r1!, {r5}
 c003aae:	ca10      	ldmia	r2!, {r4}
 c003ab0:	4165      	adcs	r5, r4
 c003ab2:	c020      	stmia	r0!, {r5}
 c003ab4:	c920      	ldmia	r1!, {r5}
 c003ab6:	ca10      	ldmia	r2!, {r4}
 c003ab8:	4165      	adcs	r5, r4
 c003aba:	c020      	stmia	r0!, {r5}
 c003abc:	c920      	ldmia	r1!, {r5}
 c003abe:	ca10      	ldmia	r2!, {r4}
 c003ac0:	4165      	adcs	r5, r4
 c003ac2:	c020      	stmia	r0!, {r5}
 c003ac4:	c920      	ldmia	r1!, {r5}
 c003ac6:	ca10      	ldmia	r2!, {r4}
 c003ac8:	4165      	adcs	r5, r4
 c003aca:	c020      	stmia	r0!, {r5}
 c003acc:	c920      	ldmia	r1!, {r5}
 c003ace:	ca10      	ldmia	r2!, {r4}
 c003ad0:	4165      	adcs	r5, r4
 c003ad2:	c020      	stmia	r0!, {r5}
 c003ad4:	4176      	adcs	r6, r6
 c003ad6:	60f8      	str	r0, [r7, #12]
 c003ad8:	60b9      	str	r1, [r7, #8]
 c003ada:	607a      	str	r2, [r7, #4]
 c003adc:	61fb      	str	r3, [r7, #28]
 c003ade:	61be      	str	r6, [r7, #24]
 c003ae0:	617d      	str	r5, [r7, #20]
 c003ae2:	613c      	str	r4, [r7, #16]
          [carry] REG_WRITE_LO (carry), [left] REG_WRITE_LO (left_word),
          [right] REG_WRITE_LO (right_word)
        :
        : "cc", "memory"
    );
    return carry;
 c003ae4:	69bb      	ldr	r3, [r7, #24]
}
 c003ae6:	4618      	mov	r0, r3
 c003ae8:	3720      	adds	r7, #32
 c003aea:	46bd      	mov	sp, r7
 c003aec:	bcf0      	pop	{r4, r5, r6, r7}
 c003aee:	4770      	bx	lr

0c003af0 <uECC_vli_sub>:
#define asm_add 1

uECC_VLI_API uECC_word_t uECC_vli_sub(uECC_word_t *result,
                                      const uECC_word_t *left,
                                      const uECC_word_t *right,
                                      wordcount_t num_words) {
 c003af0:	b4f0      	push	{r4, r5, r6, r7}
 c003af2:	b088      	sub	sp, #32
 c003af4:	af00      	add	r7, sp, #0
 c003af6:	60f8      	str	r0, [r7, #12]
 c003af8:	60b9      	str	r1, [r7, #8]
 c003afa:	607a      	str	r2, [r7, #4]
 c003afc:	70fb      	strb	r3, [r7, #3]
#if (uECC_MAX_WORDS != uECC_MIN_WORDS)
  #if (uECC_PLATFORM == uECC_arm_thumb) || (uECC_PLATFORM == uECC_arm_thumb2)
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
 c003afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003b02:	f1c3 0308 	rsb	r3, r3, #8
 c003b06:	00db      	lsls	r3, r3, #3
 c003b08:	3301      	adds	r3, #1
 c003b0a:	61fb      	str	r3, [r7, #28]
#endif
    uint32_t carry;
    uint32_t left_word;
    uint32_t right_word;
    
    __asm__ volatile (
 c003b0c:	68f8      	ldr	r0, [r7, #12]
 c003b0e:	68b9      	ldr	r1, [r7, #8]
 c003b10:	687a      	ldr	r2, [r7, #4]
 c003b12:	69fb      	ldr	r3, [r7, #28]
 c003b14:	2600      	movs	r6, #0
 c003b16:	a505      	add	r5, pc, #20	; (adr r5, c003b2c <uECC_vli_sub+0x3c>)
 c003b18:	f3af 8000 	nop.w
 c003b1c:	f3af 8000 	nop.w
 c003b20:	195b      	adds	r3, r3, r5
 c003b22:	c920      	ldmia	r1!, {r5}
 c003b24:	ca10      	ldmia	r2!, {r4}
 c003b26:	1b2d      	subs	r5, r5, r4
 c003b28:	c020      	stmia	r0!, {r5}
 c003b2a:	4718      	bx	r3
 c003b2c:	c920      	ldmia	r1!, {r5}
 c003b2e:	ca10      	ldmia	r2!, {r4}
 c003b30:	41a5      	sbcs	r5, r4
 c003b32:	c020      	stmia	r0!, {r5}
 c003b34:	c920      	ldmia	r1!, {r5}
 c003b36:	ca10      	ldmia	r2!, {r4}
 c003b38:	41a5      	sbcs	r5, r4
 c003b3a:	c020      	stmia	r0!, {r5}
 c003b3c:	c920      	ldmia	r1!, {r5}
 c003b3e:	ca10      	ldmia	r2!, {r4}
 c003b40:	41a5      	sbcs	r5, r4
 c003b42:	c020      	stmia	r0!, {r5}
 c003b44:	c920      	ldmia	r1!, {r5}
 c003b46:	ca10      	ldmia	r2!, {r4}
 c003b48:	41a5      	sbcs	r5, r4
 c003b4a:	c020      	stmia	r0!, {r5}
 c003b4c:	c920      	ldmia	r1!, {r5}
 c003b4e:	ca10      	ldmia	r2!, {r4}
 c003b50:	41a5      	sbcs	r5, r4
 c003b52:	c020      	stmia	r0!, {r5}
 c003b54:	c920      	ldmia	r1!, {r5}
 c003b56:	ca10      	ldmia	r2!, {r4}
 c003b58:	41a5      	sbcs	r5, r4
 c003b5a:	c020      	stmia	r0!, {r5}
 c003b5c:	c920      	ldmia	r1!, {r5}
 c003b5e:	ca10      	ldmia	r2!, {r4}
 c003b60:	41a5      	sbcs	r5, r4
 c003b62:	c020      	stmia	r0!, {r5}
 c003b64:	4176      	adcs	r6, r6
 c003b66:	60f8      	str	r0, [r7, #12]
 c003b68:	60b9      	str	r1, [r7, #8]
 c003b6a:	607a      	str	r2, [r7, #4]
 c003b6c:	61fb      	str	r3, [r7, #28]
 c003b6e:	61be      	str	r6, [r7, #24]
 c003b70:	617d      	str	r5, [r7, #20]
 c003b72:	613c      	str	r4, [r7, #16]
          [carry] REG_WRITE_LO (carry), [left] REG_WRITE_LO (left_word),
          [right] REG_WRITE_LO (right_word)
        :
        : "cc", "memory"
    );
    return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
 c003b74:	69bb      	ldr	r3, [r7, #24]
 c003b76:	2b00      	cmp	r3, #0
 c003b78:	bf0c      	ite	eq
 c003b7a:	2301      	moveq	r3, #1
 c003b7c:	2300      	movne	r3, #0
 c003b7e:	b2db      	uxtb	r3, r3
                      (for some reason...) */
}
 c003b80:	4618      	mov	r0, r3
 c003b82:	3720      	adds	r7, #32
 c003b84:	46bd      	mov	sp, r7
 c003b86:	bcf0      	pop	{r4, r5, r6, r7}
 c003b88:	4770      	bx	lr
 c003b8a:	bf00      	nop

0c003b8c <uECC_vli_mult>:

#if !asm_mult
uECC_VLI_API void uECC_vli_mult(uECC_word_t *result,
                                const uECC_word_t *left,
                                const uECC_word_t *right,
                                wordcount_t num_words) {
 c003b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c003b90:	b08d      	sub	sp, #52	; 0x34
 c003b92:	af00      	add	r7, sp, #0
 c003b94:	60f8      	str	r0, [r7, #12]
 c003b96:	60b9      	str	r1, [r7, #8]
 c003b98:	607a      	str	r2, [r7, #4]
 c003b9a:	70fb      	strb	r3, [r7, #3]
#if (uECC_PLATFORM != uECC_arm_thumb)
    uint32_t c0 = 0;
 c003b9c:	2300      	movs	r3, #0
 c003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t c1 = 0;
 c003ba0:	2300      	movs	r3, #0
 c003ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t c2 = 0;
 c003ba4:	2300      	movs	r3, #0
 c003ba6:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t k = 0;
 c003ba8:	2300      	movs	r3, #0
 c003baa:	623b      	str	r3, [r7, #32]
        "str %[c0], [%[result], %[k]] \n\t" /* result[num_words * 2 - 1] = c0 */
        RESUME_SYNTAX
        : [c0] "+r" (c0), [c1] "+r" (c1), [c2] "+r" (c2),
          [k] "+r" (k), [i] "=&r" (i), [t0] "=&r" (t0), [t1] "=&r" (t1)
        : [result] "r" (result), [left] "r" (left), [right] "r" (right),
          [last_word] "r" ((num_words - 1) * 4)
 c003bac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003bb0:	3b01      	subs	r3, #1
 c003bb2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
    __asm__ volatile (
 c003bb6:	68fc      	ldr	r4, [r7, #12]
 c003bb8:	68bd      	ldr	r5, [r7, #8]
 c003bba:	687e      	ldr	r6, [r7, #4]
 c003bbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 c003bbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 c003bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c003bc2:	6a3b      	ldr	r3, [r7, #32]
 c003bc4:	f05f 0e00 	movs.w	lr, #0
 c003bc8:	e003      	b.n	c003bd2 <uECC_vli_mult+0x46>
 c003bca:	ea5f 0e03 	movs.w	lr, r3
 c003bce:	ebbe 0e0c 	subs.w	lr, lr, ip
 c003bd2:	ebb3 080e 	subs.w	r8, r3, lr
 c003bd6:	f856 9008 	ldr.w	r9, [r6, r8]
 c003bda:	f855 800e 	ldr.w	r8, [r5, lr]
 c003bde:	fba8 8909 	umull	r8, r9, r8, r9
 c003be2:	eb10 0008 	adds.w	r0, r0, r8
 c003be6:	eb51 0109 	adcs.w	r1, r1, r9
 c003bea:	f152 0200 	adcs.w	r2, r2, #0
 c003bee:	f11e 0e04 	adds.w	lr, lr, #4
 c003bf2:	45e6      	cmp	lr, ip
 c003bf4:	dc01      	bgt.n	c003bfa <uECC_vli_mult+0x6e>
 c003bf6:	459e      	cmp	lr, r3
 c003bf8:	ddeb      	ble.n	c003bd2 <uECC_vli_mult+0x46>
 c003bfa:	50e0      	str	r0, [r4, r3]
 c003bfc:	4608      	mov	r0, r1
 c003bfe:	4611      	mov	r1, r2
 c003c00:	2200      	movs	r2, #0
 c003c02:	3304      	adds	r3, #4
 c003c04:	4563      	cmp	r3, ip
 c003c06:	dddd      	ble.n	c003bc4 <uECC_vli_mult+0x38>
 c003c08:	ebb3 0f4c 	cmp.w	r3, ip, lsl #1
 c003c0c:	dddd      	ble.n	c003bca <uECC_vli_mult+0x3e>
 c003c0e:	50e0      	str	r0, [r4, r3]
 c003c10:	464c      	mov	r4, r9
 c003c12:	4645      	mov	r5, r8
 c003c14:	4676      	mov	r6, lr
 c003c16:	62f8      	str	r0, [r7, #44]	; 0x2c
 c003c18:	62b9      	str	r1, [r7, #40]	; 0x28
 c003c1a:	627a      	str	r2, [r7, #36]	; 0x24
 c003c1c:	623b      	str	r3, [r7, #32]
 c003c1e:	61fe      	str	r6, [r7, #28]
 c003c20:	61bd      	str	r5, [r7, #24]
 c003c22:	617c      	str	r4, [r7, #20]
          [r5] "=&l" (r5), [r6] "=&l" (r6), [r7] "=&l" (r7)
        : [r0] "l" (result), [r1] "l" (left), [r2] "l" (right)
        : "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
    );
#endif
}
 c003c24:	bf00      	nop
 c003c26:	3734      	adds	r7, #52	; 0x34
 c003c28:	46bd      	mov	sp, r7
 c003c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0c003c2e <uECC_vli_clear>:
int uECC_curve_public_key_size(uECC_Curve curve) {
    return 2 * curve->num_bytes;
}

#if !asm_clear
uECC_VLI_API void uECC_vli_clear(uECC_word_t *vli, wordcount_t num_words) {
 c003c2e:	b480      	push	{r7}
 c003c30:	b085      	sub	sp, #20
 c003c32:	af00      	add	r7, sp, #0
 c003c34:	6078      	str	r0, [r7, #4]
 c003c36:	460b      	mov	r3, r1
 c003c38:	70fb      	strb	r3, [r7, #3]
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
 c003c3a:	2300      	movs	r3, #0
 c003c3c:	73fb      	strb	r3, [r7, #15]
 c003c3e:	e00a      	b.n	c003c56 <uECC_vli_clear+0x28>
        vli[i] = 0;
 c003c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c003c44:	009b      	lsls	r3, r3, #2
 c003c46:	687a      	ldr	r2, [r7, #4]
 c003c48:	4413      	add	r3, r2
 c003c4a:	2200      	movs	r2, #0
 c003c4c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 c003c4e:	7bfb      	ldrb	r3, [r7, #15]
 c003c50:	3301      	adds	r3, #1
 c003c52:	b2db      	uxtb	r3, r3
 c003c54:	73fb      	strb	r3, [r7, #15]
 c003c56:	f997 200f 	ldrsb.w	r2, [r7, #15]
 c003c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003c5e:	429a      	cmp	r2, r3
 c003c60:	dbee      	blt.n	c003c40 <uECC_vli_clear+0x12>
    }
}
 c003c62:	bf00      	nop
 c003c64:	bf00      	nop
 c003c66:	3714      	adds	r7, #20
 c003c68:	46bd      	mov	sp, r7
 c003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003c6e:	4770      	bx	lr

0c003c70 <uECC_vli_isZero>:
#endif /* !asm_clear */

/* Constant-time comparison to zero - secure way to compare long integers */
/* Returns 1 if vli == 0, 0 otherwise. */
uECC_VLI_API uECC_word_t uECC_vli_isZero(const uECC_word_t *vli, wordcount_t num_words) {
 c003c70:	b480      	push	{r7}
 c003c72:	b085      	sub	sp, #20
 c003c74:	af00      	add	r7, sp, #0
 c003c76:	6078      	str	r0, [r7, #4]
 c003c78:	460b      	mov	r3, r1
 c003c7a:	70fb      	strb	r3, [r7, #3]
    uECC_word_t bits = 0;
 c003c7c:	2300      	movs	r3, #0
 c003c7e:	60fb      	str	r3, [r7, #12]
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
 c003c80:	2300      	movs	r3, #0
 c003c82:	72fb      	strb	r3, [r7, #11]
 c003c84:	e00c      	b.n	c003ca0 <uECC_vli_isZero+0x30>
        bits |= vli[i];
 c003c86:	f997 300b 	ldrsb.w	r3, [r7, #11]
 c003c8a:	009b      	lsls	r3, r3, #2
 c003c8c:	687a      	ldr	r2, [r7, #4]
 c003c8e:	4413      	add	r3, r2
 c003c90:	681b      	ldr	r3, [r3, #0]
 c003c92:	68fa      	ldr	r2, [r7, #12]
 c003c94:	4313      	orrs	r3, r2
 c003c96:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < num_words; ++i) {
 c003c98:	7afb      	ldrb	r3, [r7, #11]
 c003c9a:	3301      	adds	r3, #1
 c003c9c:	b2db      	uxtb	r3, r3
 c003c9e:	72fb      	strb	r3, [r7, #11]
 c003ca0:	f997 200b 	ldrsb.w	r2, [r7, #11]
 c003ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003ca8:	429a      	cmp	r2, r3
 c003caa:	dbec      	blt.n	c003c86 <uECC_vli_isZero+0x16>
    }
    return (bits == 0);
 c003cac:	68fb      	ldr	r3, [r7, #12]
 c003cae:	2b00      	cmp	r3, #0
 c003cb0:	bf0c      	ite	eq
 c003cb2:	2301      	moveq	r3, #1
 c003cb4:	2300      	movne	r3, #0
 c003cb6:	b2db      	uxtb	r3, r3
}
 c003cb8:	4618      	mov	r0, r3
 c003cba:	3714      	adds	r7, #20
 c003cbc:	46bd      	mov	sp, r7
 c003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003cc2:	4770      	bx	lr

0c003cc4 <uECC_vli_testBit>:

/* Returns nonzero if bit 'bit' of vli is set. */
uECC_VLI_API uECC_word_t uECC_vli_testBit(const uECC_word_t *vli, bitcount_t bit) {
 c003cc4:	b480      	push	{r7}
 c003cc6:	b083      	sub	sp, #12
 c003cc8:	af00      	add	r7, sp, #0
 c003cca:	6078      	str	r0, [r7, #4]
 c003ccc:	460b      	mov	r3, r1
 c003cce:	807b      	strh	r3, [r7, #2]
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 c003cd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 c003cd4:	115b      	asrs	r3, r3, #5
 c003cd6:	b21b      	sxth	r3, r3
 c003cd8:	009b      	lsls	r3, r3, #2
 c003cda:	687a      	ldr	r2, [r7, #4]
 c003cdc:	4413      	add	r3, r2
 c003cde:	681a      	ldr	r2, [r3, #0]
 c003ce0:	887b      	ldrh	r3, [r7, #2]
 c003ce2:	f003 031f 	and.w	r3, r3, #31
 c003ce6:	2101      	movs	r1, #1
 c003ce8:	fa01 f303 	lsl.w	r3, r1, r3
 c003cec:	4013      	ands	r3, r2
}
 c003cee:	4618      	mov	r0, r3
 c003cf0:	370c      	adds	r7, #12
 c003cf2:	46bd      	mov	sp, r7
 c003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003cf8:	4770      	bx	lr

0c003cfa <vli_numDigits>:

/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const uECC_word_t *vli, const wordcount_t max_words) {
 c003cfa:	b480      	push	{r7}
 c003cfc:	b085      	sub	sp, #20
 c003cfe:	af00      	add	r7, sp, #0
 c003d00:	6078      	str	r0, [r7, #4]
 c003d02:	460b      	mov	r3, r1
 c003d04:	70fb      	strb	r3, [r7, #3]
    wordcount_t i;
    /* Search from the end until we find a non-zero digit.
       We do it in reverse because we expect that most digits will be nonzero. */
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 c003d06:	78fb      	ldrb	r3, [r7, #3]
 c003d08:	3b01      	subs	r3, #1
 c003d0a:	b2db      	uxtb	r3, r3
 c003d0c:	73fb      	strb	r3, [r7, #15]
 c003d0e:	e003      	b.n	c003d18 <vli_numDigits+0x1e>
 c003d10:	7bfb      	ldrb	r3, [r7, #15]
 c003d12:	3b01      	subs	r3, #1
 c003d14:	b2db      	uxtb	r3, r3
 c003d16:	73fb      	strb	r3, [r7, #15]
 c003d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c003d1c:	2b00      	cmp	r3, #0
 c003d1e:	db07      	blt.n	c003d30 <vli_numDigits+0x36>
 c003d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c003d24:	009b      	lsls	r3, r3, #2
 c003d26:	687a      	ldr	r2, [r7, #4]
 c003d28:	4413      	add	r3, r2
 c003d2a:	681b      	ldr	r3, [r3, #0]
 c003d2c:	2b00      	cmp	r3, #0
 c003d2e:	d0ef      	beq.n	c003d10 <vli_numDigits+0x16>
    }

    return (i + 1);
 c003d30:	7bfb      	ldrb	r3, [r7, #15]
 c003d32:	3301      	adds	r3, #1
 c003d34:	b2db      	uxtb	r3, r3
 c003d36:	b25b      	sxtb	r3, r3
}
 c003d38:	4618      	mov	r0, r3
 c003d3a:	3714      	adds	r7, #20
 c003d3c:	46bd      	mov	sp, r7
 c003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003d42:	4770      	bx	lr

0c003d44 <uECC_vli_numBits>:

/* Counts the number of bits required to represent vli. */
uECC_VLI_API bitcount_t uECC_vli_numBits(const uECC_word_t *vli, const wordcount_t max_words) {
 c003d44:	b580      	push	{r7, lr}
 c003d46:	b086      	sub	sp, #24
 c003d48:	af00      	add	r7, sp, #0
 c003d4a:	6078      	str	r0, [r7, #4]
 c003d4c:	460b      	mov	r3, r1
 c003d4e:	70fb      	strb	r3, [r7, #3]
    uECC_word_t i;
    uECC_word_t digit;

    wordcount_t num_digits = vli_numDigits(vli, max_words);
 c003d50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003d54:	4619      	mov	r1, r3
 c003d56:	6878      	ldr	r0, [r7, #4]
 c003d58:	f7ff ffcf 	bl	c003cfa <vli_numDigits>
 c003d5c:	4603      	mov	r3, r0
 c003d5e:	73fb      	strb	r3, [r7, #15]
    if (num_digits == 0) {
 c003d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c003d64:	2b00      	cmp	r3, #0
 c003d66:	d101      	bne.n	c003d6c <uECC_vli_numBits+0x28>
        return 0;
 c003d68:	2300      	movs	r3, #0
 c003d6a:	e021      	b.n	c003db0 <uECC_vli_numBits+0x6c>
    }

    digit = vli[num_digits - 1];
 c003d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c003d70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c003d74:	3b01      	subs	r3, #1
 c003d76:	009b      	lsls	r3, r3, #2
 c003d78:	687a      	ldr	r2, [r7, #4]
 c003d7a:	4413      	add	r3, r2
 c003d7c:	681b      	ldr	r3, [r3, #0]
 c003d7e:	613b      	str	r3, [r7, #16]
    for (i = 0; digit; ++i) {
 c003d80:	2300      	movs	r3, #0
 c003d82:	617b      	str	r3, [r7, #20]
 c003d84:	e005      	b.n	c003d92 <uECC_vli_numBits+0x4e>
        digit >>= 1;
 c003d86:	693b      	ldr	r3, [r7, #16]
 c003d88:	085b      	lsrs	r3, r3, #1
 c003d8a:	613b      	str	r3, [r7, #16]
    for (i = 0; digit; ++i) {
 c003d8c:	697b      	ldr	r3, [r7, #20]
 c003d8e:	3301      	adds	r3, #1
 c003d90:	617b      	str	r3, [r7, #20]
 c003d92:	693b      	ldr	r3, [r7, #16]
 c003d94:	2b00      	cmp	r3, #0
 c003d96:	d1f6      	bne.n	c003d86 <uECC_vli_numBits+0x42>
    }

    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
 c003d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c003d9c:	b29b      	uxth	r3, r3
 c003d9e:	3b01      	subs	r3, #1
 c003da0:	b29b      	uxth	r3, r3
 c003da2:	015b      	lsls	r3, r3, #5
 c003da4:	b29a      	uxth	r2, r3
 c003da6:	697b      	ldr	r3, [r7, #20]
 c003da8:	b29b      	uxth	r3, r3
 c003daa:	4413      	add	r3, r2
 c003dac:	b29b      	uxth	r3, r3
 c003dae:	b21b      	sxth	r3, r3
}
 c003db0:	4618      	mov	r0, r3
 c003db2:	3718      	adds	r7, #24
 c003db4:	46bd      	mov	sp, r7
 c003db6:	bd80      	pop	{r7, pc}

0c003db8 <uECC_vli_set>:

/* Sets dest = src. */
#if !asm_set
uECC_VLI_API void uECC_vli_set(uECC_word_t *dest, const uECC_word_t *src, wordcount_t num_words) {
 c003db8:	b480      	push	{r7}
 c003dba:	b087      	sub	sp, #28
 c003dbc:	af00      	add	r7, sp, #0
 c003dbe:	60f8      	str	r0, [r7, #12]
 c003dc0:	60b9      	str	r1, [r7, #8]
 c003dc2:	4613      	mov	r3, r2
 c003dc4:	71fb      	strb	r3, [r7, #7]
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
 c003dc6:	2300      	movs	r3, #0
 c003dc8:	75fb      	strb	r3, [r7, #23]
 c003dca:	e00f      	b.n	c003dec <uECC_vli_set+0x34>
        dest[i] = src[i];
 c003dcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c003dd0:	009b      	lsls	r3, r3, #2
 c003dd2:	68ba      	ldr	r2, [r7, #8]
 c003dd4:	441a      	add	r2, r3
 c003dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c003dda:	009b      	lsls	r3, r3, #2
 c003ddc:	68f9      	ldr	r1, [r7, #12]
 c003dde:	440b      	add	r3, r1
 c003de0:	6812      	ldr	r2, [r2, #0]
 c003de2:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 c003de4:	7dfb      	ldrb	r3, [r7, #23]
 c003de6:	3301      	adds	r3, #1
 c003de8:	b2db      	uxtb	r3, r3
 c003dea:	75fb      	strb	r3, [r7, #23]
 c003dec:	f997 2017 	ldrsb.w	r2, [r7, #23]
 c003df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c003df4:	429a      	cmp	r2, r3
 c003df6:	dbe9      	blt.n	c003dcc <uECC_vli_set+0x14>
    }
}
 c003df8:	bf00      	nop
 c003dfa:	bf00      	nop
 c003dfc:	371c      	adds	r7, #28
 c003dfe:	46bd      	mov	sp, r7
 c003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003e04:	4770      	bx	lr

0c003e06 <uECC_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t uECC_vli_cmp_unsafe(const uECC_word_t *left,
                                       const uECC_word_t *right,
                                       wordcount_t num_words) {
 c003e06:	b480      	push	{r7}
 c003e08:	b087      	sub	sp, #28
 c003e0a:	af00      	add	r7, sp, #0
 c003e0c:	60f8      	str	r0, [r7, #12]
 c003e0e:	60b9      	str	r1, [r7, #8]
 c003e10:	4613      	mov	r3, r2
 c003e12:	71fb      	strb	r3, [r7, #7]
    wordcount_t i;
    for (i = num_words - 1; i >= 0; --i) {
 c003e14:	79fb      	ldrb	r3, [r7, #7]
 c003e16:	3b01      	subs	r3, #1
 c003e18:	b2db      	uxtb	r3, r3
 c003e1a:	75fb      	strb	r3, [r7, #23]
 c003e1c:	e024      	b.n	c003e68 <uECC_vli_cmp_unsafe+0x62>
        if (left[i] > right[i]) {
 c003e1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c003e22:	009b      	lsls	r3, r3, #2
 c003e24:	68fa      	ldr	r2, [r7, #12]
 c003e26:	4413      	add	r3, r2
 c003e28:	681a      	ldr	r2, [r3, #0]
 c003e2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c003e2e:	009b      	lsls	r3, r3, #2
 c003e30:	68b9      	ldr	r1, [r7, #8]
 c003e32:	440b      	add	r3, r1
 c003e34:	681b      	ldr	r3, [r3, #0]
 c003e36:	429a      	cmp	r2, r3
 c003e38:	d901      	bls.n	c003e3e <uECC_vli_cmp_unsafe+0x38>
            return 1;
 c003e3a:	2301      	movs	r3, #1
 c003e3c:	e019      	b.n	c003e72 <uECC_vli_cmp_unsafe+0x6c>
        } else if (left[i] < right[i]) {
 c003e3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c003e42:	009b      	lsls	r3, r3, #2
 c003e44:	68fa      	ldr	r2, [r7, #12]
 c003e46:	4413      	add	r3, r2
 c003e48:	681a      	ldr	r2, [r3, #0]
 c003e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c003e4e:	009b      	lsls	r3, r3, #2
 c003e50:	68b9      	ldr	r1, [r7, #8]
 c003e52:	440b      	add	r3, r1
 c003e54:	681b      	ldr	r3, [r3, #0]
 c003e56:	429a      	cmp	r2, r3
 c003e58:	d202      	bcs.n	c003e60 <uECC_vli_cmp_unsafe+0x5a>
            return -1;
 c003e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c003e5e:	e008      	b.n	c003e72 <uECC_vli_cmp_unsafe+0x6c>
    for (i = num_words - 1; i >= 0; --i) {
 c003e60:	7dfb      	ldrb	r3, [r7, #23]
 c003e62:	3b01      	subs	r3, #1
 c003e64:	b2db      	uxtb	r3, r3
 c003e66:	75fb      	strb	r3, [r7, #23]
 c003e68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c003e6c:	2b00      	cmp	r3, #0
 c003e6e:	dad6      	bge.n	c003e1e <uECC_vli_cmp_unsafe+0x18>
        }
    }
    return 0;
 c003e70:	2300      	movs	r3, #0
}
 c003e72:	4618      	mov	r0, r3
 c003e74:	371c      	adds	r7, #28
 c003e76:	46bd      	mov	sp, r7
 c003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003e7c:	4770      	bx	lr

0c003e7e <uECC_vli_equal>:

/* Constant-time comparison function - secure way to compare long integers */
/* Returns one if left == right, zero otherwise. */
uECC_VLI_API uECC_word_t uECC_vli_equal(const uECC_word_t *left,
                                        const uECC_word_t *right,
                                        wordcount_t num_words) {
 c003e7e:	b480      	push	{r7}
 c003e80:	b087      	sub	sp, #28
 c003e82:	af00      	add	r7, sp, #0
 c003e84:	60f8      	str	r0, [r7, #12]
 c003e86:	60b9      	str	r1, [r7, #8]
 c003e88:	4613      	mov	r3, r2
 c003e8a:	71fb      	strb	r3, [r7, #7]
    uECC_word_t diff = 0;
 c003e8c:	2300      	movs	r3, #0
 c003e8e:	617b      	str	r3, [r7, #20]
    wordcount_t i;
    for (i = num_words - 1; i >= 0; --i) {
 c003e90:	79fb      	ldrb	r3, [r7, #7]
 c003e92:	3b01      	subs	r3, #1
 c003e94:	b2db      	uxtb	r3, r3
 c003e96:	74fb      	strb	r3, [r7, #19]
 c003e98:	e013      	b.n	c003ec2 <uECC_vli_equal+0x44>
        diff |= (left[i] ^ right[i]);
 c003e9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 c003e9e:	009b      	lsls	r3, r3, #2
 c003ea0:	68fa      	ldr	r2, [r7, #12]
 c003ea2:	4413      	add	r3, r2
 c003ea4:	681a      	ldr	r2, [r3, #0]
 c003ea6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 c003eaa:	009b      	lsls	r3, r3, #2
 c003eac:	68b9      	ldr	r1, [r7, #8]
 c003eae:	440b      	add	r3, r1
 c003eb0:	681b      	ldr	r3, [r3, #0]
 c003eb2:	4053      	eors	r3, r2
 c003eb4:	697a      	ldr	r2, [r7, #20]
 c003eb6:	4313      	orrs	r3, r2
 c003eb8:	617b      	str	r3, [r7, #20]
    for (i = num_words - 1; i >= 0; --i) {
 c003eba:	7cfb      	ldrb	r3, [r7, #19]
 c003ebc:	3b01      	subs	r3, #1
 c003ebe:	b2db      	uxtb	r3, r3
 c003ec0:	74fb      	strb	r3, [r7, #19]
 c003ec2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 c003ec6:	2b00      	cmp	r3, #0
 c003ec8:	dae7      	bge.n	c003e9a <uECC_vli_equal+0x1c>
    }
    return (diff == 0);
 c003eca:	697b      	ldr	r3, [r7, #20]
 c003ecc:	2b00      	cmp	r3, #0
 c003ece:	bf0c      	ite	eq
 c003ed0:	2301      	moveq	r3, #1
 c003ed2:	2300      	movne	r3, #0
 c003ed4:	b2db      	uxtb	r3, r3
}
 c003ed6:	4618      	mov	r0, r3
 c003ed8:	371c      	adds	r7, #28
 c003eda:	46bd      	mov	sp, r7
 c003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003ee0:	4770      	bx	lr

0c003ee2 <uECC_vli_rshift1>:
    return (!equal - 2 * neg);
}

/* Computes vli = vli >> 1. */
#if !asm_rshift1
uECC_VLI_API void uECC_vli_rshift1(uECC_word_t *vli, wordcount_t num_words) {
 c003ee2:	b480      	push	{r7}
 c003ee4:	b087      	sub	sp, #28
 c003ee6:	af00      	add	r7, sp, #0
 c003ee8:	6078      	str	r0, [r7, #4]
 c003eea:	460b      	mov	r3, r1
 c003eec:	70fb      	strb	r3, [r7, #3]
    uECC_word_t *end = vli;
 c003eee:	687b      	ldr	r3, [r7, #4]
 c003ef0:	613b      	str	r3, [r7, #16]
    uECC_word_t carry = 0;
 c003ef2:	2300      	movs	r3, #0
 c003ef4:	617b      	str	r3, [r7, #20]

    vli += num_words;
 c003ef6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003efa:	009b      	lsls	r3, r3, #2
 c003efc:	687a      	ldr	r2, [r7, #4]
 c003efe:	4413      	add	r3, r2
 c003f00:	607b      	str	r3, [r7, #4]
    while (vli-- > end) {
 c003f02:	e00b      	b.n	c003f1c <uECC_vli_rshift1+0x3a>
        uECC_word_t temp = *vli;
 c003f04:	687b      	ldr	r3, [r7, #4]
 c003f06:	681b      	ldr	r3, [r3, #0]
 c003f08:	60fb      	str	r3, [r7, #12]
        *vli = (temp >> 1) | carry;
 c003f0a:	68fb      	ldr	r3, [r7, #12]
 c003f0c:	085a      	lsrs	r2, r3, #1
 c003f0e:	697b      	ldr	r3, [r7, #20]
 c003f10:	431a      	orrs	r2, r3
 c003f12:	687b      	ldr	r3, [r7, #4]
 c003f14:	601a      	str	r2, [r3, #0]
        carry = temp << (uECC_WORD_BITS - 1);
 c003f16:	68fb      	ldr	r3, [r7, #12]
 c003f18:	07db      	lsls	r3, r3, #31
 c003f1a:	617b      	str	r3, [r7, #20]
    while (vli-- > end) {
 c003f1c:	687b      	ldr	r3, [r7, #4]
 c003f1e:	1f1a      	subs	r2, r3, #4
 c003f20:	607a      	str	r2, [r7, #4]
 c003f22:	693a      	ldr	r2, [r7, #16]
 c003f24:	429a      	cmp	r2, r3
 c003f26:	d3ed      	bcc.n	c003f04 <uECC_vli_rshift1+0x22>
    }
}
 c003f28:	bf00      	nop
 c003f2a:	bf00      	nop
 c003f2c:	371c      	adds	r7, #28
 c003f2e:	46bd      	mov	sp, r7
 c003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003f34:	4770      	bx	lr

0c003f36 <uECC_vli_modAdd>:
   Assumes that left < mod and right < mod, and that result does not overlap mod. */
uECC_VLI_API void uECC_vli_modAdd(uECC_word_t *result,
                                  const uECC_word_t *left,
                                  const uECC_word_t *right,
                                  const uECC_word_t *mod,
                                  wordcount_t num_words) {
 c003f36:	b580      	push	{r7, lr}
 c003f38:	b086      	sub	sp, #24
 c003f3a:	af00      	add	r7, sp, #0
 c003f3c:	60f8      	str	r0, [r7, #12]
 c003f3e:	60b9      	str	r1, [r7, #8]
 c003f40:	607a      	str	r2, [r7, #4]
 c003f42:	603b      	str	r3, [r7, #0]
    uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
 c003f44:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c003f48:	687a      	ldr	r2, [r7, #4]
 c003f4a:	68b9      	ldr	r1, [r7, #8]
 c003f4c:	68f8      	ldr	r0, [r7, #12]
 c003f4e:	f7ff fd87 	bl	c003a60 <uECC_vli_add>
 c003f52:	6178      	str	r0, [r7, #20]
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
 c003f54:	697b      	ldr	r3, [r7, #20]
 c003f56:	2b00      	cmp	r3, #0
 c003f58:	d109      	bne.n	c003f6e <uECC_vli_modAdd+0x38>
 c003f5a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c003f5e:	461a      	mov	r2, r3
 c003f60:	68f9      	ldr	r1, [r7, #12]
 c003f62:	6838      	ldr	r0, [r7, #0]
 c003f64:	f7ff ff4f 	bl	c003e06 <uECC_vli_cmp_unsafe>
 c003f68:	4603      	mov	r3, r0
 c003f6a:	2b01      	cmp	r3, #1
 c003f6c:	d006      	beq.n	c003f7c <uECC_vli_modAdd+0x46>
        /* result > mod (result = mod + remainder), so subtract mod to get remainder. */
        uECC_vli_sub(result, result, mod, num_words);
 c003f6e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c003f72:	683a      	ldr	r2, [r7, #0]
 c003f74:	68f9      	ldr	r1, [r7, #12]
 c003f76:	68f8      	ldr	r0, [r7, #12]
 c003f78:	f7ff fdba 	bl	c003af0 <uECC_vli_sub>
    }
}
 c003f7c:	bf00      	nop
 c003f7e:	3718      	adds	r7, #24
 c003f80:	46bd      	mov	sp, r7
 c003f82:	bd80      	pop	{r7, pc}

0c003f84 <uECC_vli_modSub>:
   Assumes that left < mod and right < mod, and that result does not overlap mod. */
uECC_VLI_API void uECC_vli_modSub(uECC_word_t *result,
                                  const uECC_word_t *left,
                                  const uECC_word_t *right,
                                  const uECC_word_t *mod,
                                  wordcount_t num_words) {
 c003f84:	b580      	push	{r7, lr}
 c003f86:	b086      	sub	sp, #24
 c003f88:	af00      	add	r7, sp, #0
 c003f8a:	60f8      	str	r0, [r7, #12]
 c003f8c:	60b9      	str	r1, [r7, #8]
 c003f8e:	607a      	str	r2, [r7, #4]
 c003f90:	603b      	str	r3, [r7, #0]
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
 c003f92:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c003f96:	687a      	ldr	r2, [r7, #4]
 c003f98:	68b9      	ldr	r1, [r7, #8]
 c003f9a:	68f8      	ldr	r0, [r7, #12]
 c003f9c:	f7ff fda8 	bl	c003af0 <uECC_vli_sub>
 c003fa0:	6178      	str	r0, [r7, #20]
    if (l_borrow) {
 c003fa2:	697b      	ldr	r3, [r7, #20]
 c003fa4:	2b00      	cmp	r3, #0
 c003fa6:	d006      	beq.n	c003fb6 <uECC_vli_modSub+0x32>
        /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
           we can get the correct result from result + mod (with overflow). */
        uECC_vli_add(result, result, mod, num_words);
 c003fa8:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c003fac:	683a      	ldr	r2, [r7, #0]
 c003fae:	68f9      	ldr	r1, [r7, #12]
 c003fb0:	68f8      	ldr	r0, [r7, #12]
 c003fb2:	f7ff fd55 	bl	c003a60 <uECC_vli_add>
    }
}
 c003fb6:	bf00      	nop
 c003fb8:	3718      	adds	r7, #24
 c003fba:	46bd      	mov	sp, r7
 c003fbc:	bd80      	pop	{r7, pc}

0c003fbe <uECC_vli_mmod>:
/* Computes result = product % mod, where product is 2N words long. */
/* Currently only designed to work for curve_p or curve_n. */
uECC_VLI_API void uECC_vli_mmod(uECC_word_t *result,
                                uECC_word_t *product,
                                const uECC_word_t *mod,
                                wordcount_t num_words) {
 c003fbe:	b590      	push	{r4, r7, lr}
 c003fc0:	b0ad      	sub	sp, #180	; 0xb4
 c003fc2:	af00      	add	r7, sp, #0
 c003fc4:	60f8      	str	r0, [r7, #12]
 c003fc6:	60b9      	str	r1, [r7, #8]
 c003fc8:	607a      	str	r2, [r7, #4]
 c003fca:	70fb      	strb	r3, [r7, #3]
    uECC_word_t mod_multiple[2 * uECC_MAX_WORDS];
    uECC_word_t tmp[2 * uECC_MAX_WORDS];
    uECC_word_t *v[2] = {tmp, product};
 c003fcc:	f107 0318 	add.w	r3, r7, #24
 c003fd0:	613b      	str	r3, [r7, #16]
 c003fd2:	68bb      	ldr	r3, [r7, #8]
 c003fd4:	617b      	str	r3, [r7, #20]
    uECC_word_t index;

    /* Shift mod so its highest set bit is at the maximum position. */
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
 c003fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003fda:	b29b      	uxth	r3, r3
 c003fdc:	019b      	lsls	r3, r3, #6
 c003fde:	b29c      	uxth	r4, r3
 c003fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003fe4:	4619      	mov	r1, r3
 c003fe6:	6878      	ldr	r0, [r7, #4]
 c003fe8:	f7ff feac 	bl	c003d44 <uECC_vli_numBits>
 c003fec:	4603      	mov	r3, r0
 c003fee:	b29b      	uxth	r3, r3
 c003ff0:	1ae3      	subs	r3, r4, r3
 c003ff2:	b29b      	uxth	r3, r3
 c003ff4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
    wordcount_t word_shift = shift / uECC_WORD_BITS;
 c003ff8:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 c003ffc:	2b00      	cmp	r3, #0
 c003ffe:	da00      	bge.n	c004002 <uECC_vli_mmod+0x44>
 c004000:	331f      	adds	r3, #31
 c004002:	115b      	asrs	r3, r3, #5
 c004004:	b21b      	sxth	r3, r3
 c004006:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
    wordcount_t bit_shift = shift % uECC_WORD_BITS;
 c00400a:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 c00400e:	425a      	negs	r2, r3
 c004010:	f003 031f 	and.w	r3, r3, #31
 c004014:	f002 021f 	and.w	r2, r2, #31
 c004018:	bf58      	it	pl
 c00401a:	4253      	negpl	r3, r2
 c00401c:	b21b      	sxth	r3, r3
 c00401e:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
    uECC_word_t carry = 0;
 c004022:	2300      	movs	r3, #0
 c004024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    uECC_vli_clear(mod_multiple, word_shift);
 c004028:	f997 209e 	ldrsb.w	r2, [r7, #158]	; 0x9e
 c00402c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 c004030:	4611      	mov	r1, r2
 c004032:	4618      	mov	r0, r3
 c004034:	f7ff fdfb 	bl	c003c2e <uECC_vli_clear>
    if (bit_shift > 0) {
 c004038:	f997 309d 	ldrsb.w	r3, [r7, #157]	; 0x9d
 c00403c:	2b00      	cmp	r3, #0
 c00403e:	dd34      	ble.n	c0040aa <uECC_vli_mmod+0xec>
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
 c004040:	2300      	movs	r3, #0
 c004042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c004046:	e029      	b.n	c00409c <uECC_vli_mmod+0xde>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
 c004048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c00404c:	009b      	lsls	r3, r3, #2
 c00404e:	687a      	ldr	r2, [r7, #4]
 c004050:	4413      	add	r3, r2
 c004052:	681a      	ldr	r2, [r3, #0]
 c004054:	f997 309d 	ldrsb.w	r3, [r7, #157]	; 0x9d
 c004058:	fa02 f103 	lsl.w	r1, r2, r3
 c00405c:	f997 209e 	ldrsb.w	r2, [r7, #158]	; 0x9e
 c004060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c004064:	4413      	add	r3, r2
 c004066:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 c00406a:	430a      	orrs	r2, r1
 c00406c:	009b      	lsls	r3, r3, #2
 c00406e:	33b0      	adds	r3, #176	; 0xb0
 c004070:	443b      	add	r3, r7
 c004072:	f843 2c58 	str.w	r2, [r3, #-88]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
 c004076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c00407a:	009b      	lsls	r3, r3, #2
 c00407c:	687a      	ldr	r2, [r7, #4]
 c00407e:	4413      	add	r3, r2
 c004080:	681a      	ldr	r2, [r3, #0]
 c004082:	f997 309d 	ldrsb.w	r3, [r7, #157]	; 0x9d
 c004086:	f1c3 0320 	rsb	r3, r3, #32
 c00408a:	fa22 f303 	lsr.w	r3, r2, r3
 c00408e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
 c004092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c004096:	3301      	adds	r3, #1
 c004098:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c00409c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0040a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 c0040a4:	429a      	cmp	r2, r3
 c0040a6:	d3cf      	bcc.n	c004048 <uECC_vli_mmod+0x8a>
 c0040a8:	e00b      	b.n	c0040c2 <uECC_vli_mmod+0x104>
        }
    } else {
        uECC_vli_set(mod_multiple + word_shift, mod, num_words);
 c0040aa:	f997 309e 	ldrsb.w	r3, [r7, #158]	; 0x9e
 c0040ae:	009b      	lsls	r3, r3, #2
 c0040b0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 c0040b4:	4413      	add	r3, r2
 c0040b6:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0040ba:	6879      	ldr	r1, [r7, #4]
 c0040bc:	4618      	mov	r0, r3
 c0040be:	f7ff fe7b 	bl	c003db8 <uECC_vli_set>
    }

    for (index = 1; shift >= 0; --shift) {
 c0040c2:	2301      	movs	r3, #1
 c0040c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c0040c8:	e09f      	b.n	c00420a <uECC_vli_mmod+0x24c>
        uECC_word_t borrow = 0;
 c0040ca:	2300      	movs	r3, #0
 c0040cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        wordcount_t i;
        for (i = 0; i < num_words * 2; ++i) {
 c0040d0:	2300      	movs	r3, #0
 c0040d2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 c0040d6:	e053      	b.n	c004180 <uECC_vli_mmod+0x1c2>
            uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 c0040d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c0040dc:	009b      	lsls	r3, r3, #2
 c0040de:	33b0      	adds	r3, #176	; 0xb0
 c0040e0:	443b      	add	r3, r7
 c0040e2:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 c0040e6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 c0040ea:	009b      	lsls	r3, r3, #2
 c0040ec:	4413      	add	r3, r2
 c0040ee:	681a      	ldr	r2, [r3, #0]
 c0040f0:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 c0040f4:	009b      	lsls	r3, r3, #2
 c0040f6:	33b0      	adds	r3, #176	; 0xb0
 c0040f8:	443b      	add	r3, r7
 c0040fa:	f853 3c58 	ldr.w	r3, [r3, #-88]
 c0040fe:	1ad2      	subs	r2, r2, r3
 c004100:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 c004104:	1ad3      	subs	r3, r2, r3
 c004106:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            if (diff != v[index][i]) {
 c00410a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c00410e:	009b      	lsls	r3, r3, #2
 c004110:	33b0      	adds	r3, #176	; 0xb0
 c004112:	443b      	add	r3, r7
 c004114:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 c004118:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 c00411c:	009b      	lsls	r3, r3, #2
 c00411e:	4413      	add	r3, r2
 c004120:	681b      	ldr	r3, [r3, #0]
 c004122:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 c004126:	429a      	cmp	r2, r3
 c004128:	d014      	beq.n	c004154 <uECC_vli_mmod+0x196>
                borrow = (diff > v[index][i]);
 c00412a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c00412e:	009b      	lsls	r3, r3, #2
 c004130:	33b0      	adds	r3, #176	; 0xb0
 c004132:	443b      	add	r3, r7
 c004134:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 c004138:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 c00413c:	009b      	lsls	r3, r3, #2
 c00413e:	4413      	add	r3, r2
 c004140:	681b      	ldr	r3, [r3, #0]
 c004142:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 c004146:	429a      	cmp	r2, r3
 c004148:	bf8c      	ite	hi
 c00414a:	2301      	movhi	r3, #1
 c00414c:	2300      	movls	r3, #0
 c00414e:	b2db      	uxtb	r3, r3
 c004150:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            }
            v[1 - index][i] = diff;
 c004154:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c004158:	f1c3 0301 	rsb	r3, r3, #1
 c00415c:	009b      	lsls	r3, r3, #2
 c00415e:	33b0      	adds	r3, #176	; 0xb0
 c004160:	443b      	add	r3, r7
 c004162:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 c004166:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 c00416a:	009b      	lsls	r3, r3, #2
 c00416c:	4413      	add	r3, r2
 c00416e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 c004172:	601a      	str	r2, [r3, #0]
        for (i = 0; i < num_words * 2; ++i) {
 c004174:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 c004178:	3301      	adds	r3, #1
 c00417a:	b2db      	uxtb	r3, r3
 c00417c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 c004180:	f997 209f 	ldrsb.w	r2, [r7, #159]	; 0x9f
 c004184:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c004188:	005b      	lsls	r3, r3, #1
 c00418a:	429a      	cmp	r2, r3
 c00418c:	dba4      	blt.n	c0040d8 <uECC_vli_mmod+0x11a>
        }
        index = !(index ^ borrow); /* Swap the index if there was no borrow */
 c00418e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 c004192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 c004196:	429a      	cmp	r2, r3
 c004198:	bf0c      	ite	eq
 c00419a:	2301      	moveq	r3, #1
 c00419c:	2300      	movne	r3, #0
 c00419e:	b2db      	uxtb	r3, r3
 c0041a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        uECC_vli_rshift1(mod_multiple, num_words);
 c0041a4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0041a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 c0041ac:	4611      	mov	r1, r2
 c0041ae:	4618      	mov	r0, r3
 c0041b0:	f7ff fe97 	bl	c003ee2 <uECC_vli_rshift1>
        mod_multiple[num_words - 1] |= mod_multiple[num_words] << (uECC_WORD_BITS - 1);
 c0041b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0041b8:	3b01      	subs	r3, #1
 c0041ba:	009b      	lsls	r3, r3, #2
 c0041bc:	33b0      	adds	r3, #176	; 0xb0
 c0041be:	443b      	add	r3, r7
 c0041c0:	f853 1c58 	ldr.w	r1, [r3, #-88]
 c0041c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0041c8:	009b      	lsls	r3, r3, #2
 c0041ca:	33b0      	adds	r3, #176	; 0xb0
 c0041cc:	443b      	add	r3, r7
 c0041ce:	f853 3c58 	ldr.w	r3, [r3, #-88]
 c0041d2:	07da      	lsls	r2, r3, #31
 c0041d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0041d8:	3b01      	subs	r3, #1
 c0041da:	430a      	orrs	r2, r1
 c0041dc:	009b      	lsls	r3, r3, #2
 c0041de:	33b0      	adds	r3, #176	; 0xb0
 c0041e0:	443b      	add	r3, r7
 c0041e2:	f843 2c58 	str.w	r2, [r3, #-88]
        uECC_vli_rshift1(mod_multiple + num_words, num_words);
 c0041e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0041ea:	009b      	lsls	r3, r3, #2
 c0041ec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 c0041f0:	4413      	add	r3, r2
 c0041f2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0041f6:	4611      	mov	r1, r2
 c0041f8:	4618      	mov	r0, r3
 c0041fa:	f7ff fe72 	bl	c003ee2 <uECC_vli_rshift1>
    for (index = 1; shift >= 0; --shift) {
 c0041fe:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 c004202:	3b01      	subs	r3, #1
 c004204:	b29b      	uxth	r3, r3
 c004206:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 c00420a:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 c00420e:	2b00      	cmp	r3, #0
 c004210:	f6bf af5b 	bge.w	c0040ca <uECC_vli_mmod+0x10c>
    }
    uECC_vli_set(result, v[index], num_words);
 c004214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c004218:	009b      	lsls	r3, r3, #2
 c00421a:	33b0      	adds	r3, #176	; 0xb0
 c00421c:	443b      	add	r3, r7
 c00421e:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 c004222:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c004226:	4619      	mov	r1, r3
 c004228:	68f8      	ldr	r0, [r7, #12]
 c00422a:	f7ff fdc5 	bl	c003db8 <uECC_vli_set>
}
 c00422e:	bf00      	nop
 c004230:	37b4      	adds	r7, #180	; 0xb4
 c004232:	46bd      	mov	sp, r7
 c004234:	bd90      	pop	{r4, r7, pc}

0c004236 <uECC_vli_modMult>:
/* Computes result = (left * right) % mod. */
uECC_VLI_API void uECC_vli_modMult(uECC_word_t *result,
                                   const uECC_word_t *left,
                                   const uECC_word_t *right,
                                   const uECC_word_t *mod,
                                   wordcount_t num_words) {
 c004236:	b580      	push	{r7, lr}
 c004238:	b094      	sub	sp, #80	; 0x50
 c00423a:	af00      	add	r7, sp, #0
 c00423c:	60f8      	str	r0, [r7, #12]
 c00423e:	60b9      	str	r1, [r7, #8]
 c004240:	607a      	str	r2, [r7, #4]
 c004242:	603b      	str	r3, [r7, #0]
    uECC_word_t product[2 * uECC_MAX_WORDS];
    uECC_vli_mult(product, left, right, num_words);
 c004244:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 c004248:	f107 0010 	add.w	r0, r7, #16
 c00424c:	687a      	ldr	r2, [r7, #4]
 c00424e:	68b9      	ldr	r1, [r7, #8]
 c004250:	f7ff fc9c 	bl	c003b8c <uECC_vli_mult>
    uECC_vli_mmod(result, product, mod, num_words);
 c004254:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 c004258:	f107 0110 	add.w	r1, r7, #16
 c00425c:	683a      	ldr	r2, [r7, #0]
 c00425e:	68f8      	ldr	r0, [r7, #12]
 c004260:	f7ff fead 	bl	c003fbe <uECC_vli_mmod>
}
 c004264:	bf00      	nop
 c004266:	3750      	adds	r7, #80	; 0x50
 c004268:	46bd      	mov	sp, r7
 c00426a:	bd80      	pop	{r7, pc}

0c00426c <uECC_vli_modMult_fast>:

uECC_VLI_API void uECC_vli_modMult_fast(uECC_word_t *result,
                                        const uECC_word_t *left,
                                        const uECC_word_t *right,
                                        uECC_Curve curve) {
 c00426c:	b580      	push	{r7, lr}
 c00426e:	b094      	sub	sp, #80	; 0x50
 c004270:	af00      	add	r7, sp, #0
 c004272:	60f8      	str	r0, [r7, #12]
 c004274:	60b9      	str	r1, [r7, #8]
 c004276:	607a      	str	r2, [r7, #4]
 c004278:	603b      	str	r3, [r7, #0]
    uECC_word_t product[2 * uECC_MAX_WORDS];
    uECC_vli_mult(product, left, right, curve->num_words);
 c00427a:	683b      	ldr	r3, [r7, #0]
 c00427c:	f993 3000 	ldrsb.w	r3, [r3]
 c004280:	f107 0010 	add.w	r0, r7, #16
 c004284:	687a      	ldr	r2, [r7, #4]
 c004286:	68b9      	ldr	r1, [r7, #8]
 c004288:	f7ff fc80 	bl	c003b8c <uECC_vli_mult>
#if (uECC_OPTIMIZATION_LEVEL > 0)
    curve->mmod_fast(result, product);
 c00428c:	683b      	ldr	r3, [r7, #0]
 c00428e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 c004292:	f107 0210 	add.w	r2, r7, #16
 c004296:	4611      	mov	r1, r2
 c004298:	68f8      	ldr	r0, [r7, #12]
 c00429a:	4798      	blx	r3
#else
    uECC_vli_mmod(result, product, curve->p, curve->num_words);
#endif
}
 c00429c:	bf00      	nop
 c00429e:	3750      	adds	r7, #80	; 0x50
 c0042a0:	46bd      	mov	sp, r7
 c0042a2:	bd80      	pop	{r7, pc}

0c0042a4 <uECC_vli_modSquare_fast>:
}
#endif /* uECC_ENABLE_VLI_API */

uECC_VLI_API void uECC_vli_modSquare_fast(uECC_word_t *result,
                                          const uECC_word_t *left,
                                          uECC_Curve curve) {
 c0042a4:	b580      	push	{r7, lr}
 c0042a6:	b084      	sub	sp, #16
 c0042a8:	af00      	add	r7, sp, #0
 c0042aa:	60f8      	str	r0, [r7, #12]
 c0042ac:	60b9      	str	r1, [r7, #8]
 c0042ae:	607a      	str	r2, [r7, #4]
    uECC_vli_modMult_fast(result, left, left, curve);
 c0042b0:	687b      	ldr	r3, [r7, #4]
 c0042b2:	68ba      	ldr	r2, [r7, #8]
 c0042b4:	68b9      	ldr	r1, [r7, #8]
 c0042b6:	68f8      	ldr	r0, [r7, #12]
 c0042b8:	f7ff ffd8 	bl	c00426c <uECC_vli_modMult_fast>
}
 c0042bc:	bf00      	nop
 c0042be:	3710      	adds	r7, #16
 c0042c0:	46bd      	mov	sp, r7
 c0042c2:	bd80      	pop	{r7, pc}

0c0042c4 <vli_modInv_update>:
#endif /* uECC_SQUARE_FUNC */

#define EVEN(vli) (!(vli[0] & 1))
static void vli_modInv_update(uECC_word_t *uv,
                              const uECC_word_t *mod,
                              wordcount_t num_words) {
 c0042c4:	b580      	push	{r7, lr}
 c0042c6:	b086      	sub	sp, #24
 c0042c8:	af00      	add	r7, sp, #0
 c0042ca:	60f8      	str	r0, [r7, #12]
 c0042cc:	60b9      	str	r1, [r7, #8]
 c0042ce:	4613      	mov	r3, r2
 c0042d0:	71fb      	strb	r3, [r7, #7]
    uECC_word_t carry = 0;
 c0042d2:	2300      	movs	r3, #0
 c0042d4:	617b      	str	r3, [r7, #20]
    if (!EVEN(uv)) {
 c0042d6:	68fb      	ldr	r3, [r7, #12]
 c0042d8:	681b      	ldr	r3, [r3, #0]
 c0042da:	f003 0301 	and.w	r3, r3, #1
 c0042de:	2b00      	cmp	r3, #0
 c0042e0:	d007      	beq.n	c0042f2 <vli_modInv_update+0x2e>
        carry = uECC_vli_add(uv, uv, mod, num_words);
 c0042e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0042e6:	68ba      	ldr	r2, [r7, #8]
 c0042e8:	68f9      	ldr	r1, [r7, #12]
 c0042ea:	68f8      	ldr	r0, [r7, #12]
 c0042ec:	f7ff fbb8 	bl	c003a60 <uECC_vli_add>
 c0042f0:	6178      	str	r0, [r7, #20]
    }
    uECC_vli_rshift1(uv, num_words);
 c0042f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0042f6:	4619      	mov	r1, r3
 c0042f8:	68f8      	ldr	r0, [r7, #12]
 c0042fa:	f7ff fdf2 	bl	c003ee2 <uECC_vli_rshift1>
    if (carry) {
 c0042fe:	697b      	ldr	r3, [r7, #20]
 c004300:	2b00      	cmp	r3, #0
 c004302:	d013      	beq.n	c00432c <vli_modInv_update+0x68>
        uv[num_words - 1] |= HIGH_BIT_SET;
 c004304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c004308:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c00430c:	3b01      	subs	r3, #1
 c00430e:	009b      	lsls	r3, r3, #2
 c004310:	68fa      	ldr	r2, [r7, #12]
 c004312:	4413      	add	r3, r2
 c004314:	681a      	ldr	r2, [r3, #0]
 c004316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00431a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c00431e:	3b01      	subs	r3, #1
 c004320:	009b      	lsls	r3, r3, #2
 c004322:	68f9      	ldr	r1, [r7, #12]
 c004324:	440b      	add	r3, r1
 c004326:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 c00432a:	601a      	str	r2, [r3, #0]
    }
}
 c00432c:	bf00      	nop
 c00432e:	3718      	adds	r7, #24
 c004330:	46bd      	mov	sp, r7
 c004332:	bd80      	pop	{r7, pc}

0c004334 <uECC_vli_modInv>:
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide" */
uECC_VLI_API void uECC_vli_modInv(uECC_word_t *result,
                                  const uECC_word_t *input,
                                  const uECC_word_t *mod,
                                  wordcount_t num_words) {
 c004334:	b580      	push	{r7, lr}
 c004336:	b0a6      	sub	sp, #152	; 0x98
 c004338:	af00      	add	r7, sp, #0
 c00433a:	60f8      	str	r0, [r7, #12]
 c00433c:	60b9      	str	r1, [r7, #8]
 c00433e:	607a      	str	r2, [r7, #4]
 c004340:	70fb      	strb	r3, [r7, #3]
    uECC_word_t a[uECC_MAX_WORDS], b[uECC_MAX_WORDS], u[uECC_MAX_WORDS], v[uECC_MAX_WORDS];
    cmpresult_t cmpResult;

    if (uECC_vli_isZero(input, num_words)) {
 c004342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c004346:	4619      	mov	r1, r3
 c004348:	68b8      	ldr	r0, [r7, #8]
 c00434a:	f7ff fc91 	bl	c003c70 <uECC_vli_isZero>
 c00434e:	4603      	mov	r3, r0
 c004350:	2b00      	cmp	r3, #0
 c004352:	d006      	beq.n	c004362 <uECC_vli_modInv+0x2e>
        uECC_vli_clear(result, num_words);
 c004354:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c004358:	4619      	mov	r1, r3
 c00435a:	68f8      	ldr	r0, [r7, #12]
 c00435c:	f7ff fc67 	bl	c003c2e <uECC_vli_clear>
 c004360:	e0de      	b.n	c004520 <uECC_vli_modInv+0x1ec>
        return;
    }

    uECC_vli_set(a, input, num_words);
 c004362:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c004366:	f107 0374 	add.w	r3, r7, #116	; 0x74
 c00436a:	68b9      	ldr	r1, [r7, #8]
 c00436c:	4618      	mov	r0, r3
 c00436e:	f7ff fd23 	bl	c003db8 <uECC_vli_set>
    uECC_vli_set(b, mod, num_words);
 c004372:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c004376:	f107 0354 	add.w	r3, r7, #84	; 0x54
 c00437a:	6879      	ldr	r1, [r7, #4]
 c00437c:	4618      	mov	r0, r3
 c00437e:	f7ff fd1b 	bl	c003db8 <uECC_vli_set>
    uECC_vli_clear(u, num_words);
 c004382:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c004386:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c00438a:	4611      	mov	r1, r2
 c00438c:	4618      	mov	r0, r3
 c00438e:	f7ff fc4e 	bl	c003c2e <uECC_vli_clear>
    u[0] = 1;
 c004392:	2301      	movs	r3, #1
 c004394:	637b      	str	r3, [r7, #52]	; 0x34
    uECC_vli_clear(v, num_words);
 c004396:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c00439a:	f107 0314 	add.w	r3, r7, #20
 c00439e:	4611      	mov	r1, r2
 c0043a0:	4618      	mov	r0, r3
 c0043a2:	f7ff fc44 	bl	c003c2e <uECC_vli_clear>
    while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 c0043a6:	e0a2      	b.n	c0044ee <uECC_vli_modInv+0x1ba>
        if (EVEN(a)) {
 c0043a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c0043aa:	f003 0301 	and.w	r3, r3, #1
 c0043ae:	2b00      	cmp	r3, #0
 c0043b0:	d110      	bne.n	c0043d4 <uECC_vli_modInv+0xa0>
            uECC_vli_rshift1(a, num_words);
 c0043b2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0043b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 c0043ba:	4611      	mov	r1, r2
 c0043bc:	4618      	mov	r0, r3
 c0043be:	f7ff fd90 	bl	c003ee2 <uECC_vli_rshift1>
            vli_modInv_update(u, mod, num_words);
 c0043c2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0043c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c0043ca:	6879      	ldr	r1, [r7, #4]
 c0043cc:	4618      	mov	r0, r3
 c0043ce:	f7ff ff79 	bl	c0042c4 <vli_modInv_update>
 c0043d2:	e08c      	b.n	c0044ee <uECC_vli_modInv+0x1ba>
        } else if (EVEN(b)) {
 c0043d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c0043d6:	f003 0301 	and.w	r3, r3, #1
 c0043da:	2b00      	cmp	r3, #0
 c0043dc:	d110      	bne.n	c004400 <uECC_vli_modInv+0xcc>
            uECC_vli_rshift1(b, num_words);
 c0043de:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0043e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 c0043e6:	4611      	mov	r1, r2
 c0043e8:	4618      	mov	r0, r3
 c0043ea:	f7ff fd7a 	bl	c003ee2 <uECC_vli_rshift1>
            vli_modInv_update(v, mod, num_words);
 c0043ee:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0043f2:	f107 0314 	add.w	r3, r7, #20
 c0043f6:	6879      	ldr	r1, [r7, #4]
 c0043f8:	4618      	mov	r0, r3
 c0043fa:	f7ff ff63 	bl	c0042c4 <vli_modInv_update>
 c0043fe:	e076      	b.n	c0044ee <uECC_vli_modInv+0x1ba>
        } else if (cmpResult > 0) {
 c004400:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 c004404:	2b00      	cmp	r3, #0
 c004406:	dd39      	ble.n	c00447c <uECC_vli_modInv+0x148>
            uECC_vli_sub(a, a, b, num_words);
 c004408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c00440c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 c004410:	f107 0174 	add.w	r1, r7, #116	; 0x74
 c004414:	f107 0074 	add.w	r0, r7, #116	; 0x74
 c004418:	f7ff fb6a 	bl	c003af0 <uECC_vli_sub>
            uECC_vli_rshift1(a, num_words);
 c00441c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c004420:	f107 0374 	add.w	r3, r7, #116	; 0x74
 c004424:	4611      	mov	r1, r2
 c004426:	4618      	mov	r0, r3
 c004428:	f7ff fd5b 	bl	c003ee2 <uECC_vli_rshift1>
            if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
 c00442c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c004430:	f107 0114 	add.w	r1, r7, #20
 c004434:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c004438:	4618      	mov	r0, r3
 c00443a:	f7ff fce4 	bl	c003e06 <uECC_vli_cmp_unsafe>
 c00443e:	4603      	mov	r3, r0
 c004440:	2b00      	cmp	r3, #0
 c004442:	da08      	bge.n	c004456 <uECC_vli_modInv+0x122>
                uECC_vli_add(u, u, mod, num_words);
 c004444:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c004448:	f107 0134 	add.w	r1, r7, #52	; 0x34
 c00444c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 c004450:	687a      	ldr	r2, [r7, #4]
 c004452:	f7ff fb05 	bl	c003a60 <uECC_vli_add>
            }
            uECC_vli_sub(u, u, v, num_words);
 c004456:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c00445a:	f107 0214 	add.w	r2, r7, #20
 c00445e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 c004462:	f107 0034 	add.w	r0, r7, #52	; 0x34
 c004466:	f7ff fb43 	bl	c003af0 <uECC_vli_sub>
            vli_modInv_update(u, mod, num_words);
 c00446a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c00446e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c004472:	6879      	ldr	r1, [r7, #4]
 c004474:	4618      	mov	r0, r3
 c004476:	f7ff ff25 	bl	c0042c4 <vli_modInv_update>
 c00447a:	e038      	b.n	c0044ee <uECC_vli_modInv+0x1ba>
        } else {
            uECC_vli_sub(b, b, a, num_words);
 c00447c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c004480:	f107 0274 	add.w	r2, r7, #116	; 0x74
 c004484:	f107 0154 	add.w	r1, r7, #84	; 0x54
 c004488:	f107 0054 	add.w	r0, r7, #84	; 0x54
 c00448c:	f7ff fb30 	bl	c003af0 <uECC_vli_sub>
            uECC_vli_rshift1(b, num_words);
 c004490:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c004494:	f107 0354 	add.w	r3, r7, #84	; 0x54
 c004498:	4611      	mov	r1, r2
 c00449a:	4618      	mov	r0, r3
 c00449c:	f7ff fd21 	bl	c003ee2 <uECC_vli_rshift1>
            if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
 c0044a0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0044a4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 c0044a8:	f107 0314 	add.w	r3, r7, #20
 c0044ac:	4618      	mov	r0, r3
 c0044ae:	f7ff fcaa 	bl	c003e06 <uECC_vli_cmp_unsafe>
 c0044b2:	4603      	mov	r3, r0
 c0044b4:	2b00      	cmp	r3, #0
 c0044b6:	da08      	bge.n	c0044ca <uECC_vli_modInv+0x196>
                uECC_vli_add(v, v, mod, num_words);
 c0044b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0044bc:	f107 0114 	add.w	r1, r7, #20
 c0044c0:	f107 0014 	add.w	r0, r7, #20
 c0044c4:	687a      	ldr	r2, [r7, #4]
 c0044c6:	f7ff facb 	bl	c003a60 <uECC_vli_add>
            }
            uECC_vli_sub(v, v, u, num_words);
 c0044ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0044ce:	f107 0234 	add.w	r2, r7, #52	; 0x34
 c0044d2:	f107 0114 	add.w	r1, r7, #20
 c0044d6:	f107 0014 	add.w	r0, r7, #20
 c0044da:	f7ff fb09 	bl	c003af0 <uECC_vli_sub>
            vli_modInv_update(v, mod, num_words);
 c0044de:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0044e2:	f107 0314 	add.w	r3, r7, #20
 c0044e6:	6879      	ldr	r1, [r7, #4]
 c0044e8:	4618      	mov	r0, r3
 c0044ea:	f7ff feeb 	bl	c0042c4 <vli_modInv_update>
    while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 c0044ee:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0044f2:	f107 0154 	add.w	r1, r7, #84	; 0x54
 c0044f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 c0044fa:	4618      	mov	r0, r3
 c0044fc:	f7ff fc83 	bl	c003e06 <uECC_vli_cmp_unsafe>
 c004500:	4603      	mov	r3, r0
 c004502:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 c004506:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 c00450a:	2b00      	cmp	r3, #0
 c00450c:	f47f af4c 	bne.w	c0043a8 <uECC_vli_modInv+0x74>
        }
    }
    uECC_vli_set(result, u, num_words);
 c004510:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c004514:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c004518:	4619      	mov	r1, r3
 c00451a:	68f8      	ldr	r0, [r7, #12]
 c00451c:	f7ff fc4c 	bl	c003db8 <uECC_vli_set>
}
 c004520:	3798      	adds	r7, #152	; 0x98
 c004522:	46bd      	mov	sp, r7
 c004524:	bd80      	pop	{r7, pc}

0c004526 <double_jacobian_default>:
#if uECC_SUPPORTS_secp160r1 || uECC_SUPPORTS_secp192r1 || \
    uECC_SUPPORTS_secp224r1 || uECC_SUPPORTS_secp256r1
static void double_jacobian_default(uECC_word_t * X1,
                                    uECC_word_t * Y1,
                                    uECC_word_t * Z1,
                                    uECC_Curve curve) {
 c004526:	b580      	push	{r7, lr}
 c004528:	b098      	sub	sp, #96	; 0x60
 c00452a:	af02      	add	r7, sp, #8
 c00452c:	60f8      	str	r0, [r7, #12]
 c00452e:	60b9      	str	r1, [r7, #8]
 c004530:	607a      	str	r2, [r7, #4]
 c004532:	603b      	str	r3, [r7, #0]
    /* t1 = X, t2 = Y, t3 = Z */
    uECC_word_t t4[uECC_MAX_WORDS];
    uECC_word_t t5[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
 c004534:	683b      	ldr	r3, [r7, #0]
 c004536:	781b      	ldrb	r3, [r3, #0]
 c004538:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    if (uECC_vli_isZero(Z1, num_words)) {
 c00453c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c004540:	4619      	mov	r1, r3
 c004542:	6878      	ldr	r0, [r7, #4]
 c004544:	f7ff fb94 	bl	c003c70 <uECC_vli_isZero>
 c004548:	4603      	mov	r3, r0
 c00454a:	2b00      	cmp	r3, #0
 c00454c:	f040 80e6 	bne.w	c00471c <double_jacobian_default+0x1f6>
        return;
    }

    uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 c004550:	f107 0330 	add.w	r3, r7, #48	; 0x30
 c004554:	683a      	ldr	r2, [r7, #0]
 c004556:	68b9      	ldr	r1, [r7, #8]
 c004558:	4618      	mov	r0, r3
 c00455a:	f7ff fea3 	bl	c0042a4 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 c00455e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c004562:	f107 0010 	add.w	r0, r7, #16
 c004566:	683b      	ldr	r3, [r7, #0]
 c004568:	68f9      	ldr	r1, [r7, #12]
 c00456a:	f7ff fe7f 	bl	c00426c <uECC_vli_modMult_fast>
    uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 c00456e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c004572:	f107 0330 	add.w	r3, r7, #48	; 0x30
 c004576:	683a      	ldr	r2, [r7, #0]
 c004578:	4618      	mov	r0, r3
 c00457a:	f7ff fe93 	bl	c0042a4 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 c00457e:	683b      	ldr	r3, [r7, #0]
 c004580:	687a      	ldr	r2, [r7, #4]
 c004582:	68b9      	ldr	r1, [r7, #8]
 c004584:	68b8      	ldr	r0, [r7, #8]
 c004586:	f7ff fe71 	bl	c00426c <uECC_vli_modMult_fast>
    uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 c00458a:	683a      	ldr	r2, [r7, #0]
 c00458c:	6879      	ldr	r1, [r7, #4]
 c00458e:	6878      	ldr	r0, [r7, #4]
 c004590:	f7ff fe88 	bl	c0042a4 <uECC_vli_modSquare_fast>

    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 c004594:	683b      	ldr	r3, [r7, #0]
 c004596:	1d1a      	adds	r2, r3, #4
 c004598:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c00459c:	9300      	str	r3, [sp, #0]
 c00459e:	4613      	mov	r3, r2
 c0045a0:	687a      	ldr	r2, [r7, #4]
 c0045a2:	68f9      	ldr	r1, [r7, #12]
 c0045a4:	68f8      	ldr	r0, [r7, #12]
 c0045a6:	f7ff fcc6 	bl	c003f36 <uECC_vli_modAdd>
    uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 c0045aa:	683b      	ldr	r3, [r7, #0]
 c0045ac:	1d1a      	adds	r2, r3, #4
 c0045ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0045b2:	9300      	str	r3, [sp, #0]
 c0045b4:	4613      	mov	r3, r2
 c0045b6:	687a      	ldr	r2, [r7, #4]
 c0045b8:	6879      	ldr	r1, [r7, #4]
 c0045ba:	6878      	ldr	r0, [r7, #4]
 c0045bc:	f7ff fcbb 	bl	c003f36 <uECC_vli_modAdd>
    uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 c0045c0:	683b      	ldr	r3, [r7, #0]
 c0045c2:	1d1a      	adds	r2, r3, #4
 c0045c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0045c8:	9300      	str	r3, [sp, #0]
 c0045ca:	4613      	mov	r3, r2
 c0045cc:	687a      	ldr	r2, [r7, #4]
 c0045ce:	68f9      	ldr	r1, [r7, #12]
 c0045d0:	6878      	ldr	r0, [r7, #4]
 c0045d2:	f7ff fcd7 	bl	c003f84 <uECC_vli_modSub>
    uECC_vli_modMult_fast(X1, X1, Z1, curve);                /* t1 = x1^2 - z1^4 */
 c0045d6:	683b      	ldr	r3, [r7, #0]
 c0045d8:	687a      	ldr	r2, [r7, #4]
 c0045da:	68f9      	ldr	r1, [r7, #12]
 c0045dc:	68f8      	ldr	r0, [r7, #12]
 c0045de:	f7ff fe45 	bl	c00426c <uECC_vli_modMult_fast>

    uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
 c0045e2:	683b      	ldr	r3, [r7, #0]
 c0045e4:	1d1a      	adds	r2, r3, #4
 c0045e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0045ea:	9300      	str	r3, [sp, #0]
 c0045ec:	4613      	mov	r3, r2
 c0045ee:	68fa      	ldr	r2, [r7, #12]
 c0045f0:	68f9      	ldr	r1, [r7, #12]
 c0045f2:	6878      	ldr	r0, [r7, #4]
 c0045f4:	f7ff fc9f 	bl	c003f36 <uECC_vli_modAdd>
    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
 c0045f8:	683b      	ldr	r3, [r7, #0]
 c0045fa:	1d1a      	adds	r2, r3, #4
 c0045fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c004600:	9300      	str	r3, [sp, #0]
 c004602:	4613      	mov	r3, r2
 c004604:	687a      	ldr	r2, [r7, #4]
 c004606:	68f9      	ldr	r1, [r7, #12]
 c004608:	68f8      	ldr	r0, [r7, #12]
 c00460a:	f7ff fc94 	bl	c003f36 <uECC_vli_modAdd>
    if (uECC_vli_testBit(X1, 0)) {
 c00460e:	2100      	movs	r1, #0
 c004610:	68f8      	ldr	r0, [r7, #12]
 c004612:	f7ff fb57 	bl	c003cc4 <uECC_vli_testBit>
 c004616:	4603      	mov	r3, r0
 c004618:	2b00      	cmp	r3, #0
 c00461a:	d024      	beq.n	c004666 <double_jacobian_default+0x140>
        uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
 c00461c:	683b      	ldr	r3, [r7, #0]
 c00461e:	1d1a      	adds	r2, r3, #4
 c004620:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c004624:	68f9      	ldr	r1, [r7, #12]
 c004626:	68f8      	ldr	r0, [r7, #12]
 c004628:	f7ff fa1a 	bl	c003a60 <uECC_vli_add>
 c00462c:	6538      	str	r0, [r7, #80]	; 0x50
        uECC_vli_rshift1(X1, num_words);
 c00462e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c004632:	4619      	mov	r1, r3
 c004634:	68f8      	ldr	r0, [r7, #12]
 c004636:	f7ff fc54 	bl	c003ee2 <uECC_vli_rshift1>
        X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
 c00463a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c00463e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c004642:	3b01      	subs	r3, #1
 c004644:	009b      	lsls	r3, r3, #2
 c004646:	68fa      	ldr	r2, [r7, #12]
 c004648:	4413      	add	r3, r2
 c00464a:	6819      	ldr	r1, [r3, #0]
 c00464c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00464e:	07da      	lsls	r2, r3, #31
 c004650:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c004654:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c004658:	3b01      	subs	r3, #1
 c00465a:	009b      	lsls	r3, r3, #2
 c00465c:	68f8      	ldr	r0, [r7, #12]
 c00465e:	4403      	add	r3, r0
 c004660:	430a      	orrs	r2, r1
 c004662:	601a      	str	r2, [r3, #0]
 c004664:	e005      	b.n	c004672 <double_jacobian_default+0x14c>
    } else {
        uECC_vli_rshift1(X1, num_words);
 c004666:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c00466a:	4619      	mov	r1, r3
 c00466c:	68f8      	ldr	r0, [r7, #12]
 c00466e:	f7ff fc38 	bl	c003ee2 <uECC_vli_rshift1>
    }
    /* t1 = 3/2*(x1^2 - z1^4) = B */

    uECC_vli_modSquare_fast(Z1, X1, curve);                  /* t3 = B^2 */
 c004672:	683a      	ldr	r2, [r7, #0]
 c004674:	68f9      	ldr	r1, [r7, #12]
 c004676:	6878      	ldr	r0, [r7, #4]
 c004678:	f7ff fe14 	bl	c0042a4 <uECC_vli_modSquare_fast>
    uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 c00467c:	683b      	ldr	r3, [r7, #0]
 c00467e:	1d19      	adds	r1, r3, #4
 c004680:	f107 0210 	add.w	r2, r7, #16
 c004684:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c004688:	9300      	str	r3, [sp, #0]
 c00468a:	460b      	mov	r3, r1
 c00468c:	6879      	ldr	r1, [r7, #4]
 c00468e:	6878      	ldr	r0, [r7, #4]
 c004690:	f7ff fc78 	bl	c003f84 <uECC_vli_modSub>
    uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 c004694:	683b      	ldr	r3, [r7, #0]
 c004696:	1d19      	adds	r1, r3, #4
 c004698:	f107 0210 	add.w	r2, r7, #16
 c00469c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0046a0:	9300      	str	r3, [sp, #0]
 c0046a2:	460b      	mov	r3, r1
 c0046a4:	6879      	ldr	r1, [r7, #4]
 c0046a6:	6878      	ldr	r0, [r7, #4]
 c0046a8:	f7ff fc6c 	bl	c003f84 <uECC_vli_modSub>
    uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 c0046ac:	683b      	ldr	r3, [r7, #0]
 c0046ae:	1d1a      	adds	r2, r3, #4
 c0046b0:	f107 0110 	add.w	r1, r7, #16
 c0046b4:	f107 0010 	add.w	r0, r7, #16
 c0046b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0046bc:	9300      	str	r3, [sp, #0]
 c0046be:	4613      	mov	r3, r2
 c0046c0:	687a      	ldr	r2, [r7, #4]
 c0046c2:	f7ff fc5f 	bl	c003f84 <uECC_vli_modSub>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = B * (A - x3) */
 c0046c6:	f107 0210 	add.w	r2, r7, #16
 c0046ca:	683b      	ldr	r3, [r7, #0]
 c0046cc:	68f9      	ldr	r1, [r7, #12]
 c0046ce:	68f8      	ldr	r0, [r7, #12]
 c0046d0:	f7ff fdcc 	bl	c00426c <uECC_vli_modMult_fast>
    uECC_vli_modSub(t4, X1, t4, curve->p, num_words); /* t4 = B * (A - x3) - y1^4 = y3 */
 c0046d4:	683b      	ldr	r3, [r7, #0]
 c0046d6:	1d19      	adds	r1, r3, #4
 c0046d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c0046dc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 c0046e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0046e4:	9300      	str	r3, [sp, #0]
 c0046e6:	460b      	mov	r3, r1
 c0046e8:	68f9      	ldr	r1, [r7, #12]
 c0046ea:	f7ff fc4b 	bl	c003f84 <uECC_vli_modSub>

    uECC_vli_set(X1, Z1, num_words);
 c0046ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0046f2:	461a      	mov	r2, r3
 c0046f4:	6879      	ldr	r1, [r7, #4]
 c0046f6:	68f8      	ldr	r0, [r7, #12]
 c0046f8:	f7ff fb5e 	bl	c003db8 <uECC_vli_set>
    uECC_vli_set(Z1, Y1, num_words);
 c0046fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c004700:	461a      	mov	r2, r3
 c004702:	68b9      	ldr	r1, [r7, #8]
 c004704:	6878      	ldr	r0, [r7, #4]
 c004706:	f7ff fb57 	bl	c003db8 <uECC_vli_set>
    uECC_vli_set(Y1, t4, num_words);
 c00470a:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 c00470e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 c004712:	4619      	mov	r1, r3
 c004714:	68b8      	ldr	r0, [r7, #8]
 c004716:	f7ff fb4f 	bl	c003db8 <uECC_vli_set>
 c00471a:	e000      	b.n	c00471e <double_jacobian_default+0x1f8>
        return;
 c00471c:	bf00      	nop
}
 c00471e:	3758      	adds	r7, #88	; 0x58
 c004720:	46bd      	mov	sp, r7
 c004722:	bd80      	pop	{r7, pc}

0c004724 <x_side_default>:

/* Computes result = x^3 + ax + b. result must not overlap x. */
static void x_side_default(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve) {
 c004724:	b580      	push	{r7, lr}
 c004726:	b090      	sub	sp, #64	; 0x40
 c004728:	af02      	add	r7, sp, #8
 c00472a:	60f8      	str	r0, [r7, #12]
 c00472c:	60b9      	str	r1, [r7, #8]
 c00472e:	607a      	str	r2, [r7, #4]
    uECC_word_t _3[uECC_MAX_WORDS] = {3}; /* -a = 3 */
 c004730:	f107 0314 	add.w	r3, r7, #20
 c004734:	2220      	movs	r2, #32
 c004736:	2100      	movs	r1, #0
 c004738:	4618      	mov	r0, r3
 c00473a:	f005 f86c 	bl	c009816 <memset>
 c00473e:	2303      	movs	r3, #3
 c004740:	617b      	str	r3, [r7, #20]
    wordcount_t num_words = curve->num_words;
 c004742:	687b      	ldr	r3, [r7, #4]
 c004744:	781b      	ldrb	r3, [r3, #0]
 c004746:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    uECC_vli_modSquare_fast(result, x, curve);                             /* r = x^2 */
 c00474a:	687a      	ldr	r2, [r7, #4]
 c00474c:	68b9      	ldr	r1, [r7, #8]
 c00474e:	68f8      	ldr	r0, [r7, #12]
 c004750:	f7ff fda8 	bl	c0042a4 <uECC_vli_modSquare_fast>
    uECC_vli_modSub(result, result, _3, curve->p, num_words);       /* r = x^2 - 3 */
 c004754:	687b      	ldr	r3, [r7, #4]
 c004756:	1d19      	adds	r1, r3, #4
 c004758:	f107 0214 	add.w	r2, r7, #20
 c00475c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c004760:	9300      	str	r3, [sp, #0]
 c004762:	460b      	mov	r3, r1
 c004764:	68f9      	ldr	r1, [r7, #12]
 c004766:	68f8      	ldr	r0, [r7, #12]
 c004768:	f7ff fc0c 	bl	c003f84 <uECC_vli_modSub>
    uECC_vli_modMult_fast(result, result, x, curve);                       /* r = x^3 - 3x */
 c00476c:	687b      	ldr	r3, [r7, #4]
 c00476e:	68ba      	ldr	r2, [r7, #8]
 c004770:	68f9      	ldr	r1, [r7, #12]
 c004772:	68f8      	ldr	r0, [r7, #12]
 c004774:	f7ff fd7a 	bl	c00426c <uECC_vli_modMult_fast>
    uECC_vli_modAdd(result, result, curve->b, curve->p, num_words); /* r = x^3 - 3x + b */
 c004778:	687b      	ldr	r3, [r7, #4]
 c00477a:	f103 0284 	add.w	r2, r3, #132	; 0x84
 c00477e:	687b      	ldr	r3, [r7, #4]
 c004780:	1d19      	adds	r1, r3, #4
 c004782:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c004786:	9300      	str	r3, [sp, #0]
 c004788:	460b      	mov	r3, r1
 c00478a:	68f9      	ldr	r1, [r7, #12]
 c00478c:	68f8      	ldr	r0, [r7, #12]
 c00478e:	f7ff fbd2 	bl	c003f36 <uECC_vli_modAdd>
}
 c004792:	bf00      	nop
 c004794:	3738      	adds	r7, #56	; 0x38
 c004796:	46bd      	mov	sp, r7
 c004798:	bd80      	pop	{r7, pc}

0c00479a <mod_sqrt_default>:

#if uECC_SUPPORT_COMPRESSED_POINT
#if uECC_SUPPORTS_secp160r1 || uECC_SUPPORTS_secp192r1 || \
    uECC_SUPPORTS_secp256r1 || uECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
 c00479a:	b580      	push	{r7, lr}
 c00479c:	b094      	sub	sp, #80	; 0x50
 c00479e:	af00      	add	r7, sp, #0
 c0047a0:	6078      	str	r0, [r7, #4]
 c0047a2:	6039      	str	r1, [r7, #0]
    bitcount_t i;
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
 c0047a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c0047a8:	2220      	movs	r2, #32
 c0047aa:	2100      	movs	r1, #0
 c0047ac:	4618      	mov	r0, r3
 c0047ae:	f005 f832 	bl	c009816 <memset>
 c0047b2:	2301      	movs	r3, #1
 c0047b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 c0047b6:	f107 030c 	add.w	r3, r7, #12
 c0047ba:	2220      	movs	r2, #32
 c0047bc:	2100      	movs	r1, #0
 c0047be:	4618      	mov	r0, r3
 c0047c0:	f005 f829 	bl	c009816 <memset>
 c0047c4:	2301      	movs	r3, #1
 c0047c6:	60fb      	str	r3, [r7, #12]
    wordcount_t num_words = curve->num_words;
 c0047c8:	683b      	ldr	r3, [r7, #0]
 c0047ca:	781b      	ldrb	r3, [r3, #0]
 c0047cc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    
    /* When curve->p == 3 (mod 4), we can compute
       sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 c0047d0:	683b      	ldr	r3, [r7, #0]
 c0047d2:	1d19      	adds	r1, r3, #4
 c0047d4:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 c0047d8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 c0047dc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 c0047e0:	f7ff f93e 	bl	c003a60 <uECC_vli_add>
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 c0047e4:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 c0047e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c0047ec:	4611      	mov	r1, r2
 c0047ee:	4618      	mov	r0, r3
 c0047f0:	f7ff faa8 	bl	c003d44 <uECC_vli_numBits>
 c0047f4:	4603      	mov	r3, r0
 c0047f6:	b29b      	uxth	r3, r3
 c0047f8:	3b01      	subs	r3, #1
 c0047fa:	b29b      	uxth	r3, r3
 c0047fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 c004800:	e020      	b.n	c004844 <mod_sqrt_default+0xaa>
        uECC_vli_modSquare_fast(l_result, l_result, curve);
 c004802:	f107 010c 	add.w	r1, r7, #12
 c004806:	f107 030c 	add.w	r3, r7, #12
 c00480a:	683a      	ldr	r2, [r7, #0]
 c00480c:	4618      	mov	r0, r3
 c00480e:	f7ff fd49 	bl	c0042a4 <uECC_vli_modSquare_fast>
        if (uECC_vli_testBit(p1, i)) {
 c004812:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 c004816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c00481a:	4611      	mov	r1, r2
 c00481c:	4618      	mov	r0, r3
 c00481e:	f7ff fa51 	bl	c003cc4 <uECC_vli_testBit>
 c004822:	4603      	mov	r3, r0
 c004824:	2b00      	cmp	r3, #0
 c004826:	d007      	beq.n	c004838 <mod_sqrt_default+0x9e>
            uECC_vli_modMult_fast(l_result, l_result, a, curve);
 c004828:	f107 010c 	add.w	r1, r7, #12
 c00482c:	f107 000c 	add.w	r0, r7, #12
 c004830:	683b      	ldr	r3, [r7, #0]
 c004832:	687a      	ldr	r2, [r7, #4]
 c004834:	f7ff fd1a 	bl	c00426c <uECC_vli_modMult_fast>
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 c004838:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 c00483c:	3b01      	subs	r3, #1
 c00483e:	b29b      	uxth	r3, r3
 c004840:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 c004844:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 c004848:	2b01      	cmp	r3, #1
 c00484a:	dcda      	bgt.n	c004802 <mod_sqrt_default+0x68>
        }
    }
    uECC_vli_set(a, l_result, num_words);
 c00484c:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 c004850:	f107 030c 	add.w	r3, r7, #12
 c004854:	4619      	mov	r1, r3
 c004856:	6878      	ldr	r0, [r7, #4]
 c004858:	f7ff faae 	bl	c003db8 <uECC_vli_set>
}
 c00485c:	bf00      	nop
 c00485e:	3750      	adds	r7, #80	; 0x50
 c004860:	46bd      	mov	sp, r7
 c004862:	bd80      	pop	{r7, pc}

0c004864 <uECC_secp256r1>:
#if (uECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp256r1
#endif
};

uECC_Curve uECC_secp256r1(void) { return &curve_secp256r1; }
 c004864:	b480      	push	{r7}
 c004866:	af00      	add	r7, sp, #0
 c004868:	4b02      	ldr	r3, [pc, #8]	; (c004874 <uECC_secp256r1+0x10>)
 c00486a:	4618      	mov	r0, r3
 c00486c:	46bd      	mov	sp, r7
 c00486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004872:	4770      	bx	lr
 c004874:	0c0098c8 	.word	0x0c0098c8

0c004878 <vli_mmod_fast_secp256r1>:
            carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
        }
    }
}
#elif uECC_WORD_SIZE == 4
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 c004878:	b580      	push	{r7, lr}
 c00487a:	b08c      	sub	sp, #48	; 0x30
 c00487c:	af00      	add	r7, sp, #0
 c00487e:	6078      	str	r0, [r7, #4]
 c004880:	6039      	str	r1, [r7, #0]
    uint32_t tmp[num_words_secp256r1];
    int carry;
    
    /* t */
    uECC_vli_set(result, product, num_words_secp256r1);
 c004882:	2208      	movs	r2, #8
 c004884:	6839      	ldr	r1, [r7, #0]
 c004886:	6878      	ldr	r0, [r7, #4]
 c004888:	f7ff fa96 	bl	c003db8 <uECC_vli_set>
    
    /* s1 */
    tmp[0] = tmp[1] = tmp[2] = 0;
 c00488c:	2300      	movs	r3, #0
 c00488e:	617b      	str	r3, [r7, #20]
 c004890:	697b      	ldr	r3, [r7, #20]
 c004892:	613b      	str	r3, [r7, #16]
 c004894:	693b      	ldr	r3, [r7, #16]
 c004896:	60fb      	str	r3, [r7, #12]
    tmp[3] = product[11];
 c004898:	683b      	ldr	r3, [r7, #0]
 c00489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c00489c:	61bb      	str	r3, [r7, #24]
    tmp[4] = product[12];
 c00489e:	683b      	ldr	r3, [r7, #0]
 c0048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0048a2:	61fb      	str	r3, [r7, #28]
    tmp[5] = product[13];
 c0048a4:	683b      	ldr	r3, [r7, #0]
 c0048a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0048a8:	623b      	str	r3, [r7, #32]
    tmp[6] = product[14];
 c0048aa:	683b      	ldr	r3, [r7, #0]
 c0048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0048ae:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[15];
 c0048b0:	683b      	ldr	r3, [r7, #0]
 c0048b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c0048b4:	62bb      	str	r3, [r7, #40]	; 0x28
    carry = uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 c0048b6:	f107 020c 	add.w	r2, r7, #12
 c0048ba:	f107 010c 	add.w	r1, r7, #12
 c0048be:	f107 000c 	add.w	r0, r7, #12
 c0048c2:	2308      	movs	r3, #8
 c0048c4:	f7ff f8cc 	bl	c003a60 <uECC_vli_add>
 c0048c8:	4603      	mov	r3, r0
 c0048ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 c0048cc:	f107 020c 	add.w	r2, r7, #12
 c0048d0:	2308      	movs	r3, #8
 c0048d2:	6879      	ldr	r1, [r7, #4]
 c0048d4:	6878      	ldr	r0, [r7, #4]
 c0048d6:	f7ff f8c3 	bl	c003a60 <uECC_vli_add>
 c0048da:	4602      	mov	r2, r0
 c0048dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0048de:	4413      	add	r3, r2
 c0048e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* s2 */
    tmp[3] = product[12];
 c0048e2:	683b      	ldr	r3, [r7, #0]
 c0048e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0048e6:	61bb      	str	r3, [r7, #24]
    tmp[4] = product[13];
 c0048e8:	683b      	ldr	r3, [r7, #0]
 c0048ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0048ec:	61fb      	str	r3, [r7, #28]
    tmp[5] = product[14];
 c0048ee:	683b      	ldr	r3, [r7, #0]
 c0048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0048f2:	623b      	str	r3, [r7, #32]
    tmp[6] = product[15];
 c0048f4:	683b      	ldr	r3, [r7, #0]
 c0048f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c0048f8:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = 0;
 c0048fa:	2300      	movs	r3, #0
 c0048fc:	62bb      	str	r3, [r7, #40]	; 0x28
    carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 c0048fe:	f107 020c 	add.w	r2, r7, #12
 c004902:	f107 010c 	add.w	r1, r7, #12
 c004906:	f107 000c 	add.w	r0, r7, #12
 c00490a:	2308      	movs	r3, #8
 c00490c:	f7ff f8a8 	bl	c003a60 <uECC_vli_add>
 c004910:	4602      	mov	r2, r0
 c004912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c004914:	4413      	add	r3, r2
 c004916:	62fb      	str	r3, [r7, #44]	; 0x2c
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 c004918:	f107 020c 	add.w	r2, r7, #12
 c00491c:	2308      	movs	r3, #8
 c00491e:	6879      	ldr	r1, [r7, #4]
 c004920:	6878      	ldr	r0, [r7, #4]
 c004922:	f7ff f89d 	bl	c003a60 <uECC_vli_add>
 c004926:	4602      	mov	r2, r0
 c004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c00492a:	4413      	add	r3, r2
 c00492c:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* s3 */
    tmp[0] = product[8];
 c00492e:	683b      	ldr	r3, [r7, #0]
 c004930:	6a1b      	ldr	r3, [r3, #32]
 c004932:	60fb      	str	r3, [r7, #12]
    tmp[1] = product[9];
 c004934:	683b      	ldr	r3, [r7, #0]
 c004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004938:	613b      	str	r3, [r7, #16]
    tmp[2] = product[10];
 c00493a:	683b      	ldr	r3, [r7, #0]
 c00493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00493e:	617b      	str	r3, [r7, #20]
    tmp[3] = tmp[4] = tmp[5] = 0;
 c004940:	2300      	movs	r3, #0
 c004942:	623b      	str	r3, [r7, #32]
 c004944:	6a3b      	ldr	r3, [r7, #32]
 c004946:	61fb      	str	r3, [r7, #28]
 c004948:	69fb      	ldr	r3, [r7, #28]
 c00494a:	61bb      	str	r3, [r7, #24]
    tmp[6] = product[14];
 c00494c:	683b      	ldr	r3, [r7, #0]
 c00494e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c004950:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[15];
 c004952:	683b      	ldr	r3, [r7, #0]
 c004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c004956:	62bb      	str	r3, [r7, #40]	; 0x28
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 c004958:	f107 020c 	add.w	r2, r7, #12
 c00495c:	2308      	movs	r3, #8
 c00495e:	6879      	ldr	r1, [r7, #4]
 c004960:	6878      	ldr	r0, [r7, #4]
 c004962:	f7ff f87d 	bl	c003a60 <uECC_vli_add>
 c004966:	4602      	mov	r2, r0
 c004968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c00496a:	4413      	add	r3, r2
 c00496c:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* s4 */
    tmp[0] = product[9];
 c00496e:	683b      	ldr	r3, [r7, #0]
 c004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004972:	60fb      	str	r3, [r7, #12]
    tmp[1] = product[10];
 c004974:	683b      	ldr	r3, [r7, #0]
 c004976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004978:	613b      	str	r3, [r7, #16]
    tmp[2] = product[11];
 c00497a:	683b      	ldr	r3, [r7, #0]
 c00497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c00497e:	617b      	str	r3, [r7, #20]
    tmp[3] = product[13];
 c004980:	683b      	ldr	r3, [r7, #0]
 c004982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004984:	61bb      	str	r3, [r7, #24]
    tmp[4] = product[14];
 c004986:	683b      	ldr	r3, [r7, #0]
 c004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c00498a:	61fb      	str	r3, [r7, #28]
    tmp[5] = product[15];
 c00498c:	683b      	ldr	r3, [r7, #0]
 c00498e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c004990:	623b      	str	r3, [r7, #32]
    tmp[6] = product[13];
 c004992:	683b      	ldr	r3, [r7, #0]
 c004994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004996:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[8];
 c004998:	683b      	ldr	r3, [r7, #0]
 c00499a:	6a1b      	ldr	r3, [r3, #32]
 c00499c:	62bb      	str	r3, [r7, #40]	; 0x28
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 c00499e:	f107 020c 	add.w	r2, r7, #12
 c0049a2:	2308      	movs	r3, #8
 c0049a4:	6879      	ldr	r1, [r7, #4]
 c0049a6:	6878      	ldr	r0, [r7, #4]
 c0049a8:	f7ff f85a 	bl	c003a60 <uECC_vli_add>
 c0049ac:	4602      	mov	r2, r0
 c0049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0049b0:	4413      	add	r3, r2
 c0049b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* d1 */
    tmp[0] = product[11];
 c0049b4:	683b      	ldr	r3, [r7, #0]
 c0049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0049b8:	60fb      	str	r3, [r7, #12]
    tmp[1] = product[12];
 c0049ba:	683b      	ldr	r3, [r7, #0]
 c0049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0049be:	613b      	str	r3, [r7, #16]
    tmp[2] = product[13];
 c0049c0:	683b      	ldr	r3, [r7, #0]
 c0049c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0049c4:	617b      	str	r3, [r7, #20]
    tmp[3] = tmp[4] = tmp[5] = 0;
 c0049c6:	2300      	movs	r3, #0
 c0049c8:	623b      	str	r3, [r7, #32]
 c0049ca:	6a3b      	ldr	r3, [r7, #32]
 c0049cc:	61fb      	str	r3, [r7, #28]
 c0049ce:	69fb      	ldr	r3, [r7, #28]
 c0049d0:	61bb      	str	r3, [r7, #24]
    tmp[6] = product[8];
 c0049d2:	683b      	ldr	r3, [r7, #0]
 c0049d4:	6a1b      	ldr	r3, [r3, #32]
 c0049d6:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[10];
 c0049d8:	683b      	ldr	r3, [r7, #0]
 c0049da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0049dc:	62bb      	str	r3, [r7, #40]	; 0x28
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 c0049de:	f107 020c 	add.w	r2, r7, #12
 c0049e2:	2308      	movs	r3, #8
 c0049e4:	6879      	ldr	r1, [r7, #4]
 c0049e6:	6878      	ldr	r0, [r7, #4]
 c0049e8:	f7ff f882 	bl	c003af0 <uECC_vli_sub>
 c0049ec:	4602      	mov	r2, r0
 c0049ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0049f0:	1a9b      	subs	r3, r3, r2
 c0049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* d2 */
    tmp[0] = product[12];
 c0049f4:	683b      	ldr	r3, [r7, #0]
 c0049f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0049f8:	60fb      	str	r3, [r7, #12]
    tmp[1] = product[13];
 c0049fa:	683b      	ldr	r3, [r7, #0]
 c0049fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0049fe:	613b      	str	r3, [r7, #16]
    tmp[2] = product[14];
 c004a00:	683b      	ldr	r3, [r7, #0]
 c004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c004a04:	617b      	str	r3, [r7, #20]
    tmp[3] = product[15];
 c004a06:	683b      	ldr	r3, [r7, #0]
 c004a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c004a0a:	61bb      	str	r3, [r7, #24]
    tmp[4] = tmp[5] = 0;
 c004a0c:	2300      	movs	r3, #0
 c004a0e:	623b      	str	r3, [r7, #32]
 c004a10:	6a3b      	ldr	r3, [r7, #32]
 c004a12:	61fb      	str	r3, [r7, #28]
    tmp[6] = product[9];
 c004a14:	683b      	ldr	r3, [r7, #0]
 c004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004a18:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[11];
 c004a1a:	683b      	ldr	r3, [r7, #0]
 c004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c004a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 c004a20:	f107 020c 	add.w	r2, r7, #12
 c004a24:	2308      	movs	r3, #8
 c004a26:	6879      	ldr	r1, [r7, #4]
 c004a28:	6878      	ldr	r0, [r7, #4]
 c004a2a:	f7ff f861 	bl	c003af0 <uECC_vli_sub>
 c004a2e:	4602      	mov	r2, r0
 c004a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c004a32:	1a9b      	subs	r3, r3, r2
 c004a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* d3 */
    tmp[0] = product[13];
 c004a36:	683b      	ldr	r3, [r7, #0]
 c004a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004a3a:	60fb      	str	r3, [r7, #12]
    tmp[1] = product[14];
 c004a3c:	683b      	ldr	r3, [r7, #0]
 c004a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c004a40:	613b      	str	r3, [r7, #16]
    tmp[2] = product[15];
 c004a42:	683b      	ldr	r3, [r7, #0]
 c004a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c004a46:	617b      	str	r3, [r7, #20]
    tmp[3] = product[8];
 c004a48:	683b      	ldr	r3, [r7, #0]
 c004a4a:	6a1b      	ldr	r3, [r3, #32]
 c004a4c:	61bb      	str	r3, [r7, #24]
    tmp[4] = product[9];
 c004a4e:	683b      	ldr	r3, [r7, #0]
 c004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004a52:	61fb      	str	r3, [r7, #28]
    tmp[5] = product[10];
 c004a54:	683b      	ldr	r3, [r7, #0]
 c004a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004a58:	623b      	str	r3, [r7, #32]
    tmp[6] = 0;
 c004a5a:	2300      	movs	r3, #0
 c004a5c:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[12];
 c004a5e:	683b      	ldr	r3, [r7, #0]
 c004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c004a62:	62bb      	str	r3, [r7, #40]	; 0x28
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 c004a64:	f107 020c 	add.w	r2, r7, #12
 c004a68:	2308      	movs	r3, #8
 c004a6a:	6879      	ldr	r1, [r7, #4]
 c004a6c:	6878      	ldr	r0, [r7, #4]
 c004a6e:	f7ff f83f 	bl	c003af0 <uECC_vli_sub>
 c004a72:	4602      	mov	r2, r0
 c004a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c004a76:	1a9b      	subs	r3, r3, r2
 c004a78:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* d4 */
    tmp[0] = product[14];
 c004a7a:	683b      	ldr	r3, [r7, #0]
 c004a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c004a7e:	60fb      	str	r3, [r7, #12]
    tmp[1] = product[15];
 c004a80:	683b      	ldr	r3, [r7, #0]
 c004a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c004a84:	613b      	str	r3, [r7, #16]
    tmp[2] = 0;
 c004a86:	2300      	movs	r3, #0
 c004a88:	617b      	str	r3, [r7, #20]
    tmp[3] = product[9];
 c004a8a:	683b      	ldr	r3, [r7, #0]
 c004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004a8e:	61bb      	str	r3, [r7, #24]
    tmp[4] = product[10];
 c004a90:	683b      	ldr	r3, [r7, #0]
 c004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004a94:	61fb      	str	r3, [r7, #28]
    tmp[5] = product[11];
 c004a96:	683b      	ldr	r3, [r7, #0]
 c004a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c004a9a:	623b      	str	r3, [r7, #32]
    tmp[6] = 0;
 c004a9c:	2300      	movs	r3, #0
 c004a9e:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[13];
 c004aa0:	683b      	ldr	r3, [r7, #0]
 c004aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 c004aa6:	f107 020c 	add.w	r2, r7, #12
 c004aaa:	2308      	movs	r3, #8
 c004aac:	6879      	ldr	r1, [r7, #4]
 c004aae:	6878      	ldr	r0, [r7, #4]
 c004ab0:	f7ff f81e 	bl	c003af0 <uECC_vli_sub>
 c004ab4:	4602      	mov	r2, r0
 c004ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c004ab8:	1a9b      	subs	r3, r3, r2
 c004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (carry < 0) {
 c004abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c004abe:	2b00      	cmp	r3, #0
 c004ac0:	da17      	bge.n	c004af2 <vli_mmod_fast_secp256r1+0x27a>
        do {
            carry += uECC_vli_add(result, result, curve_secp256r1.p, num_words_secp256r1);
 c004ac2:	2308      	movs	r3, #8
 c004ac4:	4a12      	ldr	r2, [pc, #72]	; (c004b10 <vli_mmod_fast_secp256r1+0x298>)
 c004ac6:	6879      	ldr	r1, [r7, #4]
 c004ac8:	6878      	ldr	r0, [r7, #4]
 c004aca:	f7fe ffc9 	bl	c003a60 <uECC_vli_add>
 c004ace:	4602      	mov	r2, r0
 c004ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c004ad2:	4413      	add	r3, r2
 c004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
        } while (carry < 0);
 c004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c004ad8:	2b00      	cmp	r3, #0
 c004ada:	dbf2      	blt.n	c004ac2 <vli_mmod_fast_secp256r1+0x24a>
    } else {
        while (carry || uECC_vli_cmp_unsafe(curve_secp256r1.p, result, num_words_secp256r1) != 1) {
            carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
        }
    }
}
 c004adc:	e014      	b.n	c004b08 <vli_mmod_fast_secp256r1+0x290>
            carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
 c004ade:	2308      	movs	r3, #8
 c004ae0:	4a0b      	ldr	r2, [pc, #44]	; (c004b10 <vli_mmod_fast_secp256r1+0x298>)
 c004ae2:	6879      	ldr	r1, [r7, #4]
 c004ae4:	6878      	ldr	r0, [r7, #4]
 c004ae6:	f7ff f803 	bl	c003af0 <uECC_vli_sub>
 c004aea:	4602      	mov	r2, r0
 c004aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c004aee:	1a9b      	subs	r3, r3, r2
 c004af0:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (carry || uECC_vli_cmp_unsafe(curve_secp256r1.p, result, num_words_secp256r1) != 1) {
 c004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c004af4:	2b00      	cmp	r3, #0
 c004af6:	d1f2      	bne.n	c004ade <vli_mmod_fast_secp256r1+0x266>
 c004af8:	2208      	movs	r2, #8
 c004afa:	6879      	ldr	r1, [r7, #4]
 c004afc:	4804      	ldr	r0, [pc, #16]	; (c004b10 <vli_mmod_fast_secp256r1+0x298>)
 c004afe:	f7ff f982 	bl	c003e06 <uECC_vli_cmp_unsafe>
 c004b02:	4603      	mov	r3, r0
 c004b04:	2b01      	cmp	r3, #1
 c004b06:	d1ea      	bne.n	c004ade <vli_mmod_fast_secp256r1+0x266>
}
 c004b08:	bf00      	nop
 c004b0a:	3730      	adds	r7, #48	; 0x30
 c004b0c:	46bd      	mov	sp, r7
 c004b0e:	bd80      	pop	{r7, pc}
 c004b10:	0c0098cc 	.word	0x0c0098cc

0c004b14 <apply_z>:

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(uECC_word_t * X1,
                    uECC_word_t * Y1,
                    const uECC_word_t * const Z,
                    uECC_Curve curve) {
 c004b14:	b580      	push	{r7, lr}
 c004b16:	b08c      	sub	sp, #48	; 0x30
 c004b18:	af00      	add	r7, sp, #0
 c004b1a:	60f8      	str	r0, [r7, #12]
 c004b1c:	60b9      	str	r1, [r7, #8]
 c004b1e:	607a      	str	r2, [r7, #4]
 c004b20:	603b      	str	r3, [r7, #0]
    uECC_word_t t1[uECC_MAX_WORDS];

    uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 c004b22:	f107 0310 	add.w	r3, r7, #16
 c004b26:	683a      	ldr	r2, [r7, #0]
 c004b28:	6879      	ldr	r1, [r7, #4]
 c004b2a:	4618      	mov	r0, r3
 c004b2c:	f7ff fbba 	bl	c0042a4 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 c004b30:	f107 0210 	add.w	r2, r7, #16
 c004b34:	683b      	ldr	r3, [r7, #0]
 c004b36:	68f9      	ldr	r1, [r7, #12]
 c004b38:	68f8      	ldr	r0, [r7, #12]
 c004b3a:	f7ff fb97 	bl	c00426c <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 c004b3e:	f107 0110 	add.w	r1, r7, #16
 c004b42:	f107 0010 	add.w	r0, r7, #16
 c004b46:	683b      	ldr	r3, [r7, #0]
 c004b48:	687a      	ldr	r2, [r7, #4]
 c004b4a:	f7ff fb8f 	bl	c00426c <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 c004b4e:	f107 0210 	add.w	r2, r7, #16
 c004b52:	683b      	ldr	r3, [r7, #0]
 c004b54:	68b9      	ldr	r1, [r7, #8]
 c004b56:	68b8      	ldr	r0, [r7, #8]
 c004b58:	f7ff fb88 	bl	c00426c <uECC_vli_modMult_fast>
}
 c004b5c:	bf00      	nop
 c004b5e:	3730      	adds	r7, #48	; 0x30
 c004b60:	46bd      	mov	sp, r7
 c004b62:	bd80      	pop	{r7, pc}

0c004b64 <XYcZ_add>:
*/
static void XYcZ_add(uECC_word_t * X1,
                     uECC_word_t * Y1,
                     uECC_word_t * X2,
                     uECC_word_t * Y2,
                     uECC_Curve curve) {
 c004b64:	b580      	push	{r7, lr}
 c004b66:	b090      	sub	sp, #64	; 0x40
 c004b68:	af02      	add	r7, sp, #8
 c004b6a:	60f8      	str	r0, [r7, #12]
 c004b6c:	60b9      	str	r1, [r7, #8]
 c004b6e:	607a      	str	r2, [r7, #4]
 c004b70:	603b      	str	r3, [r7, #0]
    /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
    uECC_word_t t5[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
 c004b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004b74:	781b      	ldrb	r3, [r3, #0]
 c004b76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 c004b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004b7c:	1d1a      	adds	r2, r3, #4
 c004b7e:	f107 0014 	add.w	r0, r7, #20
 c004b82:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c004b86:	9300      	str	r3, [sp, #0]
 c004b88:	4613      	mov	r3, r2
 c004b8a:	68fa      	ldr	r2, [r7, #12]
 c004b8c:	6879      	ldr	r1, [r7, #4]
 c004b8e:	f7ff f9f9 	bl	c003f84 <uECC_vli_modSub>
    uECC_vli_modSquare_fast(t5, t5, curve);                  /* t5 = (x2 - x1)^2 = A */
 c004b92:	f107 0114 	add.w	r1, r7, #20
 c004b96:	f107 0314 	add.w	r3, r7, #20
 c004b9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 c004b9c:	4618      	mov	r0, r3
 c004b9e:	f7ff fb81 	bl	c0042a4 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = x1*A = B */
 c004ba2:	f107 0214 	add.w	r2, r7, #20
 c004ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004ba8:	68f9      	ldr	r1, [r7, #12]
 c004baa:	68f8      	ldr	r0, [r7, #12]
 c004bac:	f7ff fb5e 	bl	c00426c <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(X2, X2, t5, curve);                /* t3 = x2*A = C */
 c004bb0:	f107 0214 	add.w	r2, r7, #20
 c004bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004bb6:	6879      	ldr	r1, [r7, #4]
 c004bb8:	6878      	ldr	r0, [r7, #4]
 c004bba:	f7ff fb57 	bl	c00426c <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 c004bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004bc0:	1d1a      	adds	r2, r3, #4
 c004bc2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c004bc6:	9300      	str	r3, [sp, #0]
 c004bc8:	4613      	mov	r3, r2
 c004bca:	68ba      	ldr	r2, [r7, #8]
 c004bcc:	6839      	ldr	r1, [r7, #0]
 c004bce:	6838      	ldr	r0, [r7, #0]
 c004bd0:	f7ff f9d8 	bl	c003f84 <uECC_vli_modSub>
    uECC_vli_modSquare_fast(t5, Y2, curve);                  /* t5 = (y2 - y1)^2 = D */
 c004bd4:	f107 0314 	add.w	r3, r7, #20
 c004bd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 c004bda:	6839      	ldr	r1, [r7, #0]
 c004bdc:	4618      	mov	r0, r3
 c004bde:	f7ff fb61 	bl	c0042a4 <uECC_vli_modSquare_fast>

    uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 c004be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004be4:	1d1a      	adds	r2, r3, #4
 c004be6:	f107 0114 	add.w	r1, r7, #20
 c004bea:	f107 0014 	add.w	r0, r7, #20
 c004bee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c004bf2:	9300      	str	r3, [sp, #0]
 c004bf4:	4613      	mov	r3, r2
 c004bf6:	68fa      	ldr	r2, [r7, #12]
 c004bf8:	f7ff f9c4 	bl	c003f84 <uECC_vli_modSub>
    uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 c004bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004bfe:	1d1a      	adds	r2, r3, #4
 c004c00:	f107 0114 	add.w	r1, r7, #20
 c004c04:	f107 0014 	add.w	r0, r7, #20
 c004c08:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c004c0c:	9300      	str	r3, [sp, #0]
 c004c0e:	4613      	mov	r3, r2
 c004c10:	687a      	ldr	r2, [r7, #4]
 c004c12:	f7ff f9b7 	bl	c003f84 <uECC_vli_modSub>
    uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 c004c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004c18:	1d1a      	adds	r2, r3, #4
 c004c1a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c004c1e:	9300      	str	r3, [sp, #0]
 c004c20:	4613      	mov	r3, r2
 c004c22:	68fa      	ldr	r2, [r7, #12]
 c004c24:	6879      	ldr	r1, [r7, #4]
 c004c26:	6878      	ldr	r0, [r7, #4]
 c004c28:	f7ff f9ac 	bl	c003f84 <uECC_vli_modSub>
    uECC_vli_modMult_fast(Y1, Y1, X2, curve);                /* t2 = y1*(C - B) */
 c004c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004c2e:	687a      	ldr	r2, [r7, #4]
 c004c30:	68b9      	ldr	r1, [r7, #8]
 c004c32:	68b8      	ldr	r0, [r7, #8]
 c004c34:	f7ff fb1a 	bl	c00426c <uECC_vli_modMult_fast>
    uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 c004c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004c3a:	1d19      	adds	r1, r3, #4
 c004c3c:	f107 0214 	add.w	r2, r7, #20
 c004c40:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c004c44:	9300      	str	r3, [sp, #0]
 c004c46:	460b      	mov	r3, r1
 c004c48:	68f9      	ldr	r1, [r7, #12]
 c004c4a:	6878      	ldr	r0, [r7, #4]
 c004c4c:	f7ff f99a 	bl	c003f84 <uECC_vli_modSub>
    uECC_vli_modMult_fast(Y2, Y2, X2, curve);                /* t4 = (y2 - y1)*(B - x3) */
 c004c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004c52:	687a      	ldr	r2, [r7, #4]
 c004c54:	6839      	ldr	r1, [r7, #0]
 c004c56:	6838      	ldr	r0, [r7, #0]
 c004c58:	f7ff fb08 	bl	c00426c <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 c004c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004c5e:	1d1a      	adds	r2, r3, #4
 c004c60:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c004c64:	9300      	str	r3, [sp, #0]
 c004c66:	4613      	mov	r3, r2
 c004c68:	68ba      	ldr	r2, [r7, #8]
 c004c6a:	6839      	ldr	r1, [r7, #0]
 c004c6c:	6838      	ldr	r0, [r7, #0]
 c004c6e:	f7ff f989 	bl	c003f84 <uECC_vli_modSub>

    uECC_vli_set(X2, t5, num_words);
 c004c72:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 c004c76:	f107 0314 	add.w	r3, r7, #20
 c004c7a:	4619      	mov	r1, r3
 c004c7c:	6878      	ldr	r0, [r7, #4]
 c004c7e:	f7ff f89b 	bl	c003db8 <uECC_vli_set>
}
 c004c82:	bf00      	nop
 c004c84:	3738      	adds	r7, #56	; 0x38
 c004c86:	46bd      	mov	sp, r7
 c004c88:	bd80      	pop	{r7, pc}

0c004c8a <uECC_vli_bytesToNative>:
    }
}

uECC_VLI_API void uECC_vli_bytesToNative(uECC_word_t *native,
                                         const uint8_t *bytes,
                                         int num_bytes) {
 c004c8a:	b580      	push	{r7, lr}
 c004c8c:	b086      	sub	sp, #24
 c004c8e:	af00      	add	r7, sp, #0
 c004c90:	60f8      	str	r0, [r7, #12]
 c004c92:	60b9      	str	r1, [r7, #8]
 c004c94:	607a      	str	r2, [r7, #4]
    int i;
    uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 c004c96:	687b      	ldr	r3, [r7, #4]
 c004c98:	3303      	adds	r3, #3
 c004c9a:	2b00      	cmp	r3, #0
 c004c9c:	da00      	bge.n	c004ca0 <uECC_vli_bytesToNative+0x16>
 c004c9e:	3303      	adds	r3, #3
 c004ca0:	109b      	asrs	r3, r3, #2
 c004ca2:	b25b      	sxtb	r3, r3
 c004ca4:	4619      	mov	r1, r3
 c004ca6:	68f8      	ldr	r0, [r7, #12]
 c004ca8:	f7fe ffc1 	bl	c003c2e <uECC_vli_clear>
    for (i = 0; i < num_bytes; ++i) {
 c004cac:	2300      	movs	r3, #0
 c004cae:	617b      	str	r3, [r7, #20]
 c004cb0:	e01e      	b.n	c004cf0 <uECC_vli_bytesToNative+0x66>
        unsigned b = num_bytes - 1 - i;
 c004cb2:	687b      	ldr	r3, [r7, #4]
 c004cb4:	1e5a      	subs	r2, r3, #1
 c004cb6:	697b      	ldr	r3, [r7, #20]
 c004cb8:	1ad3      	subs	r3, r2, r3
 c004cba:	613b      	str	r3, [r7, #16]
        native[b / uECC_WORD_SIZE] |=
 c004cbc:	693b      	ldr	r3, [r7, #16]
 c004cbe:	f023 0303 	bic.w	r3, r3, #3
 c004cc2:	68fa      	ldr	r2, [r7, #12]
 c004cc4:	4413      	add	r3, r2
 c004cc6:	6819      	ldr	r1, [r3, #0]
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
 c004cc8:	697b      	ldr	r3, [r7, #20]
 c004cca:	68ba      	ldr	r2, [r7, #8]
 c004ccc:	4413      	add	r3, r2
 c004cce:	781b      	ldrb	r3, [r3, #0]
 c004cd0:	461a      	mov	r2, r3
 c004cd2:	693b      	ldr	r3, [r7, #16]
 c004cd4:	f003 0303 	and.w	r3, r3, #3
 c004cd8:	00db      	lsls	r3, r3, #3
 c004cda:	409a      	lsls	r2, r3
        native[b / uECC_WORD_SIZE] |=
 c004cdc:	693b      	ldr	r3, [r7, #16]
 c004cde:	f023 0303 	bic.w	r3, r3, #3
 c004ce2:	68f8      	ldr	r0, [r7, #12]
 c004ce4:	4403      	add	r3, r0
 c004ce6:	430a      	orrs	r2, r1
 c004ce8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_bytes; ++i) {
 c004cea:	697b      	ldr	r3, [r7, #20]
 c004cec:	3301      	adds	r3, #1
 c004cee:	617b      	str	r3, [r7, #20]
 c004cf0:	697a      	ldr	r2, [r7, #20]
 c004cf2:	687b      	ldr	r3, [r7, #4]
 c004cf4:	429a      	cmp	r2, r3
 c004cf6:	dbdc      	blt.n	c004cb2 <uECC_vli_bytesToNative+0x28>
    }
}
 c004cf8:	bf00      	nop
 c004cfa:	bf00      	nop
 c004cfc:	3718      	adds	r7, #24
 c004cfe:	46bd      	mov	sp, r7
 c004d00:	bd80      	pop	{r7, pc}

0c004d02 <bits2int>:
/* -------- ECDSA code -------- */

static void bits2int(uECC_word_t *native,
                     const uint8_t *bits,
                     unsigned bits_size,
                     uECC_Curve curve) {
 c004d02:	b580      	push	{r7, lr}
 c004d04:	b08a      	sub	sp, #40	; 0x28
 c004d06:	af00      	add	r7, sp, #0
 c004d08:	60f8      	str	r0, [r7, #12]
 c004d0a:	60b9      	str	r1, [r7, #8]
 c004d0c:	607a      	str	r2, [r7, #4]
 c004d0e:	603b      	str	r3, [r7, #0]
    unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
 c004d10:	683b      	ldr	r3, [r7, #0]
 c004d12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c004d16:	3307      	adds	r3, #7
 c004d18:	2b00      	cmp	r3, #0
 c004d1a:	da00      	bge.n	c004d1e <bits2int+0x1c>
 c004d1c:	3307      	adds	r3, #7
 c004d1e:	10db      	asrs	r3, r3, #3
 c004d20:	61fb      	str	r3, [r7, #28]
    unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 c004d22:	683b      	ldr	r3, [r7, #0]
 c004d24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c004d28:	331f      	adds	r3, #31
 c004d2a:	2b00      	cmp	r3, #0
 c004d2c:	da00      	bge.n	c004d30 <bits2int+0x2e>
 c004d2e:	331f      	adds	r3, #31
 c004d30:	115b      	asrs	r3, r3, #5
 c004d32:	61bb      	str	r3, [r7, #24]
    int shift;
    uECC_word_t carry;
    uECC_word_t *ptr;

    if (bits_size > num_n_bytes) {
 c004d34:	687a      	ldr	r2, [r7, #4]
 c004d36:	69fb      	ldr	r3, [r7, #28]
 c004d38:	429a      	cmp	r2, r3
 c004d3a:	d901      	bls.n	c004d40 <bits2int+0x3e>
        bits_size = num_n_bytes;
 c004d3c:	69fb      	ldr	r3, [r7, #28]
 c004d3e:	607b      	str	r3, [r7, #4]
    }

    uECC_vli_clear(native, num_n_words);
 c004d40:	69bb      	ldr	r3, [r7, #24]
 c004d42:	b25b      	sxtb	r3, r3
 c004d44:	4619      	mov	r1, r3
 c004d46:	68f8      	ldr	r0, [r7, #12]
 c004d48:	f7fe ff71 	bl	c003c2e <uECC_vli_clear>
#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) native, bits, bits_size);
#else
    uECC_vli_bytesToNative(native, bits, bits_size);
 c004d4c:	687b      	ldr	r3, [r7, #4]
 c004d4e:	461a      	mov	r2, r3
 c004d50:	68b9      	ldr	r1, [r7, #8]
 c004d52:	68f8      	ldr	r0, [r7, #12]
 c004d54:	f7ff ff99 	bl	c004c8a <uECC_vli_bytesToNative>
#endif
    if (bits_size * 8 <= (unsigned)curve->num_n_bits) {
 c004d58:	687b      	ldr	r3, [r7, #4]
 c004d5a:	00db      	lsls	r3, r3, #3
 c004d5c:	683a      	ldr	r2, [r7, #0]
 c004d5e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 c004d62:	4293      	cmp	r3, r2
 c004d64:	d93a      	bls.n	c004ddc <bits2int+0xda>
        return;
    }
    shift = bits_size * 8 - curve->num_n_bits;
 c004d66:	687b      	ldr	r3, [r7, #4]
 c004d68:	00db      	lsls	r3, r3, #3
 c004d6a:	683a      	ldr	r2, [r7, #0]
 c004d6c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 c004d70:	1a9b      	subs	r3, r3, r2
 c004d72:	617b      	str	r3, [r7, #20]
    carry = 0;
 c004d74:	2300      	movs	r3, #0
 c004d76:	627b      	str	r3, [r7, #36]	; 0x24
    ptr = native + num_n_words;
 c004d78:	69bb      	ldr	r3, [r7, #24]
 c004d7a:	009b      	lsls	r3, r3, #2
 c004d7c:	68fa      	ldr	r2, [r7, #12]
 c004d7e:	4413      	add	r3, r2
 c004d80:	623b      	str	r3, [r7, #32]
    while (ptr-- > native) {
 c004d82:	e010      	b.n	c004da6 <bits2int+0xa4>
        uECC_word_t temp = *ptr;
 c004d84:	6a3b      	ldr	r3, [r7, #32]
 c004d86:	681b      	ldr	r3, [r3, #0]
 c004d88:	613b      	str	r3, [r7, #16]
        *ptr = (temp >> shift) | carry;
 c004d8a:	693a      	ldr	r2, [r7, #16]
 c004d8c:	697b      	ldr	r3, [r7, #20]
 c004d8e:	40da      	lsrs	r2, r3
 c004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004d92:	431a      	orrs	r2, r3
 c004d94:	6a3b      	ldr	r3, [r7, #32]
 c004d96:	601a      	str	r2, [r3, #0]
        carry = temp << (uECC_WORD_BITS - shift);
 c004d98:	697b      	ldr	r3, [r7, #20]
 c004d9a:	f1c3 0320 	rsb	r3, r3, #32
 c004d9e:	693a      	ldr	r2, [r7, #16]
 c004da0:	fa02 f303 	lsl.w	r3, r2, r3
 c004da4:	627b      	str	r3, [r7, #36]	; 0x24
    while (ptr-- > native) {
 c004da6:	6a3b      	ldr	r3, [r7, #32]
 c004da8:	1f1a      	subs	r2, r3, #4
 c004daa:	623a      	str	r2, [r7, #32]
 c004dac:	68fa      	ldr	r2, [r7, #12]
 c004dae:	429a      	cmp	r2, r3
 c004db0:	d3e8      	bcc.n	c004d84 <bits2int+0x82>
    }

    /* Reduce mod curve_n */
    if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {
 c004db2:	683b      	ldr	r3, [r7, #0]
 c004db4:	3324      	adds	r3, #36	; 0x24
 c004db6:	69ba      	ldr	r2, [r7, #24]
 c004db8:	b252      	sxtb	r2, r2
 c004dba:	68f9      	ldr	r1, [r7, #12]
 c004dbc:	4618      	mov	r0, r3
 c004dbe:	f7ff f822 	bl	c003e06 <uECC_vli_cmp_unsafe>
 c004dc2:	4603      	mov	r3, r0
 c004dc4:	2b01      	cmp	r3, #1
 c004dc6:	d00a      	beq.n	c004dde <bits2int+0xdc>
        uECC_vli_sub(native, native, curve->n, num_n_words);
 c004dc8:	683b      	ldr	r3, [r7, #0]
 c004dca:	f103 0224 	add.w	r2, r3, #36	; 0x24
 c004dce:	69bb      	ldr	r3, [r7, #24]
 c004dd0:	b25b      	sxtb	r3, r3
 c004dd2:	68f9      	ldr	r1, [r7, #12]
 c004dd4:	68f8      	ldr	r0, [r7, #12]
 c004dd6:	f7fe fe8b 	bl	c003af0 <uECC_vli_sub>
 c004dda:	e000      	b.n	c004dde <bits2int+0xdc>
        return;
 c004ddc:	bf00      	nop
    }
}
 c004dde:	3728      	adds	r7, #40	; 0x28
 c004de0:	46bd      	mov	sp, r7
 c004de2:	bd80      	pop	{r7, pc}

0c004de4 <smax>:
        update_V(hash_context, K, V);
    }
    return 0;
}

static bitcount_t smax(bitcount_t a, bitcount_t b) {
 c004de4:	b480      	push	{r7}
 c004de6:	b083      	sub	sp, #12
 c004de8:	af00      	add	r7, sp, #0
 c004dea:	4603      	mov	r3, r0
 c004dec:	460a      	mov	r2, r1
 c004dee:	80fb      	strh	r3, [r7, #6]
 c004df0:	4613      	mov	r3, r2
 c004df2:	80bb      	strh	r3, [r7, #4]
    return (a > b ? a : b);
 c004df4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 c004df8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c004dfc:	4293      	cmp	r3, r2
 c004dfe:	bfb8      	it	lt
 c004e00:	4613      	movlt	r3, r2
 c004e02:	b21b      	sxth	r3, r3
}
 c004e04:	4618      	mov	r0, r3
 c004e06:	370c      	adds	r7, #12
 c004e08:	46bd      	mov	sp, r7
 c004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004e0e:	4770      	bx	lr

0c004e10 <uECC_verify>:

int uECC_verify(const uint8_t *public_key,
                const uint8_t *message_hash,
                unsigned hash_size,
                const uint8_t *signature,
                uECC_Curve curve) {
 c004e10:	b590      	push	{r4, r7, lr}
 c004e12:	b0ff      	sub	sp, #508	; 0x1fc
 c004e14:	af02      	add	r7, sp, #8
 c004e16:	f507 74f8 	add.w	r4, r7, #496	; 0x1f0
 c004e1a:	f5a4 74f2 	sub.w	r4, r4, #484	; 0x1e4
 c004e1e:	6020      	str	r0, [r4, #0]
 c004e20:	f507 70f8 	add.w	r0, r7, #496	; 0x1f0
 c004e24:	f5a0 70f4 	sub.w	r0, r0, #488	; 0x1e8
 c004e28:	6001      	str	r1, [r0, #0]
 c004e2a:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 c004e2e:	f5a1 71f6 	sub.w	r1, r1, #492	; 0x1ec
 c004e32:	600a      	str	r2, [r1, #0]
 c004e34:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 c004e38:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 c004e3c:	6013      	str	r3, [r2, #0]
    uECC_word_t *_public = (uECC_word_t *)public_key;
#else
    uECC_word_t _public[uECC_MAX_WORDS * 2];
#endif
    uECC_word_t r[uECC_MAX_WORDS], s[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
 c004e3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004e42:	781b      	ldrb	r3, [r3, #0]
 c004e44:	f887 31ed 	strb.w	r3, [r7, #493]	; 0x1ed
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 c004e48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004e4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c004e50:	331f      	adds	r3, #31
 c004e52:	2b00      	cmp	r3, #0
 c004e54:	da00      	bge.n	c004e58 <uECC_verify+0x48>
 c004e56:	331f      	adds	r3, #31
 c004e58:	115b      	asrs	r3, r3, #5
 c004e5a:	f887 31ec 	strb.w	r3, [r7, #492]	; 0x1ec

    rx[num_n_words - 1] = 0;
 c004e5e:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004e62:	3b01      	subs	r3, #1
 c004e64:	009b      	lsls	r3, r3, #2
 c004e66:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 c004e6a:	443b      	add	r3, r7
 c004e6c:	2200      	movs	r2, #0
 c004e6e:	f843 2cd0 	str.w	r2, [r3, #-208]
    r[num_n_words - 1] = 0;
 c004e72:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004e76:	1e5a      	subs	r2, r3, #1
 c004e78:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004e7c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 c004e80:	2100      	movs	r1, #0
 c004e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    s[num_n_words - 1] = 0;
 c004e86:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004e8a:	1e5a      	subs	r2, r3, #1
 c004e8c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004e90:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 c004e94:	2100      	movs	r1, #0
 c004e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) r, signature, curve->num_bytes);
    bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
#else
    uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
 c004e9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004e9e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c004ea2:	461a      	mov	r2, r3
 c004ea4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004ea8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 c004eac:	f107 0050 	add.w	r0, r7, #80	; 0x50
 c004eb0:	6819      	ldr	r1, [r3, #0]
 c004eb2:	f7ff feea 	bl	c004c8a <uECC_vli_bytesToNative>
    uECC_vli_bytesToNative(
        _public + num_words, public_key + curve->num_bytes, curve->num_bytes);
 c004eb6:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004eba:	009b      	lsls	r3, r3, #2
    uECC_vli_bytesToNative(
 c004ebc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 c004ec0:	18d0      	adds	r0, r2, r3
        _public + num_words, public_key + curve->num_bytes, curve->num_bytes);
 c004ec2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004ec6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c004eca:	461a      	mov	r2, r3
    uECC_vli_bytesToNative(
 c004ecc:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004ed0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 c004ed4:	681b      	ldr	r3, [r3, #0]
 c004ed6:	1899      	adds	r1, r3, r2
        _public + num_words, public_key + curve->num_bytes, curve->num_bytes);
 c004ed8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004edc:	f993 3001 	ldrsb.w	r3, [r3, #1]
    uECC_vli_bytesToNative(
 c004ee0:	461a      	mov	r2, r3
 c004ee2:	f7ff fed2 	bl	c004c8a <uECC_vli_bytesToNative>
    uECC_vli_bytesToNative(r, signature, curve->num_bytes);
 c004ee6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004eea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c004eee:	461a      	mov	r2, r3
 c004ef0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004ef4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 c004ef8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 c004efc:	6819      	ldr	r1, [r3, #0]
 c004efe:	f7ff fec4 	bl	c004c8a <uECC_vli_bytesToNative>
    uECC_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 c004f02:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004f06:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c004f0a:	461a      	mov	r2, r3
 c004f0c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004f10:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 c004f14:	681b      	ldr	r3, [r3, #0]
 c004f16:	1899      	adds	r1, r3, r2
 c004f18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004f1c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c004f20:	461a      	mov	r2, r3
 c004f22:	f107 0310 	add.w	r3, r7, #16
 c004f26:	4618      	mov	r0, r3
 c004f28:	f7ff feaf 	bl	c004c8a <uECC_vli_bytesToNative>
#endif

    /* r, s must not be 0. */
    if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
 c004f2c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004f30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 c004f34:	4611      	mov	r1, r2
 c004f36:	4618      	mov	r0, r3
 c004f38:	f7fe fe9a 	bl	c003c70 <uECC_vli_isZero>
 c004f3c:	4603      	mov	r3, r0
 c004f3e:	2b00      	cmp	r3, #0
 c004f40:	d10a      	bne.n	c004f58 <uECC_verify+0x148>
 c004f42:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004f46:	f107 0310 	add.w	r3, r7, #16
 c004f4a:	4611      	mov	r1, r2
 c004f4c:	4618      	mov	r0, r3
 c004f4e:	f7fe fe8f 	bl	c003c70 <uECC_vli_isZero>
 c004f52:	4603      	mov	r3, r0
 c004f54:	2b00      	cmp	r3, #0
 c004f56:	d001      	beq.n	c004f5c <uECC_verify+0x14c>
        return 0;
 c004f58:	2300      	movs	r3, #0
 c004f5a:	e220      	b.n	c00539e <uECC_verify+0x58e>
    }

    /* r, s must be < n. */
    if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 c004f5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004f60:	3324      	adds	r3, #36	; 0x24
 c004f62:	f997 21ec 	ldrsb.w	r2, [r7, #492]	; 0x1ec
 c004f66:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c004f6a:	4618      	mov	r0, r3
 c004f6c:	f7fe ff4b 	bl	c003e06 <uECC_vli_cmp_unsafe>
 c004f70:	4603      	mov	r3, r0
 c004f72:	2b01      	cmp	r3, #1
 c004f74:	d10c      	bne.n	c004f90 <uECC_verify+0x180>
            uECC_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 c004f76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004f7a:	3324      	adds	r3, #36	; 0x24
 c004f7c:	f997 21ec 	ldrsb.w	r2, [r7, #492]	; 0x1ec
 c004f80:	f107 0110 	add.w	r1, r7, #16
 c004f84:	4618      	mov	r0, r3
 c004f86:	f7fe ff3e 	bl	c003e06 <uECC_vli_cmp_unsafe>
 c004f8a:	4603      	mov	r3, r0
    if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 c004f8c:	2b01      	cmp	r3, #1
 c004f8e:	d001      	beq.n	c004f94 <uECC_verify+0x184>
        return 0;
 c004f90:	2300      	movs	r3, #0
 c004f92:	e204      	b.n	c00539e <uECC_verify+0x58e>
    }

    /* Calculate u1 and u2. */
    uECC_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 c004f94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004f98:	f103 0224 	add.w	r2, r3, #36	; 0x24
 c004f9c:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004fa0:	f107 0110 	add.w	r1, r7, #16
 c004fa4:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 c004fa8:	f7ff f9c4 	bl	c004334 <uECC_vli_modInv>
    u1[num_n_words - 1] = 0;
 c004fac:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004fb0:	3b01      	subs	r3, #1
 c004fb2:	009b      	lsls	r3, r3, #2
 c004fb4:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 c004fb8:	443b      	add	r3, r7
 c004fba:	2200      	movs	r2, #0
 c004fbc:	f843 2c30 	str.w	r2, [r3, #-48]
    bits2int(u1, message_hash, hash_size, curve);
 c004fc0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004fc4:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 c004fc8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004fcc:	f5a3 71f4 	sub.w	r1, r3, #488	; 0x1e8
 c004fd0:	f507 70e0 	add.w	r0, r7, #448	; 0x1c0
 c004fd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004fd8:	6812      	ldr	r2, [r2, #0]
 c004fda:	6809      	ldr	r1, [r1, #0]
 c004fdc:	f7ff fe91 	bl	c004d02 <bits2int>
    uECC_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 c004fe0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004fe4:	f103 0424 	add.w	r4, r3, #36	; 0x24
 c004fe8:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c004fec:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 c004ff0:	f507 70e0 	add.w	r0, r7, #448	; 0x1c0
 c004ff4:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004ff8:	9300      	str	r3, [sp, #0]
 c004ffa:	4623      	mov	r3, r4
 c004ffc:	f7ff f91b 	bl	c004236 <uECC_vli_modMult>
    uECC_vli_modMult(u2, r, z, curve->n, num_n_words); /* u2 = r/s */
 c005000:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c005004:	f103 0424 	add.w	r4, r3, #36	; 0x24
 c005008:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c00500c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c005010:	f507 70d0 	add.w	r0, r7, #416	; 0x1a0
 c005014:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c005018:	9300      	str	r3, [sp, #0]
 c00501a:	4623      	mov	r3, r4
 c00501c:	f7ff f90b 	bl	c004236 <uECC_vli_modMult>

    /* Calculate sum = G + Q. */
    uECC_vli_set(sum, _public, num_words);
 c005020:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c005024:	f107 0150 	add.w	r1, r7, #80	; 0x50
 c005028:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 c00502c:	4618      	mov	r0, r3
 c00502e:	f7fe fec3 	bl	c003db8 <uECC_vli_set>
    uECC_vli_set(sum + num_words, _public + num_words, num_words);
 c005032:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c005036:	009b      	lsls	r3, r3, #2
 c005038:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 c00503c:	18d0      	adds	r0, r2, r3
 c00503e:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c005042:	009b      	lsls	r3, r3, #2
 c005044:	f107 0250 	add.w	r2, r7, #80	; 0x50
 c005048:	4413      	add	r3, r2
 c00504a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c00504e:	4619      	mov	r1, r3
 c005050:	f7fe feb2 	bl	c003db8 <uECC_vli_set>
    uECC_vli_set(tx, curve->G, num_words);
 c005054:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c005058:	f103 0144 	add.w	r1, r3, #68	; 0x44
 c00505c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c005060:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 c005064:	4618      	mov	r0, r3
 c005066:	f7fe fea7 	bl	c003db8 <uECC_vli_set>
    uECC_vli_set(ty, curve->G + num_words, num_words);
 c00506a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00506e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 c005072:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c005076:	009b      	lsls	r3, r3, #2
 c005078:	18d1      	adds	r1, r2, r3
 c00507a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c00507e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 c005082:	4618      	mov	r0, r3
 c005084:	f7fe fe98 	bl	c003db8 <uECC_vli_set>
    uECC_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 c005088:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00508c:	1d1c      	adds	r4, r3, #4
 c00508e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 c005092:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 c005096:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 c00509a:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c00509e:	9300      	str	r3, [sp, #0]
 c0050a0:	4623      	mov	r3, r4
 c0050a2:	f7fe ff6f 	bl	c003f84 <uECC_vli_modSub>
    XYcZ_add(tx, ty, sum, sum + num_words, curve);
 c0050a6:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c0050aa:	009b      	lsls	r3, r3, #2
 c0050ac:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 c0050b0:	18d4      	adds	r4, r2, r3
 c0050b2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 c0050b6:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 c0050ba:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 c0050be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0050c2:	9300      	str	r3, [sp, #0]
 c0050c4:	4623      	mov	r3, r4
 c0050c6:	f7ff fd4d 	bl	c004b64 <XYcZ_add>
    uECC_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 c0050ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0050ce:	1d1a      	adds	r2, r3, #4
 c0050d0:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c0050d4:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 c0050d8:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 c0050dc:	f7ff f92a 	bl	c004334 <uECC_vli_modInv>
    apply_z(sum, sum + num_words, z, curve);
 c0050e0:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c0050e4:	009b      	lsls	r3, r3, #2
 c0050e6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 c0050ea:	18d1      	adds	r1, r2, r3
 c0050ec:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c0050f0:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 c0050f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0050f8:	f7ff fd0c 	bl	c004b14 <apply_z>

    /* Use Shamir's trick to calculate u1*G + u2*Q */
    points[0] = 0;
 c0050fc:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c005100:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c005104:	2200      	movs	r2, #0
 c005106:	601a      	str	r2, [r3, #0]
    points[1] = curve->G;
 c005108:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00510c:	f103 0244 	add.w	r2, r3, #68	; 0x44
 c005110:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c005114:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c005118:	605a      	str	r2, [r3, #4]
    points[2] = _public;
 c00511a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c00511e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c005122:	f107 0250 	add.w	r2, r7, #80	; 0x50
 c005126:	609a      	str	r2, [r3, #8]
    points[3] = sum;
 c005128:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c00512c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c005130:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 c005134:	60da      	str	r2, [r3, #12]
    num_bits = smax(uECC_vli_numBits(u1, num_n_words),
 c005136:	f997 21ec 	ldrsb.w	r2, [r7, #492]	; 0x1ec
 c00513a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 c00513e:	4611      	mov	r1, r2
 c005140:	4618      	mov	r0, r3
 c005142:	f7fe fdff 	bl	c003d44 <uECC_vli_numBits>
 c005146:	4603      	mov	r3, r0
 c005148:	461c      	mov	r4, r3
 c00514a:	f997 21ec 	ldrsb.w	r2, [r7, #492]	; 0x1ec
 c00514e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 c005152:	4611      	mov	r1, r2
 c005154:	4618      	mov	r0, r3
 c005156:	f7fe fdf5 	bl	c003d44 <uECC_vli_numBits>
 c00515a:	4603      	mov	r3, r0
 c00515c:	4619      	mov	r1, r3
 c00515e:	4620      	mov	r0, r4
 c005160:	f7ff fe40 	bl	c004de4 <smax>
 c005164:	4603      	mov	r3, r0
 c005166:	f8a7 31ea 	strh.w	r3, [r7, #490]	; 0x1ea
                    uECC_vli_numBits(u2, num_n_words));

    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 c00516a:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
 c00516e:	3b01      	subs	r3, #1
 c005170:	b29b      	uxth	r3, r3
 c005172:	b21a      	sxth	r2, r3
 c005174:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 c005178:	4611      	mov	r1, r2
 c00517a:	4618      	mov	r0, r3
 c00517c:	f7fe fda2 	bl	c003cc4 <uECC_vli_testBit>
 c005180:	4603      	mov	r3, r0
 c005182:	2b00      	cmp	r3, #0
 c005184:	bf14      	ite	ne
 c005186:	2301      	movne	r3, #1
 c005188:	2300      	moveq	r3, #0
 c00518a:	b2db      	uxtb	r3, r3
 c00518c:	461c      	mov	r4, r3
                   ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
 c00518e:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
 c005192:	3b01      	subs	r3, #1
 c005194:	b29b      	uxth	r3, r3
 c005196:	b21a      	sxth	r2, r3
 c005198:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 c00519c:	4611      	mov	r1, r2
 c00519e:	4618      	mov	r0, r3
 c0051a0:	f7fe fd90 	bl	c003cc4 <uECC_vli_testBit>
 c0051a4:	4603      	mov	r3, r0
 c0051a6:	2b00      	cmp	r3, #0
 c0051a8:	d001      	beq.n	c0051ae <uECC_verify+0x39e>
 c0051aa:	2302      	movs	r3, #2
 c0051ac:	e000      	b.n	c0051b0 <uECC_verify+0x3a0>
 c0051ae:	2300      	movs	r3, #0
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 c0051b0:	ea43 0204 	orr.w	r2, r3, r4
 c0051b4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c0051b8:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c0051bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c0051c0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    uECC_vli_set(rx, point, num_words);
 c0051c4:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c0051c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 c0051cc:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 c0051d0:	4618      	mov	r0, r3
 c0051d2:	f7fe fdf1 	bl	c003db8 <uECC_vli_set>
    uECC_vli_set(ry, point + num_words, num_words);
 c0051d6:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c0051da:	009b      	lsls	r3, r3, #2
 c0051dc:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 c0051e0:	18d1      	adds	r1, r2, r3
 c0051e2:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c0051e6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 c0051ea:	4618      	mov	r0, r3
 c0051ec:	f7fe fde4 	bl	c003db8 <uECC_vli_set>
    uECC_vli_clear(z, num_words);
 c0051f0:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c0051f4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 c0051f8:	4611      	mov	r1, r2
 c0051fa:	4618      	mov	r0, r3
 c0051fc:	f7fe fd17 	bl	c003c2e <uECC_vli_clear>
    z[0] = 1;
 c005200:	2301      	movs	r3, #1
 c005202:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

    for (i = num_bits - 2; i >= 0; --i) {
 c005206:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
 c00520a:	3b02      	subs	r3, #2
 c00520c:	b29b      	uxth	r3, r3
 c00520e:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
 c005212:	e087      	b.n	c005324 <uECC_verify+0x514>
        uECC_word_t index;
        curve->double_jacobian(rx, ry, z, curve);
 c005214:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c005218:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
 c00521c:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c005220:	f507 7180 	add.w	r1, r7, #256	; 0x100
 c005224:	f507 7090 	add.w	r0, r7, #288	; 0x120
 c005228:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00522c:	47a0      	blx	r4

        index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
 c00522e:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	; 0x1ee
 c005232:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 c005236:	4611      	mov	r1, r2
 c005238:	4618      	mov	r0, r3
 c00523a:	f7fe fd43 	bl	c003cc4 <uECC_vli_testBit>
 c00523e:	4603      	mov	r3, r0
 c005240:	2b00      	cmp	r3, #0
 c005242:	bf14      	ite	ne
 c005244:	2301      	movne	r3, #1
 c005246:	2300      	moveq	r3, #0
 c005248:	b2db      	uxtb	r3, r3
 c00524a:	461c      	mov	r4, r3
 c00524c:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	; 0x1ee
 c005250:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 c005254:	4611      	mov	r1, r2
 c005256:	4618      	mov	r0, r3
 c005258:	f7fe fd34 	bl	c003cc4 <uECC_vli_testBit>
 c00525c:	4603      	mov	r3, r0
 c00525e:	2b00      	cmp	r3, #0
 c005260:	d001      	beq.n	c005266 <uECC_verify+0x456>
 c005262:	2302      	movs	r3, #2
 c005264:	e000      	b.n	c005268 <uECC_verify+0x458>
 c005266:	2300      	movs	r3, #0
 c005268:	4323      	orrs	r3, r4
 c00526a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        point = points[index];
 c00526e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c005272:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c005276:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 c00527a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c00527e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
        if (point) {
 c005282:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 c005286:	2b00      	cmp	r3, #0
 c005288:	d046      	beq.n	c005318 <uECC_verify+0x508>
            uECC_vli_set(tx, point, num_words);
 c00528a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c00528e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 c005292:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 c005296:	4618      	mov	r0, r3
 c005298:	f7fe fd8e 	bl	c003db8 <uECC_vli_set>
            uECC_vli_set(ty, point + num_words, num_words);
 c00529c:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c0052a0:	009b      	lsls	r3, r3, #2
 c0052a2:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 c0052a6:	18d1      	adds	r1, r2, r3
 c0052a8:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c0052ac:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 c0052b0:	4618      	mov	r0, r3
 c0052b2:	f7fe fd81 	bl	c003db8 <uECC_vli_set>
            apply_z(tx, ty, z, curve);
 c0052b6:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c0052ba:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 c0052be:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 c0052c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0052c6:	f7ff fc25 	bl	c004b14 <apply_z>
            uECC_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 c0052ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0052ce:	1d1c      	adds	r4, r3, #4
 c0052d0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 c0052d4:	f507 7190 	add.w	r1, r7, #288	; 0x120
 c0052d8:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 c0052dc:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c0052e0:	9300      	str	r3, [sp, #0]
 c0052e2:	4623      	mov	r3, r4
 c0052e4:	f7fe fe4e 	bl	c003f84 <uECC_vli_modSub>
            XYcZ_add(tx, ty, rx, ry, curve);
 c0052e8:	f507 7480 	add.w	r4, r7, #256	; 0x100
 c0052ec:	f507 7290 	add.w	r2, r7, #288	; 0x120
 c0052f0:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 c0052f4:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 c0052f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0052fc:	9300      	str	r3, [sp, #0]
 c0052fe:	4623      	mov	r3, r4
 c005300:	f7ff fc30 	bl	c004b64 <XYcZ_add>
            uECC_vli_modMult_fast(z, z, tz, curve);
 c005304:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 c005308:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 c00530c:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 c005310:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c005314:	f7fe ffaa 	bl	c00426c <uECC_vli_modMult_fast>
    for (i = num_bits - 2; i >= 0; --i) {
 c005318:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 c00531c:	3b01      	subs	r3, #1
 c00531e:	b29b      	uxth	r3, r3
 c005320:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
 c005324:	f9b7 31ee 	ldrsh.w	r3, [r7, #494]	; 0x1ee
 c005328:	2b00      	cmp	r3, #0
 c00532a:	f6bf af73 	bge.w	c005214 <uECC_verify+0x404>
        }
    }

    uECC_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 c00532e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c005332:	1d1a      	adds	r2, r3, #4
 c005334:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c005338:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 c00533c:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 c005340:	f7fe fff8 	bl	c004334 <uECC_vli_modInv>
    apply_z(rx, ry, z, curve);
 c005344:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c005348:	f507 7180 	add.w	r1, r7, #256	; 0x100
 c00534c:	f507 7090 	add.w	r0, r7, #288	; 0x120
 c005350:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c005354:	f7ff fbde 	bl	c004b14 <apply_z>

    /* v = x1 (mod n) */
    if (uECC_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 c005358:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00535c:	3324      	adds	r3, #36	; 0x24
 c00535e:	f997 21ec 	ldrsb.w	r2, [r7, #492]	; 0x1ec
 c005362:	f507 7190 	add.w	r1, r7, #288	; 0x120
 c005366:	4618      	mov	r0, r3
 c005368:	f7fe fd4d 	bl	c003e06 <uECC_vli_cmp_unsafe>
 c00536c:	4603      	mov	r3, r0
 c00536e:	2b01      	cmp	r3, #1
 c005370:	d00b      	beq.n	c00538a <uECC_verify+0x57a>
        uECC_vli_sub(rx, rx, curve->n, num_n_words);
 c005372:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c005376:	f103 0224 	add.w	r2, r3, #36	; 0x24
 c00537a:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c00537e:	f507 7190 	add.w	r1, r7, #288	; 0x120
 c005382:	f507 7090 	add.w	r0, r7, #288	; 0x120
 c005386:	f7fe fbb3 	bl	c003af0 <uECC_vli_sub>
    }

    /* Accept only if v == r. */
    return (int)(uECC_vli_equal(rx, r, num_words));
 c00538a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c00538e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c005392:	f507 7390 	add.w	r3, r7, #288	; 0x120
 c005396:	4618      	mov	r0, r3
 c005398:	f7fe fd71 	bl	c003e7e <uECC_vli_equal>
 c00539c:	4603      	mov	r3, r0
}
 c00539e:	4618      	mov	r0, r3
 c0053a0:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 c0053a4:	46bd      	mov	sp, r7
 c0053a6:	bd90      	pop	{r4, r7, pc}

0c0053a8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 c0053a8:	b580      	push	{r7, lr}
 c0053aa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 c0053ac:	4b22      	ldr	r3, [pc, #136]	; (c005438 <MX_LPUART1_UART_Init+0x90>)
 c0053ae:	4a23      	ldr	r2, [pc, #140]	; (c00543c <MX_LPUART1_UART_Init+0x94>)
 c0053b0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 921600;
 c0053b2:	4b21      	ldr	r3, [pc, #132]	; (c005438 <MX_LPUART1_UART_Init+0x90>)
 c0053b4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 c0053b8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 c0053ba:	4b1f      	ldr	r3, [pc, #124]	; (c005438 <MX_LPUART1_UART_Init+0x90>)
 c0053bc:	2200      	movs	r2, #0
 c0053be:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 c0053c0:	4b1d      	ldr	r3, [pc, #116]	; (c005438 <MX_LPUART1_UART_Init+0x90>)
 c0053c2:	2200      	movs	r2, #0
 c0053c4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 c0053c6:	4b1c      	ldr	r3, [pc, #112]	; (c005438 <MX_LPUART1_UART_Init+0x90>)
 c0053c8:	2200      	movs	r2, #0
 c0053ca:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 c0053cc:	4b1a      	ldr	r3, [pc, #104]	; (c005438 <MX_LPUART1_UART_Init+0x90>)
 c0053ce:	220c      	movs	r2, #12
 c0053d0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 c0053d2:	4b19      	ldr	r3, [pc, #100]	; (c005438 <MX_LPUART1_UART_Init+0x90>)
 c0053d4:	2200      	movs	r2, #0
 c0053d6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c0053d8:	4b17      	ldr	r3, [pc, #92]	; (c005438 <MX_LPUART1_UART_Init+0x90>)
 c0053da:	2200      	movs	r2, #0
 c0053dc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c0053de:	4b16      	ldr	r3, [pc, #88]	; (c005438 <MX_LPUART1_UART_Init+0x90>)
 c0053e0:	2200      	movs	r2, #0
 c0053e2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c0053e4:	4b14      	ldr	r3, [pc, #80]	; (c005438 <MX_LPUART1_UART_Init+0x90>)
 c0053e6:	2200      	movs	r2, #0
 c0053e8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 c0053ea:	4b13      	ldr	r3, [pc, #76]	; (c005438 <MX_LPUART1_UART_Init+0x90>)
 c0053ec:	2200      	movs	r2, #0
 c0053ee:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 c0053f0:	4811      	ldr	r0, [pc, #68]	; (c005438 <MX_LPUART1_UART_Init+0x90>)
 c0053f2:	f003 fab7 	bl	c008964 <HAL_UART_Init>
 c0053f6:	4603      	mov	r3, r0
 c0053f8:	2b00      	cmp	r3, #0
 c0053fa:	d001      	beq.n	c005400 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 c0053fc:	f7fd fd8e 	bl	c002f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c005400:	2100      	movs	r1, #0
 c005402:	480d      	ldr	r0, [pc, #52]	; (c005438 <MX_LPUART1_UART_Init+0x90>)
 c005404:	f004 f90c 	bl	c009620 <HAL_UARTEx_SetTxFifoThreshold>
 c005408:	4603      	mov	r3, r0
 c00540a:	2b00      	cmp	r3, #0
 c00540c:	d001      	beq.n	c005412 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 c00540e:	f7fd fd85 	bl	c002f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c005412:	2100      	movs	r1, #0
 c005414:	4808      	ldr	r0, [pc, #32]	; (c005438 <MX_LPUART1_UART_Init+0x90>)
 c005416:	f004 f941 	bl	c00969c <HAL_UARTEx_SetRxFifoThreshold>
 c00541a:	4603      	mov	r3, r0
 c00541c:	2b00      	cmp	r3, #0
 c00541e:	d001      	beq.n	c005424 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 c005420:	f7fd fd7c 	bl	c002f1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 c005424:	4804      	ldr	r0, [pc, #16]	; (c005438 <MX_LPUART1_UART_Init+0x90>)
 c005426:	f004 f8c2 	bl	c0095ae <HAL_UARTEx_DisableFifoMode>
 c00542a:	4603      	mov	r3, r0
 c00542c:	2b00      	cmp	r3, #0
 c00542e:	d001      	beq.n	c005434 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 c005430:	f7fd fd74 	bl	c002f1c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 c005434:	bf00      	nop
 c005436:	bd80      	pop	{r7, pc}
 c005438:	300023cc 	.word	0x300023cc
 c00543c:	50008000 	.word	0x50008000

0c005440 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 c005440:	b580      	push	{r7, lr}
 c005442:	b0ae      	sub	sp, #184	; 0xb8
 c005444:	af00      	add	r7, sp, #0
 c005446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c005448:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c00544c:	2200      	movs	r2, #0
 c00544e:	601a      	str	r2, [r3, #0]
 c005450:	605a      	str	r2, [r3, #4]
 c005452:	609a      	str	r2, [r3, #8]
 c005454:	60da      	str	r2, [r3, #12]
 c005456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c005458:	f107 0310 	add.w	r3, r7, #16
 c00545c:	2294      	movs	r2, #148	; 0x94
 c00545e:	2100      	movs	r1, #0
 c005460:	4618      	mov	r0, r3
 c005462:	f004 f9d8 	bl	c009816 <memset>
  if(uartHandle->Instance==LPUART1)
 c005466:	687b      	ldr	r3, [r7, #4]
 c005468:	681b      	ldr	r3, [r3, #0]
 c00546a:	4a22      	ldr	r2, [pc, #136]	; (c0054f4 <HAL_UART_MspInit+0xb4>)
 c00546c:	4293      	cmp	r3, r2
 c00546e:	d13d      	bne.n	c0054ec <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 c005470:	2320      	movs	r3, #32
 c005472:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 c005474:	2300      	movs	r3, #0
 c005476:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c005478:	f107 0310 	add.w	r3, r7, #16
 c00547c:	4618      	mov	r0, r3
 c00547e:	f002 f8e9 	bl	c007654 <HAL_RCCEx_PeriphCLKConfig>
 c005482:	4603      	mov	r3, r0
 c005484:	2b00      	cmp	r3, #0
 c005486:	d001      	beq.n	c00548c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 c005488:	f7fd fd48 	bl	c002f1c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 c00548c:	4b1a      	ldr	r3, [pc, #104]	; (c0054f8 <HAL_UART_MspInit+0xb8>)
 c00548e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c005490:	4a19      	ldr	r2, [pc, #100]	; (c0054f8 <HAL_UART_MspInit+0xb8>)
 c005492:	f043 0301 	orr.w	r3, r3, #1
 c005496:	65d3      	str	r3, [r2, #92]	; 0x5c
 c005498:	4b17      	ldr	r3, [pc, #92]	; (c0054f8 <HAL_UART_MspInit+0xb8>)
 c00549a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c00549c:	f003 0301 	and.w	r3, r3, #1
 c0054a0:	60fb      	str	r3, [r7, #12]
 c0054a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 c0054a4:	4b14      	ldr	r3, [pc, #80]	; (c0054f8 <HAL_UART_MspInit+0xb8>)
 c0054a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0054a8:	4a13      	ldr	r2, [pc, #76]	; (c0054f8 <HAL_UART_MspInit+0xb8>)
 c0054aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c0054ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 c0054b0:	4b11      	ldr	r3, [pc, #68]	; (c0054f8 <HAL_UART_MspInit+0xb8>)
 c0054b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0054b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0054b8:	60bb      	str	r3, [r7, #8]
 c0054ba:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 c0054bc:	f001 f8c8 	bl	c006650 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 c0054c0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 c0054c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c0054c8:	2302      	movs	r3, #2
 c0054ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c0054ce:	2300      	movs	r3, #0
 c0054d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c0054d4:	2300      	movs	r3, #0
 c0054d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 c0054da:	2308      	movs	r3, #8
 c0054dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 c0054e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c0054e4:	4619      	mov	r1, r3
 c0054e6:	4805      	ldr	r0, [pc, #20]	; (c0054fc <HAL_UART_MspInit+0xbc>)
 c0054e8:	f000 fbf0 	bl	c005ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 c0054ec:	bf00      	nop
 c0054ee:	37b8      	adds	r7, #184	; 0xb8
 c0054f0:	46bd      	mov	sp, r7
 c0054f2:	bd80      	pop	{r7, pc}
 c0054f4:	50008000 	.word	0x50008000
 c0054f8:	50021000 	.word	0x50021000
 c0054fc:	52021800 	.word	0x52021800

0c005500 <SecureUartTx>:
}

/* USER CODE BEGIN 1 */

void SecureUartTx(uint8_t* data, uint16_t len)
{
 c005500:	b580      	push	{r7, lr}
 c005502:	b082      	sub	sp, #8
 c005504:	af00      	add	r7, sp, #0
 c005506:	6078      	str	r0, [r7, #4]
 c005508:	460b      	mov	r3, r1
 c00550a:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&hlpuart1, data, len, HAL_MAX_DELAY);
 c00550c:	887a      	ldrh	r2, [r7, #2]
 c00550e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c005512:	6879      	ldr	r1, [r7, #4]
 c005514:	4803      	ldr	r0, [pc, #12]	; (c005524 <SecureUartTx+0x24>)
 c005516:	f003 fa75 	bl	c008a04 <HAL_UART_Transmit>
}
 c00551a:	bf00      	nop
 c00551c:	3708      	adds	r7, #8
 c00551e:	46bd      	mov	sp, r7
 c005520:	bd80      	pop	{r7, pc}
 c005522:	bf00      	nop
 c005524:	300023cc 	.word	0x300023cc

0c005528 <SecureUartRx>:

void SecureUartRx(uint8_t* data, uint16_t len)
{
 c005528:	b580      	push	{r7, lr}
 c00552a:	b082      	sub	sp, #8
 c00552c:	af00      	add	r7, sp, #0
 c00552e:	6078      	str	r0, [r7, #4]
 c005530:	460b      	mov	r3, r1
 c005532:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&hlpuart1, data, len, HAL_MAX_DELAY);
 c005534:	887a      	ldrh	r2, [r7, #2]
 c005536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00553a:	6879      	ldr	r1, [r7, #4]
 c00553c:	4803      	ldr	r0, [pc, #12]	; (c00554c <SecureUartRx+0x24>)
 c00553e:	f003 faf7 	bl	c008b30 <HAL_UART_Receive>

}
 c005542:	bf00      	nop
 c005544:	3708      	adds	r7, #8
 c005546:	46bd      	mov	sp, r7
 c005548:	bd80      	pop	{r7, pc}
 c00554a:	bf00      	nop
 c00554c:	300023cc 	.word	0x300023cc

0c005550 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c005550:	f8df d034 	ldr.w	sp, [pc, #52]	; c005588 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c005554:	f7fe f89e 	bl	c003694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c005558:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c00555a:	e003      	b.n	c005564 <LoopCopyDataInit>

0c00555c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c00555c:	4b0b      	ldr	r3, [pc, #44]	; (c00558c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c00555e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c005560:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c005562:	3104      	adds	r1, #4

0c005564 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c005564:	480a      	ldr	r0, [pc, #40]	; (c005590 <LoopForever+0xa>)
	ldr	r3, =_edata
 c005566:	4b0b      	ldr	r3, [pc, #44]	; (c005594 <LoopForever+0xe>)
	adds	r2, r0, r1
 c005568:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c00556a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c00556c:	d3f6      	bcc.n	c00555c <CopyDataInit>
	ldr	r2, =_sbss
 c00556e:	4a0a      	ldr	r2, [pc, #40]	; (c005598 <LoopForever+0x12>)
	b	LoopFillZerobss
 c005570:	e002      	b.n	c005578 <LoopFillZerobss>

0c005572 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c005572:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c005574:	f842 3b04 	str.w	r3, [r2], #4

0c005578 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c005578:	4b08      	ldr	r3, [pc, #32]	; (c00559c <LoopForever+0x16>)
	cmp	r2, r3
 c00557a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c00557c:	d3f9      	bcc.n	c005572 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c00557e:	f004 f919 	bl	c0097b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c005582:	f7fd fc11 	bl	c002da8 <main>

0c005586 <LoopForever>:

LoopForever:
    b LoopForever
 c005586:	e7fe      	b.n	c005586 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c005588:	30010000 	.word	0x30010000
	ldr	r3, =_sidata
 c00558c:	0c0099b4 	.word	0x0c0099b4
	ldr	r0, =_sdata
 c005590:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c005594:	30000074 	.word	0x30000074
	ldr	r2, =_sbss
 c005598:	300020dc 	.word	0x300020dc
	ldr	r3, = _ebss
 c00559c:	30002460 	.word	0x30002460

0c0055a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c0055a0:	e7fe      	b.n	c0055a0 <ADC1_2_IRQHandler>

0c0055a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c0055a2:	b580      	push	{r7, lr}
 c0055a4:	b082      	sub	sp, #8
 c0055a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c0055a8:	2300      	movs	r3, #0
 c0055aa:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c0055ac:	2004      	movs	r0, #4
 c0055ae:	f000 f93f 	bl	c005830 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c0055b2:	f7fe f889 	bl	c0036c8 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c0055b6:	2007      	movs	r0, #7
 c0055b8:	f000 f80e 	bl	c0055d8 <HAL_InitTick>
 c0055bc:	4603      	mov	r3, r0
 c0055be:	2b00      	cmp	r3, #0
 c0055c0:	d002      	beq.n	c0055c8 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c0055c2:	2301      	movs	r3, #1
 c0055c4:	71fb      	strb	r3, [r7, #7]
 c0055c6:	e001      	b.n	c0055cc <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c0055c8:	f7fd ff26 	bl	c003418 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c0055cc:	79fb      	ldrb	r3, [r7, #7]
}
 c0055ce:	4618      	mov	r0, r3
 c0055d0:	3708      	adds	r7, #8
 c0055d2:	46bd      	mov	sp, r7
 c0055d4:	bd80      	pop	{r7, pc}
	...

0c0055d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c0055d8:	b580      	push	{r7, lr}
 c0055da:	b084      	sub	sp, #16
 c0055dc:	af00      	add	r7, sp, #0
 c0055de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c0055e0:	2300      	movs	r3, #0
 c0055e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c0055e4:	4b17      	ldr	r3, [pc, #92]	; (c005644 <HAL_InitTick+0x6c>)
 c0055e6:	781b      	ldrb	r3, [r3, #0]
 c0055e8:	2b00      	cmp	r3, #0
 c0055ea:	d023      	beq.n	c005634 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c0055ec:	4b16      	ldr	r3, [pc, #88]	; (c005648 <HAL_InitTick+0x70>)
 c0055ee:	681a      	ldr	r2, [r3, #0]
 c0055f0:	4b14      	ldr	r3, [pc, #80]	; (c005644 <HAL_InitTick+0x6c>)
 c0055f2:	781b      	ldrb	r3, [r3, #0]
 c0055f4:	4619      	mov	r1, r3
 c0055f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c0055fa:	fbb3 f3f1 	udiv	r3, r3, r1
 c0055fe:	fbb2 f3f3 	udiv	r3, r2, r3
 c005602:	4618      	mov	r0, r3
 c005604:	f000 f947 	bl	c005896 <HAL_SYSTICK_Config>
 c005608:	4603      	mov	r3, r0
 c00560a:	2b00      	cmp	r3, #0
 c00560c:	d10f      	bne.n	c00562e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c00560e:	687b      	ldr	r3, [r7, #4]
 c005610:	2b07      	cmp	r3, #7
 c005612:	d809      	bhi.n	c005628 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c005614:	2200      	movs	r2, #0
 c005616:	6879      	ldr	r1, [r7, #4]
 c005618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c00561c:	f000 f913 	bl	c005846 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c005620:	4a0a      	ldr	r2, [pc, #40]	; (c00564c <HAL_InitTick+0x74>)
 c005622:	687b      	ldr	r3, [r7, #4]
 c005624:	6013      	str	r3, [r2, #0]
 c005626:	e007      	b.n	c005638 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c005628:	2301      	movs	r3, #1
 c00562a:	73fb      	strb	r3, [r7, #15]
 c00562c:	e004      	b.n	c005638 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c00562e:	2301      	movs	r3, #1
 c005630:	73fb      	strb	r3, [r7, #15]
 c005632:	e001      	b.n	c005638 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c005634:	2301      	movs	r3, #1
 c005636:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c005638:	7bfb      	ldrb	r3, [r7, #15]
}
 c00563a:	4618      	mov	r0, r3
 c00563c:	3710      	adds	r7, #16
 c00563e:	46bd      	mov	sp, r7
 c005640:	bd80      	pop	{r7, pc}
 c005642:	bf00      	nop
 c005644:	30000070 	.word	0x30000070
 c005648:	30000068 	.word	0x30000068
 c00564c:	3000006c 	.word	0x3000006c

0c005650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c005650:	b480      	push	{r7}
 c005652:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c005654:	4b06      	ldr	r3, [pc, #24]	; (c005670 <HAL_IncTick+0x20>)
 c005656:	781b      	ldrb	r3, [r3, #0]
 c005658:	461a      	mov	r2, r3
 c00565a:	4b06      	ldr	r3, [pc, #24]	; (c005674 <HAL_IncTick+0x24>)
 c00565c:	681b      	ldr	r3, [r3, #0]
 c00565e:	4413      	add	r3, r2
 c005660:	4a04      	ldr	r2, [pc, #16]	; (c005674 <HAL_IncTick+0x24>)
 c005662:	6013      	str	r3, [r2, #0]
}
 c005664:	bf00      	nop
 c005666:	46bd      	mov	sp, r7
 c005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00566c:	4770      	bx	lr
 c00566e:	bf00      	nop
 c005670:	30000070 	.word	0x30000070
 c005674:	3000245c 	.word	0x3000245c

0c005678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c005678:	b480      	push	{r7}
 c00567a:	af00      	add	r7, sp, #0
  return uwTick;
 c00567c:	4b03      	ldr	r3, [pc, #12]	; (c00568c <HAL_GetTick+0x14>)
 c00567e:	681b      	ldr	r3, [r3, #0]
}
 c005680:	4618      	mov	r0, r3
 c005682:	46bd      	mov	sp, r7
 c005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005688:	4770      	bx	lr
 c00568a:	bf00      	nop
 c00568c:	3000245c 	.word	0x3000245c

0c005690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c005690:	b480      	push	{r7}
 c005692:	b085      	sub	sp, #20
 c005694:	af00      	add	r7, sp, #0
 c005696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c005698:	687b      	ldr	r3, [r7, #4]
 c00569a:	f003 0307 	and.w	r3, r3, #7
 c00569e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c0056a0:	4b0c      	ldr	r3, [pc, #48]	; (c0056d4 <__NVIC_SetPriorityGrouping+0x44>)
 c0056a2:	68db      	ldr	r3, [r3, #12]
 c0056a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c0056a6:	68ba      	ldr	r2, [r7, #8]
 c0056a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c0056ac:	4013      	ands	r3, r2
 c0056ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c0056b0:	68fb      	ldr	r3, [r7, #12]
 c0056b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c0056b4:	68bb      	ldr	r3, [r7, #8]
 c0056b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c0056b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c0056bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c0056c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c0056c2:	4a04      	ldr	r2, [pc, #16]	; (c0056d4 <__NVIC_SetPriorityGrouping+0x44>)
 c0056c4:	68bb      	ldr	r3, [r7, #8]
 c0056c6:	60d3      	str	r3, [r2, #12]
}
 c0056c8:	bf00      	nop
 c0056ca:	3714      	adds	r7, #20
 c0056cc:	46bd      	mov	sp, r7
 c0056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0056d2:	4770      	bx	lr
 c0056d4:	e000ed00 	.word	0xe000ed00

0c0056d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c0056d8:	b480      	push	{r7}
 c0056da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c0056dc:	4b04      	ldr	r3, [pc, #16]	; (c0056f0 <__NVIC_GetPriorityGrouping+0x18>)
 c0056de:	68db      	ldr	r3, [r3, #12]
 c0056e0:	0a1b      	lsrs	r3, r3, #8
 c0056e2:	f003 0307 	and.w	r3, r3, #7
}
 c0056e6:	4618      	mov	r0, r3
 c0056e8:	46bd      	mov	sp, r7
 c0056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0056ee:	4770      	bx	lr
 c0056f0:	e000ed00 	.word	0xe000ed00

0c0056f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c0056f4:	b480      	push	{r7}
 c0056f6:	b083      	sub	sp, #12
 c0056f8:	af00      	add	r7, sp, #0
 c0056fa:	4603      	mov	r3, r0
 c0056fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c0056fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c005702:	2b00      	cmp	r3, #0
 c005704:	db0b      	blt.n	c00571e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c005706:	79fb      	ldrb	r3, [r7, #7]
 c005708:	f003 021f 	and.w	r2, r3, #31
 c00570c:	4907      	ldr	r1, [pc, #28]	; (c00572c <__NVIC_EnableIRQ+0x38>)
 c00570e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c005712:	095b      	lsrs	r3, r3, #5
 c005714:	2001      	movs	r0, #1
 c005716:	fa00 f202 	lsl.w	r2, r0, r2
 c00571a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c00571e:	bf00      	nop
 c005720:	370c      	adds	r7, #12
 c005722:	46bd      	mov	sp, r7
 c005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005728:	4770      	bx	lr
 c00572a:	bf00      	nop
 c00572c:	e000e100 	.word	0xe000e100

0c005730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c005730:	b480      	push	{r7}
 c005732:	b083      	sub	sp, #12
 c005734:	af00      	add	r7, sp, #0
 c005736:	4603      	mov	r3, r0
 c005738:	6039      	str	r1, [r7, #0]
 c00573a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c00573c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c005740:	2b00      	cmp	r3, #0
 c005742:	db0a      	blt.n	c00575a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c005744:	683b      	ldr	r3, [r7, #0]
 c005746:	b2da      	uxtb	r2, r3
 c005748:	490c      	ldr	r1, [pc, #48]	; (c00577c <__NVIC_SetPriority+0x4c>)
 c00574a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00574e:	0152      	lsls	r2, r2, #5
 c005750:	b2d2      	uxtb	r2, r2
 c005752:	440b      	add	r3, r1
 c005754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c005758:	e00a      	b.n	c005770 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c00575a:	683b      	ldr	r3, [r7, #0]
 c00575c:	b2da      	uxtb	r2, r3
 c00575e:	4908      	ldr	r1, [pc, #32]	; (c005780 <__NVIC_SetPriority+0x50>)
 c005760:	79fb      	ldrb	r3, [r7, #7]
 c005762:	f003 030f 	and.w	r3, r3, #15
 c005766:	3b04      	subs	r3, #4
 c005768:	0152      	lsls	r2, r2, #5
 c00576a:	b2d2      	uxtb	r2, r2
 c00576c:	440b      	add	r3, r1
 c00576e:	761a      	strb	r2, [r3, #24]
}
 c005770:	bf00      	nop
 c005772:	370c      	adds	r7, #12
 c005774:	46bd      	mov	sp, r7
 c005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00577a:	4770      	bx	lr
 c00577c:	e000e100 	.word	0xe000e100
 c005780:	e000ed00 	.word	0xe000ed00

0c005784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c005784:	b480      	push	{r7}
 c005786:	b089      	sub	sp, #36	; 0x24
 c005788:	af00      	add	r7, sp, #0
 c00578a:	60f8      	str	r0, [r7, #12]
 c00578c:	60b9      	str	r1, [r7, #8]
 c00578e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c005790:	68fb      	ldr	r3, [r7, #12]
 c005792:	f003 0307 	and.w	r3, r3, #7
 c005796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c005798:	69fb      	ldr	r3, [r7, #28]
 c00579a:	f1c3 0307 	rsb	r3, r3, #7
 c00579e:	2b03      	cmp	r3, #3
 c0057a0:	bf28      	it	cs
 c0057a2:	2303      	movcs	r3, #3
 c0057a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c0057a6:	69fb      	ldr	r3, [r7, #28]
 c0057a8:	3303      	adds	r3, #3
 c0057aa:	2b06      	cmp	r3, #6
 c0057ac:	d902      	bls.n	c0057b4 <NVIC_EncodePriority+0x30>
 c0057ae:	69fb      	ldr	r3, [r7, #28]
 c0057b0:	3b04      	subs	r3, #4
 c0057b2:	e000      	b.n	c0057b6 <NVIC_EncodePriority+0x32>
 c0057b4:	2300      	movs	r3, #0
 c0057b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c0057b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0057bc:	69bb      	ldr	r3, [r7, #24]
 c0057be:	fa02 f303 	lsl.w	r3, r2, r3
 c0057c2:	43da      	mvns	r2, r3
 c0057c4:	68bb      	ldr	r3, [r7, #8]
 c0057c6:	401a      	ands	r2, r3
 c0057c8:	697b      	ldr	r3, [r7, #20]
 c0057ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c0057cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 c0057d0:	697b      	ldr	r3, [r7, #20]
 c0057d2:	fa01 f303 	lsl.w	r3, r1, r3
 c0057d6:	43d9      	mvns	r1, r3
 c0057d8:	687b      	ldr	r3, [r7, #4]
 c0057da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c0057dc:	4313      	orrs	r3, r2
         );
}
 c0057de:	4618      	mov	r0, r3
 c0057e0:	3724      	adds	r7, #36	; 0x24
 c0057e2:	46bd      	mov	sp, r7
 c0057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0057e8:	4770      	bx	lr
	...

0c0057ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c0057ec:	b580      	push	{r7, lr}
 c0057ee:	b082      	sub	sp, #8
 c0057f0:	af00      	add	r7, sp, #0
 c0057f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c0057f4:	687b      	ldr	r3, [r7, #4]
 c0057f6:	3b01      	subs	r3, #1
 c0057f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c0057fc:	d301      	bcc.n	c005802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c0057fe:	2301      	movs	r3, #1
 c005800:	e00f      	b.n	c005822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c005802:	4a0a      	ldr	r2, [pc, #40]	; (c00582c <SysTick_Config+0x40>)
 c005804:	687b      	ldr	r3, [r7, #4]
 c005806:	3b01      	subs	r3, #1
 c005808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c00580a:	2107      	movs	r1, #7
 c00580c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c005810:	f7ff ff8e 	bl	c005730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c005814:	4b05      	ldr	r3, [pc, #20]	; (c00582c <SysTick_Config+0x40>)
 c005816:	2200      	movs	r2, #0
 c005818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c00581a:	4b04      	ldr	r3, [pc, #16]	; (c00582c <SysTick_Config+0x40>)
 c00581c:	2207      	movs	r2, #7
 c00581e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c005820:	2300      	movs	r3, #0
}
 c005822:	4618      	mov	r0, r3
 c005824:	3708      	adds	r7, #8
 c005826:	46bd      	mov	sp, r7
 c005828:	bd80      	pop	{r7, pc}
 c00582a:	bf00      	nop
 c00582c:	e000e010 	.word	0xe000e010

0c005830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c005830:	b580      	push	{r7, lr}
 c005832:	b082      	sub	sp, #8
 c005834:	af00      	add	r7, sp, #0
 c005836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c005838:	6878      	ldr	r0, [r7, #4]
 c00583a:	f7ff ff29 	bl	c005690 <__NVIC_SetPriorityGrouping>
}
 c00583e:	bf00      	nop
 c005840:	3708      	adds	r7, #8
 c005842:	46bd      	mov	sp, r7
 c005844:	bd80      	pop	{r7, pc}

0c005846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c005846:	b580      	push	{r7, lr}
 c005848:	b086      	sub	sp, #24
 c00584a:	af00      	add	r7, sp, #0
 c00584c:	4603      	mov	r3, r0
 c00584e:	60b9      	str	r1, [r7, #8]
 c005850:	607a      	str	r2, [r7, #4]
 c005852:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c005854:	f7ff ff40 	bl	c0056d8 <__NVIC_GetPriorityGrouping>
 c005858:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c00585a:	687a      	ldr	r2, [r7, #4]
 c00585c:	68b9      	ldr	r1, [r7, #8]
 c00585e:	6978      	ldr	r0, [r7, #20]
 c005860:	f7ff ff90 	bl	c005784 <NVIC_EncodePriority>
 c005864:	4602      	mov	r2, r0
 c005866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c00586a:	4611      	mov	r1, r2
 c00586c:	4618      	mov	r0, r3
 c00586e:	f7ff ff5f 	bl	c005730 <__NVIC_SetPriority>
}
 c005872:	bf00      	nop
 c005874:	3718      	adds	r7, #24
 c005876:	46bd      	mov	sp, r7
 c005878:	bd80      	pop	{r7, pc}

0c00587a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c00587a:	b580      	push	{r7, lr}
 c00587c:	b082      	sub	sp, #8
 c00587e:	af00      	add	r7, sp, #0
 c005880:	4603      	mov	r3, r0
 c005882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c005884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c005888:	4618      	mov	r0, r3
 c00588a:	f7ff ff33 	bl	c0056f4 <__NVIC_EnableIRQ>
}
 c00588e:	bf00      	nop
 c005890:	3708      	adds	r7, #8
 c005892:	46bd      	mov	sp, r7
 c005894:	bd80      	pop	{r7, pc}

0c005896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c005896:	b580      	push	{r7, lr}
 c005898:	b082      	sub	sp, #8
 c00589a:	af00      	add	r7, sp, #0
 c00589c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c00589e:	6878      	ldr	r0, [r7, #4]
 c0058a0:	f7ff ffa4 	bl	c0057ec <SysTick_Config>
 c0058a4:	4603      	mov	r3, r0
}
 c0058a6:	4618      	mov	r0, r3
 c0058a8:	3708      	adds	r7, #8
 c0058aa:	46bd      	mov	sp, r7
 c0058ac:	bd80      	pop	{r7, pc}
	...

0c0058b0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 c0058b0:	b480      	push	{r7}
 c0058b2:	b083      	sub	sp, #12
 c0058b4:	af00      	add	r7, sp, #0
 c0058b6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL   = MPU_Control | MPU_CTRL_ENABLE_Msk;
 c0058b8:	4a0b      	ldr	r2, [pc, #44]	; (c0058e8 <HAL_MPU_Enable+0x38>)
 c0058ba:	687b      	ldr	r3, [r7, #4]
 c0058bc:	f043 0301 	orr.w	r3, r3, #1
 c0058c0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 c0058c2:	4b0a      	ldr	r3, [pc, #40]	; (c0058ec <HAL_MPU_Enable+0x3c>)
 c0058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0058c6:	4a09      	ldr	r2, [pc, #36]	; (c0058ec <HAL_MPU_Enable+0x3c>)
 c0058c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0058cc:	6253      	str	r3, [r2, #36]	; 0x24
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 c0058ce:	f3bf 8f5f 	dmb	sy
}
 c0058d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 c0058d4:	f3bf 8f6f 	isb	sy
}
 c0058d8:	bf00      	nop

  /* Follow ARM recommendation with */
  /* - Data Memory Barrier and Instruction Synchronization to insure MPU usage */
  __DMB(); /* Force memory writes before continuing */
  __ISB(); /* Flush and refill pipeline with updated permissions */
}
 c0058da:	bf00      	nop
 c0058dc:	370c      	adds	r7, #12
 c0058de:	46bd      	mov	sp, r7
 c0058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0058e4:	4770      	bx	lr
 c0058e6:	bf00      	nop
 c0058e8:	e000ed90 	.word	0xe000ed90
 c0058ec:	e000ed00 	.word	0xe000ed00

0c0058f0 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 c0058f0:	b480      	push	{r7}
 c0058f2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 c0058f4:	f3bf 8f5f 	dmb	sy
}
 c0058f8:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before disabling MPU */

  /* Disable the MPU */
  MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 c0058fa:	4b05      	ldr	r3, [pc, #20]	; (c005910 <HAL_MPU_Disable+0x20>)
 c0058fc:	685b      	ldr	r3, [r3, #4]
 c0058fe:	4a04      	ldr	r2, [pc, #16]	; (c005910 <HAL_MPU_Disable+0x20>)
 c005900:	f023 0301 	bic.w	r3, r3, #1
 c005904:	6053      	str	r3, [r2, #4]
}
 c005906:	bf00      	nop
 c005908:	46bd      	mov	sp, r7
 c00590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00590e:	4770      	bx	lr
 c005910:	e000ed90 	.word	0xe000ed90

0c005914 <HAL_MPU_ConfigRegion>:
  * @param  MPU_RegionInit Pointer to a MPU_Region_InitTypeDef structure that contains
  *                        the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_RegionInit)
{
 c005914:	b580      	push	{r7, lr}
 c005916:	b082      	sub	sp, #8
 c005918:	af00      	add	r7, sp, #0
 c00591a:	6078      	str	r0, [r7, #4]
  MPU_ConfigRegion(MPU, MPU_RegionInit);
 c00591c:	6879      	ldr	r1, [r7, #4]
 c00591e:	4803      	ldr	r0, [pc, #12]	; (c00592c <HAL_MPU_ConfigRegion+0x18>)
 c005920:	f000 f806 	bl	c005930 <MPU_ConfigRegion>
}
 c005924:	bf00      	nop
 c005926:	3708      	adds	r7, #8
 c005928:	46bd      	mov	sp, r7
 c00592a:	bd80      	pop	{r7, pc}
 c00592c:	e000ed90 	.word	0xe000ed90

0c005930 <MPU_ConfigRegion>:
  */

#if (__MPU_PRESENT == 1)

static void MPU_ConfigRegion(MPU_Type* MPUx, MPU_Region_InitTypeDef *MPU_RegionInit)
{
 c005930:	b480      	push	{r7}
 c005932:	b083      	sub	sp, #12
 c005934:	af00      	add	r7, sp, #0
 c005936:	6078      	str	r0, [r7, #4]
 c005938:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 c00593a:	f3bf 8f5f 	dmb	sy
}
 c00593e:	bf00      	nop

  /* Follow ARM recommendation with Data Memory Barrier prior to MPU configuration */
  __DMB();

  /* Set the Region number */
  MPUx->RNR = MPU_RegionInit->Number;
 c005940:	683b      	ldr	r3, [r7, #0]
 c005942:	785b      	ldrb	r3, [r3, #1]
 c005944:	461a      	mov	r2, r3
 c005946:	687b      	ldr	r3, [r7, #4]
 c005948:	609a      	str	r2, [r3, #8]

  if (MPU_RegionInit->Enable != MPU_REGION_DISABLE)
 c00594a:	683b      	ldr	r3, [r7, #0]
 c00594c:	781b      	ldrb	r3, [r3, #0]
 c00594e:	2b00      	cmp	r3, #0
 c005950:	d01e      	beq.n	c005990 <MPU_ConfigRegion+0x60>
    /* Check the parameters */
    assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_RegionInit->DisableExec));
    assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_RegionInit->AccessPermission));
    assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_RegionInit->IsShareable));

    MPUx->RBAR = (((uint32_t)MPU_RegionInit->BaseAddress & 0xFFFFFFE0U)  |
 c005952:	683b      	ldr	r3, [r7, #0]
 c005954:	685b      	ldr	r3, [r3, #4]
 c005956:	f023 021f 	bic.w	r2, r3, #31
                  ((uint32_t)MPU_RegionInit->IsShareable      << MPU_RBAR_SH_Pos)  |
 c00595a:	683b      	ldr	r3, [r7, #0]
 c00595c:	7bdb      	ldrb	r3, [r3, #15]
 c00595e:	00db      	lsls	r3, r3, #3
    MPUx->RBAR = (((uint32_t)MPU_RegionInit->BaseAddress & 0xFFFFFFE0U)  |
 c005960:	431a      	orrs	r2, r3
                  ((uint32_t)MPU_RegionInit->AccessPermission << MPU_RBAR_AP_Pos)  |
 c005962:	683b      	ldr	r3, [r7, #0]
 c005964:	7b5b      	ldrb	r3, [r3, #13]
 c005966:	005b      	lsls	r3, r3, #1
                  ((uint32_t)MPU_RegionInit->IsShareable      << MPU_RBAR_SH_Pos)  |
 c005968:	4313      	orrs	r3, r2
                  ((uint32_t)MPU_RegionInit->DisableExec      << MPU_RBAR_XN_Pos));
 c00596a:	683a      	ldr	r2, [r7, #0]
 c00596c:	7b92      	ldrb	r2, [r2, #14]
                  ((uint32_t)MPU_RegionInit->AccessPermission << MPU_RBAR_AP_Pos)  |
 c00596e:	431a      	orrs	r2, r3
    MPUx->RBAR = (((uint32_t)MPU_RegionInit->BaseAddress & 0xFFFFFFE0U)  |
 c005970:	687b      	ldr	r3, [r7, #4]
 c005972:	60da      	str	r2, [r3, #12]

    MPUx->RLAR = (((uint32_t)MPU_RegionInit->LimitAddress & 0xFFFFFFE0U) |
 c005974:	683b      	ldr	r3, [r7, #0]
 c005976:	689b      	ldr	r3, [r3, #8]
 c005978:	f023 021f 	bic.w	r2, r3, #31
                  ((uint32_t)MPU_RegionInit->AttributesIndex << MPU_RLAR_AttrIndx_Pos) |
 c00597c:	683b      	ldr	r3, [r7, #0]
 c00597e:	7b1b      	ldrb	r3, [r3, #12]
 c005980:	005b      	lsls	r3, r3, #1
    MPUx->RLAR = (((uint32_t)MPU_RegionInit->LimitAddress & 0xFFFFFFE0U) |
 c005982:	4313      	orrs	r3, r2
                  ((uint32_t)MPU_RegionInit->Enable          << MPU_RLAR_EN_Pos));
 c005984:	683a      	ldr	r2, [r7, #0]
 c005986:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)MPU_RegionInit->AttributesIndex << MPU_RLAR_AttrIndx_Pos) |
 c005988:	431a      	orrs	r2, r3
    MPUx->RLAR = (((uint32_t)MPU_RegionInit->LimitAddress & 0xFFFFFFE0U) |
 c00598a:	687b      	ldr	r3, [r7, #4]
 c00598c:	611a      	str	r2, [r3, #16]
  else
  {
    MPUx->RBAR = 0U;
    MPUx->RLAR = 0U;
  }
}
 c00598e:	e005      	b.n	c00599c <MPU_ConfigRegion+0x6c>
    MPUx->RBAR = 0U;
 c005990:	687b      	ldr	r3, [r7, #4]
 c005992:	2200      	movs	r2, #0
 c005994:	60da      	str	r2, [r3, #12]
    MPUx->RLAR = 0U;
 c005996:	687b      	ldr	r3, [r7, #4]
 c005998:	2200      	movs	r2, #0
 c00599a:	611a      	str	r2, [r3, #16]
}
 c00599c:	bf00      	nop
 c00599e:	370c      	adds	r7, #12
 c0059a0:	46bd      	mov	sp, r7
 c0059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0059a6:	4770      	bx	lr

0c0059a8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 c0059a8:	b580      	push	{r7, lr}
 c0059aa:	b084      	sub	sp, #16
 c0059ac:	af00      	add	r7, sp, #0
 c0059ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 c0059b0:	687b      	ldr	r3, [r7, #4]
 c0059b2:	2b00      	cmp	r3, #0
 c0059b4:	d101      	bne.n	c0059ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 c0059b6:	2301      	movs	r3, #1
 c0059b8:	e08d      	b.n	c005ad6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 c0059ba:	687b      	ldr	r3, [r7, #4]
 c0059bc:	681b      	ldr	r3, [r3, #0]
 c0059be:	461a      	mov	r2, r3
 c0059c0:	4b47      	ldr	r3, [pc, #284]	; (c005ae0 <HAL_DMA_Init+0x138>)
 c0059c2:	429a      	cmp	r2, r3
 c0059c4:	d80f      	bhi.n	c0059e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 c0059c6:	687b      	ldr	r3, [r7, #4]
 c0059c8:	681b      	ldr	r3, [r3, #0]
 c0059ca:	461a      	mov	r2, r3
 c0059cc:	4b45      	ldr	r3, [pc, #276]	; (c005ae4 <HAL_DMA_Init+0x13c>)
 c0059ce:	4413      	add	r3, r2
 c0059d0:	4a45      	ldr	r2, [pc, #276]	; (c005ae8 <HAL_DMA_Init+0x140>)
 c0059d2:	fba2 2303 	umull	r2, r3, r2, r3
 c0059d6:	091b      	lsrs	r3, r3, #4
 c0059d8:	009a      	lsls	r2, r3, #2
 c0059da:	687b      	ldr	r3, [r7, #4]
 c0059dc:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 c0059de:	687b      	ldr	r3, [r7, #4]
 c0059e0:	4a42      	ldr	r2, [pc, #264]	; (c005aec <HAL_DMA_Init+0x144>)
 c0059e2:	649a      	str	r2, [r3, #72]	; 0x48
 c0059e4:	e00e      	b.n	c005a04 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 c0059e6:	687b      	ldr	r3, [r7, #4]
 c0059e8:	681b      	ldr	r3, [r3, #0]
 c0059ea:	461a      	mov	r2, r3
 c0059ec:	4b40      	ldr	r3, [pc, #256]	; (c005af0 <HAL_DMA_Init+0x148>)
 c0059ee:	4413      	add	r3, r2
 c0059f0:	4a3d      	ldr	r2, [pc, #244]	; (c005ae8 <HAL_DMA_Init+0x140>)
 c0059f2:	fba2 2303 	umull	r2, r3, r2, r3
 c0059f6:	091b      	lsrs	r3, r3, #4
 c0059f8:	009a      	lsls	r2, r3, #2
 c0059fa:	687b      	ldr	r3, [r7, #4]
 c0059fc:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 c0059fe:	687b      	ldr	r3, [r7, #4]
 c005a00:	4a3c      	ldr	r2, [pc, #240]	; (c005af4 <HAL_DMA_Init+0x14c>)
 c005a02:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 c005a04:	687b      	ldr	r3, [r7, #4]
 c005a06:	2202      	movs	r2, #2
 c005a08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 c005a0c:	687b      	ldr	r3, [r7, #4]
 c005a0e:	681b      	ldr	r3, [r3, #0]
 c005a10:	681b      	ldr	r3, [r3, #0]
 c005a12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 c005a14:	68fb      	ldr	r3, [r7, #12]
 c005a16:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 c005a1a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 c005a1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 c005a20:	687b      	ldr	r3, [r7, #4]
 c005a22:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c005a24:	687b      	ldr	r3, [r7, #4]
 c005a26:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 c005a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c005a2a:	687b      	ldr	r3, [r7, #4]
 c005a2c:	691b      	ldr	r3, [r3, #16]
 c005a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c005a30:	687b      	ldr	r3, [r7, #4]
 c005a32:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c005a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c005a36:	687b      	ldr	r3, [r7, #4]
 c005a38:	699b      	ldr	r3, [r3, #24]
 c005a3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 c005a3c:	687b      	ldr	r3, [r7, #4]
 c005a3e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c005a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 c005a42:	687b      	ldr	r3, [r7, #4]
 c005a44:	6a1b      	ldr	r3, [r3, #32]
 c005a46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 c005a48:	68fa      	ldr	r2, [r7, #12]
 c005a4a:	4313      	orrs	r3, r2
 c005a4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 c005a4e:	687b      	ldr	r3, [r7, #4]
 c005a50:	681b      	ldr	r3, [r3, #0]
 c005a52:	68fa      	ldr	r2, [r7, #12]
 c005a54:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 c005a56:	6878      	ldr	r0, [r7, #4]
 c005a58:	f000 f8d6 	bl	c005c08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 c005a5c:	687b      	ldr	r3, [r7, #4]
 c005a5e:	689b      	ldr	r3, [r3, #8]
 c005a60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c005a64:	d102      	bne.n	c005a6c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 c005a66:	687b      	ldr	r3, [r7, #4]
 c005a68:	2200      	movs	r2, #0
 c005a6a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 c005a6c:	687b      	ldr	r3, [r7, #4]
 c005a6e:	685a      	ldr	r2, [r3, #4]
 c005a70:	687b      	ldr	r3, [r7, #4]
 c005a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c005a74:	b2d2      	uxtb	r2, r2
 c005a76:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 c005a78:	687b      	ldr	r3, [r7, #4]
 c005a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c005a7c:	687a      	ldr	r2, [r7, #4]
 c005a7e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 c005a80:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 c005a82:	687b      	ldr	r3, [r7, #4]
 c005a84:	685b      	ldr	r3, [r3, #4]
 c005a86:	2b00      	cmp	r3, #0
 c005a88:	d010      	beq.n	c005aac <HAL_DMA_Init+0x104>
 c005a8a:	687b      	ldr	r3, [r7, #4]
 c005a8c:	685b      	ldr	r3, [r3, #4]
 c005a8e:	2b04      	cmp	r3, #4
 c005a90:	d80c      	bhi.n	c005aac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 c005a92:	6878      	ldr	r0, [r7, #4]
 c005a94:	f000 f8f6 	bl	c005c84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 c005a98:	687b      	ldr	r3, [r7, #4]
 c005a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c005a9c:	2200      	movs	r2, #0
 c005a9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 c005aa0:	687b      	ldr	r3, [r7, #4]
 c005aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005aa4:	687a      	ldr	r2, [r7, #4]
 c005aa6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 c005aa8:	605a      	str	r2, [r3, #4]
 c005aaa:	e008      	b.n	c005abe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 c005aac:	687b      	ldr	r3, [r7, #4]
 c005aae:	2200      	movs	r2, #0
 c005ab0:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 c005ab2:	687b      	ldr	r3, [r7, #4]
 c005ab4:	2200      	movs	r2, #0
 c005ab6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 c005ab8:	687b      	ldr	r3, [r7, #4]
 c005aba:	2200      	movs	r2, #0
 c005abc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 c005abe:	687b      	ldr	r3, [r7, #4]
 c005ac0:	2200      	movs	r2, #0
 c005ac2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 c005ac4:	687b      	ldr	r3, [r7, #4]
 c005ac6:	2201      	movs	r2, #1
 c005ac8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 c005acc:	687b      	ldr	r3, [r7, #4]
 c005ace:	2200      	movs	r2, #0
 c005ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 c005ad4:	2300      	movs	r3, #0
}
 c005ad6:	4618      	mov	r0, r3
 c005ad8:	3710      	adds	r7, #16
 c005ada:	46bd      	mov	sp, r7
 c005adc:	bd80      	pop	{r7, pc}
 c005ade:	bf00      	nop
 c005ae0:	50020407 	.word	0x50020407
 c005ae4:	affdfff8 	.word	0xaffdfff8
 c005ae8:	cccccccd 	.word	0xcccccccd
 c005aec:	50020000 	.word	0x50020000
 c005af0:	affdfbf8 	.word	0xaffdfbf8
 c005af4:	50020400 	.word	0x50020400

0c005af8 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 c005af8:	b480      	push	{r7}
 c005afa:	b087      	sub	sp, #28
 c005afc:	af00      	add	r7, sp, #0
 c005afe:	6078      	str	r0, [r7, #4]
 c005b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c005b02:	2300      	movs	r3, #0
 c005b04:	75fb      	strb	r3, [r7, #23]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 c005b06:	687b      	ldr	r3, [r7, #4]
 c005b08:	2b00      	cmp	r3, #0
 c005b0a:	d103      	bne.n	c005b14 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 c005b0c:	2301      	movs	r3, #1
 c005b0e:	75fb      	strb	r3, [r7, #23]
    return status;
 c005b10:	7dfb      	ldrb	r3, [r7, #23]
 c005b12:	e073      	b.n	c005bfc <HAL_DMA_ConfigChannelAttributes+0x104>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 c005b14:	687b      	ldr	r3, [r7, #4]
 c005b16:	681b      	ldr	r3, [r3, #0]
 c005b18:	681b      	ldr	r3, [r3, #0]
 c005b1a:	613b      	str	r3, [r7, #16]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 c005b1c:	683b      	ldr	r3, [r7, #0]
 c005b1e:	f003 0310 	and.w	r3, r3, #16
 c005b22:	2b00      	cmp	r3, #0
 c005b24:	d00d      	beq.n	c005b42 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 c005b26:	683b      	ldr	r3, [r7, #0]
 c005b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c005b2c:	2b00      	cmp	r3, #0
 c005b2e:	d004      	beq.n	c005b3a <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 c005b30:	693b      	ldr	r3, [r7, #16]
 c005b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c005b36:	613b      	str	r3, [r7, #16]
 c005b38:	e003      	b.n	c005b42 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 c005b3a:	693b      	ldr	r3, [r7, #16]
 c005b3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c005b40:	613b      	str	r3, [r7, #16]
  }

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Channel */
  /* Check what is the current SECM status */
  if ((hdma->Instance->CCR & DMA_CCR_SECM) == DMA_CCR_SECM)
 c005b42:	687b      	ldr	r3, [r7, #4]
 c005b44:	681b      	ldr	r3, [r3, #0]
 c005b46:	681b      	ldr	r3, [r3, #0]
 c005b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c005b4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c005b50:	d103      	bne.n	c005b5a <HAL_DMA_ConfigChannelAttributes+0x62>
  {
    /* Channel is currently secure */
    ccr_SECM = DMA_CCR_SECM;
 c005b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c005b56:	60fb      	str	r3, [r7, #12]
 c005b58:	e001      	b.n	c005b5e <HAL_DMA_ConfigChannelAttributes+0x66>
  }
  else
  {
    /* Channel is currently non-secure */
    ccr_SECM = 0U;
 c005b5a:	2300      	movs	r3, #0
 c005b5c:	60fb      	str	r3, [r7, #12]
  }

  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_MASK) != 0U)
 c005b5e:	683b      	ldr	r3, [r7, #0]
 c005b60:	f003 0302 	and.w	r3, r3, #2
 c005b64:	2b00      	cmp	r3, #0
 c005b66:	d012      	beq.n	c005b8e <HAL_DMA_ConfigChannelAttributes+0x96>
  {
    if((ChannelAttributes & DMA_CCR_SECM) != 0U)
 c005b68:	683b      	ldr	r3, [r7, #0]
 c005b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c005b6e:	2b00      	cmp	r3, #0
 c005b70:	d007      	beq.n	c005b82 <HAL_DMA_ConfigChannelAttributes+0x8a>
    {
      SET_BIT(ccr, DMA_CCR_SECM);
 c005b72:	693b      	ldr	r3, [r7, #16]
 c005b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c005b78:	613b      	str	r3, [r7, #16]
      /* Channel changed to secure */
      ccr_SECM = DMA_CCR_SECM;
 c005b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c005b7e:	60fb      	str	r3, [r7, #12]
 c005b80:	e005      	b.n	c005b8e <HAL_DMA_ConfigChannelAttributes+0x96>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_SECM);
 c005b82:	693b      	ldr	r3, [r7, #16]
 c005b84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 c005b88:	613b      	str	r3, [r7, #16]
      /* Channel changed to non-secure */
      ccr_SECM = 0U;
 c005b8a:	2300      	movs	r3, #0
 c005b8c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Channel source */
  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_SRC_MASK) != 0U)
 c005b8e:	683b      	ldr	r3, [r7, #0]
 c005b90:	f003 0304 	and.w	r3, r3, #4
 c005b94:	2b00      	cmp	r3, #0
 c005b96:	d013      	beq.n	c005bc0 <HAL_DMA_ConfigChannelAttributes+0xc8>
  {
    /* Configure Source security attributes */
    if ((ChannelAttributes & DMA_CCR_SSEC) != 0x0U)
 c005b98:	683b      	ldr	r3, [r7, #0]
 c005b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c005b9e:	2b00      	cmp	r3, #0
 c005ba0:	d00a      	beq.n	c005bb8 <HAL_DMA_ConfigChannelAttributes+0xc0>
    {
      /* SSEC can only be set if channel is secure */
      /* Otherwise configuration is not taken into account */
      if (ccr_SECM == 0U)
 c005ba2:	68fb      	ldr	r3, [r7, #12]
 c005ba4:	2b00      	cmp	r3, #0
 c005ba6:	d102      	bne.n	c005bae <HAL_DMA_ConfigChannelAttributes+0xb6>
      {
        /* DSEC can not be secure */
        /* Source channel is non secure */
         status = HAL_ERROR;
 c005ba8:	2301      	movs	r3, #1
 c005baa:	75fb      	strb	r3, [r7, #23]
 c005bac:	e008      	b.n	c005bc0 <HAL_DMA_ConfigChannelAttributes+0xc8>
      }
      else
      {
        SET_BIT(ccr, DMA_CCR_SSEC);
 c005bae:	693b      	ldr	r3, [r7, #16]
 c005bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c005bb4:	613b      	str	r3, [r7, #16]
 c005bb6:	e003      	b.n	c005bc0 <HAL_DMA_ConfigChannelAttributes+0xc8>
      }
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_SSEC);
 c005bb8:	693b      	ldr	r3, [r7, #16]
 c005bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c005bbe:	613b      	str	r3, [r7, #16]
    }
  }

  /* Channel destination */
  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_DEST_MASK) != 0U)
 c005bc0:	683b      	ldr	r3, [r7, #0]
 c005bc2:	f003 0308 	and.w	r3, r3, #8
 c005bc6:	2b00      	cmp	r3, #0
 c005bc8:	d013      	beq.n	c005bf2 <HAL_DMA_ConfigChannelAttributes+0xfa>
  {
    /* Configure Destination security attributes */
    if((ChannelAttributes & DMA_CCR_DSEC) != 0U)
 c005bca:	683b      	ldr	r3, [r7, #0]
 c005bcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c005bd0:	2b00      	cmp	r3, #0
 c005bd2:	d00a      	beq.n	c005bea <HAL_DMA_ConfigChannelAttributes+0xf2>
    {
      if (ccr_SECM == 0U)
 c005bd4:	68fb      	ldr	r3, [r7, #12]
 c005bd6:	2b00      	cmp	r3, #0
 c005bd8:	d102      	bne.n	c005be0 <HAL_DMA_ConfigChannelAttributes+0xe8>
      {
        /* DSEC can only be set if channel is secure */
        /* Destination channel is non secure */
         status = HAL_ERROR;
 c005bda:	2301      	movs	r3, #1
 c005bdc:	75fb      	strb	r3, [r7, #23]
 c005bde:	e008      	b.n	c005bf2 <HAL_DMA_ConfigChannelAttributes+0xfa>
      }
      else
      {
        SET_BIT(ccr, DMA_CCR_DSEC);
 c005be0:	693b      	ldr	r3, [r7, #16]
 c005be2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c005be6:	613b      	str	r3, [r7, #16]
 c005be8:	e003      	b.n	c005bf2 <HAL_DMA_ConfigChannelAttributes+0xfa>
      }
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_DSEC);
 c005bea:	693b      	ldr	r3, [r7, #16]
 c005bec:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 c005bf0:	613b      	str	r3, [r7, #16]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 c005bf2:	687b      	ldr	r3, [r7, #4]
 c005bf4:	681b      	ldr	r3, [r3, #0]
 c005bf6:	693a      	ldr	r2, [r7, #16]
 c005bf8:	601a      	str	r2, [r3, #0]

  return status;
 c005bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 c005bfc:	4618      	mov	r0, r3
 c005bfe:	371c      	adds	r7, #28
 c005c00:	46bd      	mov	sp, r7
 c005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005c06:	4770      	bx	lr

0c005c08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 c005c08:	b480      	push	{r7}
 c005c0a:	b085      	sub	sp, #20
 c005c0c:	af00      	add	r7, sp, #0
 c005c0e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 c005c10:	687b      	ldr	r3, [r7, #4]
 c005c12:	681b      	ldr	r3, [r3, #0]
 c005c14:	461a      	mov	r2, r3
 c005c16:	4b17      	ldr	r3, [pc, #92]	; (c005c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 c005c18:	429a      	cmp	r2, r3
 c005c1a:	d80a      	bhi.n	c005c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 c005c1c:	687b      	ldr	r3, [r7, #4]
 c005c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c005c20:	089b      	lsrs	r3, r3, #2
 c005c22:	009b      	lsls	r3, r3, #2
 c005c24:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 c005c28:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 c005c2c:	687a      	ldr	r2, [r7, #4]
 c005c2e:	6513      	str	r3, [r2, #80]	; 0x50
 c005c30:	e007      	b.n	c005c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 c005c32:	687b      	ldr	r3, [r7, #4]
 c005c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c005c36:	089b      	lsrs	r3, r3, #2
 c005c38:	009a      	lsls	r2, r3, #2
 c005c3a:	4b0f      	ldr	r3, [pc, #60]	; (c005c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 c005c3c:	4413      	add	r3, r2
 c005c3e:	687a      	ldr	r2, [r7, #4]
 c005c40:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 c005c42:	687b      	ldr	r3, [r7, #4]
 c005c44:	681b      	ldr	r3, [r3, #0]
 c005c46:	b2db      	uxtb	r3, r3
 c005c48:	3b08      	subs	r3, #8
 c005c4a:	4a0c      	ldr	r2, [pc, #48]	; (c005c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 c005c4c:	fba2 2303 	umull	r2, r3, r2, r3
 c005c50:	091b      	lsrs	r3, r3, #4
 c005c52:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 c005c54:	687b      	ldr	r3, [r7, #4]
 c005c56:	4a0a      	ldr	r2, [pc, #40]	; (c005c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 c005c58:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 c005c5a:	68fb      	ldr	r3, [r7, #12]
 c005c5c:	f003 031f 	and.w	r3, r3, #31
 c005c60:	2201      	movs	r2, #1
 c005c62:	409a      	lsls	r2, r3
 c005c64:	687b      	ldr	r3, [r7, #4]
 c005c66:	659a      	str	r2, [r3, #88]	; 0x58
}
 c005c68:	bf00      	nop
 c005c6a:	3714      	adds	r7, #20
 c005c6c:	46bd      	mov	sp, r7
 c005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005c72:	4770      	bx	lr
 c005c74:	50020407 	.word	0x50020407
 c005c78:	50020820 	.word	0x50020820
 c005c7c:	cccccccd 	.word	0xcccccccd
 c005c80:	50020880 	.word	0x50020880

0c005c84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 c005c84:	b480      	push	{r7}
 c005c86:	b085      	sub	sp, #20
 c005c88:	af00      	add	r7, sp, #0
 c005c8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 c005c8c:	687b      	ldr	r3, [r7, #4]
 c005c8e:	685b      	ldr	r3, [r3, #4]
 c005c90:	b2db      	uxtb	r3, r3
 c005c92:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 c005c94:	68fa      	ldr	r2, [r7, #12]
 c005c96:	4b0b      	ldr	r3, [pc, #44]	; (c005cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 c005c98:	4413      	add	r3, r2
 c005c9a:	009b      	lsls	r3, r3, #2
 c005c9c:	461a      	mov	r2, r3
 c005c9e:	687b      	ldr	r3, [r7, #4]
 c005ca0:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 c005ca2:	687b      	ldr	r3, [r7, #4]
 c005ca4:	4a08      	ldr	r2, [pc, #32]	; (c005cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 c005ca6:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 c005ca8:	68fb      	ldr	r3, [r7, #12]
 c005caa:	3b01      	subs	r3, #1
 c005cac:	f003 0303 	and.w	r3, r3, #3
 c005cb0:	2201      	movs	r2, #1
 c005cb2:	409a      	lsls	r2, r3
 c005cb4:	687b      	ldr	r3, [r7, #4]
 c005cb6:	665a      	str	r2, [r3, #100]	; 0x64
}
 c005cb8:	bf00      	nop
 c005cba:	3714      	adds	r7, #20
 c005cbc:	46bd      	mov	sp, r7
 c005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005cc2:	4770      	bx	lr
 c005cc4:	1400823f 	.word	0x1400823f
 c005cc8:	50020940 	.word	0x50020940

0c005ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c005ccc:	b480      	push	{r7}
 c005cce:	b087      	sub	sp, #28
 c005cd0:	af00      	add	r7, sp, #0
 c005cd2:	6078      	str	r0, [r7, #4]
 c005cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c005cd6:	2300      	movs	r3, #0
 c005cd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c005cda:	e158      	b.n	c005f8e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c005cdc:	683b      	ldr	r3, [r7, #0]
 c005cde:	681a      	ldr	r2, [r3, #0]
 c005ce0:	2101      	movs	r1, #1
 c005ce2:	697b      	ldr	r3, [r7, #20]
 c005ce4:	fa01 f303 	lsl.w	r3, r1, r3
 c005ce8:	4013      	ands	r3, r2
 c005cea:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 c005cec:	68fb      	ldr	r3, [r7, #12]
 c005cee:	2b00      	cmp	r3, #0
 c005cf0:	f000 814a 	beq.w	c005f88 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c005cf4:	683b      	ldr	r3, [r7, #0]
 c005cf6:	685b      	ldr	r3, [r3, #4]
 c005cf8:	2b01      	cmp	r3, #1
 c005cfa:	d00b      	beq.n	c005d14 <HAL_GPIO_Init+0x48>
 c005cfc:	683b      	ldr	r3, [r7, #0]
 c005cfe:	685b      	ldr	r3, [r3, #4]
 c005d00:	2b02      	cmp	r3, #2
 c005d02:	d007      	beq.n	c005d14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c005d04:	683b      	ldr	r3, [r7, #0]
 c005d06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c005d08:	2b11      	cmp	r3, #17
 c005d0a:	d003      	beq.n	c005d14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c005d0c:	683b      	ldr	r3, [r7, #0]
 c005d0e:	685b      	ldr	r3, [r3, #4]
 c005d10:	2b12      	cmp	r3, #18
 c005d12:	d130      	bne.n	c005d76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c005d14:	687b      	ldr	r3, [r7, #4]
 c005d16:	689b      	ldr	r3, [r3, #8]
 c005d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c005d1a:	697b      	ldr	r3, [r7, #20]
 c005d1c:	005b      	lsls	r3, r3, #1
 c005d1e:	2203      	movs	r2, #3
 c005d20:	fa02 f303 	lsl.w	r3, r2, r3
 c005d24:	43db      	mvns	r3, r3
 c005d26:	693a      	ldr	r2, [r7, #16]
 c005d28:	4013      	ands	r3, r2
 c005d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c005d2c:	683b      	ldr	r3, [r7, #0]
 c005d2e:	68da      	ldr	r2, [r3, #12]
 c005d30:	697b      	ldr	r3, [r7, #20]
 c005d32:	005b      	lsls	r3, r3, #1
 c005d34:	fa02 f303 	lsl.w	r3, r2, r3
 c005d38:	693a      	ldr	r2, [r7, #16]
 c005d3a:	4313      	orrs	r3, r2
 c005d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c005d3e:	687b      	ldr	r3, [r7, #4]
 c005d40:	693a      	ldr	r2, [r7, #16]
 c005d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c005d44:	687b      	ldr	r3, [r7, #4]
 c005d46:	685b      	ldr	r3, [r3, #4]
 c005d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c005d4a:	2201      	movs	r2, #1
 c005d4c:	697b      	ldr	r3, [r7, #20]
 c005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 c005d52:	43db      	mvns	r3, r3
 c005d54:	693a      	ldr	r2, [r7, #16]
 c005d56:	4013      	ands	r3, r2
 c005d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 c005d5a:	683b      	ldr	r3, [r7, #0]
 c005d5c:	685b      	ldr	r3, [r3, #4]
 c005d5e:	091b      	lsrs	r3, r3, #4
 c005d60:	f003 0201 	and.w	r2, r3, #1
 c005d64:	697b      	ldr	r3, [r7, #20]
 c005d66:	fa02 f303 	lsl.w	r3, r2, r3
 c005d6a:	693a      	ldr	r2, [r7, #16]
 c005d6c:	4313      	orrs	r3, r2
 c005d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c005d70:	687b      	ldr	r3, [r7, #4]
 c005d72:	693a      	ldr	r2, [r7, #16]
 c005d74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 c005d76:	687b      	ldr	r3, [r7, #4]
 c005d78:	68db      	ldr	r3, [r3, #12]
 c005d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c005d7c:	697b      	ldr	r3, [r7, #20]
 c005d7e:	005b      	lsls	r3, r3, #1
 c005d80:	2203      	movs	r2, #3
 c005d82:	fa02 f303 	lsl.w	r3, r2, r3
 c005d86:	43db      	mvns	r3, r3
 c005d88:	693a      	ldr	r2, [r7, #16]
 c005d8a:	4013      	ands	r3, r2
 c005d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c005d8e:	683b      	ldr	r3, [r7, #0]
 c005d90:	689a      	ldr	r2, [r3, #8]
 c005d92:	697b      	ldr	r3, [r7, #20]
 c005d94:	005b      	lsls	r3, r3, #1
 c005d96:	fa02 f303 	lsl.w	r3, r2, r3
 c005d9a:	693a      	ldr	r2, [r7, #16]
 c005d9c:	4313      	orrs	r3, r2
 c005d9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 c005da0:	687b      	ldr	r3, [r7, #4]
 c005da2:	693a      	ldr	r2, [r7, #16]
 c005da4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c005da6:	683b      	ldr	r3, [r7, #0]
 c005da8:	685b      	ldr	r3, [r3, #4]
 c005daa:	2b02      	cmp	r3, #2
 c005dac:	d003      	beq.n	c005db6 <HAL_GPIO_Init+0xea>
 c005dae:	683b      	ldr	r3, [r7, #0]
 c005db0:	685b      	ldr	r3, [r3, #4]
 c005db2:	2b12      	cmp	r3, #18
 c005db4:	d123      	bne.n	c005dfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c005db6:	697b      	ldr	r3, [r7, #20]
 c005db8:	08da      	lsrs	r2, r3, #3
 c005dba:	687b      	ldr	r3, [r7, #4]
 c005dbc:	3208      	adds	r2, #8
 c005dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c005dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c005dc4:	697b      	ldr	r3, [r7, #20]
 c005dc6:	f003 0307 	and.w	r3, r3, #7
 c005dca:	009b      	lsls	r3, r3, #2
 c005dcc:	220f      	movs	r2, #15
 c005dce:	fa02 f303 	lsl.w	r3, r2, r3
 c005dd2:	43db      	mvns	r3, r3
 c005dd4:	693a      	ldr	r2, [r7, #16]
 c005dd6:	4013      	ands	r3, r2
 c005dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c005dda:	683b      	ldr	r3, [r7, #0]
 c005ddc:	691a      	ldr	r2, [r3, #16]
 c005dde:	697b      	ldr	r3, [r7, #20]
 c005de0:	f003 0307 	and.w	r3, r3, #7
 c005de4:	009b      	lsls	r3, r3, #2
 c005de6:	fa02 f303 	lsl.w	r3, r2, r3
 c005dea:	693a      	ldr	r2, [r7, #16]
 c005dec:	4313      	orrs	r3, r2
 c005dee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c005df0:	697b      	ldr	r3, [r7, #20]
 c005df2:	08da      	lsrs	r2, r3, #3
 c005df4:	687b      	ldr	r3, [r7, #4]
 c005df6:	3208      	adds	r2, #8
 c005df8:	6939      	ldr	r1, [r7, #16]
 c005dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c005dfe:	687b      	ldr	r3, [r7, #4]
 c005e00:	681b      	ldr	r3, [r3, #0]
 c005e02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c005e04:	697b      	ldr	r3, [r7, #20]
 c005e06:	005b      	lsls	r3, r3, #1
 c005e08:	2203      	movs	r2, #3
 c005e0a:	fa02 f303 	lsl.w	r3, r2, r3
 c005e0e:	43db      	mvns	r3, r3
 c005e10:	693a      	ldr	r2, [r7, #16]
 c005e12:	4013      	ands	r3, r2
 c005e14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c005e16:	683b      	ldr	r3, [r7, #0]
 c005e18:	685b      	ldr	r3, [r3, #4]
 c005e1a:	f003 0203 	and.w	r2, r3, #3
 c005e1e:	697b      	ldr	r3, [r7, #20]
 c005e20:	005b      	lsls	r3, r3, #1
 c005e22:	fa02 f303 	lsl.w	r3, r2, r3
 c005e26:	693a      	ldr	r2, [r7, #16]
 c005e28:	4313      	orrs	r3, r2
 c005e2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c005e2c:	687b      	ldr	r3, [r7, #4]
 c005e2e:	693a      	ldr	r2, [r7, #16]
 c005e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c005e32:	683b      	ldr	r3, [r7, #0]
 c005e34:	685b      	ldr	r3, [r3, #4]
 c005e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c005e3a:	2b00      	cmp	r3, #0
 c005e3c:	f000 80a4 	beq.w	c005f88 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c005e40:	4a5a      	ldr	r2, [pc, #360]	; (c005fac <HAL_GPIO_Init+0x2e0>)
 c005e42:	697b      	ldr	r3, [r7, #20]
 c005e44:	089b      	lsrs	r3, r3, #2
 c005e46:	3318      	adds	r3, #24
 c005e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005e4c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c005e4e:	697b      	ldr	r3, [r7, #20]
 c005e50:	f003 0303 	and.w	r3, r3, #3
 c005e54:	00db      	lsls	r3, r3, #3
 c005e56:	220f      	movs	r2, #15
 c005e58:	fa02 f303 	lsl.w	r3, r2, r3
 c005e5c:	43db      	mvns	r3, r3
 c005e5e:	693a      	ldr	r2, [r7, #16]
 c005e60:	4013      	ands	r3, r2
 c005e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c005e64:	687b      	ldr	r3, [r7, #4]
 c005e66:	4a52      	ldr	r2, [pc, #328]	; (c005fb0 <HAL_GPIO_Init+0x2e4>)
 c005e68:	4293      	cmp	r3, r2
 c005e6a:	d025      	beq.n	c005eb8 <HAL_GPIO_Init+0x1ec>
 c005e6c:	687b      	ldr	r3, [r7, #4]
 c005e6e:	4a51      	ldr	r2, [pc, #324]	; (c005fb4 <HAL_GPIO_Init+0x2e8>)
 c005e70:	4293      	cmp	r3, r2
 c005e72:	d01f      	beq.n	c005eb4 <HAL_GPIO_Init+0x1e8>
 c005e74:	687b      	ldr	r3, [r7, #4]
 c005e76:	4a50      	ldr	r2, [pc, #320]	; (c005fb8 <HAL_GPIO_Init+0x2ec>)
 c005e78:	4293      	cmp	r3, r2
 c005e7a:	d019      	beq.n	c005eb0 <HAL_GPIO_Init+0x1e4>
 c005e7c:	687b      	ldr	r3, [r7, #4]
 c005e7e:	4a4f      	ldr	r2, [pc, #316]	; (c005fbc <HAL_GPIO_Init+0x2f0>)
 c005e80:	4293      	cmp	r3, r2
 c005e82:	d013      	beq.n	c005eac <HAL_GPIO_Init+0x1e0>
 c005e84:	687b      	ldr	r3, [r7, #4]
 c005e86:	4a4e      	ldr	r2, [pc, #312]	; (c005fc0 <HAL_GPIO_Init+0x2f4>)
 c005e88:	4293      	cmp	r3, r2
 c005e8a:	d00d      	beq.n	c005ea8 <HAL_GPIO_Init+0x1dc>
 c005e8c:	687b      	ldr	r3, [r7, #4]
 c005e8e:	4a4d      	ldr	r2, [pc, #308]	; (c005fc4 <HAL_GPIO_Init+0x2f8>)
 c005e90:	4293      	cmp	r3, r2
 c005e92:	d007      	beq.n	c005ea4 <HAL_GPIO_Init+0x1d8>
 c005e94:	687b      	ldr	r3, [r7, #4]
 c005e96:	4a4c      	ldr	r2, [pc, #304]	; (c005fc8 <HAL_GPIO_Init+0x2fc>)
 c005e98:	4293      	cmp	r3, r2
 c005e9a:	d101      	bne.n	c005ea0 <HAL_GPIO_Init+0x1d4>
 c005e9c:	2306      	movs	r3, #6
 c005e9e:	e00c      	b.n	c005eba <HAL_GPIO_Init+0x1ee>
 c005ea0:	2307      	movs	r3, #7
 c005ea2:	e00a      	b.n	c005eba <HAL_GPIO_Init+0x1ee>
 c005ea4:	2305      	movs	r3, #5
 c005ea6:	e008      	b.n	c005eba <HAL_GPIO_Init+0x1ee>
 c005ea8:	2304      	movs	r3, #4
 c005eaa:	e006      	b.n	c005eba <HAL_GPIO_Init+0x1ee>
 c005eac:	2303      	movs	r3, #3
 c005eae:	e004      	b.n	c005eba <HAL_GPIO_Init+0x1ee>
 c005eb0:	2302      	movs	r3, #2
 c005eb2:	e002      	b.n	c005eba <HAL_GPIO_Init+0x1ee>
 c005eb4:	2301      	movs	r3, #1
 c005eb6:	e000      	b.n	c005eba <HAL_GPIO_Init+0x1ee>
 c005eb8:	2300      	movs	r3, #0
 c005eba:	697a      	ldr	r2, [r7, #20]
 c005ebc:	f002 0203 	and.w	r2, r2, #3
 c005ec0:	00d2      	lsls	r2, r2, #3
 c005ec2:	4093      	lsls	r3, r2
 c005ec4:	693a      	ldr	r2, [r7, #16]
 c005ec6:	4313      	orrs	r3, r2
 c005ec8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c005eca:	4938      	ldr	r1, [pc, #224]	; (c005fac <HAL_GPIO_Init+0x2e0>)
 c005ecc:	697b      	ldr	r3, [r7, #20]
 c005ece:	089b      	lsrs	r3, r3, #2
 c005ed0:	3318      	adds	r3, #24
 c005ed2:	693a      	ldr	r2, [r7, #16]
 c005ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 c005ed8:	4b34      	ldr	r3, [pc, #208]	; (c005fac <HAL_GPIO_Init+0x2e0>)
 c005eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c005ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c005ee0:	68fb      	ldr	r3, [r7, #12]
 c005ee2:	43db      	mvns	r3, r3
 c005ee4:	693a      	ldr	r2, [r7, #16]
 c005ee6:	4013      	ands	r3, r2
 c005ee8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c005eea:	683b      	ldr	r3, [r7, #0]
 c005eec:	685b      	ldr	r3, [r3, #4]
 c005eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c005ef2:	2b00      	cmp	r3, #0
 c005ef4:	d003      	beq.n	c005efe <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 c005ef6:	693a      	ldr	r2, [r7, #16]
 c005ef8:	68fb      	ldr	r3, [r7, #12]
 c005efa:	4313      	orrs	r3, r2
 c005efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c005efe:	4a2b      	ldr	r2, [pc, #172]	; (c005fac <HAL_GPIO_Init+0x2e0>)
 c005f00:	693b      	ldr	r3, [r7, #16]
 c005f02:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 c005f06:	4b29      	ldr	r3, [pc, #164]	; (c005fac <HAL_GPIO_Init+0x2e0>)
 c005f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c005f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c005f0e:	68fb      	ldr	r3, [r7, #12]
 c005f10:	43db      	mvns	r3, r3
 c005f12:	693a      	ldr	r2, [r7, #16]
 c005f14:	4013      	ands	r3, r2
 c005f16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c005f18:	683b      	ldr	r3, [r7, #0]
 c005f1a:	685b      	ldr	r3, [r3, #4]
 c005f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c005f20:	2b00      	cmp	r3, #0
 c005f22:	d003      	beq.n	c005f2c <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 c005f24:	693a      	ldr	r2, [r7, #16]
 c005f26:	68fb      	ldr	r3, [r7, #12]
 c005f28:	4313      	orrs	r3, r2
 c005f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c005f2c:	4a1f      	ldr	r2, [pc, #124]	; (c005fac <HAL_GPIO_Init+0x2e0>)
 c005f2e:	693b      	ldr	r3, [r7, #16]
 c005f30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c005f34:	4b1d      	ldr	r3, [pc, #116]	; (c005fac <HAL_GPIO_Init+0x2e0>)
 c005f36:	681b      	ldr	r3, [r3, #0]
 c005f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c005f3a:	68fb      	ldr	r3, [r7, #12]
 c005f3c:	43db      	mvns	r3, r3
 c005f3e:	693a      	ldr	r2, [r7, #16]
 c005f40:	4013      	ands	r3, r2
 c005f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c005f44:	683b      	ldr	r3, [r7, #0]
 c005f46:	685b      	ldr	r3, [r3, #4]
 c005f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c005f4c:	2b00      	cmp	r3, #0
 c005f4e:	d003      	beq.n	c005f58 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 c005f50:	693a      	ldr	r2, [r7, #16]
 c005f52:	68fb      	ldr	r3, [r7, #12]
 c005f54:	4313      	orrs	r3, r2
 c005f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c005f58:	4a14      	ldr	r2, [pc, #80]	; (c005fac <HAL_GPIO_Init+0x2e0>)
 c005f5a:	693b      	ldr	r3, [r7, #16]
 c005f5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c005f5e:	4b13      	ldr	r3, [pc, #76]	; (c005fac <HAL_GPIO_Init+0x2e0>)
 c005f60:	685b      	ldr	r3, [r3, #4]
 c005f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c005f64:	68fb      	ldr	r3, [r7, #12]
 c005f66:	43db      	mvns	r3, r3
 c005f68:	693a      	ldr	r2, [r7, #16]
 c005f6a:	4013      	ands	r3, r2
 c005f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c005f6e:	683b      	ldr	r3, [r7, #0]
 c005f70:	685b      	ldr	r3, [r3, #4]
 c005f72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c005f76:	2b00      	cmp	r3, #0
 c005f78:	d003      	beq.n	c005f82 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 c005f7a:	693a      	ldr	r2, [r7, #16]
 c005f7c:	68fb      	ldr	r3, [r7, #12]
 c005f7e:	4313      	orrs	r3, r2
 c005f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c005f82:	4a0a      	ldr	r2, [pc, #40]	; (c005fac <HAL_GPIO_Init+0x2e0>)
 c005f84:	693b      	ldr	r3, [r7, #16]
 c005f86:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 c005f88:	697b      	ldr	r3, [r7, #20]
 c005f8a:	3301      	adds	r3, #1
 c005f8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c005f8e:	683b      	ldr	r3, [r7, #0]
 c005f90:	681a      	ldr	r2, [r3, #0]
 c005f92:	697b      	ldr	r3, [r7, #20]
 c005f94:	fa22 f303 	lsr.w	r3, r2, r3
 c005f98:	2b00      	cmp	r3, #0
 c005f9a:	f47f ae9f 	bne.w	c005cdc <HAL_GPIO_Init+0x10>
  }
}
 c005f9e:	bf00      	nop
 c005fa0:	bf00      	nop
 c005fa2:	371c      	adds	r7, #28
 c005fa4:	46bd      	mov	sp, r7
 c005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005faa:	4770      	bx	lr
 c005fac:	5002f400 	.word	0x5002f400
 c005fb0:	52020000 	.word	0x52020000
 c005fb4:	52020400 	.word	0x52020400
 c005fb8:	52020800 	.word	0x52020800
 c005fbc:	52020c00 	.word	0x52020c00
 c005fc0:	52021000 	.word	0x52021000
 c005fc4:	52021400 	.word	0x52021400
 c005fc8:	52021800 	.word	0x52021800

0c005fcc <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c005fcc:	b480      	push	{r7}
 c005fce:	b085      	sub	sp, #20
 c005fd0:	af00      	add	r7, sp, #0
 c005fd2:	6078      	str	r0, [r7, #4]
 c005fd4:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c005fd6:	683b      	ldr	r3, [r7, #0]
 c005fd8:	f5b3 7f41 	cmp.w	r3, #772	; 0x304
 c005fdc:	d216      	bcs.n	c00600c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c005fde:	687b      	ldr	r3, [r7, #4]
 c005fe0:	0f1b      	lsrs	r3, r3, #28
 c005fe2:	015a      	lsls	r2, r3, #5
 c005fe4:	687b      	ldr	r3, [r7, #4]
 c005fe6:	f003 031f 	and.w	r3, r3, #31
 c005fea:	4413      	add	r3, r2
 c005fec:	2b32      	cmp	r3, #50	; 0x32
 c005fee:	d80d      	bhi.n	c00600c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c005ff0:	687b      	ldr	r3, [r7, #4]
 c005ff2:	f003 0320 	and.w	r3, r3, #32
 c005ff6:	2b00      	cmp	r3, #0
 c005ff8:	d00a      	beq.n	c006010 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
 c005ffa:	687b      	ldr	r3, [r7, #4]
 c005ffc:	0f1b      	lsrs	r3, r3, #28
 c005ffe:	015a      	lsls	r2, r3, #5
 c006000:	687b      	ldr	r3, [r7, #4]
 c006002:	f003 031f 	and.w	r3, r3, #31
 c006006:	4413      	add	r3, r2
 c006008:	2b00      	cmp	r3, #0
 c00600a:	d001      	beq.n	c006010 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
  {
    return HAL_ERROR;
 c00600c:	2301      	movs	r3, #1
 c00600e:	e0a4      	b.n	c00615a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18e>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c006010:	687b      	ldr	r3, [r7, #4]
 c006012:	f003 0320 	and.w	r3, r3, #32
 c006016:	2b00      	cmp	r3, #0
 c006018:	d04a      	beq.n	c0060b0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xe4>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c00601a:	683a      	ldr	r2, [r7, #0]
 c00601c:	f240 1301 	movw	r3, #257	; 0x101
 c006020:	4013      	ands	r3, r2
 c006022:	f240 1201 	movw	r2, #257	; 0x101
 c006026:	4293      	cmp	r3, r2
 c006028:	d10c      	bne.n	c006044 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x78>
    {
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c00602a:	4b4f      	ldr	r3, [pc, #316]	; (c006168 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00602c:	691b      	ldr	r3, [r3, #16]
 c00602e:	4b4e      	ldr	r3, [pc, #312]	; (c006168 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c006030:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c006034:	611a      	str	r2, [r3, #16]
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c006036:	4b4c      	ldr	r3, [pc, #304]	; (c006168 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c006038:	695a      	ldr	r2, [r3, #20]
 c00603a:	494b      	ldr	r1, [pc, #300]	; (c006168 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00603c:	4b4b      	ldr	r3, [pc, #300]	; (c00616c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a0>)
 c00603e:	4313      	orrs	r3, r2
 c006040:	614b      	str	r3, [r1, #20]
 c006042:	e00f      	b.n	c006064 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c006044:	683b      	ldr	r3, [r7, #0]
 c006046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00604a:	2b00      	cmp	r3, #0
 c00604c:	d00a      	beq.n	c006064 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
    {
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c00604e:	4b46      	ldr	r3, [pc, #280]	; (c006168 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c006050:	691b      	ldr	r3, [r3, #16]
 c006052:	4b45      	ldr	r3, [pc, #276]	; (c006168 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c006054:	2200      	movs	r2, #0
 c006056:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c006058:	4b43      	ldr	r3, [pc, #268]	; (c006168 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00605a:	695a      	ldr	r2, [r3, #20]
 c00605c:	4942      	ldr	r1, [pc, #264]	; (c006168 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00605e:	4b44      	ldr	r3, [pc, #272]	; (c006170 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c006060:	4013      	ands	r3, r2
 c006062:	614b      	str	r3, [r1, #20]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c006064:	683a      	ldr	r2, [r7, #0]
 c006066:	f240 2302 	movw	r3, #514	; 0x202
 c00606a:	4013      	ands	r3, r2
 c00606c:	f240 2202 	movw	r2, #514	; 0x202
 c006070:	4293      	cmp	r3, r2
 c006072:	d10c      	bne.n	c00608e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xc2>
    {
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c006074:	4b3c      	ldr	r3, [pc, #240]	; (c006168 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c006076:	6a1b      	ldr	r3, [r3, #32]
 c006078:	4b3b      	ldr	r3, [pc, #236]	; (c006168 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00607a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c00607e:	621a      	str	r2, [r3, #32]
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c006080:	4b39      	ldr	r3, [pc, #228]	; (c006168 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c006082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c006084:	4938      	ldr	r1, [pc, #224]	; (c006168 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c006086:	4b39      	ldr	r3, [pc, #228]	; (c00616c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a0>)
 c006088:	4313      	orrs	r3, r2
 c00608a:	624b      	str	r3, [r1, #36]	; 0x24
 c00608c:	e064      	b.n	c006158 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c00608e:	683b      	ldr	r3, [r7, #0]
 c006090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c006094:	2b00      	cmp	r3, #0
 c006096:	d05f      	beq.n	c006158 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    {
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c006098:	4b33      	ldr	r3, [pc, #204]	; (c006168 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00609a:	6a1b      	ldr	r3, [r3, #32]
 c00609c:	4b32      	ldr	r3, [pc, #200]	; (c006168 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00609e:	2200      	movs	r2, #0
 c0060a0:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c0060a2:	4b31      	ldr	r3, [pc, #196]	; (c006168 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0060a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0060a6:	4930      	ldr	r1, [pc, #192]	; (c006168 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0060a8:	4b31      	ldr	r3, [pc, #196]	; (c006170 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0060aa:	4013      	ands	r3, r2
 c0060ac:	624b      	str	r3, [r1, #36]	; 0x24
 c0060ae:	e053      	b.n	c006158 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
  {
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c0060b0:	687b      	ldr	r3, [r7, #4]
 c0060b2:	0f1a      	lsrs	r2, r3, #28
 c0060b4:	4b2f      	ldr	r3, [pc, #188]	; (c006174 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a8>)
 c0060b6:	4413      	add	r3, r2
 c0060b8:	009b      	lsls	r3, r3, #2
 c0060ba:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c0060bc:	683a      	ldr	r2, [r7, #0]
 c0060be:	f240 1301 	movw	r3, #257	; 0x101
 c0060c2:	4013      	ands	r3, r2
 c0060c4:	f240 1201 	movw	r2, #257	; 0x101
 c0060c8:	4293      	cmp	r3, r2
 c0060ca:	d10a      	bne.n	c0060e2 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x116>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0060cc:	68fb      	ldr	r3, [r7, #12]
 c0060ce:	6819      	ldr	r1, [r3, #0]
 c0060d0:	687b      	ldr	r3, [r7, #4]
 c0060d2:	f003 031f 	and.w	r3, r3, #31
 c0060d6:	2201      	movs	r2, #1
 c0060d8:	409a      	lsls	r2, r3
 c0060da:	68fb      	ldr	r3, [r7, #12]
 c0060dc:	430a      	orrs	r2, r1
 c0060de:	601a      	str	r2, [r3, #0]
 c0060e0:	e010      	b.n	c006104 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x138>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c0060e2:	683b      	ldr	r3, [r7, #0]
 c0060e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0060e8:	2b00      	cmp	r3, #0
 c0060ea:	d00b      	beq.n	c006104 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x138>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0060ec:	68fb      	ldr	r3, [r7, #12]
 c0060ee:	6819      	ldr	r1, [r3, #0]
 c0060f0:	687b      	ldr	r3, [r7, #4]
 c0060f2:	f003 031f 	and.w	r3, r3, #31
 c0060f6:	2201      	movs	r2, #1
 c0060f8:	fa02 f303 	lsl.w	r3, r2, r3
 c0060fc:	43da      	mvns	r2, r3
 c0060fe:	68fb      	ldr	r3, [r7, #12]
 c006100:	400a      	ands	r2, r1
 c006102:	601a      	str	r2, [r3, #0]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(GTZC_TZSC->PRIVCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c006104:	687b      	ldr	r3, [r7, #4]
 c006106:	0f1a      	lsrs	r2, r3, #28
 c006108:	4b1b      	ldr	r3, [pc, #108]	; (c006178 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1ac>)
 c00610a:	4413      	add	r3, r2
 c00610c:	009b      	lsls	r3, r3, #2
 c00610e:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c006110:	683a      	ldr	r2, [r7, #0]
 c006112:	f240 2302 	movw	r3, #514	; 0x202
 c006116:	4013      	ands	r3, r2
 c006118:	f240 2202 	movw	r2, #514	; 0x202
 c00611c:	4293      	cmp	r3, r2
 c00611e:	d10a      	bne.n	c006136 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x16a>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c006120:	68fb      	ldr	r3, [r7, #12]
 c006122:	6819      	ldr	r1, [r3, #0]
 c006124:	687b      	ldr	r3, [r7, #4]
 c006126:	f003 031f 	and.w	r3, r3, #31
 c00612a:	2201      	movs	r2, #1
 c00612c:	409a      	lsls	r2, r3
 c00612e:	68fb      	ldr	r3, [r7, #12]
 c006130:	430a      	orrs	r2, r1
 c006132:	601a      	str	r2, [r3, #0]
 c006134:	e010      	b.n	c006158 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c006136:	683b      	ldr	r3, [r7, #0]
 c006138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c00613c:	2b00      	cmp	r3, #0
 c00613e:	d00b      	beq.n	c006158 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c006140:	68fb      	ldr	r3, [r7, #12]
 c006142:	6819      	ldr	r1, [r3, #0]
 c006144:	687b      	ldr	r3, [r7, #4]
 c006146:	f003 031f 	and.w	r3, r3, #31
 c00614a:	2201      	movs	r2, #1
 c00614c:	fa02 f303 	lsl.w	r3, r2, r3
 c006150:	43da      	mvns	r2, r3
 c006152:	68fb      	ldr	r3, [r7, #12]
 c006154:	400a      	ands	r2, r1
 c006156:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c006158:	2300      	movs	r3, #0
}
 c00615a:	4618      	mov	r0, r3
 c00615c:	3714      	adds	r7, #20
 c00615e:	46bd      	mov	sp, r7
 c006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006164:	4770      	bx	lr
 c006166:	bf00      	nop
 c006168:	50032400 	.word	0x50032400
 c00616c:	00076fff 	.word	0x00076fff
 c006170:	fff89000 	.word	0xfff89000
 c006174:	1400c904 	.word	0x1400c904
 c006178:	1400c908 	.word	0x1400c908

0c00617c <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c00617c:	b480      	push	{r7}
 c00617e:	b089      	sub	sp, #36	; 0x24
 c006180:	af00      	add	r7, sp, #0
 c006182:	6078      	str	r0, [r7, #4]
 c006184:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c006186:	687b      	ldr	r3, [r7, #4]
 c006188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c00618c:	d00b      	beq.n	c0061a6 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c00618e:	687b      	ldr	r3, [r7, #4]
 c006190:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c006194:	d007      	beq.n	c0061a6 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c006196:	687b      	ldr	r3, [r7, #4]
 c006198:	4a36      	ldr	r2, [pc, #216]	; (c006274 <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c00619a:	4293      	cmp	r3, r2
 c00619c:	d003      	beq.n	c0061a6 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c00619e:	687b      	ldr	r3, [r7, #4]
 c0061a0:	4a35      	ldr	r2, [pc, #212]	; (c006278 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c0061a2:	4293      	cmp	r3, r2
 c0061a4:	d111      	bne.n	c0061ca <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c0061a6:	683b      	ldr	r3, [r7, #0]
 c0061a8:	681b      	ldr	r3, [r3, #0]
 c0061aa:	2b00      	cmp	r3, #0
 c0061ac:	d004      	beq.n	c0061b8 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c0061ae:	683b      	ldr	r3, [r7, #0]
 c0061b0:	681b      	ldr	r3, [r3, #0]
 c0061b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c0061b6:	d108      	bne.n	c0061ca <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c0061b8:	683b      	ldr	r3, [r7, #0]
 c0061ba:	685b      	ldr	r3, [r3, #4]
 c0061bc:	2b00      	cmp	r3, #0
 c0061be:	d006      	beq.n	c0061ce <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c0061c0:	683b      	ldr	r3, [r7, #0]
 c0061c2:	685b      	ldr	r3, [r3, #4]
 c0061c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c0061c8:	d001      	beq.n	c0061ce <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c0061ca:	2301      	movs	r3, #1
 c0061cc:	e04b      	b.n	c006266 <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c0061ce:	683b      	ldr	r3, [r7, #0]
 c0061d0:	685b      	ldr	r3, [r3, #4]
 c0061d2:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c0061d4:	683b      	ldr	r3, [r7, #0]
 c0061d6:	681b      	ldr	r3, [r3, #0]
 c0061d8:	693a      	ldr	r2, [r7, #16]
 c0061da:	4313      	orrs	r3, r2
 c0061dc:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0061de:	687b      	ldr	r3, [r7, #4]
 c0061e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c0061e4:	d003      	beq.n	c0061ee <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c0061e6:	687b      	ldr	r3, [r7, #4]
 c0061e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0061ec:	d105      	bne.n	c0061fa <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c0061ee:	4b23      	ldr	r3, [pc, #140]	; (c00627c <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c0061f0:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c0061f2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c0061f6:	61bb      	str	r3, [r7, #24]
 c0061f8:	e004      	b.n	c006204 <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c0061fa:	4b21      	ldr	r3, [pc, #132]	; (c006280 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c0061fc:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c0061fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c006202:	61bb      	str	r3, [r7, #24]
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c006204:	69fb      	ldr	r3, [r7, #28]
 c006206:	681b      	ldr	r3, [r3, #0]
 c006208:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c00620c:	693b      	ldr	r3, [r7, #16]
 c00620e:	431a      	orrs	r2, r3
 c006210:	69fb      	ldr	r3, [r7, #28]
 c006212:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);
  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c006214:	69bb      	ldr	r3, [r7, #24]
 c006216:	0b5b      	lsrs	r3, r3, #13
 c006218:	2201      	movs	r2, #1
 c00621a:	fa02 f303 	lsl.w	r3, r2, r3
 c00621e:	3b01      	subs	r3, #1
 c006220:	60fb      	str	r3, [r7, #12]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c006222:	69fb      	ldr	r3, [r7, #28]
 c006224:	691a      	ldr	r2, [r3, #16]
 c006226:	68fb      	ldr	r3, [r7, #12]
 c006228:	43db      	mvns	r3, r3
 c00622a:	401a      	ands	r2, r3
 c00622c:	683b      	ldr	r3, [r7, #0]
 c00622e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c006230:	431a      	orrs	r2, r3
 c006232:	69fb      	ldr	r3, [r7, #28]
 c006234:	611a      	str	r2, [r3, #16]

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c006236:	69bb      	ldr	r3, [r7, #24]
 c006238:	0b5b      	lsrs	r3, r3, #13
 c00623a:	60bb      	str	r3, [r7, #8]
  for (i = 0U; i < size_in_superblocks; i++)
 c00623c:	2300      	movs	r3, #0
 c00623e:	617b      	str	r3, [r7, #20]
 c006240:	e00c      	b.n	c00625c <HAL_GTZC_MPCBB_ConfigMem+0xe0>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c006242:	683b      	ldr	r3, [r7, #0]
 c006244:	697a      	ldr	r2, [r7, #20]
 c006246:	3202      	adds	r2, #2
 c006248:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c00624c:	69fb      	ldr	r3, [r7, #28]
 c00624e:	697a      	ldr	r2, [r7, #20]
 c006250:	3240      	adds	r2, #64	; 0x40
 c006252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c006256:	697b      	ldr	r3, [r7, #20]
 c006258:	3301      	adds	r3, #1
 c00625a:	617b      	str	r3, [r7, #20]
 c00625c:	697a      	ldr	r2, [r7, #20]
 c00625e:	68bb      	ldr	r3, [r7, #8]
 c006260:	429a      	cmp	r2, r3
 c006262:	d3ee      	bcc.n	c006242 <HAL_GTZC_MPCBB_ConfigMem+0xc6>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  return HAL_OK;
 c006264:	2300      	movs	r3, #0
}
 c006266:	4618      	mov	r0, r3
 c006268:	3724      	adds	r7, #36	; 0x24
 c00626a:	46bd      	mov	sp, r7
 c00626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006270:	4770      	bx	lr
 c006272:	bf00      	nop
 c006274:	20030000 	.word	0x20030000
 c006278:	30030000 	.word	0x30030000
 c00627c:	50032c00 	.word	0x50032c00
 c006280:	50033000 	.word	0x50033000

0c006284 <HAL_GTZC_TZIC_EnableIT>:
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId.
  *         Use GTZC_PERIPH_ALL to select all peripherals.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZIC_EnableIT(uint32_t PeriphId)
{
 c006284:	b480      	push	{r7}
 c006286:	b085      	sub	sp, #20
 c006288:	af00      	add	r7, sp, #0
 c00628a:	6078      	str	r0, [r7, #4]
  uint32_t register_address;

  /* check entry parameters */
  if ((HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZIC_PERIPH_NUMBER)
 c00628c:	687b      	ldr	r3, [r7, #4]
 c00628e:	0f1b      	lsrs	r3, r3, #28
 c006290:	015a      	lsls	r2, r3, #5
 c006292:	687b      	ldr	r3, [r7, #4]
 c006294:	f003 031f 	and.w	r3, r3, #31
 c006298:	4413      	add	r3, r2
 c00629a:	2b47      	cmp	r3, #71	; 0x47
 c00629c:	d80d      	bhi.n	c0062ba <HAL_GTZC_TZIC_EnableIT+0x36>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c00629e:	687b      	ldr	r3, [r7, #4]
 c0062a0:	f003 0320 	and.w	r3, r3, #32
 c0062a4:	2b00      	cmp	r3, #0
 c0062a6:	d00a      	beq.n	c0062be <HAL_GTZC_TZIC_EnableIT+0x3a>
 c0062a8:	687b      	ldr	r3, [r7, #4]
 c0062aa:	0f1b      	lsrs	r3, r3, #28
 c0062ac:	015a      	lsls	r2, r3, #5
 c0062ae:	687b      	ldr	r3, [r7, #4]
 c0062b0:	f003 031f 	and.w	r3, r3, #31
 c0062b4:	4413      	add	r3, r2
 c0062b6:	2b00      	cmp	r3, #0
 c0062b8:	d001      	beq.n	c0062be <HAL_GTZC_TZIC_EnableIT+0x3a>
  {
    return HAL_ERROR;
 c0062ba:	2301      	movs	r3, #1
 c0062bc:	e022      	b.n	c006304 <HAL_GTZC_TZIC_EnableIT+0x80>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c0062be:	687b      	ldr	r3, [r7, #4]
 c0062c0:	f003 0320 	and.w	r3, r3, #32
 c0062c4:	2b00      	cmp	r3, #0
 c0062c6:	d00a      	beq.n	c0062de <HAL_GTZC_TZIC_EnableIT+0x5a>
  {
    /* same configuration is applied to all peripherals */
    WRITE_REG(GTZC_TZIC->IER1, TZIC_IER1_ALL);
 c0062c8:	4b11      	ldr	r3, [pc, #68]	; (c006310 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c0062ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0062ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(GTZC_TZIC->IER2, TZIC_IER2_ALL);
 c0062d0:	4b0f      	ldr	r3, [pc, #60]	; (c006310 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c0062d2:	4a10      	ldr	r2, [pc, #64]	; (c006314 <HAL_GTZC_TZIC_EnableIT+0x90>)
 c0062d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(GTZC_TZIC->IER3, TZIC_IER3_ALL);
 c0062d6:	4b0e      	ldr	r3, [pc, #56]	; (c006310 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c0062d8:	22ff      	movs	r2, #255	; 0xff
 c0062da:	609a      	str	r2, [r3, #8]
 c0062dc:	e011      	b.n	c006302 <HAL_GTZC_TZIC_EnableIT+0x7e>
  }
  else
  {
    /* common case where only one peripheral is configured */
    register_address = (uint32_t) &(GTZC_TZIC->IER1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c0062de:	687b      	ldr	r3, [r7, #4]
 c0062e0:	0f1b      	lsrs	r3, r3, #28
 c0062e2:	f103 53a0 	add.w	r3, r3, #335544320	; 0x14000000
 c0062e6:	f503 434a 	add.w	r3, r3, #51712	; 0xca00
 c0062ea:	009b      	lsls	r3, r3, #2
 c0062ec:	60fb      	str	r3, [r7, #12]
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0062ee:	68fb      	ldr	r3, [r7, #12]
 c0062f0:	6819      	ldr	r1, [r3, #0]
 c0062f2:	687b      	ldr	r3, [r7, #4]
 c0062f4:	f003 031f 	and.w	r3, r3, #31
 c0062f8:	2201      	movs	r2, #1
 c0062fa:	409a      	lsls	r2, r3
 c0062fc:	68fb      	ldr	r3, [r7, #12]
 c0062fe:	430a      	orrs	r2, r1
 c006300:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 c006302:	2300      	movs	r3, #0
}
 c006304:	4618      	mov	r0, r3
 c006306:	3714      	adds	r7, #20
 c006308:	46bd      	mov	sp, r7
 c00630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00630e:	4770      	bx	lr
 c006310:	50032800 	.word	0x50032800
 c006314:	3fff6fff 	.word	0x3fff6fff

0c006318 <HAL_GTZC_IRQHandler>:
/**
  * @brief  This function handles GTZC interrupt request.
  * @retval None.
  */
void HAL_GTZC_IRQHandler(void)
{
 c006318:	b580      	push	{r7, lr}
 c00631a:	b084      	sub	sp, #16
 c00631c:	af00      	add	r7, sp, #0
  uint32_t flag;
  uint32_t ier_itsources;
  uint32_t sr_flags;

  /* Get current IT Flags and IT sources value on 1st register */
  ier_itsources = READ_REG(GTZC_TZIC->IER1);
 c00631e:	4b3f      	ldr	r3, [pc, #252]	; (c00641c <HAL_GTZC_IRQHandler+0x104>)
 c006320:	681b      	ldr	r3, [r3, #0]
 c006322:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR1);
 c006324:	4b3d      	ldr	r3, [pc, #244]	; (c00641c <HAL_GTZC_IRQHandler+0x104>)
 c006326:	691b      	ldr	r3, [r3, #16]
 c006328:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c00632a:	68ba      	ldr	r2, [r7, #8]
 c00632c:	687b      	ldr	r3, [r7, #4]
 c00632e:	4013      	ands	r3, r2
 c006330:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c006332:	683b      	ldr	r3, [r7, #0]
 c006334:	2b00      	cmp	r3, #0
 c006336:	d019      	beq.n	c00636c <HAL_GTZC_IRQHandler+0x54>
  {
    WRITE_REG(GTZC_TZIC->FCR1, flag);
 c006338:	4a38      	ldr	r2, [pc, #224]	; (c00641c <HAL_GTZC_IRQHandler+0x104>)
 c00633a:	683b      	ldr	r3, [r7, #0]
 c00633c:	6213      	str	r3, [r2, #32]

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c00633e:	2300      	movs	r3, #0
 c006340:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c006342:	e00d      	b.n	c006360 <HAL_GTZC_IRQHandler+0x48>
    {
      if ((flag & (1UL << position)) != 0U)
 c006344:	683a      	ldr	r2, [r7, #0]
 c006346:	68fb      	ldr	r3, [r7, #12]
 c006348:	fa22 f303 	lsr.w	r3, r2, r3
 c00634c:	f003 0301 	and.w	r3, r3, #1
 c006350:	2b00      	cmp	r3, #0
 c006352:	d002      	beq.n	c00635a <HAL_GTZC_IRQHandler+0x42>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG1 | position);
 c006354:	68f8      	ldr	r0, [r7, #12]
 c006356:	f000 f863 	bl	c006420 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c00635a:	68fb      	ldr	r3, [r7, #12]
 c00635c:	3301      	adds	r3, #1
 c00635e:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c006360:	683a      	ldr	r2, [r7, #0]
 c006362:	68fb      	ldr	r3, [r7, #12]
 c006364:	fa22 f303 	lsr.w	r3, r2, r3
 c006368:	2b00      	cmp	r3, #0
 c00636a:	d1eb      	bne.n	c006344 <HAL_GTZC_IRQHandler+0x2c>
    }
  }

  /* Get current IT Flags and IT sources value on 2nd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER2);
 c00636c:	4b2b      	ldr	r3, [pc, #172]	; (c00641c <HAL_GTZC_IRQHandler+0x104>)
 c00636e:	685b      	ldr	r3, [r3, #4]
 c006370:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR2);
 c006372:	4b2a      	ldr	r3, [pc, #168]	; (c00641c <HAL_GTZC_IRQHandler+0x104>)
 c006374:	695b      	ldr	r3, [r3, #20]
 c006376:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c006378:	68ba      	ldr	r2, [r7, #8]
 c00637a:	687b      	ldr	r3, [r7, #4]
 c00637c:	4013      	ands	r3, r2
 c00637e:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c006380:	683b      	ldr	r3, [r7, #0]
 c006382:	2b00      	cmp	r3, #0
 c006384:	d01c      	beq.n	c0063c0 <HAL_GTZC_IRQHandler+0xa8>
  {
    WRITE_REG(GTZC_TZIC->FCR2, flag);
 c006386:	4a25      	ldr	r2, [pc, #148]	; (c00641c <HAL_GTZC_IRQHandler+0x104>)
 c006388:	683b      	ldr	r3, [r7, #0]
 c00638a:	6253      	str	r3, [r2, #36]	; 0x24

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c00638c:	2300      	movs	r3, #0
 c00638e:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c006390:	e010      	b.n	c0063b4 <HAL_GTZC_IRQHandler+0x9c>
    {
      if ((flag & (1UL << position)) != 0U)
 c006392:	683a      	ldr	r2, [r7, #0]
 c006394:	68fb      	ldr	r3, [r7, #12]
 c006396:	fa22 f303 	lsr.w	r3, r2, r3
 c00639a:	f003 0301 	and.w	r3, r3, #1
 c00639e:	2b00      	cmp	r3, #0
 c0063a0:	d005      	beq.n	c0063ae <HAL_GTZC_IRQHandler+0x96>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG2 | position);
 c0063a2:	68fb      	ldr	r3, [r7, #12]
 c0063a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0063a8:	4618      	mov	r0, r3
 c0063aa:	f000 f839 	bl	c006420 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c0063ae:	68fb      	ldr	r3, [r7, #12]
 c0063b0:	3301      	adds	r3, #1
 c0063b2:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0063b4:	683a      	ldr	r2, [r7, #0]
 c0063b6:	68fb      	ldr	r3, [r7, #12]
 c0063b8:	fa22 f303 	lsr.w	r3, r2, r3
 c0063bc:	2b00      	cmp	r3, #0
 c0063be:	d1e8      	bne.n	c006392 <HAL_GTZC_IRQHandler+0x7a>
    }
  }

  /* Get current IT Flags and IT sources value on 3rd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER3);
 c0063c0:	4b16      	ldr	r3, [pc, #88]	; (c00641c <HAL_GTZC_IRQHandler+0x104>)
 c0063c2:	689b      	ldr	r3, [r3, #8]
 c0063c4:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR3);
 c0063c6:	4b15      	ldr	r3, [pc, #84]	; (c00641c <HAL_GTZC_IRQHandler+0x104>)
 c0063c8:	699b      	ldr	r3, [r3, #24]
 c0063ca:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c0063cc:	68ba      	ldr	r2, [r7, #8]
 c0063ce:	687b      	ldr	r3, [r7, #4]
 c0063d0:	4013      	ands	r3, r2
 c0063d2:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c0063d4:	683b      	ldr	r3, [r7, #0]
 c0063d6:	2b00      	cmp	r3, #0
 c0063d8:	d01c      	beq.n	c006414 <HAL_GTZC_IRQHandler+0xfc>
  {
    WRITE_REG(GTZC_TZIC->FCR3, flag);
 c0063da:	4a10      	ldr	r2, [pc, #64]	; (c00641c <HAL_GTZC_IRQHandler+0x104>)
 c0063dc:	683b      	ldr	r3, [r7, #0]
 c0063de:	6293      	str	r3, [r2, #40]	; 0x28

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c0063e0:	2300      	movs	r3, #0
 c0063e2:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0063e4:	e010      	b.n	c006408 <HAL_GTZC_IRQHandler+0xf0>
    {
      if ((flag & (1UL << position)) != 0U)
 c0063e6:	683a      	ldr	r2, [r7, #0]
 c0063e8:	68fb      	ldr	r3, [r7, #12]
 c0063ea:	fa22 f303 	lsr.w	r3, r2, r3
 c0063ee:	f003 0301 	and.w	r3, r3, #1
 c0063f2:	2b00      	cmp	r3, #0
 c0063f4:	d005      	beq.n	c006402 <HAL_GTZC_IRQHandler+0xea>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG3 | position);
 c0063f6:	68fb      	ldr	r3, [r7, #12]
 c0063f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 c0063fc:	4618      	mov	r0, r3
 c0063fe:	f000 f80f 	bl	c006420 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c006402:	68fb      	ldr	r3, [r7, #12]
 c006404:	3301      	adds	r3, #1
 c006406:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c006408:	683a      	ldr	r2, [r7, #0]
 c00640a:	68fb      	ldr	r3, [r7, #12]
 c00640c:	fa22 f303 	lsr.w	r3, r2, r3
 c006410:	2b00      	cmp	r3, #0
 c006412:	d1e8      	bne.n	c0063e6 <HAL_GTZC_IRQHandler+0xce>
    }
  }
}
 c006414:	bf00      	nop
 c006416:	3710      	adds	r7, #16
 c006418:	46bd      	mov	sp, r7
 c00641a:	bd80      	pop	{r7, pc}
 c00641c:	50032800 	.word	0x50032800

0c006420 <HAL_GTZC_TZIC_Callback>:
  * @param  PeriphId Peripheral identifier triggering the illegal access.
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId
  * @retval None.
  */
__weak void HAL_GTZC_TZIC_Callback(uint32_t PeriphId)
{
 c006420:	b480      	push	{r7}
 c006422:	b083      	sub	sp, #12
 c006424:	af00      	add	r7, sp, #0
 c006426:	6078      	str	r0, [r7, #4]
  UNUSED(PeriphId);

  /* NOTE: This function should not be modified. When the callback is needed,
   * the HAL_GTZC_TZIC_Callback is to be implemented in the user file
   */
}
 c006428:	bf00      	nop
 c00642a:	370c      	adds	r7, #12
 c00642c:	46bd      	mov	sp, r7
 c00642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006432:	4770      	bx	lr

0c006434 <HAL_HASH_Init>:
  *         relevant APIs manage themselves the MDMAT bit.
  * @param  hhash HASH handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 c006434:	b580      	push	{r7, lr}
 c006436:	b082      	sub	sp, #8
 c006438:	af00      	add	r7, sp, #0
 c00643a:	6078      	str	r0, [r7, #4]
  /* Check the hash handle allocation */
  if(hhash == NULL)
 c00643c:	687b      	ldr	r3, [r7, #4]
 c00643e:	2b00      	cmp	r3, #0
 c006440:	d101      	bne.n	c006446 <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 c006442:	2301      	movs	r3, #1
 c006444:	e043      	b.n	c0064ce <HAL_HASH_Init+0x9a>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if(hhash->State == HAL_HASH_STATE_RESET)
 c006446:	687b      	ldr	r3, [r7, #4]
 c006448:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 c00644c:	b2db      	uxtb	r3, r3
 c00644e:	2b00      	cmp	r3, #0
 c006450:	d106      	bne.n	c006460 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 c006452:	687b      	ldr	r3, [r7, #4]
 c006454:	2200      	movs	r2, #0
 c006456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 c00645a:	6878      	ldr	r0, [r7, #4]
 c00645c:	f000 f83e 	bl	c0064dc <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

    /* Change the HASH state */
  hhash->State = HAL_HASH_STATE_BUSY;
 c006460:	687b      	ldr	r3, [r7, #4]
 c006462:	2202      	movs	r2, #2
 c006464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Reset HashInCount, HashITCounter, HashBuffSize and NbWordsAlreadyPushed */
  hhash->HashInCount = 0;
 c006468:	687b      	ldr	r3, [r7, #4]
 c00646a:	2200      	movs	r2, #0
 c00646c:	621a      	str	r2, [r3, #32]
  hhash->HashBuffSize = 0;
 c00646e:	687b      	ldr	r3, [r7, #4]
 c006470:	2200      	movs	r2, #0
 c006472:	61da      	str	r2, [r3, #28]
  hhash->HashITCounter = 0;
 c006474:	687b      	ldr	r3, [r7, #4]
 c006476:	2200      	movs	r2, #0
 c006478:	625a      	str	r2, [r3, #36]	; 0x24
  hhash->NbWordsAlreadyPushed = 0;
 c00647a:	687b      	ldr	r3, [r7, #4]
 c00647c:	2200      	movs	r2, #0
 c00647e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset digest calculation bridle (MDMAT bit control) */
  hhash->DigestCalculationDisable = RESET;
 c006480:	687b      	ldr	r3, [r7, #4]
 c006482:	2200      	movs	r2, #0
 c006484:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  /* Set phase to READY */
  hhash->Phase = HAL_HASH_PHASE_READY;
 c006488:	687b      	ldr	r3, [r7, #4]
 c00648a:	2201      	movs	r2, #1
 c00648c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
 c006490:	687b      	ldr	r3, [r7, #4]
 c006492:	2200      	movs	r2, #0
 c006494:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Set the data type bit */
  MODIFY_REG(HASH->CR, HASH_CR_DATATYPE, hhash->Init.DataType);
 c006498:	4b0f      	ldr	r3, [pc, #60]	; (c0064d8 <HAL_HASH_Init+0xa4>)
 c00649a:	681b      	ldr	r3, [r3, #0]
 c00649c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 c0064a0:	687b      	ldr	r3, [r7, #4]
 c0064a2:	681b      	ldr	r3, [r3, #0]
 c0064a4:	490c      	ldr	r1, [pc, #48]	; (c0064d8 <HAL_HASH_Init+0xa4>)
 c0064a6:	4313      	orrs	r3, r2
 c0064a8:	600b      	str	r3, [r1, #0]
  /* Reset MDMAT bit */
__HAL_HASH_RESET_MDMAT();
 c0064aa:	4b0b      	ldr	r3, [pc, #44]	; (c0064d8 <HAL_HASH_Init+0xa4>)
 c0064ac:	681b      	ldr	r3, [r3, #0]
 c0064ae:	4a0a      	ldr	r2, [pc, #40]	; (c0064d8 <HAL_HASH_Init+0xa4>)
 c0064b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 c0064b4:	6013      	str	r3, [r2, #0]
  /* Reset HASH handle status */
  hhash->Status = HAL_OK;
 c0064b6:	687b      	ldr	r3, [r7, #4]
 c0064b8:	2200      	movs	r2, #0
 c0064ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Set the HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 c0064be:	687b      	ldr	r3, [r7, #4]
 c0064c0:	2201      	movs	r2, #1
 c0064c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Initialise the error code */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 c0064c6:	687b      	ldr	r3, [r7, #4]
 c0064c8:	2200      	movs	r2, #0
 c0064ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 c0064cc:	2300      	movs	r3, #0
}
 c0064ce:	4618      	mov	r0, r3
 c0064d0:	3708      	adds	r7, #8
 c0064d2:	46bd      	mov	sp, r7
 c0064d4:	bd80      	pop	{r7, pc}
 c0064d6:	bf00      	nop
 c0064d8:	520c0400 	.word	0x520c0400

0c0064dc <HAL_HASH_MspInit>:
  * @brief  Initialize the HASH MSP.
  * @param  hhash HASH handle.
  * @retval None
  */
__weak void HAL_HASH_MspInit(HASH_HandleTypeDef *hhash)
{
 c0064dc:	b480      	push	{r7}
 c0064de:	b083      	sub	sp, #12
 c0064e0:	af00      	add	r7, sp, #0
 c0064e2:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_MspInit() can be implemented in the user file.
   */
}
 c0064e4:	bf00      	nop
 c0064e6:	370c      	adds	r7, #12
 c0064e8:	46bd      	mov	sp, r7
 c0064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0064ee:	4770      	bx	lr

0c0064f0 <HAL_PWR_ConfigAttributes>:
  *            @arg @ref PWR_SEC          Secure-only access
  *            @arg @ref PWR_NSEC         Secure/Non-secure access
  * @retval None
  */
void HAL_PWR_ConfigAttributes(uint32_t Item, uint32_t Attributes)
{
 c0064f0:	b480      	push	{r7}
 c0064f2:	b083      	sub	sp, #12
 c0064f4:	af00      	add	r7, sp, #0
 c0064f6:	6078      	str	r0, [r7, #4]
 c0064f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_PWR_ITEMS_ATTRIBUTES(Item));
  assert_param(IS_PWR_ATTRIBUTES(Attributes));

  /* Privilege/non-privilege attribute */
  if ((Attributes & PWR_PRIV) == PWR_PRIV)
 c0064fa:	683a      	ldr	r2, [r7, #0]
 c0064fc:	f240 2302 	movw	r3, #514	; 0x202
 c006500:	4013      	ands	r3, r2
 c006502:	f240 2202 	movw	r2, #514	; 0x202
 c006506:	4293      	cmp	r3, r2
 c006508:	d108      	bne.n	c00651c <HAL_PWR_ConfigAttributes+0x2c>
  {
    SET_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_PRIV);
 c00650a:	4b1b      	ldr	r3, [pc, #108]	; (c006578 <HAL_PWR_ConfigAttributes+0x88>)
 c00650c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c006510:	4a19      	ldr	r2, [pc, #100]	; (c006578 <HAL_PWR_ConfigAttributes+0x88>)
 c006512:	f043 0301 	orr.w	r3, r3, #1
 c006516:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 c00651a:	e00c      	b.n	c006536 <HAL_PWR_ConfigAttributes+0x46>
  }
  else if ((Attributes & PWR_NPRIV) == PWR_NPRIV)
 c00651c:	683b      	ldr	r3, [r7, #0]
 c00651e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c006522:	2b00      	cmp	r3, #0
 c006524:	d007      	beq.n	c006536 <HAL_PWR_ConfigAttributes+0x46>
  {
    CLEAR_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_PRIV);
 c006526:	4b14      	ldr	r3, [pc, #80]	; (c006578 <HAL_PWR_ConfigAttributes+0x88>)
 c006528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c00652c:	4a12      	ldr	r2, [pc, #72]	; (c006578 <HAL_PWR_ConfigAttributes+0x88>)
 c00652e:	f023 0301 	bic.w	r3, r3, #1
 c006532:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80


#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)

  /* Secure/non-secure attribute */
  if ((Attributes & PWR_SEC) == PWR_SEC)
 c006536:	683a      	ldr	r2, [r7, #0]
 c006538:	f240 1301 	movw	r3, #257	; 0x101
 c00653c:	4013      	ands	r3, r2
 c00653e:	f240 1201 	movw	r2, #257	; 0x101
 c006542:	4293      	cmp	r3, r2
 c006544:	d106      	bne.n	c006554 <HAL_PWR_ConfigAttributes+0x64>
  {
    SET_BIT(PWR_S->SECCFGR, Item);
 c006546:	4b0c      	ldr	r3, [pc, #48]	; (c006578 <HAL_PWR_ConfigAttributes+0x88>)
 c006548:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 c00654a:	490b      	ldr	r1, [pc, #44]	; (c006578 <HAL_PWR_ConfigAttributes+0x88>)
 c00654c:	687b      	ldr	r3, [r7, #4]
 c00654e:	4313      	orrs	r3, r2
 c006550:	678b      	str	r3, [r1, #120]	; 0x78
  {
    /* do nothing */
  }

#endif /* __ARM_FEATURE_CMSE */
}
 c006552:	e00b      	b.n	c00656c <HAL_PWR_ConfigAttributes+0x7c>
  else if ((Attributes & PWR_NSEC) == PWR_NSEC)
 c006554:	683b      	ldr	r3, [r7, #0]
 c006556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00655a:	2b00      	cmp	r3, #0
 c00655c:	d006      	beq.n	c00656c <HAL_PWR_ConfigAttributes+0x7c>
    CLEAR_BIT(PWR_S->SECCFGR, Item);
 c00655e:	4b06      	ldr	r3, [pc, #24]	; (c006578 <HAL_PWR_ConfigAttributes+0x88>)
 c006560:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 c006562:	687b      	ldr	r3, [r7, #4]
 c006564:	43db      	mvns	r3, r3
 c006566:	4904      	ldr	r1, [pc, #16]	; (c006578 <HAL_PWR_ConfigAttributes+0x88>)
 c006568:	4013      	ands	r3, r2
 c00656a:	678b      	str	r3, [r1, #120]	; 0x78
}
 c00656c:	bf00      	nop
 c00656e:	370c      	adds	r7, #12
 c006570:	46bd      	mov	sp, r7
 c006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006576:	4770      	bx	lr
 c006578:	50007000 	.word	0x50007000

0c00657c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c00657c:	b480      	push	{r7}
 c00657e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 c006580:	4b04      	ldr	r3, [pc, #16]	; (c006594 <HAL_PWREx_GetVoltageRange+0x18>)
 c006582:	681b      	ldr	r3, [r3, #0]
 c006584:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 c006588:	4618      	mov	r0, r3
 c00658a:	46bd      	mov	sp, r7
 c00658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006590:	4770      	bx	lr
 c006592:	bf00      	nop
 c006594:	50007000 	.word	0x50007000

0c006598 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c006598:	b580      	push	{r7, lr}
 c00659a:	b084      	sub	sp, #16
 c00659c:	af00      	add	r7, sp, #0
 c00659e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c0065a0:	4b27      	ldr	r3, [pc, #156]	; (c006640 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0065a2:	681b      	ldr	r3, [r3, #0]
 c0065a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 c0065a8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 c0065aa:	f000 f871 	bl	c006690 <HAL_PWREx_SMPS_GetEffectiveMode>
 c0065ae:	4603      	mov	r3, r0
 c0065b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c0065b4:	d101      	bne.n	c0065ba <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 c0065b6:	2301      	movs	r3, #1
 c0065b8:	e03e      	b.n	c006638 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c0065ba:	4b21      	ldr	r3, [pc, #132]	; (c006640 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0065bc:	68db      	ldr	r3, [r3, #12]
 c0065be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c0065c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c0065c6:	d101      	bne.n	c0065cc <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 c0065c8:	2301      	movs	r3, #1
 c0065ca:	e035      	b.n	c006638 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c0065cc:	68ba      	ldr	r2, [r7, #8]
 c0065ce:	687b      	ldr	r3, [r7, #4]
 c0065d0:	429a      	cmp	r2, r3
 c0065d2:	d101      	bne.n	c0065d8 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 c0065d4:	2300      	movs	r3, #0
 c0065d6:	e02f      	b.n	c006638 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c0065d8:	4b19      	ldr	r3, [pc, #100]	; (c006640 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0065da:	681b      	ldr	r3, [r3, #0]
 c0065dc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 c0065e0:	4917      	ldr	r1, [pc, #92]	; (c006640 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0065e2:	687b      	ldr	r3, [r7, #4]
 c0065e4:	4313      	orrs	r3, r2
 c0065e6:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c0065e8:	4b16      	ldr	r3, [pc, #88]	; (c006644 <HAL_PWREx_ControlVoltageScaling+0xac>)
 c0065ea:	681b      	ldr	r3, [r3, #0]
 c0065ec:	095b      	lsrs	r3, r3, #5
 c0065ee:	4a16      	ldr	r2, [pc, #88]	; (c006648 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 c0065f0:	fba2 2303 	umull	r2, r3, r2, r3
 c0065f4:	09db      	lsrs	r3, r3, #7
 c0065f6:	2232      	movs	r2, #50	; 0x32
 c0065f8:	fb02 f303 	mul.w	r3, r2, r3
 c0065fc:	4a13      	ldr	r2, [pc, #76]	; (c00664c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 c0065fe:	fba2 2303 	umull	r2, r3, r2, r3
 c006602:	08db      	lsrs	r3, r3, #3
 c006604:	3301      	adds	r3, #1
 c006606:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c006608:	e002      	b.n	c006610 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 c00660a:	68fb      	ldr	r3, [r7, #12]
 c00660c:	3b01      	subs	r3, #1
 c00660e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c006610:	4b0b      	ldr	r3, [pc, #44]	; (c006640 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c006612:	695b      	ldr	r3, [r3, #20]
 c006614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c006618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c00661c:	d102      	bne.n	c006624 <HAL_PWREx_ControlVoltageScaling+0x8c>
 c00661e:	68fb      	ldr	r3, [r7, #12]
 c006620:	2b00      	cmp	r3, #0
 c006622:	d1f2      	bne.n	c00660a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c006624:	4b06      	ldr	r3, [pc, #24]	; (c006640 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c006626:	695b      	ldr	r3, [r3, #20]
 c006628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00662c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c006630:	d101      	bne.n	c006636 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 c006632:	2303      	movs	r3, #3
 c006634:	e000      	b.n	c006638 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 c006636:	2300      	movs	r3, #0
}
 c006638:	4618      	mov	r0, r3
 c00663a:	3710      	adds	r7, #16
 c00663c:	46bd      	mov	sp, r7
 c00663e:	bd80      	pop	{r7, pc}
 c006640:	50007000 	.word	0x50007000
 c006644:	30000068 	.word	0x30000068
 c006648:	0a7c5ac5 	.word	0x0a7c5ac5
 c00664c:	cccccccd 	.word	0xcccccccd

0c006650 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 c006650:	b480      	push	{r7}
 c006652:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 c006654:	4b05      	ldr	r3, [pc, #20]	; (c00666c <HAL_PWREx_EnableVddIO2+0x1c>)
 c006656:	685b      	ldr	r3, [r3, #4]
 c006658:	4a04      	ldr	r2, [pc, #16]	; (c00666c <HAL_PWREx_EnableVddIO2+0x1c>)
 c00665a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 c00665e:	6053      	str	r3, [r2, #4]
}
 c006660:	bf00      	nop
 c006662:	46bd      	mov	sp, r7
 c006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006668:	4770      	bx	lr
 c00666a:	bf00      	nop
 c00666c:	50007000 	.word	0x50007000

0c006670 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c006670:	b480      	push	{r7}
 c006672:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c006674:	4b05      	ldr	r3, [pc, #20]	; (c00668c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c006676:	689b      	ldr	r3, [r3, #8]
 c006678:	4a04      	ldr	r2, [pc, #16]	; (c00668c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c00667a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c00667e:	6093      	str	r3, [r2, #8]
}
 c006680:	bf00      	nop
 c006682:	46bd      	mov	sp, r7
 c006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006688:	4770      	bx	lr
 c00668a:	bf00      	nop
 c00668c:	50007000 	.word	0x50007000

0c006690 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 c006690:	b480      	push	{r7}
 c006692:	b083      	sub	sp, #12
 c006694:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c006696:	4b0f      	ldr	r3, [pc, #60]	; (c0066d4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 c006698:	691b      	ldr	r3, [r3, #16]
 c00669a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 c00669c:	683b      	ldr	r3, [r7, #0]
 c00669e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c0066a2:	2b00      	cmp	r3, #0
 c0066a4:	d003      	beq.n	c0066ae <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 c0066a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c0066aa:	607b      	str	r3, [r7, #4]
 c0066ac:	e00a      	b.n	c0066c4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c0066ae:	683b      	ldr	r3, [r7, #0]
 c0066b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c0066b4:	2b00      	cmp	r3, #0
 c0066b6:	d103      	bne.n	c0066c0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 c0066b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c0066bc:	607b      	str	r3, [r7, #4]
 c0066be:	e001      	b.n	c0066c4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 c0066c0:	2300      	movs	r3, #0
 c0066c2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 c0066c4:	687b      	ldr	r3, [r7, #4]
}
 c0066c6:	4618      	mov	r0, r3
 c0066c8:	370c      	adds	r7, #12
 c0066ca:	46bd      	mov	sp, r7
 c0066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0066d0:	4770      	bx	lr
 c0066d2:	bf00      	nop
 c0066d4:	50007000 	.word	0x50007000

0c0066d8 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 c0066d8:	b580      	push	{r7, lr}
 c0066da:	b088      	sub	sp, #32
 c0066dc:	af00      	add	r7, sp, #0
 c0066de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 c0066e0:	687b      	ldr	r3, [r7, #4]
 c0066e2:	2b00      	cmp	r3, #0
 c0066e4:	d102      	bne.n	c0066ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c0066e6:	2301      	movs	r3, #1
 c0066e8:	f000 bcd0 	b.w	c00708c <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0066ec:	4b99      	ldr	r3, [pc, #612]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c0066ee:	689b      	ldr	r3, [r3, #8]
 c0066f0:	f003 030c 	and.w	r3, r3, #12
 c0066f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c0066f6:	4b97      	ldr	r3, [pc, #604]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c0066f8:	68db      	ldr	r3, [r3, #12]
 c0066fa:	f003 0303 	and.w	r3, r3, #3
 c0066fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c006700:	687b      	ldr	r3, [r7, #4]
 c006702:	681b      	ldr	r3, [r3, #0]
 c006704:	f003 0310 	and.w	r3, r3, #16
 c006708:	2b00      	cmp	r3, #0
 c00670a:	f000 80e9 	beq.w	c0068e0 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c00670e:	69bb      	ldr	r3, [r7, #24]
 c006710:	2b00      	cmp	r3, #0
 c006712:	d006      	beq.n	c006722 <HAL_RCC_OscConfig+0x4a>
 c006714:	69bb      	ldr	r3, [r7, #24]
 c006716:	2b0c      	cmp	r3, #12
 c006718:	f040 8083 	bne.w	c006822 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c00671c:	697b      	ldr	r3, [r7, #20]
 c00671e:	2b01      	cmp	r3, #1
 c006720:	d17f      	bne.n	c006822 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c006722:	4b8c      	ldr	r3, [pc, #560]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c006724:	681b      	ldr	r3, [r3, #0]
 c006726:	f003 0302 	and.w	r3, r3, #2
 c00672a:	2b00      	cmp	r3, #0
 c00672c:	d006      	beq.n	c00673c <HAL_RCC_OscConfig+0x64>
 c00672e:	687b      	ldr	r3, [r7, #4]
 c006730:	69db      	ldr	r3, [r3, #28]
 c006732:	2b00      	cmp	r3, #0
 c006734:	d102      	bne.n	c00673c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 c006736:	2301      	movs	r3, #1
 c006738:	f000 bca8 	b.w	c00708c <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c00673c:	687b      	ldr	r3, [r7, #4]
 c00673e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c006740:	4b84      	ldr	r3, [pc, #528]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c006742:	681b      	ldr	r3, [r3, #0]
 c006744:	f003 0308 	and.w	r3, r3, #8
 c006748:	2b00      	cmp	r3, #0
 c00674a:	d004      	beq.n	c006756 <HAL_RCC_OscConfig+0x7e>
 c00674c:	4b81      	ldr	r3, [pc, #516]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c00674e:	681b      	ldr	r3, [r3, #0]
 c006750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c006754:	e005      	b.n	c006762 <HAL_RCC_OscConfig+0x8a>
 c006756:	4b7f      	ldr	r3, [pc, #508]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c006758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00675c:	091b      	lsrs	r3, r3, #4
 c00675e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c006762:	4293      	cmp	r3, r2
 c006764:	d224      	bcs.n	c0067b0 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c006766:	687b      	ldr	r3, [r7, #4]
 c006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00676a:	4618      	mov	r0, r3
 c00676c:	f000 fe96 	bl	c00749c <RCC_SetFlashLatencyFromMSIRange>
 c006770:	4603      	mov	r3, r0
 c006772:	2b00      	cmp	r3, #0
 c006774:	d002      	beq.n	c00677c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 c006776:	2301      	movs	r3, #1
 c006778:	f000 bc88 	b.w	c00708c <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c00677c:	4b75      	ldr	r3, [pc, #468]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c00677e:	681b      	ldr	r3, [r3, #0]
 c006780:	4a74      	ldr	r2, [pc, #464]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c006782:	f043 0308 	orr.w	r3, r3, #8
 c006786:	6013      	str	r3, [r2, #0]
 c006788:	4b72      	ldr	r3, [pc, #456]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c00678a:	681b      	ldr	r3, [r3, #0]
 c00678c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c006790:	687b      	ldr	r3, [r7, #4]
 c006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c006794:	496f      	ldr	r1, [pc, #444]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c006796:	4313      	orrs	r3, r2
 c006798:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c00679a:	4b6e      	ldr	r3, [pc, #440]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c00679c:	685b      	ldr	r3, [r3, #4]
 c00679e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c0067a2:	687b      	ldr	r3, [r7, #4]
 c0067a4:	6a1b      	ldr	r3, [r3, #32]
 c0067a6:	021b      	lsls	r3, r3, #8
 c0067a8:	496a      	ldr	r1, [pc, #424]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c0067aa:	4313      	orrs	r3, r2
 c0067ac:	604b      	str	r3, [r1, #4]
 c0067ae:	e026      	b.n	c0067fe <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c0067b0:	4b68      	ldr	r3, [pc, #416]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c0067b2:	681b      	ldr	r3, [r3, #0]
 c0067b4:	4a67      	ldr	r2, [pc, #412]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c0067b6:	f043 0308 	orr.w	r3, r3, #8
 c0067ba:	6013      	str	r3, [r2, #0]
 c0067bc:	4b65      	ldr	r3, [pc, #404]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c0067be:	681b      	ldr	r3, [r3, #0]
 c0067c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c0067c4:	687b      	ldr	r3, [r7, #4]
 c0067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0067c8:	4962      	ldr	r1, [pc, #392]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c0067ca:	4313      	orrs	r3, r2
 c0067cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c0067ce:	4b61      	ldr	r3, [pc, #388]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c0067d0:	685b      	ldr	r3, [r3, #4]
 c0067d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c0067d6:	687b      	ldr	r3, [r7, #4]
 c0067d8:	6a1b      	ldr	r3, [r3, #32]
 c0067da:	021b      	lsls	r3, r3, #8
 c0067dc:	495d      	ldr	r1, [pc, #372]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c0067de:	4313      	orrs	r3, r2
 c0067e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0067e2:	69bb      	ldr	r3, [r7, #24]
 c0067e4:	2b00      	cmp	r3, #0
 c0067e6:	d10a      	bne.n	c0067fe <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c0067e8:	687b      	ldr	r3, [r7, #4]
 c0067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0067ec:	4618      	mov	r0, r3
 c0067ee:	f000 fe55 	bl	c00749c <RCC_SetFlashLatencyFromMSIRange>
 c0067f2:	4603      	mov	r3, r0
 c0067f4:	2b00      	cmp	r3, #0
 c0067f6:	d002      	beq.n	c0067fe <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 c0067f8:	2301      	movs	r3, #1
 c0067fa:	f000 bc47 	b.w	c00708c <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c0067fe:	f000 fe11 	bl	c007424 <HAL_RCC_GetHCLKFreq>
 c006802:	4603      	mov	r3, r0
 c006804:	4a54      	ldr	r2, [pc, #336]	; (c006958 <HAL_RCC_OscConfig+0x280>)
 c006806:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c006808:	4b54      	ldr	r3, [pc, #336]	; (c00695c <HAL_RCC_OscConfig+0x284>)
 c00680a:	681b      	ldr	r3, [r3, #0]
 c00680c:	4618      	mov	r0, r3
 c00680e:	f7fe fee3 	bl	c0055d8 <HAL_InitTick>
 c006812:	4603      	mov	r3, r0
 c006814:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 c006816:	7bfb      	ldrb	r3, [r7, #15]
 c006818:	2b00      	cmp	r3, #0
 c00681a:	d060      	beq.n	c0068de <HAL_RCC_OscConfig+0x206>
        {
          return status;
 c00681c:	7bfb      	ldrb	r3, [r7, #15]
 c00681e:	f000 bc35 	b.w	c00708c <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c006822:	687b      	ldr	r3, [r7, #4]
 c006824:	69db      	ldr	r3, [r3, #28]
 c006826:	2b00      	cmp	r3, #0
 c006828:	d039      	beq.n	c00689e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 c00682a:	4b4a      	ldr	r3, [pc, #296]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c00682c:	681b      	ldr	r3, [r3, #0]
 c00682e:	4a49      	ldr	r2, [pc, #292]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c006830:	f043 0301 	orr.w	r3, r3, #1
 c006834:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c006836:	f7fe ff1f 	bl	c005678 <HAL_GetTick>
 c00683a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c00683c:	e00f      	b.n	c00685e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c00683e:	f7fe ff1b 	bl	c005678 <HAL_GetTick>
 c006842:	4602      	mov	r2, r0
 c006844:	693b      	ldr	r3, [r7, #16]
 c006846:	1ad3      	subs	r3, r2, r3
 c006848:	2b02      	cmp	r3, #2
 c00684a:	d908      	bls.n	c00685e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c00684c:	4b41      	ldr	r3, [pc, #260]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c00684e:	681b      	ldr	r3, [r3, #0]
 c006850:	f003 0302 	and.w	r3, r3, #2
 c006854:	2b00      	cmp	r3, #0
 c006856:	d102      	bne.n	c00685e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 c006858:	2303      	movs	r3, #3
 c00685a:	f000 bc17 	b.w	c00708c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c00685e:	4b3d      	ldr	r3, [pc, #244]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c006860:	681b      	ldr	r3, [r3, #0]
 c006862:	f003 0302 	and.w	r3, r3, #2
 c006866:	2b00      	cmp	r3, #0
 c006868:	d0e9      	beq.n	c00683e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c00686a:	4b3a      	ldr	r3, [pc, #232]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c00686c:	681b      	ldr	r3, [r3, #0]
 c00686e:	4a39      	ldr	r2, [pc, #228]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c006870:	f043 0308 	orr.w	r3, r3, #8
 c006874:	6013      	str	r3, [r2, #0]
 c006876:	4b37      	ldr	r3, [pc, #220]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c006878:	681b      	ldr	r3, [r3, #0]
 c00687a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c00687e:	687b      	ldr	r3, [r7, #4]
 c006880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c006882:	4934      	ldr	r1, [pc, #208]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c006884:	4313      	orrs	r3, r2
 c006886:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c006888:	4b32      	ldr	r3, [pc, #200]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c00688a:	685b      	ldr	r3, [r3, #4]
 c00688c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c006890:	687b      	ldr	r3, [r7, #4]
 c006892:	6a1b      	ldr	r3, [r3, #32]
 c006894:	021b      	lsls	r3, r3, #8
 c006896:	492f      	ldr	r1, [pc, #188]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c006898:	4313      	orrs	r3, r2
 c00689a:	604b      	str	r3, [r1, #4]
 c00689c:	e020      	b.n	c0068e0 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 c00689e:	4b2d      	ldr	r3, [pc, #180]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c0068a0:	681b      	ldr	r3, [r3, #0]
 c0068a2:	4a2c      	ldr	r2, [pc, #176]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c0068a4:	f023 0301 	bic.w	r3, r3, #1
 c0068a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c0068aa:	f7fe fee5 	bl	c005678 <HAL_GetTick>
 c0068ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c0068b0:	e00e      	b.n	c0068d0 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c0068b2:	f7fe fee1 	bl	c005678 <HAL_GetTick>
 c0068b6:	4602      	mov	r2, r0
 c0068b8:	693b      	ldr	r3, [r7, #16]
 c0068ba:	1ad3      	subs	r3, r2, r3
 c0068bc:	2b02      	cmp	r3, #2
 c0068be:	d907      	bls.n	c0068d0 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c0068c0:	4b24      	ldr	r3, [pc, #144]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c0068c2:	681b      	ldr	r3, [r3, #0]
 c0068c4:	f003 0302 	and.w	r3, r3, #2
 c0068c8:	2b00      	cmp	r3, #0
 c0068ca:	d001      	beq.n	c0068d0 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 c0068cc:	2303      	movs	r3, #3
 c0068ce:	e3dd      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c0068d0:	4b20      	ldr	r3, [pc, #128]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c0068d2:	681b      	ldr	r3, [r3, #0]
 c0068d4:	f003 0302 	and.w	r3, r3, #2
 c0068d8:	2b00      	cmp	r3, #0
 c0068da:	d1ea      	bne.n	c0068b2 <HAL_RCC_OscConfig+0x1da>
 c0068dc:	e000      	b.n	c0068e0 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c0068de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c0068e0:	687b      	ldr	r3, [r7, #4]
 c0068e2:	681b      	ldr	r3, [r3, #0]
 c0068e4:	f003 0301 	and.w	r3, r3, #1
 c0068e8:	2b00      	cmp	r3, #0
 c0068ea:	d07e      	beq.n	c0069ea <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c0068ec:	69bb      	ldr	r3, [r7, #24]
 c0068ee:	2b08      	cmp	r3, #8
 c0068f0:	d005      	beq.n	c0068fe <HAL_RCC_OscConfig+0x226>
 c0068f2:	69bb      	ldr	r3, [r7, #24]
 c0068f4:	2b0c      	cmp	r3, #12
 c0068f6:	d10e      	bne.n	c006916 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c0068f8:	697b      	ldr	r3, [r7, #20]
 c0068fa:	2b03      	cmp	r3, #3
 c0068fc:	d10b      	bne.n	c006916 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c0068fe:	4b15      	ldr	r3, [pc, #84]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c006900:	681b      	ldr	r3, [r3, #0]
 c006902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c006906:	2b00      	cmp	r3, #0
 c006908:	d06e      	beq.n	c0069e8 <HAL_RCC_OscConfig+0x310>
 c00690a:	687b      	ldr	r3, [r7, #4]
 c00690c:	685b      	ldr	r3, [r3, #4]
 c00690e:	2b00      	cmp	r3, #0
 c006910:	d16a      	bne.n	c0069e8 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 c006912:	2301      	movs	r3, #1
 c006914:	e3ba      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c006916:	687b      	ldr	r3, [r7, #4]
 c006918:	685b      	ldr	r3, [r3, #4]
 c00691a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c00691e:	d106      	bne.n	c00692e <HAL_RCC_OscConfig+0x256>
 c006920:	4b0c      	ldr	r3, [pc, #48]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c006922:	681b      	ldr	r3, [r3, #0]
 c006924:	4a0b      	ldr	r2, [pc, #44]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c006926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c00692a:	6013      	str	r3, [r2, #0]
 c00692c:	e024      	b.n	c006978 <HAL_RCC_OscConfig+0x2a0>
 c00692e:	687b      	ldr	r3, [r7, #4]
 c006930:	685b      	ldr	r3, [r3, #4]
 c006932:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c006936:	d113      	bne.n	c006960 <HAL_RCC_OscConfig+0x288>
 c006938:	4b06      	ldr	r3, [pc, #24]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c00693a:	681b      	ldr	r3, [r3, #0]
 c00693c:	4a05      	ldr	r2, [pc, #20]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c00693e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c006942:	6013      	str	r3, [r2, #0]
 c006944:	4b03      	ldr	r3, [pc, #12]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c006946:	681b      	ldr	r3, [r3, #0]
 c006948:	4a02      	ldr	r2, [pc, #8]	; (c006954 <HAL_RCC_OscConfig+0x27c>)
 c00694a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c00694e:	6013      	str	r3, [r2, #0]
 c006950:	e012      	b.n	c006978 <HAL_RCC_OscConfig+0x2a0>
 c006952:	bf00      	nop
 c006954:	50021000 	.word	0x50021000
 c006958:	30000068 	.word	0x30000068
 c00695c:	3000006c 	.word	0x3000006c
 c006960:	4b8b      	ldr	r3, [pc, #556]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006962:	681b      	ldr	r3, [r3, #0]
 c006964:	4a8a      	ldr	r2, [pc, #552]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c00696a:	6013      	str	r3, [r2, #0]
 c00696c:	4b88      	ldr	r3, [pc, #544]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c00696e:	681b      	ldr	r3, [r3, #0]
 c006970:	4a87      	ldr	r2, [pc, #540]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c006976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c006978:	687b      	ldr	r3, [r7, #4]
 c00697a:	685b      	ldr	r3, [r3, #4]
 c00697c:	2b00      	cmp	r3, #0
 c00697e:	d019      	beq.n	c0069b4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c006980:	f7fe fe7a 	bl	c005678 <HAL_GetTick>
 c006984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c006986:	e00e      	b.n	c0069a6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c006988:	f7fe fe76 	bl	c005678 <HAL_GetTick>
 c00698c:	4602      	mov	r2, r0
 c00698e:	693b      	ldr	r3, [r7, #16]
 c006990:	1ad3      	subs	r3, r2, r3
 c006992:	2b64      	cmp	r3, #100	; 0x64
 c006994:	d907      	bls.n	c0069a6 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c006996:	4b7e      	ldr	r3, [pc, #504]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006998:	681b      	ldr	r3, [r3, #0]
 c00699a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00699e:	2b00      	cmp	r3, #0
 c0069a0:	d101      	bne.n	c0069a6 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 c0069a2:	2303      	movs	r3, #3
 c0069a4:	e372      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0069a6:	4b7a      	ldr	r3, [pc, #488]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c0069a8:	681b      	ldr	r3, [r3, #0]
 c0069aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0069ae:	2b00      	cmp	r3, #0
 c0069b0:	d0ea      	beq.n	c006988 <HAL_RCC_OscConfig+0x2b0>
 c0069b2:	e01a      	b.n	c0069ea <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0069b4:	f7fe fe60 	bl	c005678 <HAL_GetTick>
 c0069b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0069ba:	e00e      	b.n	c0069da <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c0069bc:	f7fe fe5c 	bl	c005678 <HAL_GetTick>
 c0069c0:	4602      	mov	r2, r0
 c0069c2:	693b      	ldr	r3, [r7, #16]
 c0069c4:	1ad3      	subs	r3, r2, r3
 c0069c6:	2b64      	cmp	r3, #100	; 0x64
 c0069c8:	d907      	bls.n	c0069da <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0069ca:	4b71      	ldr	r3, [pc, #452]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c0069cc:	681b      	ldr	r3, [r3, #0]
 c0069ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0069d2:	2b00      	cmp	r3, #0
 c0069d4:	d001      	beq.n	c0069da <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 c0069d6:	2303      	movs	r3, #3
 c0069d8:	e358      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0069da:	4b6d      	ldr	r3, [pc, #436]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c0069dc:	681b      	ldr	r3, [r3, #0]
 c0069de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0069e2:	2b00      	cmp	r3, #0
 c0069e4:	d1ea      	bne.n	c0069bc <HAL_RCC_OscConfig+0x2e4>
 c0069e6:	e000      	b.n	c0069ea <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c0069e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c0069ea:	687b      	ldr	r3, [r7, #4]
 c0069ec:	681b      	ldr	r3, [r3, #0]
 c0069ee:	f003 0302 	and.w	r3, r3, #2
 c0069f2:	2b00      	cmp	r3, #0
 c0069f4:	d06c      	beq.n	c006ad0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c0069f6:	69bb      	ldr	r3, [r7, #24]
 c0069f8:	2b04      	cmp	r3, #4
 c0069fa:	d005      	beq.n	c006a08 <HAL_RCC_OscConfig+0x330>
 c0069fc:	69bb      	ldr	r3, [r7, #24]
 c0069fe:	2b0c      	cmp	r3, #12
 c006a00:	d119      	bne.n	c006a36 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c006a02:	697b      	ldr	r3, [r7, #20]
 c006a04:	2b02      	cmp	r3, #2
 c006a06:	d116      	bne.n	c006a36 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c006a08:	4b61      	ldr	r3, [pc, #388]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006a0a:	681b      	ldr	r3, [r3, #0]
 c006a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c006a10:	2b00      	cmp	r3, #0
 c006a12:	d005      	beq.n	c006a20 <HAL_RCC_OscConfig+0x348>
 c006a14:	687b      	ldr	r3, [r7, #4]
 c006a16:	68db      	ldr	r3, [r3, #12]
 c006a18:	2b00      	cmp	r3, #0
 c006a1a:	d101      	bne.n	c006a20 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 c006a1c:	2301      	movs	r3, #1
 c006a1e:	e335      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c006a20:	4b5b      	ldr	r3, [pc, #364]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006a22:	685b      	ldr	r3, [r3, #4]
 c006a24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c006a28:	687b      	ldr	r3, [r7, #4]
 c006a2a:	691b      	ldr	r3, [r3, #16]
 c006a2c:	061b      	lsls	r3, r3, #24
 c006a2e:	4958      	ldr	r1, [pc, #352]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006a30:	4313      	orrs	r3, r2
 c006a32:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c006a34:	e04c      	b.n	c006ad0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c006a36:	687b      	ldr	r3, [r7, #4]
 c006a38:	68db      	ldr	r3, [r3, #12]
 c006a3a:	2b00      	cmp	r3, #0
 c006a3c:	d029      	beq.n	c006a92 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 c006a3e:	4b54      	ldr	r3, [pc, #336]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006a40:	681b      	ldr	r3, [r3, #0]
 c006a42:	4a53      	ldr	r2, [pc, #332]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c006a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c006a4a:	f7fe fe15 	bl	c005678 <HAL_GetTick>
 c006a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c006a50:	e00e      	b.n	c006a70 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c006a52:	f7fe fe11 	bl	c005678 <HAL_GetTick>
 c006a56:	4602      	mov	r2, r0
 c006a58:	693b      	ldr	r3, [r7, #16]
 c006a5a:	1ad3      	subs	r3, r2, r3
 c006a5c:	2b02      	cmp	r3, #2
 c006a5e:	d907      	bls.n	c006a70 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c006a60:	4b4b      	ldr	r3, [pc, #300]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006a62:	681b      	ldr	r3, [r3, #0]
 c006a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c006a68:	2b00      	cmp	r3, #0
 c006a6a:	d101      	bne.n	c006a70 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 c006a6c:	2303      	movs	r3, #3
 c006a6e:	e30d      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c006a70:	4b47      	ldr	r3, [pc, #284]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006a72:	681b      	ldr	r3, [r3, #0]
 c006a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c006a78:	2b00      	cmp	r3, #0
 c006a7a:	d0ea      	beq.n	c006a52 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c006a7c:	4b44      	ldr	r3, [pc, #272]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006a7e:	685b      	ldr	r3, [r3, #4]
 c006a80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c006a84:	687b      	ldr	r3, [r7, #4]
 c006a86:	691b      	ldr	r3, [r3, #16]
 c006a88:	061b      	lsls	r3, r3, #24
 c006a8a:	4941      	ldr	r1, [pc, #260]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006a8c:	4313      	orrs	r3, r2
 c006a8e:	604b      	str	r3, [r1, #4]
 c006a90:	e01e      	b.n	c006ad0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c006a92:	4b3f      	ldr	r3, [pc, #252]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006a94:	681b      	ldr	r3, [r3, #0]
 c006a96:	4a3e      	ldr	r2, [pc, #248]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c006a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c006a9e:	f7fe fdeb 	bl	c005678 <HAL_GetTick>
 c006aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c006aa4:	e00e      	b.n	c006ac4 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c006aa6:	f7fe fde7 	bl	c005678 <HAL_GetTick>
 c006aaa:	4602      	mov	r2, r0
 c006aac:	693b      	ldr	r3, [r7, #16]
 c006aae:	1ad3      	subs	r3, r2, r3
 c006ab0:	2b02      	cmp	r3, #2
 c006ab2:	d907      	bls.n	c006ac4 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c006ab4:	4b36      	ldr	r3, [pc, #216]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006ab6:	681b      	ldr	r3, [r3, #0]
 c006ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c006abc:	2b00      	cmp	r3, #0
 c006abe:	d001      	beq.n	c006ac4 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 c006ac0:	2303      	movs	r3, #3
 c006ac2:	e2e3      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c006ac4:	4b32      	ldr	r3, [pc, #200]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006ac6:	681b      	ldr	r3, [r3, #0]
 c006ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c006acc:	2b00      	cmp	r3, #0
 c006ace:	d1ea      	bne.n	c006aa6 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c006ad0:	687b      	ldr	r3, [r7, #4]
 c006ad2:	681b      	ldr	r3, [r3, #0]
 c006ad4:	f003 0308 	and.w	r3, r3, #8
 c006ad8:	2b00      	cmp	r3, #0
 c006ada:	d062      	beq.n	c006ba2 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c006adc:	687b      	ldr	r3, [r7, #4]
 c006ade:	695b      	ldr	r3, [r3, #20]
 c006ae0:	2b00      	cmp	r3, #0
 c006ae2:	d038      	beq.n	c006b56 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c006ae4:	687b      	ldr	r3, [r7, #4]
 c006ae6:	699b      	ldr	r3, [r3, #24]
 c006ae8:	2b00      	cmp	r3, #0
 c006aea:	d108      	bne.n	c006afe <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c006aec:	4b28      	ldr	r3, [pc, #160]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c006af2:	4a27      	ldr	r2, [pc, #156]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006af4:	f023 0310 	bic.w	r3, r3, #16
 c006af8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 c006afc:	e007      	b.n	c006b0e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c006afe:	4b24      	ldr	r3, [pc, #144]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c006b04:	4a22      	ldr	r2, [pc, #136]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006b06:	f043 0310 	orr.w	r3, r3, #16
 c006b0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c006b0e:	4b20      	ldr	r3, [pc, #128]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c006b14:	4a1e      	ldr	r2, [pc, #120]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006b16:	f043 0301 	orr.w	r3, r3, #1
 c006b1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006b1e:	f7fe fdab 	bl	c005678 <HAL_GetTick>
 c006b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c006b24:	e00f      	b.n	c006b46 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c006b26:	f7fe fda7 	bl	c005678 <HAL_GetTick>
 c006b2a:	4602      	mov	r2, r0
 c006b2c:	693b      	ldr	r3, [r7, #16]
 c006b2e:	1ad3      	subs	r3, r2, r3
 c006b30:	2b07      	cmp	r3, #7
 c006b32:	d908      	bls.n	c006b46 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c006b34:	4b16      	ldr	r3, [pc, #88]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c006b3a:	f003 0302 	and.w	r3, r3, #2
 c006b3e:	2b00      	cmp	r3, #0
 c006b40:	d101      	bne.n	c006b46 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 c006b42:	2303      	movs	r3, #3
 c006b44:	e2a2      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c006b46:	4b12      	ldr	r3, [pc, #72]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c006b4c:	f003 0302 	and.w	r3, r3, #2
 c006b50:	2b00      	cmp	r3, #0
 c006b52:	d0e8      	beq.n	c006b26 <HAL_RCC_OscConfig+0x44e>
 c006b54:	e025      	b.n	c006ba2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c006b56:	4b0e      	ldr	r3, [pc, #56]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c006b5c:	4a0c      	ldr	r2, [pc, #48]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006b5e:	f023 0301 	bic.w	r3, r3, #1
 c006b62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006b66:	f7fe fd87 	bl	c005678 <HAL_GetTick>
 c006b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c006b6c:	e012      	b.n	c006b94 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c006b6e:	f7fe fd83 	bl	c005678 <HAL_GetTick>
 c006b72:	4602      	mov	r2, r0
 c006b74:	693b      	ldr	r3, [r7, #16]
 c006b76:	1ad3      	subs	r3, r2, r3
 c006b78:	2b07      	cmp	r3, #7
 c006b7a:	d90b      	bls.n	c006b94 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c006b7c:	4b04      	ldr	r3, [pc, #16]	; (c006b90 <HAL_RCC_OscConfig+0x4b8>)
 c006b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c006b82:	f003 0302 	and.w	r3, r3, #2
 c006b86:	2b00      	cmp	r3, #0
 c006b88:	d004      	beq.n	c006b94 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 c006b8a:	2303      	movs	r3, #3
 c006b8c:	e27e      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
 c006b8e:	bf00      	nop
 c006b90:	50021000 	.word	0x50021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c006b94:	4ba8      	ldr	r3, [pc, #672]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c006b9a:	f003 0302 	and.w	r3, r3, #2
 c006b9e:	2b00      	cmp	r3, #0
 c006ba0:	d1e5      	bne.n	c006b6e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c006ba2:	687b      	ldr	r3, [r7, #4]
 c006ba4:	681b      	ldr	r3, [r3, #0]
 c006ba6:	f003 0304 	and.w	r3, r3, #4
 c006baa:	2b00      	cmp	r3, #0
 c006bac:	f000 812d 	beq.w	c006e0a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 c006bb0:	2300      	movs	r3, #0
 c006bb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c006bb4:	4ba0      	ldr	r3, [pc, #640]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c006bbc:	2b00      	cmp	r3, #0
 c006bbe:	d10d      	bne.n	c006bdc <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c006bc0:	4b9d      	ldr	r3, [pc, #628]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006bc4:	4a9c      	ldr	r2, [pc, #624]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c006bca:	6593      	str	r3, [r2, #88]	; 0x58
 c006bcc:	4b9a      	ldr	r3, [pc, #616]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c006bd4:	60bb      	str	r3, [r7, #8]
 c006bd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 c006bd8:	2301      	movs	r3, #1
 c006bda:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c006bdc:	4b97      	ldr	r3, [pc, #604]	; (c006e3c <HAL_RCC_OscConfig+0x764>)
 c006bde:	681b      	ldr	r3, [r3, #0]
 c006be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c006be4:	2b00      	cmp	r3, #0
 c006be6:	d11e      	bne.n	c006c26 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c006be8:	4b94      	ldr	r3, [pc, #592]	; (c006e3c <HAL_RCC_OscConfig+0x764>)
 c006bea:	681b      	ldr	r3, [r3, #0]
 c006bec:	4a93      	ldr	r2, [pc, #588]	; (c006e3c <HAL_RCC_OscConfig+0x764>)
 c006bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c006bf2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c006bf4:	f7fe fd40 	bl	c005678 <HAL_GetTick>
 c006bf8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c006bfa:	e00e      	b.n	c006c1a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c006bfc:	f7fe fd3c 	bl	c005678 <HAL_GetTick>
 c006c00:	4602      	mov	r2, r0
 c006c02:	693b      	ldr	r3, [r7, #16]
 c006c04:	1ad3      	subs	r3, r2, r3
 c006c06:	2b02      	cmp	r3, #2
 c006c08:	d907      	bls.n	c006c1a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c006c0a:	4b8c      	ldr	r3, [pc, #560]	; (c006e3c <HAL_RCC_OscConfig+0x764>)
 c006c0c:	681b      	ldr	r3, [r3, #0]
 c006c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c006c12:	2b00      	cmp	r3, #0
 c006c14:	d101      	bne.n	c006c1a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 c006c16:	2303      	movs	r3, #3
 c006c18:	e238      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c006c1a:	4b88      	ldr	r3, [pc, #544]	; (c006e3c <HAL_RCC_OscConfig+0x764>)
 c006c1c:	681b      	ldr	r3, [r3, #0]
 c006c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c006c22:	2b00      	cmp	r3, #0
 c006c24:	d0ea      	beq.n	c006bfc <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c006c26:	687b      	ldr	r3, [r7, #4]
 c006c28:	689b      	ldr	r3, [r3, #8]
 c006c2a:	f003 0301 	and.w	r3, r3, #1
 c006c2e:	2b00      	cmp	r3, #0
 c006c30:	d01f      	beq.n	c006c72 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c006c32:	687b      	ldr	r3, [r7, #4]
 c006c34:	689b      	ldr	r3, [r3, #8]
 c006c36:	f003 0304 	and.w	r3, r3, #4
 c006c3a:	2b00      	cmp	r3, #0
 c006c3c:	d010      	beq.n	c006c60 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c006c3e:	4b7e      	ldr	r3, [pc, #504]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006c44:	4a7c      	ldr	r2, [pc, #496]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006c46:	f043 0304 	orr.w	r3, r3, #4
 c006c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c006c4e:	4b7a      	ldr	r3, [pc, #488]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006c54:	4a78      	ldr	r2, [pc, #480]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006c56:	f043 0301 	orr.w	r3, r3, #1
 c006c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c006c5e:	e018      	b.n	c006c92 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c006c60:	4b75      	ldr	r3, [pc, #468]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006c66:	4a74      	ldr	r2, [pc, #464]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006c68:	f043 0301 	orr.w	r3, r3, #1
 c006c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c006c70:	e00f      	b.n	c006c92 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c006c72:	4b71      	ldr	r3, [pc, #452]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006c78:	4a6f      	ldr	r2, [pc, #444]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006c7a:	f023 0301 	bic.w	r3, r3, #1
 c006c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c006c82:	4b6d      	ldr	r3, [pc, #436]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006c88:	4a6b      	ldr	r2, [pc, #428]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006c8a:	f023 0304 	bic.w	r3, r3, #4
 c006c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c006c92:	687b      	ldr	r3, [r7, #4]
 c006c94:	689b      	ldr	r3, [r3, #8]
 c006c96:	2b00      	cmp	r3, #0
 c006c98:	d068      	beq.n	c006d6c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006c9a:	f7fe fced 	bl	c005678 <HAL_GetTick>
 c006c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c006ca0:	e011      	b.n	c006cc6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c006ca2:	f7fe fce9 	bl	c005678 <HAL_GetTick>
 c006ca6:	4602      	mov	r2, r0
 c006ca8:	693b      	ldr	r3, [r7, #16]
 c006caa:	1ad3      	subs	r3, r2, r3
 c006cac:	f241 3288 	movw	r2, #5000	; 0x1388
 c006cb0:	4293      	cmp	r3, r2
 c006cb2:	d908      	bls.n	c006cc6 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c006cb4:	4b60      	ldr	r3, [pc, #384]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006cba:	f003 0302 	and.w	r3, r3, #2
 c006cbe:	2b00      	cmp	r3, #0
 c006cc0:	d101      	bne.n	c006cc6 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 c006cc2:	2303      	movs	r3, #3
 c006cc4:	e1e2      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c006cc6:	4b5c      	ldr	r3, [pc, #368]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006ccc:	f003 0302 	and.w	r3, r3, #2
 c006cd0:	2b00      	cmp	r3, #0
 c006cd2:	d0e6      	beq.n	c006ca2 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c006cd4:	687b      	ldr	r3, [r7, #4]
 c006cd6:	689b      	ldr	r3, [r3, #8]
 c006cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c006cdc:	2b00      	cmp	r3, #0
 c006cde:	d022      	beq.n	c006d26 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c006ce0:	4b55      	ldr	r3, [pc, #340]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006ce6:	4a54      	ldr	r2, [pc, #336]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c006cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c006cf0:	e011      	b.n	c006d16 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c006cf2:	f7fe fcc1 	bl	c005678 <HAL_GetTick>
 c006cf6:	4602      	mov	r2, r0
 c006cf8:	693b      	ldr	r3, [r7, #16]
 c006cfa:	1ad3      	subs	r3, r2, r3
 c006cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 c006d00:	4293      	cmp	r3, r2
 c006d02:	d908      	bls.n	c006d16 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c006d04:	4b4c      	ldr	r3, [pc, #304]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c006d0e:	2b00      	cmp	r3, #0
 c006d10:	d101      	bne.n	c006d16 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 c006d12:	2303      	movs	r3, #3
 c006d14:	e1ba      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c006d16:	4b48      	ldr	r3, [pc, #288]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c006d20:	2b00      	cmp	r3, #0
 c006d22:	d0e6      	beq.n	c006cf2 <HAL_RCC_OscConfig+0x61a>
 c006d24:	e068      	b.n	c006df8 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c006d26:	4b44      	ldr	r3, [pc, #272]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006d2c:	4a42      	ldr	r2, [pc, #264]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c006d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006d36:	e011      	b.n	c006d5c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c006d38:	f7fe fc9e 	bl	c005678 <HAL_GetTick>
 c006d3c:	4602      	mov	r2, r0
 c006d3e:	693b      	ldr	r3, [r7, #16]
 c006d40:	1ad3      	subs	r3, r2, r3
 c006d42:	f241 3288 	movw	r2, #5000	; 0x1388
 c006d46:	4293      	cmp	r3, r2
 c006d48:	d908      	bls.n	c006d5c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006d4a:	4b3b      	ldr	r3, [pc, #236]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c006d54:	2b00      	cmp	r3, #0
 c006d56:	d001      	beq.n	c006d5c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 c006d58:	2303      	movs	r3, #3
 c006d5a:	e197      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006d5c:	4b36      	ldr	r3, [pc, #216]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c006d66:	2b00      	cmp	r3, #0
 c006d68:	d1e6      	bne.n	c006d38 <HAL_RCC_OscConfig+0x660>
 c006d6a:	e045      	b.n	c006df8 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006d6c:	f7fe fc84 	bl	c005678 <HAL_GetTick>
 c006d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c006d72:	e011      	b.n	c006d98 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c006d74:	f7fe fc80 	bl	c005678 <HAL_GetTick>
 c006d78:	4602      	mov	r2, r0
 c006d7a:	693b      	ldr	r3, [r7, #16]
 c006d7c:	1ad3      	subs	r3, r2, r3
 c006d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 c006d82:	4293      	cmp	r3, r2
 c006d84:	d908      	bls.n	c006d98 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c006d86:	4b2c      	ldr	r3, [pc, #176]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006d8c:	f003 0302 	and.w	r3, r3, #2
 c006d90:	2b00      	cmp	r3, #0
 c006d92:	d001      	beq.n	c006d98 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 c006d94:	2303      	movs	r3, #3
 c006d96:	e179      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c006d98:	4b27      	ldr	r3, [pc, #156]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006d9e:	f003 0302 	and.w	r3, r3, #2
 c006da2:	2b00      	cmp	r3, #0
 c006da4:	d1e6      	bne.n	c006d74 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c006da6:	4b24      	ldr	r3, [pc, #144]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c006db0:	2b00      	cmp	r3, #0
 c006db2:	d021      	beq.n	c006df8 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c006db4:	4b20      	ldr	r3, [pc, #128]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006dba:	4a1f      	ldr	r2, [pc, #124]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c006dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006dc4:	e011      	b.n	c006dea <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c006dc6:	f7fe fc57 	bl	c005678 <HAL_GetTick>
 c006dca:	4602      	mov	r2, r0
 c006dcc:	693b      	ldr	r3, [r7, #16]
 c006dce:	1ad3      	subs	r3, r2, r3
 c006dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 c006dd4:	4293      	cmp	r3, r2
 c006dd6:	d908      	bls.n	c006dea <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006dd8:	4b17      	ldr	r3, [pc, #92]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c006de2:	2b00      	cmp	r3, #0
 c006de4:	d001      	beq.n	c006dea <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 c006de6:	2303      	movs	r3, #3
 c006de8:	e150      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006dea:	4b13      	ldr	r3, [pc, #76]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c006df4:	2b00      	cmp	r3, #0
 c006df6:	d1e6      	bne.n	c006dc6 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c006df8:	7ffb      	ldrb	r3, [r7, #31]
 c006dfa:	2b01      	cmp	r3, #1
 c006dfc:	d105      	bne.n	c006e0a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c006dfe:	4b0e      	ldr	r3, [pc, #56]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006e02:	4a0d      	ldr	r2, [pc, #52]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c006e08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c006e0a:	687b      	ldr	r3, [r7, #4]
 c006e0c:	681b      	ldr	r3, [r3, #0]
 c006e0e:	f003 0320 	and.w	r3, r3, #32
 c006e12:	2b00      	cmp	r3, #0
 c006e14:	d04f      	beq.n	c006eb6 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c006e16:	687b      	ldr	r3, [r7, #4]
 c006e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006e1a:	2b00      	cmp	r3, #0
 c006e1c:	d028      	beq.n	c006e70 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c006e1e:	4b06      	ldr	r3, [pc, #24]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006e20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c006e24:	4a04      	ldr	r2, [pc, #16]	; (c006e38 <HAL_RCC_OscConfig+0x760>)
 c006e26:	f043 0301 	orr.w	r3, r3, #1
 c006e2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006e2e:	f7fe fc23 	bl	c005678 <HAL_GetTick>
 c006e32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c006e34:	e014      	b.n	c006e60 <HAL_RCC_OscConfig+0x788>
 c006e36:	bf00      	nop
 c006e38:	50021000 	.word	0x50021000
 c006e3c:	50007000 	.word	0x50007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c006e40:	f7fe fc1a 	bl	c005678 <HAL_GetTick>
 c006e44:	4602      	mov	r2, r0
 c006e46:	693b      	ldr	r3, [r7, #16]
 c006e48:	1ad3      	subs	r3, r2, r3
 c006e4a:	2b02      	cmp	r3, #2
 c006e4c:	d908      	bls.n	c006e60 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c006e4e:	4b91      	ldr	r3, [pc, #580]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006e50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c006e54:	f003 0302 	and.w	r3, r3, #2
 c006e58:	2b00      	cmp	r3, #0
 c006e5a:	d101      	bne.n	c006e60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 c006e5c:	2303      	movs	r3, #3
 c006e5e:	e115      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c006e60:	4b8c      	ldr	r3, [pc, #560]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c006e66:	f003 0302 	and.w	r3, r3, #2
 c006e6a:	2b00      	cmp	r3, #0
 c006e6c:	d0e8      	beq.n	c006e40 <HAL_RCC_OscConfig+0x768>
 c006e6e:	e022      	b.n	c006eb6 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c006e70:	4b88      	ldr	r3, [pc, #544]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006e72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c006e76:	4a87      	ldr	r2, [pc, #540]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006e78:	f023 0301 	bic.w	r3, r3, #1
 c006e7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006e80:	f7fe fbfa 	bl	c005678 <HAL_GetTick>
 c006e84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c006e86:	e00f      	b.n	c006ea8 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c006e88:	f7fe fbf6 	bl	c005678 <HAL_GetTick>
 c006e8c:	4602      	mov	r2, r0
 c006e8e:	693b      	ldr	r3, [r7, #16]
 c006e90:	1ad3      	subs	r3, r2, r3
 c006e92:	2b02      	cmp	r3, #2
 c006e94:	d908      	bls.n	c006ea8 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c006e96:	4b7f      	ldr	r3, [pc, #508]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006e98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c006e9c:	f003 0302 	and.w	r3, r3, #2
 c006ea0:	2b00      	cmp	r3, #0
 c006ea2:	d001      	beq.n	c006ea8 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 c006ea4:	2303      	movs	r3, #3
 c006ea6:	e0f1      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c006ea8:	4b7a      	ldr	r3, [pc, #488]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c006eae:	f003 0302 	and.w	r3, r3, #2
 c006eb2:	2b00      	cmp	r3, #0
 c006eb4:	d1e8      	bne.n	c006e88 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c006eb6:	687b      	ldr	r3, [r7, #4]
 c006eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c006eba:	2b00      	cmp	r3, #0
 c006ebc:	f000 80e5 	beq.w	c00708a <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c006ec0:	4b74      	ldr	r3, [pc, #464]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006ec2:	689b      	ldr	r3, [r3, #8]
 c006ec4:	f003 030c 	and.w	r3, r3, #12
 c006ec8:	2b0c      	cmp	r3, #12
 c006eca:	f000 809f 	beq.w	c00700c <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c006ece:	687b      	ldr	r3, [r7, #4]
 c006ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c006ed2:	2b02      	cmp	r3, #2
 c006ed4:	d166      	bne.n	c006fa4 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c006ed6:	4b6f      	ldr	r3, [pc, #444]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006ed8:	681b      	ldr	r3, [r3, #0]
 c006eda:	4a6e      	ldr	r2, [pc, #440]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006edc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c006ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c006ee2:	f7fe fbc9 	bl	c005678 <HAL_GetTick>
 c006ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006ee8:	e00e      	b.n	c006f08 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c006eea:	f7fe fbc5 	bl	c005678 <HAL_GetTick>
 c006eee:	4602      	mov	r2, r0
 c006ef0:	693b      	ldr	r3, [r7, #16]
 c006ef2:	1ad3      	subs	r3, r2, r3
 c006ef4:	2b02      	cmp	r3, #2
 c006ef6:	d907      	bls.n	c006f08 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006ef8:	4b66      	ldr	r3, [pc, #408]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006efa:	681b      	ldr	r3, [r3, #0]
 c006efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c006f00:	2b00      	cmp	r3, #0
 c006f02:	d001      	beq.n	c006f08 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 c006f04:	2303      	movs	r3, #3
 c006f06:	e0c1      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006f08:	4b62      	ldr	r3, [pc, #392]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006f0a:	681b      	ldr	r3, [r3, #0]
 c006f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c006f10:	2b00      	cmp	r3, #0
 c006f12:	d1ea      	bne.n	c006eea <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c006f14:	4b5f      	ldr	r3, [pc, #380]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006f16:	68da      	ldr	r2, [r3, #12]
 c006f18:	4b5f      	ldr	r3, [pc, #380]	; (c007098 <HAL_RCC_OscConfig+0x9c0>)
 c006f1a:	4013      	ands	r3, r2
 c006f1c:	687a      	ldr	r2, [r7, #4]
 c006f1e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 c006f20:	687a      	ldr	r2, [r7, #4]
 c006f22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 c006f24:	3a01      	subs	r2, #1
 c006f26:	0112      	lsls	r2, r2, #4
 c006f28:	4311      	orrs	r1, r2
 c006f2a:	687a      	ldr	r2, [r7, #4]
 c006f2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 c006f2e:	0212      	lsls	r2, r2, #8
 c006f30:	4311      	orrs	r1, r2
 c006f32:	687a      	ldr	r2, [r7, #4]
 c006f34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c006f36:	0852      	lsrs	r2, r2, #1
 c006f38:	3a01      	subs	r2, #1
 c006f3a:	0552      	lsls	r2, r2, #21
 c006f3c:	4311      	orrs	r1, r2
 c006f3e:	687a      	ldr	r2, [r7, #4]
 c006f40:	6c52      	ldr	r2, [r2, #68]	; 0x44
 c006f42:	0852      	lsrs	r2, r2, #1
 c006f44:	3a01      	subs	r2, #1
 c006f46:	0652      	lsls	r2, r2, #25
 c006f48:	4311      	orrs	r1, r2
 c006f4a:	687a      	ldr	r2, [r7, #4]
 c006f4c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 c006f4e:	06d2      	lsls	r2, r2, #27
 c006f50:	430a      	orrs	r2, r1
 c006f52:	4950      	ldr	r1, [pc, #320]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006f54:	4313      	orrs	r3, r2
 c006f56:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 c006f58:	4b4e      	ldr	r3, [pc, #312]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006f5a:	681b      	ldr	r3, [r3, #0]
 c006f5c:	4a4d      	ldr	r2, [pc, #308]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c006f62:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c006f64:	4b4b      	ldr	r3, [pc, #300]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006f66:	68db      	ldr	r3, [r3, #12]
 c006f68:	4a4a      	ldr	r2, [pc, #296]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c006f6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c006f70:	f7fe fb82 	bl	c005678 <HAL_GetTick>
 c006f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c006f76:	e00e      	b.n	c006f96 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c006f78:	f7fe fb7e 	bl	c005678 <HAL_GetTick>
 c006f7c:	4602      	mov	r2, r0
 c006f7e:	693b      	ldr	r3, [r7, #16]
 c006f80:	1ad3      	subs	r3, r2, r3
 c006f82:	2b02      	cmp	r3, #2
 c006f84:	d907      	bls.n	c006f96 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c006f86:	4b43      	ldr	r3, [pc, #268]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006f88:	681b      	ldr	r3, [r3, #0]
 c006f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c006f8e:	2b00      	cmp	r3, #0
 c006f90:	d101      	bne.n	c006f96 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 c006f92:	2303      	movs	r3, #3
 c006f94:	e07a      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c006f96:	4b3f      	ldr	r3, [pc, #252]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006f98:	681b      	ldr	r3, [r3, #0]
 c006f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c006f9e:	2b00      	cmp	r3, #0
 c006fa0:	d0ea      	beq.n	c006f78 <HAL_RCC_OscConfig+0x8a0>
 c006fa2:	e072      	b.n	c00708a <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c006fa4:	4b3b      	ldr	r3, [pc, #236]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006fa6:	681b      	ldr	r3, [r3, #0]
 c006fa8:	4a3a      	ldr	r2, [pc, #232]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c006fae:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 c006fb0:	4b38      	ldr	r3, [pc, #224]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006fb2:	681b      	ldr	r3, [r3, #0]
 c006fb4:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 c006fb8:	2b00      	cmp	r3, #0
 c006fba:	d105      	bne.n	c006fc8 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 c006fbc:	4b35      	ldr	r3, [pc, #212]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006fbe:	68db      	ldr	r3, [r3, #12]
 c006fc0:	4a34      	ldr	r2, [pc, #208]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006fc2:	f023 0303 	bic.w	r3, r3, #3
 c006fc6:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c006fc8:	4b32      	ldr	r3, [pc, #200]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006fca:	68db      	ldr	r3, [r3, #12]
 c006fcc:	4a31      	ldr	r2, [pc, #196]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006fce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 c006fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c006fd6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c006fd8:	f7fe fb4e 	bl	c005678 <HAL_GetTick>
 c006fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006fde:	e00e      	b.n	c006ffe <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c006fe0:	f7fe fb4a 	bl	c005678 <HAL_GetTick>
 c006fe4:	4602      	mov	r2, r0
 c006fe6:	693b      	ldr	r3, [r7, #16]
 c006fe8:	1ad3      	subs	r3, r2, r3
 c006fea:	2b02      	cmp	r3, #2
 c006fec:	d907      	bls.n	c006ffe <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006fee:	4b29      	ldr	r3, [pc, #164]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c006ff0:	681b      	ldr	r3, [r3, #0]
 c006ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c006ff6:	2b00      	cmp	r3, #0
 c006ff8:	d001      	beq.n	c006ffe <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 c006ffa:	2303      	movs	r3, #3
 c006ffc:	e046      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006ffe:	4b25      	ldr	r3, [pc, #148]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c007000:	681b      	ldr	r3, [r3, #0]
 c007002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c007006:	2b00      	cmp	r3, #0
 c007008:	d1ea      	bne.n	c006fe0 <HAL_RCC_OscConfig+0x908>
 c00700a:	e03e      	b.n	c00708a <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c00700c:	687b      	ldr	r3, [r7, #4]
 c00700e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c007010:	2b01      	cmp	r3, #1
 c007012:	d101      	bne.n	c007018 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 c007014:	2301      	movs	r3, #1
 c007016:	e039      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 c007018:	4b1e      	ldr	r3, [pc, #120]	; (c007094 <HAL_RCC_OscConfig+0x9bc>)
 c00701a:	68db      	ldr	r3, [r3, #12]
 c00701c:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c00701e:	697b      	ldr	r3, [r7, #20]
 c007020:	f003 0203 	and.w	r2, r3, #3
 c007024:	687b      	ldr	r3, [r7, #4]
 c007026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c007028:	429a      	cmp	r2, r3
 c00702a:	d12c      	bne.n	c007086 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c00702c:	697b      	ldr	r3, [r7, #20]
 c00702e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c007032:	687b      	ldr	r3, [r7, #4]
 c007034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c007036:	3b01      	subs	r3, #1
 c007038:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c00703a:	429a      	cmp	r2, r3
 c00703c:	d123      	bne.n	c007086 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c00703e:	697b      	ldr	r3, [r7, #20]
 c007040:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 c007044:	687b      	ldr	r3, [r7, #4]
 c007046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c007048:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c00704a:	429a      	cmp	r2, r3
 c00704c:	d11b      	bne.n	c007086 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c00704e:	697b      	ldr	r3, [r7, #20]
 c007050:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 c007054:	687b      	ldr	r3, [r7, #4]
 c007056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c007058:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c00705a:	429a      	cmp	r2, r3
 c00705c:	d113      	bne.n	c007086 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c00705e:	697b      	ldr	r3, [r7, #20]
 c007060:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 c007064:	687b      	ldr	r3, [r7, #4]
 c007066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c007068:	085b      	lsrs	r3, r3, #1
 c00706a:	3b01      	subs	r3, #1
 c00706c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c00706e:	429a      	cmp	r2, r3
 c007070:	d109      	bne.n	c007086 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c007072:	697b      	ldr	r3, [r7, #20]
 c007074:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 c007078:	687b      	ldr	r3, [r7, #4]
 c00707a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c00707c:	085b      	lsrs	r3, r3, #1
 c00707e:	3b01      	subs	r3, #1
 c007080:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c007082:	429a      	cmp	r2, r3
 c007084:	d001      	beq.n	c00708a <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 c007086:	2301      	movs	r3, #1
 c007088:	e000      	b.n	c00708c <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 c00708a:	2300      	movs	r3, #0
}
 c00708c:	4618      	mov	r0, r3
 c00708e:	3720      	adds	r7, #32
 c007090:	46bd      	mov	sp, r7
 c007092:	bd80      	pop	{r7, pc}
 c007094:	50021000 	.word	0x50021000
 c007098:	019f800c 	.word	0x019f800c

0c00709c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 c00709c:	b580      	push	{r7, lr}
 c00709e:	b086      	sub	sp, #24
 c0070a0:	af00      	add	r7, sp, #0
 c0070a2:	6078      	str	r0, [r7, #4]
 c0070a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c0070a6:	2300      	movs	r3, #0
 c0070a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 c0070aa:	687b      	ldr	r3, [r7, #4]
 c0070ac:	2b00      	cmp	r3, #0
 c0070ae:	d101      	bne.n	c0070b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 c0070b0:	2301      	movs	r3, #1
 c0070b2:	e10d      	b.n	c0072d0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c0070b4:	4b88      	ldr	r3, [pc, #544]	; (c0072d8 <HAL_RCC_ClockConfig+0x23c>)
 c0070b6:	681b      	ldr	r3, [r3, #0]
 c0070b8:	f003 030f 	and.w	r3, r3, #15
 c0070bc:	683a      	ldr	r2, [r7, #0]
 c0070be:	429a      	cmp	r2, r3
 c0070c0:	d910      	bls.n	c0070e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c0070c2:	4b85      	ldr	r3, [pc, #532]	; (c0072d8 <HAL_RCC_ClockConfig+0x23c>)
 c0070c4:	681b      	ldr	r3, [r3, #0]
 c0070c6:	f023 020f 	bic.w	r2, r3, #15
 c0070ca:	4983      	ldr	r1, [pc, #524]	; (c0072d8 <HAL_RCC_ClockConfig+0x23c>)
 c0070cc:	683b      	ldr	r3, [r7, #0]
 c0070ce:	4313      	orrs	r3, r2
 c0070d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c0070d2:	4b81      	ldr	r3, [pc, #516]	; (c0072d8 <HAL_RCC_ClockConfig+0x23c>)
 c0070d4:	681b      	ldr	r3, [r3, #0]
 c0070d6:	f003 030f 	and.w	r3, r3, #15
 c0070da:	683a      	ldr	r2, [r7, #0]
 c0070dc:	429a      	cmp	r2, r3
 c0070de:	d001      	beq.n	c0070e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 c0070e0:	2301      	movs	r3, #1
 c0070e2:	e0f5      	b.n	c0072d0 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c0070e4:	687b      	ldr	r3, [r7, #4]
 c0070e6:	681b      	ldr	r3, [r3, #0]
 c0070e8:	f003 0301 	and.w	r3, r3, #1
 c0070ec:	2b00      	cmp	r3, #0
 c0070ee:	f000 8094 	beq.w	c00721a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c0070f2:	687b      	ldr	r3, [r7, #4]
 c0070f4:	685b      	ldr	r3, [r3, #4]
 c0070f6:	2b03      	cmp	r3, #3
 c0070f8:	d134      	bne.n	c007164 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c0070fa:	4b78      	ldr	r3, [pc, #480]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c0070fc:	681b      	ldr	r3, [r3, #0]
 c0070fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c007102:	2b00      	cmp	r3, #0
 c007104:	d101      	bne.n	c00710a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 c007106:	2301      	movs	r3, #1
 c007108:	e0e2      	b.n	c0072d0 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 c00710a:	f000 fa2b 	bl	c007564 <RCC_GetSysClockFreqFromPLLSource>
 c00710e:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 c007110:	693b      	ldr	r3, [r7, #16]
 c007112:	4a73      	ldr	r2, [pc, #460]	; (c0072e0 <HAL_RCC_ClockConfig+0x244>)
 c007114:	4293      	cmp	r3, r2
 c007116:	d956      	bls.n	c0071c6 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c007118:	4b70      	ldr	r3, [pc, #448]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c00711a:	689b      	ldr	r3, [r3, #8]
 c00711c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c007120:	2b00      	cmp	r3, #0
 c007122:	d10a      	bne.n	c00713a <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c007124:	4b6d      	ldr	r3, [pc, #436]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c007126:	689b      	ldr	r3, [r3, #8]
 c007128:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c00712c:	4a6b      	ldr	r2, [pc, #428]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c00712e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c007132:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c007134:	2380      	movs	r3, #128	; 0x80
 c007136:	617b      	str	r3, [r7, #20]
 c007138:	e045      	b.n	c0071c6 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c00713a:	687b      	ldr	r3, [r7, #4]
 c00713c:	681b      	ldr	r3, [r3, #0]
 c00713e:	f003 0302 	and.w	r3, r3, #2
 c007142:	2b00      	cmp	r3, #0
 c007144:	d03f      	beq.n	c0071c6 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 c007146:	687b      	ldr	r3, [r7, #4]
 c007148:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c00714a:	2b00      	cmp	r3, #0
 c00714c:	d13b      	bne.n	c0071c6 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c00714e:	4b63      	ldr	r3, [pc, #396]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c007150:	689b      	ldr	r3, [r3, #8]
 c007152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c007156:	4a61      	ldr	r2, [pc, #388]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c007158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c00715c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c00715e:	2380      	movs	r3, #128	; 0x80
 c007160:	617b      	str	r3, [r7, #20]
 c007162:	e030      	b.n	c0071c6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c007164:	687b      	ldr	r3, [r7, #4]
 c007166:	685b      	ldr	r3, [r3, #4]
 c007168:	2b02      	cmp	r3, #2
 c00716a:	d107      	bne.n	c00717c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00716c:	4b5b      	ldr	r3, [pc, #364]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c00716e:	681b      	ldr	r3, [r3, #0]
 c007170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c007174:	2b00      	cmp	r3, #0
 c007176:	d115      	bne.n	c0071a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c007178:	2301      	movs	r3, #1
 c00717a:	e0a9      	b.n	c0072d0 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c00717c:	687b      	ldr	r3, [r7, #4]
 c00717e:	685b      	ldr	r3, [r3, #4]
 c007180:	2b00      	cmp	r3, #0
 c007182:	d107      	bne.n	c007194 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c007184:	4b55      	ldr	r3, [pc, #340]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c007186:	681b      	ldr	r3, [r3, #0]
 c007188:	f003 0302 	and.w	r3, r3, #2
 c00718c:	2b00      	cmp	r3, #0
 c00718e:	d109      	bne.n	c0071a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c007190:	2301      	movs	r3, #1
 c007192:	e09d      	b.n	c0072d0 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c007194:	4b51      	ldr	r3, [pc, #324]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c007196:	681b      	ldr	r3, [r3, #0]
 c007198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00719c:	2b00      	cmp	r3, #0
 c00719e:	d101      	bne.n	c0071a4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c0071a0:	2301      	movs	r3, #1
 c0071a2:	e095      	b.n	c0072d0 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 c0071a4:	f000 f8a2 	bl	c0072ec <HAL_RCC_GetSysClockFreq>
 c0071a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 c0071aa:	693b      	ldr	r3, [r7, #16]
 c0071ac:	4a4c      	ldr	r2, [pc, #304]	; (c0072e0 <HAL_RCC_ClockConfig+0x244>)
 c0071ae:	4293      	cmp	r3, r2
 c0071b0:	d909      	bls.n	c0071c6 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c0071b2:	4b4a      	ldr	r3, [pc, #296]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c0071b4:	689b      	ldr	r3, [r3, #8]
 c0071b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c0071ba:	4a48      	ldr	r2, [pc, #288]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c0071bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0071c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 c0071c2:	2380      	movs	r3, #128	; 0x80
 c0071c4:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c0071c6:	4b45      	ldr	r3, [pc, #276]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c0071c8:	689b      	ldr	r3, [r3, #8]
 c0071ca:	f023 0203 	bic.w	r2, r3, #3
 c0071ce:	687b      	ldr	r3, [r7, #4]
 c0071d0:	685b      	ldr	r3, [r3, #4]
 c0071d2:	4942      	ldr	r1, [pc, #264]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c0071d4:	4313      	orrs	r3, r2
 c0071d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c0071d8:	f7fe fa4e 	bl	c005678 <HAL_GetTick>
 c0071dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c0071de:	e013      	b.n	c007208 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c0071e0:	f7fe fa4a 	bl	c005678 <HAL_GetTick>
 c0071e4:	4602      	mov	r2, r0
 c0071e6:	68fb      	ldr	r3, [r7, #12]
 c0071e8:	1ad3      	subs	r3, r2, r3
 c0071ea:	f241 3288 	movw	r2, #5000	; 0x1388
 c0071ee:	4293      	cmp	r3, r2
 c0071f0:	d90a      	bls.n	c007208 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c0071f2:	4b3a      	ldr	r3, [pc, #232]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c0071f4:	689b      	ldr	r3, [r3, #8]
 c0071f6:	f003 020c 	and.w	r2, r3, #12
 c0071fa:	687b      	ldr	r3, [r7, #4]
 c0071fc:	685b      	ldr	r3, [r3, #4]
 c0071fe:	009b      	lsls	r3, r3, #2
 c007200:	429a      	cmp	r2, r3
 c007202:	d001      	beq.n	c007208 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 c007204:	2303      	movs	r3, #3
 c007206:	e063      	b.n	c0072d0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c007208:	4b34      	ldr	r3, [pc, #208]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c00720a:	689b      	ldr	r3, [r3, #8]
 c00720c:	f003 020c 	and.w	r2, r3, #12
 c007210:	687b      	ldr	r3, [r7, #4]
 c007212:	685b      	ldr	r3, [r3, #4]
 c007214:	009b      	lsls	r3, r3, #2
 c007216:	429a      	cmp	r2, r3
 c007218:	d1e2      	bne.n	c0071e0 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c00721a:	687b      	ldr	r3, [r7, #4]
 c00721c:	681b      	ldr	r3, [r3, #0]
 c00721e:	f003 0302 	and.w	r3, r3, #2
 c007222:	2b00      	cmp	r3, #0
 c007224:	d009      	beq.n	c00723a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c007226:	4b2d      	ldr	r3, [pc, #180]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c007228:	689b      	ldr	r3, [r3, #8]
 c00722a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c00722e:	687b      	ldr	r3, [r7, #4]
 c007230:	689b      	ldr	r3, [r3, #8]
 c007232:	492a      	ldr	r1, [pc, #168]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c007234:	4313      	orrs	r3, r2
 c007236:	608b      	str	r3, [r1, #8]
 c007238:	e008      	b.n	c00724c <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 c00723a:	697b      	ldr	r3, [r7, #20]
 c00723c:	2b80      	cmp	r3, #128	; 0x80
 c00723e:	d105      	bne.n	c00724c <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c007240:	4b26      	ldr	r3, [pc, #152]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c007242:	689b      	ldr	r3, [r3, #8]
 c007244:	4a25      	ldr	r2, [pc, #148]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c007246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c00724a:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c00724c:	4b22      	ldr	r3, [pc, #136]	; (c0072d8 <HAL_RCC_ClockConfig+0x23c>)
 c00724e:	681b      	ldr	r3, [r3, #0]
 c007250:	f003 030f 	and.w	r3, r3, #15
 c007254:	683a      	ldr	r2, [r7, #0]
 c007256:	429a      	cmp	r2, r3
 c007258:	d210      	bcs.n	c00727c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c00725a:	4b1f      	ldr	r3, [pc, #124]	; (c0072d8 <HAL_RCC_ClockConfig+0x23c>)
 c00725c:	681b      	ldr	r3, [r3, #0]
 c00725e:	f023 020f 	bic.w	r2, r3, #15
 c007262:	491d      	ldr	r1, [pc, #116]	; (c0072d8 <HAL_RCC_ClockConfig+0x23c>)
 c007264:	683b      	ldr	r3, [r7, #0]
 c007266:	4313      	orrs	r3, r2
 c007268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c00726a:	4b1b      	ldr	r3, [pc, #108]	; (c0072d8 <HAL_RCC_ClockConfig+0x23c>)
 c00726c:	681b      	ldr	r3, [r3, #0]
 c00726e:	f003 030f 	and.w	r3, r3, #15
 c007272:	683a      	ldr	r2, [r7, #0]
 c007274:	429a      	cmp	r2, r3
 c007276:	d001      	beq.n	c00727c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 c007278:	2301      	movs	r3, #1
 c00727a:	e029      	b.n	c0072d0 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c00727c:	687b      	ldr	r3, [r7, #4]
 c00727e:	681b      	ldr	r3, [r3, #0]
 c007280:	f003 0304 	and.w	r3, r3, #4
 c007284:	2b00      	cmp	r3, #0
 c007286:	d008      	beq.n	c00729a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c007288:	4b14      	ldr	r3, [pc, #80]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c00728a:	689b      	ldr	r3, [r3, #8]
 c00728c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c007290:	687b      	ldr	r3, [r7, #4]
 c007292:	68db      	ldr	r3, [r3, #12]
 c007294:	4911      	ldr	r1, [pc, #68]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c007296:	4313      	orrs	r3, r2
 c007298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c00729a:	687b      	ldr	r3, [r7, #4]
 c00729c:	681b      	ldr	r3, [r3, #0]
 c00729e:	f003 0308 	and.w	r3, r3, #8
 c0072a2:	2b00      	cmp	r3, #0
 c0072a4:	d009      	beq.n	c0072ba <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c0072a6:	4b0d      	ldr	r3, [pc, #52]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c0072a8:	689b      	ldr	r3, [r3, #8]
 c0072aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 c0072ae:	687b      	ldr	r3, [r7, #4]
 c0072b0:	691b      	ldr	r3, [r3, #16]
 c0072b2:	00db      	lsls	r3, r3, #3
 c0072b4:	4909      	ldr	r1, [pc, #36]	; (c0072dc <HAL_RCC_ClockConfig+0x240>)
 c0072b6:	4313      	orrs	r3, r2
 c0072b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c0072ba:	f000 f8b3 	bl	c007424 <HAL_RCC_GetHCLKFreq>
 c0072be:	4603      	mov	r3, r0
 c0072c0:	4a08      	ldr	r2, [pc, #32]	; (c0072e4 <HAL_RCC_ClockConfig+0x248>)
 c0072c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 c0072c4:	4b08      	ldr	r3, [pc, #32]	; (c0072e8 <HAL_RCC_ClockConfig+0x24c>)
 c0072c6:	681b      	ldr	r3, [r3, #0]
 c0072c8:	4618      	mov	r0, r3
 c0072ca:	f7fe f985 	bl	c0055d8 <HAL_InitTick>
 c0072ce:	4603      	mov	r3, r0
}
 c0072d0:	4618      	mov	r0, r3
 c0072d2:	3718      	adds	r7, #24
 c0072d4:	46bd      	mov	sp, r7
 c0072d6:	bd80      	pop	{r7, pc}
 c0072d8:	50022000 	.word	0x50022000
 c0072dc:	50021000 	.word	0x50021000
 c0072e0:	04c4b400 	.word	0x04c4b400
 c0072e4:	30000068 	.word	0x30000068
 c0072e8:	3000006c 	.word	0x3000006c

0c0072ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c0072ec:	b480      	push	{r7}
 c0072ee:	b089      	sub	sp, #36	; 0x24
 c0072f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c0072f2:	2300      	movs	r3, #0
 c0072f4:	61fb      	str	r3, [r7, #28]
 c0072f6:	2300      	movs	r3, #0
 c0072f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0072fa:	4b47      	ldr	r3, [pc, #284]	; (c007418 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0072fc:	689b      	ldr	r3, [r3, #8]
 c0072fe:	f003 030c 	and.w	r3, r3, #12
 c007302:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c007304:	4b44      	ldr	r3, [pc, #272]	; (c007418 <HAL_RCC_GetSysClockFreq+0x12c>)
 c007306:	68db      	ldr	r3, [r3, #12]
 c007308:	f003 0303 	and.w	r3, r3, #3
 c00730c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c00730e:	693b      	ldr	r3, [r7, #16]
 c007310:	2b00      	cmp	r3, #0
 c007312:	d005      	beq.n	c007320 <HAL_RCC_GetSysClockFreq+0x34>
 c007314:	693b      	ldr	r3, [r7, #16]
 c007316:	2b0c      	cmp	r3, #12
 c007318:	d121      	bne.n	c00735e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c00731a:	68fb      	ldr	r3, [r7, #12]
 c00731c:	2b01      	cmp	r3, #1
 c00731e:	d11e      	bne.n	c00735e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c007320:	4b3d      	ldr	r3, [pc, #244]	; (c007418 <HAL_RCC_GetSysClockFreq+0x12c>)
 c007322:	681b      	ldr	r3, [r3, #0]
 c007324:	f003 0308 	and.w	r3, r3, #8
 c007328:	2b00      	cmp	r3, #0
 c00732a:	d107      	bne.n	c00733c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c00732c:	4b3a      	ldr	r3, [pc, #232]	; (c007418 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00732e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c007332:	0a1b      	lsrs	r3, r3, #8
 c007334:	f003 030f 	and.w	r3, r3, #15
 c007338:	61fb      	str	r3, [r7, #28]
 c00733a:	e005      	b.n	c007348 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c00733c:	4b36      	ldr	r3, [pc, #216]	; (c007418 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00733e:	681b      	ldr	r3, [r3, #0]
 c007340:	091b      	lsrs	r3, r3, #4
 c007342:	f003 030f 	and.w	r3, r3, #15
 c007346:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c007348:	4a34      	ldr	r2, [pc, #208]	; (c00741c <HAL_RCC_GetSysClockFreq+0x130>)
 c00734a:	69fb      	ldr	r3, [r7, #28]
 c00734c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c007350:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c007352:	693b      	ldr	r3, [r7, #16]
 c007354:	2b00      	cmp	r3, #0
 c007356:	d10d      	bne.n	c007374 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c007358:	69fb      	ldr	r3, [r7, #28]
 c00735a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c00735c:	e00a      	b.n	c007374 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c00735e:	693b      	ldr	r3, [r7, #16]
 c007360:	2b04      	cmp	r3, #4
 c007362:	d102      	bne.n	c00736a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c007364:	4b2e      	ldr	r3, [pc, #184]	; (c007420 <HAL_RCC_GetSysClockFreq+0x134>)
 c007366:	61bb      	str	r3, [r7, #24]
 c007368:	e004      	b.n	c007374 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c00736a:	693b      	ldr	r3, [r7, #16]
 c00736c:	2b08      	cmp	r3, #8
 c00736e:	d101      	bne.n	c007374 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c007370:	4b2b      	ldr	r3, [pc, #172]	; (c007420 <HAL_RCC_GetSysClockFreq+0x134>)
 c007372:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c007374:	693b      	ldr	r3, [r7, #16]
 c007376:	2b0c      	cmp	r3, #12
 c007378:	d146      	bne.n	c007408 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c00737a:	4b27      	ldr	r3, [pc, #156]	; (c007418 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00737c:	68db      	ldr	r3, [r3, #12]
 c00737e:	f003 0303 	and.w	r3, r3, #3
 c007382:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c007384:	4b24      	ldr	r3, [pc, #144]	; (c007418 <HAL_RCC_GetSysClockFreq+0x12c>)
 c007386:	68db      	ldr	r3, [r3, #12]
 c007388:	091b      	lsrs	r3, r3, #4
 c00738a:	f003 030f 	and.w	r3, r3, #15
 c00738e:	3301      	adds	r3, #1
 c007390:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 c007392:	68bb      	ldr	r3, [r7, #8]
 c007394:	2b02      	cmp	r3, #2
 c007396:	d003      	beq.n	c0073a0 <HAL_RCC_GetSysClockFreq+0xb4>
 c007398:	68bb      	ldr	r3, [r7, #8]
 c00739a:	2b03      	cmp	r3, #3
 c00739c:	d00d      	beq.n	c0073ba <HAL_RCC_GetSysClockFreq+0xce>
 c00739e:	e019      	b.n	c0073d4 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0073a0:	4a1f      	ldr	r2, [pc, #124]	; (c007420 <HAL_RCC_GetSysClockFreq+0x134>)
 c0073a2:	687b      	ldr	r3, [r7, #4]
 c0073a4:	fbb2 f3f3 	udiv	r3, r2, r3
 c0073a8:	4a1b      	ldr	r2, [pc, #108]	; (c007418 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0073aa:	68d2      	ldr	r2, [r2, #12]
 c0073ac:	0a12      	lsrs	r2, r2, #8
 c0073ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0073b2:	fb02 f303 	mul.w	r3, r2, r3
 c0073b6:	617b      	str	r3, [r7, #20]
        break;
 c0073b8:	e019      	b.n	c0073ee <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0073ba:	4a19      	ldr	r2, [pc, #100]	; (c007420 <HAL_RCC_GetSysClockFreq+0x134>)
 c0073bc:	687b      	ldr	r3, [r7, #4]
 c0073be:	fbb2 f3f3 	udiv	r3, r2, r3
 c0073c2:	4a15      	ldr	r2, [pc, #84]	; (c007418 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0073c4:	68d2      	ldr	r2, [r2, #12]
 c0073c6:	0a12      	lsrs	r2, r2, #8
 c0073c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0073cc:	fb02 f303 	mul.w	r3, r2, r3
 c0073d0:	617b      	str	r3, [r7, #20]
        break;
 c0073d2:	e00c      	b.n	c0073ee <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0073d4:	69fa      	ldr	r2, [r7, #28]
 c0073d6:	687b      	ldr	r3, [r7, #4]
 c0073d8:	fbb2 f3f3 	udiv	r3, r2, r3
 c0073dc:	4a0e      	ldr	r2, [pc, #56]	; (c007418 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0073de:	68d2      	ldr	r2, [r2, #12]
 c0073e0:	0a12      	lsrs	r2, r2, #8
 c0073e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0073e6:	fb02 f303 	mul.w	r3, r2, r3
 c0073ea:	617b      	str	r3, [r7, #20]
        break;
 c0073ec:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c0073ee:	4b0a      	ldr	r3, [pc, #40]	; (c007418 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0073f0:	68db      	ldr	r3, [r3, #12]
 c0073f2:	0e5b      	lsrs	r3, r3, #25
 c0073f4:	f003 0303 	and.w	r3, r3, #3
 c0073f8:	3301      	adds	r3, #1
 c0073fa:	005b      	lsls	r3, r3, #1
 c0073fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 c0073fe:	697a      	ldr	r2, [r7, #20]
 c007400:	683b      	ldr	r3, [r7, #0]
 c007402:	fbb2 f3f3 	udiv	r3, r2, r3
 c007406:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 c007408:	69bb      	ldr	r3, [r7, #24]
}
 c00740a:	4618      	mov	r0, r3
 c00740c:	3724      	adds	r7, #36	; 0x24
 c00740e:	46bd      	mov	sp, r7
 c007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007414:	4770      	bx	lr
 c007416:	bf00      	nop
 c007418:	50021000 	.word	0x50021000
 c00741c:	0c009888 	.word	0x0c009888
 c007420:	00f42400 	.word	0x00f42400

0c007424 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c007424:	b580      	push	{r7, lr}
 c007426:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c007428:	f7ff ff60 	bl	c0072ec <HAL_RCC_GetSysClockFreq>
 c00742c:	4602      	mov	r2, r0
 c00742e:	4b05      	ldr	r3, [pc, #20]	; (c007444 <HAL_RCC_GetHCLKFreq+0x20>)
 c007430:	689b      	ldr	r3, [r3, #8]
 c007432:	091b      	lsrs	r3, r3, #4
 c007434:	f003 030f 	and.w	r3, r3, #15
 c007438:	4903      	ldr	r1, [pc, #12]	; (c007448 <HAL_RCC_GetHCLKFreq+0x24>)
 c00743a:	5ccb      	ldrb	r3, [r1, r3]
 c00743c:	fa22 f303 	lsr.w	r3, r2, r3
}
 c007440:	4618      	mov	r0, r3
 c007442:	bd80      	pop	{r7, pc}
 c007444:	50021000 	.word	0x50021000
 c007448:	0c009870 	.word	0x0c009870

0c00744c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c00744c:	b580      	push	{r7, lr}
 c00744e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c007450:	f7ff ffe8 	bl	c007424 <HAL_RCC_GetHCLKFreq>
 c007454:	4602      	mov	r2, r0
 c007456:	4b05      	ldr	r3, [pc, #20]	; (c00746c <HAL_RCC_GetPCLK1Freq+0x20>)
 c007458:	689b      	ldr	r3, [r3, #8]
 c00745a:	0a1b      	lsrs	r3, r3, #8
 c00745c:	f003 0307 	and.w	r3, r3, #7
 c007460:	4903      	ldr	r1, [pc, #12]	; (c007470 <HAL_RCC_GetPCLK1Freq+0x24>)
 c007462:	5ccb      	ldrb	r3, [r1, r3]
 c007464:	fa22 f303 	lsr.w	r3, r2, r3
}
 c007468:	4618      	mov	r0, r3
 c00746a:	bd80      	pop	{r7, pc}
 c00746c:	50021000 	.word	0x50021000
 c007470:	0c009880 	.word	0x0c009880

0c007474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c007474:	b580      	push	{r7, lr}
 c007476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c007478:	f7ff ffd4 	bl	c007424 <HAL_RCC_GetHCLKFreq>
 c00747c:	4602      	mov	r2, r0
 c00747e:	4b05      	ldr	r3, [pc, #20]	; (c007494 <HAL_RCC_GetPCLK2Freq+0x20>)
 c007480:	689b      	ldr	r3, [r3, #8]
 c007482:	0adb      	lsrs	r3, r3, #11
 c007484:	f003 0307 	and.w	r3, r3, #7
 c007488:	4903      	ldr	r1, [pc, #12]	; (c007498 <HAL_RCC_GetPCLK2Freq+0x24>)
 c00748a:	5ccb      	ldrb	r3, [r1, r3]
 c00748c:	fa22 f303 	lsr.w	r3, r2, r3
}
 c007490:	4618      	mov	r0, r3
 c007492:	bd80      	pop	{r7, pc}
 c007494:	50021000 	.word	0x50021000
 c007498:	0c009880 	.word	0x0c009880

0c00749c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c00749c:	b580      	push	{r7, lr}
 c00749e:	b086      	sub	sp, #24
 c0074a0:	af00      	add	r7, sp, #0
 c0074a2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 c0074a4:	2300      	movs	r3, #0
 c0074a6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c0074a8:	4b2c      	ldr	r3, [pc, #176]	; (c00755c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0074aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0074ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0074b0:	2b00      	cmp	r3, #0
 c0074b2:	d003      	beq.n	c0074bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c0074b4:	f7ff f862 	bl	c00657c <HAL_PWREx_GetVoltageRange>
 c0074b8:	6138      	str	r0, [r7, #16]
 c0074ba:	e014      	b.n	c0074e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c0074bc:	4b27      	ldr	r3, [pc, #156]	; (c00755c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0074be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0074c0:	4a26      	ldr	r2, [pc, #152]	; (c00755c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0074c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0074c6:	6593      	str	r3, [r2, #88]	; 0x58
 c0074c8:	4b24      	ldr	r3, [pc, #144]	; (c00755c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0074ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0074cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0074d0:	60fb      	str	r3, [r7, #12]
 c0074d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c0074d4:	f7ff f852 	bl	c00657c <HAL_PWREx_GetVoltageRange>
 c0074d8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 c0074da:	4b20      	ldr	r3, [pc, #128]	; (c00755c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0074dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0074de:	4a1f      	ldr	r2, [pc, #124]	; (c00755c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0074e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c0074e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c0074e6:	693b      	ldr	r3, [r7, #16]
 c0074e8:	2b00      	cmp	r3, #0
 c0074ea:	d003      	beq.n	c0074f4 <RCC_SetFlashLatencyFromMSIRange+0x58>
 c0074ec:	693b      	ldr	r3, [r7, #16]
 c0074ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0074f2:	d10b      	bne.n	c00750c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 c0074f4:	687b      	ldr	r3, [r7, #4]
 c0074f6:	2b80      	cmp	r3, #128	; 0x80
 c0074f8:	d919      	bls.n	c00752e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 c0074fa:	687b      	ldr	r3, [r7, #4]
 c0074fc:	2ba0      	cmp	r3, #160	; 0xa0
 c0074fe:	d902      	bls.n	c007506 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c007500:	2302      	movs	r3, #2
 c007502:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c007504:	e013      	b.n	c00752e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c007506:	2301      	movs	r3, #1
 c007508:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c00750a:	e010      	b.n	c00752e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c00750c:	687b      	ldr	r3, [r7, #4]
 c00750e:	2b80      	cmp	r3, #128	; 0x80
 c007510:	d902      	bls.n	c007518 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 c007512:	2303      	movs	r3, #3
 c007514:	617b      	str	r3, [r7, #20]
 c007516:	e00a      	b.n	c00752e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c007518:	687b      	ldr	r3, [r7, #4]
 c00751a:	2b80      	cmp	r3, #128	; 0x80
 c00751c:	d102      	bne.n	c007524 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c00751e:	2302      	movs	r3, #2
 c007520:	617b      	str	r3, [r7, #20]
 c007522:	e004      	b.n	c00752e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 c007524:	687b      	ldr	r3, [r7, #4]
 c007526:	2b70      	cmp	r3, #112	; 0x70
 c007528:	d101      	bne.n	c00752e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c00752a:	2301      	movs	r3, #1
 c00752c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c00752e:	4b0c      	ldr	r3, [pc, #48]	; (c007560 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c007530:	681b      	ldr	r3, [r3, #0]
 c007532:	f023 020f 	bic.w	r2, r3, #15
 c007536:	490a      	ldr	r1, [pc, #40]	; (c007560 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c007538:	697b      	ldr	r3, [r7, #20]
 c00753a:	4313      	orrs	r3, r2
 c00753c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c00753e:	4b08      	ldr	r3, [pc, #32]	; (c007560 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c007540:	681b      	ldr	r3, [r3, #0]
 c007542:	f003 030f 	and.w	r3, r3, #15
 c007546:	697a      	ldr	r2, [r7, #20]
 c007548:	429a      	cmp	r2, r3
 c00754a:	d001      	beq.n	c007550 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 c00754c:	2301      	movs	r3, #1
 c00754e:	e000      	b.n	c007552 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 c007550:	2300      	movs	r3, #0
}
 c007552:	4618      	mov	r0, r3
 c007554:	3718      	adds	r7, #24
 c007556:	46bd      	mov	sp, r7
 c007558:	bd80      	pop	{r7, pc}
 c00755a:	bf00      	nop
 c00755c:	50021000 	.word	0x50021000
 c007560:	50022000 	.word	0x50022000

0c007564 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 c007564:	b480      	push	{r7}
 c007566:	b087      	sub	sp, #28
 c007568:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 c00756a:	2300      	movs	r3, #0
 c00756c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 c00756e:	4b36      	ldr	r3, [pc, #216]	; (c007648 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c007570:	68db      	ldr	r3, [r3, #12]
 c007572:	f003 0303 	and.w	r3, r3, #3
 c007576:	2b01      	cmp	r3, #1
 c007578:	d118      	bne.n	c0075ac <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c00757a:	4b33      	ldr	r3, [pc, #204]	; (c007648 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c00757c:	681b      	ldr	r3, [r3, #0]
 c00757e:	f003 0308 	and.w	r3, r3, #8
 c007582:	2b00      	cmp	r3, #0
 c007584:	d107      	bne.n	c007596 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c007586:	4b30      	ldr	r3, [pc, #192]	; (c007648 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c007588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00758c:	0a1b      	lsrs	r3, r3, #8
 c00758e:	f003 030f 	and.w	r3, r3, #15
 c007592:	617b      	str	r3, [r7, #20]
 c007594:	e005      	b.n	c0075a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c007596:	4b2c      	ldr	r3, [pc, #176]	; (c007648 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c007598:	681b      	ldr	r3, [r3, #0]
 c00759a:	091b      	lsrs	r3, r3, #4
 c00759c:	f003 030f 	and.w	r3, r3, #15
 c0075a0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c0075a2:	4a2a      	ldr	r2, [pc, #168]	; (c00764c <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 c0075a4:	697b      	ldr	r3, [r7, #20]
 c0075a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0075aa:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c0075ac:	4b26      	ldr	r3, [pc, #152]	; (c007648 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0075ae:	68db      	ldr	r3, [r3, #12]
 c0075b0:	f003 0303 	and.w	r3, r3, #3
 c0075b4:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c0075b6:	4b24      	ldr	r3, [pc, #144]	; (c007648 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0075b8:	68db      	ldr	r3, [r3, #12]
 c0075ba:	091b      	lsrs	r3, r3, #4
 c0075bc:	f003 030f 	and.w	r3, r3, #15
 c0075c0:	3301      	adds	r3, #1
 c0075c2:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 c0075c4:	68fb      	ldr	r3, [r7, #12]
 c0075c6:	2b02      	cmp	r3, #2
 c0075c8:	d003      	beq.n	c0075d2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 c0075ca:	68fb      	ldr	r3, [r7, #12]
 c0075cc:	2b03      	cmp	r3, #3
 c0075ce:	d00d      	beq.n	c0075ec <RCC_GetSysClockFreqFromPLLSource+0x88>
 c0075d0:	e019      	b.n	c007606 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0075d2:	4a1f      	ldr	r2, [pc, #124]	; (c007650 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 c0075d4:	68bb      	ldr	r3, [r7, #8]
 c0075d6:	fbb2 f3f3 	udiv	r3, r2, r3
 c0075da:	4a1b      	ldr	r2, [pc, #108]	; (c007648 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0075dc:	68d2      	ldr	r2, [r2, #12]
 c0075de:	0a12      	lsrs	r2, r2, #8
 c0075e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0075e4:	fb02 f303 	mul.w	r3, r2, r3
 c0075e8:	613b      	str	r3, [r7, #16]
      break;
 c0075ea:	e019      	b.n	c007620 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0075ec:	4a18      	ldr	r2, [pc, #96]	; (c007650 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 c0075ee:	68bb      	ldr	r3, [r7, #8]
 c0075f0:	fbb2 f3f3 	udiv	r3, r2, r3
 c0075f4:	4a14      	ldr	r2, [pc, #80]	; (c007648 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0075f6:	68d2      	ldr	r2, [r2, #12]
 c0075f8:	0a12      	lsrs	r2, r2, #8
 c0075fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0075fe:	fb02 f303 	mul.w	r3, r2, r3
 c007602:	613b      	str	r3, [r7, #16]
      break;
 c007604:	e00c      	b.n	c007620 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c007606:	697a      	ldr	r2, [r7, #20]
 c007608:	68bb      	ldr	r3, [r7, #8]
 c00760a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00760e:	4a0e      	ldr	r2, [pc, #56]	; (c007648 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c007610:	68d2      	ldr	r2, [r2, #12]
 c007612:	0a12      	lsrs	r2, r2, #8
 c007614:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c007618:	fb02 f303 	mul.w	r3, r2, r3
 c00761c:	613b      	str	r3, [r7, #16]
      break;
 c00761e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c007620:	4b09      	ldr	r3, [pc, #36]	; (c007648 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c007622:	68db      	ldr	r3, [r3, #12]
 c007624:	0e5b      	lsrs	r3, r3, #25
 c007626:	f003 0303 	and.w	r3, r3, #3
 c00762a:	3301      	adds	r3, #1
 c00762c:	005b      	lsls	r3, r3, #1
 c00762e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 c007630:	693a      	ldr	r2, [r7, #16]
 c007632:	687b      	ldr	r3, [r7, #4]
 c007634:	fbb2 f3f3 	udiv	r3, r2, r3
 c007638:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 c00763a:	683b      	ldr	r3, [r7, #0]
}
 c00763c:	4618      	mov	r0, r3
 c00763e:	371c      	adds	r7, #28
 c007640:	46bd      	mov	sp, r7
 c007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007646:	4770      	bx	lr
 c007648:	50021000 	.word	0x50021000
 c00764c:	0c009888 	.word	0x0c009888
 c007650:	00f42400 	.word	0x00f42400

0c007654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 c007654:	b580      	push	{r7, lr}
 c007656:	b088      	sub	sp, #32
 c007658:	af00      	add	r7, sp, #0
 c00765a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c00765c:	2300      	movs	r3, #0
 c00765e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c007660:	2300      	movs	r3, #0
 c007662:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c007664:	687b      	ldr	r3, [r7, #4]
 c007666:	681b      	ldr	r3, [r3, #0]
 c007668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00766c:	2b00      	cmp	r3, #0
 c00766e:	d040      	beq.n	c0076f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 c007670:	687b      	ldr	r3, [r7, #4]
 c007672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c007674:	2b80      	cmp	r3, #128	; 0x80
 c007676:	d02a      	beq.n	c0076ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c007678:	2b80      	cmp	r3, #128	; 0x80
 c00767a:	d825      	bhi.n	c0076c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c00767c:	2b60      	cmp	r3, #96	; 0x60
 c00767e:	d026      	beq.n	c0076ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c007680:	2b60      	cmp	r3, #96	; 0x60
 c007682:	d821      	bhi.n	c0076c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c007684:	2b40      	cmp	r3, #64	; 0x40
 c007686:	d006      	beq.n	c007696 <HAL_RCCEx_PeriphCLKConfig+0x42>
 c007688:	2b40      	cmp	r3, #64	; 0x40
 c00768a:	d81d      	bhi.n	c0076c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c00768c:	2b00      	cmp	r3, #0
 c00768e:	d009      	beq.n	c0076a4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 c007690:	2b20      	cmp	r3, #32
 c007692:	d010      	beq.n	c0076b6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 c007694:	e018      	b.n	c0076c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c007696:	4b8f      	ldr	r3, [pc, #572]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007698:	68db      	ldr	r3, [r3, #12]
 c00769a:	4a8e      	ldr	r2, [pc, #568]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00769c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0076a0:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c0076a2:	e015      	b.n	c0076d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c0076a4:	687b      	ldr	r3, [r7, #4]
 c0076a6:	3304      	adds	r3, #4
 c0076a8:	2100      	movs	r1, #0
 c0076aa:	4618      	mov	r0, r3
 c0076ac:	f000 fb56 	bl	c007d5c <RCCEx_PLLSAI1_Config>
 c0076b0:	4603      	mov	r3, r0
 c0076b2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c0076b4:	e00c      	b.n	c0076d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c0076b6:	687b      	ldr	r3, [r7, #4]
 c0076b8:	3320      	adds	r3, #32
 c0076ba:	2100      	movs	r1, #0
 c0076bc:	4618      	mov	r0, r3
 c0076be:	f000 fc33 	bl	c007f28 <RCCEx_PLLSAI2_Config>
 c0076c2:	4603      	mov	r3, r0
 c0076c4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c0076c6:	e003      	b.n	c0076d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0076c8:	2301      	movs	r3, #1
 c0076ca:	77fb      	strb	r3, [r7, #31]
        break;
 c0076cc:	e000      	b.n	c0076d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 c0076ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0076d0:	7ffb      	ldrb	r3, [r7, #31]
 c0076d2:	2b00      	cmp	r3, #0
 c0076d4:	d10b      	bne.n	c0076ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c0076d6:	4b7f      	ldr	r3, [pc, #508]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0076d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0076dc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 c0076e0:	687b      	ldr	r3, [r7, #4]
 c0076e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c0076e4:	497b      	ldr	r1, [pc, #492]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0076e6:	4313      	orrs	r3, r2
 c0076e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c0076ec:	e001      	b.n	c0076f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0076ee:	7ffb      	ldrb	r3, [r7, #31]
 c0076f0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c0076f2:	687b      	ldr	r3, [r7, #4]
 c0076f4:	681b      	ldr	r3, [r3, #0]
 c0076f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c0076fa:	2b00      	cmp	r3, #0
 c0076fc:	d047      	beq.n	c00778e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 c0076fe:	687b      	ldr	r3, [r7, #4]
 c007700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c007702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c007706:	d030      	beq.n	c00776a <HAL_RCCEx_PeriphCLKConfig+0x116>
 c007708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c00770c:	d82a      	bhi.n	c007764 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c00770e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c007712:	d02a      	beq.n	c00776a <HAL_RCCEx_PeriphCLKConfig+0x116>
 c007714:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c007718:	d824      	bhi.n	c007764 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c00771a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c00771e:	d008      	beq.n	c007732 <HAL_RCCEx_PeriphCLKConfig+0xde>
 c007720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c007724:	d81e      	bhi.n	c007764 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c007726:	2b00      	cmp	r3, #0
 c007728:	d00a      	beq.n	c007740 <HAL_RCCEx_PeriphCLKConfig+0xec>
 c00772a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c00772e:	d010      	beq.n	c007752 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 c007730:	e018      	b.n	c007764 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c007732:	4b68      	ldr	r3, [pc, #416]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007734:	68db      	ldr	r3, [r3, #12]
 c007736:	4a67      	ldr	r2, [pc, #412]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c00773c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c00773e:	e015      	b.n	c00776c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c007740:	687b      	ldr	r3, [r7, #4]
 c007742:	3304      	adds	r3, #4
 c007744:	2100      	movs	r1, #0
 c007746:	4618      	mov	r0, r3
 c007748:	f000 fb08 	bl	c007d5c <RCCEx_PLLSAI1_Config>
 c00774c:	4603      	mov	r3, r0
 c00774e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c007750:	e00c      	b.n	c00776c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c007752:	687b      	ldr	r3, [r7, #4]
 c007754:	3320      	adds	r3, #32
 c007756:	2100      	movs	r1, #0
 c007758:	4618      	mov	r0, r3
 c00775a:	f000 fbe5 	bl	c007f28 <RCCEx_PLLSAI2_Config>
 c00775e:	4603      	mov	r3, r0
 c007760:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c007762:	e003      	b.n	c00776c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c007764:	2301      	movs	r3, #1
 c007766:	77fb      	strb	r3, [r7, #31]
        break;
 c007768:	e000      	b.n	c00776c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 c00776a:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00776c:	7ffb      	ldrb	r3, [r7, #31]
 c00776e:	2b00      	cmp	r3, #0
 c007770:	d10b      	bne.n	c00778a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 c007772:	4b58      	ldr	r3, [pc, #352]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007774:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c007778:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c00777c:	687b      	ldr	r3, [r7, #4]
 c00777e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c007780:	4954      	ldr	r1, [pc, #336]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007782:	4313      	orrs	r3, r2
 c007784:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c007788:	e001      	b.n	c00778e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00778a:	7ffb      	ldrb	r3, [r7, #31]
 c00778c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c00778e:	687b      	ldr	r3, [r7, #4]
 c007790:	681b      	ldr	r3, [r3, #0]
 c007792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c007796:	2b00      	cmp	r3, #0
 c007798:	f000 80ab 	beq.w	c0078f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 c00779c:	2300      	movs	r3, #0
 c00779e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c0077a0:	4b4c      	ldr	r3, [pc, #304]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0077a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0077a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0077a8:	2b00      	cmp	r3, #0
 c0077aa:	d10d      	bne.n	c0077c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c0077ac:	4b49      	ldr	r3, [pc, #292]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0077ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0077b0:	4a48      	ldr	r2, [pc, #288]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0077b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0077b6:	6593      	str	r3, [r2, #88]	; 0x58
 c0077b8:	4b46      	ldr	r3, [pc, #280]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0077ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0077bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0077c0:	60fb      	str	r3, [r7, #12]
 c0077c2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 c0077c4:	2301      	movs	r3, #1
 c0077c6:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c0077c8:	4b43      	ldr	r3, [pc, #268]	; (c0078d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c0077ca:	681b      	ldr	r3, [r3, #0]
 c0077cc:	4a42      	ldr	r2, [pc, #264]	; (c0078d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c0077ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c0077d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c0077d4:	f7fd ff50 	bl	c005678 <HAL_GetTick>
 c0077d8:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c0077da:	e00f      	b.n	c0077fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c0077dc:	f7fd ff4c 	bl	c005678 <HAL_GetTick>
 c0077e0:	4602      	mov	r2, r0
 c0077e2:	693b      	ldr	r3, [r7, #16]
 c0077e4:	1ad3      	subs	r3, r2, r3
 c0077e6:	2b02      	cmp	r3, #2
 c0077e8:	d908      	bls.n	c0077fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c0077ea:	4b3b      	ldr	r3, [pc, #236]	; (c0078d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c0077ec:	681b      	ldr	r3, [r3, #0]
 c0077ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0077f2:	2b00      	cmp	r3, #0
 c0077f4:	d109      	bne.n	c00780a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 c0077f6:	2303      	movs	r3, #3
 c0077f8:	77fb      	strb	r3, [r7, #31]
        }
        break;
 c0077fa:	e006      	b.n	c00780a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c0077fc:	4b36      	ldr	r3, [pc, #216]	; (c0078d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c0077fe:	681b      	ldr	r3, [r3, #0]
 c007800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c007804:	2b00      	cmp	r3, #0
 c007806:	d0e9      	beq.n	c0077dc <HAL_RCCEx_PeriphCLKConfig+0x188>
 c007808:	e000      	b.n	c00780c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 c00780a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 c00780c:	7ffb      	ldrb	r3, [r7, #31]
 c00780e:	2b00      	cmp	r3, #0
 c007810:	d164      	bne.n	c0078dc <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c007812:	4b30      	ldr	r3, [pc, #192]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c007818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c00781c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 c00781e:	69bb      	ldr	r3, [r7, #24]
 c007820:	2b00      	cmp	r3, #0
 c007822:	d01f      	beq.n	c007864 <HAL_RCCEx_PeriphCLKConfig+0x210>
 c007824:	687b      	ldr	r3, [r7, #4]
 c007826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00782a:	69ba      	ldr	r2, [r7, #24]
 c00782c:	429a      	cmp	r2, r3
 c00782e:	d019      	beq.n	c007864 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c007830:	4b28      	ldr	r3, [pc, #160]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c007836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c00783a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c00783c:	4b25      	ldr	r3, [pc, #148]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00783e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c007842:	4a24      	ldr	r2, [pc, #144]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c007848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 c00784c:	4b21      	ldr	r3, [pc, #132]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00784e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c007852:	4a20      	ldr	r2, [pc, #128]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c007858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c00785c:	4a1d      	ldr	r2, [pc, #116]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00785e:	69bb      	ldr	r3, [r7, #24]
 c007860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c007864:	69bb      	ldr	r3, [r7, #24]
 c007866:	f003 0301 	and.w	r3, r3, #1
 c00786a:	2b00      	cmp	r3, #0
 c00786c:	d01f      	beq.n	c0078ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00786e:	f7fd ff03 	bl	c005678 <HAL_GetTick>
 c007872:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c007874:	e012      	b.n	c00789c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c007876:	f7fd feff 	bl	c005678 <HAL_GetTick>
 c00787a:	4602      	mov	r2, r0
 c00787c:	693b      	ldr	r3, [r7, #16]
 c00787e:	1ad3      	subs	r3, r2, r3
 c007880:	f241 3288 	movw	r2, #5000	; 0x1388
 c007884:	4293      	cmp	r3, r2
 c007886:	d909      	bls.n	c00789c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c007888:	4b12      	ldr	r3, [pc, #72]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00788a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00788e:	f003 0302 	and.w	r3, r3, #2
 c007892:	2b00      	cmp	r3, #0
 c007894:	d10a      	bne.n	c0078ac <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 c007896:	2303      	movs	r3, #3
 c007898:	77fb      	strb	r3, [r7, #31]
            }
            break;
 c00789a:	e007      	b.n	c0078ac <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00789c:	4b0d      	ldr	r3, [pc, #52]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00789e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0078a2:	f003 0302 	and.w	r3, r3, #2
 c0078a6:	2b00      	cmp	r3, #0
 c0078a8:	d0e5      	beq.n	c007876 <HAL_RCCEx_PeriphCLKConfig+0x222>
 c0078aa:	e000      	b.n	c0078ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 c0078ac:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 c0078ae:	7ffb      	ldrb	r3, [r7, #31]
 c0078b0:	2b00      	cmp	r3, #0
 c0078b2:	d10c      	bne.n	c0078ce <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 c0078b4:	4b07      	ldr	r3, [pc, #28]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0078b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0078ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c0078be:	687b      	ldr	r3, [r7, #4]
 c0078c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0078c4:	4903      	ldr	r1, [pc, #12]	; (c0078d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0078c6:	4313      	orrs	r3, r2
 c0078c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 c0078cc:	e008      	b.n	c0078e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c0078ce:	7ffb      	ldrb	r3, [r7, #31]
 c0078d0:	77bb      	strb	r3, [r7, #30]
 c0078d2:	e005      	b.n	c0078e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 c0078d4:	50021000 	.word	0x50021000
 c0078d8:	50007000 	.word	0x50007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0078dc:	7ffb      	ldrb	r3, [r7, #31]
 c0078de:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c0078e0:	7dfb      	ldrb	r3, [r7, #23]
 c0078e2:	2b01      	cmp	r3, #1
 c0078e4:	d105      	bne.n	c0078f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c0078e6:	4b9c      	ldr	r3, [pc, #624]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0078e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0078ea:	4a9b      	ldr	r2, [pc, #620]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0078ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c0078f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c0078f2:	687b      	ldr	r3, [r7, #4]
 c0078f4:	681b      	ldr	r3, [r3, #0]
 c0078f6:	f003 0301 	and.w	r3, r3, #1
 c0078fa:	2b00      	cmp	r3, #0
 c0078fc:	d00a      	beq.n	c007914 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 c0078fe:	4b96      	ldr	r3, [pc, #600]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007904:	f023 0203 	bic.w	r2, r3, #3
 c007908:	687b      	ldr	r3, [r7, #4]
 c00790a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00790c:	4992      	ldr	r1, [pc, #584]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00790e:	4313      	orrs	r3, r2
 c007910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c007914:	687b      	ldr	r3, [r7, #4]
 c007916:	681b      	ldr	r3, [r3, #0]
 c007918:	f003 0302 	and.w	r3, r3, #2
 c00791c:	2b00      	cmp	r3, #0
 c00791e:	d00a      	beq.n	c007936 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 c007920:	4b8d      	ldr	r3, [pc, #564]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007926:	f023 020c 	bic.w	r2, r3, #12
 c00792a:	687b      	ldr	r3, [r7, #4]
 c00792c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c00792e:	498a      	ldr	r1, [pc, #552]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007930:	4313      	orrs	r3, r2
 c007932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c007936:	687b      	ldr	r3, [r7, #4]
 c007938:	681b      	ldr	r3, [r3, #0]
 c00793a:	f003 0304 	and.w	r3, r3, #4
 c00793e:	2b00      	cmp	r3, #0
 c007940:	d00a      	beq.n	c007958 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 c007942:	4b85      	ldr	r3, [pc, #532]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007948:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 c00794c:	687b      	ldr	r3, [r7, #4]
 c00794e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c007950:	4981      	ldr	r1, [pc, #516]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007952:	4313      	orrs	r3, r2
 c007954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c007958:	687b      	ldr	r3, [r7, #4]
 c00795a:	681b      	ldr	r3, [r3, #0]
 c00795c:	f003 0308 	and.w	r3, r3, #8
 c007960:	2b00      	cmp	r3, #0
 c007962:	d00a      	beq.n	c00797a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 c007964:	4b7c      	ldr	r3, [pc, #496]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00796a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 c00796e:	687b      	ldr	r3, [r7, #4]
 c007970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c007972:	4979      	ldr	r1, [pc, #484]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007974:	4313      	orrs	r3, r2
 c007976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c00797a:	687b      	ldr	r3, [r7, #4]
 c00797c:	681b      	ldr	r3, [r3, #0]
 c00797e:	f003 0310 	and.w	r3, r3, #16
 c007982:	2b00      	cmp	r3, #0
 c007984:	d00a      	beq.n	c00799c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 c007986:	4b74      	ldr	r3, [pc, #464]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00798c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c007990:	687b      	ldr	r3, [r7, #4]
 c007992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c007994:	4970      	ldr	r1, [pc, #448]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007996:	4313      	orrs	r3, r2
 c007998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c00799c:	687b      	ldr	r3, [r7, #4]
 c00799e:	681b      	ldr	r3, [r3, #0]
 c0079a0:	f003 0320 	and.w	r3, r3, #32
 c0079a4:	2b00      	cmp	r3, #0
 c0079a6:	d00a      	beq.n	c0079be <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 c0079a8:	4b6b      	ldr	r3, [pc, #428]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0079aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0079ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 c0079b2:	687b      	ldr	r3, [r7, #4]
 c0079b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0079b6:	4968      	ldr	r1, [pc, #416]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0079b8:	4313      	orrs	r3, r2
 c0079ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c0079be:	687b      	ldr	r3, [r7, #4]
 c0079c0:	681b      	ldr	r3, [r3, #0]
 c0079c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c0079c6:	2b00      	cmp	r3, #0
 c0079c8:	d00a      	beq.n	c0079e0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 c0079ca:	4b63      	ldr	r3, [pc, #396]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0079cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0079d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 c0079d4:	687b      	ldr	r3, [r7, #4]
 c0079d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0079d8:	495f      	ldr	r1, [pc, #380]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0079da:	4313      	orrs	r3, r2
 c0079dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c0079e0:	687b      	ldr	r3, [r7, #4]
 c0079e2:	681b      	ldr	r3, [r3, #0]
 c0079e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0079e8:	2b00      	cmp	r3, #0
 c0079ea:	d00a      	beq.n	c007a02 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 c0079ec:	4b5a      	ldr	r3, [pc, #360]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0079ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0079f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c0079f6:	687b      	ldr	r3, [r7, #4]
 c0079f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0079fa:	4957      	ldr	r1, [pc, #348]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0079fc:	4313      	orrs	r3, r2
 c0079fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 c007a02:	687b      	ldr	r3, [r7, #4]
 c007a04:	681b      	ldr	r3, [r3, #0]
 c007a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c007a0a:	2b00      	cmp	r3, #0
 c007a0c:	d00a      	beq.n	c007a24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 c007a0e:	4b52      	ldr	r3, [pc, #328]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007a14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 c007a18:	687b      	ldr	r3, [r7, #4]
 c007a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c007a1c:	494e      	ldr	r1, [pc, #312]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007a1e:	4313      	orrs	r3, r2
 c007a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 c007a24:	687b      	ldr	r3, [r7, #4]
 c007a26:	681b      	ldr	r3, [r3, #0]
 c007a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c007a2c:	2b00      	cmp	r3, #0
 c007a2e:	d031      	beq.n	c007a94 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 c007a30:	687b      	ldr	r3, [r7, #4]
 c007a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c007a34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c007a38:	d00e      	beq.n	c007a58 <HAL_RCCEx_PeriphCLKConfig+0x404>
 c007a3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c007a3e:	d814      	bhi.n	c007a6a <HAL_RCCEx_PeriphCLKConfig+0x416>
 c007a40:	2b00      	cmp	r3, #0
 c007a42:	d015      	beq.n	c007a70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c007a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c007a48:	d10f      	bne.n	c007a6a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c007a4a:	4b43      	ldr	r3, [pc, #268]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007a4c:	68db      	ldr	r3, [r3, #12]
 c007a4e:	4a42      	ldr	r2, [pc, #264]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007a50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c007a54:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c007a56:	e00c      	b.n	c007a72 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c007a58:	687b      	ldr	r3, [r7, #4]
 c007a5a:	3304      	adds	r3, #4
 c007a5c:	2100      	movs	r1, #0
 c007a5e:	4618      	mov	r0, r3
 c007a60:	f000 f97c 	bl	c007d5c <RCCEx_PLLSAI1_Config>
 c007a64:	4603      	mov	r3, r0
 c007a66:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c007a68:	e003      	b.n	c007a72 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 c007a6a:	2301      	movs	r3, #1
 c007a6c:	77fb      	strb	r3, [r7, #31]
        break;
 c007a6e:	e000      	b.n	c007a72 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 c007a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 c007a72:	7ffb      	ldrb	r3, [r7, #31]
 c007a74:	2b00      	cmp	r3, #0
 c007a76:	d10b      	bne.n	c007a90 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 c007a78:	4b37      	ldr	r3, [pc, #220]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007a7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 c007a82:	687b      	ldr	r3, [r7, #4]
 c007a84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c007a86:	4934      	ldr	r1, [pc, #208]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007a88:	4313      	orrs	r3, r2
 c007a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c007a8e:	e001      	b.n	c007a94 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c007a90:	7ffb      	ldrb	r3, [r7, #31]
 c007a92:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c007a94:	687b      	ldr	r3, [r7, #4]
 c007a96:	681b      	ldr	r3, [r3, #0]
 c007a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c007a9c:	2b00      	cmp	r3, #0
 c007a9e:	d00a      	beq.n	c007ab6 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 c007aa0:	4b2d      	ldr	r3, [pc, #180]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007aa6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 c007aaa:	687b      	ldr	r3, [r7, #4]
 c007aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c007aae:	492a      	ldr	r1, [pc, #168]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007ab0:	4313      	orrs	r3, r2
 c007ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c007ab6:	687b      	ldr	r3, [r7, #4]
 c007ab8:	681b      	ldr	r3, [r3, #0]
 c007aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c007abe:	2b00      	cmp	r3, #0
 c007ac0:	d00a      	beq.n	c007ad8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 c007ac2:	4b25      	ldr	r3, [pc, #148]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007ac8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 c007acc:	687b      	ldr	r3, [r7, #4]
 c007ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c007ad0:	4921      	ldr	r1, [pc, #132]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007ad2:	4313      	orrs	r3, r2
 c007ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c007ad8:	687b      	ldr	r3, [r7, #4]
 c007ada:	681b      	ldr	r3, [r3, #0]
 c007adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c007ae0:	2b00      	cmp	r3, #0
 c007ae2:	d00a      	beq.n	c007afa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 c007ae4:	4b1c      	ldr	r3, [pc, #112]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007aea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 c007aee:	687b      	ldr	r3, [r7, #4]
 c007af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c007af2:	4919      	ldr	r1, [pc, #100]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007af4:	4313      	orrs	r3, r2
 c007af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c007afa:	687b      	ldr	r3, [r7, #4]
 c007afc:	681b      	ldr	r3, [r3, #0]
 c007afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c007b02:	2b00      	cmp	r3, #0
 c007b04:	d00a      	beq.n	c007b1c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 c007b06:	4b14      	ldr	r3, [pc, #80]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007b08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c007b0c:	f023 0203 	bic.w	r2, r3, #3
 c007b10:	687b      	ldr	r3, [r7, #4]
 c007b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c007b14:	4910      	ldr	r1, [pc, #64]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007b16:	4313      	orrs	r3, r2
 c007b18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 c007b1c:	687b      	ldr	r3, [r7, #4]
 c007b1e:	681b      	ldr	r3, [r3, #0]
 c007b20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c007b24:	2b00      	cmp	r3, #0
 c007b26:	d02b      	beq.n	c007b80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c007b28:	4b0b      	ldr	r3, [pc, #44]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007b2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c007b32:	687b      	ldr	r3, [r7, #4]
 c007b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c007b36:	4908      	ldr	r1, [pc, #32]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007b38:	4313      	orrs	r3, r2
 c007b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c007b3e:	687b      	ldr	r3, [r7, #4]
 c007b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c007b42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c007b46:	d109      	bne.n	c007b5c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c007b48:	4b03      	ldr	r3, [pc, #12]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007b4a:	68db      	ldr	r3, [r3, #12]
 c007b4c:	4a02      	ldr	r2, [pc, #8]	; (c007b58 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c007b52:	60d3      	str	r3, [r2, #12]
 c007b54:	e014      	b.n	c007b80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 c007b56:	bf00      	nop
 c007b58:	50021000 	.word	0x50021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 c007b5c:	687b      	ldr	r3, [r7, #4]
 c007b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c007b60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c007b64:	d10c      	bne.n	c007b80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c007b66:	687b      	ldr	r3, [r7, #4]
 c007b68:	3304      	adds	r3, #4
 c007b6a:	2101      	movs	r1, #1
 c007b6c:	4618      	mov	r0, r3
 c007b6e:	f000 f8f5 	bl	c007d5c <RCCEx_PLLSAI1_Config>
 c007b72:	4603      	mov	r3, r0
 c007b74:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 c007b76:	7ffb      	ldrb	r3, [r7, #31]
 c007b78:	2b00      	cmp	r3, #0
 c007b7a:	d001      	beq.n	c007b80 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 c007b7c:	7ffb      	ldrb	r3, [r7, #31]
 c007b7e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 c007b80:	687b      	ldr	r3, [r7, #4]
 c007b82:	681b      	ldr	r3, [r3, #0]
 c007b84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c007b88:	2b00      	cmp	r3, #0
 c007b8a:	d04a      	beq.n	c007c22 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c007b8c:	687b      	ldr	r3, [r7, #4]
 c007b8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c007b90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c007b94:	d108      	bne.n	c007ba8 <HAL_RCCEx_PeriphCLKConfig+0x554>
 c007b96:	4b70      	ldr	r3, [pc, #448]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007b98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c007b9c:	4a6e      	ldr	r2, [pc, #440]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c007ba2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 c007ba6:	e012      	b.n	c007bce <HAL_RCCEx_PeriphCLKConfig+0x57a>
 c007ba8:	4b6b      	ldr	r3, [pc, #428]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007bae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c007bb2:	687b      	ldr	r3, [r7, #4]
 c007bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c007bb6:	4968      	ldr	r1, [pc, #416]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007bb8:	4313      	orrs	r3, r2
 c007bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c007bbe:	4b66      	ldr	r3, [pc, #408]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007bc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c007bc4:	4a64      	ldr	r2, [pc, #400]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007bc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 c007bca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c007bce:	687b      	ldr	r3, [r7, #4]
 c007bd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c007bd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c007bd6:	d10d      	bne.n	c007bf4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c007bd8:	687b      	ldr	r3, [r7, #4]
 c007bda:	3304      	adds	r3, #4
 c007bdc:	2101      	movs	r1, #1
 c007bde:	4618      	mov	r0, r3
 c007be0:	f000 f8bc 	bl	c007d5c <RCCEx_PLLSAI1_Config>
 c007be4:	4603      	mov	r3, r0
 c007be6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c007be8:	7ffb      	ldrb	r3, [r7, #31]
 c007bea:	2b00      	cmp	r3, #0
 c007bec:	d019      	beq.n	c007c22 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 c007bee:	7ffb      	ldrb	r3, [r7, #31]
 c007bf0:	77bb      	strb	r3, [r7, #30]
 c007bf2:	e016      	b.n	c007c22 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 c007bf4:	687b      	ldr	r3, [r7, #4]
 c007bf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c007bf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c007bfc:	d106      	bne.n	c007c0c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c007bfe:	4b56      	ldr	r3, [pc, #344]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007c00:	68db      	ldr	r3, [r3, #12]
 c007c02:	4a55      	ldr	r2, [pc, #340]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007c04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c007c08:	60d3      	str	r3, [r2, #12]
 c007c0a:	e00a      	b.n	c007c22 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 c007c0c:	687b      	ldr	r3, [r7, #4]
 c007c0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c007c10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c007c14:	d105      	bne.n	c007c22 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c007c16:	4b50      	ldr	r3, [pc, #320]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007c18:	68db      	ldr	r3, [r3, #12]
 c007c1a:	4a4f      	ldr	r2, [pc, #316]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c007c20:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 c007c22:	687b      	ldr	r3, [r7, #4]
 c007c24:	681b      	ldr	r3, [r3, #0]
 c007c26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c007c2a:	2b00      	cmp	r3, #0
 c007c2c:	d028      	beq.n	c007c80 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c007c2e:	4b4a      	ldr	r3, [pc, #296]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007c34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c007c38:	687b      	ldr	r3, [r7, #4]
 c007c3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c007c3c:	4946      	ldr	r1, [pc, #280]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007c3e:	4313      	orrs	r3, r2
 c007c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c007c44:	687b      	ldr	r3, [r7, #4]
 c007c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c007c48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c007c4c:	d106      	bne.n	c007c5c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c007c4e:	4b42      	ldr	r3, [pc, #264]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007c50:	68db      	ldr	r3, [r3, #12]
 c007c52:	4a41      	ldr	r2, [pc, #260]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007c54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c007c58:	60d3      	str	r3, [r2, #12]
 c007c5a:	e011      	b.n	c007c80 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 c007c5c:	687b      	ldr	r3, [r7, #4]
 c007c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c007c60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c007c64:	d10c      	bne.n	c007c80 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c007c66:	687b      	ldr	r3, [r7, #4]
 c007c68:	3304      	adds	r3, #4
 c007c6a:	2101      	movs	r1, #1
 c007c6c:	4618      	mov	r0, r3
 c007c6e:	f000 f875 	bl	c007d5c <RCCEx_PLLSAI1_Config>
 c007c72:	4603      	mov	r3, r0
 c007c74:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c007c76:	7ffb      	ldrb	r3, [r7, #31]
 c007c78:	2b00      	cmp	r3, #0
 c007c7a:	d001      	beq.n	c007c80 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 c007c7c:	7ffb      	ldrb	r3, [r7, #31]
 c007c7e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 c007c80:	687b      	ldr	r3, [r7, #4]
 c007c82:	681b      	ldr	r3, [r3, #0]
 c007c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c007c88:	2b00      	cmp	r3, #0
 c007c8a:	d01e      	beq.n	c007cca <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c007c8c:	4b32      	ldr	r3, [pc, #200]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007c92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 c007c96:	687b      	ldr	r3, [r7, #4]
 c007c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c007c9c:	492e      	ldr	r1, [pc, #184]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007c9e:	4313      	orrs	r3, r2
 c007ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c007ca4:	687b      	ldr	r3, [r7, #4]
 c007ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c007caa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c007cae:	d10c      	bne.n	c007cca <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 c007cb0:	687b      	ldr	r3, [r7, #4]
 c007cb2:	3304      	adds	r3, #4
 c007cb4:	2102      	movs	r1, #2
 c007cb6:	4618      	mov	r0, r3
 c007cb8:	f000 f850 	bl	c007d5c <RCCEx_PLLSAI1_Config>
 c007cbc:	4603      	mov	r3, r0
 c007cbe:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c007cc0:	7ffb      	ldrb	r3, [r7, #31]
 c007cc2:	2b00      	cmp	r3, #0
 c007cc4:	d001      	beq.n	c007cca <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 c007cc6:	7ffb      	ldrb	r3, [r7, #31]
 c007cc8:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 c007cca:	687b      	ldr	r3, [r7, #4]
 c007ccc:	681b      	ldr	r3, [r3, #0]
 c007cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c007cd2:	2b00      	cmp	r3, #0
 c007cd4:	d00b      	beq.n	c007cee <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 c007cd6:	4b20      	ldr	r3, [pc, #128]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007cd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c007cdc:	f023 0204 	bic.w	r2, r3, #4
 c007ce0:	687b      	ldr	r3, [r7, #4]
 c007ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c007ce6:	491c      	ldr	r1, [pc, #112]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007ce8:	4313      	orrs	r3, r2
 c007cea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 c007cee:	687b      	ldr	r3, [r7, #4]
 c007cf0:	681b      	ldr	r3, [r3, #0]
 c007cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c007cf6:	2b00      	cmp	r3, #0
 c007cf8:	d00b      	beq.n	c007d12 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 c007cfa:	4b17      	ldr	r3, [pc, #92]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007cfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c007d00:	f023 0218 	bic.w	r2, r3, #24
 c007d04:	687b      	ldr	r3, [r7, #4]
 c007d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007d0a:	4913      	ldr	r1, [pc, #76]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007d0c:	4313      	orrs	r3, r2
 c007d0e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c007d12:	687b      	ldr	r3, [r7, #4]
 c007d14:	681b      	ldr	r3, [r3, #0]
 c007d16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c007d1a:	2b00      	cmp	r3, #0
 c007d1c:	d017      	beq.n	c007d4e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c007d1e:	4b0e      	ldr	r3, [pc, #56]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007d20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c007d24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c007d28:	687b      	ldr	r3, [r7, #4]
 c007d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c007d2e:	490a      	ldr	r1, [pc, #40]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007d30:	4313      	orrs	r3, r2
 c007d32:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c007d36:	687b      	ldr	r3, [r7, #4]
 c007d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c007d3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c007d40:	d105      	bne.n	c007d4e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c007d42:	4b05      	ldr	r3, [pc, #20]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007d44:	68db      	ldr	r3, [r3, #12]
 c007d46:	4a04      	ldr	r2, [pc, #16]	; (c007d58 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007d48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c007d4c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 c007d4e:	7fbb      	ldrb	r3, [r7, #30]
}
 c007d50:	4618      	mov	r0, r3
 c007d52:	3720      	adds	r7, #32
 c007d54:	46bd      	mov	sp, r7
 c007d56:	bd80      	pop	{r7, pc}
 c007d58:	50021000 	.word	0x50021000

0c007d5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 c007d5c:	b580      	push	{r7, lr}
 c007d5e:	b084      	sub	sp, #16
 c007d60:	af00      	add	r7, sp, #0
 c007d62:	6078      	str	r0, [r7, #4]
 c007d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c007d66:	2300      	movs	r3, #0
 c007d68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 c007d6a:	687b      	ldr	r3, [r7, #4]
 c007d6c:	681b      	ldr	r3, [r3, #0]
 c007d6e:	2b03      	cmp	r3, #3
 c007d70:	d018      	beq.n	c007da4 <RCCEx_PLLSAI1_Config+0x48>
 c007d72:	2b03      	cmp	r3, #3
 c007d74:	d81f      	bhi.n	c007db6 <RCCEx_PLLSAI1_Config+0x5a>
 c007d76:	2b01      	cmp	r3, #1
 c007d78:	d002      	beq.n	c007d80 <RCCEx_PLLSAI1_Config+0x24>
 c007d7a:	2b02      	cmp	r3, #2
 c007d7c:	d009      	beq.n	c007d92 <RCCEx_PLLSAI1_Config+0x36>
 c007d7e:	e01a      	b.n	c007db6 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c007d80:	4b65      	ldr	r3, [pc, #404]	; (c007f18 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007d82:	681b      	ldr	r3, [r3, #0]
 c007d84:	f003 0302 	and.w	r3, r3, #2
 c007d88:	2b00      	cmp	r3, #0
 c007d8a:	d117      	bne.n	c007dbc <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 c007d8c:	2301      	movs	r3, #1
 c007d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007d90:	e014      	b.n	c007dbc <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c007d92:	4b61      	ldr	r3, [pc, #388]	; (c007f18 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007d94:	681b      	ldr	r3, [r3, #0]
 c007d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c007d9a:	2b00      	cmp	r3, #0
 c007d9c:	d110      	bne.n	c007dc0 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 c007d9e:	2301      	movs	r3, #1
 c007da0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007da2:	e00d      	b.n	c007dc0 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c007da4:	4b5c      	ldr	r3, [pc, #368]	; (c007f18 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007da6:	681b      	ldr	r3, [r3, #0]
 c007da8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c007dac:	2b00      	cmp	r3, #0
 c007dae:	d109      	bne.n	c007dc4 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 c007db0:	2301      	movs	r3, #1
 c007db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007db4:	e006      	b.n	c007dc4 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 c007db6:	2301      	movs	r3, #1
 c007db8:	73fb      	strb	r3, [r7, #15]
      break;
 c007dba:	e004      	b.n	c007dc6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c007dbc:	bf00      	nop
 c007dbe:	e002      	b.n	c007dc6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c007dc0:	bf00      	nop
 c007dc2:	e000      	b.n	c007dc6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c007dc4:	bf00      	nop
  }

  if (status == HAL_OK)
 c007dc6:	7bfb      	ldrb	r3, [r7, #15]
 c007dc8:	2b00      	cmp	r3, #0
 c007dca:	f040 809f 	bne.w	c007f0c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 c007dce:	4b52      	ldr	r3, [pc, #328]	; (c007f18 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007dd0:	681b      	ldr	r3, [r3, #0]
 c007dd2:	4a51      	ldr	r2, [pc, #324]	; (c007f18 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007dd4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c007dd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c007dda:	f7fd fc4d 	bl	c005678 <HAL_GetTick>
 c007dde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c007de0:	e00f      	b.n	c007e02 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c007de2:	f7fd fc49 	bl	c005678 <HAL_GetTick>
 c007de6:	4602      	mov	r2, r0
 c007de8:	68bb      	ldr	r3, [r7, #8]
 c007dea:	1ad3      	subs	r3, r2, r3
 c007dec:	2b02      	cmp	r3, #2
 c007dee:	d908      	bls.n	c007e02 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c007df0:	4b49      	ldr	r3, [pc, #292]	; (c007f18 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007df2:	681b      	ldr	r3, [r3, #0]
 c007df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c007df8:	2b00      	cmp	r3, #0
 c007dfa:	d009      	beq.n	c007e10 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 c007dfc:	2303      	movs	r3, #3
 c007dfe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c007e00:	e006      	b.n	c007e10 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c007e02:	4b45      	ldr	r3, [pc, #276]	; (c007f18 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007e04:	681b      	ldr	r3, [r3, #0]
 c007e06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c007e0a:	2b00      	cmp	r3, #0
 c007e0c:	d1e9      	bne.n	c007de2 <RCCEx_PLLSAI1_Config+0x86>
 c007e0e:	e000      	b.n	c007e12 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 c007e10:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c007e12:	7bfb      	ldrb	r3, [r7, #15]
 c007e14:	2b00      	cmp	r3, #0
 c007e16:	d179      	bne.n	c007f0c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c007e18:	683b      	ldr	r3, [r7, #0]
 c007e1a:	2b00      	cmp	r3, #0
 c007e1c:	d116      	bne.n	c007e4c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c007e1e:	4b3e      	ldr	r3, [pc, #248]	; (c007f18 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007e20:	691a      	ldr	r2, [r3, #16]
 c007e22:	4b3e      	ldr	r3, [pc, #248]	; (c007f1c <RCCEx_PLLSAI1_Config+0x1c0>)
 c007e24:	4013      	ands	r3, r2
 c007e26:	687a      	ldr	r2, [r7, #4]
 c007e28:	6892      	ldr	r2, [r2, #8]
 c007e2a:	0211      	lsls	r1, r2, #8
 c007e2c:	687a      	ldr	r2, [r7, #4]
 c007e2e:	68d2      	ldr	r2, [r2, #12]
 c007e30:	06d2      	lsls	r2, r2, #27
 c007e32:	4311      	orrs	r1, r2
 c007e34:	687a      	ldr	r2, [r7, #4]
 c007e36:	6852      	ldr	r2, [r2, #4]
 c007e38:	3a01      	subs	r2, #1
 c007e3a:	0112      	lsls	r2, r2, #4
 c007e3c:	4311      	orrs	r1, r2
 c007e3e:	687a      	ldr	r2, [r7, #4]
 c007e40:	6812      	ldr	r2, [r2, #0]
 c007e42:	430a      	orrs	r2, r1
 c007e44:	4934      	ldr	r1, [pc, #208]	; (c007f18 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007e46:	4313      	orrs	r3, r2
 c007e48:	610b      	str	r3, [r1, #16]
 c007e4a:	e033      	b.n	c007eb4 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 c007e4c:	683b      	ldr	r3, [r7, #0]
 c007e4e:	2b01      	cmp	r3, #1
 c007e50:	d118      	bne.n	c007e84 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c007e52:	4b31      	ldr	r3, [pc, #196]	; (c007f18 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007e54:	691a      	ldr	r2, [r3, #16]
 c007e56:	4b32      	ldr	r3, [pc, #200]	; (c007f20 <RCCEx_PLLSAI1_Config+0x1c4>)
 c007e58:	4013      	ands	r3, r2
 c007e5a:	687a      	ldr	r2, [r7, #4]
 c007e5c:	6892      	ldr	r2, [r2, #8]
 c007e5e:	0211      	lsls	r1, r2, #8
 c007e60:	687a      	ldr	r2, [r7, #4]
 c007e62:	6912      	ldr	r2, [r2, #16]
 c007e64:	0852      	lsrs	r2, r2, #1
 c007e66:	3a01      	subs	r2, #1
 c007e68:	0552      	lsls	r2, r2, #21
 c007e6a:	4311      	orrs	r1, r2
 c007e6c:	687a      	ldr	r2, [r7, #4]
 c007e6e:	6852      	ldr	r2, [r2, #4]
 c007e70:	3a01      	subs	r2, #1
 c007e72:	0112      	lsls	r2, r2, #4
 c007e74:	4311      	orrs	r1, r2
 c007e76:	687a      	ldr	r2, [r7, #4]
 c007e78:	6812      	ldr	r2, [r2, #0]
 c007e7a:	430a      	orrs	r2, r1
 c007e7c:	4926      	ldr	r1, [pc, #152]	; (c007f18 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007e7e:	4313      	orrs	r3, r2
 c007e80:	610b      	str	r3, [r1, #16]
 c007e82:	e017      	b.n	c007eb4 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c007e84:	4b24      	ldr	r3, [pc, #144]	; (c007f18 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007e86:	691a      	ldr	r2, [r3, #16]
 c007e88:	4b26      	ldr	r3, [pc, #152]	; (c007f24 <RCCEx_PLLSAI1_Config+0x1c8>)
 c007e8a:	4013      	ands	r3, r2
 c007e8c:	687a      	ldr	r2, [r7, #4]
 c007e8e:	6892      	ldr	r2, [r2, #8]
 c007e90:	0211      	lsls	r1, r2, #8
 c007e92:	687a      	ldr	r2, [r7, #4]
 c007e94:	6952      	ldr	r2, [r2, #20]
 c007e96:	0852      	lsrs	r2, r2, #1
 c007e98:	3a01      	subs	r2, #1
 c007e9a:	0652      	lsls	r2, r2, #25
 c007e9c:	4311      	orrs	r1, r2
 c007e9e:	687a      	ldr	r2, [r7, #4]
 c007ea0:	6852      	ldr	r2, [r2, #4]
 c007ea2:	3a01      	subs	r2, #1
 c007ea4:	0112      	lsls	r2, r2, #4
 c007ea6:	4311      	orrs	r1, r2
 c007ea8:	687a      	ldr	r2, [r7, #4]
 c007eaa:	6812      	ldr	r2, [r2, #0]
 c007eac:	430a      	orrs	r2, r1
 c007eae:	491a      	ldr	r1, [pc, #104]	; (c007f18 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007eb0:	4313      	orrs	r3, r2
 c007eb2:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 c007eb4:	4b18      	ldr	r3, [pc, #96]	; (c007f18 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007eb6:	681b      	ldr	r3, [r3, #0]
 c007eb8:	4a17      	ldr	r2, [pc, #92]	; (c007f18 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007eba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c007ebe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c007ec0:	f7fd fbda 	bl	c005678 <HAL_GetTick>
 c007ec4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c007ec6:	e00f      	b.n	c007ee8 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c007ec8:	f7fd fbd6 	bl	c005678 <HAL_GetTick>
 c007ecc:	4602      	mov	r2, r0
 c007ece:	68bb      	ldr	r3, [r7, #8]
 c007ed0:	1ad3      	subs	r3, r2, r3
 c007ed2:	2b02      	cmp	r3, #2
 c007ed4:	d908      	bls.n	c007ee8 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c007ed6:	4b10      	ldr	r3, [pc, #64]	; (c007f18 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007ed8:	681b      	ldr	r3, [r3, #0]
 c007eda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c007ede:	2b00      	cmp	r3, #0
 c007ee0:	d109      	bne.n	c007ef6 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 c007ee2:	2303      	movs	r3, #3
 c007ee4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c007ee6:	e006      	b.n	c007ef6 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c007ee8:	4b0b      	ldr	r3, [pc, #44]	; (c007f18 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007eea:	681b      	ldr	r3, [r3, #0]
 c007eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c007ef0:	2b00      	cmp	r3, #0
 c007ef2:	d0e9      	beq.n	c007ec8 <RCCEx_PLLSAI1_Config+0x16c>
 c007ef4:	e000      	b.n	c007ef8 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 c007ef6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c007ef8:	7bfb      	ldrb	r3, [r7, #15]
 c007efa:	2b00      	cmp	r3, #0
 c007efc:	d106      	bne.n	c007f0c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 c007efe:	4b06      	ldr	r3, [pc, #24]	; (c007f18 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007f00:	691a      	ldr	r2, [r3, #16]
 c007f02:	687b      	ldr	r3, [r7, #4]
 c007f04:	699b      	ldr	r3, [r3, #24]
 c007f06:	4904      	ldr	r1, [pc, #16]	; (c007f18 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007f08:	4313      	orrs	r3, r2
 c007f0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 c007f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 c007f0e:	4618      	mov	r0, r3
 c007f10:	3710      	adds	r7, #16
 c007f12:	46bd      	mov	sp, r7
 c007f14:	bd80      	pop	{r7, pc}
 c007f16:	bf00      	nop
 c007f18:	50021000 	.word	0x50021000
 c007f1c:	07ff800c 	.word	0x07ff800c
 c007f20:	ff9f800c 	.word	0xff9f800c
 c007f24:	f9ff800c 	.word	0xf9ff800c

0c007f28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 c007f28:	b580      	push	{r7, lr}
 c007f2a:	b084      	sub	sp, #16
 c007f2c:	af00      	add	r7, sp, #0
 c007f2e:	6078      	str	r0, [r7, #4]
 c007f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c007f32:	2300      	movs	r3, #0
 c007f34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 c007f36:	687b      	ldr	r3, [r7, #4]
 c007f38:	681b      	ldr	r3, [r3, #0]
 c007f3a:	2b03      	cmp	r3, #3
 c007f3c:	d018      	beq.n	c007f70 <RCCEx_PLLSAI2_Config+0x48>
 c007f3e:	2b03      	cmp	r3, #3
 c007f40:	d81f      	bhi.n	c007f82 <RCCEx_PLLSAI2_Config+0x5a>
 c007f42:	2b01      	cmp	r3, #1
 c007f44:	d002      	beq.n	c007f4c <RCCEx_PLLSAI2_Config+0x24>
 c007f46:	2b02      	cmp	r3, #2
 c007f48:	d009      	beq.n	c007f5e <RCCEx_PLLSAI2_Config+0x36>
 c007f4a:	e01a      	b.n	c007f82 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c007f4c:	4b4a      	ldr	r3, [pc, #296]	; (c008078 <RCCEx_PLLSAI2_Config+0x150>)
 c007f4e:	681b      	ldr	r3, [r3, #0]
 c007f50:	f003 0302 	and.w	r3, r3, #2
 c007f54:	2b00      	cmp	r3, #0
 c007f56:	d117      	bne.n	c007f88 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 c007f58:	2301      	movs	r3, #1
 c007f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007f5c:	e014      	b.n	c007f88 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c007f5e:	4b46      	ldr	r3, [pc, #280]	; (c008078 <RCCEx_PLLSAI2_Config+0x150>)
 c007f60:	681b      	ldr	r3, [r3, #0]
 c007f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c007f66:	2b00      	cmp	r3, #0
 c007f68:	d110      	bne.n	c007f8c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 c007f6a:	2301      	movs	r3, #1
 c007f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007f6e:	e00d      	b.n	c007f8c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c007f70:	4b41      	ldr	r3, [pc, #260]	; (c008078 <RCCEx_PLLSAI2_Config+0x150>)
 c007f72:	681b      	ldr	r3, [r3, #0]
 c007f74:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c007f78:	2b00      	cmp	r3, #0
 c007f7a:	d109      	bne.n	c007f90 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 c007f7c:	2301      	movs	r3, #1
 c007f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007f80:	e006      	b.n	c007f90 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 c007f82:	2301      	movs	r3, #1
 c007f84:	73fb      	strb	r3, [r7, #15]
      break;
 c007f86:	e004      	b.n	c007f92 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c007f88:	bf00      	nop
 c007f8a:	e002      	b.n	c007f92 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c007f8c:	bf00      	nop
 c007f8e:	e000      	b.n	c007f92 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c007f90:	bf00      	nop
  }

  if (status == HAL_OK)
 c007f92:	7bfb      	ldrb	r3, [r7, #15]
 c007f94:	2b00      	cmp	r3, #0
 c007f96:	d169      	bne.n	c00806c <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 c007f98:	4b37      	ldr	r3, [pc, #220]	; (c008078 <RCCEx_PLLSAI2_Config+0x150>)
 c007f9a:	681b      	ldr	r3, [r3, #0]
 c007f9c:	4a36      	ldr	r2, [pc, #216]	; (c008078 <RCCEx_PLLSAI2_Config+0x150>)
 c007f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c007fa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c007fa4:	f7fd fb68 	bl	c005678 <HAL_GetTick>
 c007fa8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c007faa:	e00f      	b.n	c007fcc <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c007fac:	f7fd fb64 	bl	c005678 <HAL_GetTick>
 c007fb0:	4602      	mov	r2, r0
 c007fb2:	68bb      	ldr	r3, [r7, #8]
 c007fb4:	1ad3      	subs	r3, r2, r3
 c007fb6:	2b02      	cmp	r3, #2
 c007fb8:	d908      	bls.n	c007fcc <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c007fba:	4b2f      	ldr	r3, [pc, #188]	; (c008078 <RCCEx_PLLSAI2_Config+0x150>)
 c007fbc:	681b      	ldr	r3, [r3, #0]
 c007fbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c007fc2:	2b00      	cmp	r3, #0
 c007fc4:	d009      	beq.n	c007fda <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 c007fc6:	2303      	movs	r3, #3
 c007fc8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c007fca:	e006      	b.n	c007fda <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c007fcc:	4b2a      	ldr	r3, [pc, #168]	; (c008078 <RCCEx_PLLSAI2_Config+0x150>)
 c007fce:	681b      	ldr	r3, [r3, #0]
 c007fd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c007fd4:	2b00      	cmp	r3, #0
 c007fd6:	d1e9      	bne.n	c007fac <RCCEx_PLLSAI2_Config+0x84>
 c007fd8:	e000      	b.n	c007fdc <RCCEx_PLLSAI2_Config+0xb4>
        break;
 c007fda:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c007fdc:	7bfb      	ldrb	r3, [r7, #15]
 c007fde:	2b00      	cmp	r3, #0
 c007fe0:	d144      	bne.n	c00806c <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c007fe2:	683b      	ldr	r3, [r7, #0]
 c007fe4:	2b00      	cmp	r3, #0
 c007fe6:	d115      	bne.n	c008014 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 c007fe8:	4b23      	ldr	r3, [pc, #140]	; (c008078 <RCCEx_PLLSAI2_Config+0x150>)
 c007fea:	695a      	ldr	r2, [r3, #20]
 c007fec:	4b23      	ldr	r3, [pc, #140]	; (c00807c <RCCEx_PLLSAI2_Config+0x154>)
 c007fee:	4013      	ands	r3, r2
 c007ff0:	687a      	ldr	r2, [r7, #4]
 c007ff2:	6892      	ldr	r2, [r2, #8]
 c007ff4:	0211      	lsls	r1, r2, #8
 c007ff6:	687a      	ldr	r2, [r7, #4]
 c007ff8:	68d2      	ldr	r2, [r2, #12]
 c007ffa:	06d2      	lsls	r2, r2, #27
 c007ffc:	4311      	orrs	r1, r2
 c007ffe:	687a      	ldr	r2, [r7, #4]
 c008000:	6852      	ldr	r2, [r2, #4]
 c008002:	3a01      	subs	r2, #1
 c008004:	0112      	lsls	r2, r2, #4
 c008006:	4311      	orrs	r1, r2
 c008008:	687a      	ldr	r2, [r7, #4]
 c00800a:	6812      	ldr	r2, [r2, #0]
 c00800c:	430a      	orrs	r2, r1
 c00800e:	491a      	ldr	r1, [pc, #104]	; (c008078 <RCCEx_PLLSAI2_Config+0x150>)
 c008010:	4313      	orrs	r3, r2
 c008012:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 c008014:	4b18      	ldr	r3, [pc, #96]	; (c008078 <RCCEx_PLLSAI2_Config+0x150>)
 c008016:	681b      	ldr	r3, [r3, #0]
 c008018:	4a17      	ldr	r2, [pc, #92]	; (c008078 <RCCEx_PLLSAI2_Config+0x150>)
 c00801a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c00801e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c008020:	f7fd fb2a 	bl	c005678 <HAL_GetTick>
 c008024:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c008026:	e00f      	b.n	c008048 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c008028:	f7fd fb26 	bl	c005678 <HAL_GetTick>
 c00802c:	4602      	mov	r2, r0
 c00802e:	68bb      	ldr	r3, [r7, #8]
 c008030:	1ad3      	subs	r3, r2, r3
 c008032:	2b02      	cmp	r3, #2
 c008034:	d908      	bls.n	c008048 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c008036:	4b10      	ldr	r3, [pc, #64]	; (c008078 <RCCEx_PLLSAI2_Config+0x150>)
 c008038:	681b      	ldr	r3, [r3, #0]
 c00803a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c00803e:	2b00      	cmp	r3, #0
 c008040:	d109      	bne.n	c008056 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 c008042:	2303      	movs	r3, #3
 c008044:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c008046:	e006      	b.n	c008056 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c008048:	4b0b      	ldr	r3, [pc, #44]	; (c008078 <RCCEx_PLLSAI2_Config+0x150>)
 c00804a:	681b      	ldr	r3, [r3, #0]
 c00804c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c008050:	2b00      	cmp	r3, #0
 c008052:	d0e9      	beq.n	c008028 <RCCEx_PLLSAI2_Config+0x100>
 c008054:	e000      	b.n	c008058 <RCCEx_PLLSAI2_Config+0x130>
          break;
 c008056:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c008058:	7bfb      	ldrb	r3, [r7, #15]
 c00805a:	2b00      	cmp	r3, #0
 c00805c:	d106      	bne.n	c00806c <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 c00805e:	4b06      	ldr	r3, [pc, #24]	; (c008078 <RCCEx_PLLSAI2_Config+0x150>)
 c008060:	695a      	ldr	r2, [r3, #20]
 c008062:	687b      	ldr	r3, [r7, #4]
 c008064:	691b      	ldr	r3, [r3, #16]
 c008066:	4904      	ldr	r1, [pc, #16]	; (c008078 <RCCEx_PLLSAI2_Config+0x150>)
 c008068:	4313      	orrs	r3, r2
 c00806a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 c00806c:	7bfb      	ldrb	r3, [r7, #15]
}
 c00806e:	4618      	mov	r0, r3
 c008070:	3710      	adds	r7, #16
 c008072:	46bd      	mov	sp, r7
 c008074:	bd80      	pop	{r7, pc}
 c008076:	bf00      	nop
 c008078:	50021000 	.word	0x50021000
 c00807c:	07ff800c 	.word	0x07ff800c

0c008080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 c008080:	b580      	push	{r7, lr}
 c008082:	b082      	sub	sp, #8
 c008084:	af00      	add	r7, sp, #0
 c008086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 c008088:	687b      	ldr	r3, [r7, #4]
 c00808a:	2b00      	cmp	r3, #0
 c00808c:	d101      	bne.n	c008092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 c00808e:	2301      	movs	r3, #1
 c008090:	e049      	b.n	c008126 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 c008092:	687b      	ldr	r3, [r7, #4]
 c008094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 c008098:	b2db      	uxtb	r3, r3
 c00809a:	2b00      	cmp	r3, #0
 c00809c:	d106      	bne.n	c0080ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 c00809e:	687b      	ldr	r3, [r7, #4]
 c0080a0:	2200      	movs	r2, #0
 c0080a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 c0080a6:	6878      	ldr	r0, [r7, #4]
 c0080a8:	f7fb fc96 	bl	c0039d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 c0080ac:	687b      	ldr	r3, [r7, #4]
 c0080ae:	2202      	movs	r2, #2
 c0080b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 c0080b4:	687b      	ldr	r3, [r7, #4]
 c0080b6:	681a      	ldr	r2, [r3, #0]
 c0080b8:	687b      	ldr	r3, [r7, #4]
 c0080ba:	3304      	adds	r3, #4
 c0080bc:	4619      	mov	r1, r3
 c0080be:	4610      	mov	r0, r2
 c0080c0:	f000 fa74 	bl	c0085ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 c0080c4:	687b      	ldr	r3, [r7, #4]
 c0080c6:	2201      	movs	r2, #1
 c0080c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 c0080cc:	687b      	ldr	r3, [r7, #4]
 c0080ce:	2201      	movs	r2, #1
 c0080d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 c0080d4:	687b      	ldr	r3, [r7, #4]
 c0080d6:	2201      	movs	r2, #1
 c0080d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 c0080dc:	687b      	ldr	r3, [r7, #4]
 c0080de:	2201      	movs	r2, #1
 c0080e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 c0080e4:	687b      	ldr	r3, [r7, #4]
 c0080e6:	2201      	movs	r2, #1
 c0080e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 c0080ec:	687b      	ldr	r3, [r7, #4]
 c0080ee:	2201      	movs	r2, #1
 c0080f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 c0080f4:	687b      	ldr	r3, [r7, #4]
 c0080f6:	2201      	movs	r2, #1
 c0080f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 c0080fc:	687b      	ldr	r3, [r7, #4]
 c0080fe:	2201      	movs	r2, #1
 c008100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 c008104:	687b      	ldr	r3, [r7, #4]
 c008106:	2201      	movs	r2, #1
 c008108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 c00810c:	687b      	ldr	r3, [r7, #4]
 c00810e:	2201      	movs	r2, #1
 c008110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 c008114:	687b      	ldr	r3, [r7, #4]
 c008116:	2201      	movs	r2, #1
 c008118:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 c00811c:	687b      	ldr	r3, [r7, #4]
 c00811e:	2201      	movs	r2, #1
 c008120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 c008124:	2300      	movs	r3, #0
}
 c008126:	4618      	mov	r0, r3
 c008128:	3708      	adds	r7, #8
 c00812a:	46bd      	mov	sp, r7
 c00812c:	bd80      	pop	{r7, pc}

0c00812e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 c00812e:	b480      	push	{r7}
 c008130:	b083      	sub	sp, #12
 c008132:	af00      	add	r7, sp, #0
 c008134:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 c008136:	687b      	ldr	r3, [r7, #4]
 c008138:	681b      	ldr	r3, [r3, #0]
 c00813a:	6a1a      	ldr	r2, [r3, #32]
 c00813c:	f241 1311 	movw	r3, #4369	; 0x1111
 c008140:	4013      	ands	r3, r2
 c008142:	2b00      	cmp	r3, #0
 c008144:	d10f      	bne.n	c008166 <HAL_TIM_Base_Stop+0x38>
 c008146:	687b      	ldr	r3, [r7, #4]
 c008148:	681b      	ldr	r3, [r3, #0]
 c00814a:	6a1a      	ldr	r2, [r3, #32]
 c00814c:	f240 4344 	movw	r3, #1092	; 0x444
 c008150:	4013      	ands	r3, r2
 c008152:	2b00      	cmp	r3, #0
 c008154:	d107      	bne.n	c008166 <HAL_TIM_Base_Stop+0x38>
 c008156:	687b      	ldr	r3, [r7, #4]
 c008158:	681b      	ldr	r3, [r3, #0]
 c00815a:	681a      	ldr	r2, [r3, #0]
 c00815c:	687b      	ldr	r3, [r7, #4]
 c00815e:	681b      	ldr	r3, [r3, #0]
 c008160:	f022 0201 	bic.w	r2, r2, #1
 c008164:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 c008166:	687b      	ldr	r3, [r7, #4]
 c008168:	2201      	movs	r2, #1
 c00816a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 c00816e:	2300      	movs	r3, #0
}
 c008170:	4618      	mov	r0, r3
 c008172:	370c      	adds	r7, #12
 c008174:	46bd      	mov	sp, r7
 c008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00817a:	4770      	bx	lr

0c00817c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 c00817c:	b580      	push	{r7, lr}
 c00817e:	b082      	sub	sp, #8
 c008180:	af00      	add	r7, sp, #0
 c008182:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 c008184:	687b      	ldr	r3, [r7, #4]
 c008186:	681b      	ldr	r3, [r3, #0]
 c008188:	691b      	ldr	r3, [r3, #16]
 c00818a:	f003 0302 	and.w	r3, r3, #2
 c00818e:	2b02      	cmp	r3, #2
 c008190:	d122      	bne.n	c0081d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 c008192:	687b      	ldr	r3, [r7, #4]
 c008194:	681b      	ldr	r3, [r3, #0]
 c008196:	68db      	ldr	r3, [r3, #12]
 c008198:	f003 0302 	and.w	r3, r3, #2
 c00819c:	2b02      	cmp	r3, #2
 c00819e:	d11b      	bne.n	c0081d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 c0081a0:	687b      	ldr	r3, [r7, #4]
 c0081a2:	681b      	ldr	r3, [r3, #0]
 c0081a4:	f06f 0202 	mvn.w	r2, #2
 c0081a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 c0081aa:	687b      	ldr	r3, [r7, #4]
 c0081ac:	2201      	movs	r2, #1
 c0081ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 c0081b0:	687b      	ldr	r3, [r7, #4]
 c0081b2:	681b      	ldr	r3, [r3, #0]
 c0081b4:	699b      	ldr	r3, [r3, #24]
 c0081b6:	f003 0303 	and.w	r3, r3, #3
 c0081ba:	2b00      	cmp	r3, #0
 c0081bc:	d003      	beq.n	c0081c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 c0081be:	6878      	ldr	r0, [r7, #4]
 c0081c0:	f000 f9d5 	bl	c00856e <HAL_TIM_IC_CaptureCallback>
 c0081c4:	e005      	b.n	c0081d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 c0081c6:	6878      	ldr	r0, [r7, #4]
 c0081c8:	f000 f9c7 	bl	c00855a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 c0081cc:	6878      	ldr	r0, [r7, #4]
 c0081ce:	f000 f9d8 	bl	c008582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c0081d2:	687b      	ldr	r3, [r7, #4]
 c0081d4:	2200      	movs	r2, #0
 c0081d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 c0081d8:	687b      	ldr	r3, [r7, #4]
 c0081da:	681b      	ldr	r3, [r3, #0]
 c0081dc:	691b      	ldr	r3, [r3, #16]
 c0081de:	f003 0304 	and.w	r3, r3, #4
 c0081e2:	2b04      	cmp	r3, #4
 c0081e4:	d122      	bne.n	c00822c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 c0081e6:	687b      	ldr	r3, [r7, #4]
 c0081e8:	681b      	ldr	r3, [r3, #0]
 c0081ea:	68db      	ldr	r3, [r3, #12]
 c0081ec:	f003 0304 	and.w	r3, r3, #4
 c0081f0:	2b04      	cmp	r3, #4
 c0081f2:	d11b      	bne.n	c00822c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 c0081f4:	687b      	ldr	r3, [r7, #4]
 c0081f6:	681b      	ldr	r3, [r3, #0]
 c0081f8:	f06f 0204 	mvn.w	r2, #4
 c0081fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 c0081fe:	687b      	ldr	r3, [r7, #4]
 c008200:	2202      	movs	r2, #2
 c008202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 c008204:	687b      	ldr	r3, [r7, #4]
 c008206:	681b      	ldr	r3, [r3, #0]
 c008208:	699b      	ldr	r3, [r3, #24]
 c00820a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c00820e:	2b00      	cmp	r3, #0
 c008210:	d003      	beq.n	c00821a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 c008212:	6878      	ldr	r0, [r7, #4]
 c008214:	f000 f9ab 	bl	c00856e <HAL_TIM_IC_CaptureCallback>
 c008218:	e005      	b.n	c008226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 c00821a:	6878      	ldr	r0, [r7, #4]
 c00821c:	f000 f99d 	bl	c00855a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 c008220:	6878      	ldr	r0, [r7, #4]
 c008222:	f000 f9ae 	bl	c008582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c008226:	687b      	ldr	r3, [r7, #4]
 c008228:	2200      	movs	r2, #0
 c00822a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 c00822c:	687b      	ldr	r3, [r7, #4]
 c00822e:	681b      	ldr	r3, [r3, #0]
 c008230:	691b      	ldr	r3, [r3, #16]
 c008232:	f003 0308 	and.w	r3, r3, #8
 c008236:	2b08      	cmp	r3, #8
 c008238:	d122      	bne.n	c008280 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 c00823a:	687b      	ldr	r3, [r7, #4]
 c00823c:	681b      	ldr	r3, [r3, #0]
 c00823e:	68db      	ldr	r3, [r3, #12]
 c008240:	f003 0308 	and.w	r3, r3, #8
 c008244:	2b08      	cmp	r3, #8
 c008246:	d11b      	bne.n	c008280 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 c008248:	687b      	ldr	r3, [r7, #4]
 c00824a:	681b      	ldr	r3, [r3, #0]
 c00824c:	f06f 0208 	mvn.w	r2, #8
 c008250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 c008252:	687b      	ldr	r3, [r7, #4]
 c008254:	2204      	movs	r2, #4
 c008256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 c008258:	687b      	ldr	r3, [r7, #4]
 c00825a:	681b      	ldr	r3, [r3, #0]
 c00825c:	69db      	ldr	r3, [r3, #28]
 c00825e:	f003 0303 	and.w	r3, r3, #3
 c008262:	2b00      	cmp	r3, #0
 c008264:	d003      	beq.n	c00826e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 c008266:	6878      	ldr	r0, [r7, #4]
 c008268:	f000 f981 	bl	c00856e <HAL_TIM_IC_CaptureCallback>
 c00826c:	e005      	b.n	c00827a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 c00826e:	6878      	ldr	r0, [r7, #4]
 c008270:	f000 f973 	bl	c00855a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 c008274:	6878      	ldr	r0, [r7, #4]
 c008276:	f000 f984 	bl	c008582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c00827a:	687b      	ldr	r3, [r7, #4]
 c00827c:	2200      	movs	r2, #0
 c00827e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 c008280:	687b      	ldr	r3, [r7, #4]
 c008282:	681b      	ldr	r3, [r3, #0]
 c008284:	691b      	ldr	r3, [r3, #16]
 c008286:	f003 0310 	and.w	r3, r3, #16
 c00828a:	2b10      	cmp	r3, #16
 c00828c:	d122      	bne.n	c0082d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 c00828e:	687b      	ldr	r3, [r7, #4]
 c008290:	681b      	ldr	r3, [r3, #0]
 c008292:	68db      	ldr	r3, [r3, #12]
 c008294:	f003 0310 	and.w	r3, r3, #16
 c008298:	2b10      	cmp	r3, #16
 c00829a:	d11b      	bne.n	c0082d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 c00829c:	687b      	ldr	r3, [r7, #4]
 c00829e:	681b      	ldr	r3, [r3, #0]
 c0082a0:	f06f 0210 	mvn.w	r2, #16
 c0082a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 c0082a6:	687b      	ldr	r3, [r7, #4]
 c0082a8:	2208      	movs	r2, #8
 c0082aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 c0082ac:	687b      	ldr	r3, [r7, #4]
 c0082ae:	681b      	ldr	r3, [r3, #0]
 c0082b0:	69db      	ldr	r3, [r3, #28]
 c0082b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c0082b6:	2b00      	cmp	r3, #0
 c0082b8:	d003      	beq.n	c0082c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 c0082ba:	6878      	ldr	r0, [r7, #4]
 c0082bc:	f000 f957 	bl	c00856e <HAL_TIM_IC_CaptureCallback>
 c0082c0:	e005      	b.n	c0082ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 c0082c2:	6878      	ldr	r0, [r7, #4]
 c0082c4:	f000 f949 	bl	c00855a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 c0082c8:	6878      	ldr	r0, [r7, #4]
 c0082ca:	f000 f95a 	bl	c008582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c0082ce:	687b      	ldr	r3, [r7, #4]
 c0082d0:	2200      	movs	r2, #0
 c0082d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 c0082d4:	687b      	ldr	r3, [r7, #4]
 c0082d6:	681b      	ldr	r3, [r3, #0]
 c0082d8:	691b      	ldr	r3, [r3, #16]
 c0082da:	f003 0301 	and.w	r3, r3, #1
 c0082de:	2b01      	cmp	r3, #1
 c0082e0:	d10e      	bne.n	c008300 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 c0082e2:	687b      	ldr	r3, [r7, #4]
 c0082e4:	681b      	ldr	r3, [r3, #0]
 c0082e6:	68db      	ldr	r3, [r3, #12]
 c0082e8:	f003 0301 	and.w	r3, r3, #1
 c0082ec:	2b01      	cmp	r3, #1
 c0082ee:	d107      	bne.n	c008300 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 c0082f0:	687b      	ldr	r3, [r7, #4]
 c0082f2:	681b      	ldr	r3, [r3, #0]
 c0082f4:	f06f 0201 	mvn.w	r2, #1
 c0082f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 c0082fa:	6878      	ldr	r0, [r7, #4]
 c0082fc:	f000 f923 	bl	c008546 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 c008300:	687b      	ldr	r3, [r7, #4]
 c008302:	681b      	ldr	r3, [r3, #0]
 c008304:	691b      	ldr	r3, [r3, #16]
 c008306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c00830a:	2b80      	cmp	r3, #128	; 0x80
 c00830c:	d10e      	bne.n	c00832c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 c00830e:	687b      	ldr	r3, [r7, #4]
 c008310:	681b      	ldr	r3, [r3, #0]
 c008312:	68db      	ldr	r3, [r3, #12]
 c008314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c008318:	2b80      	cmp	r3, #128	; 0x80
 c00831a:	d107      	bne.n	c00832c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 c00831c:	687b      	ldr	r3, [r7, #4]
 c00831e:	681b      	ldr	r3, [r3, #0]
 c008320:	f06f 0280 	mvn.w	r2, #128	; 0x80
 c008324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 c008326:	6878      	ldr	r0, [r7, #4]
 c008328:	f000 fb08 	bl	c00893c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 c00832c:	687b      	ldr	r3, [r7, #4]
 c00832e:	681b      	ldr	r3, [r3, #0]
 c008330:	691b      	ldr	r3, [r3, #16]
 c008332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c008336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c00833a:	d10e      	bne.n	c00835a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 c00833c:	687b      	ldr	r3, [r7, #4]
 c00833e:	681b      	ldr	r3, [r3, #0]
 c008340:	68db      	ldr	r3, [r3, #12]
 c008342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c008346:	2b80      	cmp	r3, #128	; 0x80
 c008348:	d107      	bne.n	c00835a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 c00834a:	687b      	ldr	r3, [r7, #4]
 c00834c:	681b      	ldr	r3, [r3, #0]
 c00834e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 c008352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 c008354:	6878      	ldr	r0, [r7, #4]
 c008356:	f000 fafb 	bl	c008950 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 c00835a:	687b      	ldr	r3, [r7, #4]
 c00835c:	681b      	ldr	r3, [r3, #0]
 c00835e:	691b      	ldr	r3, [r3, #16]
 c008360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c008364:	2b40      	cmp	r3, #64	; 0x40
 c008366:	d10e      	bne.n	c008386 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 c008368:	687b      	ldr	r3, [r7, #4]
 c00836a:	681b      	ldr	r3, [r3, #0]
 c00836c:	68db      	ldr	r3, [r3, #12]
 c00836e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c008372:	2b40      	cmp	r3, #64	; 0x40
 c008374:	d107      	bne.n	c008386 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 c008376:	687b      	ldr	r3, [r7, #4]
 c008378:	681b      	ldr	r3, [r3, #0]
 c00837a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 c00837e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 c008380:	6878      	ldr	r0, [r7, #4]
 c008382:	f000 f908 	bl	c008596 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 c008386:	687b      	ldr	r3, [r7, #4]
 c008388:	681b      	ldr	r3, [r3, #0]
 c00838a:	691b      	ldr	r3, [r3, #16]
 c00838c:	f003 0320 	and.w	r3, r3, #32
 c008390:	2b20      	cmp	r3, #32
 c008392:	d10e      	bne.n	c0083b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 c008394:	687b      	ldr	r3, [r7, #4]
 c008396:	681b      	ldr	r3, [r3, #0]
 c008398:	68db      	ldr	r3, [r3, #12]
 c00839a:	f003 0320 	and.w	r3, r3, #32
 c00839e:	2b20      	cmp	r3, #32
 c0083a0:	d107      	bne.n	c0083b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 c0083a2:	687b      	ldr	r3, [r7, #4]
 c0083a4:	681b      	ldr	r3, [r3, #0]
 c0083a6:	f06f 0220 	mvn.w	r2, #32
 c0083aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 c0083ac:	6878      	ldr	r0, [r7, #4]
 c0083ae:	f000 fabb 	bl	c008928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 c0083b2:	bf00      	nop
 c0083b4:	3708      	adds	r7, #8
 c0083b6:	46bd      	mov	sp, r7
 c0083b8:	bd80      	pop	{r7, pc}

0c0083ba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 c0083ba:	b580      	push	{r7, lr}
 c0083bc:	b084      	sub	sp, #16
 c0083be:	af00      	add	r7, sp, #0
 c0083c0:	6078      	str	r0, [r7, #4]
 c0083c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 c0083c4:	687b      	ldr	r3, [r7, #4]
 c0083c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 c0083ca:	2b01      	cmp	r3, #1
 c0083cc:	d101      	bne.n	c0083d2 <HAL_TIM_ConfigClockSource+0x18>
 c0083ce:	2302      	movs	r3, #2
 c0083d0:	e0b5      	b.n	c00853e <HAL_TIM_ConfigClockSource+0x184>
 c0083d2:	687b      	ldr	r3, [r7, #4]
 c0083d4:	2201      	movs	r2, #1
 c0083d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 c0083da:	687b      	ldr	r3, [r7, #4]
 c0083dc:	2202      	movs	r2, #2
 c0083de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 c0083e2:	687b      	ldr	r3, [r7, #4]
 c0083e4:	681b      	ldr	r3, [r3, #0]
 c0083e6:	689b      	ldr	r3, [r3, #8]
 c0083e8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 c0083ea:	68fb      	ldr	r3, [r7, #12]
 c0083ec:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 c0083f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 c0083f4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 c0083f6:	68fb      	ldr	r3, [r7, #12]
 c0083f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 c0083fc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 c0083fe:	687b      	ldr	r3, [r7, #4]
 c008400:	681b      	ldr	r3, [r3, #0]
 c008402:	68fa      	ldr	r2, [r7, #12]
 c008404:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 c008406:	683b      	ldr	r3, [r7, #0]
 c008408:	681b      	ldr	r3, [r3, #0]
 c00840a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c00840e:	d03e      	beq.n	c00848e <HAL_TIM_ConfigClockSource+0xd4>
 c008410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c008414:	f200 8087 	bhi.w	c008526 <HAL_TIM_ConfigClockSource+0x16c>
 c008418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c00841c:	f000 8085 	beq.w	c00852a <HAL_TIM_ConfigClockSource+0x170>
 c008420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c008424:	d87f      	bhi.n	c008526 <HAL_TIM_ConfigClockSource+0x16c>
 c008426:	2b70      	cmp	r3, #112	; 0x70
 c008428:	d01a      	beq.n	c008460 <HAL_TIM_ConfigClockSource+0xa6>
 c00842a:	2b70      	cmp	r3, #112	; 0x70
 c00842c:	d87b      	bhi.n	c008526 <HAL_TIM_ConfigClockSource+0x16c>
 c00842e:	2b60      	cmp	r3, #96	; 0x60
 c008430:	d050      	beq.n	c0084d4 <HAL_TIM_ConfigClockSource+0x11a>
 c008432:	2b60      	cmp	r3, #96	; 0x60
 c008434:	d877      	bhi.n	c008526 <HAL_TIM_ConfigClockSource+0x16c>
 c008436:	2b50      	cmp	r3, #80	; 0x50
 c008438:	d03c      	beq.n	c0084b4 <HAL_TIM_ConfigClockSource+0xfa>
 c00843a:	2b50      	cmp	r3, #80	; 0x50
 c00843c:	d873      	bhi.n	c008526 <HAL_TIM_ConfigClockSource+0x16c>
 c00843e:	2b40      	cmp	r3, #64	; 0x40
 c008440:	d058      	beq.n	c0084f4 <HAL_TIM_ConfigClockSource+0x13a>
 c008442:	2b40      	cmp	r3, #64	; 0x40
 c008444:	d86f      	bhi.n	c008526 <HAL_TIM_ConfigClockSource+0x16c>
 c008446:	2b30      	cmp	r3, #48	; 0x30
 c008448:	d064      	beq.n	c008514 <HAL_TIM_ConfigClockSource+0x15a>
 c00844a:	2b30      	cmp	r3, #48	; 0x30
 c00844c:	d86b      	bhi.n	c008526 <HAL_TIM_ConfigClockSource+0x16c>
 c00844e:	2b20      	cmp	r3, #32
 c008450:	d060      	beq.n	c008514 <HAL_TIM_ConfigClockSource+0x15a>
 c008452:	2b20      	cmp	r3, #32
 c008454:	d867      	bhi.n	c008526 <HAL_TIM_ConfigClockSource+0x16c>
 c008456:	2b00      	cmp	r3, #0
 c008458:	d05c      	beq.n	c008514 <HAL_TIM_ConfigClockSource+0x15a>
 c00845a:	2b10      	cmp	r3, #16
 c00845c:	d05a      	beq.n	c008514 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 c00845e:	e062      	b.n	c008526 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 c008460:	687b      	ldr	r3, [r7, #4]
 c008462:	6818      	ldr	r0, [r3, #0]
 c008464:	683b      	ldr	r3, [r7, #0]
 c008466:	6899      	ldr	r1, [r3, #8]
 c008468:	683b      	ldr	r3, [r7, #0]
 c00846a:	685a      	ldr	r2, [r3, #4]
 c00846c:	683b      	ldr	r3, [r7, #0]
 c00846e:	68db      	ldr	r3, [r3, #12]
 c008470:	f000 f9b2 	bl	c0087d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 c008474:	687b      	ldr	r3, [r7, #4]
 c008476:	681b      	ldr	r3, [r3, #0]
 c008478:	689b      	ldr	r3, [r3, #8]
 c00847a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 c00847c:	68fb      	ldr	r3, [r7, #12]
 c00847e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 c008482:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 c008484:	687b      	ldr	r3, [r7, #4]
 c008486:	681b      	ldr	r3, [r3, #0]
 c008488:	68fa      	ldr	r2, [r7, #12]
 c00848a:	609a      	str	r2, [r3, #8]
      break;
 c00848c:	e04e      	b.n	c00852c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 c00848e:	687b      	ldr	r3, [r7, #4]
 c008490:	6818      	ldr	r0, [r3, #0]
 c008492:	683b      	ldr	r3, [r7, #0]
 c008494:	6899      	ldr	r1, [r3, #8]
 c008496:	683b      	ldr	r3, [r7, #0]
 c008498:	685a      	ldr	r2, [r3, #4]
 c00849a:	683b      	ldr	r3, [r7, #0]
 c00849c:	68db      	ldr	r3, [r3, #12]
 c00849e:	f000 f99b 	bl	c0087d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 c0084a2:	687b      	ldr	r3, [r7, #4]
 c0084a4:	681b      	ldr	r3, [r3, #0]
 c0084a6:	689a      	ldr	r2, [r3, #8]
 c0084a8:	687b      	ldr	r3, [r7, #4]
 c0084aa:	681b      	ldr	r3, [r3, #0]
 c0084ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 c0084b0:	609a      	str	r2, [r3, #8]
      break;
 c0084b2:	e03b      	b.n	c00852c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 c0084b4:	687b      	ldr	r3, [r7, #4]
 c0084b6:	6818      	ldr	r0, [r3, #0]
 c0084b8:	683b      	ldr	r3, [r7, #0]
 c0084ba:	6859      	ldr	r1, [r3, #4]
 c0084bc:	683b      	ldr	r3, [r7, #0]
 c0084be:	68db      	ldr	r3, [r3, #12]
 c0084c0:	461a      	mov	r2, r3
 c0084c2:	f000 f90d 	bl	c0086e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 c0084c6:	687b      	ldr	r3, [r7, #4]
 c0084c8:	681b      	ldr	r3, [r3, #0]
 c0084ca:	2150      	movs	r1, #80	; 0x50
 c0084cc:	4618      	mov	r0, r3
 c0084ce:	f000 f966 	bl	c00879e <TIM_ITRx_SetConfig>
      break;
 c0084d2:	e02b      	b.n	c00852c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 c0084d4:	687b      	ldr	r3, [r7, #4]
 c0084d6:	6818      	ldr	r0, [r3, #0]
 c0084d8:	683b      	ldr	r3, [r7, #0]
 c0084da:	6859      	ldr	r1, [r3, #4]
 c0084dc:	683b      	ldr	r3, [r7, #0]
 c0084de:	68db      	ldr	r3, [r3, #12]
 c0084e0:	461a      	mov	r2, r3
 c0084e2:	f000 f92c 	bl	c00873e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 c0084e6:	687b      	ldr	r3, [r7, #4]
 c0084e8:	681b      	ldr	r3, [r3, #0]
 c0084ea:	2160      	movs	r1, #96	; 0x60
 c0084ec:	4618      	mov	r0, r3
 c0084ee:	f000 f956 	bl	c00879e <TIM_ITRx_SetConfig>
      break;
 c0084f2:	e01b      	b.n	c00852c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 c0084f4:	687b      	ldr	r3, [r7, #4]
 c0084f6:	6818      	ldr	r0, [r3, #0]
 c0084f8:	683b      	ldr	r3, [r7, #0]
 c0084fa:	6859      	ldr	r1, [r3, #4]
 c0084fc:	683b      	ldr	r3, [r7, #0]
 c0084fe:	68db      	ldr	r3, [r3, #12]
 c008500:	461a      	mov	r2, r3
 c008502:	f000 f8ed 	bl	c0086e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 c008506:	687b      	ldr	r3, [r7, #4]
 c008508:	681b      	ldr	r3, [r3, #0]
 c00850a:	2140      	movs	r1, #64	; 0x40
 c00850c:	4618      	mov	r0, r3
 c00850e:	f000 f946 	bl	c00879e <TIM_ITRx_SetConfig>
      break;
 c008512:	e00b      	b.n	c00852c <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 c008514:	687b      	ldr	r3, [r7, #4]
 c008516:	681a      	ldr	r2, [r3, #0]
 c008518:	683b      	ldr	r3, [r7, #0]
 c00851a:	681b      	ldr	r3, [r3, #0]
 c00851c:	4619      	mov	r1, r3
 c00851e:	4610      	mov	r0, r2
 c008520:	f000 f93d 	bl	c00879e <TIM_ITRx_SetConfig>
        break;
 c008524:	e002      	b.n	c00852c <HAL_TIM_ConfigClockSource+0x172>
      break;
 c008526:	bf00      	nop
 c008528:	e000      	b.n	c00852c <HAL_TIM_ConfigClockSource+0x172>
      break;
 c00852a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 c00852c:	687b      	ldr	r3, [r7, #4]
 c00852e:	2201      	movs	r2, #1
 c008530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 c008534:	687b      	ldr	r3, [r7, #4]
 c008536:	2200      	movs	r2, #0
 c008538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 c00853c:	2300      	movs	r3, #0
}
 c00853e:	4618      	mov	r0, r3
 c008540:	3710      	adds	r7, #16
 c008542:	46bd      	mov	sp, r7
 c008544:	bd80      	pop	{r7, pc}

0c008546 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 c008546:	b480      	push	{r7}
 c008548:	b083      	sub	sp, #12
 c00854a:	af00      	add	r7, sp, #0
 c00854c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 c00854e:	bf00      	nop
 c008550:	370c      	adds	r7, #12
 c008552:	46bd      	mov	sp, r7
 c008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008558:	4770      	bx	lr

0c00855a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 c00855a:	b480      	push	{r7}
 c00855c:	b083      	sub	sp, #12
 c00855e:	af00      	add	r7, sp, #0
 c008560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 c008562:	bf00      	nop
 c008564:	370c      	adds	r7, #12
 c008566:	46bd      	mov	sp, r7
 c008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00856c:	4770      	bx	lr

0c00856e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 c00856e:	b480      	push	{r7}
 c008570:	b083      	sub	sp, #12
 c008572:	af00      	add	r7, sp, #0
 c008574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 c008576:	bf00      	nop
 c008578:	370c      	adds	r7, #12
 c00857a:	46bd      	mov	sp, r7
 c00857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008580:	4770      	bx	lr

0c008582 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 c008582:	b480      	push	{r7}
 c008584:	b083      	sub	sp, #12
 c008586:	af00      	add	r7, sp, #0
 c008588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 c00858a:	bf00      	nop
 c00858c:	370c      	adds	r7, #12
 c00858e:	46bd      	mov	sp, r7
 c008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008594:	4770      	bx	lr

0c008596 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 c008596:	b480      	push	{r7}
 c008598:	b083      	sub	sp, #12
 c00859a:	af00      	add	r7, sp, #0
 c00859c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 c00859e:	bf00      	nop
 c0085a0:	370c      	adds	r7, #12
 c0085a2:	46bd      	mov	sp, r7
 c0085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0085a8:	4770      	bx	lr
	...

0c0085ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 c0085ac:	b480      	push	{r7}
 c0085ae:	b085      	sub	sp, #20
 c0085b0:	af00      	add	r7, sp, #0
 c0085b2:	6078      	str	r0, [r7, #4]
 c0085b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 c0085b6:	687b      	ldr	r3, [r7, #4]
 c0085b8:	681b      	ldr	r3, [r3, #0]
 c0085ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 c0085bc:	687b      	ldr	r3, [r7, #4]
 c0085be:	4a40      	ldr	r2, [pc, #256]	; (c0086c0 <TIM_Base_SetConfig+0x114>)
 c0085c0:	4293      	cmp	r3, r2
 c0085c2:	d013      	beq.n	c0085ec <TIM_Base_SetConfig+0x40>
 c0085c4:	687b      	ldr	r3, [r7, #4]
 c0085c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c0085ca:	d00f      	beq.n	c0085ec <TIM_Base_SetConfig+0x40>
 c0085cc:	687b      	ldr	r3, [r7, #4]
 c0085ce:	4a3d      	ldr	r2, [pc, #244]	; (c0086c4 <TIM_Base_SetConfig+0x118>)
 c0085d0:	4293      	cmp	r3, r2
 c0085d2:	d00b      	beq.n	c0085ec <TIM_Base_SetConfig+0x40>
 c0085d4:	687b      	ldr	r3, [r7, #4]
 c0085d6:	4a3c      	ldr	r2, [pc, #240]	; (c0086c8 <TIM_Base_SetConfig+0x11c>)
 c0085d8:	4293      	cmp	r3, r2
 c0085da:	d007      	beq.n	c0085ec <TIM_Base_SetConfig+0x40>
 c0085dc:	687b      	ldr	r3, [r7, #4]
 c0085de:	4a3b      	ldr	r2, [pc, #236]	; (c0086cc <TIM_Base_SetConfig+0x120>)
 c0085e0:	4293      	cmp	r3, r2
 c0085e2:	d003      	beq.n	c0085ec <TIM_Base_SetConfig+0x40>
 c0085e4:	687b      	ldr	r3, [r7, #4]
 c0085e6:	4a3a      	ldr	r2, [pc, #232]	; (c0086d0 <TIM_Base_SetConfig+0x124>)
 c0085e8:	4293      	cmp	r3, r2
 c0085ea:	d108      	bne.n	c0085fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 c0085ec:	68fb      	ldr	r3, [r7, #12]
 c0085ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 c0085f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 c0085f4:	683b      	ldr	r3, [r7, #0]
 c0085f6:	685b      	ldr	r3, [r3, #4]
 c0085f8:	68fa      	ldr	r2, [r7, #12]
 c0085fa:	4313      	orrs	r3, r2
 c0085fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 c0085fe:	687b      	ldr	r3, [r7, #4]
 c008600:	4a2f      	ldr	r2, [pc, #188]	; (c0086c0 <TIM_Base_SetConfig+0x114>)
 c008602:	4293      	cmp	r3, r2
 c008604:	d01f      	beq.n	c008646 <TIM_Base_SetConfig+0x9a>
 c008606:	687b      	ldr	r3, [r7, #4]
 c008608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c00860c:	d01b      	beq.n	c008646 <TIM_Base_SetConfig+0x9a>
 c00860e:	687b      	ldr	r3, [r7, #4]
 c008610:	4a2c      	ldr	r2, [pc, #176]	; (c0086c4 <TIM_Base_SetConfig+0x118>)
 c008612:	4293      	cmp	r3, r2
 c008614:	d017      	beq.n	c008646 <TIM_Base_SetConfig+0x9a>
 c008616:	687b      	ldr	r3, [r7, #4]
 c008618:	4a2b      	ldr	r2, [pc, #172]	; (c0086c8 <TIM_Base_SetConfig+0x11c>)
 c00861a:	4293      	cmp	r3, r2
 c00861c:	d013      	beq.n	c008646 <TIM_Base_SetConfig+0x9a>
 c00861e:	687b      	ldr	r3, [r7, #4]
 c008620:	4a2a      	ldr	r2, [pc, #168]	; (c0086cc <TIM_Base_SetConfig+0x120>)
 c008622:	4293      	cmp	r3, r2
 c008624:	d00f      	beq.n	c008646 <TIM_Base_SetConfig+0x9a>
 c008626:	687b      	ldr	r3, [r7, #4]
 c008628:	4a29      	ldr	r2, [pc, #164]	; (c0086d0 <TIM_Base_SetConfig+0x124>)
 c00862a:	4293      	cmp	r3, r2
 c00862c:	d00b      	beq.n	c008646 <TIM_Base_SetConfig+0x9a>
 c00862e:	687b      	ldr	r3, [r7, #4]
 c008630:	4a28      	ldr	r2, [pc, #160]	; (c0086d4 <TIM_Base_SetConfig+0x128>)
 c008632:	4293      	cmp	r3, r2
 c008634:	d007      	beq.n	c008646 <TIM_Base_SetConfig+0x9a>
 c008636:	687b      	ldr	r3, [r7, #4]
 c008638:	4a27      	ldr	r2, [pc, #156]	; (c0086d8 <TIM_Base_SetConfig+0x12c>)
 c00863a:	4293      	cmp	r3, r2
 c00863c:	d003      	beq.n	c008646 <TIM_Base_SetConfig+0x9a>
 c00863e:	687b      	ldr	r3, [r7, #4]
 c008640:	4a26      	ldr	r2, [pc, #152]	; (c0086dc <TIM_Base_SetConfig+0x130>)
 c008642:	4293      	cmp	r3, r2
 c008644:	d108      	bne.n	c008658 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 c008646:	68fb      	ldr	r3, [r7, #12]
 c008648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c00864c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 c00864e:	683b      	ldr	r3, [r7, #0]
 c008650:	68db      	ldr	r3, [r3, #12]
 c008652:	68fa      	ldr	r2, [r7, #12]
 c008654:	4313      	orrs	r3, r2
 c008656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 c008658:	68fb      	ldr	r3, [r7, #12]
 c00865a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 c00865e:	683b      	ldr	r3, [r7, #0]
 c008660:	695b      	ldr	r3, [r3, #20]
 c008662:	4313      	orrs	r3, r2
 c008664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 c008666:	687b      	ldr	r3, [r7, #4]
 c008668:	68fa      	ldr	r2, [r7, #12]
 c00866a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 c00866c:	683b      	ldr	r3, [r7, #0]
 c00866e:	689a      	ldr	r2, [r3, #8]
 c008670:	687b      	ldr	r3, [r7, #4]
 c008672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 c008674:	683b      	ldr	r3, [r7, #0]
 c008676:	681a      	ldr	r2, [r3, #0]
 c008678:	687b      	ldr	r3, [r7, #4]
 c00867a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 c00867c:	687b      	ldr	r3, [r7, #4]
 c00867e:	4a10      	ldr	r2, [pc, #64]	; (c0086c0 <TIM_Base_SetConfig+0x114>)
 c008680:	4293      	cmp	r3, r2
 c008682:	d00f      	beq.n	c0086a4 <TIM_Base_SetConfig+0xf8>
 c008684:	687b      	ldr	r3, [r7, #4]
 c008686:	4a12      	ldr	r2, [pc, #72]	; (c0086d0 <TIM_Base_SetConfig+0x124>)
 c008688:	4293      	cmp	r3, r2
 c00868a:	d00b      	beq.n	c0086a4 <TIM_Base_SetConfig+0xf8>
 c00868c:	687b      	ldr	r3, [r7, #4]
 c00868e:	4a11      	ldr	r2, [pc, #68]	; (c0086d4 <TIM_Base_SetConfig+0x128>)
 c008690:	4293      	cmp	r3, r2
 c008692:	d007      	beq.n	c0086a4 <TIM_Base_SetConfig+0xf8>
 c008694:	687b      	ldr	r3, [r7, #4]
 c008696:	4a10      	ldr	r2, [pc, #64]	; (c0086d8 <TIM_Base_SetConfig+0x12c>)
 c008698:	4293      	cmp	r3, r2
 c00869a:	d003      	beq.n	c0086a4 <TIM_Base_SetConfig+0xf8>
 c00869c:	687b      	ldr	r3, [r7, #4]
 c00869e:	4a0f      	ldr	r2, [pc, #60]	; (c0086dc <TIM_Base_SetConfig+0x130>)
 c0086a0:	4293      	cmp	r3, r2
 c0086a2:	d103      	bne.n	c0086ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 c0086a4:	683b      	ldr	r3, [r7, #0]
 c0086a6:	691a      	ldr	r2, [r3, #16]
 c0086a8:	687b      	ldr	r3, [r7, #4]
 c0086aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 c0086ac:	687b      	ldr	r3, [r7, #4]
 c0086ae:	2201      	movs	r2, #1
 c0086b0:	615a      	str	r2, [r3, #20]
}
 c0086b2:	bf00      	nop
 c0086b4:	3714      	adds	r7, #20
 c0086b6:	46bd      	mov	sp, r7
 c0086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0086bc:	4770      	bx	lr
 c0086be:	bf00      	nop
 c0086c0:	50012c00 	.word	0x50012c00
 c0086c4:	50000400 	.word	0x50000400
 c0086c8:	50000800 	.word	0x50000800
 c0086cc:	50000c00 	.word	0x50000c00
 c0086d0:	50013400 	.word	0x50013400
 c0086d4:	50014000 	.word	0x50014000
 c0086d8:	50014400 	.word	0x50014400
 c0086dc:	50014800 	.word	0x50014800

0c0086e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 c0086e0:	b480      	push	{r7}
 c0086e2:	b087      	sub	sp, #28
 c0086e4:	af00      	add	r7, sp, #0
 c0086e6:	60f8      	str	r0, [r7, #12]
 c0086e8:	60b9      	str	r1, [r7, #8]
 c0086ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 c0086ec:	68fb      	ldr	r3, [r7, #12]
 c0086ee:	6a1b      	ldr	r3, [r3, #32]
 c0086f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 c0086f2:	68fb      	ldr	r3, [r7, #12]
 c0086f4:	6a1b      	ldr	r3, [r3, #32]
 c0086f6:	f023 0201 	bic.w	r2, r3, #1
 c0086fa:	68fb      	ldr	r3, [r7, #12]
 c0086fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 c0086fe:	68fb      	ldr	r3, [r7, #12]
 c008700:	699b      	ldr	r3, [r3, #24]
 c008702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 c008704:	693b      	ldr	r3, [r7, #16]
 c008706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c00870a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 c00870c:	687b      	ldr	r3, [r7, #4]
 c00870e:	011b      	lsls	r3, r3, #4
 c008710:	693a      	ldr	r2, [r7, #16]
 c008712:	4313      	orrs	r3, r2
 c008714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 c008716:	697b      	ldr	r3, [r7, #20]
 c008718:	f023 030a 	bic.w	r3, r3, #10
 c00871c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 c00871e:	697a      	ldr	r2, [r7, #20]
 c008720:	68bb      	ldr	r3, [r7, #8]
 c008722:	4313      	orrs	r3, r2
 c008724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 c008726:	68fb      	ldr	r3, [r7, #12]
 c008728:	693a      	ldr	r2, [r7, #16]
 c00872a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 c00872c:	68fb      	ldr	r3, [r7, #12]
 c00872e:	697a      	ldr	r2, [r7, #20]
 c008730:	621a      	str	r2, [r3, #32]
}
 c008732:	bf00      	nop
 c008734:	371c      	adds	r7, #28
 c008736:	46bd      	mov	sp, r7
 c008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00873c:	4770      	bx	lr

0c00873e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 c00873e:	b480      	push	{r7}
 c008740:	b087      	sub	sp, #28
 c008742:	af00      	add	r7, sp, #0
 c008744:	60f8      	str	r0, [r7, #12]
 c008746:	60b9      	str	r1, [r7, #8]
 c008748:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 c00874a:	68fb      	ldr	r3, [r7, #12]
 c00874c:	6a1b      	ldr	r3, [r3, #32]
 c00874e:	f023 0210 	bic.w	r2, r3, #16
 c008752:	68fb      	ldr	r3, [r7, #12]
 c008754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 c008756:	68fb      	ldr	r3, [r7, #12]
 c008758:	699b      	ldr	r3, [r3, #24]
 c00875a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 c00875c:	68fb      	ldr	r3, [r7, #12]
 c00875e:	6a1b      	ldr	r3, [r3, #32]
 c008760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 c008762:	697b      	ldr	r3, [r7, #20]
 c008764:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 c008768:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 c00876a:	687b      	ldr	r3, [r7, #4]
 c00876c:	031b      	lsls	r3, r3, #12
 c00876e:	697a      	ldr	r2, [r7, #20]
 c008770:	4313      	orrs	r3, r2
 c008772:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 c008774:	693b      	ldr	r3, [r7, #16]
 c008776:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 c00877a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 c00877c:	68bb      	ldr	r3, [r7, #8]
 c00877e:	011b      	lsls	r3, r3, #4
 c008780:	693a      	ldr	r2, [r7, #16]
 c008782:	4313      	orrs	r3, r2
 c008784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 c008786:	68fb      	ldr	r3, [r7, #12]
 c008788:	697a      	ldr	r2, [r7, #20]
 c00878a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 c00878c:	68fb      	ldr	r3, [r7, #12]
 c00878e:	693a      	ldr	r2, [r7, #16]
 c008790:	621a      	str	r2, [r3, #32]
}
 c008792:	bf00      	nop
 c008794:	371c      	adds	r7, #28
 c008796:	46bd      	mov	sp, r7
 c008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00879c:	4770      	bx	lr

0c00879e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 c00879e:	b480      	push	{r7}
 c0087a0:	b085      	sub	sp, #20
 c0087a2:	af00      	add	r7, sp, #0
 c0087a4:	6078      	str	r0, [r7, #4]
 c0087a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 c0087a8:	687b      	ldr	r3, [r7, #4]
 c0087aa:	689b      	ldr	r3, [r3, #8]
 c0087ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 c0087ae:	68fb      	ldr	r3, [r7, #12]
 c0087b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 c0087b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 c0087b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 c0087ba:	683a      	ldr	r2, [r7, #0]
 c0087bc:	68fb      	ldr	r3, [r7, #12]
 c0087be:	4313      	orrs	r3, r2
 c0087c0:	f043 0307 	orr.w	r3, r3, #7
 c0087c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 c0087c6:	687b      	ldr	r3, [r7, #4]
 c0087c8:	68fa      	ldr	r2, [r7, #12]
 c0087ca:	609a      	str	r2, [r3, #8]
}
 c0087cc:	bf00      	nop
 c0087ce:	3714      	adds	r7, #20
 c0087d0:	46bd      	mov	sp, r7
 c0087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0087d6:	4770      	bx	lr

0c0087d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 c0087d8:	b480      	push	{r7}
 c0087da:	b087      	sub	sp, #28
 c0087dc:	af00      	add	r7, sp, #0
 c0087de:	60f8      	str	r0, [r7, #12]
 c0087e0:	60b9      	str	r1, [r7, #8]
 c0087e2:	607a      	str	r2, [r7, #4]
 c0087e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 c0087e6:	68fb      	ldr	r3, [r7, #12]
 c0087e8:	689b      	ldr	r3, [r3, #8]
 c0087ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 c0087ec:	697b      	ldr	r3, [r7, #20]
 c0087ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 c0087f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 c0087f4:	683b      	ldr	r3, [r7, #0]
 c0087f6:	021a      	lsls	r2, r3, #8
 c0087f8:	687b      	ldr	r3, [r7, #4]
 c0087fa:	431a      	orrs	r2, r3
 c0087fc:	68bb      	ldr	r3, [r7, #8]
 c0087fe:	4313      	orrs	r3, r2
 c008800:	697a      	ldr	r2, [r7, #20]
 c008802:	4313      	orrs	r3, r2
 c008804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 c008806:	68fb      	ldr	r3, [r7, #12]
 c008808:	697a      	ldr	r2, [r7, #20]
 c00880a:	609a      	str	r2, [r3, #8]
}
 c00880c:	bf00      	nop
 c00880e:	371c      	adds	r7, #28
 c008810:	46bd      	mov	sp, r7
 c008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008816:	4770      	bx	lr

0c008818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 c008818:	b480      	push	{r7}
 c00881a:	b085      	sub	sp, #20
 c00881c:	af00      	add	r7, sp, #0
 c00881e:	6078      	str	r0, [r7, #4]
 c008820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 c008822:	687b      	ldr	r3, [r7, #4]
 c008824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 c008828:	2b01      	cmp	r3, #1
 c00882a:	d101      	bne.n	c008830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 c00882c:	2302      	movs	r3, #2
 c00882e:	e068      	b.n	c008902 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 c008830:	687b      	ldr	r3, [r7, #4]
 c008832:	2201      	movs	r2, #1
 c008834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 c008838:	687b      	ldr	r3, [r7, #4]
 c00883a:	2202      	movs	r2, #2
 c00883c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 c008840:	687b      	ldr	r3, [r7, #4]
 c008842:	681b      	ldr	r3, [r3, #0]
 c008844:	685b      	ldr	r3, [r3, #4]
 c008846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 c008848:	687b      	ldr	r3, [r7, #4]
 c00884a:	681b      	ldr	r3, [r3, #0]
 c00884c:	689b      	ldr	r3, [r3, #8]
 c00884e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 c008850:	687b      	ldr	r3, [r7, #4]
 c008852:	681b      	ldr	r3, [r3, #0]
 c008854:	4a2e      	ldr	r2, [pc, #184]	; (c008910 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 c008856:	4293      	cmp	r3, r2
 c008858:	d004      	beq.n	c008864 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 c00885a:	687b      	ldr	r3, [r7, #4]
 c00885c:	681b      	ldr	r3, [r3, #0]
 c00885e:	4a2d      	ldr	r2, [pc, #180]	; (c008914 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 c008860:	4293      	cmp	r3, r2
 c008862:	d108      	bne.n	c008876 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 c008864:	68fb      	ldr	r3, [r7, #12]
 c008866:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 c00886a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 c00886c:	683b      	ldr	r3, [r7, #0]
 c00886e:	685b      	ldr	r3, [r3, #4]
 c008870:	68fa      	ldr	r2, [r7, #12]
 c008872:	4313      	orrs	r3, r2
 c008874:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 c008876:	68fb      	ldr	r3, [r7, #12]
 c008878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 c00887c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 c00887e:	683b      	ldr	r3, [r7, #0]
 c008880:	681b      	ldr	r3, [r3, #0]
 c008882:	68fa      	ldr	r2, [r7, #12]
 c008884:	4313      	orrs	r3, r2
 c008886:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 c008888:	687b      	ldr	r3, [r7, #4]
 c00888a:	681b      	ldr	r3, [r3, #0]
 c00888c:	68fa      	ldr	r2, [r7, #12]
 c00888e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 c008890:	687b      	ldr	r3, [r7, #4]
 c008892:	681b      	ldr	r3, [r3, #0]
 c008894:	4a1e      	ldr	r2, [pc, #120]	; (c008910 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 c008896:	4293      	cmp	r3, r2
 c008898:	d01d      	beq.n	c0088d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c00889a:	687b      	ldr	r3, [r7, #4]
 c00889c:	681b      	ldr	r3, [r3, #0]
 c00889e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c0088a2:	d018      	beq.n	c0088d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c0088a4:	687b      	ldr	r3, [r7, #4]
 c0088a6:	681b      	ldr	r3, [r3, #0]
 c0088a8:	4a1b      	ldr	r2, [pc, #108]	; (c008918 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 c0088aa:	4293      	cmp	r3, r2
 c0088ac:	d013      	beq.n	c0088d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c0088ae:	687b      	ldr	r3, [r7, #4]
 c0088b0:	681b      	ldr	r3, [r3, #0]
 c0088b2:	4a1a      	ldr	r2, [pc, #104]	; (c00891c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 c0088b4:	4293      	cmp	r3, r2
 c0088b6:	d00e      	beq.n	c0088d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c0088b8:	687b      	ldr	r3, [r7, #4]
 c0088ba:	681b      	ldr	r3, [r3, #0]
 c0088bc:	4a18      	ldr	r2, [pc, #96]	; (c008920 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 c0088be:	4293      	cmp	r3, r2
 c0088c0:	d009      	beq.n	c0088d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c0088c2:	687b      	ldr	r3, [r7, #4]
 c0088c4:	681b      	ldr	r3, [r3, #0]
 c0088c6:	4a13      	ldr	r2, [pc, #76]	; (c008914 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 c0088c8:	4293      	cmp	r3, r2
 c0088ca:	d004      	beq.n	c0088d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c0088cc:	687b      	ldr	r3, [r7, #4]
 c0088ce:	681b      	ldr	r3, [r3, #0]
 c0088d0:	4a14      	ldr	r2, [pc, #80]	; (c008924 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 c0088d2:	4293      	cmp	r3, r2
 c0088d4:	d10c      	bne.n	c0088f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 c0088d6:	68bb      	ldr	r3, [r7, #8]
 c0088d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c0088dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 c0088de:	683b      	ldr	r3, [r7, #0]
 c0088e0:	689b      	ldr	r3, [r3, #8]
 c0088e2:	68ba      	ldr	r2, [r7, #8]
 c0088e4:	4313      	orrs	r3, r2
 c0088e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 c0088e8:	687b      	ldr	r3, [r7, #4]
 c0088ea:	681b      	ldr	r3, [r3, #0]
 c0088ec:	68ba      	ldr	r2, [r7, #8]
 c0088ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 c0088f0:	687b      	ldr	r3, [r7, #4]
 c0088f2:	2201      	movs	r2, #1
 c0088f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 c0088f8:	687b      	ldr	r3, [r7, #4]
 c0088fa:	2200      	movs	r2, #0
 c0088fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 c008900:	2300      	movs	r3, #0
}
 c008902:	4618      	mov	r0, r3
 c008904:	3714      	adds	r7, #20
 c008906:	46bd      	mov	sp, r7
 c008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00890c:	4770      	bx	lr
 c00890e:	bf00      	nop
 c008910:	50012c00 	.word	0x50012c00
 c008914:	50013400 	.word	0x50013400
 c008918:	50000400 	.word	0x50000400
 c00891c:	50000800 	.word	0x50000800
 c008920:	50000c00 	.word	0x50000c00
 c008924:	50014000 	.word	0x50014000

0c008928 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 c008928:	b480      	push	{r7}
 c00892a:	b083      	sub	sp, #12
 c00892c:	af00      	add	r7, sp, #0
 c00892e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 c008930:	bf00      	nop
 c008932:	370c      	adds	r7, #12
 c008934:	46bd      	mov	sp, r7
 c008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00893a:	4770      	bx	lr

0c00893c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 c00893c:	b480      	push	{r7}
 c00893e:	b083      	sub	sp, #12
 c008940:	af00      	add	r7, sp, #0
 c008942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 c008944:	bf00      	nop
 c008946:	370c      	adds	r7, #12
 c008948:	46bd      	mov	sp, r7
 c00894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00894e:	4770      	bx	lr

0c008950 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 c008950:	b480      	push	{r7}
 c008952:	b083      	sub	sp, #12
 c008954:	af00      	add	r7, sp, #0
 c008956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 c008958:	bf00      	nop
 c00895a:	370c      	adds	r7, #12
 c00895c:	46bd      	mov	sp, r7
 c00895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008962:	4770      	bx	lr

0c008964 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 c008964:	b580      	push	{r7, lr}
 c008966:	b082      	sub	sp, #8
 c008968:	af00      	add	r7, sp, #0
 c00896a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 c00896c:	687b      	ldr	r3, [r7, #4]
 c00896e:	2b00      	cmp	r3, #0
 c008970:	d101      	bne.n	c008976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 c008972:	2301      	movs	r3, #1
 c008974:	e042      	b.n	c0089fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 c008976:	687b      	ldr	r3, [r7, #4]
 c008978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c00897c:	2b00      	cmp	r3, #0
 c00897e:	d106      	bne.n	c00898e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 c008980:	687b      	ldr	r3, [r7, #4]
 c008982:	2200      	movs	r2, #0
 c008984:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 c008988:	6878      	ldr	r0, [r7, #4]
 c00898a:	f7fc fd59 	bl	c005440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 c00898e:	687b      	ldr	r3, [r7, #4]
 c008990:	2224      	movs	r2, #36	; 0x24
 c008992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 c008996:	687b      	ldr	r3, [r7, #4]
 c008998:	681b      	ldr	r3, [r3, #0]
 c00899a:	681a      	ldr	r2, [r3, #0]
 c00899c:	687b      	ldr	r3, [r7, #4]
 c00899e:	681b      	ldr	r3, [r3, #0]
 c0089a0:	f022 0201 	bic.w	r2, r2, #1
 c0089a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 c0089a6:	6878      	ldr	r0, [r7, #4]
 c0089a8:	f000 f996 	bl	c008cd8 <UART_SetConfig>
 c0089ac:	4603      	mov	r3, r0
 c0089ae:	2b01      	cmp	r3, #1
 c0089b0:	d101      	bne.n	c0089b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 c0089b2:	2301      	movs	r3, #1
 c0089b4:	e022      	b.n	c0089fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c0089b6:	687b      	ldr	r3, [r7, #4]
 c0089b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0089ba:	2b00      	cmp	r3, #0
 c0089bc:	d002      	beq.n	c0089c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 c0089be:	6878      	ldr	r0, [r7, #4]
 c0089c0:	f000 fc88 	bl	c0092d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c0089c4:	687b      	ldr	r3, [r7, #4]
 c0089c6:	681b      	ldr	r3, [r3, #0]
 c0089c8:	685a      	ldr	r2, [r3, #4]
 c0089ca:	687b      	ldr	r3, [r7, #4]
 c0089cc:	681b      	ldr	r3, [r3, #0]
 c0089ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 c0089d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c0089d4:	687b      	ldr	r3, [r7, #4]
 c0089d6:	681b      	ldr	r3, [r3, #0]
 c0089d8:	689a      	ldr	r2, [r3, #8]
 c0089da:	687b      	ldr	r3, [r7, #4]
 c0089dc:	681b      	ldr	r3, [r3, #0]
 c0089de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 c0089e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 c0089e4:	687b      	ldr	r3, [r7, #4]
 c0089e6:	681b      	ldr	r3, [r3, #0]
 c0089e8:	681a      	ldr	r2, [r3, #0]
 c0089ea:	687b      	ldr	r3, [r7, #4]
 c0089ec:	681b      	ldr	r3, [r3, #0]
 c0089ee:	f042 0201 	orr.w	r2, r2, #1
 c0089f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 c0089f4:	6878      	ldr	r0, [r7, #4]
 c0089f6:	f000 fd0f 	bl	c009418 <UART_CheckIdleState>
 c0089fa:	4603      	mov	r3, r0
}
 c0089fc:	4618      	mov	r0, r3
 c0089fe:	3708      	adds	r7, #8
 c008a00:	46bd      	mov	sp, r7
 c008a02:	bd80      	pop	{r7, pc}

0c008a04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c008a04:	b580      	push	{r7, lr}
 c008a06:	b08a      	sub	sp, #40	; 0x28
 c008a08:	af02      	add	r7, sp, #8
 c008a0a:	60f8      	str	r0, [r7, #12]
 c008a0c:	60b9      	str	r1, [r7, #8]
 c008a0e:	603b      	str	r3, [r7, #0]
 c008a10:	4613      	mov	r3, r2
 c008a12:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 c008a14:	68fb      	ldr	r3, [r7, #12]
 c008a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c008a1a:	2b20      	cmp	r3, #32
 c008a1c:	f040 8083 	bne.w	c008b26 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 c008a20:	68bb      	ldr	r3, [r7, #8]
 c008a22:	2b00      	cmp	r3, #0
 c008a24:	d002      	beq.n	c008a2c <HAL_UART_Transmit+0x28>
 c008a26:	88fb      	ldrh	r3, [r7, #6]
 c008a28:	2b00      	cmp	r3, #0
 c008a2a:	d101      	bne.n	c008a30 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 c008a2c:	2301      	movs	r3, #1
 c008a2e:	e07b      	b.n	c008b28 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 c008a30:	68fb      	ldr	r3, [r7, #12]
 c008a32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c008a36:	2b01      	cmp	r3, #1
 c008a38:	d101      	bne.n	c008a3e <HAL_UART_Transmit+0x3a>
 c008a3a:	2302      	movs	r3, #2
 c008a3c:	e074      	b.n	c008b28 <HAL_UART_Transmit+0x124>
 c008a3e:	68fb      	ldr	r3, [r7, #12]
 c008a40:	2201      	movs	r2, #1
 c008a42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c008a46:	68fb      	ldr	r3, [r7, #12]
 c008a48:	2200      	movs	r2, #0
 c008a4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c008a4e:	68fb      	ldr	r3, [r7, #12]
 c008a50:	2221      	movs	r2, #33	; 0x21
 c008a52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c008a56:	f7fc fe0f 	bl	c005678 <HAL_GetTick>
 c008a5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 c008a5c:	68fb      	ldr	r3, [r7, #12]
 c008a5e:	88fa      	ldrh	r2, [r7, #6]
 c008a60:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 c008a64:	68fb      	ldr	r3, [r7, #12]
 c008a66:	88fa      	ldrh	r2, [r7, #6]
 c008a68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c008a6c:	68fb      	ldr	r3, [r7, #12]
 c008a6e:	689b      	ldr	r3, [r3, #8]
 c008a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c008a74:	d108      	bne.n	c008a88 <HAL_UART_Transmit+0x84>
 c008a76:	68fb      	ldr	r3, [r7, #12]
 c008a78:	691b      	ldr	r3, [r3, #16]
 c008a7a:	2b00      	cmp	r3, #0
 c008a7c:	d104      	bne.n	c008a88 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 c008a7e:	2300      	movs	r3, #0
 c008a80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 c008a82:	68bb      	ldr	r3, [r7, #8]
 c008a84:	61bb      	str	r3, [r7, #24]
 c008a86:	e003      	b.n	c008a90 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 c008a88:	68bb      	ldr	r3, [r7, #8]
 c008a8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c008a8c:	2300      	movs	r3, #0
 c008a8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 c008a90:	68fb      	ldr	r3, [r7, #12]
 c008a92:	2200      	movs	r2, #0
 c008a94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 c008a98:	e02c      	b.n	c008af4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 c008a9a:	683b      	ldr	r3, [r7, #0]
 c008a9c:	9300      	str	r3, [sp, #0]
 c008a9e:	697b      	ldr	r3, [r7, #20]
 c008aa0:	2200      	movs	r2, #0
 c008aa2:	2180      	movs	r1, #128	; 0x80
 c008aa4:	68f8      	ldr	r0, [r7, #12]
 c008aa6:	f000 fd02 	bl	c0094ae <UART_WaitOnFlagUntilTimeout>
 c008aaa:	4603      	mov	r3, r0
 c008aac:	2b00      	cmp	r3, #0
 c008aae:	d001      	beq.n	c008ab4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 c008ab0:	2303      	movs	r3, #3
 c008ab2:	e039      	b.n	c008b28 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 c008ab4:	69fb      	ldr	r3, [r7, #28]
 c008ab6:	2b00      	cmp	r3, #0
 c008ab8:	d10b      	bne.n	c008ad2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 c008aba:	69bb      	ldr	r3, [r7, #24]
 c008abc:	881b      	ldrh	r3, [r3, #0]
 c008abe:	461a      	mov	r2, r3
 c008ac0:	68fb      	ldr	r3, [r7, #12]
 c008ac2:	681b      	ldr	r3, [r3, #0]
 c008ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 c008ac8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 c008aca:	69bb      	ldr	r3, [r7, #24]
 c008acc:	3302      	adds	r3, #2
 c008ace:	61bb      	str	r3, [r7, #24]
 c008ad0:	e007      	b.n	c008ae2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 c008ad2:	69fb      	ldr	r3, [r7, #28]
 c008ad4:	781a      	ldrb	r2, [r3, #0]
 c008ad6:	68fb      	ldr	r3, [r7, #12]
 c008ad8:	681b      	ldr	r3, [r3, #0]
 c008ada:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 c008adc:	69fb      	ldr	r3, [r7, #28]
 c008ade:	3301      	adds	r3, #1
 c008ae0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 c008ae2:	68fb      	ldr	r3, [r7, #12]
 c008ae4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c008ae8:	b29b      	uxth	r3, r3
 c008aea:	3b01      	subs	r3, #1
 c008aec:	b29a      	uxth	r2, r3
 c008aee:	68fb      	ldr	r3, [r7, #12]
 c008af0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 c008af4:	68fb      	ldr	r3, [r7, #12]
 c008af6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c008afa:	b29b      	uxth	r3, r3
 c008afc:	2b00      	cmp	r3, #0
 c008afe:	d1cc      	bne.n	c008a9a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 c008b00:	683b      	ldr	r3, [r7, #0]
 c008b02:	9300      	str	r3, [sp, #0]
 c008b04:	697b      	ldr	r3, [r7, #20]
 c008b06:	2200      	movs	r2, #0
 c008b08:	2140      	movs	r1, #64	; 0x40
 c008b0a:	68f8      	ldr	r0, [r7, #12]
 c008b0c:	f000 fccf 	bl	c0094ae <UART_WaitOnFlagUntilTimeout>
 c008b10:	4603      	mov	r3, r0
 c008b12:	2b00      	cmp	r3, #0
 c008b14:	d001      	beq.n	c008b1a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 c008b16:	2303      	movs	r3, #3
 c008b18:	e006      	b.n	c008b28 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 c008b1a:	68fb      	ldr	r3, [r7, #12]
 c008b1c:	2220      	movs	r2, #32
 c008b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 c008b22:	2300      	movs	r3, #0
 c008b24:	e000      	b.n	c008b28 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 c008b26:	2302      	movs	r3, #2
  }
}
 c008b28:	4618      	mov	r0, r3
 c008b2a:	3720      	adds	r7, #32
 c008b2c:	46bd      	mov	sp, r7
 c008b2e:	bd80      	pop	{r7, pc}

0c008b30 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c008b30:	b580      	push	{r7, lr}
 c008b32:	b08a      	sub	sp, #40	; 0x28
 c008b34:	af02      	add	r7, sp, #8
 c008b36:	60f8      	str	r0, [r7, #12]
 c008b38:	60b9      	str	r1, [r7, #8]
 c008b3a:	603b      	str	r3, [r7, #0]
 c008b3c:	4613      	mov	r3, r2
 c008b3e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 c008b40:	68fb      	ldr	r3, [r7, #12]
 c008b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c008b46:	2b20      	cmp	r3, #32
 c008b48:	f040 80c0 	bne.w	c008ccc <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 c008b4c:	68bb      	ldr	r3, [r7, #8]
 c008b4e:	2b00      	cmp	r3, #0
 c008b50:	d002      	beq.n	c008b58 <HAL_UART_Receive+0x28>
 c008b52:	88fb      	ldrh	r3, [r7, #6]
 c008b54:	2b00      	cmp	r3, #0
 c008b56:	d101      	bne.n	c008b5c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 c008b58:	2301      	movs	r3, #1
 c008b5a:	e0b8      	b.n	c008cce <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 c008b5c:	68fb      	ldr	r3, [r7, #12]
 c008b5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c008b62:	2b01      	cmp	r3, #1
 c008b64:	d101      	bne.n	c008b6a <HAL_UART_Receive+0x3a>
 c008b66:	2302      	movs	r3, #2
 c008b68:	e0b1      	b.n	c008cce <HAL_UART_Receive+0x19e>
 c008b6a:	68fb      	ldr	r3, [r7, #12]
 c008b6c:	2201      	movs	r2, #1
 c008b6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c008b72:	68fb      	ldr	r3, [r7, #12]
 c008b74:	2200      	movs	r2, #0
 c008b76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 c008b7a:	68fb      	ldr	r3, [r7, #12]
 c008b7c:	2222      	movs	r2, #34	; 0x22
 c008b7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c008b82:	68fb      	ldr	r3, [r7, #12]
 c008b84:	2200      	movs	r2, #0
 c008b86:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c008b88:	f7fc fd76 	bl	c005678 <HAL_GetTick>
 c008b8c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 c008b8e:	68fb      	ldr	r3, [r7, #12]
 c008b90:	88fa      	ldrh	r2, [r7, #6]
 c008b92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 c008b96:	68fb      	ldr	r3, [r7, #12]
 c008b98:	88fa      	ldrh	r2, [r7, #6]
 c008b9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 c008b9e:	68fb      	ldr	r3, [r7, #12]
 c008ba0:	689b      	ldr	r3, [r3, #8]
 c008ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c008ba6:	d10e      	bne.n	c008bc6 <HAL_UART_Receive+0x96>
 c008ba8:	68fb      	ldr	r3, [r7, #12]
 c008baa:	691b      	ldr	r3, [r3, #16]
 c008bac:	2b00      	cmp	r3, #0
 c008bae:	d105      	bne.n	c008bbc <HAL_UART_Receive+0x8c>
 c008bb0:	68fb      	ldr	r3, [r7, #12]
 c008bb2:	f240 12ff 	movw	r2, #511	; 0x1ff
 c008bb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c008bba:	e02d      	b.n	c008c18 <HAL_UART_Receive+0xe8>
 c008bbc:	68fb      	ldr	r3, [r7, #12]
 c008bbe:	22ff      	movs	r2, #255	; 0xff
 c008bc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c008bc4:	e028      	b.n	c008c18 <HAL_UART_Receive+0xe8>
 c008bc6:	68fb      	ldr	r3, [r7, #12]
 c008bc8:	689b      	ldr	r3, [r3, #8]
 c008bca:	2b00      	cmp	r3, #0
 c008bcc:	d10d      	bne.n	c008bea <HAL_UART_Receive+0xba>
 c008bce:	68fb      	ldr	r3, [r7, #12]
 c008bd0:	691b      	ldr	r3, [r3, #16]
 c008bd2:	2b00      	cmp	r3, #0
 c008bd4:	d104      	bne.n	c008be0 <HAL_UART_Receive+0xb0>
 c008bd6:	68fb      	ldr	r3, [r7, #12]
 c008bd8:	22ff      	movs	r2, #255	; 0xff
 c008bda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c008bde:	e01b      	b.n	c008c18 <HAL_UART_Receive+0xe8>
 c008be0:	68fb      	ldr	r3, [r7, #12]
 c008be2:	227f      	movs	r2, #127	; 0x7f
 c008be4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c008be8:	e016      	b.n	c008c18 <HAL_UART_Receive+0xe8>
 c008bea:	68fb      	ldr	r3, [r7, #12]
 c008bec:	689b      	ldr	r3, [r3, #8]
 c008bee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c008bf2:	d10d      	bne.n	c008c10 <HAL_UART_Receive+0xe0>
 c008bf4:	68fb      	ldr	r3, [r7, #12]
 c008bf6:	691b      	ldr	r3, [r3, #16]
 c008bf8:	2b00      	cmp	r3, #0
 c008bfa:	d104      	bne.n	c008c06 <HAL_UART_Receive+0xd6>
 c008bfc:	68fb      	ldr	r3, [r7, #12]
 c008bfe:	227f      	movs	r2, #127	; 0x7f
 c008c00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c008c04:	e008      	b.n	c008c18 <HAL_UART_Receive+0xe8>
 c008c06:	68fb      	ldr	r3, [r7, #12]
 c008c08:	223f      	movs	r2, #63	; 0x3f
 c008c0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c008c0e:	e003      	b.n	c008c18 <HAL_UART_Receive+0xe8>
 c008c10:	68fb      	ldr	r3, [r7, #12]
 c008c12:	2200      	movs	r2, #0
 c008c14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 c008c18:	68fb      	ldr	r3, [r7, #12]
 c008c1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 c008c1e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c008c20:	68fb      	ldr	r3, [r7, #12]
 c008c22:	689b      	ldr	r3, [r3, #8]
 c008c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c008c28:	d108      	bne.n	c008c3c <HAL_UART_Receive+0x10c>
 c008c2a:	68fb      	ldr	r3, [r7, #12]
 c008c2c:	691b      	ldr	r3, [r3, #16]
 c008c2e:	2b00      	cmp	r3, #0
 c008c30:	d104      	bne.n	c008c3c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 c008c32:	2300      	movs	r3, #0
 c008c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 c008c36:	68bb      	ldr	r3, [r7, #8]
 c008c38:	61bb      	str	r3, [r7, #24]
 c008c3a:	e003      	b.n	c008c44 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 c008c3c:	68bb      	ldr	r3, [r7, #8]
 c008c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c008c40:	2300      	movs	r3, #0
 c008c42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 c008c44:	68fb      	ldr	r3, [r7, #12]
 c008c46:	2200      	movs	r2, #0
 c008c48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 c008c4c:	e032      	b.n	c008cb4 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 c008c4e:	683b      	ldr	r3, [r7, #0]
 c008c50:	9300      	str	r3, [sp, #0]
 c008c52:	697b      	ldr	r3, [r7, #20]
 c008c54:	2200      	movs	r2, #0
 c008c56:	2120      	movs	r1, #32
 c008c58:	68f8      	ldr	r0, [r7, #12]
 c008c5a:	f000 fc28 	bl	c0094ae <UART_WaitOnFlagUntilTimeout>
 c008c5e:	4603      	mov	r3, r0
 c008c60:	2b00      	cmp	r3, #0
 c008c62:	d001      	beq.n	c008c68 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 c008c64:	2303      	movs	r3, #3
 c008c66:	e032      	b.n	c008cce <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 c008c68:	69fb      	ldr	r3, [r7, #28]
 c008c6a:	2b00      	cmp	r3, #0
 c008c6c:	d10c      	bne.n	c008c88 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 c008c6e:	68fb      	ldr	r3, [r7, #12]
 c008c70:	681b      	ldr	r3, [r3, #0]
 c008c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c008c74:	b29a      	uxth	r2, r3
 c008c76:	8a7b      	ldrh	r3, [r7, #18]
 c008c78:	4013      	ands	r3, r2
 c008c7a:	b29a      	uxth	r2, r3
 c008c7c:	69bb      	ldr	r3, [r7, #24]
 c008c7e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 c008c80:	69bb      	ldr	r3, [r7, #24]
 c008c82:	3302      	adds	r3, #2
 c008c84:	61bb      	str	r3, [r7, #24]
 c008c86:	e00c      	b.n	c008ca2 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 c008c88:	68fb      	ldr	r3, [r7, #12]
 c008c8a:	681b      	ldr	r3, [r3, #0]
 c008c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c008c8e:	b2da      	uxtb	r2, r3
 c008c90:	8a7b      	ldrh	r3, [r7, #18]
 c008c92:	b2db      	uxtb	r3, r3
 c008c94:	4013      	ands	r3, r2
 c008c96:	b2da      	uxtb	r2, r3
 c008c98:	69fb      	ldr	r3, [r7, #28]
 c008c9a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 c008c9c:	69fb      	ldr	r3, [r7, #28]
 c008c9e:	3301      	adds	r3, #1
 c008ca0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 c008ca2:	68fb      	ldr	r3, [r7, #12]
 c008ca4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 c008ca8:	b29b      	uxth	r3, r3
 c008caa:	3b01      	subs	r3, #1
 c008cac:	b29a      	uxth	r2, r3
 c008cae:	68fb      	ldr	r3, [r7, #12]
 c008cb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 c008cb4:	68fb      	ldr	r3, [r7, #12]
 c008cb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 c008cba:	b29b      	uxth	r3, r3
 c008cbc:	2b00      	cmp	r3, #0
 c008cbe:	d1c6      	bne.n	c008c4e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 c008cc0:	68fb      	ldr	r3, [r7, #12]
 c008cc2:	2220      	movs	r2, #32
 c008cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 c008cc8:	2300      	movs	r3, #0
 c008cca:	e000      	b.n	c008cce <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 c008ccc:	2302      	movs	r3, #2
  }
}
 c008cce:	4618      	mov	r0, r3
 c008cd0:	3720      	adds	r7, #32
 c008cd2:	46bd      	mov	sp, r7
 c008cd4:	bd80      	pop	{r7, pc}
	...

0c008cd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 c008cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c008cdc:	b08c      	sub	sp, #48	; 0x30
 c008cde:	af00      	add	r7, sp, #0
 c008ce0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 c008ce2:	2300      	movs	r3, #0
 c008ce4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c008ce8:	697b      	ldr	r3, [r7, #20]
 c008cea:	689a      	ldr	r2, [r3, #8]
 c008cec:	697b      	ldr	r3, [r7, #20]
 c008cee:	691b      	ldr	r3, [r3, #16]
 c008cf0:	431a      	orrs	r2, r3
 c008cf2:	697b      	ldr	r3, [r7, #20]
 c008cf4:	695b      	ldr	r3, [r3, #20]
 c008cf6:	431a      	orrs	r2, r3
 c008cf8:	697b      	ldr	r3, [r7, #20]
 c008cfa:	69db      	ldr	r3, [r3, #28]
 c008cfc:	4313      	orrs	r3, r2
 c008cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c008d00:	697b      	ldr	r3, [r7, #20]
 c008d02:	681b      	ldr	r3, [r3, #0]
 c008d04:	681a      	ldr	r2, [r3, #0]
 c008d06:	4baa      	ldr	r3, [pc, #680]	; (c008fb0 <UART_SetConfig+0x2d8>)
 c008d08:	4013      	ands	r3, r2
 c008d0a:	697a      	ldr	r2, [r7, #20]
 c008d0c:	6812      	ldr	r2, [r2, #0]
 c008d0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c008d10:	430b      	orrs	r3, r1
 c008d12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c008d14:	697b      	ldr	r3, [r7, #20]
 c008d16:	681b      	ldr	r3, [r3, #0]
 c008d18:	685b      	ldr	r3, [r3, #4]
 c008d1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 c008d1e:	697b      	ldr	r3, [r7, #20]
 c008d20:	68da      	ldr	r2, [r3, #12]
 c008d22:	697b      	ldr	r3, [r7, #20]
 c008d24:	681b      	ldr	r3, [r3, #0]
 c008d26:	430a      	orrs	r2, r1
 c008d28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c008d2a:	697b      	ldr	r3, [r7, #20]
 c008d2c:	699b      	ldr	r3, [r3, #24]
 c008d2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c008d30:	697b      	ldr	r3, [r7, #20]
 c008d32:	681b      	ldr	r3, [r3, #0]
 c008d34:	4a9f      	ldr	r2, [pc, #636]	; (c008fb4 <UART_SetConfig+0x2dc>)
 c008d36:	4293      	cmp	r3, r2
 c008d38:	d004      	beq.n	c008d44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 c008d3a:	697b      	ldr	r3, [r7, #20]
 c008d3c:	6a1b      	ldr	r3, [r3, #32]
 c008d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c008d40:	4313      	orrs	r3, r2
 c008d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c008d44:	697b      	ldr	r3, [r7, #20]
 c008d46:	681b      	ldr	r3, [r3, #0]
 c008d48:	689b      	ldr	r3, [r3, #8]
 c008d4a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 c008d4e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 c008d52:	697a      	ldr	r2, [r7, #20]
 c008d54:	6812      	ldr	r2, [r2, #0]
 c008d56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c008d58:	430b      	orrs	r3, r1
 c008d5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c008d5c:	697b      	ldr	r3, [r7, #20]
 c008d5e:	681b      	ldr	r3, [r3, #0]
 c008d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c008d62:	f023 010f 	bic.w	r1, r3, #15
 c008d66:	697b      	ldr	r3, [r7, #20]
 c008d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c008d6a:	697b      	ldr	r3, [r7, #20]
 c008d6c:	681b      	ldr	r3, [r3, #0]
 c008d6e:	430a      	orrs	r2, r1
 c008d70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 c008d72:	697b      	ldr	r3, [r7, #20]
 c008d74:	681b      	ldr	r3, [r3, #0]
 c008d76:	4a90      	ldr	r2, [pc, #576]	; (c008fb8 <UART_SetConfig+0x2e0>)
 c008d78:	4293      	cmp	r3, r2
 c008d7a:	d125      	bne.n	c008dc8 <UART_SetConfig+0xf0>
 c008d7c:	4b8f      	ldr	r3, [pc, #572]	; (c008fbc <UART_SetConfig+0x2e4>)
 c008d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c008d82:	f003 0303 	and.w	r3, r3, #3
 c008d86:	2b03      	cmp	r3, #3
 c008d88:	d81a      	bhi.n	c008dc0 <UART_SetConfig+0xe8>
 c008d8a:	a201      	add	r2, pc, #4	; (adr r2, c008d90 <UART_SetConfig+0xb8>)
 c008d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c008d90:	0c008da1 	.word	0x0c008da1
 c008d94:	0c008db1 	.word	0x0c008db1
 c008d98:	0c008da9 	.word	0x0c008da9
 c008d9c:	0c008db9 	.word	0x0c008db9
 c008da0:	2301      	movs	r3, #1
 c008da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008da6:	e114      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008da8:	2302      	movs	r3, #2
 c008daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008dae:	e110      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008db0:	2304      	movs	r3, #4
 c008db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008db6:	e10c      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008db8:	2308      	movs	r3, #8
 c008dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008dbe:	e108      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008dc0:	2310      	movs	r3, #16
 c008dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008dc6:	e104      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008dc8:	697b      	ldr	r3, [r7, #20]
 c008dca:	681b      	ldr	r3, [r3, #0]
 c008dcc:	4a7c      	ldr	r2, [pc, #496]	; (c008fc0 <UART_SetConfig+0x2e8>)
 c008dce:	4293      	cmp	r3, r2
 c008dd0:	d138      	bne.n	c008e44 <UART_SetConfig+0x16c>
 c008dd2:	4b7a      	ldr	r3, [pc, #488]	; (c008fbc <UART_SetConfig+0x2e4>)
 c008dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c008dd8:	f003 030c 	and.w	r3, r3, #12
 c008ddc:	2b0c      	cmp	r3, #12
 c008dde:	d82d      	bhi.n	c008e3c <UART_SetConfig+0x164>
 c008de0:	a201      	add	r2, pc, #4	; (adr r2, c008de8 <UART_SetConfig+0x110>)
 c008de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c008de6:	bf00      	nop
 c008de8:	0c008e1d 	.word	0x0c008e1d
 c008dec:	0c008e3d 	.word	0x0c008e3d
 c008df0:	0c008e3d 	.word	0x0c008e3d
 c008df4:	0c008e3d 	.word	0x0c008e3d
 c008df8:	0c008e2d 	.word	0x0c008e2d
 c008dfc:	0c008e3d 	.word	0x0c008e3d
 c008e00:	0c008e3d 	.word	0x0c008e3d
 c008e04:	0c008e3d 	.word	0x0c008e3d
 c008e08:	0c008e25 	.word	0x0c008e25
 c008e0c:	0c008e3d 	.word	0x0c008e3d
 c008e10:	0c008e3d 	.word	0x0c008e3d
 c008e14:	0c008e3d 	.word	0x0c008e3d
 c008e18:	0c008e35 	.word	0x0c008e35
 c008e1c:	2300      	movs	r3, #0
 c008e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008e22:	e0d6      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008e24:	2302      	movs	r3, #2
 c008e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008e2a:	e0d2      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008e2c:	2304      	movs	r3, #4
 c008e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008e32:	e0ce      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008e34:	2308      	movs	r3, #8
 c008e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008e3a:	e0ca      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008e3c:	2310      	movs	r3, #16
 c008e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008e42:	e0c6      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008e44:	697b      	ldr	r3, [r7, #20]
 c008e46:	681b      	ldr	r3, [r3, #0]
 c008e48:	4a5e      	ldr	r2, [pc, #376]	; (c008fc4 <UART_SetConfig+0x2ec>)
 c008e4a:	4293      	cmp	r3, r2
 c008e4c:	d125      	bne.n	c008e9a <UART_SetConfig+0x1c2>
 c008e4e:	4b5b      	ldr	r3, [pc, #364]	; (c008fbc <UART_SetConfig+0x2e4>)
 c008e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c008e54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 c008e58:	2b30      	cmp	r3, #48	; 0x30
 c008e5a:	d016      	beq.n	c008e8a <UART_SetConfig+0x1b2>
 c008e5c:	2b30      	cmp	r3, #48	; 0x30
 c008e5e:	d818      	bhi.n	c008e92 <UART_SetConfig+0x1ba>
 c008e60:	2b20      	cmp	r3, #32
 c008e62:	d00a      	beq.n	c008e7a <UART_SetConfig+0x1a2>
 c008e64:	2b20      	cmp	r3, #32
 c008e66:	d814      	bhi.n	c008e92 <UART_SetConfig+0x1ba>
 c008e68:	2b00      	cmp	r3, #0
 c008e6a:	d002      	beq.n	c008e72 <UART_SetConfig+0x19a>
 c008e6c:	2b10      	cmp	r3, #16
 c008e6e:	d008      	beq.n	c008e82 <UART_SetConfig+0x1aa>
 c008e70:	e00f      	b.n	c008e92 <UART_SetConfig+0x1ba>
 c008e72:	2300      	movs	r3, #0
 c008e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008e78:	e0ab      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008e7a:	2302      	movs	r3, #2
 c008e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008e80:	e0a7      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008e82:	2304      	movs	r3, #4
 c008e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008e88:	e0a3      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008e8a:	2308      	movs	r3, #8
 c008e8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008e90:	e09f      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008e92:	2310      	movs	r3, #16
 c008e94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008e98:	e09b      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008e9a:	697b      	ldr	r3, [r7, #20]
 c008e9c:	681b      	ldr	r3, [r3, #0]
 c008e9e:	4a4a      	ldr	r2, [pc, #296]	; (c008fc8 <UART_SetConfig+0x2f0>)
 c008ea0:	4293      	cmp	r3, r2
 c008ea2:	d125      	bne.n	c008ef0 <UART_SetConfig+0x218>
 c008ea4:	4b45      	ldr	r3, [pc, #276]	; (c008fbc <UART_SetConfig+0x2e4>)
 c008ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c008eaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 c008eae:	2bc0      	cmp	r3, #192	; 0xc0
 c008eb0:	d016      	beq.n	c008ee0 <UART_SetConfig+0x208>
 c008eb2:	2bc0      	cmp	r3, #192	; 0xc0
 c008eb4:	d818      	bhi.n	c008ee8 <UART_SetConfig+0x210>
 c008eb6:	2b80      	cmp	r3, #128	; 0x80
 c008eb8:	d00a      	beq.n	c008ed0 <UART_SetConfig+0x1f8>
 c008eba:	2b80      	cmp	r3, #128	; 0x80
 c008ebc:	d814      	bhi.n	c008ee8 <UART_SetConfig+0x210>
 c008ebe:	2b00      	cmp	r3, #0
 c008ec0:	d002      	beq.n	c008ec8 <UART_SetConfig+0x1f0>
 c008ec2:	2b40      	cmp	r3, #64	; 0x40
 c008ec4:	d008      	beq.n	c008ed8 <UART_SetConfig+0x200>
 c008ec6:	e00f      	b.n	c008ee8 <UART_SetConfig+0x210>
 c008ec8:	2300      	movs	r3, #0
 c008eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008ece:	e080      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008ed0:	2302      	movs	r3, #2
 c008ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008ed6:	e07c      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008ed8:	2304      	movs	r3, #4
 c008eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008ede:	e078      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008ee0:	2308      	movs	r3, #8
 c008ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008ee6:	e074      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008ee8:	2310      	movs	r3, #16
 c008eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008eee:	e070      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008ef0:	697b      	ldr	r3, [r7, #20]
 c008ef2:	681b      	ldr	r3, [r3, #0]
 c008ef4:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 c008ef8:	d12a      	bne.n	c008f50 <UART_SetConfig+0x278>
 c008efa:	4b30      	ldr	r3, [pc, #192]	; (c008fbc <UART_SetConfig+0x2e4>)
 c008efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c008f00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c008f04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c008f08:	d01a      	beq.n	c008f40 <UART_SetConfig+0x268>
 c008f0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c008f0e:	d81b      	bhi.n	c008f48 <UART_SetConfig+0x270>
 c008f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c008f14:	d00c      	beq.n	c008f30 <UART_SetConfig+0x258>
 c008f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c008f1a:	d815      	bhi.n	c008f48 <UART_SetConfig+0x270>
 c008f1c:	2b00      	cmp	r3, #0
 c008f1e:	d003      	beq.n	c008f28 <UART_SetConfig+0x250>
 c008f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c008f24:	d008      	beq.n	c008f38 <UART_SetConfig+0x260>
 c008f26:	e00f      	b.n	c008f48 <UART_SetConfig+0x270>
 c008f28:	2300      	movs	r3, #0
 c008f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008f2e:	e050      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008f30:	2302      	movs	r3, #2
 c008f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008f36:	e04c      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008f38:	2304      	movs	r3, #4
 c008f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008f3e:	e048      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008f40:	2308      	movs	r3, #8
 c008f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008f46:	e044      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008f48:	2310      	movs	r3, #16
 c008f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008f4e:	e040      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008f50:	697b      	ldr	r3, [r7, #20]
 c008f52:	681b      	ldr	r3, [r3, #0]
 c008f54:	4a17      	ldr	r2, [pc, #92]	; (c008fb4 <UART_SetConfig+0x2dc>)
 c008f56:	4293      	cmp	r3, r2
 c008f58:	d138      	bne.n	c008fcc <UART_SetConfig+0x2f4>
 c008f5a:	4b18      	ldr	r3, [pc, #96]	; (c008fbc <UART_SetConfig+0x2e4>)
 c008f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c008f60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 c008f64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c008f68:	d01a      	beq.n	c008fa0 <UART_SetConfig+0x2c8>
 c008f6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c008f6e:	d81b      	bhi.n	c008fa8 <UART_SetConfig+0x2d0>
 c008f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c008f74:	d00c      	beq.n	c008f90 <UART_SetConfig+0x2b8>
 c008f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c008f7a:	d815      	bhi.n	c008fa8 <UART_SetConfig+0x2d0>
 c008f7c:	2b00      	cmp	r3, #0
 c008f7e:	d003      	beq.n	c008f88 <UART_SetConfig+0x2b0>
 c008f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c008f84:	d008      	beq.n	c008f98 <UART_SetConfig+0x2c0>
 c008f86:	e00f      	b.n	c008fa8 <UART_SetConfig+0x2d0>
 c008f88:	2300      	movs	r3, #0
 c008f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008f8e:	e020      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008f90:	2302      	movs	r3, #2
 c008f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008f96:	e01c      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008f98:	2304      	movs	r3, #4
 c008f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008f9e:	e018      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008fa0:	2308      	movs	r3, #8
 c008fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008fa6:	e014      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008fa8:	2310      	movs	r3, #16
 c008faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008fae:	e010      	b.n	c008fd2 <UART_SetConfig+0x2fa>
 c008fb0:	cfff69f3 	.word	0xcfff69f3
 c008fb4:	50008000 	.word	0x50008000
 c008fb8:	50013800 	.word	0x50013800
 c008fbc:	50021000 	.word	0x50021000
 c008fc0:	50004400 	.word	0x50004400
 c008fc4:	50004800 	.word	0x50004800
 c008fc8:	50004c00 	.word	0x50004c00
 c008fcc:	2310      	movs	r3, #16
 c008fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 c008fd2:	697b      	ldr	r3, [r7, #20]
 c008fd4:	681b      	ldr	r3, [r3, #0]
 c008fd6:	4ab0      	ldr	r2, [pc, #704]	; (c009298 <UART_SetConfig+0x5c0>)
 c008fd8:	4293      	cmp	r3, r2
 c008fda:	f040 809b 	bne.w	c009114 <UART_SetConfig+0x43c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 c008fde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c008fe2:	2b08      	cmp	r3, #8
 c008fe4:	d827      	bhi.n	c009036 <UART_SetConfig+0x35e>
 c008fe6:	a201      	add	r2, pc, #4	; (adr r2, c008fec <UART_SetConfig+0x314>)
 c008fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c008fec:	0c009011 	.word	0x0c009011
 c008ff0:	0c009019 	.word	0x0c009019
 c008ff4:	0c009021 	.word	0x0c009021
 c008ff8:	0c009037 	.word	0x0c009037
 c008ffc:	0c009027 	.word	0x0c009027
 c009000:	0c009037 	.word	0x0c009037
 c009004:	0c009037 	.word	0x0c009037
 c009008:	0c009037 	.word	0x0c009037
 c00900c:	0c00902f 	.word	0x0c00902f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c009010:	f7fe fa1c 	bl	c00744c <HAL_RCC_GetPCLK1Freq>
 c009014:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c009016:	e014      	b.n	c009042 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c009018:	f7fe fa2c 	bl	c007474 <HAL_RCC_GetPCLK2Freq>
 c00901c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c00901e:	e010      	b.n	c009042 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c009020:	4b9e      	ldr	r3, [pc, #632]	; (c00929c <UART_SetConfig+0x5c4>)
 c009022:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c009024:	e00d      	b.n	c009042 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c009026:	f7fe f961 	bl	c0072ec <HAL_RCC_GetSysClockFreq>
 c00902a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c00902c:	e009      	b.n	c009042 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c00902e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c009032:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c009034:	e005      	b.n	c009042 <UART_SetConfig+0x36a>
      default:
        pclk = 0U;
 c009036:	2300      	movs	r3, #0
 c009038:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c00903a:	2301      	movs	r3, #1
 c00903c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c009040:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 c009042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c009044:	2b00      	cmp	r3, #0
 c009046:	f000 8130 	beq.w	c0092aa <UART_SetConfig+0x5d2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c00904a:	697b      	ldr	r3, [r7, #20]
 c00904c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00904e:	4a94      	ldr	r2, [pc, #592]	; (c0092a0 <UART_SetConfig+0x5c8>)
 c009050:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c009054:	461a      	mov	r2, r3
 c009056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c009058:	fbb3 f3f2 	udiv	r3, r3, r2
 c00905c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
//      volatile uint32_t value1 = 3U * huart->Init.BaudRate;
//      volatile uint32_t value2 = 4096U * huart->Init.BaudRate;
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c00905e:	697b      	ldr	r3, [r7, #20]
 c009060:	685a      	ldr	r2, [r3, #4]
 c009062:	4613      	mov	r3, r2
 c009064:	005b      	lsls	r3, r3, #1
 c009066:	4413      	add	r3, r2
 c009068:	69ba      	ldr	r2, [r7, #24]
 c00906a:	429a      	cmp	r2, r3
 c00906c:	d305      	bcc.n	c00907a <UART_SetConfig+0x3a2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 c00906e:	697b      	ldr	r3, [r7, #20]
 c009070:	685b      	ldr	r3, [r3, #4]
 c009072:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c009074:	69ba      	ldr	r2, [r7, #24]
 c009076:	429a      	cmp	r2, r3
 c009078:	d903      	bls.n	c009082 <UART_SetConfig+0x3aa>
      {
        ret = HAL_ERROR;
 c00907a:	2301      	movs	r3, #1
 c00907c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c009080:	e113      	b.n	c0092aa <UART_SetConfig+0x5d2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c009082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c009084:	2200      	movs	r2, #0
 c009086:	60bb      	str	r3, [r7, #8]
 c009088:	60fa      	str	r2, [r7, #12]
 c00908a:	697b      	ldr	r3, [r7, #20]
 c00908c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00908e:	4a84      	ldr	r2, [pc, #528]	; (c0092a0 <UART_SetConfig+0x5c8>)
 c009090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c009094:	b29b      	uxth	r3, r3
 c009096:	2200      	movs	r2, #0
 c009098:	603b      	str	r3, [r7, #0]
 c00909a:	607a      	str	r2, [r7, #4]
 c00909c:	e9d7 2300 	ldrd	r2, r3, [r7]
 c0090a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 c0090a4:	f7f7 f904 	bl	c0002b0 <__aeabi_uldivmod>
 c0090a8:	4602      	mov	r2, r0
 c0090aa:	460b      	mov	r3, r1
 c0090ac:	4610      	mov	r0, r2
 c0090ae:	4619      	mov	r1, r3
 c0090b0:	f04f 0200 	mov.w	r2, #0
 c0090b4:	f04f 0300 	mov.w	r3, #0
 c0090b8:	020b      	lsls	r3, r1, #8
 c0090ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 c0090be:	0202      	lsls	r2, r0, #8
 c0090c0:	6979      	ldr	r1, [r7, #20]
 c0090c2:	6849      	ldr	r1, [r1, #4]
 c0090c4:	0849      	lsrs	r1, r1, #1
 c0090c6:	2000      	movs	r0, #0
 c0090c8:	460c      	mov	r4, r1
 c0090ca:	4605      	mov	r5, r0
 c0090cc:	eb12 0804 	adds.w	r8, r2, r4
 c0090d0:	eb43 0905 	adc.w	r9, r3, r5
 c0090d4:	697b      	ldr	r3, [r7, #20]
 c0090d6:	685b      	ldr	r3, [r3, #4]
 c0090d8:	2200      	movs	r2, #0
 c0090da:	469a      	mov	sl, r3
 c0090dc:	4693      	mov	fp, r2
 c0090de:	4652      	mov	r2, sl
 c0090e0:	465b      	mov	r3, fp
 c0090e2:	4640      	mov	r0, r8
 c0090e4:	4649      	mov	r1, r9
 c0090e6:	f7f7 f8e3 	bl	c0002b0 <__aeabi_uldivmod>
 c0090ea:	4602      	mov	r2, r0
 c0090ec:	460b      	mov	r3, r1
 c0090ee:	4613      	mov	r3, r2
 c0090f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c0090f2:	6a3b      	ldr	r3, [r7, #32]
 c0090f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c0090f8:	d308      	bcc.n	c00910c <UART_SetConfig+0x434>
 c0090fa:	6a3b      	ldr	r3, [r7, #32]
 c0090fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c009100:	d204      	bcs.n	c00910c <UART_SetConfig+0x434>
        {
          huart->Instance->BRR = usartdiv;
 c009102:	697b      	ldr	r3, [r7, #20]
 c009104:	681b      	ldr	r3, [r3, #0]
 c009106:	6a3a      	ldr	r2, [r7, #32]
 c009108:	60da      	str	r2, [r3, #12]
 c00910a:	e0ce      	b.n	c0092aa <UART_SetConfig+0x5d2>
        }
        else
        {
          ret = HAL_ERROR;
 c00910c:	2301      	movs	r3, #1
 c00910e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c009112:	e0ca      	b.n	c0092aa <UART_SetConfig+0x5d2>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c009114:	697b      	ldr	r3, [r7, #20]
 c009116:	69db      	ldr	r3, [r3, #28]
 c009118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c00911c:	d167      	bne.n	c0091ee <UART_SetConfig+0x516>
  {
    switch (clocksource)
 c00911e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c009122:	2b08      	cmp	r3, #8
 c009124:	d827      	bhi.n	c009176 <UART_SetConfig+0x49e>
 c009126:	a201      	add	r2, pc, #4	; (adr r2, c00912c <UART_SetConfig+0x454>)
 c009128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00912c:	0c009151 	.word	0x0c009151
 c009130:	0c009159 	.word	0x0c009159
 c009134:	0c009161 	.word	0x0c009161
 c009138:	0c009177 	.word	0x0c009177
 c00913c:	0c009167 	.word	0x0c009167
 c009140:	0c009177 	.word	0x0c009177
 c009144:	0c009177 	.word	0x0c009177
 c009148:	0c009177 	.word	0x0c009177
 c00914c:	0c00916f 	.word	0x0c00916f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c009150:	f7fe f97c 	bl	c00744c <HAL_RCC_GetPCLK1Freq>
 c009154:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c009156:	e014      	b.n	c009182 <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c009158:	f7fe f98c 	bl	c007474 <HAL_RCC_GetPCLK2Freq>
 c00915c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c00915e:	e010      	b.n	c009182 <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c009160:	4b4e      	ldr	r3, [pc, #312]	; (c00929c <UART_SetConfig+0x5c4>)
 c009162:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c009164:	e00d      	b.n	c009182 <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c009166:	f7fe f8c1 	bl	c0072ec <HAL_RCC_GetSysClockFreq>
 c00916a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c00916c:	e009      	b.n	c009182 <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c00916e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c009172:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c009174:	e005      	b.n	c009182 <UART_SetConfig+0x4aa>
      default:
        pclk = 0U;
 c009176:	2300      	movs	r3, #0
 c009178:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c00917a:	2301      	movs	r3, #1
 c00917c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c009180:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 c009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c009184:	2b00      	cmp	r3, #0
 c009186:	f000 8090 	beq.w	c0092aa <UART_SetConfig+0x5d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c00918a:	697b      	ldr	r3, [r7, #20]
 c00918c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00918e:	4a44      	ldr	r2, [pc, #272]	; (c0092a0 <UART_SetConfig+0x5c8>)
 c009190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c009194:	461a      	mov	r2, r3
 c009196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c009198:	fbb3 f3f2 	udiv	r3, r3, r2
 c00919c:	005a      	lsls	r2, r3, #1
 c00919e:	697b      	ldr	r3, [r7, #20]
 c0091a0:	685b      	ldr	r3, [r3, #4]
 c0091a2:	085b      	lsrs	r3, r3, #1
 c0091a4:	441a      	add	r2, r3
 c0091a6:	697b      	ldr	r3, [r7, #20]
 c0091a8:	685b      	ldr	r3, [r3, #4]
 c0091aa:	fbb2 f3f3 	udiv	r3, r2, r3
 c0091ae:	b29b      	uxth	r3, r3
 c0091b0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c0091b2:	6a3b      	ldr	r3, [r7, #32]
 c0091b4:	2b0f      	cmp	r3, #15
 c0091b6:	d916      	bls.n	c0091e6 <UART_SetConfig+0x50e>
 c0091b8:	6a3b      	ldr	r3, [r7, #32]
 c0091ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c0091be:	d212      	bcs.n	c0091e6 <UART_SetConfig+0x50e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c0091c0:	6a3b      	ldr	r3, [r7, #32]
 c0091c2:	b29b      	uxth	r3, r3
 c0091c4:	f023 030f 	bic.w	r3, r3, #15
 c0091c8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c0091ca:	6a3b      	ldr	r3, [r7, #32]
 c0091cc:	085b      	lsrs	r3, r3, #1
 c0091ce:	b29b      	uxth	r3, r3
 c0091d0:	f003 0307 	and.w	r3, r3, #7
 c0091d4:	b29a      	uxth	r2, r3
 c0091d6:	8bfb      	ldrh	r3, [r7, #30]
 c0091d8:	4313      	orrs	r3, r2
 c0091da:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 c0091dc:	697b      	ldr	r3, [r7, #20]
 c0091de:	681b      	ldr	r3, [r3, #0]
 c0091e0:	8bfa      	ldrh	r2, [r7, #30]
 c0091e2:	60da      	str	r2, [r3, #12]
 c0091e4:	e061      	b.n	c0092aa <UART_SetConfig+0x5d2>
      }
      else
      {
        ret = HAL_ERROR;
 c0091e6:	2301      	movs	r3, #1
 c0091e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c0091ec:	e05d      	b.n	c0092aa <UART_SetConfig+0x5d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 c0091ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c0091f2:	2b08      	cmp	r3, #8
 c0091f4:	d827      	bhi.n	c009246 <UART_SetConfig+0x56e>
 c0091f6:	a201      	add	r2, pc, #4	; (adr r2, c0091fc <UART_SetConfig+0x524>)
 c0091f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0091fc:	0c009221 	.word	0x0c009221
 c009200:	0c009229 	.word	0x0c009229
 c009204:	0c009231 	.word	0x0c009231
 c009208:	0c009247 	.word	0x0c009247
 c00920c:	0c009237 	.word	0x0c009237
 c009210:	0c009247 	.word	0x0c009247
 c009214:	0c009247 	.word	0x0c009247
 c009218:	0c009247 	.word	0x0c009247
 c00921c:	0c00923f 	.word	0x0c00923f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c009220:	f7fe f914 	bl	c00744c <HAL_RCC_GetPCLK1Freq>
 c009224:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c009226:	e014      	b.n	c009252 <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c009228:	f7fe f924 	bl	c007474 <HAL_RCC_GetPCLK2Freq>
 c00922c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c00922e:	e010      	b.n	c009252 <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c009230:	4b1a      	ldr	r3, [pc, #104]	; (c00929c <UART_SetConfig+0x5c4>)
 c009232:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c009234:	e00d      	b.n	c009252 <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c009236:	f7fe f859 	bl	c0072ec <HAL_RCC_GetSysClockFreq>
 c00923a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c00923c:	e009      	b.n	c009252 <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c00923e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c009242:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c009244:	e005      	b.n	c009252 <UART_SetConfig+0x57a>
      default:
        pclk = 0U;
 c009246:	2300      	movs	r3, #0
 c009248:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c00924a:	2301      	movs	r3, #1
 c00924c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c009250:	bf00      	nop
    }

    if (pclk != 0U)
 c009252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c009254:	2b00      	cmp	r3, #0
 c009256:	d028      	beq.n	c0092aa <UART_SetConfig+0x5d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c009258:	697b      	ldr	r3, [r7, #20]
 c00925a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00925c:	4a10      	ldr	r2, [pc, #64]	; (c0092a0 <UART_SetConfig+0x5c8>)
 c00925e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c009262:	461a      	mov	r2, r3
 c009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c009266:	fbb3 f2f2 	udiv	r2, r3, r2
 c00926a:	697b      	ldr	r3, [r7, #20]
 c00926c:	685b      	ldr	r3, [r3, #4]
 c00926e:	085b      	lsrs	r3, r3, #1
 c009270:	441a      	add	r2, r3
 c009272:	697b      	ldr	r3, [r7, #20]
 c009274:	685b      	ldr	r3, [r3, #4]
 c009276:	fbb2 f3f3 	udiv	r3, r2, r3
 c00927a:	b29b      	uxth	r3, r3
 c00927c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c00927e:	6a3b      	ldr	r3, [r7, #32]
 c009280:	2b0f      	cmp	r3, #15
 c009282:	d90f      	bls.n	c0092a4 <UART_SetConfig+0x5cc>
 c009284:	6a3b      	ldr	r3, [r7, #32]
 c009286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c00928a:	d20b      	bcs.n	c0092a4 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = usartdiv;
 c00928c:	697b      	ldr	r3, [r7, #20]
 c00928e:	681b      	ldr	r3, [r3, #0]
 c009290:	6a3a      	ldr	r2, [r7, #32]
 c009292:	60da      	str	r2, [r3, #12]
 c009294:	e009      	b.n	c0092aa <UART_SetConfig+0x5d2>
 c009296:	bf00      	nop
 c009298:	50008000 	.word	0x50008000
 c00929c:	00f42400 	.word	0x00f42400
 c0092a0:	0c00997c 	.word	0x0c00997c
      }
      else
      {
        ret = HAL_ERROR;
 c0092a4:	2301      	movs	r3, #1
 c0092a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 c0092aa:	697b      	ldr	r3, [r7, #20]
 c0092ac:	2201      	movs	r2, #1
 c0092ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 c0092b2:	697b      	ldr	r3, [r7, #20]
 c0092b4:	2201      	movs	r2, #1
 c0092b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 c0092ba:	697b      	ldr	r3, [r7, #20]
 c0092bc:	2200      	movs	r2, #0
 c0092be:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 c0092c0:	697b      	ldr	r3, [r7, #20]
 c0092c2:	2200      	movs	r2, #0
 c0092c4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 c0092c6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 c0092ca:	4618      	mov	r0, r3
 c0092cc:	3730      	adds	r7, #48	; 0x30
 c0092ce:	46bd      	mov	sp, r7
 c0092d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c0092d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 c0092d4:	b480      	push	{r7}
 c0092d6:	b083      	sub	sp, #12
 c0092d8:	af00      	add	r7, sp, #0
 c0092da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c0092dc:	687b      	ldr	r3, [r7, #4]
 c0092de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0092e0:	f003 0301 	and.w	r3, r3, #1
 c0092e4:	2b00      	cmp	r3, #0
 c0092e6:	d00a      	beq.n	c0092fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c0092e8:	687b      	ldr	r3, [r7, #4]
 c0092ea:	681b      	ldr	r3, [r3, #0]
 c0092ec:	685b      	ldr	r3, [r3, #4]
 c0092ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 c0092f2:	687b      	ldr	r3, [r7, #4]
 c0092f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c0092f6:	687b      	ldr	r3, [r7, #4]
 c0092f8:	681b      	ldr	r3, [r3, #0]
 c0092fa:	430a      	orrs	r2, r1
 c0092fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c0092fe:	687b      	ldr	r3, [r7, #4]
 c009300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c009302:	f003 0302 	and.w	r3, r3, #2
 c009306:	2b00      	cmp	r3, #0
 c009308:	d00a      	beq.n	c009320 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c00930a:	687b      	ldr	r3, [r7, #4]
 c00930c:	681b      	ldr	r3, [r3, #0]
 c00930e:	685b      	ldr	r3, [r3, #4]
 c009310:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 c009314:	687b      	ldr	r3, [r7, #4]
 c009316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c009318:	687b      	ldr	r3, [r7, #4]
 c00931a:	681b      	ldr	r3, [r3, #0]
 c00931c:	430a      	orrs	r2, r1
 c00931e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c009320:	687b      	ldr	r3, [r7, #4]
 c009322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c009324:	f003 0304 	and.w	r3, r3, #4
 c009328:	2b00      	cmp	r3, #0
 c00932a:	d00a      	beq.n	c009342 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c00932c:	687b      	ldr	r3, [r7, #4]
 c00932e:	681b      	ldr	r3, [r3, #0]
 c009330:	685b      	ldr	r3, [r3, #4]
 c009332:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 c009336:	687b      	ldr	r3, [r7, #4]
 c009338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c00933a:	687b      	ldr	r3, [r7, #4]
 c00933c:	681b      	ldr	r3, [r3, #0]
 c00933e:	430a      	orrs	r2, r1
 c009340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c009342:	687b      	ldr	r3, [r7, #4]
 c009344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c009346:	f003 0308 	and.w	r3, r3, #8
 c00934a:	2b00      	cmp	r3, #0
 c00934c:	d00a      	beq.n	c009364 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c00934e:	687b      	ldr	r3, [r7, #4]
 c009350:	681b      	ldr	r3, [r3, #0]
 c009352:	685b      	ldr	r3, [r3, #4]
 c009354:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 c009358:	687b      	ldr	r3, [r7, #4]
 c00935a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 c00935c:	687b      	ldr	r3, [r7, #4]
 c00935e:	681b      	ldr	r3, [r3, #0]
 c009360:	430a      	orrs	r2, r1
 c009362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c009364:	687b      	ldr	r3, [r7, #4]
 c009366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c009368:	f003 0310 	and.w	r3, r3, #16
 c00936c:	2b00      	cmp	r3, #0
 c00936e:	d00a      	beq.n	c009386 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c009370:	687b      	ldr	r3, [r7, #4]
 c009372:	681b      	ldr	r3, [r3, #0]
 c009374:	689b      	ldr	r3, [r3, #8]
 c009376:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 c00937a:	687b      	ldr	r3, [r7, #4]
 c00937c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 c00937e:	687b      	ldr	r3, [r7, #4]
 c009380:	681b      	ldr	r3, [r3, #0]
 c009382:	430a      	orrs	r2, r1
 c009384:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c009386:	687b      	ldr	r3, [r7, #4]
 c009388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00938a:	f003 0320 	and.w	r3, r3, #32
 c00938e:	2b00      	cmp	r3, #0
 c009390:	d00a      	beq.n	c0093a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c009392:	687b      	ldr	r3, [r7, #4]
 c009394:	681b      	ldr	r3, [r3, #0]
 c009396:	689b      	ldr	r3, [r3, #8]
 c009398:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 c00939c:	687b      	ldr	r3, [r7, #4]
 c00939e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 c0093a0:	687b      	ldr	r3, [r7, #4]
 c0093a2:	681b      	ldr	r3, [r3, #0]
 c0093a4:	430a      	orrs	r2, r1
 c0093a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c0093a8:	687b      	ldr	r3, [r7, #4]
 c0093aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0093ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0093b0:	2b00      	cmp	r3, #0
 c0093b2:	d01a      	beq.n	c0093ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c0093b4:	687b      	ldr	r3, [r7, #4]
 c0093b6:	681b      	ldr	r3, [r3, #0]
 c0093b8:	685b      	ldr	r3, [r3, #4]
 c0093ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 c0093be:	687b      	ldr	r3, [r7, #4]
 c0093c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 c0093c2:	687b      	ldr	r3, [r7, #4]
 c0093c4:	681b      	ldr	r3, [r3, #0]
 c0093c6:	430a      	orrs	r2, r1
 c0093c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c0093ca:	687b      	ldr	r3, [r7, #4]
 c0093cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0093ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c0093d2:	d10a      	bne.n	c0093ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c0093d4:	687b      	ldr	r3, [r7, #4]
 c0093d6:	681b      	ldr	r3, [r3, #0]
 c0093d8:	685b      	ldr	r3, [r3, #4]
 c0093da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 c0093de:	687b      	ldr	r3, [r7, #4]
 c0093e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c0093e2:	687b      	ldr	r3, [r7, #4]
 c0093e4:	681b      	ldr	r3, [r3, #0]
 c0093e6:	430a      	orrs	r2, r1
 c0093e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c0093ea:	687b      	ldr	r3, [r7, #4]
 c0093ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0093ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0093f2:	2b00      	cmp	r3, #0
 c0093f4:	d00a      	beq.n	c00940c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c0093f6:	687b      	ldr	r3, [r7, #4]
 c0093f8:	681b      	ldr	r3, [r3, #0]
 c0093fa:	685b      	ldr	r3, [r3, #4]
 c0093fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 c009400:	687b      	ldr	r3, [r7, #4]
 c009402:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c009404:	687b      	ldr	r3, [r7, #4]
 c009406:	681b      	ldr	r3, [r3, #0]
 c009408:	430a      	orrs	r2, r1
 c00940a:	605a      	str	r2, [r3, #4]
  }
}
 c00940c:	bf00      	nop
 c00940e:	370c      	adds	r7, #12
 c009410:	46bd      	mov	sp, r7
 c009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 c009416:	4770      	bx	lr

0c009418 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 c009418:	b580      	push	{r7, lr}
 c00941a:	b086      	sub	sp, #24
 c00941c:	af02      	add	r7, sp, #8
 c00941e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c009420:	687b      	ldr	r3, [r7, #4]
 c009422:	2200      	movs	r2, #0
 c009424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 c009428:	f7fc f926 	bl	c005678 <HAL_GetTick>
 c00942c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c00942e:	687b      	ldr	r3, [r7, #4]
 c009430:	681b      	ldr	r3, [r3, #0]
 c009432:	681b      	ldr	r3, [r3, #0]
 c009434:	f003 0308 	and.w	r3, r3, #8
 c009438:	2b08      	cmp	r3, #8
 c00943a:	d10e      	bne.n	c00945a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c00943c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c009440:	9300      	str	r3, [sp, #0]
 c009442:	68fb      	ldr	r3, [r7, #12]
 c009444:	2200      	movs	r2, #0
 c009446:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 c00944a:	6878      	ldr	r0, [r7, #4]
 c00944c:	f000 f82f 	bl	c0094ae <UART_WaitOnFlagUntilTimeout>
 c009450:	4603      	mov	r3, r0
 c009452:	2b00      	cmp	r3, #0
 c009454:	d001      	beq.n	c00945a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 c009456:	2303      	movs	r3, #3
 c009458:	e025      	b.n	c0094a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c00945a:	687b      	ldr	r3, [r7, #4]
 c00945c:	681b      	ldr	r3, [r3, #0]
 c00945e:	681b      	ldr	r3, [r3, #0]
 c009460:	f003 0304 	and.w	r3, r3, #4
 c009464:	2b04      	cmp	r3, #4
 c009466:	d10e      	bne.n	c009486 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c009468:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c00946c:	9300      	str	r3, [sp, #0]
 c00946e:	68fb      	ldr	r3, [r7, #12]
 c009470:	2200      	movs	r2, #0
 c009472:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 c009476:	6878      	ldr	r0, [r7, #4]
 c009478:	f000 f819 	bl	c0094ae <UART_WaitOnFlagUntilTimeout>
 c00947c:	4603      	mov	r3, r0
 c00947e:	2b00      	cmp	r3, #0
 c009480:	d001      	beq.n	c009486 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 c009482:	2303      	movs	r3, #3
 c009484:	e00f      	b.n	c0094a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 c009486:	687b      	ldr	r3, [r7, #4]
 c009488:	2220      	movs	r2, #32
 c00948a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 c00948e:	687b      	ldr	r3, [r7, #4]
 c009490:	2220      	movs	r2, #32
 c009492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c009496:	687b      	ldr	r3, [r7, #4]
 c009498:	2200      	movs	r2, #0
 c00949a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 c00949c:	687b      	ldr	r3, [r7, #4]
 c00949e:	2200      	movs	r2, #0
 c0094a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c0094a4:	2300      	movs	r3, #0
}
 c0094a6:	4618      	mov	r0, r3
 c0094a8:	3710      	adds	r7, #16
 c0094aa:	46bd      	mov	sp, r7
 c0094ac:	bd80      	pop	{r7, pc}

0c0094ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 c0094ae:	b580      	push	{r7, lr}
 c0094b0:	b084      	sub	sp, #16
 c0094b2:	af00      	add	r7, sp, #0
 c0094b4:	60f8      	str	r0, [r7, #12]
 c0094b6:	60b9      	str	r1, [r7, #8]
 c0094b8:	603b      	str	r3, [r7, #0]
 c0094ba:	4613      	mov	r3, r2
 c0094bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c0094be:	e062      	b.n	c009586 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c0094c0:	69bb      	ldr	r3, [r7, #24]
 c0094c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 c0094c6:	d05e      	beq.n	c009586 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c0094c8:	f7fc f8d6 	bl	c005678 <HAL_GetTick>
 c0094cc:	4602      	mov	r2, r0
 c0094ce:	683b      	ldr	r3, [r7, #0]
 c0094d0:	1ad3      	subs	r3, r2, r3
 c0094d2:	69ba      	ldr	r2, [r7, #24]
 c0094d4:	429a      	cmp	r2, r3
 c0094d6:	d302      	bcc.n	c0094de <UART_WaitOnFlagUntilTimeout+0x30>
 c0094d8:	69bb      	ldr	r3, [r7, #24]
 c0094da:	2b00      	cmp	r3, #0
 c0094dc:	d11d      	bne.n	c00951a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c0094de:	68fb      	ldr	r3, [r7, #12]
 c0094e0:	681b      	ldr	r3, [r3, #0]
 c0094e2:	681a      	ldr	r2, [r3, #0]
 c0094e4:	68fb      	ldr	r3, [r7, #12]
 c0094e6:	681b      	ldr	r3, [r3, #0]
 c0094e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 c0094ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c0094ee:	68fb      	ldr	r3, [r7, #12]
 c0094f0:	681b      	ldr	r3, [r3, #0]
 c0094f2:	689a      	ldr	r2, [r3, #8]
 c0094f4:	68fb      	ldr	r3, [r7, #12]
 c0094f6:	681b      	ldr	r3, [r3, #0]
 c0094f8:	f022 0201 	bic.w	r2, r2, #1
 c0094fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 c0094fe:	68fb      	ldr	r3, [r7, #12]
 c009500:	2220      	movs	r2, #32
 c009502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 c009506:	68fb      	ldr	r3, [r7, #12]
 c009508:	2220      	movs	r2, #32
 c00950a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 c00950e:	68fb      	ldr	r3, [r7, #12]
 c009510:	2200      	movs	r2, #0
 c009512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 c009516:	2303      	movs	r3, #3
 c009518:	e045      	b.n	c0095a6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c00951a:	68fb      	ldr	r3, [r7, #12]
 c00951c:	681b      	ldr	r3, [r3, #0]
 c00951e:	681b      	ldr	r3, [r3, #0]
 c009520:	f003 0304 	and.w	r3, r3, #4
 c009524:	2b00      	cmp	r3, #0
 c009526:	d02e      	beq.n	c009586 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c009528:	68fb      	ldr	r3, [r7, #12]
 c00952a:	681b      	ldr	r3, [r3, #0]
 c00952c:	69db      	ldr	r3, [r3, #28]
 c00952e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c009532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c009536:	d126      	bne.n	c009586 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c009538:	68fb      	ldr	r3, [r7, #12]
 c00953a:	681b      	ldr	r3, [r3, #0]
 c00953c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c009540:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c009542:	68fb      	ldr	r3, [r7, #12]
 c009544:	681b      	ldr	r3, [r3, #0]
 c009546:	681a      	ldr	r2, [r3, #0]
 c009548:	68fb      	ldr	r3, [r7, #12]
 c00954a:	681b      	ldr	r3, [r3, #0]
 c00954c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 c009550:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c009552:	68fb      	ldr	r3, [r7, #12]
 c009554:	681b      	ldr	r3, [r3, #0]
 c009556:	689a      	ldr	r2, [r3, #8]
 c009558:	68fb      	ldr	r3, [r7, #12]
 c00955a:	681b      	ldr	r3, [r3, #0]
 c00955c:	f022 0201 	bic.w	r2, r2, #1
 c009560:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 c009562:	68fb      	ldr	r3, [r7, #12]
 c009564:	2220      	movs	r2, #32
 c009566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 c00956a:	68fb      	ldr	r3, [r7, #12]
 c00956c:	2220      	movs	r2, #32
 c00956e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c009572:	68fb      	ldr	r3, [r7, #12]
 c009574:	2220      	movs	r2, #32
 c009576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c00957a:	68fb      	ldr	r3, [r7, #12]
 c00957c:	2200      	movs	r2, #0
 c00957e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 c009582:	2303      	movs	r3, #3
 c009584:	e00f      	b.n	c0095a6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c009586:	68fb      	ldr	r3, [r7, #12]
 c009588:	681b      	ldr	r3, [r3, #0]
 c00958a:	69da      	ldr	r2, [r3, #28]
 c00958c:	68bb      	ldr	r3, [r7, #8]
 c00958e:	4013      	ands	r3, r2
 c009590:	68ba      	ldr	r2, [r7, #8]
 c009592:	429a      	cmp	r2, r3
 c009594:	bf0c      	ite	eq
 c009596:	2301      	moveq	r3, #1
 c009598:	2300      	movne	r3, #0
 c00959a:	b2db      	uxtb	r3, r3
 c00959c:	461a      	mov	r2, r3
 c00959e:	79fb      	ldrb	r3, [r7, #7]
 c0095a0:	429a      	cmp	r2, r3
 c0095a2:	d08d      	beq.n	c0094c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c0095a4:	2300      	movs	r3, #0
}
 c0095a6:	4618      	mov	r0, r3
 c0095a8:	3710      	adds	r7, #16
 c0095aa:	46bd      	mov	sp, r7
 c0095ac:	bd80      	pop	{r7, pc}

0c0095ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 c0095ae:	b480      	push	{r7}
 c0095b0:	b085      	sub	sp, #20
 c0095b2:	af00      	add	r7, sp, #0
 c0095b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 c0095b6:	687b      	ldr	r3, [r7, #4]
 c0095b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c0095bc:	2b01      	cmp	r3, #1
 c0095be:	d101      	bne.n	c0095c4 <HAL_UARTEx_DisableFifoMode+0x16>
 c0095c0:	2302      	movs	r3, #2
 c0095c2:	e027      	b.n	c009614 <HAL_UARTEx_DisableFifoMode+0x66>
 c0095c4:	687b      	ldr	r3, [r7, #4]
 c0095c6:	2201      	movs	r2, #1
 c0095c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c0095cc:	687b      	ldr	r3, [r7, #4]
 c0095ce:	2224      	movs	r2, #36	; 0x24
 c0095d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c0095d4:	687b      	ldr	r3, [r7, #4]
 c0095d6:	681b      	ldr	r3, [r3, #0]
 c0095d8:	681b      	ldr	r3, [r3, #0]
 c0095da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c0095dc:	687b      	ldr	r3, [r7, #4]
 c0095de:	681b      	ldr	r3, [r3, #0]
 c0095e0:	681a      	ldr	r2, [r3, #0]
 c0095e2:	687b      	ldr	r3, [r7, #4]
 c0095e4:	681b      	ldr	r3, [r3, #0]
 c0095e6:	f022 0201 	bic.w	r2, r2, #1
 c0095ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 c0095ec:	68fb      	ldr	r3, [r7, #12]
 c0095ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 c0095f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c0095f4:	687b      	ldr	r3, [r7, #4]
 c0095f6:	2200      	movs	r2, #0
 c0095f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c0095fa:	687b      	ldr	r3, [r7, #4]
 c0095fc:	681b      	ldr	r3, [r3, #0]
 c0095fe:	68fa      	ldr	r2, [r7, #12]
 c009600:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c009602:	687b      	ldr	r3, [r7, #4]
 c009604:	2220      	movs	r2, #32
 c009606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00960a:	687b      	ldr	r3, [r7, #4]
 c00960c:	2200      	movs	r2, #0
 c00960e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c009612:	2300      	movs	r3, #0
}
 c009614:	4618      	mov	r0, r3
 c009616:	3714      	adds	r7, #20
 c009618:	46bd      	mov	sp, r7
 c00961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00961e:	4770      	bx	lr

0c009620 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c009620:	b580      	push	{r7, lr}
 c009622:	b084      	sub	sp, #16
 c009624:	af00      	add	r7, sp, #0
 c009626:	6078      	str	r0, [r7, #4]
 c009628:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c00962a:	687b      	ldr	r3, [r7, #4]
 c00962c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c009630:	2b01      	cmp	r3, #1
 c009632:	d101      	bne.n	c009638 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 c009634:	2302      	movs	r3, #2
 c009636:	e02d      	b.n	c009694 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 c009638:	687b      	ldr	r3, [r7, #4]
 c00963a:	2201      	movs	r2, #1
 c00963c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c009640:	687b      	ldr	r3, [r7, #4]
 c009642:	2224      	movs	r2, #36	; 0x24
 c009644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c009648:	687b      	ldr	r3, [r7, #4]
 c00964a:	681b      	ldr	r3, [r3, #0]
 c00964c:	681b      	ldr	r3, [r3, #0]
 c00964e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c009650:	687b      	ldr	r3, [r7, #4]
 c009652:	681b      	ldr	r3, [r3, #0]
 c009654:	681a      	ldr	r2, [r3, #0]
 c009656:	687b      	ldr	r3, [r7, #4]
 c009658:	681b      	ldr	r3, [r3, #0]
 c00965a:	f022 0201 	bic.w	r2, r2, #1
 c00965e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 c009660:	687b      	ldr	r3, [r7, #4]
 c009662:	681b      	ldr	r3, [r3, #0]
 c009664:	689b      	ldr	r3, [r3, #8]
 c009666:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 c00966a:	687b      	ldr	r3, [r7, #4]
 c00966c:	681b      	ldr	r3, [r3, #0]
 c00966e:	683a      	ldr	r2, [r7, #0]
 c009670:	430a      	orrs	r2, r1
 c009672:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c009674:	6878      	ldr	r0, [r7, #4]
 c009676:	f000 f84f 	bl	c009718 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00967a:	687b      	ldr	r3, [r7, #4]
 c00967c:	681b      	ldr	r3, [r3, #0]
 c00967e:	68fa      	ldr	r2, [r7, #12]
 c009680:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c009682:	687b      	ldr	r3, [r7, #4]
 c009684:	2220      	movs	r2, #32
 c009686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00968a:	687b      	ldr	r3, [r7, #4]
 c00968c:	2200      	movs	r2, #0
 c00968e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c009692:	2300      	movs	r3, #0
}
 c009694:	4618      	mov	r0, r3
 c009696:	3710      	adds	r7, #16
 c009698:	46bd      	mov	sp, r7
 c00969a:	bd80      	pop	{r7, pc}

0c00969c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c00969c:	b580      	push	{r7, lr}
 c00969e:	b084      	sub	sp, #16
 c0096a0:	af00      	add	r7, sp, #0
 c0096a2:	6078      	str	r0, [r7, #4]
 c0096a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c0096a6:	687b      	ldr	r3, [r7, #4]
 c0096a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c0096ac:	2b01      	cmp	r3, #1
 c0096ae:	d101      	bne.n	c0096b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 c0096b0:	2302      	movs	r3, #2
 c0096b2:	e02d      	b.n	c009710 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 c0096b4:	687b      	ldr	r3, [r7, #4]
 c0096b6:	2201      	movs	r2, #1
 c0096b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c0096bc:	687b      	ldr	r3, [r7, #4]
 c0096be:	2224      	movs	r2, #36	; 0x24
 c0096c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c0096c4:	687b      	ldr	r3, [r7, #4]
 c0096c6:	681b      	ldr	r3, [r3, #0]
 c0096c8:	681b      	ldr	r3, [r3, #0]
 c0096ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c0096cc:	687b      	ldr	r3, [r7, #4]
 c0096ce:	681b      	ldr	r3, [r3, #0]
 c0096d0:	681a      	ldr	r2, [r3, #0]
 c0096d2:	687b      	ldr	r3, [r7, #4]
 c0096d4:	681b      	ldr	r3, [r3, #0]
 c0096d6:	f022 0201 	bic.w	r2, r2, #1
 c0096da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 c0096dc:	687b      	ldr	r3, [r7, #4]
 c0096de:	681b      	ldr	r3, [r3, #0]
 c0096e0:	689b      	ldr	r3, [r3, #8]
 c0096e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 c0096e6:	687b      	ldr	r3, [r7, #4]
 c0096e8:	681b      	ldr	r3, [r3, #0]
 c0096ea:	683a      	ldr	r2, [r7, #0]
 c0096ec:	430a      	orrs	r2, r1
 c0096ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c0096f0:	6878      	ldr	r0, [r7, #4]
 c0096f2:	f000 f811 	bl	c009718 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c0096f6:	687b      	ldr	r3, [r7, #4]
 c0096f8:	681b      	ldr	r3, [r3, #0]
 c0096fa:	68fa      	ldr	r2, [r7, #12]
 c0096fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c0096fe:	687b      	ldr	r3, [r7, #4]
 c009700:	2220      	movs	r2, #32
 c009702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c009706:	687b      	ldr	r3, [r7, #4]
 c009708:	2200      	movs	r2, #0
 c00970a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c00970e:	2300      	movs	r3, #0
}
 c009710:	4618      	mov	r0, r3
 c009712:	3710      	adds	r7, #16
 c009714:	46bd      	mov	sp, r7
 c009716:	bd80      	pop	{r7, pc}

0c009718 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 c009718:	b480      	push	{r7}
 c00971a:	b085      	sub	sp, #20
 c00971c:	af00      	add	r7, sp, #0
 c00971e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c009720:	687b      	ldr	r3, [r7, #4]
 c009722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c009724:	2b00      	cmp	r3, #0
 c009726:	d108      	bne.n	c00973a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 c009728:	687b      	ldr	r3, [r7, #4]
 c00972a:	2201      	movs	r2, #1
 c00972c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 c009730:	687b      	ldr	r3, [r7, #4]
 c009732:	2201      	movs	r2, #1
 c009734:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 c009738:	e031      	b.n	c00979e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 c00973a:	2308      	movs	r3, #8
 c00973c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 c00973e:	2308      	movs	r3, #8
 c009740:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c009742:	687b      	ldr	r3, [r7, #4]
 c009744:	681b      	ldr	r3, [r3, #0]
 c009746:	689b      	ldr	r3, [r3, #8]
 c009748:	0e5b      	lsrs	r3, r3, #25
 c00974a:	b2db      	uxtb	r3, r3
 c00974c:	f003 0307 	and.w	r3, r3, #7
 c009750:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c009752:	687b      	ldr	r3, [r7, #4]
 c009754:	681b      	ldr	r3, [r3, #0]
 c009756:	689b      	ldr	r3, [r3, #8]
 c009758:	0f5b      	lsrs	r3, r3, #29
 c00975a:	b2db      	uxtb	r3, r3
 c00975c:	f003 0307 	and.w	r3, r3, #7
 c009760:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c009762:	7bbb      	ldrb	r3, [r7, #14]
 c009764:	7b3a      	ldrb	r2, [r7, #12]
 c009766:	4911      	ldr	r1, [pc, #68]	; (c0097ac <UARTEx_SetNbDataToProcess+0x94>)
 c009768:	5c8a      	ldrb	r2, [r1, r2]
 c00976a:	fb02 f303 	mul.w	r3, r2, r3
 c00976e:	7b3a      	ldrb	r2, [r7, #12]
 c009770:	490f      	ldr	r1, [pc, #60]	; (c0097b0 <UARTEx_SetNbDataToProcess+0x98>)
 c009772:	5c8a      	ldrb	r2, [r1, r2]
 c009774:	fb93 f3f2 	sdiv	r3, r3, r2
 c009778:	b29a      	uxth	r2, r3
 c00977a:	687b      	ldr	r3, [r7, #4]
 c00977c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c009780:	7bfb      	ldrb	r3, [r7, #15]
 c009782:	7b7a      	ldrb	r2, [r7, #13]
 c009784:	4909      	ldr	r1, [pc, #36]	; (c0097ac <UARTEx_SetNbDataToProcess+0x94>)
 c009786:	5c8a      	ldrb	r2, [r1, r2]
 c009788:	fb02 f303 	mul.w	r3, r2, r3
 c00978c:	7b7a      	ldrb	r2, [r7, #13]
 c00978e:	4908      	ldr	r1, [pc, #32]	; (c0097b0 <UARTEx_SetNbDataToProcess+0x98>)
 c009790:	5c8a      	ldrb	r2, [r1, r2]
 c009792:	fb93 f3f2 	sdiv	r3, r3, r2
 c009796:	b29a      	uxth	r2, r3
 c009798:	687b      	ldr	r3, [r7, #4]
 c00979a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 c00979e:	bf00      	nop
 c0097a0:	3714      	adds	r7, #20
 c0097a2:	46bd      	mov	sp, r7
 c0097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0097a8:	4770      	bx	lr
 c0097aa:	bf00      	nop
 c0097ac:	0c009994 	.word	0x0c009994
 c0097b0:	0c00999c 	.word	0x0c00999c

0c0097b4 <__libc_init_array>:
 c0097b4:	b570      	push	{r4, r5, r6, lr}
 c0097b6:	4d0d      	ldr	r5, [pc, #52]	; (c0097ec <__libc_init_array+0x38>)
 c0097b8:	2600      	movs	r6, #0
 c0097ba:	4c0d      	ldr	r4, [pc, #52]	; (c0097f0 <__libc_init_array+0x3c>)
 c0097bc:	1b64      	subs	r4, r4, r5
 c0097be:	10a4      	asrs	r4, r4, #2
 c0097c0:	42a6      	cmp	r6, r4
 c0097c2:	d109      	bne.n	c0097d8 <__libc_init_array+0x24>
 c0097c4:	4d0b      	ldr	r5, [pc, #44]	; (c0097f4 <__libc_init_array+0x40>)
 c0097c6:	2600      	movs	r6, #0
 c0097c8:	4c0b      	ldr	r4, [pc, #44]	; (c0097f8 <__libc_init_array+0x44>)
 c0097ca:	f000 f82d 	bl	c009828 <_init>
 c0097ce:	1b64      	subs	r4, r4, r5
 c0097d0:	10a4      	asrs	r4, r4, #2
 c0097d2:	42a6      	cmp	r6, r4
 c0097d4:	d105      	bne.n	c0097e2 <__libc_init_array+0x2e>
 c0097d6:	bd70      	pop	{r4, r5, r6, pc}
 c0097d8:	f855 3b04 	ldr.w	r3, [r5], #4
 c0097dc:	3601      	adds	r6, #1
 c0097de:	4798      	blx	r3
 c0097e0:	e7ee      	b.n	c0097c0 <__libc_init_array+0xc>
 c0097e2:	f855 3b04 	ldr.w	r3, [r5], #4
 c0097e6:	3601      	adds	r6, #1
 c0097e8:	4798      	blx	r3
 c0097ea:	e7f2      	b.n	c0097d2 <__libc_init_array+0x1e>
 c0097ec:	0c0099ac 	.word	0x0c0099ac
 c0097f0:	0c0099ac 	.word	0x0c0099ac
 c0097f4:	0c0099ac 	.word	0x0c0099ac
 c0097f8:	0c0099b0 	.word	0x0c0099b0

0c0097fc <memcpy>:
 c0097fc:	440a      	add	r2, r1
 c0097fe:	1e43      	subs	r3, r0, #1
 c009800:	4291      	cmp	r1, r2
 c009802:	d100      	bne.n	c009806 <memcpy+0xa>
 c009804:	4770      	bx	lr
 c009806:	b510      	push	{r4, lr}
 c009808:	f811 4b01 	ldrb.w	r4, [r1], #1
 c00980c:	4291      	cmp	r1, r2
 c00980e:	f803 4f01 	strb.w	r4, [r3, #1]!
 c009812:	d1f9      	bne.n	c009808 <memcpy+0xc>
 c009814:	bd10      	pop	{r4, pc}

0c009816 <memset>:
 c009816:	4402      	add	r2, r0
 c009818:	4603      	mov	r3, r0
 c00981a:	4293      	cmp	r3, r2
 c00981c:	d100      	bne.n	c009820 <memset+0xa>
 c00981e:	4770      	bx	lr
 c009820:	f803 1b01 	strb.w	r1, [r3], #1
 c009824:	e7f9      	b.n	c00981a <memset+0x4>
	...

0c009828 <_init>:
 c009828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00982a:	bf00      	nop
 c00982c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00982e:	bc08      	pop	{r3}
 c009830:	469e      	mov	lr, r3
 c009832:	4770      	bx	lr

0c009834 <_fini>:
 c009834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c009836:	bf00      	nop
 c009838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00983a:	bc08      	pop	{r3}
 c00983c:	469e      	mov	lr, r3
 c00983e:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_SystemCoreClockUpdate>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c5 bc0c 	b.w	c003820 <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e008 <SECURE_log_cond_br>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c5 b93b 	b.w	c003286 <__acle_se_SECURE_log_cond_br>

0c03e010 <SECURE_RunCallback>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c4 bfec 	b.w	c002ff0 <__acle_se_SECURE_RunCallback>

0c03e018 <SECURE_log_call>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c5 b8ea 	b.w	c0031f4 <__acle_se_SECURE_log_call>

0c03e020 <SECURE_record_output_data>:
 c03e020:	e97f e97f 	sg
 c03e024:	f7c5 b9b8 	b.w	c003398 <__acle_se_SECURE_record_output_data>

0c03e028 <SECURE_Initialize_CFA_engine>:
 c03e028:	e97f e97f 	sg
 c03e02c:	f7c5 b81e 	b.w	c00306c <__acle_se_SECURE_Initialize_CFA_engine>

0c03e030 <SECURE_Initialize_Attestation>:
 c03e030:	e97f e97f 	sg
 c03e034:	f7c5 b856 	b.w	c0030e4 <__acle_se_SECURE_Initialize_Attestation>

0c03e038 <SECURE_log_ret>:
 c03e038:	e97f e97f 	sg
 c03e03c:	f7c5 b88e 	b.w	c00315c <__acle_se_SECURE_log_ret>

0c03e040 <SECURE_RegisterCallback>:
 c03e040:	e97f e97f 	sg
 c03e044:	f7c4 bf70 	b.w	c002f28 <__acle_se_SECURE_RegisterCallback>

0c03e048 <SECURE_run_attestation_wait_mode>:
 c03e048:	e97f e97f 	sg
 c03e04c:	f7c5 b968 	b.w	c003320 <__acle_se_SECURE_run_attestation_wait_mode>
	...
