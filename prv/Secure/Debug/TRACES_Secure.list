
TRACES_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009058  0c000200  0c000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0c009258  0c009258  00019258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c0093bc  0c0093bc  0002e060  2**0
                  CONTENTS
  4 .ARM          00000008  0c0093bc  0c0093bc  000193bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0c0093c4  0c0093c4  0002e060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c0093c4  0c0093c4  000193c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c0093c8  0c0093c8  000193c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  30000000  0c0093cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .cfa_data     00002068  30000074  0c009440  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .gnu.sgstubs  00000060  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .bss          00000384  300020dc  300020dc  000320dc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  30002460  30002460  000320dc  2**0
                  ALLOC
 13 .ARM.attributes 00000036  00000000  00000000  0002e060  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c6fc  00000000  00000000  0002e096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003e9b  00000000  00000000  0004a792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a80  00000000  00000000  0004e630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000018e8  00000000  00000000  000500b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004df4  00000000  00000000  00051998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001dc79  00000000  00000000  0005678c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00112e03  00000000  00000000  00074405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00187208  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006f6c  00000000  00000000  00187258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c000200 <__do_global_dtors_aux>:
 c000200:	b510      	push	{r4, lr}
 c000202:	4c05      	ldr	r4, [pc, #20]	; (c000218 <__do_global_dtors_aux+0x18>)
 c000204:	7823      	ldrb	r3, [r4, #0]
 c000206:	b933      	cbnz	r3, c000216 <__do_global_dtors_aux+0x16>
 c000208:	4b04      	ldr	r3, [pc, #16]	; (c00021c <__do_global_dtors_aux+0x1c>)
 c00020a:	b113      	cbz	r3, c000212 <__do_global_dtors_aux+0x12>
 c00020c:	4804      	ldr	r0, [pc, #16]	; (c000220 <__do_global_dtors_aux+0x20>)
 c00020e:	e000      	b.n	c000212 <__do_global_dtors_aux+0x12>
 c000210:	bf00      	nop
 c000212:	2301      	movs	r3, #1
 c000214:	7023      	strb	r3, [r4, #0]
 c000216:	bd10      	pop	{r4, pc}
 c000218:	300020dc 	.word	0x300020dc
 c00021c:	00000000 	.word	0x00000000
 c000220:	0c009240 	.word	0x0c009240

0c000224 <frame_dummy>:
 c000224:	b508      	push	{r3, lr}
 c000226:	4b03      	ldr	r3, [pc, #12]	; (c000234 <frame_dummy+0x10>)
 c000228:	b11b      	cbz	r3, c000232 <frame_dummy+0xe>
 c00022a:	4903      	ldr	r1, [pc, #12]	; (c000238 <frame_dummy+0x14>)
 c00022c:	4803      	ldr	r0, [pc, #12]	; (c00023c <frame_dummy+0x18>)
 c00022e:	e000      	b.n	c000232 <frame_dummy+0xe>
 c000230:	bf00      	nop
 c000232:	bd08      	pop	{r3, pc}
 c000234:	00000000 	.word	0x00000000
 c000238:	300020e0 	.word	0x300020e0
 c00023c:	0c009240 	.word	0x0c009240

0c000240 <strcmp>:
 c000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 c000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 c000248:	2a01      	cmp	r2, #1
 c00024a:	bf28      	it	cs
 c00024c:	429a      	cmpcs	r2, r3
 c00024e:	d0f7      	beq.n	c000240 <strcmp>
 c000250:	1ad0      	subs	r0, r2, r3
 c000252:	4770      	bx	lr

0c000254 <__gnu_cmse_nonsecure_call>:
 c000254:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000258:	4627      	mov	r7, r4
 c00025a:	46a0      	mov	r8, r4
 c00025c:	46a1      	mov	r9, r4
 c00025e:	46a2      	mov	sl, r4
 c000260:	46a3      	mov	fp, r4
 c000262:	46a4      	mov	ip, r4
 c000264:	ed2d 8b10 	vpush	{d8-d15}
 c000268:	f04f 0500 	mov.w	r5, #0
 c00026c:	ec45 5b18 	vmov	d8, r5, r5
 c000270:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000274:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000278:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c00027c:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000280:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000284:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000288:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c00028c:	eef1 5a10 	vmrs	r5, fpscr
 c000290:	f64f 7660 	movw	r6, #65376	; 0xff60
 c000294:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c000298:	4035      	ands	r5, r6
 c00029a:	eee1 5a10 	vmsr	fpscr, r5
 c00029e:	f384 8800 	msr	CPSR_f, r4
 c0002a2:	4625      	mov	r5, r4
 c0002a4:	4626      	mov	r6, r4
 c0002a6:	47a4      	blxns	r4
 c0002a8:	ecbd 8b10 	vpop	{d8-d15}
 c0002ac:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c0002b0 <__aeabi_uldivmod>:
 c0002b0:	b953      	cbnz	r3, c0002c8 <__aeabi_uldivmod+0x18>
 c0002b2:	b94a      	cbnz	r2, c0002c8 <__aeabi_uldivmod+0x18>
 c0002b4:	2900      	cmp	r1, #0
 c0002b6:	bf08      	it	eq
 c0002b8:	2800      	cmpeq	r0, #0
 c0002ba:	bf1c      	itt	ne
 c0002bc:	f04f 31ff 	movne.w	r1, #4294967295
 c0002c0:	f04f 30ff 	movne.w	r0, #4294967295
 c0002c4:	f000 b982 	b.w	c0005cc <__aeabi_idiv0>
 c0002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 c0002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c0002d0:	f000 f806 	bl	c0002e0 <__udivmoddi4>
 c0002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 c0002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c0002dc:	b004      	add	sp, #16
 c0002de:	4770      	bx	lr

0c0002e0 <__udivmoddi4>:
 c0002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0002e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 c0002e6:	4604      	mov	r4, r0
 c0002e8:	460f      	mov	r7, r1
 c0002ea:	2b00      	cmp	r3, #0
 c0002ec:	d148      	bne.n	c000380 <__udivmoddi4+0xa0>
 c0002ee:	428a      	cmp	r2, r1
 c0002f0:	4694      	mov	ip, r2
 c0002f2:	d961      	bls.n	c0003b8 <__udivmoddi4+0xd8>
 c0002f4:	fab2 f382 	clz	r3, r2
 c0002f8:	b143      	cbz	r3, c00030c <__udivmoddi4+0x2c>
 c0002fa:	f1c3 0120 	rsb	r1, r3, #32
 c0002fe:	409f      	lsls	r7, r3
 c000300:	fa02 fc03 	lsl.w	ip, r2, r3
 c000304:	409c      	lsls	r4, r3
 c000306:	fa20 f101 	lsr.w	r1, r0, r1
 c00030a:	430f      	orrs	r7, r1
 c00030c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 c000310:	fa1f fe8c 	uxth.w	lr, ip
 c000314:	0c22      	lsrs	r2, r4, #16
 c000316:	fbb7 f6f1 	udiv	r6, r7, r1
 c00031a:	fb01 7716 	mls	r7, r1, r6, r7
 c00031e:	fb06 f00e 	mul.w	r0, r6, lr
 c000322:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 c000326:	4290      	cmp	r0, r2
 c000328:	d908      	bls.n	c00033c <__udivmoddi4+0x5c>
 c00032a:	eb1c 0202 	adds.w	r2, ip, r2
 c00032e:	f106 37ff 	add.w	r7, r6, #4294967295
 c000332:	d202      	bcs.n	c00033a <__udivmoddi4+0x5a>
 c000334:	4290      	cmp	r0, r2
 c000336:	f200 8137 	bhi.w	c0005a8 <__udivmoddi4+0x2c8>
 c00033a:	463e      	mov	r6, r7
 c00033c:	1a12      	subs	r2, r2, r0
 c00033e:	b2a4      	uxth	r4, r4
 c000340:	fbb2 f0f1 	udiv	r0, r2, r1
 c000344:	fb01 2210 	mls	r2, r1, r0, r2
 c000348:	fb00 fe0e 	mul.w	lr, r0, lr
 c00034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 c000350:	45a6      	cmp	lr, r4
 c000352:	d908      	bls.n	c000366 <__udivmoddi4+0x86>
 c000354:	eb1c 0404 	adds.w	r4, ip, r4
 c000358:	f100 32ff 	add.w	r2, r0, #4294967295
 c00035c:	d202      	bcs.n	c000364 <__udivmoddi4+0x84>
 c00035e:	45a6      	cmp	lr, r4
 c000360:	f200 811c 	bhi.w	c00059c <__udivmoddi4+0x2bc>
 c000364:	4610      	mov	r0, r2
 c000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 c00036a:	eba4 040e 	sub.w	r4, r4, lr
 c00036e:	2600      	movs	r6, #0
 c000370:	b11d      	cbz	r5, c00037a <__udivmoddi4+0x9a>
 c000372:	40dc      	lsrs	r4, r3
 c000374:	2300      	movs	r3, #0
 c000376:	e9c5 4300 	strd	r4, r3, [r5]
 c00037a:	4631      	mov	r1, r6
 c00037c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000380:	428b      	cmp	r3, r1
 c000382:	d909      	bls.n	c000398 <__udivmoddi4+0xb8>
 c000384:	2d00      	cmp	r5, #0
 c000386:	f000 80fd 	beq.w	c000584 <__udivmoddi4+0x2a4>
 c00038a:	2600      	movs	r6, #0
 c00038c:	e9c5 0100 	strd	r0, r1, [r5]
 c000390:	4630      	mov	r0, r6
 c000392:	4631      	mov	r1, r6
 c000394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000398:	fab3 f683 	clz	r6, r3
 c00039c:	2e00      	cmp	r6, #0
 c00039e:	d14b      	bne.n	c000438 <__udivmoddi4+0x158>
 c0003a0:	428b      	cmp	r3, r1
 c0003a2:	f0c0 80f2 	bcc.w	c00058a <__udivmoddi4+0x2aa>
 c0003a6:	4282      	cmp	r2, r0
 c0003a8:	f240 80ef 	bls.w	c00058a <__udivmoddi4+0x2aa>
 c0003ac:	4630      	mov	r0, r6
 c0003ae:	2d00      	cmp	r5, #0
 c0003b0:	d0e3      	beq.n	c00037a <__udivmoddi4+0x9a>
 c0003b2:	e9c5 4700 	strd	r4, r7, [r5]
 c0003b6:	e7e0      	b.n	c00037a <__udivmoddi4+0x9a>
 c0003b8:	b902      	cbnz	r2, c0003bc <__udivmoddi4+0xdc>
 c0003ba:	deff      	udf	#255	; 0xff
 c0003bc:	fab2 f382 	clz	r3, r2
 c0003c0:	2b00      	cmp	r3, #0
 c0003c2:	f040 809d 	bne.w	c000500 <__udivmoddi4+0x220>
 c0003c6:	1a89      	subs	r1, r1, r2
 c0003c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 c0003cc:	b297      	uxth	r7, r2
 c0003ce:	2601      	movs	r6, #1
 c0003d0:	0c20      	lsrs	r0, r4, #16
 c0003d2:	fbb1 f2fe 	udiv	r2, r1, lr
 c0003d6:	fb0e 1112 	mls	r1, lr, r2, r1
 c0003da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c0003de:	fb07 f002 	mul.w	r0, r7, r2
 c0003e2:	4288      	cmp	r0, r1
 c0003e4:	d90f      	bls.n	c000406 <__udivmoddi4+0x126>
 c0003e6:	eb1c 0101 	adds.w	r1, ip, r1
 c0003ea:	f102 38ff 	add.w	r8, r2, #4294967295
 c0003ee:	bf2c      	ite	cs
 c0003f0:	f04f 0901 	movcs.w	r9, #1
 c0003f4:	f04f 0900 	movcc.w	r9, #0
 c0003f8:	4288      	cmp	r0, r1
 c0003fa:	d903      	bls.n	c000404 <__udivmoddi4+0x124>
 c0003fc:	f1b9 0f00 	cmp.w	r9, #0
 c000400:	f000 80cf 	beq.w	c0005a2 <__udivmoddi4+0x2c2>
 c000404:	4642      	mov	r2, r8
 c000406:	1a09      	subs	r1, r1, r0
 c000408:	b2a4      	uxth	r4, r4
 c00040a:	fbb1 f0fe 	udiv	r0, r1, lr
 c00040e:	fb0e 1110 	mls	r1, lr, r0, r1
 c000412:	fb00 f707 	mul.w	r7, r0, r7
 c000416:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 c00041a:	42a7      	cmp	r7, r4
 c00041c:	d908      	bls.n	c000430 <__udivmoddi4+0x150>
 c00041e:	eb1c 0404 	adds.w	r4, ip, r4
 c000422:	f100 31ff 	add.w	r1, r0, #4294967295
 c000426:	d202      	bcs.n	c00042e <__udivmoddi4+0x14e>
 c000428:	42a7      	cmp	r7, r4
 c00042a:	f200 80b4 	bhi.w	c000596 <__udivmoddi4+0x2b6>
 c00042e:	4608      	mov	r0, r1
 c000430:	1be4      	subs	r4, r4, r7
 c000432:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 c000436:	e79b      	b.n	c000370 <__udivmoddi4+0x90>
 c000438:	f1c6 0720 	rsb	r7, r6, #32
 c00043c:	40b3      	lsls	r3, r6
 c00043e:	fa01 f406 	lsl.w	r4, r1, r6
 c000442:	fa22 fc07 	lsr.w	ip, r2, r7
 c000446:	40f9      	lsrs	r1, r7
 c000448:	40b2      	lsls	r2, r6
 c00044a:	ea4c 0c03 	orr.w	ip, ip, r3
 c00044e:	fa20 f307 	lsr.w	r3, r0, r7
 c000452:	ea4f 491c 	mov.w	r9, ip, lsr #16
 c000456:	431c      	orrs	r4, r3
 c000458:	fa1f fe8c 	uxth.w	lr, ip
 c00045c:	fa00 f306 	lsl.w	r3, r0, r6
 c000460:	0c20      	lsrs	r0, r4, #16
 c000462:	fbb1 f8f9 	udiv	r8, r1, r9
 c000466:	fb09 1118 	mls	r1, r9, r8, r1
 c00046a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c00046e:	fb08 f00e 	mul.w	r0, r8, lr
 c000472:	4288      	cmp	r0, r1
 c000474:	d90f      	bls.n	c000496 <__udivmoddi4+0x1b6>
 c000476:	eb1c 0101 	adds.w	r1, ip, r1
 c00047a:	f108 3aff 	add.w	sl, r8, #4294967295
 c00047e:	bf2c      	ite	cs
 c000480:	f04f 0b01 	movcs.w	fp, #1
 c000484:	f04f 0b00 	movcc.w	fp, #0
 c000488:	4288      	cmp	r0, r1
 c00048a:	d903      	bls.n	c000494 <__udivmoddi4+0x1b4>
 c00048c:	f1bb 0f00 	cmp.w	fp, #0
 c000490:	f000 808d 	beq.w	c0005ae <__udivmoddi4+0x2ce>
 c000494:	46d0      	mov	r8, sl
 c000496:	1a09      	subs	r1, r1, r0
 c000498:	b2a4      	uxth	r4, r4
 c00049a:	fbb1 f0f9 	udiv	r0, r1, r9
 c00049e:	fb09 1110 	mls	r1, r9, r0, r1
 c0004a2:	fb00 fe0e 	mul.w	lr, r0, lr
 c0004a6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 c0004aa:	458e      	cmp	lr, r1
 c0004ac:	d907      	bls.n	c0004be <__udivmoddi4+0x1de>
 c0004ae:	eb1c 0101 	adds.w	r1, ip, r1
 c0004b2:	f100 34ff 	add.w	r4, r0, #4294967295
 c0004b6:	d201      	bcs.n	c0004bc <__udivmoddi4+0x1dc>
 c0004b8:	458e      	cmp	lr, r1
 c0004ba:	d87f      	bhi.n	c0005bc <__udivmoddi4+0x2dc>
 c0004bc:	4620      	mov	r0, r4
 c0004be:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 c0004c2:	eba1 010e 	sub.w	r1, r1, lr
 c0004c6:	fba0 9802 	umull	r9, r8, r0, r2
 c0004ca:	4541      	cmp	r1, r8
 c0004cc:	464c      	mov	r4, r9
 c0004ce:	46c6      	mov	lr, r8
 c0004d0:	d302      	bcc.n	c0004d8 <__udivmoddi4+0x1f8>
 c0004d2:	d106      	bne.n	c0004e2 <__udivmoddi4+0x202>
 c0004d4:	454b      	cmp	r3, r9
 c0004d6:	d204      	bcs.n	c0004e2 <__udivmoddi4+0x202>
 c0004d8:	3801      	subs	r0, #1
 c0004da:	ebb9 0402 	subs.w	r4, r9, r2
 c0004de:	eb68 0e0c 	sbc.w	lr, r8, ip
 c0004e2:	2d00      	cmp	r5, #0
 c0004e4:	d070      	beq.n	c0005c8 <__udivmoddi4+0x2e8>
 c0004e6:	1b1a      	subs	r2, r3, r4
 c0004e8:	eb61 010e 	sbc.w	r1, r1, lr
 c0004ec:	fa22 f306 	lsr.w	r3, r2, r6
 c0004f0:	fa01 f707 	lsl.w	r7, r1, r7
 c0004f4:	40f1      	lsrs	r1, r6
 c0004f6:	2600      	movs	r6, #0
 c0004f8:	431f      	orrs	r7, r3
 c0004fa:	e9c5 7100 	strd	r7, r1, [r5]
 c0004fe:	e73c      	b.n	c00037a <__udivmoddi4+0x9a>
 c000500:	fa02 fc03 	lsl.w	ip, r2, r3
 c000504:	f1c3 0020 	rsb	r0, r3, #32
 c000508:	fa01 f203 	lsl.w	r2, r1, r3
 c00050c:	fa21 f600 	lsr.w	r6, r1, r0
 c000510:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 c000514:	fa24 f100 	lsr.w	r1, r4, r0
 c000518:	fa1f f78c 	uxth.w	r7, ip
 c00051c:	409c      	lsls	r4, r3
 c00051e:	4311      	orrs	r1, r2
 c000520:	fbb6 f0fe 	udiv	r0, r6, lr
 c000524:	0c0a      	lsrs	r2, r1, #16
 c000526:	fb0e 6610 	mls	r6, lr, r0, r6
 c00052a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 c00052e:	fb00 f607 	mul.w	r6, r0, r7
 c000532:	4296      	cmp	r6, r2
 c000534:	d90e      	bls.n	c000554 <__udivmoddi4+0x274>
 c000536:	eb1c 0202 	adds.w	r2, ip, r2
 c00053a:	f100 38ff 	add.w	r8, r0, #4294967295
 c00053e:	bf2c      	ite	cs
 c000540:	f04f 0901 	movcs.w	r9, #1
 c000544:	f04f 0900 	movcc.w	r9, #0
 c000548:	4296      	cmp	r6, r2
 c00054a:	d902      	bls.n	c000552 <__udivmoddi4+0x272>
 c00054c:	f1b9 0f00 	cmp.w	r9, #0
 c000550:	d031      	beq.n	c0005b6 <__udivmoddi4+0x2d6>
 c000552:	4640      	mov	r0, r8
 c000554:	1b92      	subs	r2, r2, r6
 c000556:	b289      	uxth	r1, r1
 c000558:	fbb2 f6fe 	udiv	r6, r2, lr
 c00055c:	fb0e 2216 	mls	r2, lr, r6, r2
 c000560:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 c000564:	fb06 f207 	mul.w	r2, r6, r7
 c000568:	428a      	cmp	r2, r1
 c00056a:	d907      	bls.n	c00057c <__udivmoddi4+0x29c>
 c00056c:	eb1c 0101 	adds.w	r1, ip, r1
 c000570:	f106 38ff 	add.w	r8, r6, #4294967295
 c000574:	d201      	bcs.n	c00057a <__udivmoddi4+0x29a>
 c000576:	428a      	cmp	r2, r1
 c000578:	d823      	bhi.n	c0005c2 <__udivmoddi4+0x2e2>
 c00057a:	4646      	mov	r6, r8
 c00057c:	1a89      	subs	r1, r1, r2
 c00057e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 c000582:	e725      	b.n	c0003d0 <__udivmoddi4+0xf0>
 c000584:	462e      	mov	r6, r5
 c000586:	4628      	mov	r0, r5
 c000588:	e6f7      	b.n	c00037a <__udivmoddi4+0x9a>
 c00058a:	1a84      	subs	r4, r0, r2
 c00058c:	eb61 0303 	sbc.w	r3, r1, r3
 c000590:	2001      	movs	r0, #1
 c000592:	461f      	mov	r7, r3
 c000594:	e70b      	b.n	c0003ae <__udivmoddi4+0xce>
 c000596:	4464      	add	r4, ip
 c000598:	3802      	subs	r0, #2
 c00059a:	e749      	b.n	c000430 <__udivmoddi4+0x150>
 c00059c:	4464      	add	r4, ip
 c00059e:	3802      	subs	r0, #2
 c0005a0:	e6e1      	b.n	c000366 <__udivmoddi4+0x86>
 c0005a2:	3a02      	subs	r2, #2
 c0005a4:	4461      	add	r1, ip
 c0005a6:	e72e      	b.n	c000406 <__udivmoddi4+0x126>
 c0005a8:	3e02      	subs	r6, #2
 c0005aa:	4462      	add	r2, ip
 c0005ac:	e6c6      	b.n	c00033c <__udivmoddi4+0x5c>
 c0005ae:	f1a8 0802 	sub.w	r8, r8, #2
 c0005b2:	4461      	add	r1, ip
 c0005b4:	e76f      	b.n	c000496 <__udivmoddi4+0x1b6>
 c0005b6:	3802      	subs	r0, #2
 c0005b8:	4462      	add	r2, ip
 c0005ba:	e7cb      	b.n	c000554 <__udivmoddi4+0x274>
 c0005bc:	3802      	subs	r0, #2
 c0005be:	4461      	add	r1, ip
 c0005c0:	e77d      	b.n	c0004be <__udivmoddi4+0x1de>
 c0005c2:	3e02      	subs	r6, #2
 c0005c4:	4461      	add	r1, ip
 c0005c6:	e7d9      	b.n	c00057c <__udivmoddi4+0x29c>
 c0005c8:	462e      	mov	r6, r5
 c0005ca:	e6d6      	b.n	c00037a <__udivmoddi4+0x9a>

0c0005cc <__aeabi_idiv0>:
 c0005cc:	4770      	bx	lr
 c0005ce:	bf00      	nop

0c0005d0 <load32>:
  uint16_t x;
  memcpy(&x, b, 2);
  return x;
}

inline static uint32_t load32(uint8_t *b) {
 c0005d0:	b480      	push	{r7}
 c0005d2:	b085      	sub	sp, #20
 c0005d4:	af00      	add	r7, sp, #0
 c0005d6:	6078      	str	r0, [r7, #4]
 c0005d8:	687b      	ldr	r3, [r7, #4]
 c0005da:	681b      	ldr	r3, [r3, #0]
  uint32_t x;
  memcpy(&x, b, 4);
 c0005dc:	60fb      	str	r3, [r7, #12]
  return x;
 c0005de:	68fb      	ldr	r3, [r7, #12]
}
 c0005e0:	4618      	mov	r0, r3
 c0005e2:	3714      	adds	r7, #20
 c0005e4:	46bd      	mov	sp, r7
 c0005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0005ea:	4770      	bx	lr

0c0005ec <store32>:
  return x;
}

inline static void store16(uint8_t *b, uint16_t i) { memcpy(b, &i, 2); }

inline static void store32(uint8_t *b, uint32_t i) { memcpy(b, &i, 4); }
 c0005ec:	b480      	push	{r7}
 c0005ee:	b083      	sub	sp, #12
 c0005f0:	af00      	add	r7, sp, #0
 c0005f2:	6078      	str	r0, [r7, #4]
 c0005f4:	6039      	str	r1, [r7, #0]
 c0005f6:	683a      	ldr	r2, [r7, #0]
 c0005f8:	687b      	ldr	r3, [r7, #4]
 c0005fa:	601a      	str	r2, [r3, #0]
 c0005fc:	bf00      	nop
 c0005fe:	370c      	adds	r7, #12
 c000600:	46bd      	mov	sp, r7
 c000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000606:	4770      	bx	lr

0c000608 <store64>:

inline static void store64(uint8_t *b, uint64_t i) { memcpy(b, &i, 8); }
 c000608:	b580      	push	{r7, lr}
 c00060a:	b084      	sub	sp, #16
 c00060c:	af00      	add	r7, sp, #0
 c00060e:	60f8      	str	r0, [r7, #12]
 c000610:	e9c7 2300 	strd	r2, r3, [r7]
 c000614:	463b      	mov	r3, r7
 c000616:	2208      	movs	r2, #8
 c000618:	4619      	mov	r1, r3
 c00061a:	68f8      	ldr	r0, [r7, #12]
 c00061c:	f008 fdfa 	bl	c009214 <memcpy>
 c000620:	bf00      	nop
 c000622:	3710      	adds	r7, #16
 c000624:	46bd      	mov	sp, r7
 c000626:	bd80      	pop	{r7, pc}

0c000628 <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes>:

#include "Hacl_SHA2_256.h"

static void
Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes(uint32_t *output, uint8_t *input, uint32_t len)
{
 c000628:	b580      	push	{r7, lr}
 c00062a:	b088      	sub	sp, #32
 c00062c:	af00      	add	r7, sp, #0
 c00062e:	60f8      	str	r0, [r7, #12]
 c000630:	60b9      	str	r1, [r7, #8]
 c000632:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c000634:	2300      	movs	r3, #0
 c000636:	61fb      	str	r3, [r7, #28]
 c000638:	e021      	b.n	c00067e <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes+0x56>
  {
    uint8_t *x0 = input + (uint32_t)4U * i;
 c00063a:	69fb      	ldr	r3, [r7, #28]
 c00063c:	009b      	lsls	r3, r3, #2
 c00063e:	68ba      	ldr	r2, [r7, #8]
 c000640:	4413      	add	r3, r2
 c000642:	61bb      	str	r3, [r7, #24]
    uint32_t inputi = load32_be(x0);
 c000644:	69b8      	ldr	r0, [r7, #24]
 c000646:	f7ff ffc3 	bl	c0005d0 <load32>
 c00064a:	6178      	str	r0, [r7, #20]
 c00064c:	697b      	ldr	r3, [r7, #20]
 c00064e:	0e1a      	lsrs	r2, r3, #24
 c000650:	697b      	ldr	r3, [r7, #20]
 c000652:	0a1b      	lsrs	r3, r3, #8
 c000654:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c000658:	431a      	orrs	r2, r3
 c00065a:	697b      	ldr	r3, [r7, #20]
 c00065c:	021b      	lsls	r3, r3, #8
 c00065e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c000662:	431a      	orrs	r2, r3
 c000664:	697b      	ldr	r3, [r7, #20]
 c000666:	061b      	lsls	r3, r3, #24
 c000668:	4313      	orrs	r3, r2
 c00066a:	613b      	str	r3, [r7, #16]
    output[i] = inputi;
 c00066c:	69fb      	ldr	r3, [r7, #28]
 c00066e:	009b      	lsls	r3, r3, #2
 c000670:	68fa      	ldr	r2, [r7, #12]
 c000672:	4413      	add	r3, r2
 c000674:	693a      	ldr	r2, [r7, #16]
 c000676:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c000678:	69fb      	ldr	r3, [r7, #28]
 c00067a:	3301      	adds	r3, #1
 c00067c:	61fb      	str	r3, [r7, #28]
 c00067e:	69fa      	ldr	r2, [r7, #28]
 c000680:	687b      	ldr	r3, [r7, #4]
 c000682:	429a      	cmp	r2, r3
 c000684:	d3d9      	bcc.n	c00063a <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes+0x12>
  }
}
 c000686:	bf00      	nop
 c000688:	bf00      	nop
 c00068a:	3720      	adds	r7, #32
 c00068c:	46bd      	mov	sp, r7
 c00068e:	bd80      	pop	{r7, pc}

0c000690 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes>:

static void
Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes(uint8_t *output, uint32_t *input, uint32_t len)
{
 c000690:	b580      	push	{r7, lr}
 c000692:	b088      	sub	sp, #32
 c000694:	af00      	add	r7, sp, #0
 c000696:	60f8      	str	r0, [r7, #12]
 c000698:	60b9      	str	r1, [r7, #8]
 c00069a:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c00069c:	2300      	movs	r3, #0
 c00069e:	61fb      	str	r3, [r7, #28]
 c0006a0:	e022      	b.n	c0006e8 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes+0x58>
  {
    uint32_t hd1 = input[i];
 c0006a2:	69fb      	ldr	r3, [r7, #28]
 c0006a4:	009b      	lsls	r3, r3, #2
 c0006a6:	68ba      	ldr	r2, [r7, #8]
 c0006a8:	4413      	add	r3, r2
 c0006aa:	681b      	ldr	r3, [r3, #0]
 c0006ac:	61bb      	str	r3, [r7, #24]
    uint8_t *x0 = output + (uint32_t)4U * i;
 c0006ae:	69fb      	ldr	r3, [r7, #28]
 c0006b0:	009b      	lsls	r3, r3, #2
 c0006b2:	68fa      	ldr	r2, [r7, #12]
 c0006b4:	4413      	add	r3, r2
 c0006b6:	617b      	str	r3, [r7, #20]
    store32_be(x0, hd1);
 c0006b8:	69bb      	ldr	r3, [r7, #24]
 c0006ba:	613b      	str	r3, [r7, #16]
 c0006bc:	693b      	ldr	r3, [r7, #16]
 c0006be:	0e1a      	lsrs	r2, r3, #24
 c0006c0:	693b      	ldr	r3, [r7, #16]
 c0006c2:	0a1b      	lsrs	r3, r3, #8
 c0006c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c0006c8:	431a      	orrs	r2, r3
 c0006ca:	693b      	ldr	r3, [r7, #16]
 c0006cc:	021b      	lsls	r3, r3, #8
 c0006ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c0006d2:	431a      	orrs	r2, r3
 c0006d4:	693b      	ldr	r3, [r7, #16]
 c0006d6:	061b      	lsls	r3, r3, #24
 c0006d8:	4313      	orrs	r3, r2
 c0006da:	4619      	mov	r1, r3
 c0006dc:	6978      	ldr	r0, [r7, #20]
 c0006de:	f7ff ff85 	bl	c0005ec <store32>
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c0006e2:	69fb      	ldr	r3, [r7, #28]
 c0006e4:	3301      	adds	r3, #1
 c0006e6:	61fb      	str	r3, [r7, #28]
 c0006e8:	69fa      	ldr	r2, [r7, #28]
 c0006ea:	687b      	ldr	r3, [r7, #4]
 c0006ec:	429a      	cmp	r2, r3
 c0006ee:	d3d8      	bcc.n	c0006a2 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes+0x12>
  }
}
 c0006f0:	bf00      	nop
 c0006f2:	bf00      	nop
 c0006f4:	3720      	adds	r7, #32
 c0006f6:	46bd      	mov	sp, r7
 c0006f8:	bd80      	pop	{r7, pc}
	...

0c0006fc <Hacl_Impl_SHA2_256_init>:

static void Hacl_Impl_SHA2_256_init(uint32_t *state)
{
 c0006fc:	b480      	push	{r7}
 c0006fe:	b0a3      	sub	sp, #140	; 0x8c
 c000700:	af00      	add	r7, sp, #0
 c000702:	6078      	str	r0, [r7, #4]
  uint32_t *k1 = state;
 c000704:	687b      	ldr	r3, [r7, #4]
 c000706:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t *h_01 = state + (uint32_t)128U;
 c00070a:	687b      	ldr	r3, [r7, #4]
 c00070c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c000710:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t *p10 = k1;
 c000714:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000718:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t *p20 = k1 + (uint32_t)16U;
 c00071a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c00071e:	3340      	adds	r3, #64	; 0x40
 c000720:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t *p3 = k1 + (uint32_t)32U;
 c000722:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000726:	3380      	adds	r3, #128	; 0x80
 c000728:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t *p4 = k1 + (uint32_t)48U;
 c00072a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c00072e:	33c0      	adds	r3, #192	; 0xc0
 c000730:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t *p11 = p10;
 c000732:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 c000734:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t *p21 = p10 + (uint32_t)8U;
 c000736:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 c000738:	3320      	adds	r3, #32
 c00073a:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t *p12 = p11;
 c00073c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00073e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t *p22 = p11 + (uint32_t)4U;
 c000740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c000742:	3310      	adds	r3, #16
 c000744:	663b      	str	r3, [r7, #96]	; 0x60
  p12[0U] = (uint32_t)0x428a2f98U;
 c000746:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c000748:	4a8d      	ldr	r2, [pc, #564]	; (c000980 <Hacl_Impl_SHA2_256_init+0x284>)
 c00074a:	601a      	str	r2, [r3, #0]
  p12[1U] = (uint32_t)0x71374491U;
 c00074c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c00074e:	3304      	adds	r3, #4
 c000750:	4a8c      	ldr	r2, [pc, #560]	; (c000984 <Hacl_Impl_SHA2_256_init+0x288>)
 c000752:	601a      	str	r2, [r3, #0]
  p12[2U] = (uint32_t)0xb5c0fbcfU;
 c000754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c000756:	3308      	adds	r3, #8
 c000758:	4a8b      	ldr	r2, [pc, #556]	; (c000988 <Hacl_Impl_SHA2_256_init+0x28c>)
 c00075a:	601a      	str	r2, [r3, #0]
  p12[3U] = (uint32_t)0xe9b5dba5U;
 c00075c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c00075e:	330c      	adds	r3, #12
 c000760:	4a8a      	ldr	r2, [pc, #552]	; (c00098c <Hacl_Impl_SHA2_256_init+0x290>)
 c000762:	601a      	str	r2, [r3, #0]
  p22[0U] = (uint32_t)0x3956c25bU;
 c000764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c000766:	4a8a      	ldr	r2, [pc, #552]	; (c000990 <Hacl_Impl_SHA2_256_init+0x294>)
 c000768:	601a      	str	r2, [r3, #0]
  p22[1U] = (uint32_t)0x59f111f1U;
 c00076a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c00076c:	3304      	adds	r3, #4
 c00076e:	4a89      	ldr	r2, [pc, #548]	; (c000994 <Hacl_Impl_SHA2_256_init+0x298>)
 c000770:	601a      	str	r2, [r3, #0]
  p22[2U] = (uint32_t)0x923f82a4U;
 c000772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c000774:	3308      	adds	r3, #8
 c000776:	4a88      	ldr	r2, [pc, #544]	; (c000998 <Hacl_Impl_SHA2_256_init+0x29c>)
 c000778:	601a      	str	r2, [r3, #0]
  p22[3U] = (uint32_t)0xab1c5ed5U;
 c00077a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c00077c:	330c      	adds	r3, #12
 c00077e:	4a87      	ldr	r2, [pc, #540]	; (c00099c <Hacl_Impl_SHA2_256_init+0x2a0>)
 c000780:	601a      	str	r2, [r3, #0]
  uint32_t *p13 = p21;
 c000782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c000784:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t *p23 = p21 + (uint32_t)4U;
 c000786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c000788:	3310      	adds	r3, #16
 c00078a:	65bb      	str	r3, [r7, #88]	; 0x58
  p13[0U] = (uint32_t)0xd807aa98U;
 c00078c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00078e:	4a84      	ldr	r2, [pc, #528]	; (c0009a0 <Hacl_Impl_SHA2_256_init+0x2a4>)
 c000790:	601a      	str	r2, [r3, #0]
  p13[1U] = (uint32_t)0x12835b01U;
 c000792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c000794:	3304      	adds	r3, #4
 c000796:	4a83      	ldr	r2, [pc, #524]	; (c0009a4 <Hacl_Impl_SHA2_256_init+0x2a8>)
 c000798:	601a      	str	r2, [r3, #0]
  p13[2U] = (uint32_t)0x243185beU;
 c00079a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00079c:	3308      	adds	r3, #8
 c00079e:	4a82      	ldr	r2, [pc, #520]	; (c0009a8 <Hacl_Impl_SHA2_256_init+0x2ac>)
 c0007a0:	601a      	str	r2, [r3, #0]
  p13[3U] = (uint32_t)0x550c7dc3U;
 c0007a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c0007a4:	330c      	adds	r3, #12
 c0007a6:	4a81      	ldr	r2, [pc, #516]	; (c0009ac <Hacl_Impl_SHA2_256_init+0x2b0>)
 c0007a8:	601a      	str	r2, [r3, #0]
  p23[0U] = (uint32_t)0x72be5d74U;
 c0007aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0007ac:	4a80      	ldr	r2, [pc, #512]	; (c0009b0 <Hacl_Impl_SHA2_256_init+0x2b4>)
 c0007ae:	601a      	str	r2, [r3, #0]
  p23[1U] = (uint32_t)0x80deb1feU;
 c0007b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0007b2:	3304      	adds	r3, #4
 c0007b4:	4a7f      	ldr	r2, [pc, #508]	; (c0009b4 <Hacl_Impl_SHA2_256_init+0x2b8>)
 c0007b6:	601a      	str	r2, [r3, #0]
  p23[2U] = (uint32_t)0x9bdc06a7U;
 c0007b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0007ba:	3308      	adds	r3, #8
 c0007bc:	4a7e      	ldr	r2, [pc, #504]	; (c0009b8 <Hacl_Impl_SHA2_256_init+0x2bc>)
 c0007be:	601a      	str	r2, [r3, #0]
  p23[3U] = (uint32_t)0xc19bf174U;
 c0007c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0007c2:	330c      	adds	r3, #12
 c0007c4:	4a7d      	ldr	r2, [pc, #500]	; (c0009bc <Hacl_Impl_SHA2_256_init+0x2c0>)
 c0007c6:	601a      	str	r2, [r3, #0]
  uint32_t *p14 = p20;
 c0007c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c0007ca:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t *p24 = p20 + (uint32_t)8U;
 c0007cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c0007ce:	3320      	adds	r3, #32
 c0007d0:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t *p15 = p14;
 c0007d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c0007d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t *p25 = p14 + (uint32_t)4U;
 c0007d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c0007d8:	3310      	adds	r3, #16
 c0007da:	64bb      	str	r3, [r7, #72]	; 0x48
  p15[0U] = (uint32_t)0xe49b69c1U;
 c0007dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0007de:	4a78      	ldr	r2, [pc, #480]	; (c0009c0 <Hacl_Impl_SHA2_256_init+0x2c4>)
 c0007e0:	601a      	str	r2, [r3, #0]
  p15[1U] = (uint32_t)0xefbe4786U;
 c0007e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0007e4:	3304      	adds	r3, #4
 c0007e6:	4a77      	ldr	r2, [pc, #476]	; (c0009c4 <Hacl_Impl_SHA2_256_init+0x2c8>)
 c0007e8:	601a      	str	r2, [r3, #0]
  p15[2U] = (uint32_t)0x0fc19dc6U;
 c0007ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0007ec:	3308      	adds	r3, #8
 c0007ee:	4a76      	ldr	r2, [pc, #472]	; (c0009c8 <Hacl_Impl_SHA2_256_init+0x2cc>)
 c0007f0:	601a      	str	r2, [r3, #0]
  p15[3U] = (uint32_t)0x240ca1ccU;
 c0007f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0007f4:	330c      	adds	r3, #12
 c0007f6:	4a75      	ldr	r2, [pc, #468]	; (c0009cc <Hacl_Impl_SHA2_256_init+0x2d0>)
 c0007f8:	601a      	str	r2, [r3, #0]
  p25[0U] = (uint32_t)0x2de92c6fU;
 c0007fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c0007fc:	4a74      	ldr	r2, [pc, #464]	; (c0009d0 <Hacl_Impl_SHA2_256_init+0x2d4>)
 c0007fe:	601a      	str	r2, [r3, #0]
  p25[1U] = (uint32_t)0x4a7484aaU;
 c000800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c000802:	3304      	adds	r3, #4
 c000804:	4a73      	ldr	r2, [pc, #460]	; (c0009d4 <Hacl_Impl_SHA2_256_init+0x2d8>)
 c000806:	601a      	str	r2, [r3, #0]
  p25[2U] = (uint32_t)0x5cb0a9dcU;
 c000808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c00080a:	3308      	adds	r3, #8
 c00080c:	4a72      	ldr	r2, [pc, #456]	; (c0009d8 <Hacl_Impl_SHA2_256_init+0x2dc>)
 c00080e:	601a      	str	r2, [r3, #0]
  p25[3U] = (uint32_t)0x76f988daU;
 c000810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c000812:	330c      	adds	r3, #12
 c000814:	4a71      	ldr	r2, [pc, #452]	; (c0009dc <Hacl_Impl_SHA2_256_init+0x2e0>)
 c000816:	601a      	str	r2, [r3, #0]
  uint32_t *p16 = p24;
 c000818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00081a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t *p26 = p24 + (uint32_t)4U;
 c00081c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00081e:	3310      	adds	r3, #16
 c000820:	643b      	str	r3, [r7, #64]	; 0x40
  p16[0U] = (uint32_t)0x983e5152U;
 c000822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c000824:	4a6e      	ldr	r2, [pc, #440]	; (c0009e0 <Hacl_Impl_SHA2_256_init+0x2e4>)
 c000826:	601a      	str	r2, [r3, #0]
  p16[1U] = (uint32_t)0xa831c66dU;
 c000828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00082a:	3304      	adds	r3, #4
 c00082c:	4a6d      	ldr	r2, [pc, #436]	; (c0009e4 <Hacl_Impl_SHA2_256_init+0x2e8>)
 c00082e:	601a      	str	r2, [r3, #0]
  p16[2U] = (uint32_t)0xb00327c8U;
 c000830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c000832:	3308      	adds	r3, #8
 c000834:	4a6c      	ldr	r2, [pc, #432]	; (c0009e8 <Hacl_Impl_SHA2_256_init+0x2ec>)
 c000836:	601a      	str	r2, [r3, #0]
  p16[3U] = (uint32_t)0xbf597fc7U;
 c000838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00083a:	330c      	adds	r3, #12
 c00083c:	4a6b      	ldr	r2, [pc, #428]	; (c0009ec <Hacl_Impl_SHA2_256_init+0x2f0>)
 c00083e:	601a      	str	r2, [r3, #0]
  p26[0U] = (uint32_t)0xc6e00bf3U;
 c000840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c000842:	4a6b      	ldr	r2, [pc, #428]	; (c0009f0 <Hacl_Impl_SHA2_256_init+0x2f4>)
 c000844:	601a      	str	r2, [r3, #0]
  p26[1U] = (uint32_t)0xd5a79147U;
 c000846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c000848:	3304      	adds	r3, #4
 c00084a:	4a6a      	ldr	r2, [pc, #424]	; (c0009f4 <Hacl_Impl_SHA2_256_init+0x2f8>)
 c00084c:	601a      	str	r2, [r3, #0]
  p26[2U] = (uint32_t)0x06ca6351U;
 c00084e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c000850:	3308      	adds	r3, #8
 c000852:	4a69      	ldr	r2, [pc, #420]	; (c0009f8 <Hacl_Impl_SHA2_256_init+0x2fc>)
 c000854:	601a      	str	r2, [r3, #0]
  p26[3U] = (uint32_t)0x14292967U;
 c000856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c000858:	330c      	adds	r3, #12
 c00085a:	4a68      	ldr	r2, [pc, #416]	; (c0009fc <Hacl_Impl_SHA2_256_init+0x300>)
 c00085c:	601a      	str	r2, [r3, #0]
  uint32_t *p17 = p3;
 c00085e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c000860:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t *p27 = p3 + (uint32_t)8U;
 c000862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c000864:	3320      	adds	r3, #32
 c000866:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t *p18 = p17;
 c000868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c00086a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t *p28 = p17 + (uint32_t)4U;
 c00086c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c00086e:	3310      	adds	r3, #16
 c000870:	633b      	str	r3, [r7, #48]	; 0x30
  p18[0U] = (uint32_t)0x27b70a85U;
 c000872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c000874:	4a62      	ldr	r2, [pc, #392]	; (c000a00 <Hacl_Impl_SHA2_256_init+0x304>)
 c000876:	601a      	str	r2, [r3, #0]
  p18[1U] = (uint32_t)0x2e1b2138U;
 c000878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00087a:	3304      	adds	r3, #4
 c00087c:	4a61      	ldr	r2, [pc, #388]	; (c000a04 <Hacl_Impl_SHA2_256_init+0x308>)
 c00087e:	601a      	str	r2, [r3, #0]
  p18[2U] = (uint32_t)0x4d2c6dfcU;
 c000880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c000882:	3308      	adds	r3, #8
 c000884:	4a60      	ldr	r2, [pc, #384]	; (c000a08 <Hacl_Impl_SHA2_256_init+0x30c>)
 c000886:	601a      	str	r2, [r3, #0]
  p18[3U] = (uint32_t)0x53380d13U;
 c000888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00088a:	330c      	adds	r3, #12
 c00088c:	4a5f      	ldr	r2, [pc, #380]	; (c000a0c <Hacl_Impl_SHA2_256_init+0x310>)
 c00088e:	601a      	str	r2, [r3, #0]
  p28[0U] = (uint32_t)0x650a7354U;
 c000890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c000892:	4a5f      	ldr	r2, [pc, #380]	; (c000a10 <Hacl_Impl_SHA2_256_init+0x314>)
 c000894:	601a      	str	r2, [r3, #0]
  p28[1U] = (uint32_t)0x766a0abbU;
 c000896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c000898:	3304      	adds	r3, #4
 c00089a:	4a5e      	ldr	r2, [pc, #376]	; (c000a14 <Hacl_Impl_SHA2_256_init+0x318>)
 c00089c:	601a      	str	r2, [r3, #0]
  p28[2U] = (uint32_t)0x81c2c92eU;
 c00089e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c0008a0:	3308      	adds	r3, #8
 c0008a2:	4a5d      	ldr	r2, [pc, #372]	; (c000a18 <Hacl_Impl_SHA2_256_init+0x31c>)
 c0008a4:	601a      	str	r2, [r3, #0]
  p28[3U] = (uint32_t)0x92722c85U;
 c0008a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c0008a8:	330c      	adds	r3, #12
 c0008aa:	4a5c      	ldr	r2, [pc, #368]	; (c000a1c <Hacl_Impl_SHA2_256_init+0x320>)
 c0008ac:	601a      	str	r2, [r3, #0]
  uint32_t *p19 = p27;
 c0008ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t *p29 = p27 + (uint32_t)4U;
 c0008b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0008b4:	3310      	adds	r3, #16
 c0008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  p19[0U] = (uint32_t)0xa2bfe8a1U;
 c0008b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0008ba:	4a59      	ldr	r2, [pc, #356]	; (c000a20 <Hacl_Impl_SHA2_256_init+0x324>)
 c0008bc:	601a      	str	r2, [r3, #0]
  p19[1U] = (uint32_t)0xa81a664bU;
 c0008be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0008c0:	3304      	adds	r3, #4
 c0008c2:	4a58      	ldr	r2, [pc, #352]	; (c000a24 <Hacl_Impl_SHA2_256_init+0x328>)
 c0008c4:	601a      	str	r2, [r3, #0]
  p19[2U] = (uint32_t)0xc24b8b70U;
 c0008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0008c8:	3308      	adds	r3, #8
 c0008ca:	4a57      	ldr	r2, [pc, #348]	; (c000a28 <Hacl_Impl_SHA2_256_init+0x32c>)
 c0008cc:	601a      	str	r2, [r3, #0]
  p19[3U] = (uint32_t)0xc76c51a3U;
 c0008ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0008d0:	330c      	adds	r3, #12
 c0008d2:	4a56      	ldr	r2, [pc, #344]	; (c000a2c <Hacl_Impl_SHA2_256_init+0x330>)
 c0008d4:	601a      	str	r2, [r3, #0]
  p29[0U] = (uint32_t)0xd192e819U;
 c0008d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0008d8:	4a55      	ldr	r2, [pc, #340]	; (c000a30 <Hacl_Impl_SHA2_256_init+0x334>)
 c0008da:	601a      	str	r2, [r3, #0]
  p29[1U] = (uint32_t)0xd6990624U;
 c0008dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0008de:	3304      	adds	r3, #4
 c0008e0:	4a54      	ldr	r2, [pc, #336]	; (c000a34 <Hacl_Impl_SHA2_256_init+0x338>)
 c0008e2:	601a      	str	r2, [r3, #0]
  p29[2U] = (uint32_t)0xf40e3585U;
 c0008e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0008e6:	3308      	adds	r3, #8
 c0008e8:	4a53      	ldr	r2, [pc, #332]	; (c000a38 <Hacl_Impl_SHA2_256_init+0x33c>)
 c0008ea:	601a      	str	r2, [r3, #0]
  p29[3U] = (uint32_t)0x106aa070U;
 c0008ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0008ee:	330c      	adds	r3, #12
 c0008f0:	4a52      	ldr	r2, [pc, #328]	; (c000a3c <Hacl_Impl_SHA2_256_init+0x340>)
 c0008f2:	601a      	str	r2, [r3, #0]
  uint32_t *p110 = p4;
 c0008f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c0008f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t *p210 = p4 + (uint32_t)8U;
 c0008f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c0008fa:	3320      	adds	r3, #32
 c0008fc:	623b      	str	r3, [r7, #32]
  uint32_t *p1 = p110;
 c0008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000900:	61fb      	str	r3, [r7, #28]
  uint32_t *p211 = p110 + (uint32_t)4U;
 c000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000904:	3310      	adds	r3, #16
 c000906:	61bb      	str	r3, [r7, #24]
  p1[0U] = (uint32_t)0x19a4c116U;
 c000908:	69fb      	ldr	r3, [r7, #28]
 c00090a:	4a4d      	ldr	r2, [pc, #308]	; (c000a40 <Hacl_Impl_SHA2_256_init+0x344>)
 c00090c:	601a      	str	r2, [r3, #0]
  p1[1U] = (uint32_t)0x1e376c08U;
 c00090e:	69fb      	ldr	r3, [r7, #28]
 c000910:	3304      	adds	r3, #4
 c000912:	4a4c      	ldr	r2, [pc, #304]	; (c000a44 <Hacl_Impl_SHA2_256_init+0x348>)
 c000914:	601a      	str	r2, [r3, #0]
  p1[2U] = (uint32_t)0x2748774cU;
 c000916:	69fb      	ldr	r3, [r7, #28]
 c000918:	3308      	adds	r3, #8
 c00091a:	4a4b      	ldr	r2, [pc, #300]	; (c000a48 <Hacl_Impl_SHA2_256_init+0x34c>)
 c00091c:	601a      	str	r2, [r3, #0]
  p1[3U] = (uint32_t)0x34b0bcb5U;
 c00091e:	69fb      	ldr	r3, [r7, #28]
 c000920:	330c      	adds	r3, #12
 c000922:	4a4a      	ldr	r2, [pc, #296]	; (c000a4c <Hacl_Impl_SHA2_256_init+0x350>)
 c000924:	601a      	str	r2, [r3, #0]
  p211[0U] = (uint32_t)0x391c0cb3U;
 c000926:	69bb      	ldr	r3, [r7, #24]
 c000928:	4a49      	ldr	r2, [pc, #292]	; (c000a50 <Hacl_Impl_SHA2_256_init+0x354>)
 c00092a:	601a      	str	r2, [r3, #0]
  p211[1U] = (uint32_t)0x4ed8aa4aU;
 c00092c:	69bb      	ldr	r3, [r7, #24]
 c00092e:	3304      	adds	r3, #4
 c000930:	4a48      	ldr	r2, [pc, #288]	; (c000a54 <Hacl_Impl_SHA2_256_init+0x358>)
 c000932:	601a      	str	r2, [r3, #0]
  p211[2U] = (uint32_t)0x5b9cca4fU;
 c000934:	69bb      	ldr	r3, [r7, #24]
 c000936:	3308      	adds	r3, #8
 c000938:	4a47      	ldr	r2, [pc, #284]	; (c000a58 <Hacl_Impl_SHA2_256_init+0x35c>)
 c00093a:	601a      	str	r2, [r3, #0]
  p211[3U] = (uint32_t)0x682e6ff3U;
 c00093c:	69bb      	ldr	r3, [r7, #24]
 c00093e:	330c      	adds	r3, #12
 c000940:	4a46      	ldr	r2, [pc, #280]	; (c000a5c <Hacl_Impl_SHA2_256_init+0x360>)
 c000942:	601a      	str	r2, [r3, #0]
  uint32_t *p111 = p210;
 c000944:	6a3b      	ldr	r3, [r7, #32]
 c000946:	617b      	str	r3, [r7, #20]
  uint32_t *p212 = p210 + (uint32_t)4U;
 c000948:	6a3b      	ldr	r3, [r7, #32]
 c00094a:	3310      	adds	r3, #16
 c00094c:	613b      	str	r3, [r7, #16]
  p111[0U] = (uint32_t)0x748f82eeU;
 c00094e:	697b      	ldr	r3, [r7, #20]
 c000950:	4a43      	ldr	r2, [pc, #268]	; (c000a60 <Hacl_Impl_SHA2_256_init+0x364>)
 c000952:	601a      	str	r2, [r3, #0]
  p111[1U] = (uint32_t)0x78a5636fU;
 c000954:	697b      	ldr	r3, [r7, #20]
 c000956:	3304      	adds	r3, #4
 c000958:	4a42      	ldr	r2, [pc, #264]	; (c000a64 <Hacl_Impl_SHA2_256_init+0x368>)
 c00095a:	601a      	str	r2, [r3, #0]
  p111[2U] = (uint32_t)0x84c87814U;
 c00095c:	697b      	ldr	r3, [r7, #20]
 c00095e:	3308      	adds	r3, #8
 c000960:	4a41      	ldr	r2, [pc, #260]	; (c000a68 <Hacl_Impl_SHA2_256_init+0x36c>)
 c000962:	601a      	str	r2, [r3, #0]
  p111[3U] = (uint32_t)0x8cc70208U;
 c000964:	697b      	ldr	r3, [r7, #20]
 c000966:	330c      	adds	r3, #12
 c000968:	4a40      	ldr	r2, [pc, #256]	; (c000a6c <Hacl_Impl_SHA2_256_init+0x370>)
 c00096a:	601a      	str	r2, [r3, #0]
  p212[0U] = (uint32_t)0x90befffaU;
 c00096c:	693b      	ldr	r3, [r7, #16]
 c00096e:	4a40      	ldr	r2, [pc, #256]	; (c000a70 <Hacl_Impl_SHA2_256_init+0x374>)
 c000970:	601a      	str	r2, [r3, #0]
  p212[1U] = (uint32_t)0xa4506cebU;
 c000972:	693b      	ldr	r3, [r7, #16]
 c000974:	3304      	adds	r3, #4
 c000976:	4a3f      	ldr	r2, [pc, #252]	; (c000a74 <Hacl_Impl_SHA2_256_init+0x378>)
 c000978:	601a      	str	r2, [r3, #0]
  p212[2U] = (uint32_t)0xbef9a3f7U;
 c00097a:	693b      	ldr	r3, [r7, #16]
 c00097c:	e07c      	b.n	c000a78 <Hacl_Impl_SHA2_256_init+0x37c>
 c00097e:	bf00      	nop
 c000980:	428a2f98 	.word	0x428a2f98
 c000984:	71374491 	.word	0x71374491
 c000988:	b5c0fbcf 	.word	0xb5c0fbcf
 c00098c:	e9b5dba5 	.word	0xe9b5dba5
 c000990:	3956c25b 	.word	0x3956c25b
 c000994:	59f111f1 	.word	0x59f111f1
 c000998:	923f82a4 	.word	0x923f82a4
 c00099c:	ab1c5ed5 	.word	0xab1c5ed5
 c0009a0:	d807aa98 	.word	0xd807aa98
 c0009a4:	12835b01 	.word	0x12835b01
 c0009a8:	243185be 	.word	0x243185be
 c0009ac:	550c7dc3 	.word	0x550c7dc3
 c0009b0:	72be5d74 	.word	0x72be5d74
 c0009b4:	80deb1fe 	.word	0x80deb1fe
 c0009b8:	9bdc06a7 	.word	0x9bdc06a7
 c0009bc:	c19bf174 	.word	0xc19bf174
 c0009c0:	e49b69c1 	.word	0xe49b69c1
 c0009c4:	efbe4786 	.word	0xefbe4786
 c0009c8:	0fc19dc6 	.word	0x0fc19dc6
 c0009cc:	240ca1cc 	.word	0x240ca1cc
 c0009d0:	2de92c6f 	.word	0x2de92c6f
 c0009d4:	4a7484aa 	.word	0x4a7484aa
 c0009d8:	5cb0a9dc 	.word	0x5cb0a9dc
 c0009dc:	76f988da 	.word	0x76f988da
 c0009e0:	983e5152 	.word	0x983e5152
 c0009e4:	a831c66d 	.word	0xa831c66d
 c0009e8:	b00327c8 	.word	0xb00327c8
 c0009ec:	bf597fc7 	.word	0xbf597fc7
 c0009f0:	c6e00bf3 	.word	0xc6e00bf3
 c0009f4:	d5a79147 	.word	0xd5a79147
 c0009f8:	06ca6351 	.word	0x06ca6351
 c0009fc:	14292967 	.word	0x14292967
 c000a00:	27b70a85 	.word	0x27b70a85
 c000a04:	2e1b2138 	.word	0x2e1b2138
 c000a08:	4d2c6dfc 	.word	0x4d2c6dfc
 c000a0c:	53380d13 	.word	0x53380d13
 c000a10:	650a7354 	.word	0x650a7354
 c000a14:	766a0abb 	.word	0x766a0abb
 c000a18:	81c2c92e 	.word	0x81c2c92e
 c000a1c:	92722c85 	.word	0x92722c85
 c000a20:	a2bfe8a1 	.word	0xa2bfe8a1
 c000a24:	a81a664b 	.word	0xa81a664b
 c000a28:	c24b8b70 	.word	0xc24b8b70
 c000a2c:	c76c51a3 	.word	0xc76c51a3
 c000a30:	d192e819 	.word	0xd192e819
 c000a34:	d6990624 	.word	0xd6990624
 c000a38:	f40e3585 	.word	0xf40e3585
 c000a3c:	106aa070 	.word	0x106aa070
 c000a40:	19a4c116 	.word	0x19a4c116
 c000a44:	1e376c08 	.word	0x1e376c08
 c000a48:	2748774c 	.word	0x2748774c
 c000a4c:	34b0bcb5 	.word	0x34b0bcb5
 c000a50:	391c0cb3 	.word	0x391c0cb3
 c000a54:	4ed8aa4a 	.word	0x4ed8aa4a
 c000a58:	5b9cca4f 	.word	0x5b9cca4f
 c000a5c:	682e6ff3 	.word	0x682e6ff3
 c000a60:	748f82ee 	.word	0x748f82ee
 c000a64:	78a5636f 	.word	0x78a5636f
 c000a68:	84c87814 	.word	0x84c87814
 c000a6c:	8cc70208 	.word	0x8cc70208
 c000a70:	90befffa 	.word	0x90befffa
 c000a74:	a4506ceb 	.word	0xa4506ceb
 c000a78:	3308      	adds	r3, #8
 c000a7a:	4a18      	ldr	r2, [pc, #96]	; (c000adc <Hacl_Impl_SHA2_256_init+0x3e0>)
 c000a7c:	601a      	str	r2, [r3, #0]
  p212[3U] = (uint32_t)0xc67178f2U;
 c000a7e:	693b      	ldr	r3, [r7, #16]
 c000a80:	330c      	adds	r3, #12
 c000a82:	4a17      	ldr	r2, [pc, #92]	; (c000ae0 <Hacl_Impl_SHA2_256_init+0x3e4>)
 c000a84:	601a      	str	r2, [r3, #0]
  uint32_t *p112 = h_01;
 c000a86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000a8a:	60fb      	str	r3, [r7, #12]
  uint32_t *p2 = h_01 + (uint32_t)4U;
 c000a8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000a90:	3310      	adds	r3, #16
 c000a92:	60bb      	str	r3, [r7, #8]
  p112[0U] = (uint32_t)0x6a09e667U;
 c000a94:	68fb      	ldr	r3, [r7, #12]
 c000a96:	4a13      	ldr	r2, [pc, #76]	; (c000ae4 <Hacl_Impl_SHA2_256_init+0x3e8>)
 c000a98:	601a      	str	r2, [r3, #0]
  p112[1U] = (uint32_t)0xbb67ae85U;
 c000a9a:	68fb      	ldr	r3, [r7, #12]
 c000a9c:	3304      	adds	r3, #4
 c000a9e:	4a12      	ldr	r2, [pc, #72]	; (c000ae8 <Hacl_Impl_SHA2_256_init+0x3ec>)
 c000aa0:	601a      	str	r2, [r3, #0]
  p112[2U] = (uint32_t)0x3c6ef372U;
 c000aa2:	68fb      	ldr	r3, [r7, #12]
 c000aa4:	3308      	adds	r3, #8
 c000aa6:	4a11      	ldr	r2, [pc, #68]	; (c000aec <Hacl_Impl_SHA2_256_init+0x3f0>)
 c000aa8:	601a      	str	r2, [r3, #0]
  p112[3U] = (uint32_t)0xa54ff53aU;
 c000aaa:	68fb      	ldr	r3, [r7, #12]
 c000aac:	330c      	adds	r3, #12
 c000aae:	4a10      	ldr	r2, [pc, #64]	; (c000af0 <Hacl_Impl_SHA2_256_init+0x3f4>)
 c000ab0:	601a      	str	r2, [r3, #0]
  p2[0U] = (uint32_t)0x510e527fU;
 c000ab2:	68bb      	ldr	r3, [r7, #8]
 c000ab4:	4a0f      	ldr	r2, [pc, #60]	; (c000af4 <Hacl_Impl_SHA2_256_init+0x3f8>)
 c000ab6:	601a      	str	r2, [r3, #0]
  p2[1U] = (uint32_t)0x9b05688cU;
 c000ab8:	68bb      	ldr	r3, [r7, #8]
 c000aba:	3304      	adds	r3, #4
 c000abc:	4a0e      	ldr	r2, [pc, #56]	; (c000af8 <Hacl_Impl_SHA2_256_init+0x3fc>)
 c000abe:	601a      	str	r2, [r3, #0]
  p2[2U] = (uint32_t)0x1f83d9abU;
 c000ac0:	68bb      	ldr	r3, [r7, #8]
 c000ac2:	3308      	adds	r3, #8
 c000ac4:	4a0d      	ldr	r2, [pc, #52]	; (c000afc <Hacl_Impl_SHA2_256_init+0x400>)
 c000ac6:	601a      	str	r2, [r3, #0]
  p2[3U] = (uint32_t)0x5be0cd19U;
 c000ac8:	68bb      	ldr	r3, [r7, #8]
 c000aca:	330c      	adds	r3, #12
 c000acc:	4a0c      	ldr	r2, [pc, #48]	; (c000b00 <Hacl_Impl_SHA2_256_init+0x404>)
 c000ace:	601a      	str	r2, [r3, #0]
}
 c000ad0:	bf00      	nop
 c000ad2:	378c      	adds	r7, #140	; 0x8c
 c000ad4:	46bd      	mov	sp, r7
 c000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ada:	4770      	bx	lr
 c000adc:	bef9a3f7 	.word	0xbef9a3f7
 c000ae0:	c67178f2 	.word	0xc67178f2
 c000ae4:	6a09e667 	.word	0x6a09e667
 c000ae8:	bb67ae85 	.word	0xbb67ae85
 c000aec:	3c6ef372 	.word	0x3c6ef372
 c000af0:	a54ff53a 	.word	0xa54ff53a
 c000af4:	510e527f 	.word	0x510e527f
 c000af8:	9b05688c 	.word	0x9b05688c
 c000afc:	1f83d9ab 	.word	0x1f83d9ab
 c000b00:	5be0cd19 	.word	0x5be0cd19

0c000b04 <Hacl_Impl_SHA2_256_update>:

static void Hacl_Impl_SHA2_256_update(uint32_t *state, uint8_t *data)
{
 c000b04:	b580      	push	{r7, lr}
 c000b06:	b0bc      	sub	sp, #240	; 0xf0
 c000b08:	af00      	add	r7, sp, #0
 c000b0a:	6078      	str	r0, [r7, #4]
 c000b0c:	6039      	str	r1, [r7, #0]
  uint32_t data_w[16U] = { 0U };
 c000b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c000b12:	2240      	movs	r2, #64	; 0x40
 c000b14:	2100      	movs	r1, #0
 c000b16:	4618      	mov	r0, r3
 c000b18:	f008 fb89 	bl	c00922e <memset>
  Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes(data_w, data, (uint32_t)16U);
 c000b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c000b20:	2210      	movs	r2, #16
 c000b22:	6839      	ldr	r1, [r7, #0]
 c000b24:	4618      	mov	r0, r3
 c000b26:	f7ff fd7f 	bl	c000628 <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes>
  uint32_t *hash_w = state + (uint32_t)128U;
 c000b2a:	687b      	ldr	r3, [r7, #4]
 c000b2c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c000b30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t *ws_w = state + (uint32_t)64U;
 c000b34:	687b      	ldr	r3, [r7, #4]
 c000b36:	f503 7380 	add.w	r3, r3, #256	; 0x100
 c000b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t *k_w = state;
 c000b3e:	687b      	ldr	r3, [r7, #4]
 c000b40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint32_t *counter_w = state + (uint32_t)136U;
 c000b44:	687b      	ldr	r3, [r7, #4]
 c000b46:	f503 7308 	add.w	r3, r3, #544	; 0x220
 c000b4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)16U; i = i + (uint32_t)1U)
 c000b4e:	2300      	movs	r3, #0
 c000b50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000b54:	e014      	b.n	c000b80 <Hacl_Impl_SHA2_256_update+0x7c>
  {
    uint32_t b = data_w[i];
 c000b56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000b5a:	009b      	lsls	r3, r3, #2
 c000b5c:	33f0      	adds	r3, #240	; 0xf0
 c000b5e:	443b      	add	r3, r7
 c000b60:	f853 3cc4 	ldr.w	r3, [r3, #-196]
 c000b64:	66fb      	str	r3, [r7, #108]	; 0x6c
    ws_w[i] = b;
 c000b66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000b6a:	009b      	lsls	r3, r3, #2
 c000b6c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000b70:	4413      	add	r3, r2
 c000b72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 c000b74:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)16U; i = i + (uint32_t)1U)
 c000b76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000b7a:	3301      	adds	r3, #1
 c000b7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000b80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000b84:	2b0f      	cmp	r3, #15
 c000b86:	d9e6      	bls.n	c000b56 <Hacl_Impl_SHA2_256_update+0x52>
  }
  for (uint32_t i = (uint32_t)16U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000b88:	2310      	movs	r3, #16
 c000b8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 c000b8e:	e050      	b.n	c000c32 <Hacl_Impl_SHA2_256_update+0x12e>
  {
    uint32_t t16 = ws_w[i - (uint32_t)16U];
 c000b90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000b94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c000b98:	3b10      	subs	r3, #16
 c000b9a:	009b      	lsls	r3, r3, #2
 c000b9c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000ba0:	4413      	add	r3, r2
 c000ba2:	681b      	ldr	r3, [r3, #0]
 c000ba4:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint32_t t15 = ws_w[i - (uint32_t)15U];
 c000ba6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000baa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c000bae:	3b0f      	subs	r3, #15
 c000bb0:	009b      	lsls	r3, r3, #2
 c000bb2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000bb6:	4413      	add	r3, r2
 c000bb8:	681b      	ldr	r3, [r3, #0]
 c000bba:	67bb      	str	r3, [r7, #120]	; 0x78
    uint32_t t7 = ws_w[i - (uint32_t)7U];
 c000bbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000bc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c000bc4:	3b07      	subs	r3, #7
 c000bc6:	009b      	lsls	r3, r3, #2
 c000bc8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000bcc:	4413      	add	r3, r2
 c000bce:	681b      	ldr	r3, [r3, #0]
 c000bd0:	677b      	str	r3, [r7, #116]	; 0x74
    uint32_t t2 = ws_w[i - (uint32_t)2U];
 c000bd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000bd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c000bda:	3b02      	subs	r3, #2
 c000bdc:	009b      	lsls	r3, r3, #2
 c000bde:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000be2:	4413      	add	r3, r2
 c000be4:	681b      	ldr	r3, [r3, #0]
 c000be6:	673b      	str	r3, [r7, #112]	; 0x70
    ws_w[i] =
      ((t2 >> (uint32_t)17U | t2 << ((uint32_t)32U - (uint32_t)17U))
 c000be8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c000bea:	ea4f 4273 	mov.w	r2, r3, ror #17
      ^ ((t2 >> (uint32_t)19U | t2 << ((uint32_t)32U - (uint32_t)19U)) ^ t2 >> (uint32_t)10U))
 c000bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c000bf0:	ea4f 41f3 	mov.w	r1, r3, ror #19
 c000bf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c000bf6:	0a9b      	lsrs	r3, r3, #10
 c000bf8:	404b      	eors	r3, r1
 c000bfa:	405a      	eors	r2, r3
      +
 c000bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c000bfe:	441a      	add	r2, r3
        t7
        +
          ((t15 >> (uint32_t)7U | t15 << ((uint32_t)32U - (uint32_t)7U))
 c000c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c000c02:	ea4f 11f3 	mov.w	r1, r3, ror #7
          ^ ((t15 >> (uint32_t)18U | t15 << ((uint32_t)32U - (uint32_t)18U)) ^ t15 >> (uint32_t)3U))
 c000c06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c000c08:	ea4f 40b3 	mov.w	r0, r3, ror #18
 c000c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c000c0e:	08db      	lsrs	r3, r3, #3
 c000c10:	4043      	eors	r3, r0
 c000c12:	404b      	eors	r3, r1
        +
 c000c14:	18d1      	adds	r1, r2, r3
    ws_w[i] =
 c000c16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000c1a:	009b      	lsls	r3, r3, #2
 c000c1c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000c20:	4413      	add	r3, r2
          + t16;
 c000c22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 c000c24:	440a      	add	r2, r1
    ws_w[i] =
 c000c26:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)16U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000c28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000c2c:	3301      	adds	r3, #1
 c000c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 c000c32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000c36:	2b3f      	cmp	r3, #63	; 0x3f
 c000c38:	d9aa      	bls.n	c000b90 <Hacl_Impl_SHA2_256_update+0x8c>
  }
  uint32_t hash_0[8U] = { 0U };
 c000c3a:	f107 030c 	add.w	r3, r7, #12
 c000c3e:	2220      	movs	r2, #32
 c000c40:	2100      	movs	r1, #0
 c000c42:	4618      	mov	r0, r3
 c000c44:	f008 faf3 	bl	c00922e <memset>
  memcpy(hash_0, hash_w, (uint32_t)8U * sizeof hash_w[0U]);
 c000c48:	f107 030c 	add.w	r3, r7, #12
 c000c4c:	2220      	movs	r2, #32
 c000c4e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 c000c52:	4618      	mov	r0, r3
 c000c54:	f008 fade 	bl	c009214 <memcpy>
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000c58:	2300      	movs	r3, #0
 c000c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c000c5e:	e0b8      	b.n	c000dd2 <Hacl_Impl_SHA2_256_update+0x2ce>
  {
    uint32_t a = hash_0[0U];
 c000c60:	68fb      	ldr	r3, [r7, #12]
 c000c62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    uint32_t b = hash_0[1U];
 c000c66:	693b      	ldr	r3, [r7, #16]
 c000c68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    uint32_t c = hash_0[2U];
 c000c6c:	697b      	ldr	r3, [r7, #20]
 c000c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    uint32_t d = hash_0[3U];
 c000c72:	69bb      	ldr	r3, [r7, #24]
 c000c74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint32_t e = hash_0[4U];
 c000c78:	69fb      	ldr	r3, [r7, #28]
 c000c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    uint32_t f1 = hash_0[5U];
 c000c7e:	6a3b      	ldr	r3, [r7, #32]
 c000c80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    uint32_t g = hash_0[6U];
 c000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000c86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    uint32_t h = hash_0[7U];
 c000c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c000c8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    uint32_t kt = k_w[i];
 c000c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000c94:	009b      	lsls	r3, r3, #2
 c000c96:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 c000c9a:	4413      	add	r3, r2
 c000c9c:	681b      	ldr	r3, [r3, #0]
 c000c9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t wst = ws_w[i];
 c000ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000ca6:	009b      	lsls	r3, r3, #2
 c000ca8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000cac:	4413      	add	r3, r2
 c000cae:	681b      	ldr	r3, [r3, #0]
 c000cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint32_t
    t1 =
      h
      +
        ((e >> (uint32_t)6U | e << ((uint32_t)32U - (uint32_t)6U))
 c000cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000cb8:	ea4f 12b3 	mov.w	r2, r3, ror #6
        ^
          ((e >> (uint32_t)11U | e << ((uint32_t)32U - (uint32_t)11U))
 c000cbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000cc0:	ea4f 21f3 	mov.w	r1, r3, ror #11
          ^ (e >> (uint32_t)25U | e << ((uint32_t)32U - (uint32_t)25U))))
 c000cc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000cc8:	ea4f 6373 	mov.w	r3, r3, ror #25
 c000ccc:	404b      	eors	r3, r1
        ^
 c000cce:	405a      	eors	r2, r3
      +
 c000cd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 c000cd4:	441a      	add	r2, r3
      + ((e & f1) ^ (~e & g))
 c000cd6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 c000cda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 c000cde:	4019      	ands	r1, r3
 c000ce0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000ce4:	43d8      	mvns	r0, r3
 c000ce6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 c000cea:	4003      	ands	r3, r0
 c000cec:	404b      	eors	r3, r1
 c000cee:	441a      	add	r2, r3
      + kt
 c000cf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 c000cf4:	4413      	add	r3, r2
    t1 =
 c000cf6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 c000cfa:	4413      	add	r3, r2
 c000cfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      + wst;
    uint32_t
    t2 =
      ((a >> (uint32_t)2U | a << ((uint32_t)32U - (uint32_t)2U))
 c000d00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c000d04:	ea4f 02b3 	mov.w	r2, r3, ror #2
      ^
        ((a >> (uint32_t)13U | a << ((uint32_t)32U - (uint32_t)13U))
 c000d08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c000d0c:	ea4f 3173 	mov.w	r1, r3, ror #13
        ^ (a >> (uint32_t)22U | a << ((uint32_t)32U - (uint32_t)22U))))
 c000d10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c000d14:	ea4f 53b3 	mov.w	r3, r3, ror #22
 c000d18:	404b      	eors	r3, r1
      ^
 c000d1a:	405a      	eors	r2, r3
      + ((a & b) ^ ((a & c) ^ (b & c)));
 c000d1c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 c000d20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c000d24:	4019      	ands	r1, r3
 c000d26:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 c000d2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c000d2e:	4058      	eors	r0, r3
 c000d30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000d34:	4003      	ands	r3, r0
 c000d36:	404b      	eors	r3, r1
    t2 =
 c000d38:	4413      	add	r3, r2
 c000d3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    uint32_t x1 = t1 + t2;
 c000d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 c000d42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c000d46:	4413      	add	r3, r2
 c000d48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint32_t x5 = d + t1;
 c000d4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 c000d50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 c000d54:	4413      	add	r3, r2
 c000d56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    uint32_t *p1 = hash_0;
 c000d5a:	f107 030c 	add.w	r3, r7, #12
 c000d5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t *p2 = hash_0 + (uint32_t)4U;
 c000d62:	f107 030c 	add.w	r3, r7, #12
 c000d66:	3310      	adds	r3, #16
 c000d68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    p1[0U] = x1;
 c000d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000d70:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 c000d74:	601a      	str	r2, [r3, #0]
    p1[1U] = a;
 c000d76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000d7a:	3304      	adds	r3, #4
 c000d7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 c000d80:	601a      	str	r2, [r3, #0]
    p1[2U] = b;
 c000d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000d86:	3308      	adds	r3, #8
 c000d88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 c000d8c:	601a      	str	r2, [r3, #0]
    p1[3U] = c;
 c000d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000d92:	330c      	adds	r3, #12
 c000d94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 c000d98:	601a      	str	r2, [r3, #0]
    p2[0U] = x5;
 c000d9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000d9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 c000da2:	601a      	str	r2, [r3, #0]
    p2[1U] = e;
 c000da4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000da8:	3304      	adds	r3, #4
 c000daa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 c000dae:	601a      	str	r2, [r3, #0]
    p2[2U] = f1;
 c000db0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000db4:	3308      	adds	r3, #8
 c000db6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 c000dba:	601a      	str	r2, [r3, #0]
    p2[3U] = g;
 c000dbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000dc0:	330c      	adds	r3, #12
 c000dc2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 c000dc6:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000dcc:	3301      	adds	r3, #1
 c000dce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c000dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000dd6:	2b3f      	cmp	r3, #63	; 0x3f
 c000dd8:	f67f af42 	bls.w	c000c60 <Hacl_Impl_SHA2_256_update+0x15c>
  }
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)8U; i = i + (uint32_t)1U)
 c000ddc:	2300      	movs	r3, #0
 c000dde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c000de2:	e022      	b.n	c000e2a <Hacl_Impl_SHA2_256_update+0x326>
  {
    uint32_t xi = hash_w[i];
 c000de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000de8:	009b      	lsls	r3, r3, #2
 c000dea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 c000dee:	4413      	add	r3, r2
 c000df0:	681b      	ldr	r3, [r3, #0]
 c000df2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32_t yi = hash_0[i];
 c000df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000dfa:	009b      	lsls	r3, r3, #2
 c000dfc:	33f0      	adds	r3, #240	; 0xf0
 c000dfe:	443b      	add	r3, r7
 c000e00:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 c000e04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    hash_w[i] = xi + yi;
 c000e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000e0c:	009b      	lsls	r3, r3, #2
 c000e0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 c000e12:	4413      	add	r3, r2
 c000e14:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 c000e18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 c000e1c:	440a      	add	r2, r1
 c000e1e:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)8U; i = i + (uint32_t)1U)
 c000e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000e24:	3301      	adds	r3, #1
 c000e26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c000e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000e2e:	2b07      	cmp	r3, #7
 c000e30:	d9d8      	bls.n	c000de4 <Hacl_Impl_SHA2_256_update+0x2e0>
  }
  uint32_t c0 = counter_w[0U];
 c000e32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c000e36:	681b      	ldr	r3, [r3, #0]
 c000e38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  uint32_t one1 = (uint32_t)1U;
 c000e3c:	2301      	movs	r3, #1
 c000e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  counter_w[0U] = c0 + one1;
 c000e42:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 c000e46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 c000e4a:	441a      	add	r2, r3
 c000e4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c000e50:	601a      	str	r2, [r3, #0]
}
 c000e52:	bf00      	nop
 c000e54:	37f0      	adds	r7, #240	; 0xf0
 c000e56:	46bd      	mov	sp, r7
 c000e58:	bd80      	pop	{r7, pc}

0c000e5a <Hacl_Impl_SHA2_256_update_multi>:

static void Hacl_Impl_SHA2_256_update_multi(uint32_t *state, uint8_t *data, uint32_t n1)
{
 c000e5a:	b580      	push	{r7, lr}
 c000e5c:	b086      	sub	sp, #24
 c000e5e:	af00      	add	r7, sp, #0
 c000e60:	60f8      	str	r0, [r7, #12]
 c000e62:	60b9      	str	r1, [r7, #8]
 c000e64:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < n1; i = i + (uint32_t)1U)
 c000e66:	2300      	movs	r3, #0
 c000e68:	617b      	str	r3, [r7, #20]
 c000e6a:	e00b      	b.n	c000e84 <Hacl_Impl_SHA2_256_update_multi+0x2a>
  {
    uint8_t *b = data + i * (uint32_t)64U;
 c000e6c:	697b      	ldr	r3, [r7, #20]
 c000e6e:	019b      	lsls	r3, r3, #6
 c000e70:	68ba      	ldr	r2, [r7, #8]
 c000e72:	4413      	add	r3, r2
 c000e74:	613b      	str	r3, [r7, #16]
    Hacl_Impl_SHA2_256_update(state, b);
 c000e76:	6939      	ldr	r1, [r7, #16]
 c000e78:	68f8      	ldr	r0, [r7, #12]
 c000e7a:	f7ff fe43 	bl	c000b04 <Hacl_Impl_SHA2_256_update>
  for (uint32_t i = (uint32_t)0U; i < n1; i = i + (uint32_t)1U)
 c000e7e:	697b      	ldr	r3, [r7, #20]
 c000e80:	3301      	adds	r3, #1
 c000e82:	617b      	str	r3, [r7, #20]
 c000e84:	697a      	ldr	r2, [r7, #20]
 c000e86:	687b      	ldr	r3, [r7, #4]
 c000e88:	429a      	cmp	r2, r3
 c000e8a:	d3ef      	bcc.n	c000e6c <Hacl_Impl_SHA2_256_update_multi+0x12>
  }
}
 c000e8c:	bf00      	nop
 c000e8e:	bf00      	nop
 c000e90:	3718      	adds	r7, #24
 c000e92:	46bd      	mov	sp, r7
 c000e94:	bd80      	pop	{r7, pc}

0c000e96 <Hacl_Impl_SHA2_256_update_last>:

static void Hacl_Impl_SHA2_256_update_last(uint32_t *state, uint8_t *data, uint32_t len)
{
 c000e96:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c000e9a:	b0ba      	sub	sp, #232	; 0xe8
 c000e9c:	af00      	add	r7, sp, #0
 c000e9e:	6278      	str	r0, [r7, #36]	; 0x24
 c000ea0:	6239      	str	r1, [r7, #32]
 c000ea2:	61fa      	str	r2, [r7, #28]
  uint8_t blocks[128U] = { 0U };
 c000ea4:	2300      	movs	r3, #0
 c000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 c000ea8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 c000eac:	237c      	movs	r3, #124	; 0x7c
 c000eae:	461a      	mov	r2, r3
 c000eb0:	2100      	movs	r1, #0
 c000eb2:	f008 f9bc 	bl	c00922e <memset>
  uint32_t nb;
  if (len < (uint32_t)56U)
 c000eb6:	69fb      	ldr	r3, [r7, #28]
 c000eb8:	2b37      	cmp	r3, #55	; 0x37
 c000eba:	d803      	bhi.n	c000ec4 <Hacl_Impl_SHA2_256_update_last+0x2e>
    nb = (uint32_t)1U;
 c000ebc:	2301      	movs	r3, #1
 c000ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c000ec2:	e002      	b.n	c000eca <Hacl_Impl_SHA2_256_update_last+0x34>
  else
    nb = (uint32_t)2U;
 c000ec4:	2302      	movs	r3, #2
 c000ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint8_t *final_blocks;
  if (len < (uint32_t)56U)
 c000eca:	69fb      	ldr	r3, [r7, #28]
 c000ecc:	2b37      	cmp	r3, #55	; 0x37
 c000ece:	d805      	bhi.n	c000edc <Hacl_Impl_SHA2_256_update_last+0x46>
    final_blocks = blocks + (uint32_t)64U;
 c000ed0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 c000ed4:	3340      	adds	r3, #64	; 0x40
 c000ed6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c000eda:	e003      	b.n	c000ee4 <Hacl_Impl_SHA2_256_update_last+0x4e>
  else
    final_blocks = blocks;
 c000edc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 c000ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  memcpy(final_blocks, data, len * sizeof data[0U]);
 c000ee4:	69fa      	ldr	r2, [r7, #28]
 c000ee6:	6a39      	ldr	r1, [r7, #32]
 c000ee8:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 c000eec:	f008 f992 	bl	c009214 <memcpy>
  uint32_t n1 = state[136U];
 c000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000ef2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 c000ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint8_t *padding = final_blocks + len;
 c000efa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 c000efe:	69fb      	ldr	r3, [r7, #28]
 c000f00:	4413      	add	r3, r2
 c000f02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t
  pad0len = ((uint32_t)64U - (len + (uint32_t)8U + (uint32_t)1U) % (uint32_t)64U) % (uint32_t)64U;
 c000f06:	69fa      	ldr	r2, [r7, #28]
 c000f08:	f06f 0308 	mvn.w	r3, #8
 c000f0c:	1a9b      	subs	r3, r3, r2
 c000f0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c000f12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint8_t *buf1 = padding;
 c000f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 c000f1a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  uint8_t *buf2 = padding + (uint32_t)1U + pad0len;
 c000f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 c000f22:	3301      	adds	r3, #1
 c000f24:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000f28:	4413      	add	r3, r2
 c000f2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  uint64_t
  encodedlen = ((uint64_t)n1 * (uint64_t)(uint32_t)64U + (uint64_t)len) * (uint64_t)(uint32_t)8U;
 c000f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 c000f32:	2200      	movs	r2, #0
 c000f34:	4698      	mov	r8, r3
 c000f36:	4691      	mov	r9, r2
 c000f38:	f04f 0200 	mov.w	r2, #0
 c000f3c:	f04f 0300 	mov.w	r3, #0
 c000f40:	ea4f 1389 	mov.w	r3, r9, lsl #6
 c000f44:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 c000f48:	ea4f 1288 	mov.w	r2, r8, lsl #6
 c000f4c:	69f9      	ldr	r1, [r7, #28]
 c000f4e:	2000      	movs	r0, #0
 c000f50:	6139      	str	r1, [r7, #16]
 c000f52:	6178      	str	r0, [r7, #20]
 c000f54:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 c000f58:	4641      	mov	r1, r8
 c000f5a:	1854      	adds	r4, r2, r1
 c000f5c:	4649      	mov	r1, r9
 c000f5e:	eb43 0101 	adc.w	r1, r3, r1
 c000f62:	460d      	mov	r5, r1
 c000f64:	f04f 0200 	mov.w	r2, #0
 c000f68:	f04f 0300 	mov.w	r3, #0
 c000f6c:	00eb      	lsls	r3, r5, #3
 c000f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 c000f72:	00e2      	lsls	r2, r4, #3
 c000f74:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  buf1[0U] = (uint8_t)0x80U;
 c000f78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c000f7c:	2280      	movs	r2, #128	; 0x80
 c000f7e:	701a      	strb	r2, [r3, #0]
  store64_be(buf2, encodedlen);
 c000f80:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 c000f84:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 c000f88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c000f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 c000f90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000f94:	0e1a      	lsrs	r2, r3, #24
 c000f96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000f9a:	0a1b      	lsrs	r3, r3, #8
 c000f9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c000fa0:	431a      	orrs	r2, r3
 c000fa2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000fa6:	021b      	lsls	r3, r3, #8
 c000fa8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c000fac:	431a      	orrs	r2, r3
 c000fae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000fb2:	061b      	lsls	r3, r3, #24
 c000fb4:	4313      	orrs	r3, r2
 c000fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 c000fba:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 c000fbe:	f04f 0200 	mov.w	r2, #0
 c000fc2:	f04f 0300 	mov.w	r3, #0
 c000fc6:	000a      	movs	r2, r1
 c000fc8:	2300      	movs	r3, #0
 c000fca:	4613      	mov	r3, r2
 c000fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c000fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000fd4:	0e1a      	lsrs	r2, r3, #24
 c000fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000fda:	0a1b      	lsrs	r3, r3, #8
 c000fdc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c000fe0:	431a      	orrs	r2, r3
 c000fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000fe6:	021b      	lsls	r3, r3, #8
 c000fe8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c000fec:	431a      	orrs	r2, r3
 c000fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000ff2:	061b      	lsls	r3, r3, #24
 c000ff4:	4313      	orrs	r3, r2
 c000ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 c000ffa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c000ffe:	2200      	movs	r2, #0
 c001000:	60bb      	str	r3, [r7, #8]
 c001002:	60fa      	str	r2, [r7, #12]
 c001004:	f04f 0200 	mov.w	r2, #0
 c001008:	f04f 0300 	mov.w	r3, #0
 c00100c:	68b9      	ldr	r1, [r7, #8]
 c00100e:	000b      	movs	r3, r1
 c001010:	2200      	movs	r2, #0
 c001012:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 c001016:	2000      	movs	r0, #0
 c001018:	468a      	mov	sl, r1
 c00101a:	4683      	mov	fp, r0
 c00101c:	ea42 010a 	orr.w	r1, r2, sl
 c001020:	6039      	str	r1, [r7, #0]
 c001022:	ea43 030b 	orr.w	r3, r3, fp
 c001026:	607b      	str	r3, [r7, #4]
 c001028:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00102c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 c001030:	f7ff faea 	bl	c000608 <store64>
  Hacl_Impl_SHA2_256_update_multi(state, final_blocks, nb);
 c001034:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 c001038:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 c00103c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 c00103e:	f7ff ff0c 	bl	c000e5a <Hacl_Impl_SHA2_256_update_multi>
}
 c001042:	bf00      	nop
 c001044:	37e8      	adds	r7, #232	; 0xe8
 c001046:	46bd      	mov	sp, r7
 c001048:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c00104c <Hacl_Impl_SHA2_256_finish>:

static void Hacl_Impl_SHA2_256_finish(uint32_t *state, uint8_t *hash1)
{
 c00104c:	b580      	push	{r7, lr}
 c00104e:	b084      	sub	sp, #16
 c001050:	af00      	add	r7, sp, #0
 c001052:	6078      	str	r0, [r7, #4]
 c001054:	6039      	str	r1, [r7, #0]
  uint32_t *hash_w = state + (uint32_t)128U;
 c001056:	687b      	ldr	r3, [r7, #4]
 c001058:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c00105c:	60fb      	str	r3, [r7, #12]
  Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes(hash1, hash_w, (uint32_t)8U);
 c00105e:	2208      	movs	r2, #8
 c001060:	68f9      	ldr	r1, [r7, #12]
 c001062:	6838      	ldr	r0, [r7, #0]
 c001064:	f7ff fb14 	bl	c000690 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes>
}
 c001068:	bf00      	nop
 c00106a:	3710      	adds	r7, #16
 c00106c:	46bd      	mov	sp, r7
 c00106e:	bd80      	pop	{r7, pc}

0c001070 <Hacl_Impl_SHA2_256_hash>:

static void Hacl_Impl_SHA2_256_hash(uint8_t *hash1, uint8_t *input, uint32_t len)
{
 c001070:	b580      	push	{r7, lr}
 c001072:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 c001076:	af00      	add	r7, sp, #0
 c001078:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c00107c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 c001080:	6018      	str	r0, [r3, #0]
 c001082:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001086:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 c00108a:	6019      	str	r1, [r3, #0]
 c00108c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001090:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c001094:	601a      	str	r2, [r3, #0]
  uint32_t state[137U] = { 0U };
 c001096:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c00109a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 c00109e:	4618      	mov	r0, r3
 c0010a0:	f44f 7309 	mov.w	r3, #548	; 0x224
 c0010a4:	461a      	mov	r2, r3
 c0010a6:	2100      	movs	r1, #0
 c0010a8:	f008 f8c1 	bl	c00922e <memset>
  uint32_t n1 = len / (uint32_t)64U;
 c0010ac:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c0010b0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c0010b4:	681b      	ldr	r3, [r3, #0]
 c0010b6:	099b      	lsrs	r3, r3, #6
 c0010b8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  uint32_t r = len % (uint32_t)64U;
 c0010bc:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c0010c0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c0010c4:	681b      	ldr	r3, [r3, #0]
 c0010c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c0010ca:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  uint8_t *input_blocks = input;
 c0010ce:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c0010d2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 c0010d6:	681b      	ldr	r3, [r3, #0]
 c0010d8:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  uint8_t *input_last = input + n1 * (uint32_t)64U;
 c0010dc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 c0010e0:	019b      	lsls	r3, r3, #6
 c0010e2:	f507 7212 	add.w	r2, r7, #584	; 0x248
 c0010e6:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 c0010ea:	6812      	ldr	r2, [r2, #0]
 c0010ec:	4413      	add	r3, r2
 c0010ee:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
  Hacl_Impl_SHA2_256_init(state);
 c0010f2:	f107 0314 	add.w	r3, r7, #20
 c0010f6:	4618      	mov	r0, r3
 c0010f8:	f7ff fb00 	bl	c0006fc <Hacl_Impl_SHA2_256_init>
  Hacl_Impl_SHA2_256_update_multi(state, input_blocks, n1);
 c0010fc:	f107 0314 	add.w	r3, r7, #20
 c001100:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 c001104:	f8d7 123c 	ldr.w	r1, [r7, #572]	; 0x23c
 c001108:	4618      	mov	r0, r3
 c00110a:	f7ff fea6 	bl	c000e5a <Hacl_Impl_SHA2_256_update_multi>
  Hacl_Impl_SHA2_256_update_last(state, input_last, r);
 c00110e:	f107 0314 	add.w	r3, r7, #20
 c001112:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 c001116:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 c00111a:	4618      	mov	r0, r3
 c00111c:	f7ff febb 	bl	c000e96 <Hacl_Impl_SHA2_256_update_last>
  Hacl_Impl_SHA2_256_finish(state, hash1);
 c001120:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001124:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 c001128:	f107 0214 	add.w	r2, r7, #20
 c00112c:	6819      	ldr	r1, [r3, #0]
 c00112e:	4610      	mov	r0, r2
 c001130:	f7ff ff8c 	bl	c00104c <Hacl_Impl_SHA2_256_finish>
}
 c001134:	bf00      	nop
 c001136:	f507 7712 	add.w	r7, r7, #584	; 0x248
 c00113a:	46bd      	mov	sp, r7
 c00113c:	bd80      	pop	{r7, pc}

0c00113e <Hacl_SHA2_256_hash>:
{
  Hacl_Impl_SHA2_256_finish(state, hash1);
}

void Hacl_SHA2_256_hash(uint8_t *hash1, uint8_t *input, uint32_t len)
{
 c00113e:	b580      	push	{r7, lr}
 c001140:	b084      	sub	sp, #16
 c001142:	af00      	add	r7, sp, #0
 c001144:	60f8      	str	r0, [r7, #12]
 c001146:	60b9      	str	r1, [r7, #8]
 c001148:	607a      	str	r2, [r7, #4]
  Hacl_Impl_SHA2_256_hash(hash1, input, len);
 c00114a:	687a      	ldr	r2, [r7, #4]
 c00114c:	68b9      	ldr	r1, [r7, #8]
 c00114e:	68f8      	ldr	r0, [r7, #12]
 c001150:	f7ff ff8e 	bl	c001070 <Hacl_Impl_SHA2_256_hash>
}
 c001154:	bf00      	nop
 c001156:	3710      	adds	r7, #16
 c001158:	46bd      	mov	sp, r7
 c00115a:	bd80      	pop	{r7, pc}

0c00115c <_setup_data>:
	----------------------------- SUPERVISOR  --------------------------------------------
	---------------------------------------------------------------------------------
*/

//-------------------------- UTILS -------//
void _setup_data(){
 c00115c:	b480      	push	{r7}
 c00115e:	b083      	sub	sp, #12
 c001160:	af00      	add	r7, sp, #0
	for(unsigned int i = 0; i < CHAL_SIZE; ++i ){
 c001162:	2300      	movs	r3, #0
 c001164:	607b      	str	r3, [r7, #4]
 c001166:	e014      	b.n	c001192 <_setup_data+0x36>
		cfa_engine_conf.hash_key[i] = i;
 c001168:	687b      	ldr	r3, [r7, #4]
 c00116a:	b2d9      	uxtb	r1, r3
 c00116c:	4a0e      	ldr	r2, [pc, #56]	; (c0011a8 <_setup_data+0x4c>)
 c00116e:	687b      	ldr	r3, [r7, #4]
 c001170:	4413      	add	r3, r2
 c001172:	334a      	adds	r3, #74	; 0x4a
 c001174:	460a      	mov	r2, r1
 c001176:	701a      	strb	r2, [r3, #0]
		cfa_engine_conf.challenge[i] = 0x65+i;
 c001178:	687b      	ldr	r3, [r7, #4]
 c00117a:	b2db      	uxtb	r3, r3
 c00117c:	3365      	adds	r3, #101	; 0x65
 c00117e:	b2d9      	uxtb	r1, r3
 c001180:	4a09      	ldr	r2, [pc, #36]	; (c0011a8 <_setup_data+0x4c>)
 c001182:	687b      	ldr	r3, [r7, #4]
 c001184:	4413      	add	r3, r2
 c001186:	3308      	adds	r3, #8
 c001188:	460a      	mov	r2, r1
 c00118a:	701a      	strb	r2, [r3, #0]
	for(unsigned int i = 0; i < CHAL_SIZE; ++i ){
 c00118c:	687b      	ldr	r3, [r7, #4]
 c00118e:	3301      	adds	r3, #1
 c001190:	607b      	str	r3, [r7, #4]
 c001192:	687b      	ldr	r3, [r7, #4]
 c001194:	2b3f      	cmp	r3, #63	; 0x3f
 c001196:	d9e7      	bls.n	c001168 <_setup_data+0xc>
	}
}
 c001198:	bf00      	nop
 c00119a:	bf00      	nop
 c00119c:	370c      	adds	r7, #12
 c00119e:	46bd      	mov	sp, r7
 c0011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0011a4:	4770      	bx	lr
 c0011a6:	bf00      	nop
 c0011a8:	300020f8 	.word	0x300020f8

0c0011ac <_update_challenge>:

void _update_challenge(uint8_t* chl){
 c0011ac:	b4f0      	push	{r4, r5, r6, r7}
 c0011ae:	b082      	sub	sp, #8
 c0011b0:	af00      	add	r7, sp, #0
 c0011b2:	6078      	str	r0, [r7, #4]
	memcpy(cfa_engine_conf.challenge,chl, CHAL_SIZE);
 c0011b4:	4b15      	ldr	r3, [pc, #84]	; (c00120c <_update_challenge+0x60>)
 c0011b6:	687a      	ldr	r2, [r7, #4]
 c0011b8:	4614      	mov	r4, r2
 c0011ba:	f103 0608 	add.w	r6, r3, #8
 c0011be:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 c0011c2:	4635      	mov	r5, r6
 c0011c4:	4623      	mov	r3, r4
 c0011c6:	6818      	ldr	r0, [r3, #0]
 c0011c8:	6859      	ldr	r1, [r3, #4]
 c0011ca:	689a      	ldr	r2, [r3, #8]
 c0011cc:	68db      	ldr	r3, [r3, #12]
 c0011ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 c0011d0:	3410      	adds	r4, #16
 c0011d2:	3610      	adds	r6, #16
 c0011d4:	4564      	cmp	r4, ip
 c0011d6:	d1f4      	bne.n	c0011c2 <_update_challenge+0x16>
	memcpy(vrf_resp.new_challenge,chl, CHAL_SIZE);
 c0011d8:	4a0d      	ldr	r2, [pc, #52]	; (c001210 <_update_challenge+0x64>)
 c0011da:	687b      	ldr	r3, [r7, #4]
 c0011dc:	461c      	mov	r4, r3
 c0011de:	4616      	mov	r6, r2
 c0011e0:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 c0011e4:	4635      	mov	r5, r6
 c0011e6:	4623      	mov	r3, r4
 c0011e8:	6818      	ldr	r0, [r3, #0]
 c0011ea:	6859      	ldr	r1, [r3, #4]
 c0011ec:	689a      	ldr	r2, [r3, #8]
 c0011ee:	68db      	ldr	r3, [r3, #12]
 c0011f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 c0011f2:	3410      	adds	r4, #16
 c0011f4:	3610      	adds	r6, #16
 c0011f6:	4564      	cmp	r4, ip
 c0011f8:	d1f4      	bne.n	c0011e4 <_update_challenge+0x38>
	cfa_engine_conf.challenge_renewed = TRUE;
 c0011fa:	4b04      	ldr	r3, [pc, #16]	; (c00120c <_update_challenge+0x60>)
 c0011fc:	2201      	movs	r2, #1
 c0011fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 c001202:	bf00      	nop
 c001204:	3708      	adds	r7, #8
 c001206:	46bd      	mov	sp, r7
 c001208:	bcf0      	pop	{r4, r5, r6, r7}
 c00120a:	4770      	bx	lr
 c00120c:	300020f8 	.word	0x300020f8
 c001210:	30002184 	.word	0x30002184

0c001214 <_clean>:

void _clean(){
 c001214:	b480      	push	{r7}
 c001216:	af00      	add	r7, sp, #0
	cfa_engine_conf.log_counter = 0;
 c001218:	4b10      	ldr	r3, [pc, #64]	; (c00125c <_clean+0x48>)
 c00121a:	2200      	movs	r2, #0
 c00121c:	80da      	strh	r2, [r3, #6]
	report_secure.number_of_logs_sent = 0;
 c00121e:	4b10      	ldr	r3, [pc, #64]	; (c001260 <_clean+0x4c>)
 c001220:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 c001224:	2200      	movs	r2, #0
 c001226:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	cfa_engine_conf.initialized = INITIALIZED;
 c00122a:	4b0c      	ldr	r3, [pc, #48]	; (c00125c <_clean+0x48>)
 c00122c:	22ee      	movs	r2, #238	; 0xee
 c00122e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	cfa_engine_conf.attestation_status = INACTIVE;
 c001232:	4b0a      	ldr	r3, [pc, #40]	; (c00125c <_clean+0x48>)
 c001234:	2200      	movs	r2, #0
 c001236:	711a      	strb	r2, [r3, #4]
	report_secure.num_CF_Log_size = 0;
 c001238:	4b09      	ldr	r3, [pc, #36]	; (c001260 <_clean+0x4c>)
 c00123a:	2200      	movs	r2, #0
 c00123c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	cfa_engine_conf.challenge_renewed = FALSE;
 c001240:	4b06      	ldr	r3, [pc, #24]	; (c00125c <_clean+0x48>)
 c001242:	2200      	movs	r2, #0
 c001244:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	report_secure.isFinal = FALSE;
 c001248:	4b05      	ldr	r3, [pc, #20]	; (c001260 <_clean+0x4c>)
 c00124a:	2200      	movs	r2, #0
 c00124c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 c001250:	bf00      	nop
 c001252:	46bd      	mov	sp, r7
 c001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001258:	4770      	bx	lr
 c00125a:	bf00      	nop
 c00125c:	300020f8 	.word	0x300020f8
 c001260:	30000074 	.word	0x30000074

0c001264 <_clean_partial>:

void _clean_partial(){
 c001264:	b480      	push	{r7}
 c001266:	af00      	add	r7, sp, #0
	report_secure.num_CF_Log_size = 0;
 c001268:	4b04      	ldr	r3, [pc, #16]	; (c00127c <_clean_partial+0x18>)
 c00126a:	2200      	movs	r2, #0
 c00126c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
}
 c001270:	bf00      	nop
 c001272:	46bd      	mov	sp, r7
 c001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001278:	4770      	bx	lr
 c00127a:	bf00      	nop
 c00127c:	30000074 	.word	0x30000074

0c001280 <_run_application>:

void _run_application(){
 c001280:	b598      	push	{r3, r4, r7, lr}
 c001282:	af00      	add	r7, sp, #0
	//start app
	if (cfa_engine_conf.iac.app_start_address != NULL){
 c001284:	4b18      	ldr	r3, [pc, #96]	; (c0012e8 <_run_application+0x68>)
 c001286:	681b      	ldr	r3, [r3, #0]
 c001288:	2b00      	cmp	r3, #0
 c00128a:	d02b      	beq.n	c0012e4 <_run_application+0x64>
		cfa_engine_conf.iac.app_start_address();
 c00128c:	4b16      	ldr	r3, [pc, #88]	; (c0012e8 <_run_application+0x68>)
 c00128e:	681b      	ldr	r3, [r3, #0]
 c001290:	461c      	mov	r4, r3
 c001292:	0864      	lsrs	r4, r4, #1
 c001294:	0064      	lsls	r4, r4, #1
 c001296:	4620      	mov	r0, r4
 c001298:	4621      	mov	r1, r4
 c00129a:	4622      	mov	r2, r4
 c00129c:	4623      	mov	r3, r4
 c00129e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0012a2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0012a6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0012aa:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0012ae:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0012b2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0012b6:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0012ba:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0012be:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0012c2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0012c6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0012ca:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0012ce:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0012d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0012d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0012da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0012de:	f7fe ffb9 	bl	c000254 <__gnu_cmse_nonsecure_call>
	}
	return;
 c0012e2:	bf00      	nop
 c0012e4:	bf00      	nop
}
 c0012e6:	bd98      	pop	{r3, r4, r7, pc}
 c0012e8:	300020f8 	.word	0x300020f8

0c0012ec <record_output_data>:

uint32_t output_data = 0;
void record_output_data(uint32_t value){
 c0012ec:	b480      	push	{r7}
 c0012ee:	b083      	sub	sp, #12
 c0012f0:	af00      	add	r7, sp, #0
 c0012f2:	6078      	str	r0, [r7, #4]
	output_data = value;
 c0012f4:	4a04      	ldr	r2, [pc, #16]	; (c001308 <record_output_data+0x1c>)
 c0012f6:	687b      	ldr	r3, [r7, #4]
 c0012f8:	6013      	str	r3, [r2, #0]
}
 c0012fa:	bf00      	nop
 c0012fc:	370c      	adds	r7, #12
 c0012fe:	46bd      	mov	sp, r7
 c001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001304:	4770      	bx	lr
 c001306:	bf00      	nop
 c001308:	300022a4 	.word	0x300022a4

0c00130c <CFA_ENGINE_start>:
}
#endif

/* -------------  NON SECURE CALLABLES */

void CFA_ENGINE_start(){
 c00130c:	b580      	push	{r7, lr}
 c00130e:	af00      	add	r7, sp, #0
	while(1){
		_attest_memory();
 c001310:	f000 faaa 	bl	c001868 <_attest_memory>
		_setup_data();
 c001314:	f7ff ff22 	bl	c00115c <_setup_data>
		_clean();
 c001318:	f7ff ff7c 	bl	c001214 <_clean>
		_read_serial_loop();
 c00131c:	f000 f8d8 	bl	c0014d0 <_read_serial_loop>
		_attest_memory();
 c001320:	e7f6      	b.n	c001310 <CFA_ENGINE_start+0x4>
	...

0c001324 <CFA_ENGINE_register_callback>:
	}
}

void CFA_ENGINE_register_callback(){
 c001324:	b480      	push	{r7}
 c001326:	af00      	add	r7, sp, #0
	cfa_engine_conf.iac.app_start_address = (funcptr_NS)  pAttestationFunctionCallback;
 c001328:	4b04      	ldr	r3, [pc, #16]	; (c00133c <CFA_ENGINE_register_callback+0x18>)
 c00132a:	681b      	ldr	r3, [r3, #0]
 c00132c:	461a      	mov	r2, r3
 c00132e:	4b04      	ldr	r3, [pc, #16]	; (c001340 <CFA_ENGINE_register_callback+0x1c>)
 c001330:	601a      	str	r2, [r3, #0]
	return;
 c001332:	bf00      	nop
}
 c001334:	46bd      	mov	sp, r7
 c001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00133a:	4770      	bx	lr
 c00133c:	30002330 	.word	0x30002330
 c001340:	300020f8 	.word	0x300020f8

0c001344 <STATE_initialize_attestation>:

/* --------------- - STATE HANDLING --------------------- */



int STATE_initialize_attestation(){
 c001344:	b580      	push	{r7, lr}
 c001346:	b082      	sub	sp, #8
 c001348:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.attestation_status == INACTIVE){
 c00134a:	4b13      	ldr	r3, [pc, #76]	; (c001398 <STATE_initialize_attestation+0x54>)
 c00134c:	791b      	ldrb	r3, [r3, #4]
 c00134e:	2b00      	cmp	r3, #0
 c001350:	d11c      	bne.n	c00138c <STATE_initialize_attestation+0x48>

		// send response to vrf
		uint8_t ready_char[COMMAND_SIZE+1] = INIT_ATTESTATION;
 c001352:	4a12      	ldr	r2, [pc, #72]	; (c00139c <STATE_initialize_attestation+0x58>)
 c001354:	463b      	mov	r3, r7
 c001356:	e892 0003 	ldmia.w	r2, {r0, r1}
 c00135a:	6018      	str	r0, [r3, #0]
 c00135c:	3304      	adds	r3, #4
 c00135e:	7019      	strb	r1, [r3, #0]
		SecureUartTx(ready_char, COMMAND_SIZE);
 c001360:	463b      	mov	r3, r7
 c001362:	2104      	movs	r1, #4
 c001364:	4618      	mov	r0, r3
 c001366:	f003 f9f3 	bl	c004750 <SecureUartTx>

		// receive challange
		if(_receive_challenge()) return 1;
 c00136a:	f000 f955 	bl	c001618 <_receive_challenge>
 c00136e:	4603      	mov	r3, r0
 c001370:	2b00      	cmp	r3, #0
 c001372:	d001      	beq.n	c001378 <STATE_initialize_attestation+0x34>
 c001374:	2301      	movs	r3, #1
 c001376:	e00a      	b.n	c00138e <STATE_initialize_attestation+0x4a>

		// start application
		cfa_engine_conf.attestation_status = ACTIVE;
 c001378:	4b07      	ldr	r3, [pc, #28]	; (c001398 <STATE_initialize_attestation+0x54>)
 c00137a:	2201      	movs	r2, #1
 c00137c:	711a      	strb	r2, [r3, #4]
		CFA_ENGINE_run_attestation();
 c00137e:	f000 fb81 	bl	c001a84 <CFA_ENGINE_run_attestation>
		cfa_engine_conf.attestation_status = COMPLETE;
 c001382:	4b05      	ldr	r3, [pc, #20]	; (c001398 <STATE_initialize_attestation+0x54>)
 c001384:	2202      	movs	r2, #2
 c001386:	711a      	strb	r2, [r3, #4]

		// Send final report
		_send_report();
 c001388:	f000 fa1c 	bl	c0017c4 <_send_report>
	}
	return CONTINUE_LOOP;
 c00138c:	2301      	movs	r3, #1
}
 c00138e:	4618      	mov	r0, r3
 c001390:	3708      	adds	r7, #8
 c001392:	46bd      	mov	sp, r7
 c001394:	bd80      	pop	{r7, pc}
 c001396:	bf00      	nop
 c001398:	300020f8 	.word	0x300020f8
 c00139c:	0c009258 	.word	0x0c009258

0c0013a0 <STATE_accept_report>:

int STATE_accept_report(){
 c0013a0:	b580      	push	{r7, lr}
 c0013a2:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.attestation_status == COMPLETE){
 c0013a4:	4b06      	ldr	r3, [pc, #24]	; (c0013c0 <STATE_accept_report+0x20>)
 c0013a6:	791b      	ldrb	r3, [r3, #4]
 c0013a8:	2b02      	cmp	r3, #2
 c0013aa:	d106      	bne.n	c0013ba <STATE_accept_report+0x1a>
		cfa_engine_conf.attestation_status = INACTIVE; //temp
 c0013ac:	4b04      	ldr	r3, [pc, #16]	; (c0013c0 <STATE_accept_report+0x20>)
 c0013ae:	2200      	movs	r2, #0
 c0013b0:	711a      	strb	r2, [r3, #4]
		_clean();
 c0013b2:	f7ff ff2f 	bl	c001214 <_clean>
		return EXIT_LOOP;
 c0013b6:	2300      	movs	r3, #0
 c0013b8:	e000      	b.n	c0013bc <STATE_accept_report+0x1c>
	}
	return CONTINUE_LOOP;
 c0013ba:	2301      	movs	r3, #1
}
 c0013bc:	4618      	mov	r0, r3
 c0013be:	bd80      	pop	{r7, pc}
 c0013c0:	300020f8 	.word	0x300020f8

0c0013c4 <STATE_heal>:

int STATE_heal(){
 c0013c4:	b580      	push	{r7, lr}
 c0013c6:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.attestation_status == COMPLETE || cfa_engine_conf.attestation_status == WAITING_PARTIAL){
 c0013c8:	4b07      	ldr	r3, [pc, #28]	; (c0013e8 <STATE_heal+0x24>)
 c0013ca:	791b      	ldrb	r3, [r3, #4]
 c0013cc:	2b02      	cmp	r3, #2
 c0013ce:	d003      	beq.n	c0013d8 <STATE_heal+0x14>
 c0013d0:	4b05      	ldr	r3, [pc, #20]	; (c0013e8 <STATE_heal+0x24>)
 c0013d2:	791b      	ldrb	r3, [r3, #4]
 c0013d4:	2b04      	cmp	r3, #4
 c0013d6:	d103      	bne.n	c0013e0 <STATE_heal+0x1c>
		_heal_function();
 c0013d8:	f000 fc18 	bl	c001c0c <_heal_function>
		return EXIT_LOOP;
 c0013dc:	2300      	movs	r3, #0
 c0013de:	e000      	b.n	c0013e2 <STATE_heal+0x1e>
	}
	return CONTINUE_LOOP;
 c0013e0:	2301      	movs	r3, #1
}
 c0013e2:	4618      	mov	r0, r3
 c0013e4:	bd80      	pop	{r7, pc}
 c0013e6:	bf00      	nop
 c0013e8:	300020f8 	.word	0x300020f8

0c0013ec <STATE_continue>:

int STATE_continue(){
 c0013ec:	b580      	push	{r7, lr}
 c0013ee:	af00      	add	r7, sp, #0

	_receive_challenge();
 c0013f0:	f000 f912 	bl	c001618 <_receive_challenge>

	cfa_engine_conf.attestation_status = ACTIVE;
 c0013f4:	4b02      	ldr	r3, [pc, #8]	; (c001400 <STATE_continue+0x14>)
 c0013f6:	2201      	movs	r2, #1
 c0013f8:	711a      	strb	r2, [r3, #4]

//	_initialize_timer_interrupt();

	return EXIT_LOOP;
 c0013fa:	2300      	movs	r3, #0
}
 c0013fc:	4618      	mov	r0, r3
 c0013fe:	bd80      	pop	{r7, pc}
 c001400:	300020f8 	.word	0x300020f8

0c001404 <translate_command>:

/* ---------------------------  PROTOCOL  ----------------------------------------- */


char translate_command(int8_t command_received[]){
 c001404:	b580      	push	{r7, lr}
 c001406:	b082      	sub	sp, #8
 c001408:	af00      	add	r7, sp, #0
 c00140a:	6078      	str	r0, [r7, #4]
	command_received[COMMAND_SIZE] = '\0';
 c00140c:	687b      	ldr	r3, [r7, #4]
 c00140e:	3304      	adds	r3, #4
 c001410:	2200      	movs	r2, #0
 c001412:	701a      	strb	r2, [r3, #0]
	if (!strcmp(command_received,INIT_ATTESTATION))
 c001414:	4914      	ldr	r1, [pc, #80]	; (c001468 <translate_command+0x64>)
 c001416:	6878      	ldr	r0, [r7, #4]
 c001418:	f7fe ff12 	bl	c000240 <strcmp>
 c00141c:	4603      	mov	r3, r0
 c00141e:	2b00      	cmp	r3, #0
 c001420:	d101      	bne.n	c001426 <translate_command+0x22>
		return INIT_ATTESTATION_CHAR;
 c001422:	2369      	movs	r3, #105	; 0x69
 c001424:	e01b      	b.n	c00145e <translate_command+0x5a>
	else if (!strcmp(command_received,ACCEPTED_REPORT))
 c001426:	4911      	ldr	r1, [pc, #68]	; (c00146c <translate_command+0x68>)
 c001428:	6878      	ldr	r0, [r7, #4]
 c00142a:	f7fe ff09 	bl	c000240 <strcmp>
 c00142e:	4603      	mov	r3, r0
 c001430:	2b00      	cmp	r3, #0
 c001432:	d101      	bne.n	c001438 <translate_command+0x34>
		return ACCEPT_REPORT_CHAR;
 c001434:	2376      	movs	r3, #118	; 0x76
 c001436:	e012      	b.n	c00145e <translate_command+0x5a>
	else if (!strcmp(command_received,CONTINUE_REQUEST))
 c001438:	490d      	ldr	r1, [pc, #52]	; (c001470 <translate_command+0x6c>)
 c00143a:	6878      	ldr	r0, [r7, #4]
 c00143c:	f7fe ff00 	bl	c000240 <strcmp>
 c001440:	4603      	mov	r3, r0
 c001442:	2b00      	cmp	r3, #0
 c001444:	d101      	bne.n	c00144a <translate_command+0x46>
		return CONTINUE_CHAR;
 c001446:	2363      	movs	r3, #99	; 0x63
 c001448:	e009      	b.n	c00145e <translate_command+0x5a>
	else if (!strcmp(command_received,HEAL_REQUEST))
 c00144a:	490a      	ldr	r1, [pc, #40]	; (c001474 <translate_command+0x70>)
 c00144c:	6878      	ldr	r0, [r7, #4]
 c00144e:	f7fe fef7 	bl	c000240 <strcmp>
 c001452:	4603      	mov	r3, r0
 c001454:	2b00      	cmp	r3, #0
 c001456:	d101      	bne.n	c00145c <translate_command+0x58>
		return HEAL_CHAR;
 c001458:	2368      	movs	r3, #104	; 0x68
 c00145a:	e000      	b.n	c00145e <translate_command+0x5a>
	return 'X';
 c00145c:	2358      	movs	r3, #88	; 0x58

}
 c00145e:	4618      	mov	r0, r3
 c001460:	3708      	adds	r7, #8
 c001462:	46bd      	mov	sp, r7
 c001464:	bd80      	pop	{r7, pc}
 c001466:	bf00      	nop
 c001468:	0c009258 	.word	0x0c009258
 c00146c:	0c009260 	.word	0x0c009260
 c001470:	0c009268 	.word	0x0c009268
 c001474:	0c009270 	.word	0x0c009270

0c001478 <wait_for_command>:

void wait_for_command(char pattern[],int size){
 c001478:	b580      	push	{r7, lr}
 c00147a:	b086      	sub	sp, #24
 c00147c:	af00      	add	r7, sp, #0
 c00147e:	6078      	str	r0, [r7, #4]
 c001480:	6039      	str	r1, [r7, #0]
	int found_size = 0;
 c001482:	2300      	movs	r3, #0
 c001484:	617b      	str	r3, [r7, #20]
	int i = 0;
 c001486:	2300      	movs	r3, #0
 c001488:	613b      	str	r3, [r7, #16]
	char read_char;
	while(found_size != size){
 c00148a:	e017      	b.n	c0014bc <wait_for_command+0x44>
		SecureUartRx((uint8_t*)&read_char, 1);
 c00148c:	f107 030f 	add.w	r3, r7, #15
 c001490:	2101      	movs	r1, #1
 c001492:	4618      	mov	r0, r3
 c001494:	f003 f970 	bl	c004778 <SecureUartRx>
		if (read_char == pattern[i]){
 c001498:	693b      	ldr	r3, [r7, #16]
 c00149a:	687a      	ldr	r2, [r7, #4]
 c00149c:	4413      	add	r3, r2
 c00149e:	781a      	ldrb	r2, [r3, #0]
 c0014a0:	7bfb      	ldrb	r3, [r7, #15]
 c0014a2:	429a      	cmp	r2, r3
 c0014a4:	d106      	bne.n	c0014b4 <wait_for_command+0x3c>
			i++;
 c0014a6:	693b      	ldr	r3, [r7, #16]
 c0014a8:	3301      	adds	r3, #1
 c0014aa:	613b      	str	r3, [r7, #16]
			found_size++;
 c0014ac:	697b      	ldr	r3, [r7, #20]
 c0014ae:	3301      	adds	r3, #1
 c0014b0:	617b      	str	r3, [r7, #20]
 c0014b2:	e003      	b.n	c0014bc <wait_for_command+0x44>
		}
		else{
			i = 0;
 c0014b4:	2300      	movs	r3, #0
 c0014b6:	613b      	str	r3, [r7, #16]
			found_size = 0;
 c0014b8:	2300      	movs	r3, #0
 c0014ba:	617b      	str	r3, [r7, #20]
	while(found_size != size){
 c0014bc:	697a      	ldr	r2, [r7, #20]
 c0014be:	683b      	ldr	r3, [r7, #0]
 c0014c0:	429a      	cmp	r2, r3
 c0014c2:	d1e3      	bne.n	c00148c <wait_for_command+0x14>
		}
	}
}
 c0014c4:	bf00      	nop
 c0014c6:	bf00      	nop
 c0014c8:	3718      	adds	r7, #24
 c0014ca:	46bd      	mov	sp, r7
 c0014cc:	bd80      	pop	{r7, pc}
	...

0c0014d0 <_read_serial_loop>:

void _read_serial_loop(){
 c0014d0:	b580      	push	{r7, lr}
 c0014d2:	b082      	sub	sp, #8
 c0014d4:	af00      	add	r7, sp, #0
	uint8_t command_received[COMMAND_SIZE+1];
	uint8_t state = CONTINUE_LOOP;
 c0014d6:	2301      	movs	r3, #1
 c0014d8:	71fb      	strb	r3, [r7, #7]
	char aaa;
	while(state == CONTINUE_LOOP){
 c0014da:	e054      	b.n	c001586 <_read_serial_loop+0xb6>
		wait_for_command(BEGGINING_OF_COMMAND,COMMAND_SIZE);
 c0014dc:	2104      	movs	r1, #4
 c0014de:	482e      	ldr	r0, [pc, #184]	; (c001598 <_read_serial_loop+0xc8>)
 c0014e0:	f7ff ffca 	bl	c001478 <wait_for_command>
		_receive_request(COMMAND_SIZE, command_received);
 c0014e4:	463b      	mov	r3, r7
 c0014e6:	4619      	mov	r1, r3
 c0014e8:	2004      	movs	r0, #4
 c0014ea:	f000 f915 	bl	c001718 <_receive_request>
		aaa = translate_command(command_received);
 c0014ee:	463b      	mov	r3, r7
 c0014f0:	4618      	mov	r0, r3
 c0014f2:	f7ff ff87 	bl	c001404 <translate_command>
 c0014f6:	4603      	mov	r3, r0
 c0014f8:	71bb      	strb	r3, [r7, #6]
		switch(aaa){
 c0014fa:	79bb      	ldrb	r3, [r7, #6]
 c0014fc:	3b63      	subs	r3, #99	; 0x63
 c0014fe:	2b13      	cmp	r3, #19
 c001500:	d83e      	bhi.n	c001580 <_read_serial_loop+0xb0>
 c001502:	a201      	add	r2, pc, #4	; (adr r2, c001508 <_read_serial_loop+0x38>)
 c001504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c001508:	0c001577 	.word	0x0c001577
 c00150c:	0c001581 	.word	0x0c001581
 c001510:	0c001581 	.word	0x0c001581
 c001514:	0c001581 	.word	0x0c001581
 c001518:	0c001581 	.word	0x0c001581
 c00151c:	0c00156d 	.word	0x0c00156d
 c001520:	0c001559 	.word	0x0c001559
 c001524:	0c001581 	.word	0x0c001581
 c001528:	0c001581 	.word	0x0c001581
 c00152c:	0c001581 	.word	0x0c001581
 c001530:	0c001581 	.word	0x0c001581
 c001534:	0c001581 	.word	0x0c001581
 c001538:	0c001581 	.word	0x0c001581
 c00153c:	0c001581 	.word	0x0c001581
 c001540:	0c001581 	.word	0x0c001581
 c001544:	0c001581 	.word	0x0c001581
 c001548:	0c001581 	.word	0x0c001581
 c00154c:	0c001581 	.word	0x0c001581
 c001550:	0c001581 	.word	0x0c001581
 c001554:	0c001563 	.word	0x0c001563

			case INIT_ATTESTATION_CHAR:
				state = STATE_initialize_attestation();
 c001558:	f7ff fef4 	bl	c001344 <STATE_initialize_attestation>
 c00155c:	4603      	mov	r3, r0
 c00155e:	71fb      	strb	r3, [r7, #7]
				break;
 c001560:	e011      	b.n	c001586 <_read_serial_loop+0xb6>

			case ACCEPT_REPORT_CHAR:
				state = STATE_accept_report();
 c001562:	f7ff ff1d 	bl	c0013a0 <STATE_accept_report>
 c001566:	4603      	mov	r3, r0
 c001568:	71fb      	strb	r3, [r7, #7]
				break;
 c00156a:	e00c      	b.n	c001586 <_read_serial_loop+0xb6>

			case HEAL_CHAR:
				state = STATE_heal();
 c00156c:	f7ff ff2a 	bl	c0013c4 <STATE_heal>
 c001570:	4603      	mov	r3, r0
 c001572:	71fb      	strb	r3, [r7, #7]
				break;
 c001574:	e007      	b.n	c001586 <_read_serial_loop+0xb6>

			case CONTINUE_CHAR:
				state = STATE_continue();
 c001576:	f7ff ff39 	bl	c0013ec <STATE_continue>
 c00157a:	4603      	mov	r3, r0
 c00157c:	71fb      	strb	r3, [r7, #7]
				break;
 c00157e:	e002      	b.n	c001586 <_read_serial_loop+0xb6>

			default:
				state = CONTINUE_LOOP;
 c001580:	2301      	movs	r3, #1
 c001582:	71fb      	strb	r3, [r7, #7]
				break;
 c001584:	bf00      	nop
	while(state == CONTINUE_LOOP){
 c001586:	79fb      	ldrb	r3, [r7, #7]
 c001588:	2b01      	cmp	r3, #1
 c00158a:	d0a7      	beq.n	c0014dc <_read_serial_loop+0xc>
		}
	}
}
 c00158c:	bf00      	nop
 c00158e:	bf00      	nop
 c001590:	3708      	adds	r7, #8
 c001592:	46bd      	mov	sp, r7
 c001594:	bd80      	pop	{r7, pc}
 c001596:	bf00      	nop
 c001598:	0c009278 	.word	0x0c009278

0c00159c <_deactivate_timer_interrupt>:
void _activate_timeout_interrupt(){
	HAL_TIM_Base_Start(&htim3);
}


void _deactivate_timer_interrupt(){
 c00159c:	b580      	push	{r7, lr}
 c00159e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim3);
 c0015a0:	4804      	ldr	r0, [pc, #16]	; (c0015b4 <_deactivate_timer_interrupt+0x18>)
 c0015a2:	f006 fad0 	bl	c007b46 <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim3, 0); // reset count
 c0015a6:	4b03      	ldr	r3, [pc, #12]	; (c0015b4 <_deactivate_timer_interrupt+0x18>)
 c0015a8:	681b      	ldr	r3, [r3, #0]
 c0015aa:	2200      	movs	r2, #0
 c0015ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 c0015ae:	bf00      	nop
 c0015b0:	bd80      	pop	{r7, pc}
 c0015b2:	bf00      	nop
 c0015b4:	30002334 	.word	0x30002334

0c0015b8 <CFA_time_interrupt_handler>:

void CFA_time_interrupt_handler(){
 c0015b8:	b580      	push	{r7, lr}
 c0015ba:	b082      	sub	sp, #8
 c0015bc:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM3_CLK_DISABLE();
 c0015be:	4b13      	ldr	r3, [pc, #76]	; (c00160c <CFA_time_interrupt_handler+0x54>)
 c0015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0015c2:	4a12      	ldr	r2, [pc, #72]	; (c00160c <CFA_time_interrupt_handler+0x54>)
 c0015c4:	f023 0302 	bic.w	r3, r3, #2
 c0015c8:	6593      	str	r3, [r2, #88]	; 0x58
	report_secure.isFinal = PARTIAL_REPORT;
 c0015ca:	4b11      	ldr	r3, [pc, #68]	; (c001610 <CFA_time_interrupt_handler+0x58>)
 c0015cc:	2250      	movs	r2, #80	; 0x50
 c0015ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	_sign_report();
 c0015d2:	f000 f96f 	bl	c0018b4 <_sign_report>
	_send_report_message();
 c0015d6:	f000 f8af 	bl	c001738 <_send_report_message>
	_clean_partial();
 c0015da:	f7ff fe43 	bl	c001264 <_clean_partial>
	_read_serial_loop();
 c0015de:	f7ff ff77 	bl	c0014d0 <_read_serial_loop>
	ti_reset_timer_counter(TIMER_INTERRUPT);
 c0015e2:	4b0c      	ldr	r3, [pc, #48]	; (c001614 <CFA_time_interrupt_handler+0x5c>)
 c0015e4:	681b      	ldr	r3, [r3, #0]
 c0015e6:	2200      	movs	r2, #0
 c0015e8:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RCC_TIM3_CLK_ENABLE();
 c0015ea:	4b08      	ldr	r3, [pc, #32]	; (c00160c <CFA_time_interrupt_handler+0x54>)
 c0015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0015ee:	4a07      	ldr	r2, [pc, #28]	; (c00160c <CFA_time_interrupt_handler+0x54>)
 c0015f0:	f043 0302 	orr.w	r3, r3, #2
 c0015f4:	6593      	str	r3, [r2, #88]	; 0x58
 c0015f6:	4b05      	ldr	r3, [pc, #20]	; (c00160c <CFA_time_interrupt_handler+0x54>)
 c0015f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0015fa:	f003 0302 	and.w	r3, r3, #2
 c0015fe:	607b      	str	r3, [r7, #4]
 c001600:	687b      	ldr	r3, [r7, #4]
}
 c001602:	bf00      	nop
 c001604:	3708      	adds	r7, #8
 c001606:	46bd      	mov	sp, r7
 c001608:	bd80      	pop	{r7, pc}
 c00160a:	bf00      	nop
 c00160c:	50021000 	.word	0x50021000
 c001610:	30000074 	.word	0x30000074
 c001614:	30002334 	.word	0x30002334

0c001618 <_receive_challenge>:

/* -----------------------------  SENDING REPORT ------------------------------------ */
uint32_t receive_resp_time;
uint32_t verify_resp_time;
uint8_t  _receive_challenge(){
 c001618:	b580      	push	{r7, lr}
 c00161a:	b098      	sub	sp, #96	; 0x60
 c00161c:	af02      	add	r7, sp, #8
	uint8_t chl[64];
//	uint8_t init_chal[] = BEGGINING_OF_CHALLANGE;

	uint32_t start = HAL_GetTick();
 c00161e:	f003 f953 	bl	c0048c8 <HAL_GetTick>
 c001622:	64f8      	str	r0, [r7, #76]	; 0x4c
	SecureUartRx((uint8_t*)chl, CHAL_SIZE);
 c001624:	463b      	mov	r3, r7
 c001626:	2140      	movs	r1, #64	; 0x40
 c001628:	4618      	mov	r0, r3
 c00162a:	f003 f8a5 	bl	c004778 <SecureUartRx>
//	SecureUartTx(init_chal, COMMAND_SIZE); // echo for debug
//	SecureUartTx((uint8_t*)chl, 64);

	// read verifier signature
	SecureUartRx((uint8_t*)(&vrf_resp.signature), SIGNATURE_SIZE_BYTES);
 c00162e:	2140      	movs	r1, #64	; 0x40
 c001630:	4830      	ldr	r0, [pc, #192]	; (c0016f4 <_receive_challenge+0xdc>)
 c001632:	f003 f8a1 	bl	c004778 <SecureUartRx>
//	SecureUartTx((uint8_t*)(&vrf_resp.signature), SIGNATURE_SIZE_BYTES);


	uint32_t stop = HAL_GetTick();
 c001636:	f003 f947 	bl	c0048c8 <HAL_GetTick>
 c00163a:	64b8      	str	r0, [r7, #72]	; 0x48
	receive_resp_time = stop-start;
 c00163c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c00163e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c001640:	1ad3      	subs	r3, r2, r3
 c001642:	4a2d      	ldr	r2, [pc, #180]	; (c0016f8 <_receive_challenge+0xe0>)
 c001644:	6013      	str	r3, [r2, #0]

	start = HAL_GetTick();
 c001646:	f003 f93f 	bl	c0048c8 <HAL_GetTick>
 c00164a:	64f8      	str	r0, [r7, #76]	; 0x4c

	// Check chal is greater than prev chal
	#if MODE == AUD
	unsigned int i;
	int valid_next_chal = 1;
 c00164c:	2301      	movs	r3, #1
 c00164e:	653b      	str	r3, [r7, #80]	; 0x50
	for(i=0; i<CHAL_SIZE; i++){
 c001650:	2300      	movs	r3, #0
 c001652:	657b      	str	r3, [r7, #84]	; 0x54
 c001654:	e010      	b.n	c001678 <_receive_challenge+0x60>
		if(chl[i] < cfa_engine_conf.challenge[i]){
 c001656:	463a      	mov	r2, r7
 c001658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c00165a:	4413      	add	r3, r2
 c00165c:	781a      	ldrb	r2, [r3, #0]
 c00165e:	4927      	ldr	r1, [pc, #156]	; (c0016fc <_receive_challenge+0xe4>)
 c001660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c001662:	440b      	add	r3, r1
 c001664:	3308      	adds	r3, #8
 c001666:	781b      	ldrb	r3, [r3, #0]
 c001668:	429a      	cmp	r2, r3
 c00166a:	d202      	bcs.n	c001672 <_receive_challenge+0x5a>
			valid_next_chal = 0;
 c00166c:	2300      	movs	r3, #0
 c00166e:	653b      	str	r3, [r7, #80]	; 0x50
			break;
 c001670:	e005      	b.n	c00167e <_receive_challenge+0x66>
	for(i=0; i<CHAL_SIZE; i++){
 c001672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c001674:	3301      	adds	r3, #1
 c001676:	657b      	str	r3, [r7, #84]	; 0x54
 c001678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c00167a:	2b3f      	cmp	r3, #63	; 0x3f
 c00167c:	d9eb      	bls.n	c001656 <_receive_challenge+0x3e>
		}
	}
	#endif

	_update_challenge(chl);
 c00167e:	463b      	mov	r3, r7
 c001680:	4618      	mov	r0, r3
 c001682:	f7ff fd93 	bl	c0011ac <_update_challenge>

	// check verifier signature by sig = ECDSA(private_key, hash(report))
	// 1) get SHA256 hash over report (excluding buffer that holds signature)
	uint32_t response_size = CHAL_SIZE + 1 + HASH_SIZE_BYTES;
 c001686:	2361      	movs	r3, #97	; 0x61
 c001688:	647b      	str	r3, [r7, #68]	; 0x44
	Hacl_SHA2_256_hash(response_hash, (uint8_t*)(&vrf_resp), response_size);
 c00168a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 c00168c:	491c      	ldr	r1, [pc, #112]	; (c001700 <_receive_challenge+0xe8>)
 c00168e:	481d      	ldr	r0, [pc, #116]	; (c001704 <_receive_challenge+0xec>)
 c001690:	f7ff fd55 	bl	c00113e <Hacl_SHA2_256_hash>
	// 2) verify signature of hash
    curve = uECC_secp256r1();
 c001694:	f002 fa0e 	bl	c003ab4 <uECC_secp256r1>
 c001698:	4603      	mov	r3, r0
 c00169a:	4a1b      	ldr	r2, [pc, #108]	; (c001708 <_receive_challenge+0xf0>)
 c00169c:	6013      	str	r3, [r2, #0]
    int valid_sig =  uECC_verify(public_key, response_hash, HASH_SIZE_BYTES, vrf_resp.signature, curve);
 c00169e:	4b1a      	ldr	r3, [pc, #104]	; (c001708 <_receive_challenge+0xf0>)
 c0016a0:	681b      	ldr	r3, [r3, #0]
 c0016a2:	9300      	str	r3, [sp, #0]
 c0016a4:	4b13      	ldr	r3, [pc, #76]	; (c0016f4 <_receive_challenge+0xdc>)
 c0016a6:	2220      	movs	r2, #32
 c0016a8:	4916      	ldr	r1, [pc, #88]	; (c001704 <_receive_challenge+0xec>)
 c0016aa:	4818      	ldr	r0, [pc, #96]	; (c00170c <_receive_challenge+0xf4>)
 c0016ac:	f002 fcd8 	bl	c004060 <uECC_verify>
 c0016b0:	6438      	str	r0, [r7, #64]	; 0x40

    vrf_resp.verify_result = (valid_next_chal & valid_sig);
 c0016b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c0016b4:	b25a      	sxtb	r2, r3
 c0016b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c0016b8:	b25b      	sxtb	r3, r3
 c0016ba:	4013      	ands	r3, r2
 c0016bc:	b25b      	sxtb	r3, r3
 c0016be:	b2da      	uxtb	r2, r3
 c0016c0:	4b0f      	ldr	r3, [pc, #60]	; (c001700 <_receive_challenge+0xe8>)
 c0016c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    stop = HAL_GetTick();
 c0016c6:	f003 f8ff 	bl	c0048c8 <HAL_GetTick>
 c0016ca:	64b8      	str	r0, [r7, #72]	; 0x48
    verify_resp_time = stop-start;
 c0016cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c0016ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0016d0:	1ad3      	subs	r3, r2, r3
 c0016d2:	4a0f      	ldr	r2, [pc, #60]	; (c001710 <_receive_challenge+0xf8>)
 c0016d4:	6013      	str	r3, [r2, #0]
    recv_verify_response_time = receive_resp_time + verify_resp_time;
 c0016d6:	4b08      	ldr	r3, [pc, #32]	; (c0016f8 <_receive_challenge+0xe0>)
 c0016d8:	681a      	ldr	r2, [r3, #0]
 c0016da:	4b0d      	ldr	r3, [pc, #52]	; (c001710 <_receive_challenge+0xf8>)
 c0016dc:	681b      	ldr	r3, [r3, #0]
 c0016de:	4413      	add	r3, r2
 c0016e0:	4a0c      	ldr	r2, [pc, #48]	; (c001714 <_receive_challenge+0xfc>)
 c0016e2:	6013      	str	r3, [r2, #0]

	return vrf_resp.verify_result;
 c0016e4:	4b06      	ldr	r3, [pc, #24]	; (c001700 <_receive_challenge+0xe8>)
 c0016e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
}
 c0016ea:	4618      	mov	r0, r3
 c0016ec:	3758      	adds	r7, #88	; 0x58
 c0016ee:	46bd      	mov	sp, r7
 c0016f0:	bd80      	pop	{r7, pc}
 c0016f2:	bf00      	nop
 c0016f4:	300021c5 	.word	0x300021c5
 c0016f8:	300022a8 	.word	0x300022a8
 c0016fc:	300020f8 	.word	0x300020f8
 c001700:	30002184 	.word	0x30002184
 c001704:	30002270 	.word	0x30002270
 c001708:	30002290 	.word	0x30002290
 c00170c:	30000020 	.word	0x30000020
 c001710:	300022ac 	.word	0x300022ac
 c001714:	30002294 	.word	0x30002294

0c001718 <_receive_request>:

void _receive_request(int size,uint8_t* read_char){
 c001718:	b580      	push	{r7, lr}
 c00171a:	b082      	sub	sp, #8
 c00171c:	af00      	add	r7, sp, #0
 c00171e:	6078      	str	r0, [r7, #4]
 c001720:	6039      	str	r1, [r7, #0]
	SecureUartRx(read_char, size);
 c001722:	687b      	ldr	r3, [r7, #4]
 c001724:	b29b      	uxth	r3, r3
 c001726:	4619      	mov	r1, r3
 c001728:	6838      	ldr	r0, [r7, #0]
 c00172a:	f003 f825 	bl	c004778 <SecureUartRx>
	return;
 c00172e:	bf00      	nop
}
 c001730:	3708      	adds	r7, #8
 c001732:	46bd      	mov	sp, r7
 c001734:	bd80      	pop	{r7, pc}
	...

0c001738 <_send_report_message>:

uint32_t send_report_time;
uint32_t send_report_start;
uint32_t send_report_stop;
void _send_report_message(){
 c001738:	b580      	push	{r7, lr}
 c00173a:	b084      	sub	sp, #16
 c00173c:	af00      	add	r7, sp, #0
	send_report_start = HAL_GetTick();
 c00173e:	f003 f8c3 	bl	c0048c8 <HAL_GetTick>
 c001742:	4603      	mov	r3, r0
 c001744:	4a19      	ldr	r2, [pc, #100]	; (c0017ac <_send_report_message+0x74>)
 c001746:	6013      	str	r3, [r2, #0]
	uint8_t init_report[] = BEGGINING_OF_REPORT;
 c001748:	4a19      	ldr	r2, [pc, #100]	; (c0017b0 <_send_report_message+0x78>)
 c00174a:	463b      	mov	r3, r7
 c00174c:	e892 0003 	ldmia.w	r2, {r0, r1}
 c001750:	6018      	str	r0, [r3, #0]
 c001752:	3304      	adds	r3, #4
 c001754:	7019      	strb	r1, [r3, #0]
	SecureUartTx(init_report, COMMAND_SIZE);
 c001756:	463b      	mov	r3, r7
 c001758:	2104      	movs	r1, #4
 c00175a:	4618      	mov	r0, r3
 c00175c:	f002 fff8 	bl	c004750 <SecureUartTx>
	// Baseline End-to-end APP
//	SecureUartTx((uint8_t *)(&output_data), 4);
//	SecureUartTx(report_secure.signature, SIGNATURE_SIZE_BYTES);

	// CFA or TRACES
	SecureUartTx(report_secure.signature, SIGNATURE_SIZE_BYTES+2);
 c001760:	2142      	movs	r1, #66	; 0x42
 c001762:	4814      	ldr	r0, [pc, #80]	; (c0017b4 <_send_report_message+0x7c>)
 c001764:	f002 fff4 	bl	c004750 <SecureUartTx>
	int data_size = 2 + 4*report_secure.num_CF_Log_size;
 c001768:	4b12      	ldr	r3, [pc, #72]	; (c0017b4 <_send_report_message+0x7c>)
 c00176a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c00176e:	009b      	lsls	r3, r3, #2
 c001770:	3302      	adds	r3, #2
 c001772:	60fb      	str	r3, [r7, #12]
	uint8_t * report_addr = (uint8_t*)(&(report_secure.num_CF_Log_size));
 c001774:	4b10      	ldr	r3, [pc, #64]	; (c0017b8 <_send_report_message+0x80>)
 c001776:	60bb      	str	r3, [r7, #8]
	SecureUartTx(report_addr, data_size);
 c001778:	68fb      	ldr	r3, [r7, #12]
 c00177a:	b29b      	uxth	r3, r3
 c00177c:	4619      	mov	r1, r3
 c00177e:	68b8      	ldr	r0, [r7, #8]
 c001780:	f002 ffe6 	bl	c004750 <SecureUartTx>
	send_report_stop = HAL_GetTick();
 c001784:	f003 f8a0 	bl	c0048c8 <HAL_GetTick>
 c001788:	4603      	mov	r3, r0
 c00178a:	4a0c      	ldr	r2, [pc, #48]	; (c0017bc <_send_report_message+0x84>)
 c00178c:	6013      	str	r3, [r2, #0]
	send_report_time = send_report_stop - send_report_start;
 c00178e:	4b0b      	ldr	r3, [pc, #44]	; (c0017bc <_send_report_message+0x84>)
 c001790:	681a      	ldr	r2, [r3, #0]
 c001792:	4b06      	ldr	r3, [pc, #24]	; (c0017ac <_send_report_message+0x74>)
 c001794:	681b      	ldr	r3, [r3, #0]
 c001796:	1ad3      	subs	r3, r2, r3
 c001798:	4a09      	ldr	r2, [pc, #36]	; (c0017c0 <_send_report_message+0x88>)
 c00179a:	6013      	str	r3, [r2, #0]

	// timing for debug
	SecureUartTx((uint8_t *)(&send_report_time), 4);
 c00179c:	2104      	movs	r1, #4
 c00179e:	4808      	ldr	r0, [pc, #32]	; (c0017c0 <_send_report_message+0x88>)
 c0017a0:	f002 ffd6 	bl	c004750 <SecureUartTx>
}
 c0017a4:	bf00      	nop
 c0017a6:	3710      	adds	r7, #16
 c0017a8:	46bd      	mov	sp, r7
 c0017aa:	bd80      	pop	{r7, pc}
 c0017ac:	300022b4 	.word	0x300022b4
 c0017b0:	0c009280 	.word	0x0c009280
 c0017b4:	30000074 	.word	0x30000074
 c0017b8:	300000d6 	.word	0x300000d6
 c0017bc:	300022b8 	.word	0x300022b8
 c0017c0:	300022b0 	.word	0x300022b0

0c0017c4 <_send_report>:

uint32_t compute_send_report_time;
uint32_t compute_send_report_start;
uint32_t compute_send_report_stop;
void _send_report(){
 c0017c4:	b580      	push	{r7, lr}
 c0017c6:	af00      	add	r7, sp, #0
	_deactivate_timer_interrupt();
 c0017c8:	f7ff fee8 	bl	c00159c <_deactivate_timer_interrupt>
	report_secure.number_of_logs_sent ++;
 c0017cc:	4b21      	ldr	r3, [pc, #132]	; (c001854 <_send_report+0x90>)
 c0017ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 c0017d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 c0017d6:	3301      	adds	r3, #1
 c0017d8:	b29a      	uxth	r2, r3
 c0017da:	4b1e      	ldr	r3, [pc, #120]	; (c001854 <_send_report+0x90>)
 c0017dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 c0017e0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	if (cfa_engine_conf.attestation_status == COMPLETE){
 c0017e4:	4b1c      	ldr	r3, [pc, #112]	; (c001858 <_send_report+0x94>)
 c0017e6:	791b      	ldrb	r3, [r3, #4]
 c0017e8:	2b02      	cmp	r3, #2
 c0017ea:	d112      	bne.n	c001812 <_send_report+0x4e>
		report_secure.isFinal = FINAL_REPORT;
 c0017ec:	4b19      	ldr	r3, [pc, #100]	; (c001854 <_send_report+0x90>)
 c0017ee:	2246      	movs	r2, #70	; 0x46
 c0017f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		compute_send_report_start = HAL_GetTick();
 c0017f4:	f003 f868 	bl	c0048c8 <HAL_GetTick>
 c0017f8:	4603      	mov	r3, r0
 c0017fa:	4a18      	ldr	r2, [pc, #96]	; (c00185c <_send_report+0x98>)
 c0017fc:	6013      	str	r3, [r2, #0]
		_sign_report(); // must come after isFinal is set since signs all report data
 c0017fe:	f000 f859 	bl	c0018b4 <_sign_report>
		_send_report_message();
 c001802:	f7ff ff99 	bl	c001738 <_send_report_message>
		compute_send_report_stop = HAL_GetTick();
 c001806:	f003 f85f 	bl	c0048c8 <HAL_GetTick>
 c00180a:	4603      	mov	r3, r0
 c00180c:	4a14      	ldr	r2, [pc, #80]	; (c001860 <_send_report+0x9c>)
 c00180e:	6013      	str	r3, [r2, #0]
 c001810:	e017      	b.n	c001842 <_send_report+0x7e>
	}
	else if(cfa_engine_conf.attestation_status == WAITING_PARTIAL){
 c001812:	4b11      	ldr	r3, [pc, #68]	; (c001858 <_send_report+0x94>)
 c001814:	791b      	ldrb	r3, [r3, #4]
 c001816:	2b04      	cmp	r3, #4
 c001818:	d113      	bne.n	c001842 <_send_report+0x7e>
		report_secure.isFinal = PARTIAL_REPORT;
 c00181a:	4b0e      	ldr	r3, [pc, #56]	; (c001854 <_send_report+0x90>)
 c00181c:	2250      	movs	r2, #80	; 0x50
 c00181e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		compute_send_report_start = HAL_GetTick();
 c001822:	f003 f851 	bl	c0048c8 <HAL_GetTick>
 c001826:	4603      	mov	r3, r0
 c001828:	4a0c      	ldr	r2, [pc, #48]	; (c00185c <_send_report+0x98>)
 c00182a:	6013      	str	r3, [r2, #0]
		_sign_report();
 c00182c:	f000 f842 	bl	c0018b4 <_sign_report>
		_send_report_message();
 c001830:	f7ff ff82 	bl	c001738 <_send_report_message>
		_clean_partial();
 c001834:	f7ff fd16 	bl	c001264 <_clean_partial>
		compute_send_report_stop = HAL_GetTick();
 c001838:	f003 f846 	bl	c0048c8 <HAL_GetTick>
 c00183c:	4603      	mov	r3, r0
 c00183e:	4a08      	ldr	r2, [pc, #32]	; (c001860 <_send_report+0x9c>)
 c001840:	6013      	str	r3, [r2, #0]
	}

	compute_send_report_time = compute_send_report_stop - compute_send_report_start;
 c001842:	4b07      	ldr	r3, [pc, #28]	; (c001860 <_send_report+0x9c>)
 c001844:	681a      	ldr	r2, [r3, #0]
 c001846:	4b05      	ldr	r3, [pc, #20]	; (c00185c <_send_report+0x98>)
 c001848:	681b      	ldr	r3, [r3, #0]
 c00184a:	1ad3      	subs	r3, r2, r3
 c00184c:	4a05      	ldr	r2, [pc, #20]	; (c001864 <_send_report+0xa0>)
 c00184e:	6013      	str	r3, [r2, #0]
	return;
 c001850:	bf00      	nop
}
 c001852:	bd80      	pop	{r7, pc}
 c001854:	30000074 	.word	0x30000074
 c001858:	300020f8 	.word	0x300020f8
 c00185c:	300022c0 	.word	0x300022c0
 c001860:	300022c4 	.word	0x300022c4
 c001864:	300022bc 	.word	0x300022bc

0c001868 <_attest_memory>:

/* ----------------------------- CRYPTO-OPERATIONS --------------------------------- */
uint32_t time_hash_memory;
uint32_t time_hash_memory_start;
uint32_t time_hash_memory_end;
void _attest_memory(){
 c001868:	b580      	push	{r7, lr}
 c00186a:	af00      	add	r7, sp, #0
	time_hash_memory_start = HAL_GetTick();
 c00186c:	f003 f82c 	bl	c0048c8 <HAL_GetTick>
 c001870:	4603      	mov	r3, r0
 c001872:	4a0b      	ldr	r2, [pc, #44]	; (c0018a0 <_attest_memory+0x38>)
 c001874:	6013      	str	r3, [r2, #0]
	// Compute sigle hash of non-secure memory
	Hacl_SHA2_256_hash(report_secure.mem_hash, (uint8_t*)(NONSECURE_FLASH_START), NONSECURE_FLASH_SIZE);
 c001876:	f640 22f8 	movw	r2, #2808	; 0xaf8
 c00187a:	490a      	ldr	r1, [pc, #40]	; (c0018a4 <_attest_memory+0x3c>)
 c00187c:	480a      	ldr	r0, [pc, #40]	; (c0018a8 <_attest_memory+0x40>)
 c00187e:	f7ff fc5e 	bl	c00113e <Hacl_SHA2_256_hash>
	time_hash_memory_end = HAL_GetTick();
 c001882:	f003 f821 	bl	c0048c8 <HAL_GetTick>
 c001886:	4603      	mov	r3, r0
 c001888:	4a08      	ldr	r2, [pc, #32]	; (c0018ac <_attest_memory+0x44>)
 c00188a:	6013      	str	r3, [r2, #0]
	time_hash_memory = time_hash_memory_end-time_hash_memory_start;
 c00188c:	4b07      	ldr	r3, [pc, #28]	; (c0018ac <_attest_memory+0x44>)
 c00188e:	681a      	ldr	r2, [r3, #0]
 c001890:	4b03      	ldr	r3, [pc, #12]	; (c0018a0 <_attest_memory+0x38>)
 c001892:	681b      	ldr	r3, [r3, #0]
 c001894:	1ad3      	subs	r3, r2, r3
 c001896:	4a06      	ldr	r2, [pc, #24]	; (c0018b0 <_attest_memory+0x48>)
 c001898:	6013      	str	r3, [r2, #0]
}
 c00189a:	bf00      	nop
 c00189c:	bd80      	pop	{r7, pc}
 c00189e:	bf00      	nop
 c0018a0:	300022cc 	.word	0x300022cc
 c0018a4:	080401f8 	.word	0x080401f8
 c0018a8:	300000b6 	.word	0x300000b6
 c0018ac:	300022d0 	.word	0x300022d0
 c0018b0:	300022c8 	.word	0x300022c8

0c0018b4 <_sign_report>:

uint32_t time_sign_report;
uint32_t time_sign_report_start;
uint32_t time_sign_report_end;
void _sign_report(){
 c0018b4:	b580      	push	{r7, lr}
 c0018b6:	b082      	sub	sp, #8
 c0018b8:	af00      	add	r7, sp, #0
	time_sign_report_start = HAL_GetTick();
 c0018ba:	f003 f805 	bl	c0048c8 <HAL_GetTick>
 c0018be:	4603      	mov	r3, r0
 c0018c0:	4a0e      	ldr	r2, [pc, #56]	; (c0018fc <_sign_report+0x48>)
 c0018c2:	6013      	str	r3, [r2, #0]
	// Baseline End-to-end APP
//	uint32_t report_size = 4; // in bytes
//	Hacl_SHA2_256_hash(report_hash, (uint8_t*)(&output_data), report_size);

	// CFA or TRACES
	uint32_t report_size = 2 + HASH_SIZE_BYTES + 2 + 4*report_secure.num_CF_Log_size;
 c0018c4:	4b0e      	ldr	r3, [pc, #56]	; (c001900 <_sign_report+0x4c>)
 c0018c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c0018ca:	3309      	adds	r3, #9
 c0018cc:	009b      	lsls	r3, r3, #2
 c0018ce:	607b      	str	r3, [r7, #4]
//	Hacl_SHA2_256_hash(report_hash, (uint8_t*)(&report_secure.isFinal), report_size);

//	hmac(report_secure.signature, att_key, 32, (uint8_t*)(&report_secure.isFinal), (uint32_t) report_size);

	HMAC_SHA_265((uint8_t*)(&report_secure.isFinal), report_size, report_secure.signature);
 c0018d0:	4a0b      	ldr	r2, [pc, #44]	; (c001900 <_sign_report+0x4c>)
 c0018d2:	6879      	ldr	r1, [r7, #4]
 c0018d4:	480b      	ldr	r0, [pc, #44]	; (c001904 <_sign_report+0x50>)
 c0018d6:	f000 fa75 	bl	c001dc4 <HMAC_SHA_265>
//
//	// sign hash
//    curve = uECC_secp256r1();
//    int t =  uECC_sign(private_key, report_hash, HASH_SIZE_BYTES, report_secure.signature, curve);

    time_sign_report_end = HAL_GetTick();
 c0018da:	f002 fff5 	bl	c0048c8 <HAL_GetTick>
 c0018de:	4603      	mov	r3, r0
 c0018e0:	4a09      	ldr	r2, [pc, #36]	; (c001908 <_sign_report+0x54>)
 c0018e2:	6013      	str	r3, [r2, #0]
	time_sign_report = time_sign_report_end-time_sign_report_start;
 c0018e4:	4b08      	ldr	r3, [pc, #32]	; (c001908 <_sign_report+0x54>)
 c0018e6:	681a      	ldr	r2, [r3, #0]
 c0018e8:	4b04      	ldr	r3, [pc, #16]	; (c0018fc <_sign_report+0x48>)
 c0018ea:	681b      	ldr	r3, [r3, #0]
 c0018ec:	1ad3      	subs	r3, r2, r3
 c0018ee:	4a07      	ldr	r2, [pc, #28]	; (c00190c <_sign_report+0x58>)
 c0018f0:	6013      	str	r3, [r2, #0]
}
 c0018f2:	bf00      	nop
 c0018f4:	3708      	adds	r7, #8
 c0018f6:	46bd      	mov	sp, r7
 c0018f8:	bd80      	pop	{r7, pc}
 c0018fa:	bf00      	nop
 c0018fc:	300022d8 	.word	0x300022d8
 c001900:	30000074 	.word	0x30000074
 c001904:	300000b4 	.word	0x300000b4
 c001908:	300022dc 	.word	0x300022dc
 c00190c:	300022d4 	.word	0x300022d4

0c001910 <CFA_ENGINE_new_log_entry>:
uint8_t loop_detect = 0;
uint16_t loop_counter = 1;
uint32_t prev_entry;

//void CFA_ENGINE_new_log_entry(CFA_ENTRY value){
void CFA_ENGINE_new_log_entry(uint32_t value){
 c001910:	b580      	push	{r7, lr}
 c001912:	b082      	sub	sp, #8
 c001914:	af00      	add	r7, sp, #0
 c001916:	6078      	str	r0, [r7, #4]
	if(cfa_engine_conf.log_counter % MAX_CF_LOG_SIZE == 0 && cfa_engine_conf.log_counter > 0){
 c001918:	4b53      	ldr	r3, [pc, #332]	; (c001a68 <CFA_ENGINE_new_log_entry+0x158>)
 c00191a:	88db      	ldrh	r3, [r3, #6]
 c00191c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 c001920:	b29b      	uxth	r3, r3
 c001922:	2b00      	cmp	r3, #0
 c001924:	d136      	bne.n	c001994 <CFA_ENGINE_new_log_entry+0x84>
 c001926:	4b50      	ldr	r3, [pc, #320]	; (c001a68 <CFA_ENGINE_new_log_entry+0x158>)
 c001928:	88db      	ldrh	r3, [r3, #6]
 c00192a:	2b00      	cmp	r3, #0
 c00192c:	d032      	beq.n	c001994 <CFA_ENGINE_new_log_entry+0x84>
		end = HAL_GetTick();
 c00192e:	f002 ffcb 	bl	c0048c8 <HAL_GetTick>
 c001932:	4603      	mov	r3, r0
 c001934:	4a4d      	ldr	r2, [pc, #308]	; (c001a6c <CFA_ENGINE_new_log_entry+0x15c>)
 c001936:	6013      	str	r3, [r2, #0]
		app_exec_time += end - start;
 c001938:	4b4c      	ldr	r3, [pc, #304]	; (c001a6c <CFA_ENGINE_new_log_entry+0x15c>)
 c00193a:	681a      	ldr	r2, [r3, #0]
 c00193c:	4b4c      	ldr	r3, [pc, #304]	; (c001a70 <CFA_ENGINE_new_log_entry+0x160>)
 c00193e:	681b      	ldr	r3, [r3, #0]
 c001940:	1ad2      	subs	r2, r2, r3
 c001942:	4b4c      	ldr	r3, [pc, #304]	; (c001a74 <CFA_ENGINE_new_log_entry+0x164>)
 c001944:	681b      	ldr	r3, [r3, #0]
 c001946:	4413      	add	r3, r2
 c001948:	4a4a      	ldr	r2, [pc, #296]	; (c001a74 <CFA_ENGINE_new_log_entry+0x164>)
 c00194a:	6013      	str	r3, [r2, #0]
		cfa_engine_conf.attestation_status = WAITING_PARTIAL;
 c00194c:	4b46      	ldr	r3, [pc, #280]	; (c001a68 <CFA_ENGINE_new_log_entry+0x158>)
 c00194e:	2204      	movs	r2, #4
 c001950:	711a      	strb	r2, [r3, #4]
		_send_report();
 c001952:	f7ff ff37 	bl	c0017c4 <_send_report>

		#if CFLOG_TYPE == CFLOG_RAM
		report_secure.CFLog[report_secure.num_CF_Log_size] = value;
 c001956:	4b48      	ldr	r3, [pc, #288]	; (c001a78 <CFA_ENGINE_new_log_entry+0x168>)
 c001958:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c00195c:	4a46      	ldr	r2, [pc, #280]	; (c001a78 <CFA_ENGINE_new_log_entry+0x168>)
 c00195e:	3318      	adds	r3, #24
 c001960:	009b      	lsls	r3, r3, #2
 c001962:	4413      	add	r3, r2
 c001964:	687a      	ldr	r2, [r7, #4]
 c001966:	605a      	str	r2, [r3, #4]
		uint32_t addr = (uint32_t)(&FLASH_CFLog[report_secure.num_CF_Log_size]);
//		update_flash(addr, value);
		FLASH_CFLog[report_secure.num_CF_Log_size] = value;
		#endif

		report_secure.num_CF_Log_size++;
 c001968:	4b43      	ldr	r3, [pc, #268]	; (c001a78 <CFA_ENGINE_new_log_entry+0x168>)
 c00196a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c00196e:	3301      	adds	r3, #1
 c001970:	b29a      	uxth	r2, r3
 c001972:	4b41      	ldr	r3, [pc, #260]	; (c001a78 <CFA_ENGINE_new_log_entry+0x168>)
 c001974:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		cfa_engine_conf.log_counter++;
 c001978:	4b3b      	ldr	r3, [pc, #236]	; (c001a68 <CFA_ENGINE_new_log_entry+0x158>)
 c00197a:	88db      	ldrh	r3, [r3, #6]
 c00197c:	3301      	adds	r3, #1
 c00197e:	b29a      	uxth	r2, r3
 c001980:	4b39      	ldr	r3, [pc, #228]	; (c001a68 <CFA_ENGINE_new_log_entry+0x158>)
 c001982:	80da      	strh	r2, [r3, #6]
		_read_serial_loop();
 c001984:	f7ff fda4 	bl	c0014d0 <_read_serial_loop>
		start = HAL_GetTick();
 c001988:	f002 ff9e 	bl	c0048c8 <HAL_GetTick>
 c00198c:	4603      	mov	r3, r0
 c00198e:	4a38      	ldr	r2, [pc, #224]	; (c001a70 <CFA_ENGINE_new_log_entry+0x160>)
 c001990:	6013      	str	r3, [r2, #0]
 c001992:	e065      	b.n	c001a60 <CFA_ENGINE_new_log_entry+0x150>
	}
	else{
		// compare current value to previous, if equal, replace with counter
		#if CFLOG_TYPE == CFLOG_RAM
		if(report_secure.num_CF_Log_size != 0 && report_secure.CFLog[report_secure.num_CF_Log_size - 1] == value){
 c001994:	4b38      	ldr	r3, [pc, #224]	; (c001a78 <CFA_ENGINE_new_log_entry+0x168>)
 c001996:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c00199a:	2b00      	cmp	r3, #0
 c00199c:	d022      	beq.n	c0019e4 <CFA_ENGINE_new_log_entry+0xd4>
 c00199e:	4b36      	ldr	r3, [pc, #216]	; (c001a78 <CFA_ENGINE_new_log_entry+0x168>)
 c0019a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c0019a4:	3b01      	subs	r3, #1
 c0019a6:	4a34      	ldr	r2, [pc, #208]	; (c001a78 <CFA_ENGINE_new_log_entry+0x168>)
 c0019a8:	3318      	adds	r3, #24
 c0019aa:	009b      	lsls	r3, r3, #2
 c0019ac:	4413      	add	r3, r2
 c0019ae:	685b      	ldr	r3, [r3, #4]
 c0019b0:	687a      	ldr	r2, [r7, #4]
 c0019b2:	429a      	cmp	r2, r3
 c0019b4:	d116      	bne.n	c0019e4 <CFA_ENGINE_new_log_entry+0xd4>
		#else
		prev_entry = FLASH_CFLog[report_secure.num_CF_Log_size - 1];
		if(report_secure.num_CF_Log_size != 0 && prev_entry == value){
		#endif
			if (loop_detect == 0){
 c0019b6:	4b31      	ldr	r3, [pc, #196]	; (c001a7c <CFA_ENGINE_new_log_entry+0x16c>)
 c0019b8:	781b      	ldrb	r3, [r3, #0]
 c0019ba:	2b00      	cmp	r3, #0
 c0019bc:	d107      	bne.n	c0019ce <CFA_ENGINE_new_log_entry+0xbe>
				// since first instance of repeat, set flag
				loop_detect ^= 1;
 c0019be:	4b2f      	ldr	r3, [pc, #188]	; (c001a7c <CFA_ENGINE_new_log_entry+0x16c>)
 c0019c0:	781b      	ldrb	r3, [r3, #0]
 c0019c2:	f083 0301 	eor.w	r3, r3, #1
 c0019c6:	b2da      	uxtb	r2, r3
 c0019c8:	4b2c      	ldr	r3, [pc, #176]	; (c001a7c <CFA_ENGINE_new_log_entry+0x16c>)
 c0019ca:	701a      	strb	r2, [r3, #0]
			if (loop_detect == 0){
 c0019cc:	e047      	b.n	c001a5e <CFA_ENGINE_new_log_entry+0x14e>
			} else if (loop_detect == 1){
 c0019ce:	4b2b      	ldr	r3, [pc, #172]	; (c001a7c <CFA_ENGINE_new_log_entry+0x16c>)
 c0019d0:	781b      	ldrb	r3, [r3, #0]
 c0019d2:	2b01      	cmp	r3, #1
 c0019d4:	d143      	bne.n	c001a5e <CFA_ENGINE_new_log_entry+0x14e>
				// if more than one instance, increment counter
				loop_counter++;
 c0019d6:	4b2a      	ldr	r3, [pc, #168]	; (c001a80 <CFA_ENGINE_new_log_entry+0x170>)
 c0019d8:	881b      	ldrh	r3, [r3, #0]
 c0019da:	3301      	adds	r3, #1
 c0019dc:	b29a      	uxth	r2, r3
 c0019de:	4b28      	ldr	r3, [pc, #160]	; (c001a80 <CFA_ENGINE_new_log_entry+0x170>)
 c0019e0:	801a      	strh	r2, [r3, #0]
			if (loop_detect == 0){
 c0019e2:	e03c      	b.n	c001a5e <CFA_ENGINE_new_log_entry+0x14e>
			}
		}
		else{ // enter this block either because 1) not a loop or 2) loop exit
			if(loop_detect == 1){
 c0019e4:	4b25      	ldr	r3, [pc, #148]	; (c001a7c <CFA_ENGINE_new_log_entry+0x16c>)
 c0019e6:	781b      	ldrb	r3, [r3, #0]
 c0019e8:	2b01      	cmp	r3, #1
 c0019ea:	d120      	bne.n	c001a2e <CFA_ENGINE_new_log_entry+0x11e>
				uint32_t addr = (uint32_t)(&FLASH_CFLog[report_secure.num_CF_Log_size]);
				uint32_t data = 0xffff0000 + loop_counter;
//				update_flash(addr, data);
				FLASH_CFLog[report_secure.num_CF_Log_size] = data;
				#else
					report_secure.CFLog[report_secure.num_CF_Log_size] = (0xffff0000 + loop_counter);
 c0019ec:	4b24      	ldr	r3, [pc, #144]	; (c001a80 <CFA_ENGINE_new_log_entry+0x170>)
 c0019ee:	881b      	ldrh	r3, [r3, #0]
 c0019f0:	461a      	mov	r2, r3
 c0019f2:	4b21      	ldr	r3, [pc, #132]	; (c001a78 <CFA_ENGINE_new_log_entry+0x168>)
 c0019f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c0019f8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 c0019fc:	491e      	ldr	r1, [pc, #120]	; (c001a78 <CFA_ENGINE_new_log_entry+0x168>)
 c0019fe:	3318      	adds	r3, #24
 c001a00:	009b      	lsls	r3, r3, #2
 c001a02:	440b      	add	r3, r1
 c001a04:	605a      	str	r2, [r3, #4]
				#endif

				loop_detect = 0;
 c001a06:	4b1d      	ldr	r3, [pc, #116]	; (c001a7c <CFA_ENGINE_new_log_entry+0x16c>)
 c001a08:	2200      	movs	r2, #0
 c001a0a:	701a      	strb	r2, [r3, #0]
				cfa_engine_conf.log_counter++;
 c001a0c:	4b16      	ldr	r3, [pc, #88]	; (c001a68 <CFA_ENGINE_new_log_entry+0x158>)
 c001a0e:	88db      	ldrh	r3, [r3, #6]
 c001a10:	3301      	adds	r3, #1
 c001a12:	b29a      	uxth	r2, r3
 c001a14:	4b14      	ldr	r3, [pc, #80]	; (c001a68 <CFA_ENGINE_new_log_entry+0x158>)
 c001a16:	80da      	strh	r2, [r3, #6]
				report_secure.num_CF_Log_size++;
 c001a18:	4b17      	ldr	r3, [pc, #92]	; (c001a78 <CFA_ENGINE_new_log_entry+0x168>)
 c001a1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c001a1e:	3301      	adds	r3, #1
 c001a20:	b29a      	uxth	r2, r3
 c001a22:	4b15      	ldr	r3, [pc, #84]	; (c001a78 <CFA_ENGINE_new_log_entry+0x168>)
 c001a24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
				loop_counter = 1;
 c001a28:	4b15      	ldr	r3, [pc, #84]	; (c001a80 <CFA_ENGINE_new_log_entry+0x170>)
 c001a2a:	2201      	movs	r2, #1
 c001a2c:	801a      	strh	r2, [r3, #0]
			}

			#if CFLOG_TYPE == CFLOG_RAM
			report_secure.CFLog[report_secure.num_CF_Log_size] = value;
 c001a2e:	4b12      	ldr	r3, [pc, #72]	; (c001a78 <CFA_ENGINE_new_log_entry+0x168>)
 c001a30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c001a34:	4a10      	ldr	r2, [pc, #64]	; (c001a78 <CFA_ENGINE_new_log_entry+0x168>)
 c001a36:	3318      	adds	r3, #24
 c001a38:	009b      	lsls	r3, r3, #2
 c001a3a:	4413      	add	r3, r2
 c001a3c:	687a      	ldr	r2, [r7, #4]
 c001a3e:	605a      	str	r2, [r3, #4]
//			update_flash(addr, value);
			FLASH_CFLog[report_secure.num_CF_Log_size] = value;
			prev_entry = value;
			#endif

			cfa_engine_conf.log_counter++;
 c001a40:	4b09      	ldr	r3, [pc, #36]	; (c001a68 <CFA_ENGINE_new_log_entry+0x158>)
 c001a42:	88db      	ldrh	r3, [r3, #6]
 c001a44:	3301      	adds	r3, #1
 c001a46:	b29a      	uxth	r2, r3
 c001a48:	4b07      	ldr	r3, [pc, #28]	; (c001a68 <CFA_ENGINE_new_log_entry+0x158>)
 c001a4a:	80da      	strh	r2, [r3, #6]
			report_secure.num_CF_Log_size++;
 c001a4c:	4b0a      	ldr	r3, [pc, #40]	; (c001a78 <CFA_ENGINE_new_log_entry+0x168>)
 c001a4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c001a52:	3301      	adds	r3, #1
 c001a54:	b29a      	uxth	r2, r3
 c001a56:	4b08      	ldr	r3, [pc, #32]	; (c001a78 <CFA_ENGINE_new_log_entry+0x168>)
 c001a58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		}
	}
	return;
 c001a5c:	e000      	b.n	c001a60 <CFA_ENGINE_new_log_entry+0x150>
			if (loop_detect == 0){
 c001a5e:	bf00      	nop
	return;
 c001a60:	bf00      	nop
}
 c001a62:	3708      	adds	r7, #8
 c001a64:	46bd      	mov	sp, r7
 c001a66:	bd80      	pop	{r7, pc}
 c001a68:	300020f8 	.word	0x300020f8
 c001a6c:	300022a0 	.word	0x300022a0
 c001a70:	3000229c 	.word	0x3000229c
 c001a74:	30002298 	.word	0x30002298
 c001a78:	30000074 	.word	0x30000074
 c001a7c:	300022e0 	.word	0x300022e0
 c001a80:	30000064 	.word	0x30000064

0c001a84 <CFA_ENGINE_run_attestation>:


void CFA_ENGINE_run_attestation(){
 c001a84:	b580      	push	{r7, lr}
 c001a86:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.initialized != INITIALIZED){
 c001a88:	4b19      	ldr	r3, [pc, #100]	; (c001af0 <CFA_ENGINE_run_attestation+0x6c>)
 c001a8a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 c001a8e:	2bee      	cmp	r3, #238	; 0xee
 c001a90:	d12c      	bne.n	c001aec <CFA_ENGINE_run_attestation+0x68>
	//	*ERROR = ERROR_CFA_ENGINE_NOT_INITIALIZED;
		return;
	}

	report_secure.num_CF_Log_size = 0;
 c001a92:	4b18      	ldr	r3, [pc, #96]	; (c001af4 <CFA_ENGINE_run_attestation+0x70>)
 c001a94:	2200      	movs	r2, #0
 c001a96:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	cfa_engine_conf.attestation_status = ACTIVE;
 c001a9a:	4b15      	ldr	r3, [pc, #84]	; (c001af0 <CFA_ENGINE_run_attestation+0x6c>)
 c001a9c:	2201      	movs	r2, #1
 c001a9e:	711a      	strb	r2, [r3, #4]
	cfa_engine_conf.log_counter = 0;
 c001aa0:	4b13      	ldr	r3, [pc, #76]	; (c001af0 <CFA_ENGINE_run_attestation+0x6c>)
 c001aa2:	2200      	movs	r2, #0
 c001aa4:	80da      	strh	r2, [r3, #6]
	report_secure.number_of_logs_sent = 0;
 c001aa6:	4b13      	ldr	r3, [pc, #76]	; (c001af4 <CFA_ENGINE_run_attestation+0x70>)
 c001aa8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 c001aac:	2200      	movs	r2, #0
 c001aae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64


//	_initialize_timer_interrupt();

	// Call the application
	start = HAL_GetTick();
 c001ab2:	f002 ff09 	bl	c0048c8 <HAL_GetTick>
 c001ab6:	4603      	mov	r3, r0
 c001ab8:	4a0f      	ldr	r2, [pc, #60]	; (c001af8 <CFA_ENGINE_run_attestation+0x74>)
 c001aba:	6013      	str	r3, [r2, #0]
	_run_application();
 c001abc:	f7ff fbe0 	bl	c001280 <_run_application>
	end = HAL_GetTick();
 c001ac0:	f002 ff02 	bl	c0048c8 <HAL_GetTick>
 c001ac4:	4603      	mov	r3, r0
 c001ac6:	4a0d      	ldr	r2, [pc, #52]	; (c001afc <CFA_ENGINE_run_attestation+0x78>)
 c001ac8:	6013      	str	r3, [r2, #0]
	app_exec_time += end - start;
 c001aca:	4b0c      	ldr	r3, [pc, #48]	; (c001afc <CFA_ENGINE_run_attestation+0x78>)
 c001acc:	681a      	ldr	r2, [r3, #0]
 c001ace:	4b0a      	ldr	r3, [pc, #40]	; (c001af8 <CFA_ENGINE_run_attestation+0x74>)
 c001ad0:	681b      	ldr	r3, [r3, #0]
 c001ad2:	1ad2      	subs	r2, r2, r3
 c001ad4:	4b0a      	ldr	r3, [pc, #40]	; (c001b00 <CFA_ENGINE_run_attestation+0x7c>)
 c001ad6:	681b      	ldr	r3, [r3, #0]
 c001ad8:	4413      	add	r3, r2
 c001ada:	4a09      	ldr	r2, [pc, #36]	; (c001b00 <CFA_ENGINE_run_attestation+0x7c>)
 c001adc:	6013      	str	r3, [r2, #0]

	_deactivate_timer_interrupt();
 c001ade:	f7ff fd5d 	bl	c00159c <_deactivate_timer_interrupt>

	// Set Final report Flag
	report_secure.isFinal = TRUE;
 c001ae2:	4b04      	ldr	r3, [pc, #16]	; (c001af4 <CFA_ENGINE_run_attestation+0x70>)
 c001ae4:	2201      	movs	r2, #1
 c001ae6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	return;
 c001aea:	e000      	b.n	c001aee <CFA_ENGINE_run_attestation+0x6a>
		return;
 c001aec:	bf00      	nop
}
 c001aee:	bd80      	pop	{r7, pc}
 c001af0:	300020f8 	.word	0x300020f8
 c001af4:	30000074 	.word	0x30000074
 c001af8:	3000229c 	.word	0x3000229c
 c001afc:	300022a0 	.word	0x300022a0
 c001b00:	30002298 	.word	0x30002298

0c001b04 <TRACES_DMA_init>:

void TRACES_DMA_init(){
 c001b04:	b580      	push	{r7, lr}
 c001b06:	b082      	sub	sp, #8
 c001b08:	af00      	add	r7, sp, #0
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 c001b0a:	4b2f      	ldr	r3, [pc, #188]	; (c001bc8 <TRACES_DMA_init+0xc4>)
 c001b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001b0e:	4a2e      	ldr	r2, [pc, #184]	; (c001bc8 <TRACES_DMA_init+0xc4>)
 c001b10:	f043 0301 	orr.w	r3, r3, #1
 c001b14:	6493      	str	r3, [r2, #72]	; 0x48
 c001b16:	4b2c      	ldr	r3, [pc, #176]	; (c001bc8 <TRACES_DMA_init+0xc4>)
 c001b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001b1a:	f003 0301 	and.w	r3, r3, #1
 c001b1e:	607b      	str	r3, [r7, #4]
 c001b20:	687b      	ldr	r3, [r7, #4]

	  /* Configure DMA request hdma on DMA1_Channel1 */
	  hdma.Instance = DMA1_Channel1;
 c001b22:	4b2a      	ldr	r3, [pc, #168]	; (c001bcc <TRACES_DMA_init+0xc8>)
 c001b24:	4a2a      	ldr	r2, [pc, #168]	; (c001bd0 <TRACES_DMA_init+0xcc>)
 c001b26:	601a      	str	r2, [r3, #0]
	  hdma.Init.Request = DMA_REQUEST_MEM2MEM;
 c001b28:	4b28      	ldr	r3, [pc, #160]	; (c001bcc <TRACES_DMA_init+0xc8>)
 c001b2a:	2200      	movs	r2, #0
 c001b2c:	605a      	str	r2, [r3, #4]
	  hdma.Init.Direction = DMA_MEMORY_TO_MEMORY;
 c001b2e:	4b27      	ldr	r3, [pc, #156]	; (c001bcc <TRACES_DMA_init+0xc8>)
 c001b30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 c001b34:	609a      	str	r2, [r3, #8]
	  hdma.Init.PeriphInc = DMA_PINC_ENABLE;
 c001b36:	4b25      	ldr	r3, [pc, #148]	; (c001bcc <TRACES_DMA_init+0xc8>)
 c001b38:	2240      	movs	r2, #64	; 0x40
 c001b3a:	60da      	str	r2, [r3, #12]
	  hdma.Init.MemInc = DMA_MINC_ENABLE;
 c001b3c:	4b23      	ldr	r3, [pc, #140]	; (c001bcc <TRACES_DMA_init+0xc8>)
 c001b3e:	2280      	movs	r2, #128	; 0x80
 c001b40:	611a      	str	r2, [r3, #16]
	  hdma.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 c001b42:	4b22      	ldr	r3, [pc, #136]	; (c001bcc <TRACES_DMA_init+0xc8>)
 c001b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 c001b48:	615a      	str	r2, [r3, #20]
	  hdma.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 c001b4a:	4b20      	ldr	r3, [pc, #128]	; (c001bcc <TRACES_DMA_init+0xc8>)
 c001b4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c001b50:	619a      	str	r2, [r3, #24]
	  hdma.Init.Mode = DMA_NORMAL;
 c001b52:	4b1e      	ldr	r3, [pc, #120]	; (c001bcc <TRACES_DMA_init+0xc8>)
 c001b54:	2200      	movs	r2, #0
 c001b56:	61da      	str	r2, [r3, #28]
	  hdma.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 c001b58:	4b1c      	ldr	r3, [pc, #112]	; (c001bcc <TRACES_DMA_init+0xc8>)
 c001b5a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 c001b5e:	621a      	str	r2, [r3, #32]
	  if (HAL_DMA_Init(&hdma) != HAL_OK)
 c001b60:	481a      	ldr	r0, [pc, #104]	; (c001bcc <TRACES_DMA_init+0xc8>)
 c001b62:	f003 f849 	bl	c004bf8 <HAL_DMA_Init>
 c001b66:	4603      	mov	r3, r0
 c001b68:	2b00      	cmp	r3, #0
 c001b6a:	d001      	beq.n	c001b70 <TRACES_DMA_init+0x6c>
	  {
	    Error_Handler( );
 c001b6c:	f000 fafc 	bl	c002168 <Error_Handler>
	  }

	  /*  */
	  if (HAL_DMA_ConfigChannelAttributes(&hdma, DMA_CHANNEL_NPRIV) != HAL_OK)
 c001b70:	2110      	movs	r1, #16
 c001b72:	4816      	ldr	r0, [pc, #88]	; (c001bcc <TRACES_DMA_init+0xc8>)
 c001b74:	f003 f8e8 	bl	c004d48 <HAL_DMA_ConfigChannelAttributes>
 c001b78:	4603      	mov	r3, r0
 c001b7a:	2b00      	cmp	r3, #0
 c001b7c:	d001      	beq.n	c001b82 <TRACES_DMA_init+0x7e>
	  {
	    Error_Handler( );
 c001b7e:	f000 faf3 	bl	c002168 <Error_Handler>
	  }

	  /*  */
	  if (HAL_DMA_ConfigChannelAttributes(&hdma, DMA_CHANNEL_SEC) != HAL_OK)
 c001b82:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c001b86:	4811      	ldr	r0, [pc, #68]	; (c001bcc <TRACES_DMA_init+0xc8>)
 c001b88:	f003 f8de 	bl	c004d48 <HAL_DMA_ConfigChannelAttributes>
 c001b8c:	4603      	mov	r3, r0
 c001b8e:	2b00      	cmp	r3, #0
 c001b90:	d001      	beq.n	c001b96 <TRACES_DMA_init+0x92>
	  {
	    Error_Handler( );
 c001b92:	f000 fae9 	bl	c002168 <Error_Handler>
	  }

	  /*  */
	  if (HAL_DMA_ConfigChannelAttributes(&hdma, DMA_CHANNEL_SRC_SEC) != HAL_OK)
 c001b96:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 c001b9a:	480c      	ldr	r0, [pc, #48]	; (c001bcc <TRACES_DMA_init+0xc8>)
 c001b9c:	f003 f8d4 	bl	c004d48 <HAL_DMA_ConfigChannelAttributes>
 c001ba0:	4603      	mov	r3, r0
 c001ba2:	2b00      	cmp	r3, #0
 c001ba4:	d001      	beq.n	c001baa <TRACES_DMA_init+0xa6>
	  {
	    Error_Handler( );
 c001ba6:	f000 fadf 	bl	c002168 <Error_Handler>
	  }

	  /*  */
	  if (HAL_DMA_ConfigChannelAttributes(&hdma, DMA_CHANNEL_DEST_SEC) != HAL_OK)
 c001baa:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 c001bae:	4807      	ldr	r0, [pc, #28]	; (c001bcc <TRACES_DMA_init+0xc8>)
 c001bb0:	f003 f8ca 	bl	c004d48 <HAL_DMA_ConfigChannelAttributes>
 c001bb4:	4603      	mov	r3, r0
 c001bb6:	2b00      	cmp	r3, #0
 c001bb8:	d001      	beq.n	c001bbe <TRACES_DMA_init+0xba>
	  {
	    Error_Handler( );
 c001bba:	f000 fad5 	bl	c002168 <Error_Handler>
	  }
}
 c001bbe:	bf00      	nop
 c001bc0:	3708      	adds	r7, #8
 c001bc2:	46bd      	mov	sp, r7
 c001bc4:	bd80      	pop	{r7, pc}
 c001bc6:	bf00      	nop
 c001bc8:	50021000 	.word	0x50021000
 c001bcc:	30002208 	.word	0x30002208
 c001bd0:	50020008 	.word	0x50020008

0c001bd4 <CFA_ENGINE_initialize>:

void CFA_ENGINE_initialize(){
 c001bd4:	b580      	push	{r7, lr}
 c001bd6:	af00      	add	r7, sp, #0

	if (cfa_engine_conf.initialized == INITIALIZED){
 c001bd8:	4b0a      	ldr	r3, [pc, #40]	; (c001c04 <CFA_ENGINE_initialize+0x30>)
 c001bda:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 c001bde:	2bee      	cmp	r3, #238	; 0xee
 c001be0:	d00e      	beq.n	c001c00 <CFA_ENGINE_initialize+0x2c>
		return; //ERROR_cfa_engine_ALREADY_INITIALIZED;;
	}

	set_hmac_key(att_key, 32);
 c001be2:	4b09      	ldr	r3, [pc, #36]	; (c001c08 <CFA_ENGINE_initialize+0x34>)
 c001be4:	681b      	ldr	r3, [r3, #0]
 c001be6:	2120      	movs	r1, #32
 c001be8:	4618      	mov	r0, r3
 c001bea:	f000 f901 	bl	c001df0 <set_hmac_key>

	_attest_memory();
 c001bee:	f7ff fe3b 	bl	c001868 <_attest_memory>
	_setup_data();
 c001bf2:	f7ff fab3 	bl	c00115c <_setup_data>
	_clean();
 c001bf6:	f7ff fb0d 	bl	c001214 <_clean>

	// init DMA
	TRACES_DMA_init();
 c001bfa:	f7ff ff83 	bl	c001b04 <TRACES_DMA_init>
	////

	return;
 c001bfe:	e000      	b.n	c001c02 <CFA_ENGINE_initialize+0x2e>
		return; //ERROR_cfa_engine_ALREADY_INITIALIZED;;
 c001c00:	bf00      	nop
}
 c001c02:	bd80      	pop	{r7, pc}
 c001c04:	300020f8 	.word	0x300020f8
 c001c08:	30000060 	.word	0x30000060

0c001c0c <_heal_function>:
	HAL_NVIC_SystemReset();
	return;
}


void _heal_function(){
 c001c0c:	b480      	push	{r7}
 c001c0e:	af00      	add	r7, sp, #0
	while(1);
 c001c10:	e7fe      	b.n	c001c10 <_heal_function+0x4>
	...

0c001c14 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 c001c14:	b580      	push	{r7, lr}
 c001c16:	b082      	sub	sp, #8
 c001c18:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c001c1a:	4b09      	ldr	r3, [pc, #36]	; (c001c40 <MX_GPIO_Init+0x2c>)
 c001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001c1e:	4a08      	ldr	r2, [pc, #32]	; (c001c40 <MX_GPIO_Init+0x2c>)
 c001c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c001c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 c001c26:	4b06      	ldr	r3, [pc, #24]	; (c001c40 <MX_GPIO_Init+0x2c>)
 c001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c001c2e:	607b      	str	r3, [r7, #4]
 c001c30:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 c001c32:	f004 fa19 	bl	c006068 <HAL_PWREx_EnableVddIO2>

}
 c001c36:	bf00      	nop
 c001c38:	3708      	adds	r7, #8
 c001c3a:	46bd      	mov	sp, r7
 c001c3c:	bd80      	pop	{r7, pc}
 c001c3e:	bf00      	nop
 c001c40:	50021000 	.word	0x50021000

0c001c44 <MX_GTZC_S_Init>:

/* USER CODE END 0 */

/* GTZC_S init function */
void MX_GTZC_S_Init(void)
{
 c001c44:	b580      	push	{r7, lr}
 c001c46:	b09c      	sub	sp, #112	; 0x70
 c001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c001c4a:	1d3b      	adds	r3, r7, #4
 c001c4c:	226c      	movs	r2, #108	; 0x6c
 c001c4e:	2100      	movs	r1, #0
 c001c50:	4618      	mov	r0, r3
 c001c52:	f007 faec 	bl	c00922e <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_TIM3, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c001c56:	f240 3101 	movw	r1, #769	; 0x301
 c001c5a:	2001      	movs	r0, #1
 c001c5c:	f003 fade 	bl	c00521c <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c001c60:	4603      	mov	r3, r0
 c001c62:	2b00      	cmp	r3, #0
 c001c64:	d001      	beq.n	c001c6a <MX_GTZC_S_Init+0x26>
  {
    Error_Handler();
 c001c66:	f000 fa7f 	bl	c002168 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_TIM4, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c001c6a:	f240 3101 	movw	r1, #769	; 0x301
 c001c6e:	2002      	movs	r0, #2
 c001c70:	f003 fad4 	bl	c00521c <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c001c74:	4603      	mov	r3, r0
 c001c76:	2b00      	cmp	r3, #0
 c001c78:	d001      	beq.n	c001c7e <MX_GTZC_S_Init+0x3a>
  {
    Error_Handler();
 c001c7a:	f000 fa75 	bl	c002168 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_LPUART1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c001c7e:	f240 3101 	movw	r1, #769	; 0x301
 c001c82:	2015      	movs	r0, #21
 c001c84:	f003 faca 	bl	c00521c <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c001c88:	4603      	mov	r3, r0
 c001c8a:	2b00      	cmp	r3, #0
 c001c8c:	d001      	beq.n	c001c92 <MX_GTZC_S_Init+0x4e>
  {
    Error_Handler();
 c001c8e:	f000 fa6b 	bl	c002168 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c001c92:	2300      	movs	r3, #0
 c001c94:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c001c96:	2300      	movs	r3, #0
 c001c98:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c001c9a:	f04f 33ff 	mov.w	r3, #4294967295
 c001c9e:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c001ca0:	f04f 33ff 	mov.w	r3, #4294967295
 c001ca4:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c001ca6:	f04f 33ff 	mov.w	r3, #4294967295
 c001caa:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c001cac:	f04f 33ff 	mov.w	r3, #4294967295
 c001cb0:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 c001cb6:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c001cb8:	f04f 33ff 	mov.w	r3, #4294967295
 c001cbc:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 c001cc2:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c001cc4:	f04f 33ff 	mov.w	r3, #4294967295
 c001cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c001cca:	f04f 33ff 	mov.w	r3, #4294967295
 c001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c001cd0:	f04f 33ff 	mov.w	r3, #4294967295
 c001cd4:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c001cd6:	f04f 33ff 	mov.w	r3, #4294967295
 c001cda:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c001cdc:	f04f 33ff 	mov.w	r3, #4294967295
 c001ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c001ce2:	2300      	movs	r3, #0
 c001ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c001ce6:	2300      	movs	r3, #0
 c001ce8:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c001cea:	2300      	movs	r3, #0
 c001cec:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c001cee:	2300      	movs	r3, #0
 c001cf0:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c001cf2:	2300      	movs	r3, #0
 c001cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c001cf6:	2300      	movs	r3, #0
 c001cf8:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c001cfa:	2300      	movs	r3, #0
 c001cfc:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c001cfe:	2300      	movs	r3, #0
 c001d00:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c001d02:	2300      	movs	r3, #0
 c001d04:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c001d06:	2300      	movs	r3, #0
 c001d08:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c001d0a:	2300      	movs	r3, #0
 c001d0c:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c001d0e:	2300      	movs	r3, #0
 c001d10:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c001d12:	2300      	movs	r3, #0
 c001d14:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c001d16:	1d3b      	adds	r3, r7, #4
 c001d18:	4619      	mov	r1, r3
 c001d1a:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c001d1e:	f003 fb55 	bl	c0053cc <HAL_GTZC_MPCBB_ConfigMem>
 c001d22:	4603      	mov	r3, r0
 c001d24:	2b00      	cmp	r3, #0
 c001d26:	d001      	beq.n	c001d2c <MX_GTZC_S_Init+0xe8>
  {
    Error_Handler();
 c001d28:	f000 fa1e 	bl	c002168 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c001d2c:	2300      	movs	r3, #0
 c001d2e:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c001d30:	2300      	movs	r3, #0
 c001d32:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c001d34:	2300      	movs	r3, #0
 c001d36:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c001d38:	2300      	movs	r3, #0
 c001d3a:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c001d3c:	2300      	movs	r3, #0
 c001d3e:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c001d40:	2300      	movs	r3, #0
 c001d42:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c001d44:	2300      	movs	r3, #0
 c001d46:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c001d48:	2300      	movs	r3, #0
 c001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c001d4c:	2300      	movs	r3, #0
 c001d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c001d50:	1d3b      	adds	r3, r7, #4
 c001d52:	4619      	mov	r1, r3
 c001d54:	4809      	ldr	r0, [pc, #36]	; (c001d7c <MX_GTZC_S_Init+0x138>)
 c001d56:	f003 fb39 	bl	c0053cc <HAL_GTZC_MPCBB_ConfigMem>
 c001d5a:	4603      	mov	r3, r0
 c001d5c:	2b00      	cmp	r3, #0
 c001d5e:	d001      	beq.n	c001d64 <MX_GTZC_S_Init+0x120>
  {
    Error_Handler();
 c001d60:	f000 fa02 	bl	c002168 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */
  if (HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_LPUART1) != HAL_OK)
 c001d64:	2015      	movs	r0, #21
 c001d66:	f003 fbb5 	bl	c0054d4 <HAL_GTZC_TZIC_EnableIT>
 c001d6a:	4603      	mov	r3, r0
 c001d6c:	2b00      	cmp	r3, #0
 c001d6e:	d001      	beq.n	c001d74 <MX_GTZC_S_Init+0x130>
  {
    Error_Handler();
 c001d70:	f000 f9fa 	bl	c002168 <Error_Handler>
  }

  /* USER CODE END GTZC_S_Init 2 */

}
 c001d74:	bf00      	nop
 c001d76:	3770      	adds	r7, #112	; 0x70
 c001d78:	46bd      	mov	sp, r7
 c001d7a:	bd80      	pop	{r7, pc}
 c001d7c:	30030000 	.word	0x30030000

0c001d80 <MX_HASH_Init>:
  * @retval None
  */
HASH_HandleTypeDef hhash;

void MX_HASH_Init(void)
{
 c001d80:	b580      	push	{r7, lr}
 c001d82:	b082      	sub	sp, #8
 c001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_Init 0 */

  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */
  __HASH_CLK_ENABLE();
 c001d86:	4b0d      	ldr	r3, [pc, #52]	; (c001dbc <MX_HASH_Init+0x3c>)
 c001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001d8a:	4a0c      	ldr	r2, [pc, #48]	; (c001dbc <MX_HASH_Init+0x3c>)
 c001d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c001d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 c001d92:	4b0a      	ldr	r3, [pc, #40]	; (c001dbc <MX_HASH_Init+0x3c>)
 c001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001d9a:	607b      	str	r3, [r7, #4]
 c001d9c:	687b      	ldr	r3, [r7, #4]
  hhash.Init.DataType = HASH_DATATYPE_8B;
 c001d9e:	4b08      	ldr	r3, [pc, #32]	; (c001dc0 <MX_HASH_Init+0x40>)
 c001da0:	2220      	movs	r2, #32
 c001da2:	601a      	str	r2, [r3, #0]

  /* USER CODE END HASH_Init 1 */

  /* USER CODE BEGIN HASH_Init 2 */
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 c001da4:	4806      	ldr	r0, [pc, #24]	; (c001dc0 <MX_HASH_Init+0x40>)
 c001da6:	f003 fc6d 	bl	c005684 <HAL_HASH_Init>
 c001daa:	4603      	mov	r3, r0
 c001dac:	2b00      	cmp	r3, #0
 c001dae:	d001      	beq.n	c001db4 <MX_HASH_Init+0x34>
  {
	  Error_Handler();
 c001db0:	f000 f9da 	bl	c002168 <Error_Handler>
  }
}
 c001db4:	bf00      	nop
 c001db6:	3708      	adds	r7, #8
 c001db8:	46bd      	mov	sp, r7
 c001dba:	bd80      	pop	{r7, pc}
 c001dbc:	50021000 	.word	0x50021000
 c001dc0:	300022e4 	.word	0x300022e4

0c001dc4 <HMAC_SHA_265>:
HAL_StatusTypeDef HASH_SHA_265(uint8_t *pInBuffer, uint32_t Size, uint8_t* pOutBuffer){
	//	(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint8_t* pOutBuffer, uint32_t Timeout)
	return HAL_HASHEx_SHA256_Start(&hhash, pInBuffer, Size, pOutBuffer, HASH_TIMEOUT);
}

HAL_StatusTypeDef HMAC_SHA_265(uint8_t *pInBuffer, uint32_t Size, uint8_t* pOutBuffer){
 c001dc4:	b580      	push	{r7, lr}
 c001dc6:	b086      	sub	sp, #24
 c001dc8:	af02      	add	r7, sp, #8
 c001dca:	60f8      	str	r0, [r7, #12]
 c001dcc:	60b9      	str	r1, [r7, #8]
 c001dce:	607a      	str	r2, [r7, #4]
	return HAL_HMACEx_SHA256_Start(&hhash, pInBuffer, Size, pOutBuffer, HASH_TIMEOUT);
 c001dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 c001dd4:	9300      	str	r3, [sp, #0]
 c001dd6:	687b      	ldr	r3, [r7, #4]
 c001dd8:	68ba      	ldr	r2, [r7, #8]
 c001dda:	68f9      	ldr	r1, [r7, #12]
 c001ddc:	4803      	ldr	r0, [pc, #12]	; (c001dec <HMAC_SHA_265+0x28>)
 c001dde:	f004 f87b 	bl	c005ed8 <HAL_HMACEx_SHA256_Start>
 c001de2:	4603      	mov	r3, r0
}
 c001de4:	4618      	mov	r0, r3
 c001de6:	3710      	adds	r7, #16
 c001de8:	46bd      	mov	sp, r7
 c001dea:	bd80      	pop	{r7, pc}
 c001dec:	300022e4 	.word	0x300022e4

0c001df0 <set_hmac_key>:

void set_hmac_key(uint8_t * att_key, uint32_t size){
 c001df0:	b480      	push	{r7}
 c001df2:	b083      	sub	sp, #12
 c001df4:	af00      	add	r7, sp, #0
 c001df6:	6078      	str	r0, [r7, #4]
 c001df8:	6039      	str	r1, [r7, #0]
	hhash.Init.KeySize = size;
 c001dfa:	4a06      	ldr	r2, [pc, #24]	; (c001e14 <set_hmac_key+0x24>)
 c001dfc:	683b      	ldr	r3, [r7, #0]
 c001dfe:	6053      	str	r3, [r2, #4]
	hhash.Init.pKey = att_key;
 c001e00:	4a04      	ldr	r2, [pc, #16]	; (c001e14 <set_hmac_key+0x24>)
 c001e02:	687b      	ldr	r3, [r7, #4]
 c001e04:	6093      	str	r3, [r2, #8]
}
 c001e06:	bf00      	nop
 c001e08:	370c      	adds	r7, #12
 c001e0a:	46bd      	mov	sp, r7
 c001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001e10:	4770      	bx	lr
 c001e12:	bf00      	nop
 c001e14:	300022e4 	.word	0x300022e4

0c001e18 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c001e18:	b480      	push	{r7}
 c001e1a:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c001e1c:	4b34      	ldr	r3, [pc, #208]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e1e:	2200      	movs	r2, #0
 c001e20:	609a      	str	r2, [r3, #8]
 c001e22:	4b33      	ldr	r3, [pc, #204]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e24:	4a33      	ldr	r2, [pc, #204]	; (c001ef4 <TZ_SAU_Setup+0xdc>)
 c001e26:	60da      	str	r2, [r3, #12]
 c001e28:	4b31      	ldr	r3, [pc, #196]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e2a:	4a33      	ldr	r2, [pc, #204]	; (c001ef8 <TZ_SAU_Setup+0xe0>)
 c001e2c:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c001e2e:	4b30      	ldr	r3, [pc, #192]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e30:	2201      	movs	r2, #1
 c001e32:	609a      	str	r2, [r3, #8]
 c001e34:	4b2e      	ldr	r3, [pc, #184]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e36:	4a31      	ldr	r2, [pc, #196]	; (c001efc <TZ_SAU_Setup+0xe4>)
 c001e38:	60da      	str	r2, [r3, #12]
 c001e3a:	4b2d      	ldr	r3, [pc, #180]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e3c:	4a30      	ldr	r2, [pc, #192]	; (c001f00 <TZ_SAU_Setup+0xe8>)
 c001e3e:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c001e40:	4b2b      	ldr	r3, [pc, #172]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e42:	2202      	movs	r2, #2
 c001e44:	609a      	str	r2, [r3, #8]
 c001e46:	4b2a      	ldr	r3, [pc, #168]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e48:	4a2e      	ldr	r2, [pc, #184]	; (c001f04 <TZ_SAU_Setup+0xec>)
 c001e4a:	60da      	str	r2, [r3, #12]
 c001e4c:	4b28      	ldr	r3, [pc, #160]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e4e:	4a2e      	ldr	r2, [pc, #184]	; (c001f08 <TZ_SAU_Setup+0xf0>)
 c001e50:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c001e52:	4b27      	ldr	r3, [pc, #156]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e54:	2203      	movs	r2, #3
 c001e56:	609a      	str	r2, [r3, #8]
 c001e58:	4b25      	ldr	r3, [pc, #148]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c001e5e:	60da      	str	r2, [r3, #12]
 c001e60:	4b23      	ldr	r3, [pc, #140]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e62:	4a2a      	ldr	r2, [pc, #168]	; (c001f0c <TZ_SAU_Setup+0xf4>)
 c001e64:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c001e66:	4b22      	ldr	r3, [pc, #136]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e68:	2204      	movs	r2, #4
 c001e6a:	609a      	str	r2, [r3, #8]
 c001e6c:	4b20      	ldr	r3, [pc, #128]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e6e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c001e72:	60da      	str	r2, [r3, #12]
 c001e74:	4b1e      	ldr	r3, [pc, #120]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e76:	4a26      	ldr	r2, [pc, #152]	; (c001f10 <TZ_SAU_Setup+0xf8>)
 c001e78:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c001e7a:	4b1d      	ldr	r3, [pc, #116]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e7c:	2205      	movs	r2, #5
 c001e7e:	609a      	str	r2, [r3, #8]
 c001e80:	4b1b      	ldr	r3, [pc, #108]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e82:	4a24      	ldr	r2, [pc, #144]	; (c001f14 <TZ_SAU_Setup+0xfc>)
 c001e84:	60da      	str	r2, [r3, #12]
 c001e86:	4b1a      	ldr	r3, [pc, #104]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e88:	4a23      	ldr	r2, [pc, #140]	; (c001f18 <TZ_SAU_Setup+0x100>)
 c001e8a:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION6) && (SAU_INIT_REGION6 == 1U)
    SAU_INIT_REGION(6);
 c001e8c:	4b18      	ldr	r3, [pc, #96]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e8e:	2206      	movs	r2, #6
 c001e90:	609a      	str	r2, [r3, #8]
 c001e92:	4b17      	ldr	r3, [pc, #92]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e94:	4a21      	ldr	r2, [pc, #132]	; (c001f1c <TZ_SAU_Setup+0x104>)
 c001e96:	60da      	str	r2, [r3, #12]
 c001e98:	4b15      	ldr	r3, [pc, #84]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001e9a:	4a21      	ldr	r2, [pc, #132]	; (c001f20 <TZ_SAU_Setup+0x108>)
 c001e9c:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c001e9e:	4b14      	ldr	r3, [pc, #80]	; (c001ef0 <TZ_SAU_Setup+0xd8>)
 c001ea0:	2201      	movs	r2, #1
 c001ea2:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c001ea4:	4b1f      	ldr	r3, [pc, #124]	; (c001f24 <TZ_SAU_Setup+0x10c>)
 c001ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c001eaa:	4a1e      	ldr	r2, [pc, #120]	; (c001f24 <TZ_SAU_Setup+0x10c>)
 c001eac:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c001eb0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001eb4:	4b1c      	ldr	r3, [pc, #112]	; (c001f28 <TZ_SAU_Setup+0x110>)
 c001eb6:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c001eb8:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001ebc:	4a1a      	ldr	r2, [pc, #104]	; (c001f28 <TZ_SAU_Setup+0x110>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c001ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001ec2:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c001ec4:	4b19      	ldr	r3, [pc, #100]	; (c001f2c <TZ_SAU_Setup+0x114>)
 c001ec6:	2200      	movs	r2, #0
 c001ec8:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c001ecc:	4b17      	ldr	r3, [pc, #92]	; (c001f2c <TZ_SAU_Setup+0x114>)
 c001ece:	2200      	movs	r2, #0
 c001ed0:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c001ed4:	4b15      	ldr	r3, [pc, #84]	; (c001f2c <TZ_SAU_Setup+0x114>)
 c001ed6:	2200      	movs	r2, #0
 c001ed8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c001edc:	4b13      	ldr	r3, [pc, #76]	; (c001f2c <TZ_SAU_Setup+0x114>)
 c001ede:	2200      	movs	r2, #0
 c001ee0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c001ee4:	bf00      	nop
 c001ee6:	46bd      	mov	sp, r7
 c001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001eec:	4770      	bx	lr
 c001eee:	bf00      	nop
 c001ef0:	e000edd0 	.word	0xe000edd0
 c001ef4:	0c03e000 	.word	0x0c03e000
 c001ef8:	0c03ffe3 	.word	0x0c03ffe3
 c001efc:	08040000 	.word	0x08040000
 c001f00:	0807ffe1 	.word	0x0807ffe1
 c001f04:	20018000 	.word	0x20018000
 c001f08:	2003ffe1 	.word	0x2003ffe1
 c001f0c:	4fffffe1 	.word	0x4fffffe1
 c001f10:	9fffffe1 	.word	0x9fffffe1
 c001f14:	0bf90000 	.word	0x0bf90000
 c001f18:	0bfa8fe1 	.word	0x0bfa8fe1
 c001f1c:	e002ed80 	.word	0xe002ed80
 c001f20:	e002edc3 	.word	0xe002edc3
 c001f24:	e000ed00 	.word	0xe000ed00
 c001f28:	e000ef30 	.word	0xe000ef30
 c001f2c:	e000e100 	.word	0xe000e100

0c001f30 <FLASH_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void FLASH_init(){
 c001f30:	b480      	push	{r7}
 c001f32:	b083      	sub	sp, #12
 c001f34:	af00      	add	r7, sp, #0
	__HAL_RCC_FLASH_CLK_ENABLE();
 c001f36:	4b0c      	ldr	r3, [pc, #48]	; (c001f68 <FLASH_init+0x38>)
 c001f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001f3a:	4a0b      	ldr	r2, [pc, #44]	; (c001f68 <FLASH_init+0x38>)
 c001f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c001f40:	6493      	str	r3, [r2, #72]	; 0x48
 c001f42:	4b09      	ldr	r3, [pc, #36]	; (c001f68 <FLASH_init+0x38>)
 c001f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001f4a:	607b      	str	r3, [r7, #4]
 c001f4c:	687b      	ldr	r3, [r7, #4]

	// set register to disable SRAM2 erase from software resets
	FLASH->OPTR |= OB_SRAM2_RST_NOT_ERASE;
 c001f4e:	4b07      	ldr	r3, [pc, #28]	; (c001f6c <FLASH_init+0x3c>)
 c001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c001f52:	4a06      	ldr	r2, [pc, #24]	; (c001f6c <FLASH_init+0x3c>)
 c001f54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 c001f58:	6413      	str	r3, [r2, #64]	; 0x40
}
 c001f5a:	bf00      	nop
 c001f5c:	370c      	adds	r7, #12
 c001f5e:	46bd      	mov	sp, r7
 c001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001f64:	4770      	bx	lr
 c001f66:	bf00      	nop
 c001f68:	50021000 	.word	0x50021000
 c001f6c:	50022000 	.word	0x50022000

0c001f70 <MPU_init>:

void MPU_init(){
 c001f70:	b580      	push	{r7, lr}
 c001f72:	b084      	sub	sp, #16
 c001f74:	af00      	add	r7, sp, #0
//	                                                     This parameter can be a value of @ref CORTEX_MPU_Instruction_Access            */
//	  uint8_t                IsShareable;           /*!< Specifies the shareability status of the protected region.
//	                                                     This parameter can be a value of @ref CORTEX_MPU_Access_Shareable              */

	/* Disable MPU */
	HAL_MPU_Disable();
 c001f76:	f002 fde3 	bl	c004b40 <HAL_MPU_Disable>

	/* Configure NS-RAM region as Region 0 as R/W region */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 c001f7a:	2301      	movs	r3, #1
 c001f7c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x20000000;
 c001f7e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 c001f82:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.LimitAddress = 0x20040000;
 c001f84:	4b17      	ldr	r3, [pc, #92]	; (c001fe4 <MPU_init+0x74>)
 c001f86:	60bb      	str	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_ALL_RW;
 c001f88:	2301      	movs	r3, #1
 c001f8a:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 c001f8c:	2300      	movs	r3, #0
 c001f8e:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 c001f90:	2301      	movs	r3, #1
 c001f92:	73bb      	strb	r3, [r7, #14]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 c001f94:	463b      	mov	r3, r7
 c001f96:	4618      	mov	r0, r3
 c001f98:	f002 fde4 	bl	c004b64 <HAL_MPU_ConfigRegion>

	/* Configure NS-FLASH region as REGION 1 as R/X region */
	MPU_InitStruct.BaseAddress = 0x08000000;
 c001f9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 c001fa0:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.LimitAddress = 0x08080000;
 c001fa2:	4b11      	ldr	r3, [pc, #68]	; (c001fe8 <MPU_init+0x78>)
 c001fa4:	60bb      	str	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_ALL_RO;
 c001fa6:	2303      	movs	r3, #3
 c001fa8:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 c001faa:	2301      	movs	r3, #1
 c001fac:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 c001fae:	2300      	movs	r3, #0
 c001fb0:	73bb      	strb	r3, [r7, #14]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 c001fb2:	463b      	mov	r3, r7
 c001fb4:	4618      	mov	r0, r3
 c001fb6:	f002 fdd5 	bl	c004b64 <HAL_MPU_ConfigRegion>

	/* Configure FLASH POTR region as REGION 2 as R only region */
//	uint32_t flash_addr = (uint32_t)FLASH;
//	flash_addr = &FLASH->PRIVCFGR;
	MPU_InitStruct.BaseAddress = (uint32_t)FLASH;
 c001fba:	4b0c      	ldr	r3, [pc, #48]	; (c001fec <MPU_init+0x7c>)
 c001fbc:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.LimitAddress = (uint32_t)(&FLASH->PRIVCFGR);
 c001fbe:	4b0c      	ldr	r3, [pc, #48]	; (c001ff0 <MPU_init+0x80>)
 c001fc0:	60bb      	str	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_ALL_RO;
 c001fc2:	2303      	movs	r3, #3
 c001fc4:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 c001fc6:	2302      	movs	r3, #2
 c001fc8:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 c001fca:	2301      	movs	r3, #1
 c001fcc:	73bb      	strb	r3, [r7, #14]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 c001fce:	463b      	mov	r3, r7
 c001fd0:	4618      	mov	r0, r3
 c001fd2:	f002 fdc7 	bl	c004b64 <HAL_MPU_ConfigRegion>


	/* Enable MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 c001fd6:	2004      	movs	r0, #4
 c001fd8:	f002 fd92 	bl	c004b00 <HAL_MPU_Enable>
}
 c001fdc:	bf00      	nop
 c001fde:	3710      	adds	r7, #16
 c001fe0:	46bd      	mov	sp, r7
 c001fe2:	bd80      	pop	{r7, pc}
 c001fe4:	20040000 	.word	0x20040000
 c001fe8:	08080000 	.word	0x08080000
 c001fec:	50022000 	.word	0x50022000
 c001ff0:	500220c4 	.word	0x500220c4

0c001ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c001ff4:	b580      	push	{r7, lr}
 c001ff6:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and interrupts secure/non-secure allocation setup done */
  /* in SystemInit() based on partition_stm32l552xx.h file's definitions. */
  /* USER CODE BEGIN 1 */

  //enable SecureFault_Handler, without this HardFault_Handler will be raised.
  SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
 c001ff8:	4b10      	ldr	r3, [pc, #64]	; (c00203c <main+0x48>)
 c001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001ffc:	4a0f      	ldr	r2, [pc, #60]	; (c00203c <main+0x48>)
 c001ffe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c002002:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c002004:	f002 fbf5 	bl	c0047f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c002008:	f000 f85e 	bl	c0020c8 <SystemClock_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c00200c:	f7ff fe1a 	bl	c001c44 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
 
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c002010:	f7ff fe00 	bl	c001c14 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 c002014:	f002 faf0 	bl	c0045f8 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 c002018:	f000 fd68 	bl	c002aec <MX_TIM3_Init>
  MX_TIM4_Init();
 c00201c:	f000 fdb4 	bl	c002b88 <MX_TIM4_Init>
  MX_HASH_Init();
 c002020:	f7ff feae 	bl	c001d80 <MX_HASH_Init>

  /* USER CODE BEGIN 2 */
  // Configure SAU and NVIC
  TZ_SAU_Setup();
 c002024:	f7ff fef8 	bl	c001e18 <TZ_SAU_Setup>
  FLASH_init();
 c002028:	f7ff ff82 	bl	c001f30 <FLASH_init>
  MPU_init();
 c00202c:	f7ff ffa0 	bl	c001f70 <MPU_init>
  CFA_ENGINE_initialize();
 c002030:	f7ff fdd0 	bl	c001bd4 <CFA_ENGINE_initialize>
  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/


  NonSecure_Init();
 c002034:	f000 f804 	bl	c002040 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c002038:	e7fe      	b.n	c002038 <main+0x44>
 c00203a:	bf00      	nop
 c00203c:	e000ed00 	.word	0xe000ed00

0c002040 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c002040:	b590      	push	{r4, r7, lr}
 c002042:	b083      	sub	sp, #12
 c002044:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c002046:	4b1d      	ldr	r3, [pc, #116]	; (c0020bc <NonSecure_Init+0x7c>)
 c002048:	4a1d      	ldr	r2, [pc, #116]	; (c0020c0 <NonSecure_Init+0x80>)
 c00204a:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c00204c:	4b1c      	ldr	r3, [pc, #112]	; (c0020c0 <NonSecure_Init+0x80>)
 c00204e:	681b      	ldr	r3, [r3, #0]
 c002050:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c002052:	683b      	ldr	r3, [r7, #0]
 c002054:	f383 8888 	msr	MSP_NS, r3
}
 c002058:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c00205a:	4b1a      	ldr	r3, [pc, #104]	; (c0020c4 <NonSecure_Init+0x84>)
 c00205c:	681b      	ldr	r3, [r3, #0]
 c00205e:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c002060:	687b      	ldr	r3, [r7, #4]
 c002062:	461c      	mov	r4, r3
 c002064:	0864      	lsrs	r4, r4, #1
 c002066:	0064      	lsls	r4, r4, #1
 c002068:	4620      	mov	r0, r4
 c00206a:	4621      	mov	r1, r4
 c00206c:	4622      	mov	r2, r4
 c00206e:	4623      	mov	r3, r4
 c002070:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c002074:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c002078:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00207c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c002080:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c002084:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c002088:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00208c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c002090:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c002094:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c002098:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00209c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0020a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0020a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0020a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0020ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0020b0:	f7fe f8d0 	bl	c000254 <__gnu_cmse_nonsecure_call>
}
 c0020b4:	bf00      	nop
 c0020b6:	370c      	adds	r7, #12
 c0020b8:	46bd      	mov	sp, r7
 c0020ba:	bd90      	pop	{r4, r7, pc}
 c0020bc:	e002ed00 	.word	0xe002ed00
 c0020c0:	08040000 	.word	0x08040000
 c0020c4:	08040004 	.word	0x08040004

0c0020c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c0020c8:	b580      	push	{r7, lr}
 c0020ca:	b098      	sub	sp, #96	; 0x60
 c0020cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c0020ce:	f107 0318 	add.w	r3, r7, #24
 c0020d2:	2248      	movs	r2, #72	; 0x48
 c0020d4:	2100      	movs	r1, #0
 c0020d6:	4618      	mov	r0, r3
 c0020d8:	f007 f8a9 	bl	c00922e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c0020dc:	1d3b      	adds	r3, r7, #4
 c0020de:	2200      	movs	r2, #0
 c0020e0:	601a      	str	r2, [r3, #0]
 c0020e2:	605a      	str	r2, [r3, #4]
 c0020e4:	609a      	str	r2, [r3, #8]
 c0020e6:	60da      	str	r2, [r3, #12]
 c0020e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c0020ea:	2000      	movs	r0, #0
 c0020ec:	f003 ff60 	bl	c005fb0 <HAL_PWREx_ControlVoltageScaling>
 c0020f0:	4603      	mov	r3, r0
 c0020f2:	2b00      	cmp	r3, #0
 c0020f4:	d001      	beq.n	c0020fa <SystemClock_Config+0x32>
  {
    Error_Handler();
 c0020f6:	f000 f837 	bl	c002168 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 c0020fa:	2302      	movs	r3, #2
 c0020fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 c0020fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 c002102:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 c002104:	2340      	movs	r3, #64	; 0x40
 c002106:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c002108:	2302      	movs	r3, #2
 c00210a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 c00210c:	2302      	movs	r3, #2
 c00210e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 c002110:	2304      	movs	r3, #4
 c002112:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 c002114:	2337      	movs	r3, #55	; 0x37
 c002116:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c002118:	2307      	movs	r3, #7
 c00211a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 c00211c:	2302      	movs	r3, #2
 c00211e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c002120:	2302      	movs	r3, #2
 c002122:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c002124:	f107 0318 	add.w	r3, r7, #24
 c002128:	4618      	mov	r0, r3
 c00212a:	f003 ffe1 	bl	c0060f0 <HAL_RCC_OscConfig>
 c00212e:	4603      	mov	r3, r0
 c002130:	2b00      	cmp	r3, #0
 c002132:	d001      	beq.n	c002138 <SystemClock_Config+0x70>
  {
    Error_Handler();
 c002134:	f000 f818 	bl	c002168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c002138:	230f      	movs	r3, #15
 c00213a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c00213c:	2303      	movs	r3, #3
 c00213e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c002140:	2300      	movs	r3, #0
 c002142:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c002144:	2300      	movs	r3, #0
 c002146:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c002148:	2300      	movs	r3, #0
 c00214a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c00214c:	1d3b      	adds	r3, r7, #4
 c00214e:	2105      	movs	r1, #5
 c002150:	4618      	mov	r0, r3
 c002152:	f004 fcaf 	bl	c006ab4 <HAL_RCC_ClockConfig>
 c002156:	4603      	mov	r3, r0
 c002158:	2b00      	cmp	r3, #0
 c00215a:	d001      	beq.n	c002160 <SystemClock_Config+0x98>
  {
    Error_Handler();
 c00215c:	f000 f804 	bl	c002168 <Error_Handler>
  }
}
 c002160:	bf00      	nop
 c002162:	3760      	adds	r7, #96	; 0x60
 c002164:	46bd      	mov	sp, r7
 c002166:	bd80      	pop	{r7, pc}

0c002168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c002168:	b480      	push	{r7}
 c00216a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c00216c:	b672      	cpsid	i
}
 c00216e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c002170:	e7fe      	b.n	c002170 <Error_Handler+0x8>
	...

0c002174 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */

CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func){
 c002174:	b580      	push	{r7, lr}
 c002176:	b082      	sub	sp, #8
 c002178:	af00      	add	r7, sp, #0
 c00217a:	4603      	mov	r3, r0
 c00217c:	6039      	str	r1, [r7, #0]
 c00217e:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c002180:	683b      	ldr	r3, [r7, #0]
 c002182:	2b00      	cmp	r3, #0
 c002184:	d017      	beq.n	c0021b6 <__acle_se_SECURE_RegisterCallback+0x42>
  {
    switch(CallbackId)
 c002186:	79fb      	ldrb	r3, [r7, #7]
 c002188:	2b02      	cmp	r3, #2
 c00218a:	d00e      	beq.n	c0021aa <__acle_se_SECURE_RegisterCallback+0x36>
 c00218c:	2b02      	cmp	r3, #2
 c00218e:	dc14      	bgt.n	c0021ba <__acle_se_SECURE_RegisterCallback+0x46>
 c002190:	2b00      	cmp	r3, #0
 c002192:	d002      	beq.n	c00219a <__acle_se_SECURE_RegisterCallback+0x26>
 c002194:	2b01      	cmp	r3, #1
 c002196:	d004      	beq.n	c0021a2 <__acle_se_SECURE_RegisterCallback+0x2e>
      case ATTESTATION_APP_ID:
			pAttestationFunctionCallback = func;
			CFA_ENGINE_register_callback();
			break;
      default:
        break;
 c002198:	e00f      	b.n	c0021ba <__acle_se_SECURE_RegisterCallback+0x46>
			pSecureFaultCallback = func;
 c00219a:	4a25      	ldr	r2, [pc, #148]	; (c002230 <__acle_se_SECURE_RegisterCallback+0xbc>)
 c00219c:	683b      	ldr	r3, [r7, #0]
 c00219e:	6013      	str	r3, [r2, #0]
			break;
 c0021a0:	e00c      	b.n	c0021bc <__acle_se_SECURE_RegisterCallback+0x48>
			pSecureErrorCallback = func;
 c0021a2:	4a24      	ldr	r2, [pc, #144]	; (c002234 <__acle_se_SECURE_RegisterCallback+0xc0>)
 c0021a4:	683b      	ldr	r3, [r7, #0]
 c0021a6:	6013      	str	r3, [r2, #0]
			break;
 c0021a8:	e008      	b.n	c0021bc <__acle_se_SECURE_RegisterCallback+0x48>
			pAttestationFunctionCallback = func;
 c0021aa:	4a23      	ldr	r2, [pc, #140]	; (c002238 <__acle_se_SECURE_RegisterCallback+0xc4>)
 c0021ac:	683b      	ldr	r3, [r7, #0]
 c0021ae:	6013      	str	r3, [r2, #0]
			CFA_ENGINE_register_callback();
 c0021b0:	f7ff f8b8 	bl	c001324 <CFA_ENGINE_register_callback>
			break;
 c0021b4:	e002      	b.n	c0021bc <__acle_se_SECURE_RegisterCallback+0x48>
    }
  }
 c0021b6:	bf00      	nop
 c0021b8:	e000      	b.n	c0021bc <__acle_se_SECURE_RegisterCallback+0x48>
        break;
 c0021ba:	bf00      	nop
}
 c0021bc:	bf00      	nop
 c0021be:	3708      	adds	r7, #8
 c0021c0:	46bd      	mov	sp, r7
 c0021c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0021c6:	4670      	mov	r0, lr
 c0021c8:	4671      	mov	r1, lr
 c0021ca:	4672      	mov	r2, lr
 c0021cc:	4673      	mov	r3, lr
 c0021ce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0021d2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0021d6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0021da:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0021de:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0021e2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0021e6:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0021ea:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0021ee:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0021f2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0021f6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0021fa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0021fe:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c002202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00220a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00220e:	f38e 8c00 	msr	CPSR_fs, lr
 c002212:	b410      	push	{r4}
 c002214:	eef1 ca10 	vmrs	ip, fpscr
 c002218:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00221c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c002220:	ea0c 0c04 	and.w	ip, ip, r4
 c002224:	eee1 ca10 	vmsr	fpscr, ip
 c002228:	bc10      	pop	{r4}
 c00222a:	46f4      	mov	ip, lr
 c00222c:	4774      	bxns	lr
 c00222e:	bf00      	nop
 c002230:	30002328 	.word	0x30002328
 c002234:	3000232c 	.word	0x3000232c
 c002238:	30002330 	.word	0x30002330

0c00223c <__acle_se_SECURE_RunCallback>:

CMSE_NS_ENTRY void SECURE_RunCallback(){
 c00223c:	b580      	push	{r7, lr}
 c00223e:	af00      	add	r7, sp, #0
	CFA_ENGINE_run_attestation(0x23FA);
 c002240:	f242 30fa 	movw	r0, #9210	; 0x23fa
 c002244:	f7ff fc1e 	bl	c001a84 <CFA_ENGINE_run_attestation>
	return;
 c002248:	bf00      	nop
}
 c00224a:	46bd      	mov	sp, r7
 c00224c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c002250:	4670      	mov	r0, lr
 c002252:	4671      	mov	r1, lr
 c002254:	4672      	mov	r2, lr
 c002256:	4673      	mov	r3, lr
 c002258:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00225c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c002260:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c002264:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c002268:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00226c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c002270:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c002274:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c002278:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00227c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c002280:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c002284:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c002288:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00228c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002290:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c002294:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c002298:	f38e 8c00 	msr	CPSR_fs, lr
 c00229c:	b410      	push	{r4}
 c00229e:	eef1 ca10 	vmrs	ip, fpscr
 c0022a2:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0022a6:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0022aa:	ea0c 0c04 	and.w	ip, ip, r4
 c0022ae:	eee1 ca10 	vmsr	fpscr, ip
 c0022b2:	bc10      	pop	{r4}
 c0022b4:	46f4      	mov	ip, lr
 c0022b6:	4774      	bxns	lr

0c0022b8 <__acle_se_SECURE_Initialize_CFA_engine>:

CMSE_NS_ENTRY void SECURE_Initialize_CFA_engine(){
 c0022b8:	b580      	push	{r7, lr}
 c0022ba:	af00      	add	r7, sp, #0
	CFA_ENGINE_initialize();
 c0022bc:	f7ff fc8a 	bl	c001bd4 <CFA_ENGINE_initialize>
	return;
 c0022c0:	bf00      	nop
}
 c0022c2:	46bd      	mov	sp, r7
 c0022c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0022c8:	4670      	mov	r0, lr
 c0022ca:	4671      	mov	r1, lr
 c0022cc:	4672      	mov	r2, lr
 c0022ce:	4673      	mov	r3, lr
 c0022d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0022d4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0022d8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0022dc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0022e0:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0022e4:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0022e8:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0022ec:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0022f0:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0022f4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0022f8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0022fc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c002300:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c002304:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002308:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00230c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c002310:	f38e 8c00 	msr	CPSR_fs, lr
 c002314:	b410      	push	{r4}
 c002316:	eef1 ca10 	vmrs	ip, fpscr
 c00231a:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00231e:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c002322:	ea0c 0c04 	and.w	ip, ip, r4
 c002326:	eee1 ca10 	vmsr	fpscr, ip
 c00232a:	bc10      	pop	{r4}
 c00232c:	46f4      	mov	ip, lr
 c00232e:	4774      	bxns	lr

0c002330 <__acle_se_SECURE_Initialize_Attestation>:

CMSE_NS_ENTRY void SECURE_Initialize_Attestation(){
 c002330:	b580      	push	{r7, lr}
 c002332:	af00      	add	r7, sp, #0
	CFA_ENGINE_initialize();
 c002334:	f7ff fc4e 	bl	c001bd4 <CFA_ENGINE_initialize>
	return;
 c002338:	bf00      	nop
}
 c00233a:	46bd      	mov	sp, r7
 c00233c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c002340:	4670      	mov	r0, lr
 c002342:	4671      	mov	r1, lr
 c002344:	4672      	mov	r2, lr
 c002346:	4673      	mov	r3, lr
 c002348:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00234c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c002350:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c002354:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c002358:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00235c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c002360:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c002364:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c002368:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00236c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c002370:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c002374:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c002378:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00237c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002380:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c002384:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c002388:	f38e 8c00 	msr	CPSR_fs, lr
 c00238c:	b410      	push	{r4}
 c00238e:	eef1 ca10 	vmrs	ip, fpscr
 c002392:	f64f 7460 	movw	r4, #65376	; 0xff60
 c002396:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00239a:	ea0c 0c04 	and.w	ip, ip, r4
 c00239e:	eee1 ca10 	vmsr	fpscr, ip
 c0023a2:	bc10      	pop	{r4}
 c0023a4:	46f4      	mov	ip, lr
 c0023a6:	4774      	bxns	lr

0c0023a8 <__acle_se_SECURE_log_ret>:

CMSE_NS_ENTRY __attribute ((naked)) void SECURE_log_ret(){
	__asm__ volatile("push	{r0, r1, r2, r3, r7, r12}");
 c0023a8:	e92d 108f 	stmdb	sp!, {r0, r1, r2, r3, r7, ip}
	__asm__ volatile("sub	sp, sp, #24");
 c0023ac:	b086      	sub	sp, #24
	__asm__ volatile("add	r7, sp, #0");
 c0023ae:	af00      	add	r7, sp, #0
	__asm__ volatile("push	{r7, lr}");
 c0023b0:	b580      	push	{r7, lr}
	__asm__ volatile("sub	sp, sp, #8");
 c0023b2:	b082      	sub	sp, #8
	__asm__ volatile("add	r7, sp, #0");
 c0023b4:	af00      	add	r7, sp, #0

	uint32_t inst_addr;
	asm("mov %0, lr" : "=r"(inst_addr));
 c0023b6:	4673      	mov	r3, lr
 c0023b8:	461c      	mov	r4, r3
	CFA_ENGINE_new_log_entry(inst_addr);
 c0023ba:	4620      	mov	r0, r4
 c0023bc:	f7ff faa8 	bl	c001910 <CFA_ENGINE_new_log_entry>

	__asm__ volatile("nop");
 c0023c0:	bf00      	nop
	__asm__ volatile("adds	r7, r7, #8");
 c0023c2:	3708      	adds	r7, #8
	__asm__ volatile("mov	sp, r7");
 c0023c4:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r7, lr}");
 c0023c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	__asm__ volatile("mov	r0, lr");
 c0023ca:	4670      	mov	r0, lr
	__asm__ volatile("mov	r1, lr");
 c0023cc:	4671      	mov	r1, lr
	__asm__ volatile("mov	r2, lr");
 c0023ce:	4672      	mov	r2, lr
	__asm__ volatile("mov	r3, lr");
 c0023d0:	4673      	mov	r3, lr
	__asm__ volatile("vmov.f32	s0, #1.0e+0");
 c0023d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s1, #1.0e+0");
 c0023d6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s2, #1.0e+0");
 c0023da:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s3, #1.0e+0");
 c0023de:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s4, #1.0e+0");
 c0023e2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s5, #1.0e+0");
 c0023e6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s6, #1.0e+0");
 c0023ea:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s7, #1.0e+0");
 c0023ee:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s8, #1.0e+0");
 c0023f2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s9, #1.0e+0");
 c0023f6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s10, #1.0e+0");
 c0023fa:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s11, #1.0e+0");
 c0023fe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s12, #1.0e+0");
 c002402:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s13, #1.0e+0");
 c002406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s14, #1.0e+0");
 c00240a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s15, #1.0e+0");
 c00240e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	__asm__ volatile("msr	APSR_nzcvqg, lr");
 c002412:	f38e 8c00 	msr	CPSR_fs, lr
	__asm__ volatile("push	{r4}");
 c002416:	b410      	push	{r4}
	__asm__ volatile("vmrs	ip, fpscr");
 c002418:	eef1 ca10 	vmrs	ip, fpscr
	__asm__ volatile("movw	r4, #65376");
 c00241c:	f64f 7460 	movw	r4, #65376	; 0xff60
	__asm__ volatile("movt	r4, #4095");
 c002420:	f6c0 74ff 	movt	r4, #4095	; 0xfff
	__asm__ volatile("and	ip, r4");
 c002424:	ea0c 0c04 	and.w	ip, ip, r4
	__asm__ volatile("vmsr	fpscr, ip");
 c002428:	eee1 ca10 	vmsr	fpscr, ip
	__asm__ volatile("pop	{r4}");
 c00242c:	bc10      	pop	{r4}
	__asm__ volatile("mov	ip, lr");
 c00242e:	46f4      	mov	ip, lr
	__asm__ volatile("adds	r7, r7, #24");
 c002430:	3718      	adds	r7, #24
	__asm__ volatile("mov	sp, r7");
 c002432:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r0, r1, r2, r3, r7, r12}");
 c002434:	e8bd 108f 	ldmia.w	sp!, {r0, r1, r2, r3, r7, ip}
	__asm__ volatile("bics	lr, #1");
 c002438:	f03e 0e01 	bics.w	lr, lr, #1
	__asm__ volatile("bxns	lr");
 c00243c:	4774      	bxns	lr
}
 c00243e:	bf00      	nop

0c002440 <__acle_se_SECURE_log_call>:

CMSE_NS_ENTRY __attribute ((naked)) void SECURE_log_call(uint32_t addr){
	__asm__ volatile("push	{r0, r1, r2, r3, r7, r10}");
 c002440:	e92d 048f 	stmdb	sp!, {r0, r1, r2, r3, r7, sl}
	__asm__ volatile("sub	sp, sp, #24");
 c002444:	b086      	sub	sp, #24
	__asm__ volatile("add	r7, sp, #0");
 c002446:	af00      	add	r7, sp, #0
	__asm__ volatile("push	{r7, lr}");
 c002448:	b580      	push	{r7, lr}
	__asm__ volatile("sub	sp, sp, #8");
 c00244a:	b082      	sub	sp, #8
	__asm__ volatile("add	r7, sp, #0");
 c00244c:	af00      	add	r7, sp, #0
	__asm__ volatile("sub	r0, r10, #1");
 c00244e:	f1aa 0001 	sub.w	r0, sl, #1
	__asm__ volatile("bl	CFA_ENGINE_new_log_entry");
 c002452:	f7ff fa5d 	bl	c001910 <CFA_ENGINE_new_log_entry>
	__asm__ volatile("nop");
 c002456:	bf00      	nop
	__asm__ volatile("adds	r7, r7, #8");
 c002458:	3708      	adds	r7, #8
	__asm__ volatile("mov	sp, r7");
 c00245a:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r7, lr}");
 c00245c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	__asm__ volatile("mov	r0, lr");
 c002460:	4670      	mov	r0, lr
	__asm__ volatile("mov	r1, lr");
 c002462:	4671      	mov	r1, lr
	__asm__ volatile("mov	r2, lr");
 c002464:	4672      	mov	r2, lr
	__asm__ volatile("mov	r3, lr");
 c002466:	4673      	mov	r3, lr
	__asm__ volatile("vmov.f32	s0, #1.0e+0");
 c002468:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s1, #1.0e+0");
 c00246c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s2, #1.0e+0");
 c002470:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s3, #1.0e+0");
 c002474:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s4, #1.0e+0");
 c002478:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s5, #1.0e+0");
 c00247c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s6, #1.0e+0");
 c002480:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s7, #1.0e+0");
 c002484:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s8, #1.0e+0");
 c002488:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s9, #1.0e+0");
 c00248c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s10, #1.0e+0");
 c002490:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s11, #1.0e+0");
 c002494:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s12, #1.0e+0");
 c002498:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s13, #1.0e+0");
 c00249c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s14, #1.0e+0");
 c0024a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s15, #1.0e+0");
 c0024a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	__asm__ volatile("msr	APSR_nzcvqg, lr");
 c0024a8:	f38e 8c00 	msr	CPSR_fs, lr
	__asm__ volatile("vmrs	ip, fpscr");
 c0024ac:	eef1 ca10 	vmrs	ip, fpscr
	__asm__ volatile("movw	r4, #65376");
 c0024b0:	f64f 7460 	movw	r4, #65376	; 0xff60
	__asm__ volatile("movt	r4, #4095");
 c0024b4:	f6c0 74ff 	movt	r4, #4095	; 0xfff
	__asm__ volatile("and	ip, r4");
 c0024b8:	ea0c 0c04 	and.w	ip, ip, r4
	__asm__ volatile("vmsr	fpscr, ip");
 c0024bc:	eee1 ca10 	vmsr	fpscr, ip
	__asm__ volatile("mov	ip, lr");
 c0024c0:	46f4      	mov	ip, lr
	__asm__ volatile("adds	r7, r7, #24");
 c0024c2:	3718      	adds	r7, #24
	__asm__ volatile("mov	sp, r7");
 c0024c4:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r0, r1, r2, r3, r7, r10}");
 c0024c6:	e8bd 048f 	ldmia.w	sp!, {r0, r1, r2, r3, r7, sl}
	__asm__ volatile("bics	r10, #1");
 c0024ca:	f03a 0a01 	bics.w	sl, sl, #1
	__asm__ volatile("bxns	r10");
 c0024ce:	4754      	bxns	sl
}
 c0024d0:	bf00      	nop

0c0024d2 <__acle_se_SECURE_log_cond_br>:


CMSE_NS_ENTRY __attribute ((naked)) void SECURE_log_cond_br(){;
	__asm__ volatile("push	{r0, r1, r2, r3, r7, r12}");
 c0024d2:	e92d 108f 	stmdb	sp!, {r0, r1, r2, r3, r7, ip}
	__asm__ volatile("sub	sp, sp, #24");
 c0024d6:	b086      	sub	sp, #24
	__asm__ volatile("add	r7, sp, #0");
 c0024d8:	af00      	add	r7, sp, #0
	__asm__ volatile("push	{r7, lr}");
 c0024da:	b580      	push	{r7, lr}
	__asm__ volatile("sub	sp, sp, #8");
 c0024dc:	b082      	sub	sp, #8
	__asm__ volatile("add	r7, sp, #0");
 c0024de:	af00      	add	r7, sp, #0

	uint32_t inst_addr;
	asm("mov %0, lr" : "=r"(inst_addr));
 c0024e0:	4673      	mov	r3, lr
 c0024e2:	461c      	mov	r4, r3
	inst_addr -= 4;
 c0024e4:	3c04      	subs	r4, #4
	CFA_ENGINE_new_log_entry(inst_addr);
 c0024e6:	4620      	mov	r0, r4
 c0024e8:	f7ff fa12 	bl	c001910 <CFA_ENGINE_new_log_entry>

	__asm__ volatile("nop");
 c0024ec:	bf00      	nop
	__asm__ volatile("adds	r7, r7, #8");
 c0024ee:	3708      	adds	r7, #8
	__asm__ volatile("mov	sp, r7");
 c0024f0:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r7, lr}");
 c0024f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	__asm__ volatile("mov	r0, lr");
 c0024f6:	4670      	mov	r0, lr
	__asm__ volatile("mov	r1, lr");
 c0024f8:	4671      	mov	r1, lr
	__asm__ volatile("mov	r2, lr");
 c0024fa:	4672      	mov	r2, lr
	__asm__ volatile("mov	r3, lr");
 c0024fc:	4673      	mov	r3, lr
	__asm__ volatile("vmov.f32	s0, #1.0e+0");
 c0024fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s1, #1.0e+0");
 c002502:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s2, #1.0e+0");
 c002506:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s3, #1.0e+0");
 c00250a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s4, #1.0e+0");
 c00250e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s5, #1.0e+0");
 c002512:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s6, #1.0e+0");
 c002516:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s7, #1.0e+0");
 c00251a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s8, #1.0e+0");
 c00251e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s9, #1.0e+0");
 c002522:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s10, #1.0e+0");
 c002526:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s11, #1.0e+0");
 c00252a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s12, #1.0e+0");
 c00252e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s13, #1.0e+0");
 c002532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s14, #1.0e+0");
 c002536:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s15, #1.0e+0");
 c00253a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	__asm__ volatile("msr	APSR_nzcvqg, lr");
 c00253e:	f38e 8c00 	msr	CPSR_fs, lr
	__asm__ volatile("push	{r4}");
 c002542:	b410      	push	{r4}
	__asm__ volatile("vmrs	ip, fpscr");
 c002544:	eef1 ca10 	vmrs	ip, fpscr
	__asm__ volatile("movw	r4, #65376");
 c002548:	f64f 7460 	movw	r4, #65376	; 0xff60
	__asm__ volatile("movt	r4, #4095");
 c00254c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
	__asm__ volatile("and	ip, r4");
 c002550:	ea0c 0c04 	and.w	ip, ip, r4
	__asm__ volatile("vmsr	fpscr, ip");
 c002554:	eee1 ca10 	vmsr	fpscr, ip
	__asm__ volatile("pop	{r4}");
 c002558:	bc10      	pop	{r4}
	__asm__ volatile("mov	ip, lr");
 c00255a:	46f4      	mov	ip, lr
	__asm__ volatile("adds	r7, r7, #24");
 c00255c:	3718      	adds	r7, #24
	__asm__ volatile("mov	sp, r7");
 c00255e:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r0, r1, r2, r3, r7, r12}");
 c002560:	e8bd 108f 	ldmia.w	sp!, {r0, r1, r2, r3, r7, ip}
	__asm__ volatile("bics	lr, #1");
 c002564:	f03e 0e01 	bics.w	lr, lr, #1
	__asm__ volatile("bxns	lr");
 c002568:	4774      	bxns	lr
}
 c00256a:	bf00      	nop

0c00256c <__acle_se_SECURE_run_attestation_wait_mode>:

CMSE_NS_ENTRY void  SECURE_run_attestation_wait_mode(){
 c00256c:	b580      	push	{r7, lr}
 c00256e:	af00      	add	r7, sp, #0
	CFA_ENGINE_start();
 c002570:	f7fe fecc 	bl	c00130c <CFA_ENGINE_start>
	return;
 c002574:	bf00      	nop
};
 c002576:	46bd      	mov	sp, r7
 c002578:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00257c:	4670      	mov	r0, lr
 c00257e:	4671      	mov	r1, lr
 c002580:	4672      	mov	r2, lr
 c002582:	4673      	mov	r3, lr
 c002584:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c002588:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00258c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c002590:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c002594:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c002598:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00259c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0025a0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0025a4:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0025a8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0025ac:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0025b0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0025b4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0025b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0025bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0025c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0025c4:	f38e 8c00 	msr	CPSR_fs, lr
 c0025c8:	b410      	push	{r4}
 c0025ca:	eef1 ca10 	vmrs	ip, fpscr
 c0025ce:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0025d2:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0025d6:	ea0c 0c04 	and.w	ip, ip, r4
 c0025da:	eee1 ca10 	vmsr	fpscr, ip
 c0025de:	bc10      	pop	{r4}
 c0025e0:	46f4      	mov	ip, lr
 c0025e2:	4774      	bxns	lr

0c0025e4 <__acle_se_SECURE_record_output_data>:

CMSE_NS_ENTRY void SECURE_record_output_data(uint32_t value){
 c0025e4:	b580      	push	{r7, lr}
 c0025e6:	b082      	sub	sp, #8
 c0025e8:	af00      	add	r7, sp, #0
 c0025ea:	6078      	str	r0, [r7, #4]
	record_output_data(value);
 c0025ec:	6878      	ldr	r0, [r7, #4]
 c0025ee:	f7fe fe7d 	bl	c0012ec <record_output_data>
	return;
 c0025f2:	bf00      	nop
};
 c0025f4:	3708      	adds	r7, #8
 c0025f6:	46bd      	mov	sp, r7
 c0025f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0025fc:	4670      	mov	r0, lr
 c0025fe:	4671      	mov	r1, lr
 c002600:	4672      	mov	r2, lr
 c002602:	4673      	mov	r3, lr
 c002604:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c002608:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00260c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c002610:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c002614:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c002618:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00261c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c002620:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c002624:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c002628:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00262c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c002630:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c002634:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c002638:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00263c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c002640:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c002644:	f38e 8c00 	msr	CPSR_fs, lr
 c002648:	b410      	push	{r4}
 c00264a:	eef1 ca10 	vmrs	ip, fpscr
 c00264e:	f64f 7460 	movw	r4, #65376	; 0xff60
 c002652:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c002656:	ea0c 0c04 	and.w	ip, ip, r4
 c00265a:	eee1 ca10 	vmsr	fpscr, ip
 c00265e:	bc10      	pop	{r4}
 c002660:	46f4      	mov	ip, lr
 c002662:	4774      	bxns	lr

0c002664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c002664:	b580      	push	{r7, lr}
 c002666:	b084      	sub	sp, #16
 c002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c00266a:	4b31      	ldr	r3, [pc, #196]	; (c002730 <HAL_MspInit+0xcc>)
 c00266c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00266e:	4a30      	ldr	r2, [pc, #192]	; (c002730 <HAL_MspInit+0xcc>)
 c002670:	f043 0301 	orr.w	r3, r3, #1
 c002674:	6613      	str	r3, [r2, #96]	; 0x60
 c002676:	4b2e      	ldr	r3, [pc, #184]	; (c002730 <HAL_MspInit+0xcc>)
 c002678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00267a:	f003 0301 	and.w	r3, r3, #1
 c00267e:	60fb      	str	r3, [r7, #12]
 c002680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c002682:	4b2b      	ldr	r3, [pc, #172]	; (c002730 <HAL_MspInit+0xcc>)
 c002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002686:	4a2a      	ldr	r2, [pc, #168]	; (c002730 <HAL_MspInit+0xcc>)
 c002688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c00268c:	6593      	str	r3, [r2, #88]	; 0x58
 c00268e:	4b28      	ldr	r3, [pc, #160]	; (c002730 <HAL_MspInit+0xcc>)
 c002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c002696:	60bb      	str	r3, [r7, #8]
 c002698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c00269a:	4b25      	ldr	r3, [pc, #148]	; (c002730 <HAL_MspInit+0xcc>)
 c00269c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c00269e:	4a24      	ldr	r2, [pc, #144]	; (c002730 <HAL_MspInit+0xcc>)
 c0026a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c0026a4:	6493      	str	r3, [r2, #72]	; 0x48
 c0026a6:	4b22      	ldr	r3, [pc, #136]	; (c002730 <HAL_MspInit+0xcc>)
 c0026a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0026aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c0026ae:	607b      	str	r3, [r7, #4]
 c0026b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c0026b2:	2200      	movs	r2, #0
 c0026b4:	2100      	movs	r1, #0
 c0026b6:	2008      	movs	r0, #8
 c0026b8:	f002 f9ed 	bl	c004a96 <HAL_NVIC_SetPriority>
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(GTZC_IRQn);
 c0026bc:	2008      	movs	r0, #8
 c0026be:	f002 fa04 	bl	c004aca <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 c0026c2:	f003 fce1 	bl	c006088 <HAL_PWREx_DisableUCPDDeadBattery>

  /** PWR Non-Privilege/Non-Secure Items Configurations
  */
  HAL_PWR_ConfigAttributes(PWR_WKUP1, PWR_NSEC |PWR_NPRIV);
 c0026c6:	f44f 7140 	mov.w	r1, #768	; 0x300
 c0026ca:	2001      	movs	r0, #1
 c0026cc:	f003 fc1c 	bl	c005f08 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP2, PWR_NSEC |PWR_NPRIV);
 c0026d0:	f44f 7140 	mov.w	r1, #768	; 0x300
 c0026d4:	2002      	movs	r0, #2
 c0026d6:	f003 fc17 	bl	c005f08 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP3, PWR_NSEC |PWR_NPRIV);
 c0026da:	f44f 7140 	mov.w	r1, #768	; 0x300
 c0026de:	2004      	movs	r0, #4
 c0026e0:	f003 fc12 	bl	c005f08 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP4, PWR_NSEC |PWR_NPRIV);
 c0026e4:	f44f 7140 	mov.w	r1, #768	; 0x300
 c0026e8:	2008      	movs	r0, #8
 c0026ea:	f003 fc0d 	bl	c005f08 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP5, PWR_NSEC |PWR_NPRIV);
 c0026ee:	f44f 7140 	mov.w	r1, #768	; 0x300
 c0026f2:	2010      	movs	r0, #16
 c0026f4:	f003 fc08 	bl	c005f08 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_VDM, PWR_NSEC |PWR_NPRIV);
 c0026f8:	f44f 7140 	mov.w	r1, #768	; 0x300
 c0026fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 c002700:	f003 fc02 	bl	c005f08 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_APC, PWR_NSEC |PWR_NPRIV);
 c002704:	f44f 7140 	mov.w	r1, #768	; 0x300
 c002708:	f44f 6000 	mov.w	r0, #2048	; 0x800
 c00270c:	f003 fbfc 	bl	c005f08 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_LPM, PWR_NSEC |PWR_NPRIV);
 c002710:	f44f 7140 	mov.w	r1, #768	; 0x300
 c002714:	f44f 7080 	mov.w	r0, #256	; 0x100
 c002718:	f003 fbf6 	bl	c005f08 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_VB, PWR_NSEC |PWR_NPRIV);
 c00271c:	f44f 7140 	mov.w	r1, #768	; 0x300
 c002720:	f44f 6080 	mov.w	r0, #1024	; 0x400
 c002724:	f003 fbf0 	bl	c005f08 <HAL_PWR_ConfigAttributes>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c002728:	bf00      	nop
 c00272a:	3710      	adds	r7, #16
 c00272c:	46bd      	mov	sp, r7
 c00272e:	bd80      	pop	{r7, pc}
 c002730:	50021000 	.word	0x50021000

0c002734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c002734:	b480      	push	{r7}
 c002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c002738:	e7fe      	b.n	c002738 <NMI_Handler+0x4>

0c00273a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c00273a:	b480      	push	{r7}
 c00273c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c00273e:	e7fe      	b.n	c00273e <HardFault_Handler+0x4>

0c002740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c002740:	b480      	push	{r7}
 c002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c002744:	e7fe      	b.n	c002744 <MemManage_Handler+0x4>

0c002746 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c002746:	b480      	push	{r7}
 c002748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c00274a:	e7fe      	b.n	c00274a <BusFault_Handler+0x4>

0c00274c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c00274c:	b480      	push	{r7}
 c00274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c002750:	e7fe      	b.n	c002750 <UsageFault_Handler+0x4>

0c002752 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c002752:	b480      	push	{r7}
 c002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c002756:	e7fe      	b.n	c002756 <SecureFault_Handler+0x4>

0c002758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c002758:	b480      	push	{r7}
 c00275a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c00275c:	bf00      	nop
 c00275e:	46bd      	mov	sp, r7
 c002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002764:	4770      	bx	lr

0c002766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c002766:	b480      	push	{r7}
 c002768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c00276a:	bf00      	nop
 c00276c:	46bd      	mov	sp, r7
 c00276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002772:	4770      	bx	lr

0c002774 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c002774:	b480      	push	{r7}
 c002776:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c002778:	bf00      	nop
 c00277a:	46bd      	mov	sp, r7
 c00277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002780:	4770      	bx	lr

0c002782 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c002782:	b580      	push	{r7, lr}
 c002784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c002786:	f002 f88b 	bl	c0048a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c00278a:	bf00      	nop
 c00278c:	bd80      	pop	{r7, pc}

0c00278e <GTZC_IRQHandler>:

/**
  * @brief This function handles Global TrustZone controller global interrupt.
  */
void GTZC_IRQHandler(void)
{
 c00278e:	b580      	push	{r7, lr}
 c002790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GTZC_IRQn 0 */

  /* USER CODE END GTZC_IRQn 0 */
  HAL_GTZC_IRQHandler();
 c002792:	f002 fee9 	bl	c005568 <HAL_GTZC_IRQHandler>
  /* USER CODE BEGIN GTZC_IRQn 1 */

  /* USER CODE END GTZC_IRQn 1 */
}
 c002796:	bf00      	nop
 c002798:	bd80      	pop	{r7, pc}
	...

0c00279c <TIM3_IRQHandler>:
  * @brief This function handles TIM3 global interrupt.
  */

#include "cfa_engine.h"
void TIM3_IRQHandler(void)
{
 c00279c:	b580      	push	{r7, lr}
 c00279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	CFA_time_interrupt_handler();
 c0027a0:	f7fe ff0a 	bl	c0015b8 <CFA_time_interrupt_handler>

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 c0027a4:	4802      	ldr	r0, [pc, #8]	; (c0027b0 <TIM3_IRQHandler+0x14>)
 c0027a6:	f005 f9f5 	bl	c007b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 c0027aa:	bf00      	nop
 c0027ac:	bd80      	pop	{r7, pc}
 c0027ae:	bf00      	nop
 c0027b0:	30002334 	.word	0x30002334

0c0027b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 c0027b4:	b580      	push	{r7, lr}
 c0027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 c0027b8:	4802      	ldr	r0, [pc, #8]	; (c0027c4 <TIM4_IRQHandler+0x10>)
 c0027ba:	f005 f9eb 	bl	c007b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 c0027be:	bf00      	nop
 c0027c0:	bd80      	pop	{r7, pc}
 c0027c2:	bf00      	nop
 c0027c4:	30002380 	.word	0x30002380

0c0027c8 <TZ_SAU_Setup>:
{
 c0027c8:	b480      	push	{r7}
 c0027ca:	af00      	add	r7, sp, #0
    SAU_INIT_REGION(0);
 c0027cc:	4b34      	ldr	r3, [pc, #208]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c0027ce:	2200      	movs	r2, #0
 c0027d0:	609a      	str	r2, [r3, #8]
 c0027d2:	4b33      	ldr	r3, [pc, #204]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c0027d4:	4a33      	ldr	r2, [pc, #204]	; (c0028a4 <TZ_SAU_Setup+0xdc>)
 c0027d6:	60da      	str	r2, [r3, #12]
 c0027d8:	4b31      	ldr	r3, [pc, #196]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c0027da:	4a33      	ldr	r2, [pc, #204]	; (c0028a8 <TZ_SAU_Setup+0xe0>)
 c0027dc:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(1);
 c0027de:	4b30      	ldr	r3, [pc, #192]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c0027e0:	2201      	movs	r2, #1
 c0027e2:	609a      	str	r2, [r3, #8]
 c0027e4:	4b2e      	ldr	r3, [pc, #184]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c0027e6:	4a31      	ldr	r2, [pc, #196]	; (c0028ac <TZ_SAU_Setup+0xe4>)
 c0027e8:	60da      	str	r2, [r3, #12]
 c0027ea:	4b2d      	ldr	r3, [pc, #180]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c0027ec:	4a30      	ldr	r2, [pc, #192]	; (c0028b0 <TZ_SAU_Setup+0xe8>)
 c0027ee:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(2);
 c0027f0:	4b2b      	ldr	r3, [pc, #172]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c0027f2:	2202      	movs	r2, #2
 c0027f4:	609a      	str	r2, [r3, #8]
 c0027f6:	4b2a      	ldr	r3, [pc, #168]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c0027f8:	4a2e      	ldr	r2, [pc, #184]	; (c0028b4 <TZ_SAU_Setup+0xec>)
 c0027fa:	60da      	str	r2, [r3, #12]
 c0027fc:	4b28      	ldr	r3, [pc, #160]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c0027fe:	4a2e      	ldr	r2, [pc, #184]	; (c0028b8 <TZ_SAU_Setup+0xf0>)
 c002800:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(3);
 c002802:	4b27      	ldr	r3, [pc, #156]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c002804:	2203      	movs	r2, #3
 c002806:	609a      	str	r2, [r3, #8]
 c002808:	4b25      	ldr	r3, [pc, #148]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c00280a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c00280e:	60da      	str	r2, [r3, #12]
 c002810:	4b23      	ldr	r3, [pc, #140]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c002812:	4a2a      	ldr	r2, [pc, #168]	; (c0028bc <TZ_SAU_Setup+0xf4>)
 c002814:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(4);
 c002816:	4b22      	ldr	r3, [pc, #136]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c002818:	2204      	movs	r2, #4
 c00281a:	609a      	str	r2, [r3, #8]
 c00281c:	4b20      	ldr	r3, [pc, #128]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c00281e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c002822:	60da      	str	r2, [r3, #12]
 c002824:	4b1e      	ldr	r3, [pc, #120]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c002826:	4a26      	ldr	r2, [pc, #152]	; (c0028c0 <TZ_SAU_Setup+0xf8>)
 c002828:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(5);
 c00282a:	4b1d      	ldr	r3, [pc, #116]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c00282c:	2205      	movs	r2, #5
 c00282e:	609a      	str	r2, [r3, #8]
 c002830:	4b1b      	ldr	r3, [pc, #108]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c002832:	4a24      	ldr	r2, [pc, #144]	; (c0028c4 <TZ_SAU_Setup+0xfc>)
 c002834:	60da      	str	r2, [r3, #12]
 c002836:	4b1a      	ldr	r3, [pc, #104]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c002838:	4a23      	ldr	r2, [pc, #140]	; (c0028c8 <TZ_SAU_Setup+0x100>)
 c00283a:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(6);
 c00283c:	4b18      	ldr	r3, [pc, #96]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c00283e:	2206      	movs	r2, #6
 c002840:	609a      	str	r2, [r3, #8]
 c002842:	4b17      	ldr	r3, [pc, #92]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c002844:	4a21      	ldr	r2, [pc, #132]	; (c0028cc <TZ_SAU_Setup+0x104>)
 c002846:	60da      	str	r2, [r3, #12]
 c002848:	4b15      	ldr	r3, [pc, #84]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c00284a:	4a21      	ldr	r2, [pc, #132]	; (c0028d0 <TZ_SAU_Setup+0x108>)
 c00284c:	611a      	str	r2, [r3, #16]
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c00284e:	4b14      	ldr	r3, [pc, #80]	; (c0028a0 <TZ_SAU_Setup+0xd8>)
 c002850:	2201      	movs	r2, #1
 c002852:	601a      	str	r2, [r3, #0]
    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c002854:	4b1f      	ldr	r3, [pc, #124]	; (c0028d4 <TZ_SAU_Setup+0x10c>)
 c002856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c00285a:	4a1e      	ldr	r2, [pc, #120]	; (c0028d4 <TZ_SAU_Setup+0x10c>)
 c00285c:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c002860:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c002864:	4b1c      	ldr	r3, [pc, #112]	; (c0028d8 <TZ_SAU_Setup+0x110>)
 c002866:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c002868:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c00286c:	4a1a      	ldr	r2, [pc, #104]	; (c0028d8 <TZ_SAU_Setup+0x110>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c00286e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c002872:	6053      	str	r3, [r2, #4]
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c002874:	4b19      	ldr	r3, [pc, #100]	; (c0028dc <TZ_SAU_Setup+0x114>)
 c002876:	2200      	movs	r2, #0
 c002878:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c00287c:	4b17      	ldr	r3, [pc, #92]	; (c0028dc <TZ_SAU_Setup+0x114>)
 c00287e:	2200      	movs	r2, #0
 c002880:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c002884:	4b15      	ldr	r3, [pc, #84]	; (c0028dc <TZ_SAU_Setup+0x114>)
 c002886:	2200      	movs	r2, #0
 c002888:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c00288c:	4b13      	ldr	r3, [pc, #76]	; (c0028dc <TZ_SAU_Setup+0x114>)
 c00288e:	2200      	movs	r2, #0
 c002890:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
}
 c002894:	bf00      	nop
 c002896:	46bd      	mov	sp, r7
 c002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00289c:	4770      	bx	lr
 c00289e:	bf00      	nop
 c0028a0:	e000edd0 	.word	0xe000edd0
 c0028a4:	0c03e000 	.word	0x0c03e000
 c0028a8:	0c03ffe3 	.word	0x0c03ffe3
 c0028ac:	08040000 	.word	0x08040000
 c0028b0:	0807ffe1 	.word	0x0807ffe1
 c0028b4:	20018000 	.word	0x20018000
 c0028b8:	2003ffe1 	.word	0x2003ffe1
 c0028bc:	4fffffe1 	.word	0x4fffffe1
 c0028c0:	9fffffe1 	.word	0x9fffffe1
 c0028c4:	0bf90000 	.word	0x0bf90000
 c0028c8:	0bfa8fe1 	.word	0x0bfa8fe1
 c0028cc:	e002ed80 	.word	0xe002ed80
 c0028d0:	e002edc3 	.word	0xe002edc3
 c0028d4:	e000ed00 	.word	0xe000ed00
 c0028d8:	e000ef30 	.word	0xe000ef30
 c0028dc:	e000e100 	.word	0xe000e100

0c0028e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c0028e0:	b580      	push	{r7, lr}
 c0028e2:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c0028e4:	f7ff ff70 	bl	c0027c8 <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c0028e8:	4b08      	ldr	r3, [pc, #32]	; (c00290c <SystemInit+0x2c>)
 c0028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0028ee:	4a07      	ldr	r2, [pc, #28]	; (c00290c <SystemInit+0x2c>)
 c0028f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c0028f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c0028f8:	4b05      	ldr	r3, [pc, #20]	; (c002910 <SystemInit+0x30>)
 c0028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0028fe:	4a04      	ldr	r2, [pc, #16]	; (c002910 <SystemInit+0x30>)
 c002900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c002904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c002908:	bf00      	nop
 c00290a:	bd80      	pop	{r7, pc}
 c00290c:	e000ed00 	.word	0xe000ed00
 c002910:	e002ed00 	.word	0xe002ed00

0c002914 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c002914:	b480      	push	{r7}
 c002916:	b087      	sub	sp, #28
 c002918:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c00291a:	4b4f      	ldr	r3, [pc, #316]	; (c002a58 <SystemCoreClockUpdate+0x144>)
 c00291c:	681b      	ldr	r3, [r3, #0]
 c00291e:	f003 0308 	and.w	r3, r3, #8
 c002922:	2b00      	cmp	r3, #0
 c002924:	d107      	bne.n	c002936 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c002926:	4b4c      	ldr	r3, [pc, #304]	; (c002a58 <SystemCoreClockUpdate+0x144>)
 c002928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00292c:	0a1b      	lsrs	r3, r3, #8
 c00292e:	f003 030f 	and.w	r3, r3, #15
 c002932:	617b      	str	r3, [r7, #20]
 c002934:	e005      	b.n	c002942 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c002936:	4b48      	ldr	r3, [pc, #288]	; (c002a58 <SystemCoreClockUpdate+0x144>)
 c002938:	681b      	ldr	r3, [r3, #0]
 c00293a:	091b      	lsrs	r3, r3, #4
 c00293c:	f003 030f 	and.w	r3, r3, #15
 c002940:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c002942:	4a46      	ldr	r2, [pc, #280]	; (c002a5c <SystemCoreClockUpdate+0x148>)
 c002944:	697b      	ldr	r3, [r7, #20]
 c002946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00294a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c00294c:	4b42      	ldr	r3, [pc, #264]	; (c002a58 <SystemCoreClockUpdate+0x144>)
 c00294e:	689b      	ldr	r3, [r3, #8]
 c002950:	f003 030c 	and.w	r3, r3, #12
 c002954:	2b0c      	cmp	r3, #12
 c002956:	d866      	bhi.n	c002a26 <SystemCoreClockUpdate+0x112>
 c002958:	a201      	add	r2, pc, #4	; (adr r2, c002960 <SystemCoreClockUpdate+0x4c>)
 c00295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00295e:	bf00      	nop
 c002960:	0c002995 	.word	0x0c002995
 c002964:	0c002a27 	.word	0x0c002a27
 c002968:	0c002a27 	.word	0x0c002a27
 c00296c:	0c002a27 	.word	0x0c002a27
 c002970:	0c00299d 	.word	0x0c00299d
 c002974:	0c002a27 	.word	0x0c002a27
 c002978:	0c002a27 	.word	0x0c002a27
 c00297c:	0c002a27 	.word	0x0c002a27
 c002980:	0c0029a5 	.word	0x0c0029a5
 c002984:	0c002a27 	.word	0x0c002a27
 c002988:	0c002a27 	.word	0x0c002a27
 c00298c:	0c002a27 	.word	0x0c002a27
 c002990:	0c0029ad 	.word	0x0c0029ad
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c002994:	4a32      	ldr	r2, [pc, #200]	; (c002a60 <SystemCoreClockUpdate+0x14c>)
 c002996:	697b      	ldr	r3, [r7, #20]
 c002998:	6013      	str	r3, [r2, #0]
      break;
 c00299a:	e048      	b.n	c002a2e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c00299c:	4b30      	ldr	r3, [pc, #192]	; (c002a60 <SystemCoreClockUpdate+0x14c>)
 c00299e:	4a31      	ldr	r2, [pc, #196]	; (c002a64 <SystemCoreClockUpdate+0x150>)
 c0029a0:	601a      	str	r2, [r3, #0]
      break;
 c0029a2:	e044      	b.n	c002a2e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c0029a4:	4b2e      	ldr	r3, [pc, #184]	; (c002a60 <SystemCoreClockUpdate+0x14c>)
 c0029a6:	4a2f      	ldr	r2, [pc, #188]	; (c002a64 <SystemCoreClockUpdate+0x150>)
 c0029a8:	601a      	str	r2, [r3, #0]
      break;
 c0029aa:	e040      	b.n	c002a2e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c0029ac:	4b2a      	ldr	r3, [pc, #168]	; (c002a58 <SystemCoreClockUpdate+0x144>)
 c0029ae:	68db      	ldr	r3, [r3, #12]
 c0029b0:	f003 0303 	and.w	r3, r3, #3
 c0029b4:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c0029b6:	4b28      	ldr	r3, [pc, #160]	; (c002a58 <SystemCoreClockUpdate+0x144>)
 c0029b8:	68db      	ldr	r3, [r3, #12]
 c0029ba:	091b      	lsrs	r3, r3, #4
 c0029bc:	f003 030f 	and.w	r3, r3, #15
 c0029c0:	3301      	adds	r3, #1
 c0029c2:	60bb      	str	r3, [r7, #8]
 c0029c4:	68fb      	ldr	r3, [r7, #12]
 c0029c6:	2b02      	cmp	r3, #2
 c0029c8:	d003      	beq.n	c0029d2 <SystemCoreClockUpdate+0xbe>
 c0029ca:	68fb      	ldr	r3, [r7, #12]
 c0029cc:	2b03      	cmp	r3, #3
 c0029ce:	d006      	beq.n	c0029de <SystemCoreClockUpdate+0xca>
 c0029d0:	e00b      	b.n	c0029ea <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c0029d2:	4a24      	ldr	r2, [pc, #144]	; (c002a64 <SystemCoreClockUpdate+0x150>)
 c0029d4:	68bb      	ldr	r3, [r7, #8]
 c0029d6:	fbb2 f3f3 	udiv	r3, r2, r3
 c0029da:	613b      	str	r3, [r7, #16]
          break;
 c0029dc:	e00b      	b.n	c0029f6 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c0029de:	4a21      	ldr	r2, [pc, #132]	; (c002a64 <SystemCoreClockUpdate+0x150>)
 c0029e0:	68bb      	ldr	r3, [r7, #8]
 c0029e2:	fbb2 f3f3 	udiv	r3, r2, r3
 c0029e6:	613b      	str	r3, [r7, #16]
          break;
 c0029e8:	e005      	b.n	c0029f6 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c0029ea:	697a      	ldr	r2, [r7, #20]
 c0029ec:	68bb      	ldr	r3, [r7, #8]
 c0029ee:	fbb2 f3f3 	udiv	r3, r2, r3
 c0029f2:	613b      	str	r3, [r7, #16]
          break;
 c0029f4:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c0029f6:	4b18      	ldr	r3, [pc, #96]	; (c002a58 <SystemCoreClockUpdate+0x144>)
 c0029f8:	68db      	ldr	r3, [r3, #12]
 c0029fa:	0a1b      	lsrs	r3, r3, #8
 c0029fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c002a00:	693b      	ldr	r3, [r7, #16]
 c002a02:	fb02 f303 	mul.w	r3, r2, r3
 c002a06:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c002a08:	4b13      	ldr	r3, [pc, #76]	; (c002a58 <SystemCoreClockUpdate+0x144>)
 c002a0a:	68db      	ldr	r3, [r3, #12]
 c002a0c:	0e5b      	lsrs	r3, r3, #25
 c002a0e:	f003 0303 	and.w	r3, r3, #3
 c002a12:	3301      	adds	r3, #1
 c002a14:	005b      	lsls	r3, r3, #1
 c002a16:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c002a18:	693a      	ldr	r2, [r7, #16]
 c002a1a:	687b      	ldr	r3, [r7, #4]
 c002a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 c002a20:	4a0f      	ldr	r2, [pc, #60]	; (c002a60 <SystemCoreClockUpdate+0x14c>)
 c002a22:	6013      	str	r3, [r2, #0]
      break;
 c002a24:	e003      	b.n	c002a2e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c002a26:	4a0e      	ldr	r2, [pc, #56]	; (c002a60 <SystemCoreClockUpdate+0x14c>)
 c002a28:	697b      	ldr	r3, [r7, #20]
 c002a2a:	6013      	str	r3, [r2, #0]
      break;
 c002a2c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c002a2e:	4b0a      	ldr	r3, [pc, #40]	; (c002a58 <SystemCoreClockUpdate+0x144>)
 c002a30:	689b      	ldr	r3, [r3, #8]
 c002a32:	091b      	lsrs	r3, r3, #4
 c002a34:	f003 030f 	and.w	r3, r3, #15
 c002a38:	4a0b      	ldr	r2, [pc, #44]	; (c002a68 <SystemCoreClockUpdate+0x154>)
 c002a3a:	5cd3      	ldrb	r3, [r2, r3]
 c002a3c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c002a3e:	4b08      	ldr	r3, [pc, #32]	; (c002a60 <SystemCoreClockUpdate+0x14c>)
 c002a40:	681a      	ldr	r2, [r3, #0]
 c002a42:	683b      	ldr	r3, [r7, #0]
 c002a44:	fa22 f303 	lsr.w	r3, r2, r3
 c002a48:	4a05      	ldr	r2, [pc, #20]	; (c002a60 <SystemCoreClockUpdate+0x14c>)
 c002a4a:	6013      	str	r3, [r2, #0]
}
 c002a4c:	bf00      	nop
 c002a4e:	371c      	adds	r7, #28
 c002a50:	46bd      	mov	sp, r7
 c002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002a56:	4770      	bx	lr
 c002a58:	50021000 	.word	0x50021000
 c002a5c:	0c0092a0 	.word	0x0c0092a0
 c002a60:	30000068 	.word	0x30000068
 c002a64:	00f42400 	.word	0x00f42400
 c002a68:	0c009288 	.word	0x0c009288

0c002a6c <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c002a6c:	b580      	push	{r7, lr}
 c002a6e:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c002a70:	f7ff ff50 	bl	c002914 <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c002a74:	4b1c      	ldr	r3, [pc, #112]	; (c002ae8 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c002a76:	681b      	ldr	r3, [r3, #0]
}
 c002a78:	4618      	mov	r0, r3
 c002a7a:	46bd      	mov	sp, r7
 c002a7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c002a80:	4671      	mov	r1, lr
 c002a82:	4672      	mov	r2, lr
 c002a84:	4673      	mov	r3, lr
 c002a86:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c002a8a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c002a8e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c002a92:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c002a96:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c002a9a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c002a9e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c002aa2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c002aa6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c002aaa:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c002aae:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c002ab2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c002ab6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c002aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002abe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c002ac2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c002ac6:	f38e 8c00 	msr	CPSR_fs, lr
 c002aca:	b410      	push	{r4}
 c002acc:	eef1 ca10 	vmrs	ip, fpscr
 c002ad0:	f64f 7460 	movw	r4, #65376	; 0xff60
 c002ad4:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c002ad8:	ea0c 0c04 	and.w	ip, ip, r4
 c002adc:	eee1 ca10 	vmsr	fpscr, ip
 c002ae0:	bc10      	pop	{r4}
 c002ae2:	46f4      	mov	ip, lr
 c002ae4:	4774      	bxns	lr
 c002ae6:	bf00      	nop
 c002ae8:	30000068 	.word	0x30000068

0c002aec <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 c002aec:	b580      	push	{r7, lr}
 c002aee:	b088      	sub	sp, #32
 c002af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 c002af2:	f107 0310 	add.w	r3, r7, #16
 c002af6:	2200      	movs	r2, #0
 c002af8:	601a      	str	r2, [r3, #0]
 c002afa:	605a      	str	r2, [r3, #4]
 c002afc:	609a      	str	r2, [r3, #8]
 c002afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 c002b00:	1d3b      	adds	r3, r7, #4
 c002b02:	2200      	movs	r2, #0
 c002b04:	601a      	str	r2, [r3, #0]
 c002b06:	605a      	str	r2, [r3, #4]
 c002b08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 c002b0a:	4b1d      	ldr	r3, [pc, #116]	; (c002b80 <MX_TIM3_Init+0x94>)
 c002b0c:	4a1d      	ldr	r2, [pc, #116]	; (c002b84 <MX_TIM3_Init+0x98>)
 c002b0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 c002b10:	4b1b      	ldr	r3, [pc, #108]	; (c002b80 <MX_TIM3_Init+0x94>)
 c002b12:	2200      	movs	r2, #0
 c002b14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 c002b16:	4b1a      	ldr	r3, [pc, #104]	; (c002b80 <MX_TIM3_Init+0x94>)
 c002b18:	2200      	movs	r2, #0
 c002b1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 c002b1c:	4b18      	ldr	r3, [pc, #96]	; (c002b80 <MX_TIM3_Init+0x94>)
 c002b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 c002b22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 c002b24:	4b16      	ldr	r3, [pc, #88]	; (c002b80 <MX_TIM3_Init+0x94>)
 c002b26:	2200      	movs	r2, #0
 c002b28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 c002b2a:	4b15      	ldr	r3, [pc, #84]	; (c002b80 <MX_TIM3_Init+0x94>)
 c002b2c:	2200      	movs	r2, #0
 c002b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 c002b30:	4813      	ldr	r0, [pc, #76]	; (c002b80 <MX_TIM3_Init+0x94>)
 c002b32:	f004 ffb1 	bl	c007a98 <HAL_TIM_Base_Init>
 c002b36:	4603      	mov	r3, r0
 c002b38:	2b00      	cmp	r3, #0
 c002b3a:	d001      	beq.n	c002b40 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 c002b3c:	f7ff fb14 	bl	c002168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 c002b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c002b44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 c002b46:	f107 0310 	add.w	r3, r7, #16
 c002b4a:	4619      	mov	r1, r3
 c002b4c:	480c      	ldr	r0, [pc, #48]	; (c002b80 <MX_TIM3_Init+0x94>)
 c002b4e:	f005 f940 	bl	c007dd2 <HAL_TIM_ConfigClockSource>
 c002b52:	4603      	mov	r3, r0
 c002b54:	2b00      	cmp	r3, #0
 c002b56:	d001      	beq.n	c002b5c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 c002b58:	f7ff fb06 	bl	c002168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 c002b5c:	2300      	movs	r3, #0
 c002b5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 c002b60:	2300      	movs	r3, #0
 c002b62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 c002b64:	1d3b      	adds	r3, r7, #4
 c002b66:	4619      	mov	r1, r3
 c002b68:	4805      	ldr	r0, [pc, #20]	; (c002b80 <MX_TIM3_Init+0x94>)
 c002b6a:	f005 fb61 	bl	c008230 <HAL_TIMEx_MasterConfigSynchronization>
 c002b6e:	4603      	mov	r3, r0
 c002b70:	2b00      	cmp	r3, #0
 c002b72:	d001      	beq.n	c002b78 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 c002b74:	f7ff faf8 	bl	c002168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 c002b78:	bf00      	nop
 c002b7a:	3720      	adds	r7, #32
 c002b7c:	46bd      	mov	sp, r7
 c002b7e:	bd80      	pop	{r7, pc}
 c002b80:	30002334 	.word	0x30002334
 c002b84:	50000400 	.word	0x50000400

0c002b88 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 c002b88:	b580      	push	{r7, lr}
 c002b8a:	b088      	sub	sp, #32
 c002b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 c002b8e:	f107 0310 	add.w	r3, r7, #16
 c002b92:	2200      	movs	r2, #0
 c002b94:	601a      	str	r2, [r3, #0]
 c002b96:	605a      	str	r2, [r3, #4]
 c002b98:	609a      	str	r2, [r3, #8]
 c002b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 c002b9c:	1d3b      	adds	r3, r7, #4
 c002b9e:	2200      	movs	r2, #0
 c002ba0:	601a      	str	r2, [r3, #0]
 c002ba2:	605a      	str	r2, [r3, #4]
 c002ba4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 c002ba6:	4b1d      	ldr	r3, [pc, #116]	; (c002c1c <MX_TIM4_Init+0x94>)
 c002ba8:	4a1d      	ldr	r2, [pc, #116]	; (c002c20 <MX_TIM4_Init+0x98>)
 c002baa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 c002bac:	4b1b      	ldr	r3, [pc, #108]	; (c002c1c <MX_TIM4_Init+0x94>)
 c002bae:	2200      	movs	r2, #0
 c002bb0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 c002bb2:	4b1a      	ldr	r3, [pc, #104]	; (c002c1c <MX_TIM4_Init+0x94>)
 c002bb4:	2200      	movs	r2, #0
 c002bb6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 c002bb8:	4b18      	ldr	r3, [pc, #96]	; (c002c1c <MX_TIM4_Init+0x94>)
 c002bba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 c002bbe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 c002bc0:	4b16      	ldr	r3, [pc, #88]	; (c002c1c <MX_TIM4_Init+0x94>)
 c002bc2:	2200      	movs	r2, #0
 c002bc4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 c002bc6:	4b15      	ldr	r3, [pc, #84]	; (c002c1c <MX_TIM4_Init+0x94>)
 c002bc8:	2200      	movs	r2, #0
 c002bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 c002bcc:	4813      	ldr	r0, [pc, #76]	; (c002c1c <MX_TIM4_Init+0x94>)
 c002bce:	f004 ff63 	bl	c007a98 <HAL_TIM_Base_Init>
 c002bd2:	4603      	mov	r3, r0
 c002bd4:	2b00      	cmp	r3, #0
 c002bd6:	d001      	beq.n	c002bdc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 c002bd8:	f7ff fac6 	bl	c002168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 c002bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c002be0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 c002be2:	f107 0310 	add.w	r3, r7, #16
 c002be6:	4619      	mov	r1, r3
 c002be8:	480c      	ldr	r0, [pc, #48]	; (c002c1c <MX_TIM4_Init+0x94>)
 c002bea:	f005 f8f2 	bl	c007dd2 <HAL_TIM_ConfigClockSource>
 c002bee:	4603      	mov	r3, r0
 c002bf0:	2b00      	cmp	r3, #0
 c002bf2:	d001      	beq.n	c002bf8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 c002bf4:	f7ff fab8 	bl	c002168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 c002bf8:	2300      	movs	r3, #0
 c002bfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 c002bfc:	2300      	movs	r3, #0
 c002bfe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 c002c00:	1d3b      	adds	r3, r7, #4
 c002c02:	4619      	mov	r1, r3
 c002c04:	4805      	ldr	r0, [pc, #20]	; (c002c1c <MX_TIM4_Init+0x94>)
 c002c06:	f005 fb13 	bl	c008230 <HAL_TIMEx_MasterConfigSynchronization>
 c002c0a:	4603      	mov	r3, r0
 c002c0c:	2b00      	cmp	r3, #0
 c002c0e:	d001      	beq.n	c002c14 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 c002c10:	f7ff faaa 	bl	c002168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 c002c14:	bf00      	nop
 c002c16:	3720      	adds	r7, #32
 c002c18:	46bd      	mov	sp, r7
 c002c1a:	bd80      	pop	{r7, pc}
 c002c1c:	30002380 	.word	0x30002380
 c002c20:	50000800 	.word	0x50000800

0c002c24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 c002c24:	b580      	push	{r7, lr}
 c002c26:	b084      	sub	sp, #16
 c002c28:	af00      	add	r7, sp, #0
 c002c2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 c002c2c:	687b      	ldr	r3, [r7, #4]
 c002c2e:	681b      	ldr	r3, [r3, #0]
 c002c30:	4a1a      	ldr	r2, [pc, #104]	; (c002c9c <HAL_TIM_Base_MspInit+0x78>)
 c002c32:	4293      	cmp	r3, r2
 c002c34:	d114      	bne.n	c002c60 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 c002c36:	4b1a      	ldr	r3, [pc, #104]	; (c002ca0 <HAL_TIM_Base_MspInit+0x7c>)
 c002c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002c3a:	4a19      	ldr	r2, [pc, #100]	; (c002ca0 <HAL_TIM_Base_MspInit+0x7c>)
 c002c3c:	f043 0302 	orr.w	r3, r3, #2
 c002c40:	6593      	str	r3, [r2, #88]	; 0x58
 c002c42:	4b17      	ldr	r3, [pc, #92]	; (c002ca0 <HAL_TIM_Base_MspInit+0x7c>)
 c002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002c46:	f003 0302 	and.w	r3, r3, #2
 c002c4a:	60fb      	str	r3, [r7, #12]
 c002c4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 c002c4e:	2200      	movs	r2, #0
 c002c50:	2100      	movs	r1, #0
 c002c52:	202e      	movs	r0, #46	; 0x2e
 c002c54:	f001 ff1f 	bl	c004a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 c002c58:	202e      	movs	r0, #46	; 0x2e
 c002c5a:	f001 ff36 	bl	c004aca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 c002c5e:	e018      	b.n	c002c92 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 c002c60:	687b      	ldr	r3, [r7, #4]
 c002c62:	681b      	ldr	r3, [r3, #0]
 c002c64:	4a0f      	ldr	r2, [pc, #60]	; (c002ca4 <HAL_TIM_Base_MspInit+0x80>)
 c002c66:	4293      	cmp	r3, r2
 c002c68:	d113      	bne.n	c002c92 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 c002c6a:	4b0d      	ldr	r3, [pc, #52]	; (c002ca0 <HAL_TIM_Base_MspInit+0x7c>)
 c002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002c6e:	4a0c      	ldr	r2, [pc, #48]	; (c002ca0 <HAL_TIM_Base_MspInit+0x7c>)
 c002c70:	f043 0304 	orr.w	r3, r3, #4
 c002c74:	6593      	str	r3, [r2, #88]	; 0x58
 c002c76:	4b0a      	ldr	r3, [pc, #40]	; (c002ca0 <HAL_TIM_Base_MspInit+0x7c>)
 c002c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002c7a:	f003 0304 	and.w	r3, r3, #4
 c002c7e:	60bb      	str	r3, [r7, #8]
 c002c80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 c002c82:	2200      	movs	r2, #0
 c002c84:	2100      	movs	r1, #0
 c002c86:	202f      	movs	r0, #47	; 0x2f
 c002c88:	f001 ff05 	bl	c004a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 c002c8c:	202f      	movs	r0, #47	; 0x2f
 c002c8e:	f001 ff1c 	bl	c004aca <HAL_NVIC_EnableIRQ>
}
 c002c92:	bf00      	nop
 c002c94:	3710      	adds	r7, #16
 c002c96:	46bd      	mov	sp, r7
 c002c98:	bd80      	pop	{r7, pc}
 c002c9a:	bf00      	nop
 c002c9c:	50000400 	.word	0x50000400
 c002ca0:	50021000 	.word	0x50021000
 c002ca4:	50000800 	.word	0x50000800
	...

0c002cb0 <uECC_vli_add>:
#if (uECC_OPTIMIZATION_LEVEL >= 2)

uECC_VLI_API uECC_word_t uECC_vli_add(uECC_word_t *result,
                                      const uECC_word_t *left,
                                      const uECC_word_t *right,
                                      wordcount_t num_words) {
 c002cb0:	b4f0      	push	{r4, r5, r6, r7}
 c002cb2:	b088      	sub	sp, #32
 c002cb4:	af00      	add	r7, sp, #0
 c002cb6:	60f8      	str	r0, [r7, #12]
 c002cb8:	60b9      	str	r1, [r7, #8]
 c002cba:	607a      	str	r2, [r7, #4]
 c002cbc:	70fb      	strb	r3, [r7, #3]
#if (uECC_MAX_WORDS != uECC_MIN_WORDS)
  #if (uECC_PLATFORM == uECC_arm_thumb) || (uECC_PLATFORM == uECC_arm_thumb2)
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
 c002cbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002cc2:	f1c3 0308 	rsb	r3, r3, #8
 c002cc6:	00db      	lsls	r3, r3, #3
 c002cc8:	3301      	adds	r3, #1
 c002cca:	61fb      	str	r3, [r7, #28]
#endif
    uint32_t carry;
    uint32_t left_word;
    uint32_t right_word;
    
    __asm__ volatile (
 c002ccc:	68f8      	ldr	r0, [r7, #12]
 c002cce:	68b9      	ldr	r1, [r7, #8]
 c002cd0:	687a      	ldr	r2, [r7, #4]
 c002cd2:	69fb      	ldr	r3, [r7, #28]
 c002cd4:	2600      	movs	r6, #0
 c002cd6:	a505      	add	r5, pc, #20	; (adr r5, c002cec <uECC_vli_add+0x3c>)
 c002cd8:	f3af 8000 	nop.w
 c002cdc:	f3af 8000 	nop.w
 c002ce0:	195b      	adds	r3, r3, r5
 c002ce2:	c920      	ldmia	r1!, {r5}
 c002ce4:	ca10      	ldmia	r2!, {r4}
 c002ce6:	192d      	adds	r5, r5, r4
 c002ce8:	c020      	stmia	r0!, {r5}
 c002cea:	4718      	bx	r3
 c002cec:	c920      	ldmia	r1!, {r5}
 c002cee:	ca10      	ldmia	r2!, {r4}
 c002cf0:	4165      	adcs	r5, r4
 c002cf2:	c020      	stmia	r0!, {r5}
 c002cf4:	c920      	ldmia	r1!, {r5}
 c002cf6:	ca10      	ldmia	r2!, {r4}
 c002cf8:	4165      	adcs	r5, r4
 c002cfa:	c020      	stmia	r0!, {r5}
 c002cfc:	c920      	ldmia	r1!, {r5}
 c002cfe:	ca10      	ldmia	r2!, {r4}
 c002d00:	4165      	adcs	r5, r4
 c002d02:	c020      	stmia	r0!, {r5}
 c002d04:	c920      	ldmia	r1!, {r5}
 c002d06:	ca10      	ldmia	r2!, {r4}
 c002d08:	4165      	adcs	r5, r4
 c002d0a:	c020      	stmia	r0!, {r5}
 c002d0c:	c920      	ldmia	r1!, {r5}
 c002d0e:	ca10      	ldmia	r2!, {r4}
 c002d10:	4165      	adcs	r5, r4
 c002d12:	c020      	stmia	r0!, {r5}
 c002d14:	c920      	ldmia	r1!, {r5}
 c002d16:	ca10      	ldmia	r2!, {r4}
 c002d18:	4165      	adcs	r5, r4
 c002d1a:	c020      	stmia	r0!, {r5}
 c002d1c:	c920      	ldmia	r1!, {r5}
 c002d1e:	ca10      	ldmia	r2!, {r4}
 c002d20:	4165      	adcs	r5, r4
 c002d22:	c020      	stmia	r0!, {r5}
 c002d24:	4176      	adcs	r6, r6
 c002d26:	60f8      	str	r0, [r7, #12]
 c002d28:	60b9      	str	r1, [r7, #8]
 c002d2a:	607a      	str	r2, [r7, #4]
 c002d2c:	61fb      	str	r3, [r7, #28]
 c002d2e:	61be      	str	r6, [r7, #24]
 c002d30:	617d      	str	r5, [r7, #20]
 c002d32:	613c      	str	r4, [r7, #16]
          [carry] REG_WRITE_LO (carry), [left] REG_WRITE_LO (left_word),
          [right] REG_WRITE_LO (right_word)
        :
        : "cc", "memory"
    );
    return carry;
 c002d34:	69bb      	ldr	r3, [r7, #24]
}
 c002d36:	4618      	mov	r0, r3
 c002d38:	3720      	adds	r7, #32
 c002d3a:	46bd      	mov	sp, r7
 c002d3c:	bcf0      	pop	{r4, r5, r6, r7}
 c002d3e:	4770      	bx	lr

0c002d40 <uECC_vli_sub>:
#define asm_add 1

uECC_VLI_API uECC_word_t uECC_vli_sub(uECC_word_t *result,
                                      const uECC_word_t *left,
                                      const uECC_word_t *right,
                                      wordcount_t num_words) {
 c002d40:	b4f0      	push	{r4, r5, r6, r7}
 c002d42:	b088      	sub	sp, #32
 c002d44:	af00      	add	r7, sp, #0
 c002d46:	60f8      	str	r0, [r7, #12]
 c002d48:	60b9      	str	r1, [r7, #8]
 c002d4a:	607a      	str	r2, [r7, #4]
 c002d4c:	70fb      	strb	r3, [r7, #3]
#if (uECC_MAX_WORDS != uECC_MIN_WORDS)
  #if (uECC_PLATFORM == uECC_arm_thumb) || (uECC_PLATFORM == uECC_arm_thumb2)
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
 c002d4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002d52:	f1c3 0308 	rsb	r3, r3, #8
 c002d56:	00db      	lsls	r3, r3, #3
 c002d58:	3301      	adds	r3, #1
 c002d5a:	61fb      	str	r3, [r7, #28]
#endif
    uint32_t carry;
    uint32_t left_word;
    uint32_t right_word;
    
    __asm__ volatile (
 c002d5c:	68f8      	ldr	r0, [r7, #12]
 c002d5e:	68b9      	ldr	r1, [r7, #8]
 c002d60:	687a      	ldr	r2, [r7, #4]
 c002d62:	69fb      	ldr	r3, [r7, #28]
 c002d64:	2600      	movs	r6, #0
 c002d66:	a505      	add	r5, pc, #20	; (adr r5, c002d7c <uECC_vli_sub+0x3c>)
 c002d68:	f3af 8000 	nop.w
 c002d6c:	f3af 8000 	nop.w
 c002d70:	195b      	adds	r3, r3, r5
 c002d72:	c920      	ldmia	r1!, {r5}
 c002d74:	ca10      	ldmia	r2!, {r4}
 c002d76:	1b2d      	subs	r5, r5, r4
 c002d78:	c020      	stmia	r0!, {r5}
 c002d7a:	4718      	bx	r3
 c002d7c:	c920      	ldmia	r1!, {r5}
 c002d7e:	ca10      	ldmia	r2!, {r4}
 c002d80:	41a5      	sbcs	r5, r4
 c002d82:	c020      	stmia	r0!, {r5}
 c002d84:	c920      	ldmia	r1!, {r5}
 c002d86:	ca10      	ldmia	r2!, {r4}
 c002d88:	41a5      	sbcs	r5, r4
 c002d8a:	c020      	stmia	r0!, {r5}
 c002d8c:	c920      	ldmia	r1!, {r5}
 c002d8e:	ca10      	ldmia	r2!, {r4}
 c002d90:	41a5      	sbcs	r5, r4
 c002d92:	c020      	stmia	r0!, {r5}
 c002d94:	c920      	ldmia	r1!, {r5}
 c002d96:	ca10      	ldmia	r2!, {r4}
 c002d98:	41a5      	sbcs	r5, r4
 c002d9a:	c020      	stmia	r0!, {r5}
 c002d9c:	c920      	ldmia	r1!, {r5}
 c002d9e:	ca10      	ldmia	r2!, {r4}
 c002da0:	41a5      	sbcs	r5, r4
 c002da2:	c020      	stmia	r0!, {r5}
 c002da4:	c920      	ldmia	r1!, {r5}
 c002da6:	ca10      	ldmia	r2!, {r4}
 c002da8:	41a5      	sbcs	r5, r4
 c002daa:	c020      	stmia	r0!, {r5}
 c002dac:	c920      	ldmia	r1!, {r5}
 c002dae:	ca10      	ldmia	r2!, {r4}
 c002db0:	41a5      	sbcs	r5, r4
 c002db2:	c020      	stmia	r0!, {r5}
 c002db4:	4176      	adcs	r6, r6
 c002db6:	60f8      	str	r0, [r7, #12]
 c002db8:	60b9      	str	r1, [r7, #8]
 c002dba:	607a      	str	r2, [r7, #4]
 c002dbc:	61fb      	str	r3, [r7, #28]
 c002dbe:	61be      	str	r6, [r7, #24]
 c002dc0:	617d      	str	r5, [r7, #20]
 c002dc2:	613c      	str	r4, [r7, #16]
          [carry] REG_WRITE_LO (carry), [left] REG_WRITE_LO (left_word),
          [right] REG_WRITE_LO (right_word)
        :
        : "cc", "memory"
    );
    return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
 c002dc4:	69bb      	ldr	r3, [r7, #24]
 c002dc6:	2b00      	cmp	r3, #0
 c002dc8:	bf0c      	ite	eq
 c002dca:	2301      	moveq	r3, #1
 c002dcc:	2300      	movne	r3, #0
 c002dce:	b2db      	uxtb	r3, r3
                      (for some reason...) */
}
 c002dd0:	4618      	mov	r0, r3
 c002dd2:	3720      	adds	r7, #32
 c002dd4:	46bd      	mov	sp, r7
 c002dd6:	bcf0      	pop	{r4, r5, r6, r7}
 c002dd8:	4770      	bx	lr
 c002dda:	bf00      	nop

0c002ddc <uECC_vli_mult>:

#if !asm_mult
uECC_VLI_API void uECC_vli_mult(uECC_word_t *result,
                                const uECC_word_t *left,
                                const uECC_word_t *right,
                                wordcount_t num_words) {
 c002ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c002de0:	b08d      	sub	sp, #52	; 0x34
 c002de2:	af00      	add	r7, sp, #0
 c002de4:	60f8      	str	r0, [r7, #12]
 c002de6:	60b9      	str	r1, [r7, #8]
 c002de8:	607a      	str	r2, [r7, #4]
 c002dea:	70fb      	strb	r3, [r7, #3]
#if (uECC_PLATFORM != uECC_arm_thumb)
    uint32_t c0 = 0;
 c002dec:	2300      	movs	r3, #0
 c002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t c1 = 0;
 c002df0:	2300      	movs	r3, #0
 c002df2:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t c2 = 0;
 c002df4:	2300      	movs	r3, #0
 c002df6:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t k = 0;
 c002df8:	2300      	movs	r3, #0
 c002dfa:	623b      	str	r3, [r7, #32]
        "str %[c0], [%[result], %[k]] \n\t" /* result[num_words * 2 - 1] = c0 */
        RESUME_SYNTAX
        : [c0] "+r" (c0), [c1] "+r" (c1), [c2] "+r" (c2),
          [k] "+r" (k), [i] "=&r" (i), [t0] "=&r" (t0), [t1] "=&r" (t1)
        : [result] "r" (result), [left] "r" (left), [right] "r" (right),
          [last_word] "r" ((num_words - 1) * 4)
 c002dfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002e00:	3b01      	subs	r3, #1
 c002e02:	ea4f 0c83 	mov.w	ip, r3, lsl #2
    __asm__ volatile (
 c002e06:	68fc      	ldr	r4, [r7, #12]
 c002e08:	68bd      	ldr	r5, [r7, #8]
 c002e0a:	687e      	ldr	r6, [r7, #4]
 c002e0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 c002e0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 c002e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c002e12:	6a3b      	ldr	r3, [r7, #32]
 c002e14:	f05f 0e00 	movs.w	lr, #0
 c002e18:	e003      	b.n	c002e22 <uECC_vli_mult+0x46>
 c002e1a:	ea5f 0e03 	movs.w	lr, r3
 c002e1e:	ebbe 0e0c 	subs.w	lr, lr, ip
 c002e22:	ebb3 080e 	subs.w	r8, r3, lr
 c002e26:	f856 9008 	ldr.w	r9, [r6, r8]
 c002e2a:	f855 800e 	ldr.w	r8, [r5, lr]
 c002e2e:	fba8 8909 	umull	r8, r9, r8, r9
 c002e32:	eb10 0008 	adds.w	r0, r0, r8
 c002e36:	eb51 0109 	adcs.w	r1, r1, r9
 c002e3a:	f152 0200 	adcs.w	r2, r2, #0
 c002e3e:	f11e 0e04 	adds.w	lr, lr, #4
 c002e42:	45e6      	cmp	lr, ip
 c002e44:	dc01      	bgt.n	c002e4a <uECC_vli_mult+0x6e>
 c002e46:	459e      	cmp	lr, r3
 c002e48:	ddeb      	ble.n	c002e22 <uECC_vli_mult+0x46>
 c002e4a:	50e0      	str	r0, [r4, r3]
 c002e4c:	4608      	mov	r0, r1
 c002e4e:	4611      	mov	r1, r2
 c002e50:	2200      	movs	r2, #0
 c002e52:	3304      	adds	r3, #4
 c002e54:	4563      	cmp	r3, ip
 c002e56:	dddd      	ble.n	c002e14 <uECC_vli_mult+0x38>
 c002e58:	ebb3 0f4c 	cmp.w	r3, ip, lsl #1
 c002e5c:	dddd      	ble.n	c002e1a <uECC_vli_mult+0x3e>
 c002e5e:	50e0      	str	r0, [r4, r3]
 c002e60:	464c      	mov	r4, r9
 c002e62:	4645      	mov	r5, r8
 c002e64:	4676      	mov	r6, lr
 c002e66:	62f8      	str	r0, [r7, #44]	; 0x2c
 c002e68:	62b9      	str	r1, [r7, #40]	; 0x28
 c002e6a:	627a      	str	r2, [r7, #36]	; 0x24
 c002e6c:	623b      	str	r3, [r7, #32]
 c002e6e:	61fe      	str	r6, [r7, #28]
 c002e70:	61bd      	str	r5, [r7, #24]
 c002e72:	617c      	str	r4, [r7, #20]
          [r5] "=&l" (r5), [r6] "=&l" (r6), [r7] "=&l" (r7)
        : [r0] "l" (result), [r1] "l" (left), [r2] "l" (right)
        : "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
    );
#endif
}
 c002e74:	bf00      	nop
 c002e76:	3734      	adds	r7, #52	; 0x34
 c002e78:	46bd      	mov	sp, r7
 c002e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0c002e7e <uECC_vli_clear>:
int uECC_curve_public_key_size(uECC_Curve curve) {
    return 2 * curve->num_bytes;
}

#if !asm_clear
uECC_VLI_API void uECC_vli_clear(uECC_word_t *vli, wordcount_t num_words) {
 c002e7e:	b480      	push	{r7}
 c002e80:	b085      	sub	sp, #20
 c002e82:	af00      	add	r7, sp, #0
 c002e84:	6078      	str	r0, [r7, #4]
 c002e86:	460b      	mov	r3, r1
 c002e88:	70fb      	strb	r3, [r7, #3]
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
 c002e8a:	2300      	movs	r3, #0
 c002e8c:	73fb      	strb	r3, [r7, #15]
 c002e8e:	e00a      	b.n	c002ea6 <uECC_vli_clear+0x28>
        vli[i] = 0;
 c002e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c002e94:	009b      	lsls	r3, r3, #2
 c002e96:	687a      	ldr	r2, [r7, #4]
 c002e98:	4413      	add	r3, r2
 c002e9a:	2200      	movs	r2, #0
 c002e9c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 c002e9e:	7bfb      	ldrb	r3, [r7, #15]
 c002ea0:	3301      	adds	r3, #1
 c002ea2:	b2db      	uxtb	r3, r3
 c002ea4:	73fb      	strb	r3, [r7, #15]
 c002ea6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 c002eaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002eae:	429a      	cmp	r2, r3
 c002eb0:	dbee      	blt.n	c002e90 <uECC_vli_clear+0x12>
    }
}
 c002eb2:	bf00      	nop
 c002eb4:	bf00      	nop
 c002eb6:	3714      	adds	r7, #20
 c002eb8:	46bd      	mov	sp, r7
 c002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002ebe:	4770      	bx	lr

0c002ec0 <uECC_vli_isZero>:
#endif /* !asm_clear */

/* Constant-time comparison to zero - secure way to compare long integers */
/* Returns 1 if vli == 0, 0 otherwise. */
uECC_VLI_API uECC_word_t uECC_vli_isZero(const uECC_word_t *vli, wordcount_t num_words) {
 c002ec0:	b480      	push	{r7}
 c002ec2:	b085      	sub	sp, #20
 c002ec4:	af00      	add	r7, sp, #0
 c002ec6:	6078      	str	r0, [r7, #4]
 c002ec8:	460b      	mov	r3, r1
 c002eca:	70fb      	strb	r3, [r7, #3]
    uECC_word_t bits = 0;
 c002ecc:	2300      	movs	r3, #0
 c002ece:	60fb      	str	r3, [r7, #12]
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
 c002ed0:	2300      	movs	r3, #0
 c002ed2:	72fb      	strb	r3, [r7, #11]
 c002ed4:	e00c      	b.n	c002ef0 <uECC_vli_isZero+0x30>
        bits |= vli[i];
 c002ed6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 c002eda:	009b      	lsls	r3, r3, #2
 c002edc:	687a      	ldr	r2, [r7, #4]
 c002ede:	4413      	add	r3, r2
 c002ee0:	681b      	ldr	r3, [r3, #0]
 c002ee2:	68fa      	ldr	r2, [r7, #12]
 c002ee4:	4313      	orrs	r3, r2
 c002ee6:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < num_words; ++i) {
 c002ee8:	7afb      	ldrb	r3, [r7, #11]
 c002eea:	3301      	adds	r3, #1
 c002eec:	b2db      	uxtb	r3, r3
 c002eee:	72fb      	strb	r3, [r7, #11]
 c002ef0:	f997 200b 	ldrsb.w	r2, [r7, #11]
 c002ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002ef8:	429a      	cmp	r2, r3
 c002efa:	dbec      	blt.n	c002ed6 <uECC_vli_isZero+0x16>
    }
    return (bits == 0);
 c002efc:	68fb      	ldr	r3, [r7, #12]
 c002efe:	2b00      	cmp	r3, #0
 c002f00:	bf0c      	ite	eq
 c002f02:	2301      	moveq	r3, #1
 c002f04:	2300      	movne	r3, #0
 c002f06:	b2db      	uxtb	r3, r3
}
 c002f08:	4618      	mov	r0, r3
 c002f0a:	3714      	adds	r7, #20
 c002f0c:	46bd      	mov	sp, r7
 c002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002f12:	4770      	bx	lr

0c002f14 <uECC_vli_testBit>:

/* Returns nonzero if bit 'bit' of vli is set. */
uECC_VLI_API uECC_word_t uECC_vli_testBit(const uECC_word_t *vli, bitcount_t bit) {
 c002f14:	b480      	push	{r7}
 c002f16:	b083      	sub	sp, #12
 c002f18:	af00      	add	r7, sp, #0
 c002f1a:	6078      	str	r0, [r7, #4]
 c002f1c:	460b      	mov	r3, r1
 c002f1e:	807b      	strh	r3, [r7, #2]
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 c002f20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 c002f24:	115b      	asrs	r3, r3, #5
 c002f26:	b21b      	sxth	r3, r3
 c002f28:	009b      	lsls	r3, r3, #2
 c002f2a:	687a      	ldr	r2, [r7, #4]
 c002f2c:	4413      	add	r3, r2
 c002f2e:	681a      	ldr	r2, [r3, #0]
 c002f30:	887b      	ldrh	r3, [r7, #2]
 c002f32:	f003 031f 	and.w	r3, r3, #31
 c002f36:	2101      	movs	r1, #1
 c002f38:	fa01 f303 	lsl.w	r3, r1, r3
 c002f3c:	4013      	ands	r3, r2
}
 c002f3e:	4618      	mov	r0, r3
 c002f40:	370c      	adds	r7, #12
 c002f42:	46bd      	mov	sp, r7
 c002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002f48:	4770      	bx	lr

0c002f4a <vli_numDigits>:

/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const uECC_word_t *vli, const wordcount_t max_words) {
 c002f4a:	b480      	push	{r7}
 c002f4c:	b085      	sub	sp, #20
 c002f4e:	af00      	add	r7, sp, #0
 c002f50:	6078      	str	r0, [r7, #4]
 c002f52:	460b      	mov	r3, r1
 c002f54:	70fb      	strb	r3, [r7, #3]
    wordcount_t i;
    /* Search from the end until we find a non-zero digit.
       We do it in reverse because we expect that most digits will be nonzero. */
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 c002f56:	78fb      	ldrb	r3, [r7, #3]
 c002f58:	3b01      	subs	r3, #1
 c002f5a:	b2db      	uxtb	r3, r3
 c002f5c:	73fb      	strb	r3, [r7, #15]
 c002f5e:	e003      	b.n	c002f68 <vli_numDigits+0x1e>
 c002f60:	7bfb      	ldrb	r3, [r7, #15]
 c002f62:	3b01      	subs	r3, #1
 c002f64:	b2db      	uxtb	r3, r3
 c002f66:	73fb      	strb	r3, [r7, #15]
 c002f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c002f6c:	2b00      	cmp	r3, #0
 c002f6e:	db07      	blt.n	c002f80 <vli_numDigits+0x36>
 c002f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c002f74:	009b      	lsls	r3, r3, #2
 c002f76:	687a      	ldr	r2, [r7, #4]
 c002f78:	4413      	add	r3, r2
 c002f7a:	681b      	ldr	r3, [r3, #0]
 c002f7c:	2b00      	cmp	r3, #0
 c002f7e:	d0ef      	beq.n	c002f60 <vli_numDigits+0x16>
    }

    return (i + 1);
 c002f80:	7bfb      	ldrb	r3, [r7, #15]
 c002f82:	3301      	adds	r3, #1
 c002f84:	b2db      	uxtb	r3, r3
 c002f86:	b25b      	sxtb	r3, r3
}
 c002f88:	4618      	mov	r0, r3
 c002f8a:	3714      	adds	r7, #20
 c002f8c:	46bd      	mov	sp, r7
 c002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002f92:	4770      	bx	lr

0c002f94 <uECC_vli_numBits>:

/* Counts the number of bits required to represent vli. */
uECC_VLI_API bitcount_t uECC_vli_numBits(const uECC_word_t *vli, const wordcount_t max_words) {
 c002f94:	b580      	push	{r7, lr}
 c002f96:	b086      	sub	sp, #24
 c002f98:	af00      	add	r7, sp, #0
 c002f9a:	6078      	str	r0, [r7, #4]
 c002f9c:	460b      	mov	r3, r1
 c002f9e:	70fb      	strb	r3, [r7, #3]
    uECC_word_t i;
    uECC_word_t digit;

    wordcount_t num_digits = vli_numDigits(vli, max_words);
 c002fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002fa4:	4619      	mov	r1, r3
 c002fa6:	6878      	ldr	r0, [r7, #4]
 c002fa8:	f7ff ffcf 	bl	c002f4a <vli_numDigits>
 c002fac:	4603      	mov	r3, r0
 c002fae:	73fb      	strb	r3, [r7, #15]
    if (num_digits == 0) {
 c002fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c002fb4:	2b00      	cmp	r3, #0
 c002fb6:	d101      	bne.n	c002fbc <uECC_vli_numBits+0x28>
        return 0;
 c002fb8:	2300      	movs	r3, #0
 c002fba:	e021      	b.n	c003000 <uECC_vli_numBits+0x6c>
    }

    digit = vli[num_digits - 1];
 c002fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c002fc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c002fc4:	3b01      	subs	r3, #1
 c002fc6:	009b      	lsls	r3, r3, #2
 c002fc8:	687a      	ldr	r2, [r7, #4]
 c002fca:	4413      	add	r3, r2
 c002fcc:	681b      	ldr	r3, [r3, #0]
 c002fce:	613b      	str	r3, [r7, #16]
    for (i = 0; digit; ++i) {
 c002fd0:	2300      	movs	r3, #0
 c002fd2:	617b      	str	r3, [r7, #20]
 c002fd4:	e005      	b.n	c002fe2 <uECC_vli_numBits+0x4e>
        digit >>= 1;
 c002fd6:	693b      	ldr	r3, [r7, #16]
 c002fd8:	085b      	lsrs	r3, r3, #1
 c002fda:	613b      	str	r3, [r7, #16]
    for (i = 0; digit; ++i) {
 c002fdc:	697b      	ldr	r3, [r7, #20]
 c002fde:	3301      	adds	r3, #1
 c002fe0:	617b      	str	r3, [r7, #20]
 c002fe2:	693b      	ldr	r3, [r7, #16]
 c002fe4:	2b00      	cmp	r3, #0
 c002fe6:	d1f6      	bne.n	c002fd6 <uECC_vli_numBits+0x42>
    }

    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
 c002fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c002fec:	b29b      	uxth	r3, r3
 c002fee:	3b01      	subs	r3, #1
 c002ff0:	b29b      	uxth	r3, r3
 c002ff2:	015b      	lsls	r3, r3, #5
 c002ff4:	b29a      	uxth	r2, r3
 c002ff6:	697b      	ldr	r3, [r7, #20]
 c002ff8:	b29b      	uxth	r3, r3
 c002ffa:	4413      	add	r3, r2
 c002ffc:	b29b      	uxth	r3, r3
 c002ffe:	b21b      	sxth	r3, r3
}
 c003000:	4618      	mov	r0, r3
 c003002:	3718      	adds	r7, #24
 c003004:	46bd      	mov	sp, r7
 c003006:	bd80      	pop	{r7, pc}

0c003008 <uECC_vli_set>:

/* Sets dest = src. */
#if !asm_set
uECC_VLI_API void uECC_vli_set(uECC_word_t *dest, const uECC_word_t *src, wordcount_t num_words) {
 c003008:	b480      	push	{r7}
 c00300a:	b087      	sub	sp, #28
 c00300c:	af00      	add	r7, sp, #0
 c00300e:	60f8      	str	r0, [r7, #12]
 c003010:	60b9      	str	r1, [r7, #8]
 c003012:	4613      	mov	r3, r2
 c003014:	71fb      	strb	r3, [r7, #7]
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
 c003016:	2300      	movs	r3, #0
 c003018:	75fb      	strb	r3, [r7, #23]
 c00301a:	e00f      	b.n	c00303c <uECC_vli_set+0x34>
        dest[i] = src[i];
 c00301c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c003020:	009b      	lsls	r3, r3, #2
 c003022:	68ba      	ldr	r2, [r7, #8]
 c003024:	441a      	add	r2, r3
 c003026:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c00302a:	009b      	lsls	r3, r3, #2
 c00302c:	68f9      	ldr	r1, [r7, #12]
 c00302e:	440b      	add	r3, r1
 c003030:	6812      	ldr	r2, [r2, #0]
 c003032:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 c003034:	7dfb      	ldrb	r3, [r7, #23]
 c003036:	3301      	adds	r3, #1
 c003038:	b2db      	uxtb	r3, r3
 c00303a:	75fb      	strb	r3, [r7, #23]
 c00303c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 c003040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c003044:	429a      	cmp	r2, r3
 c003046:	dbe9      	blt.n	c00301c <uECC_vli_set+0x14>
    }
}
 c003048:	bf00      	nop
 c00304a:	bf00      	nop
 c00304c:	371c      	adds	r7, #28
 c00304e:	46bd      	mov	sp, r7
 c003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003054:	4770      	bx	lr

0c003056 <uECC_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t uECC_vli_cmp_unsafe(const uECC_word_t *left,
                                       const uECC_word_t *right,
                                       wordcount_t num_words) {
 c003056:	b480      	push	{r7}
 c003058:	b087      	sub	sp, #28
 c00305a:	af00      	add	r7, sp, #0
 c00305c:	60f8      	str	r0, [r7, #12]
 c00305e:	60b9      	str	r1, [r7, #8]
 c003060:	4613      	mov	r3, r2
 c003062:	71fb      	strb	r3, [r7, #7]
    wordcount_t i;
    for (i = num_words - 1; i >= 0; --i) {
 c003064:	79fb      	ldrb	r3, [r7, #7]
 c003066:	3b01      	subs	r3, #1
 c003068:	b2db      	uxtb	r3, r3
 c00306a:	75fb      	strb	r3, [r7, #23]
 c00306c:	e024      	b.n	c0030b8 <uECC_vli_cmp_unsafe+0x62>
        if (left[i] > right[i]) {
 c00306e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c003072:	009b      	lsls	r3, r3, #2
 c003074:	68fa      	ldr	r2, [r7, #12]
 c003076:	4413      	add	r3, r2
 c003078:	681a      	ldr	r2, [r3, #0]
 c00307a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c00307e:	009b      	lsls	r3, r3, #2
 c003080:	68b9      	ldr	r1, [r7, #8]
 c003082:	440b      	add	r3, r1
 c003084:	681b      	ldr	r3, [r3, #0]
 c003086:	429a      	cmp	r2, r3
 c003088:	d901      	bls.n	c00308e <uECC_vli_cmp_unsafe+0x38>
            return 1;
 c00308a:	2301      	movs	r3, #1
 c00308c:	e019      	b.n	c0030c2 <uECC_vli_cmp_unsafe+0x6c>
        } else if (left[i] < right[i]) {
 c00308e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c003092:	009b      	lsls	r3, r3, #2
 c003094:	68fa      	ldr	r2, [r7, #12]
 c003096:	4413      	add	r3, r2
 c003098:	681a      	ldr	r2, [r3, #0]
 c00309a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c00309e:	009b      	lsls	r3, r3, #2
 c0030a0:	68b9      	ldr	r1, [r7, #8]
 c0030a2:	440b      	add	r3, r1
 c0030a4:	681b      	ldr	r3, [r3, #0]
 c0030a6:	429a      	cmp	r2, r3
 c0030a8:	d202      	bcs.n	c0030b0 <uECC_vli_cmp_unsafe+0x5a>
            return -1;
 c0030aa:	f04f 33ff 	mov.w	r3, #4294967295
 c0030ae:	e008      	b.n	c0030c2 <uECC_vli_cmp_unsafe+0x6c>
    for (i = num_words - 1; i >= 0; --i) {
 c0030b0:	7dfb      	ldrb	r3, [r7, #23]
 c0030b2:	3b01      	subs	r3, #1
 c0030b4:	b2db      	uxtb	r3, r3
 c0030b6:	75fb      	strb	r3, [r7, #23]
 c0030b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c0030bc:	2b00      	cmp	r3, #0
 c0030be:	dad6      	bge.n	c00306e <uECC_vli_cmp_unsafe+0x18>
        }
    }
    return 0;
 c0030c0:	2300      	movs	r3, #0
}
 c0030c2:	4618      	mov	r0, r3
 c0030c4:	371c      	adds	r7, #28
 c0030c6:	46bd      	mov	sp, r7
 c0030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0030cc:	4770      	bx	lr

0c0030ce <uECC_vli_equal>:

/* Constant-time comparison function - secure way to compare long integers */
/* Returns one if left == right, zero otherwise. */
uECC_VLI_API uECC_word_t uECC_vli_equal(const uECC_word_t *left,
                                        const uECC_word_t *right,
                                        wordcount_t num_words) {
 c0030ce:	b480      	push	{r7}
 c0030d0:	b087      	sub	sp, #28
 c0030d2:	af00      	add	r7, sp, #0
 c0030d4:	60f8      	str	r0, [r7, #12]
 c0030d6:	60b9      	str	r1, [r7, #8]
 c0030d8:	4613      	mov	r3, r2
 c0030da:	71fb      	strb	r3, [r7, #7]
    uECC_word_t diff = 0;
 c0030dc:	2300      	movs	r3, #0
 c0030de:	617b      	str	r3, [r7, #20]
    wordcount_t i;
    for (i = num_words - 1; i >= 0; --i) {
 c0030e0:	79fb      	ldrb	r3, [r7, #7]
 c0030e2:	3b01      	subs	r3, #1
 c0030e4:	b2db      	uxtb	r3, r3
 c0030e6:	74fb      	strb	r3, [r7, #19]
 c0030e8:	e013      	b.n	c003112 <uECC_vli_equal+0x44>
        diff |= (left[i] ^ right[i]);
 c0030ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 c0030ee:	009b      	lsls	r3, r3, #2
 c0030f0:	68fa      	ldr	r2, [r7, #12]
 c0030f2:	4413      	add	r3, r2
 c0030f4:	681a      	ldr	r2, [r3, #0]
 c0030f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 c0030fa:	009b      	lsls	r3, r3, #2
 c0030fc:	68b9      	ldr	r1, [r7, #8]
 c0030fe:	440b      	add	r3, r1
 c003100:	681b      	ldr	r3, [r3, #0]
 c003102:	4053      	eors	r3, r2
 c003104:	697a      	ldr	r2, [r7, #20]
 c003106:	4313      	orrs	r3, r2
 c003108:	617b      	str	r3, [r7, #20]
    for (i = num_words - 1; i >= 0; --i) {
 c00310a:	7cfb      	ldrb	r3, [r7, #19]
 c00310c:	3b01      	subs	r3, #1
 c00310e:	b2db      	uxtb	r3, r3
 c003110:	74fb      	strb	r3, [r7, #19]
 c003112:	f997 3013 	ldrsb.w	r3, [r7, #19]
 c003116:	2b00      	cmp	r3, #0
 c003118:	dae7      	bge.n	c0030ea <uECC_vli_equal+0x1c>
    }
    return (diff == 0);
 c00311a:	697b      	ldr	r3, [r7, #20]
 c00311c:	2b00      	cmp	r3, #0
 c00311e:	bf0c      	ite	eq
 c003120:	2301      	moveq	r3, #1
 c003122:	2300      	movne	r3, #0
 c003124:	b2db      	uxtb	r3, r3
}
 c003126:	4618      	mov	r0, r3
 c003128:	371c      	adds	r7, #28
 c00312a:	46bd      	mov	sp, r7
 c00312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003130:	4770      	bx	lr

0c003132 <uECC_vli_rshift1>:
    return (!equal - 2 * neg);
}

/* Computes vli = vli >> 1. */
#if !asm_rshift1
uECC_VLI_API void uECC_vli_rshift1(uECC_word_t *vli, wordcount_t num_words) {
 c003132:	b480      	push	{r7}
 c003134:	b087      	sub	sp, #28
 c003136:	af00      	add	r7, sp, #0
 c003138:	6078      	str	r0, [r7, #4]
 c00313a:	460b      	mov	r3, r1
 c00313c:	70fb      	strb	r3, [r7, #3]
    uECC_word_t *end = vli;
 c00313e:	687b      	ldr	r3, [r7, #4]
 c003140:	613b      	str	r3, [r7, #16]
    uECC_word_t carry = 0;
 c003142:	2300      	movs	r3, #0
 c003144:	617b      	str	r3, [r7, #20]

    vli += num_words;
 c003146:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c00314a:	009b      	lsls	r3, r3, #2
 c00314c:	687a      	ldr	r2, [r7, #4]
 c00314e:	4413      	add	r3, r2
 c003150:	607b      	str	r3, [r7, #4]
    while (vli-- > end) {
 c003152:	e00b      	b.n	c00316c <uECC_vli_rshift1+0x3a>
        uECC_word_t temp = *vli;
 c003154:	687b      	ldr	r3, [r7, #4]
 c003156:	681b      	ldr	r3, [r3, #0]
 c003158:	60fb      	str	r3, [r7, #12]
        *vli = (temp >> 1) | carry;
 c00315a:	68fb      	ldr	r3, [r7, #12]
 c00315c:	085a      	lsrs	r2, r3, #1
 c00315e:	697b      	ldr	r3, [r7, #20]
 c003160:	431a      	orrs	r2, r3
 c003162:	687b      	ldr	r3, [r7, #4]
 c003164:	601a      	str	r2, [r3, #0]
        carry = temp << (uECC_WORD_BITS - 1);
 c003166:	68fb      	ldr	r3, [r7, #12]
 c003168:	07db      	lsls	r3, r3, #31
 c00316a:	617b      	str	r3, [r7, #20]
    while (vli-- > end) {
 c00316c:	687b      	ldr	r3, [r7, #4]
 c00316e:	1f1a      	subs	r2, r3, #4
 c003170:	607a      	str	r2, [r7, #4]
 c003172:	693a      	ldr	r2, [r7, #16]
 c003174:	429a      	cmp	r2, r3
 c003176:	d3ed      	bcc.n	c003154 <uECC_vli_rshift1+0x22>
    }
}
 c003178:	bf00      	nop
 c00317a:	bf00      	nop
 c00317c:	371c      	adds	r7, #28
 c00317e:	46bd      	mov	sp, r7
 c003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003184:	4770      	bx	lr

0c003186 <uECC_vli_modAdd>:
   Assumes that left < mod and right < mod, and that result does not overlap mod. */
uECC_VLI_API void uECC_vli_modAdd(uECC_word_t *result,
                                  const uECC_word_t *left,
                                  const uECC_word_t *right,
                                  const uECC_word_t *mod,
                                  wordcount_t num_words) {
 c003186:	b580      	push	{r7, lr}
 c003188:	b086      	sub	sp, #24
 c00318a:	af00      	add	r7, sp, #0
 c00318c:	60f8      	str	r0, [r7, #12]
 c00318e:	60b9      	str	r1, [r7, #8]
 c003190:	607a      	str	r2, [r7, #4]
 c003192:	603b      	str	r3, [r7, #0]
    uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
 c003194:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c003198:	687a      	ldr	r2, [r7, #4]
 c00319a:	68b9      	ldr	r1, [r7, #8]
 c00319c:	68f8      	ldr	r0, [r7, #12]
 c00319e:	f7ff fd87 	bl	c002cb0 <uECC_vli_add>
 c0031a2:	6178      	str	r0, [r7, #20]
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
 c0031a4:	697b      	ldr	r3, [r7, #20]
 c0031a6:	2b00      	cmp	r3, #0
 c0031a8:	d109      	bne.n	c0031be <uECC_vli_modAdd+0x38>
 c0031aa:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c0031ae:	461a      	mov	r2, r3
 c0031b0:	68f9      	ldr	r1, [r7, #12]
 c0031b2:	6838      	ldr	r0, [r7, #0]
 c0031b4:	f7ff ff4f 	bl	c003056 <uECC_vli_cmp_unsafe>
 c0031b8:	4603      	mov	r3, r0
 c0031ba:	2b01      	cmp	r3, #1
 c0031bc:	d006      	beq.n	c0031cc <uECC_vli_modAdd+0x46>
        /* result > mod (result = mod + remainder), so subtract mod to get remainder. */
        uECC_vli_sub(result, result, mod, num_words);
 c0031be:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c0031c2:	683a      	ldr	r2, [r7, #0]
 c0031c4:	68f9      	ldr	r1, [r7, #12]
 c0031c6:	68f8      	ldr	r0, [r7, #12]
 c0031c8:	f7ff fdba 	bl	c002d40 <uECC_vli_sub>
    }
}
 c0031cc:	bf00      	nop
 c0031ce:	3718      	adds	r7, #24
 c0031d0:	46bd      	mov	sp, r7
 c0031d2:	bd80      	pop	{r7, pc}

0c0031d4 <uECC_vli_modSub>:
   Assumes that left < mod and right < mod, and that result does not overlap mod. */
uECC_VLI_API void uECC_vli_modSub(uECC_word_t *result,
                                  const uECC_word_t *left,
                                  const uECC_word_t *right,
                                  const uECC_word_t *mod,
                                  wordcount_t num_words) {
 c0031d4:	b580      	push	{r7, lr}
 c0031d6:	b086      	sub	sp, #24
 c0031d8:	af00      	add	r7, sp, #0
 c0031da:	60f8      	str	r0, [r7, #12]
 c0031dc:	60b9      	str	r1, [r7, #8]
 c0031de:	607a      	str	r2, [r7, #4]
 c0031e0:	603b      	str	r3, [r7, #0]
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
 c0031e2:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c0031e6:	687a      	ldr	r2, [r7, #4]
 c0031e8:	68b9      	ldr	r1, [r7, #8]
 c0031ea:	68f8      	ldr	r0, [r7, #12]
 c0031ec:	f7ff fda8 	bl	c002d40 <uECC_vli_sub>
 c0031f0:	6178      	str	r0, [r7, #20]
    if (l_borrow) {
 c0031f2:	697b      	ldr	r3, [r7, #20]
 c0031f4:	2b00      	cmp	r3, #0
 c0031f6:	d006      	beq.n	c003206 <uECC_vli_modSub+0x32>
        /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
           we can get the correct result from result + mod (with overflow). */
        uECC_vli_add(result, result, mod, num_words);
 c0031f8:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c0031fc:	683a      	ldr	r2, [r7, #0]
 c0031fe:	68f9      	ldr	r1, [r7, #12]
 c003200:	68f8      	ldr	r0, [r7, #12]
 c003202:	f7ff fd55 	bl	c002cb0 <uECC_vli_add>
    }
}
 c003206:	bf00      	nop
 c003208:	3718      	adds	r7, #24
 c00320a:	46bd      	mov	sp, r7
 c00320c:	bd80      	pop	{r7, pc}

0c00320e <uECC_vli_mmod>:
/* Computes result = product % mod, where product is 2N words long. */
/* Currently only designed to work for curve_p or curve_n. */
uECC_VLI_API void uECC_vli_mmod(uECC_word_t *result,
                                uECC_word_t *product,
                                const uECC_word_t *mod,
                                wordcount_t num_words) {
 c00320e:	b590      	push	{r4, r7, lr}
 c003210:	b0ad      	sub	sp, #180	; 0xb4
 c003212:	af00      	add	r7, sp, #0
 c003214:	60f8      	str	r0, [r7, #12]
 c003216:	60b9      	str	r1, [r7, #8]
 c003218:	607a      	str	r2, [r7, #4]
 c00321a:	70fb      	strb	r3, [r7, #3]
    uECC_word_t mod_multiple[2 * uECC_MAX_WORDS];
    uECC_word_t tmp[2 * uECC_MAX_WORDS];
    uECC_word_t *v[2] = {tmp, product};
 c00321c:	f107 0318 	add.w	r3, r7, #24
 c003220:	613b      	str	r3, [r7, #16]
 c003222:	68bb      	ldr	r3, [r7, #8]
 c003224:	617b      	str	r3, [r7, #20]
    uECC_word_t index;

    /* Shift mod so its highest set bit is at the maximum position. */
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
 c003226:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c00322a:	b29b      	uxth	r3, r3
 c00322c:	019b      	lsls	r3, r3, #6
 c00322e:	b29c      	uxth	r4, r3
 c003230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003234:	4619      	mov	r1, r3
 c003236:	6878      	ldr	r0, [r7, #4]
 c003238:	f7ff feac 	bl	c002f94 <uECC_vli_numBits>
 c00323c:	4603      	mov	r3, r0
 c00323e:	b29b      	uxth	r3, r3
 c003240:	1ae3      	subs	r3, r4, r3
 c003242:	b29b      	uxth	r3, r3
 c003244:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
    wordcount_t word_shift = shift / uECC_WORD_BITS;
 c003248:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 c00324c:	2b00      	cmp	r3, #0
 c00324e:	da00      	bge.n	c003252 <uECC_vli_mmod+0x44>
 c003250:	331f      	adds	r3, #31
 c003252:	115b      	asrs	r3, r3, #5
 c003254:	b21b      	sxth	r3, r3
 c003256:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
    wordcount_t bit_shift = shift % uECC_WORD_BITS;
 c00325a:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 c00325e:	425a      	negs	r2, r3
 c003260:	f003 031f 	and.w	r3, r3, #31
 c003264:	f002 021f 	and.w	r2, r2, #31
 c003268:	bf58      	it	pl
 c00326a:	4253      	negpl	r3, r2
 c00326c:	b21b      	sxth	r3, r3
 c00326e:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
    uECC_word_t carry = 0;
 c003272:	2300      	movs	r3, #0
 c003274:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    uECC_vli_clear(mod_multiple, word_shift);
 c003278:	f997 209e 	ldrsb.w	r2, [r7, #158]	; 0x9e
 c00327c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 c003280:	4611      	mov	r1, r2
 c003282:	4618      	mov	r0, r3
 c003284:	f7ff fdfb 	bl	c002e7e <uECC_vli_clear>
    if (bit_shift > 0) {
 c003288:	f997 309d 	ldrsb.w	r3, [r7, #157]	; 0x9d
 c00328c:	2b00      	cmp	r3, #0
 c00328e:	dd34      	ble.n	c0032fa <uECC_vli_mmod+0xec>
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
 c003290:	2300      	movs	r3, #0
 c003292:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c003296:	e029      	b.n	c0032ec <uECC_vli_mmod+0xde>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
 c003298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c00329c:	009b      	lsls	r3, r3, #2
 c00329e:	687a      	ldr	r2, [r7, #4]
 c0032a0:	4413      	add	r3, r2
 c0032a2:	681a      	ldr	r2, [r3, #0]
 c0032a4:	f997 309d 	ldrsb.w	r3, [r7, #157]	; 0x9d
 c0032a8:	fa02 f103 	lsl.w	r1, r2, r3
 c0032ac:	f997 209e 	ldrsb.w	r2, [r7, #158]	; 0x9e
 c0032b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c0032b4:	4413      	add	r3, r2
 c0032b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 c0032ba:	430a      	orrs	r2, r1
 c0032bc:	009b      	lsls	r3, r3, #2
 c0032be:	33b0      	adds	r3, #176	; 0xb0
 c0032c0:	443b      	add	r3, r7
 c0032c2:	f843 2c58 	str.w	r2, [r3, #-88]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
 c0032c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c0032ca:	009b      	lsls	r3, r3, #2
 c0032cc:	687a      	ldr	r2, [r7, #4]
 c0032ce:	4413      	add	r3, r2
 c0032d0:	681a      	ldr	r2, [r3, #0]
 c0032d2:	f997 309d 	ldrsb.w	r3, [r7, #157]	; 0x9d
 c0032d6:	f1c3 0320 	rsb	r3, r3, #32
 c0032da:	fa22 f303 	lsr.w	r3, r2, r3
 c0032de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
 c0032e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c0032e6:	3301      	adds	r3, #1
 c0032e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c0032ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0032f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 c0032f4:	429a      	cmp	r2, r3
 c0032f6:	d3cf      	bcc.n	c003298 <uECC_vli_mmod+0x8a>
 c0032f8:	e00b      	b.n	c003312 <uECC_vli_mmod+0x104>
        }
    } else {
        uECC_vli_set(mod_multiple + word_shift, mod, num_words);
 c0032fa:	f997 309e 	ldrsb.w	r3, [r7, #158]	; 0x9e
 c0032fe:	009b      	lsls	r3, r3, #2
 c003300:	f107 0258 	add.w	r2, r7, #88	; 0x58
 c003304:	4413      	add	r3, r2
 c003306:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c00330a:	6879      	ldr	r1, [r7, #4]
 c00330c:	4618      	mov	r0, r3
 c00330e:	f7ff fe7b 	bl	c003008 <uECC_vli_set>
    }

    for (index = 1; shift >= 0; --shift) {
 c003312:	2301      	movs	r3, #1
 c003314:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c003318:	e09f      	b.n	c00345a <uECC_vli_mmod+0x24c>
        uECC_word_t borrow = 0;
 c00331a:	2300      	movs	r3, #0
 c00331c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        wordcount_t i;
        for (i = 0; i < num_words * 2; ++i) {
 c003320:	2300      	movs	r3, #0
 c003322:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 c003326:	e053      	b.n	c0033d0 <uECC_vli_mmod+0x1c2>
            uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 c003328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c00332c:	009b      	lsls	r3, r3, #2
 c00332e:	33b0      	adds	r3, #176	; 0xb0
 c003330:	443b      	add	r3, r7
 c003332:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 c003336:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 c00333a:	009b      	lsls	r3, r3, #2
 c00333c:	4413      	add	r3, r2
 c00333e:	681a      	ldr	r2, [r3, #0]
 c003340:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 c003344:	009b      	lsls	r3, r3, #2
 c003346:	33b0      	adds	r3, #176	; 0xb0
 c003348:	443b      	add	r3, r7
 c00334a:	f853 3c58 	ldr.w	r3, [r3, #-88]
 c00334e:	1ad2      	subs	r2, r2, r3
 c003350:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 c003354:	1ad3      	subs	r3, r2, r3
 c003356:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            if (diff != v[index][i]) {
 c00335a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c00335e:	009b      	lsls	r3, r3, #2
 c003360:	33b0      	adds	r3, #176	; 0xb0
 c003362:	443b      	add	r3, r7
 c003364:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 c003368:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 c00336c:	009b      	lsls	r3, r3, #2
 c00336e:	4413      	add	r3, r2
 c003370:	681b      	ldr	r3, [r3, #0]
 c003372:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 c003376:	429a      	cmp	r2, r3
 c003378:	d014      	beq.n	c0033a4 <uECC_vli_mmod+0x196>
                borrow = (diff > v[index][i]);
 c00337a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c00337e:	009b      	lsls	r3, r3, #2
 c003380:	33b0      	adds	r3, #176	; 0xb0
 c003382:	443b      	add	r3, r7
 c003384:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 c003388:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 c00338c:	009b      	lsls	r3, r3, #2
 c00338e:	4413      	add	r3, r2
 c003390:	681b      	ldr	r3, [r3, #0]
 c003392:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 c003396:	429a      	cmp	r2, r3
 c003398:	bf8c      	ite	hi
 c00339a:	2301      	movhi	r3, #1
 c00339c:	2300      	movls	r3, #0
 c00339e:	b2db      	uxtb	r3, r3
 c0033a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            }
            v[1 - index][i] = diff;
 c0033a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c0033a8:	f1c3 0301 	rsb	r3, r3, #1
 c0033ac:	009b      	lsls	r3, r3, #2
 c0033ae:	33b0      	adds	r3, #176	; 0xb0
 c0033b0:	443b      	add	r3, r7
 c0033b2:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 c0033b6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 c0033ba:	009b      	lsls	r3, r3, #2
 c0033bc:	4413      	add	r3, r2
 c0033be:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 c0033c2:	601a      	str	r2, [r3, #0]
        for (i = 0; i < num_words * 2; ++i) {
 c0033c4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 c0033c8:	3301      	adds	r3, #1
 c0033ca:	b2db      	uxtb	r3, r3
 c0033cc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 c0033d0:	f997 209f 	ldrsb.w	r2, [r7, #159]	; 0x9f
 c0033d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0033d8:	005b      	lsls	r3, r3, #1
 c0033da:	429a      	cmp	r2, r3
 c0033dc:	dba4      	blt.n	c003328 <uECC_vli_mmod+0x11a>
        }
        index = !(index ^ borrow); /* Swap the index if there was no borrow */
 c0033de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 c0033e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 c0033e6:	429a      	cmp	r2, r3
 c0033e8:	bf0c      	ite	eq
 c0033ea:	2301      	moveq	r3, #1
 c0033ec:	2300      	movne	r3, #0
 c0033ee:	b2db      	uxtb	r3, r3
 c0033f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        uECC_vli_rshift1(mod_multiple, num_words);
 c0033f4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0033f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 c0033fc:	4611      	mov	r1, r2
 c0033fe:	4618      	mov	r0, r3
 c003400:	f7ff fe97 	bl	c003132 <uECC_vli_rshift1>
        mod_multiple[num_words - 1] |= mod_multiple[num_words] << (uECC_WORD_BITS - 1);
 c003404:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003408:	3b01      	subs	r3, #1
 c00340a:	009b      	lsls	r3, r3, #2
 c00340c:	33b0      	adds	r3, #176	; 0xb0
 c00340e:	443b      	add	r3, r7
 c003410:	f853 1c58 	ldr.w	r1, [r3, #-88]
 c003414:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003418:	009b      	lsls	r3, r3, #2
 c00341a:	33b0      	adds	r3, #176	; 0xb0
 c00341c:	443b      	add	r3, r7
 c00341e:	f853 3c58 	ldr.w	r3, [r3, #-88]
 c003422:	07da      	lsls	r2, r3, #31
 c003424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003428:	3b01      	subs	r3, #1
 c00342a:	430a      	orrs	r2, r1
 c00342c:	009b      	lsls	r3, r3, #2
 c00342e:	33b0      	adds	r3, #176	; 0xb0
 c003430:	443b      	add	r3, r7
 c003432:	f843 2c58 	str.w	r2, [r3, #-88]
        uECC_vli_rshift1(mod_multiple + num_words, num_words);
 c003436:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c00343a:	009b      	lsls	r3, r3, #2
 c00343c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 c003440:	4413      	add	r3, r2
 c003442:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003446:	4611      	mov	r1, r2
 c003448:	4618      	mov	r0, r3
 c00344a:	f7ff fe72 	bl	c003132 <uECC_vli_rshift1>
    for (index = 1; shift >= 0; --shift) {
 c00344e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 c003452:	3b01      	subs	r3, #1
 c003454:	b29b      	uxth	r3, r3
 c003456:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 c00345a:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 c00345e:	2b00      	cmp	r3, #0
 c003460:	f6bf af5b 	bge.w	c00331a <uECC_vli_mmod+0x10c>
    }
    uECC_vli_set(result, v[index], num_words);
 c003464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c003468:	009b      	lsls	r3, r3, #2
 c00346a:	33b0      	adds	r3, #176	; 0xb0
 c00346c:	443b      	add	r3, r7
 c00346e:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 c003472:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003476:	4619      	mov	r1, r3
 c003478:	68f8      	ldr	r0, [r7, #12]
 c00347a:	f7ff fdc5 	bl	c003008 <uECC_vli_set>
}
 c00347e:	bf00      	nop
 c003480:	37b4      	adds	r7, #180	; 0xb4
 c003482:	46bd      	mov	sp, r7
 c003484:	bd90      	pop	{r4, r7, pc}

0c003486 <uECC_vli_modMult>:
/* Computes result = (left * right) % mod. */
uECC_VLI_API void uECC_vli_modMult(uECC_word_t *result,
                                   const uECC_word_t *left,
                                   const uECC_word_t *right,
                                   const uECC_word_t *mod,
                                   wordcount_t num_words) {
 c003486:	b580      	push	{r7, lr}
 c003488:	b094      	sub	sp, #80	; 0x50
 c00348a:	af00      	add	r7, sp, #0
 c00348c:	60f8      	str	r0, [r7, #12]
 c00348e:	60b9      	str	r1, [r7, #8]
 c003490:	607a      	str	r2, [r7, #4]
 c003492:	603b      	str	r3, [r7, #0]
    uECC_word_t product[2 * uECC_MAX_WORDS];
    uECC_vli_mult(product, left, right, num_words);
 c003494:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 c003498:	f107 0010 	add.w	r0, r7, #16
 c00349c:	687a      	ldr	r2, [r7, #4]
 c00349e:	68b9      	ldr	r1, [r7, #8]
 c0034a0:	f7ff fc9c 	bl	c002ddc <uECC_vli_mult>
    uECC_vli_mmod(result, product, mod, num_words);
 c0034a4:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 c0034a8:	f107 0110 	add.w	r1, r7, #16
 c0034ac:	683a      	ldr	r2, [r7, #0]
 c0034ae:	68f8      	ldr	r0, [r7, #12]
 c0034b0:	f7ff fead 	bl	c00320e <uECC_vli_mmod>
}
 c0034b4:	bf00      	nop
 c0034b6:	3750      	adds	r7, #80	; 0x50
 c0034b8:	46bd      	mov	sp, r7
 c0034ba:	bd80      	pop	{r7, pc}

0c0034bc <uECC_vli_modMult_fast>:

uECC_VLI_API void uECC_vli_modMult_fast(uECC_word_t *result,
                                        const uECC_word_t *left,
                                        const uECC_word_t *right,
                                        uECC_Curve curve) {
 c0034bc:	b580      	push	{r7, lr}
 c0034be:	b094      	sub	sp, #80	; 0x50
 c0034c0:	af00      	add	r7, sp, #0
 c0034c2:	60f8      	str	r0, [r7, #12]
 c0034c4:	60b9      	str	r1, [r7, #8]
 c0034c6:	607a      	str	r2, [r7, #4]
 c0034c8:	603b      	str	r3, [r7, #0]
    uECC_word_t product[2 * uECC_MAX_WORDS];
    uECC_vli_mult(product, left, right, curve->num_words);
 c0034ca:	683b      	ldr	r3, [r7, #0]
 c0034cc:	f993 3000 	ldrsb.w	r3, [r3]
 c0034d0:	f107 0010 	add.w	r0, r7, #16
 c0034d4:	687a      	ldr	r2, [r7, #4]
 c0034d6:	68b9      	ldr	r1, [r7, #8]
 c0034d8:	f7ff fc80 	bl	c002ddc <uECC_vli_mult>
#if (uECC_OPTIMIZATION_LEVEL > 0)
    curve->mmod_fast(result, product);
 c0034dc:	683b      	ldr	r3, [r7, #0]
 c0034de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 c0034e2:	f107 0210 	add.w	r2, r7, #16
 c0034e6:	4611      	mov	r1, r2
 c0034e8:	68f8      	ldr	r0, [r7, #12]
 c0034ea:	4798      	blx	r3
#else
    uECC_vli_mmod(result, product, curve->p, curve->num_words);
#endif
}
 c0034ec:	bf00      	nop
 c0034ee:	3750      	adds	r7, #80	; 0x50
 c0034f0:	46bd      	mov	sp, r7
 c0034f2:	bd80      	pop	{r7, pc}

0c0034f4 <uECC_vli_modSquare_fast>:
}
#endif /* uECC_ENABLE_VLI_API */

uECC_VLI_API void uECC_vli_modSquare_fast(uECC_word_t *result,
                                          const uECC_word_t *left,
                                          uECC_Curve curve) {
 c0034f4:	b580      	push	{r7, lr}
 c0034f6:	b084      	sub	sp, #16
 c0034f8:	af00      	add	r7, sp, #0
 c0034fa:	60f8      	str	r0, [r7, #12]
 c0034fc:	60b9      	str	r1, [r7, #8]
 c0034fe:	607a      	str	r2, [r7, #4]
    uECC_vli_modMult_fast(result, left, left, curve);
 c003500:	687b      	ldr	r3, [r7, #4]
 c003502:	68ba      	ldr	r2, [r7, #8]
 c003504:	68b9      	ldr	r1, [r7, #8]
 c003506:	68f8      	ldr	r0, [r7, #12]
 c003508:	f7ff ffd8 	bl	c0034bc <uECC_vli_modMult_fast>
}
 c00350c:	bf00      	nop
 c00350e:	3710      	adds	r7, #16
 c003510:	46bd      	mov	sp, r7
 c003512:	bd80      	pop	{r7, pc}

0c003514 <vli_modInv_update>:
#endif /* uECC_SQUARE_FUNC */

#define EVEN(vli) (!(vli[0] & 1))
static void vli_modInv_update(uECC_word_t *uv,
                              const uECC_word_t *mod,
                              wordcount_t num_words) {
 c003514:	b580      	push	{r7, lr}
 c003516:	b086      	sub	sp, #24
 c003518:	af00      	add	r7, sp, #0
 c00351a:	60f8      	str	r0, [r7, #12]
 c00351c:	60b9      	str	r1, [r7, #8]
 c00351e:	4613      	mov	r3, r2
 c003520:	71fb      	strb	r3, [r7, #7]
    uECC_word_t carry = 0;
 c003522:	2300      	movs	r3, #0
 c003524:	617b      	str	r3, [r7, #20]
    if (!EVEN(uv)) {
 c003526:	68fb      	ldr	r3, [r7, #12]
 c003528:	681b      	ldr	r3, [r3, #0]
 c00352a:	f003 0301 	and.w	r3, r3, #1
 c00352e:	2b00      	cmp	r3, #0
 c003530:	d007      	beq.n	c003542 <vli_modInv_update+0x2e>
        carry = uECC_vli_add(uv, uv, mod, num_words);
 c003532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c003536:	68ba      	ldr	r2, [r7, #8]
 c003538:	68f9      	ldr	r1, [r7, #12]
 c00353a:	68f8      	ldr	r0, [r7, #12]
 c00353c:	f7ff fbb8 	bl	c002cb0 <uECC_vli_add>
 c003540:	6178      	str	r0, [r7, #20]
    }
    uECC_vli_rshift1(uv, num_words);
 c003542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c003546:	4619      	mov	r1, r3
 c003548:	68f8      	ldr	r0, [r7, #12]
 c00354a:	f7ff fdf2 	bl	c003132 <uECC_vli_rshift1>
    if (carry) {
 c00354e:	697b      	ldr	r3, [r7, #20]
 c003550:	2b00      	cmp	r3, #0
 c003552:	d013      	beq.n	c00357c <vli_modInv_update+0x68>
        uv[num_words - 1] |= HIGH_BIT_SET;
 c003554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c003558:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c00355c:	3b01      	subs	r3, #1
 c00355e:	009b      	lsls	r3, r3, #2
 c003560:	68fa      	ldr	r2, [r7, #12]
 c003562:	4413      	add	r3, r2
 c003564:	681a      	ldr	r2, [r3, #0]
 c003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00356a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c00356e:	3b01      	subs	r3, #1
 c003570:	009b      	lsls	r3, r3, #2
 c003572:	68f9      	ldr	r1, [r7, #12]
 c003574:	440b      	add	r3, r1
 c003576:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 c00357a:	601a      	str	r2, [r3, #0]
    }
}
 c00357c:	bf00      	nop
 c00357e:	3718      	adds	r7, #24
 c003580:	46bd      	mov	sp, r7
 c003582:	bd80      	pop	{r7, pc}

0c003584 <uECC_vli_modInv>:
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide" */
uECC_VLI_API void uECC_vli_modInv(uECC_word_t *result,
                                  const uECC_word_t *input,
                                  const uECC_word_t *mod,
                                  wordcount_t num_words) {
 c003584:	b580      	push	{r7, lr}
 c003586:	b0a6      	sub	sp, #152	; 0x98
 c003588:	af00      	add	r7, sp, #0
 c00358a:	60f8      	str	r0, [r7, #12]
 c00358c:	60b9      	str	r1, [r7, #8]
 c00358e:	607a      	str	r2, [r7, #4]
 c003590:	70fb      	strb	r3, [r7, #3]
    uECC_word_t a[uECC_MAX_WORDS], b[uECC_MAX_WORDS], u[uECC_MAX_WORDS], v[uECC_MAX_WORDS];
    cmpresult_t cmpResult;

    if (uECC_vli_isZero(input, num_words)) {
 c003592:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003596:	4619      	mov	r1, r3
 c003598:	68b8      	ldr	r0, [r7, #8]
 c00359a:	f7ff fc91 	bl	c002ec0 <uECC_vli_isZero>
 c00359e:	4603      	mov	r3, r0
 c0035a0:	2b00      	cmp	r3, #0
 c0035a2:	d006      	beq.n	c0035b2 <uECC_vli_modInv+0x2e>
        uECC_vli_clear(result, num_words);
 c0035a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0035a8:	4619      	mov	r1, r3
 c0035aa:	68f8      	ldr	r0, [r7, #12]
 c0035ac:	f7ff fc67 	bl	c002e7e <uECC_vli_clear>
 c0035b0:	e0de      	b.n	c003770 <uECC_vli_modInv+0x1ec>
        return;
    }

    uECC_vli_set(a, input, num_words);
 c0035b2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0035b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 c0035ba:	68b9      	ldr	r1, [r7, #8]
 c0035bc:	4618      	mov	r0, r3
 c0035be:	f7ff fd23 	bl	c003008 <uECC_vli_set>
    uECC_vli_set(b, mod, num_words);
 c0035c2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0035c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 c0035ca:	6879      	ldr	r1, [r7, #4]
 c0035cc:	4618      	mov	r0, r3
 c0035ce:	f7ff fd1b 	bl	c003008 <uECC_vli_set>
    uECC_vli_clear(u, num_words);
 c0035d2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0035d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c0035da:	4611      	mov	r1, r2
 c0035dc:	4618      	mov	r0, r3
 c0035de:	f7ff fc4e 	bl	c002e7e <uECC_vli_clear>
    u[0] = 1;
 c0035e2:	2301      	movs	r3, #1
 c0035e4:	637b      	str	r3, [r7, #52]	; 0x34
    uECC_vli_clear(v, num_words);
 c0035e6:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0035ea:	f107 0314 	add.w	r3, r7, #20
 c0035ee:	4611      	mov	r1, r2
 c0035f0:	4618      	mov	r0, r3
 c0035f2:	f7ff fc44 	bl	c002e7e <uECC_vli_clear>
    while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 c0035f6:	e0a2      	b.n	c00373e <uECC_vli_modInv+0x1ba>
        if (EVEN(a)) {
 c0035f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c0035fa:	f003 0301 	and.w	r3, r3, #1
 c0035fe:	2b00      	cmp	r3, #0
 c003600:	d110      	bne.n	c003624 <uECC_vli_modInv+0xa0>
            uECC_vli_rshift1(a, num_words);
 c003602:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003606:	f107 0374 	add.w	r3, r7, #116	; 0x74
 c00360a:	4611      	mov	r1, r2
 c00360c:	4618      	mov	r0, r3
 c00360e:	f7ff fd90 	bl	c003132 <uECC_vli_rshift1>
            vli_modInv_update(u, mod, num_words);
 c003612:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003616:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c00361a:	6879      	ldr	r1, [r7, #4]
 c00361c:	4618      	mov	r0, r3
 c00361e:	f7ff ff79 	bl	c003514 <vli_modInv_update>
 c003622:	e08c      	b.n	c00373e <uECC_vli_modInv+0x1ba>
        } else if (EVEN(b)) {
 c003624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c003626:	f003 0301 	and.w	r3, r3, #1
 c00362a:	2b00      	cmp	r3, #0
 c00362c:	d110      	bne.n	c003650 <uECC_vli_modInv+0xcc>
            uECC_vli_rshift1(b, num_words);
 c00362e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003632:	f107 0354 	add.w	r3, r7, #84	; 0x54
 c003636:	4611      	mov	r1, r2
 c003638:	4618      	mov	r0, r3
 c00363a:	f7ff fd7a 	bl	c003132 <uECC_vli_rshift1>
            vli_modInv_update(v, mod, num_words);
 c00363e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003642:	f107 0314 	add.w	r3, r7, #20
 c003646:	6879      	ldr	r1, [r7, #4]
 c003648:	4618      	mov	r0, r3
 c00364a:	f7ff ff63 	bl	c003514 <vli_modInv_update>
 c00364e:	e076      	b.n	c00373e <uECC_vli_modInv+0x1ba>
        } else if (cmpResult > 0) {
 c003650:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 c003654:	2b00      	cmp	r3, #0
 c003656:	dd39      	ble.n	c0036cc <uECC_vli_modInv+0x148>
            uECC_vli_sub(a, a, b, num_words);
 c003658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c00365c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 c003660:	f107 0174 	add.w	r1, r7, #116	; 0x74
 c003664:	f107 0074 	add.w	r0, r7, #116	; 0x74
 c003668:	f7ff fb6a 	bl	c002d40 <uECC_vli_sub>
            uECC_vli_rshift1(a, num_words);
 c00366c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003670:	f107 0374 	add.w	r3, r7, #116	; 0x74
 c003674:	4611      	mov	r1, r2
 c003676:	4618      	mov	r0, r3
 c003678:	f7ff fd5b 	bl	c003132 <uECC_vli_rshift1>
            if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
 c00367c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003680:	f107 0114 	add.w	r1, r7, #20
 c003684:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c003688:	4618      	mov	r0, r3
 c00368a:	f7ff fce4 	bl	c003056 <uECC_vli_cmp_unsafe>
 c00368e:	4603      	mov	r3, r0
 c003690:	2b00      	cmp	r3, #0
 c003692:	da08      	bge.n	c0036a6 <uECC_vli_modInv+0x122>
                uECC_vli_add(u, u, mod, num_words);
 c003694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003698:	f107 0134 	add.w	r1, r7, #52	; 0x34
 c00369c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 c0036a0:	687a      	ldr	r2, [r7, #4]
 c0036a2:	f7ff fb05 	bl	c002cb0 <uECC_vli_add>
            }
            uECC_vli_sub(u, u, v, num_words);
 c0036a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0036aa:	f107 0214 	add.w	r2, r7, #20
 c0036ae:	f107 0134 	add.w	r1, r7, #52	; 0x34
 c0036b2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 c0036b6:	f7ff fb43 	bl	c002d40 <uECC_vli_sub>
            vli_modInv_update(u, mod, num_words);
 c0036ba:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0036be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c0036c2:	6879      	ldr	r1, [r7, #4]
 c0036c4:	4618      	mov	r0, r3
 c0036c6:	f7ff ff25 	bl	c003514 <vli_modInv_update>
 c0036ca:	e038      	b.n	c00373e <uECC_vli_modInv+0x1ba>
        } else {
            uECC_vli_sub(b, b, a, num_words);
 c0036cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0036d0:	f107 0274 	add.w	r2, r7, #116	; 0x74
 c0036d4:	f107 0154 	add.w	r1, r7, #84	; 0x54
 c0036d8:	f107 0054 	add.w	r0, r7, #84	; 0x54
 c0036dc:	f7ff fb30 	bl	c002d40 <uECC_vli_sub>
            uECC_vli_rshift1(b, num_words);
 c0036e0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0036e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 c0036e8:	4611      	mov	r1, r2
 c0036ea:	4618      	mov	r0, r3
 c0036ec:	f7ff fd21 	bl	c003132 <uECC_vli_rshift1>
            if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
 c0036f0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0036f4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 c0036f8:	f107 0314 	add.w	r3, r7, #20
 c0036fc:	4618      	mov	r0, r3
 c0036fe:	f7ff fcaa 	bl	c003056 <uECC_vli_cmp_unsafe>
 c003702:	4603      	mov	r3, r0
 c003704:	2b00      	cmp	r3, #0
 c003706:	da08      	bge.n	c00371a <uECC_vli_modInv+0x196>
                uECC_vli_add(v, v, mod, num_words);
 c003708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c00370c:	f107 0114 	add.w	r1, r7, #20
 c003710:	f107 0014 	add.w	r0, r7, #20
 c003714:	687a      	ldr	r2, [r7, #4]
 c003716:	f7ff facb 	bl	c002cb0 <uECC_vli_add>
            }
            uECC_vli_sub(v, v, u, num_words);
 c00371a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c00371e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 c003722:	f107 0114 	add.w	r1, r7, #20
 c003726:	f107 0014 	add.w	r0, r7, #20
 c00372a:	f7ff fb09 	bl	c002d40 <uECC_vli_sub>
            vli_modInv_update(v, mod, num_words);
 c00372e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003732:	f107 0314 	add.w	r3, r7, #20
 c003736:	6879      	ldr	r1, [r7, #4]
 c003738:	4618      	mov	r0, r3
 c00373a:	f7ff feeb 	bl	c003514 <vli_modInv_update>
    while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 c00373e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003742:	f107 0154 	add.w	r1, r7, #84	; 0x54
 c003746:	f107 0374 	add.w	r3, r7, #116	; 0x74
 c00374a:	4618      	mov	r0, r3
 c00374c:	f7ff fc83 	bl	c003056 <uECC_vli_cmp_unsafe>
 c003750:	4603      	mov	r3, r0
 c003752:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 c003756:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 c00375a:	2b00      	cmp	r3, #0
 c00375c:	f47f af4c 	bne.w	c0035f8 <uECC_vli_modInv+0x74>
        }
    }
    uECC_vli_set(result, u, num_words);
 c003760:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003764:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c003768:	4619      	mov	r1, r3
 c00376a:	68f8      	ldr	r0, [r7, #12]
 c00376c:	f7ff fc4c 	bl	c003008 <uECC_vli_set>
}
 c003770:	3798      	adds	r7, #152	; 0x98
 c003772:	46bd      	mov	sp, r7
 c003774:	bd80      	pop	{r7, pc}

0c003776 <double_jacobian_default>:
#if uECC_SUPPORTS_secp160r1 || uECC_SUPPORTS_secp192r1 || \
    uECC_SUPPORTS_secp224r1 || uECC_SUPPORTS_secp256r1
static void double_jacobian_default(uECC_word_t * X1,
                                    uECC_word_t * Y1,
                                    uECC_word_t * Z1,
                                    uECC_Curve curve) {
 c003776:	b580      	push	{r7, lr}
 c003778:	b098      	sub	sp, #96	; 0x60
 c00377a:	af02      	add	r7, sp, #8
 c00377c:	60f8      	str	r0, [r7, #12]
 c00377e:	60b9      	str	r1, [r7, #8]
 c003780:	607a      	str	r2, [r7, #4]
 c003782:	603b      	str	r3, [r7, #0]
    /* t1 = X, t2 = Y, t3 = Z */
    uECC_word_t t4[uECC_MAX_WORDS];
    uECC_word_t t5[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
 c003784:	683b      	ldr	r3, [r7, #0]
 c003786:	781b      	ldrb	r3, [r3, #0]
 c003788:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    if (uECC_vli_isZero(Z1, num_words)) {
 c00378c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003790:	4619      	mov	r1, r3
 c003792:	6878      	ldr	r0, [r7, #4]
 c003794:	f7ff fb94 	bl	c002ec0 <uECC_vli_isZero>
 c003798:	4603      	mov	r3, r0
 c00379a:	2b00      	cmp	r3, #0
 c00379c:	f040 80e6 	bne.w	c00396c <double_jacobian_default+0x1f6>
        return;
    }

    uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 c0037a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 c0037a4:	683a      	ldr	r2, [r7, #0]
 c0037a6:	68b9      	ldr	r1, [r7, #8]
 c0037a8:	4618      	mov	r0, r3
 c0037aa:	f7ff fea3 	bl	c0034f4 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 c0037ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c0037b2:	f107 0010 	add.w	r0, r7, #16
 c0037b6:	683b      	ldr	r3, [r7, #0]
 c0037b8:	68f9      	ldr	r1, [r7, #12]
 c0037ba:	f7ff fe7f 	bl	c0034bc <uECC_vli_modMult_fast>
    uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 c0037be:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c0037c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 c0037c6:	683a      	ldr	r2, [r7, #0]
 c0037c8:	4618      	mov	r0, r3
 c0037ca:	f7ff fe93 	bl	c0034f4 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 c0037ce:	683b      	ldr	r3, [r7, #0]
 c0037d0:	687a      	ldr	r2, [r7, #4]
 c0037d2:	68b9      	ldr	r1, [r7, #8]
 c0037d4:	68b8      	ldr	r0, [r7, #8]
 c0037d6:	f7ff fe71 	bl	c0034bc <uECC_vli_modMult_fast>
    uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 c0037da:	683a      	ldr	r2, [r7, #0]
 c0037dc:	6879      	ldr	r1, [r7, #4]
 c0037de:	6878      	ldr	r0, [r7, #4]
 c0037e0:	f7ff fe88 	bl	c0034f4 <uECC_vli_modSquare_fast>

    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 c0037e4:	683b      	ldr	r3, [r7, #0]
 c0037e6:	1d1a      	adds	r2, r3, #4
 c0037e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0037ec:	9300      	str	r3, [sp, #0]
 c0037ee:	4613      	mov	r3, r2
 c0037f0:	687a      	ldr	r2, [r7, #4]
 c0037f2:	68f9      	ldr	r1, [r7, #12]
 c0037f4:	68f8      	ldr	r0, [r7, #12]
 c0037f6:	f7ff fcc6 	bl	c003186 <uECC_vli_modAdd>
    uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 c0037fa:	683b      	ldr	r3, [r7, #0]
 c0037fc:	1d1a      	adds	r2, r3, #4
 c0037fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003802:	9300      	str	r3, [sp, #0]
 c003804:	4613      	mov	r3, r2
 c003806:	687a      	ldr	r2, [r7, #4]
 c003808:	6879      	ldr	r1, [r7, #4]
 c00380a:	6878      	ldr	r0, [r7, #4]
 c00380c:	f7ff fcbb 	bl	c003186 <uECC_vli_modAdd>
    uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 c003810:	683b      	ldr	r3, [r7, #0]
 c003812:	1d1a      	adds	r2, r3, #4
 c003814:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003818:	9300      	str	r3, [sp, #0]
 c00381a:	4613      	mov	r3, r2
 c00381c:	687a      	ldr	r2, [r7, #4]
 c00381e:	68f9      	ldr	r1, [r7, #12]
 c003820:	6878      	ldr	r0, [r7, #4]
 c003822:	f7ff fcd7 	bl	c0031d4 <uECC_vli_modSub>
    uECC_vli_modMult_fast(X1, X1, Z1, curve);                /* t1 = x1^2 - z1^4 */
 c003826:	683b      	ldr	r3, [r7, #0]
 c003828:	687a      	ldr	r2, [r7, #4]
 c00382a:	68f9      	ldr	r1, [r7, #12]
 c00382c:	68f8      	ldr	r0, [r7, #12]
 c00382e:	f7ff fe45 	bl	c0034bc <uECC_vli_modMult_fast>

    uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
 c003832:	683b      	ldr	r3, [r7, #0]
 c003834:	1d1a      	adds	r2, r3, #4
 c003836:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c00383a:	9300      	str	r3, [sp, #0]
 c00383c:	4613      	mov	r3, r2
 c00383e:	68fa      	ldr	r2, [r7, #12]
 c003840:	68f9      	ldr	r1, [r7, #12]
 c003842:	6878      	ldr	r0, [r7, #4]
 c003844:	f7ff fc9f 	bl	c003186 <uECC_vli_modAdd>
    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
 c003848:	683b      	ldr	r3, [r7, #0]
 c00384a:	1d1a      	adds	r2, r3, #4
 c00384c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003850:	9300      	str	r3, [sp, #0]
 c003852:	4613      	mov	r3, r2
 c003854:	687a      	ldr	r2, [r7, #4]
 c003856:	68f9      	ldr	r1, [r7, #12]
 c003858:	68f8      	ldr	r0, [r7, #12]
 c00385a:	f7ff fc94 	bl	c003186 <uECC_vli_modAdd>
    if (uECC_vli_testBit(X1, 0)) {
 c00385e:	2100      	movs	r1, #0
 c003860:	68f8      	ldr	r0, [r7, #12]
 c003862:	f7ff fb57 	bl	c002f14 <uECC_vli_testBit>
 c003866:	4603      	mov	r3, r0
 c003868:	2b00      	cmp	r3, #0
 c00386a:	d024      	beq.n	c0038b6 <double_jacobian_default+0x140>
        uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
 c00386c:	683b      	ldr	r3, [r7, #0]
 c00386e:	1d1a      	adds	r2, r3, #4
 c003870:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003874:	68f9      	ldr	r1, [r7, #12]
 c003876:	68f8      	ldr	r0, [r7, #12]
 c003878:	f7ff fa1a 	bl	c002cb0 <uECC_vli_add>
 c00387c:	6538      	str	r0, [r7, #80]	; 0x50
        uECC_vli_rshift1(X1, num_words);
 c00387e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003882:	4619      	mov	r1, r3
 c003884:	68f8      	ldr	r0, [r7, #12]
 c003886:	f7ff fc54 	bl	c003132 <uECC_vli_rshift1>
        X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
 c00388a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c00388e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c003892:	3b01      	subs	r3, #1
 c003894:	009b      	lsls	r3, r3, #2
 c003896:	68fa      	ldr	r2, [r7, #12]
 c003898:	4413      	add	r3, r2
 c00389a:	6819      	ldr	r1, [r3, #0]
 c00389c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00389e:	07da      	lsls	r2, r3, #31
 c0038a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0038a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c0038a8:	3b01      	subs	r3, #1
 c0038aa:	009b      	lsls	r3, r3, #2
 c0038ac:	68f8      	ldr	r0, [r7, #12]
 c0038ae:	4403      	add	r3, r0
 c0038b0:	430a      	orrs	r2, r1
 c0038b2:	601a      	str	r2, [r3, #0]
 c0038b4:	e005      	b.n	c0038c2 <double_jacobian_default+0x14c>
    } else {
        uECC_vli_rshift1(X1, num_words);
 c0038b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0038ba:	4619      	mov	r1, r3
 c0038bc:	68f8      	ldr	r0, [r7, #12]
 c0038be:	f7ff fc38 	bl	c003132 <uECC_vli_rshift1>
    }
    /* t1 = 3/2*(x1^2 - z1^4) = B */

    uECC_vli_modSquare_fast(Z1, X1, curve);                  /* t3 = B^2 */
 c0038c2:	683a      	ldr	r2, [r7, #0]
 c0038c4:	68f9      	ldr	r1, [r7, #12]
 c0038c6:	6878      	ldr	r0, [r7, #4]
 c0038c8:	f7ff fe14 	bl	c0034f4 <uECC_vli_modSquare_fast>
    uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 c0038cc:	683b      	ldr	r3, [r7, #0]
 c0038ce:	1d19      	adds	r1, r3, #4
 c0038d0:	f107 0210 	add.w	r2, r7, #16
 c0038d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0038d8:	9300      	str	r3, [sp, #0]
 c0038da:	460b      	mov	r3, r1
 c0038dc:	6879      	ldr	r1, [r7, #4]
 c0038de:	6878      	ldr	r0, [r7, #4]
 c0038e0:	f7ff fc78 	bl	c0031d4 <uECC_vli_modSub>
    uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 c0038e4:	683b      	ldr	r3, [r7, #0]
 c0038e6:	1d19      	adds	r1, r3, #4
 c0038e8:	f107 0210 	add.w	r2, r7, #16
 c0038ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0038f0:	9300      	str	r3, [sp, #0]
 c0038f2:	460b      	mov	r3, r1
 c0038f4:	6879      	ldr	r1, [r7, #4]
 c0038f6:	6878      	ldr	r0, [r7, #4]
 c0038f8:	f7ff fc6c 	bl	c0031d4 <uECC_vli_modSub>
    uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 c0038fc:	683b      	ldr	r3, [r7, #0]
 c0038fe:	1d1a      	adds	r2, r3, #4
 c003900:	f107 0110 	add.w	r1, r7, #16
 c003904:	f107 0010 	add.w	r0, r7, #16
 c003908:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c00390c:	9300      	str	r3, [sp, #0]
 c00390e:	4613      	mov	r3, r2
 c003910:	687a      	ldr	r2, [r7, #4]
 c003912:	f7ff fc5f 	bl	c0031d4 <uECC_vli_modSub>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = B * (A - x3) */
 c003916:	f107 0210 	add.w	r2, r7, #16
 c00391a:	683b      	ldr	r3, [r7, #0]
 c00391c:	68f9      	ldr	r1, [r7, #12]
 c00391e:	68f8      	ldr	r0, [r7, #12]
 c003920:	f7ff fdcc 	bl	c0034bc <uECC_vli_modMult_fast>
    uECC_vli_modSub(t4, X1, t4, curve->p, num_words); /* t4 = B * (A - x3) - y1^4 = y3 */
 c003924:	683b      	ldr	r3, [r7, #0]
 c003926:	1d19      	adds	r1, r3, #4
 c003928:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c00392c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 c003930:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003934:	9300      	str	r3, [sp, #0]
 c003936:	460b      	mov	r3, r1
 c003938:	68f9      	ldr	r1, [r7, #12]
 c00393a:	f7ff fc4b 	bl	c0031d4 <uECC_vli_modSub>

    uECC_vli_set(X1, Z1, num_words);
 c00393e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003942:	461a      	mov	r2, r3
 c003944:	6879      	ldr	r1, [r7, #4]
 c003946:	68f8      	ldr	r0, [r7, #12]
 c003948:	f7ff fb5e 	bl	c003008 <uECC_vli_set>
    uECC_vli_set(Z1, Y1, num_words);
 c00394c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003950:	461a      	mov	r2, r3
 c003952:	68b9      	ldr	r1, [r7, #8]
 c003954:	6878      	ldr	r0, [r7, #4]
 c003956:	f7ff fb57 	bl	c003008 <uECC_vli_set>
    uECC_vli_set(Y1, t4, num_words);
 c00395a:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 c00395e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 c003962:	4619      	mov	r1, r3
 c003964:	68b8      	ldr	r0, [r7, #8]
 c003966:	f7ff fb4f 	bl	c003008 <uECC_vli_set>
 c00396a:	e000      	b.n	c00396e <double_jacobian_default+0x1f8>
        return;
 c00396c:	bf00      	nop
}
 c00396e:	3758      	adds	r7, #88	; 0x58
 c003970:	46bd      	mov	sp, r7
 c003972:	bd80      	pop	{r7, pc}

0c003974 <x_side_default>:

/* Computes result = x^3 + ax + b. result must not overlap x. */
static void x_side_default(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve) {
 c003974:	b580      	push	{r7, lr}
 c003976:	b090      	sub	sp, #64	; 0x40
 c003978:	af02      	add	r7, sp, #8
 c00397a:	60f8      	str	r0, [r7, #12]
 c00397c:	60b9      	str	r1, [r7, #8]
 c00397e:	607a      	str	r2, [r7, #4]
    uECC_word_t _3[uECC_MAX_WORDS] = {3}; /* -a = 3 */
 c003980:	f107 0314 	add.w	r3, r7, #20
 c003984:	2220      	movs	r2, #32
 c003986:	2100      	movs	r1, #0
 c003988:	4618      	mov	r0, r3
 c00398a:	f005 fc50 	bl	c00922e <memset>
 c00398e:	2303      	movs	r3, #3
 c003990:	617b      	str	r3, [r7, #20]
    wordcount_t num_words = curve->num_words;
 c003992:	687b      	ldr	r3, [r7, #4]
 c003994:	781b      	ldrb	r3, [r3, #0]
 c003996:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    uECC_vli_modSquare_fast(result, x, curve);                             /* r = x^2 */
 c00399a:	687a      	ldr	r2, [r7, #4]
 c00399c:	68b9      	ldr	r1, [r7, #8]
 c00399e:	68f8      	ldr	r0, [r7, #12]
 c0039a0:	f7ff fda8 	bl	c0034f4 <uECC_vli_modSquare_fast>
    uECC_vli_modSub(result, result, _3, curve->p, num_words);       /* r = x^2 - 3 */
 c0039a4:	687b      	ldr	r3, [r7, #4]
 c0039a6:	1d19      	adds	r1, r3, #4
 c0039a8:	f107 0214 	add.w	r2, r7, #20
 c0039ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c0039b0:	9300      	str	r3, [sp, #0]
 c0039b2:	460b      	mov	r3, r1
 c0039b4:	68f9      	ldr	r1, [r7, #12]
 c0039b6:	68f8      	ldr	r0, [r7, #12]
 c0039b8:	f7ff fc0c 	bl	c0031d4 <uECC_vli_modSub>
    uECC_vli_modMult_fast(result, result, x, curve);                       /* r = x^3 - 3x */
 c0039bc:	687b      	ldr	r3, [r7, #4]
 c0039be:	68ba      	ldr	r2, [r7, #8]
 c0039c0:	68f9      	ldr	r1, [r7, #12]
 c0039c2:	68f8      	ldr	r0, [r7, #12]
 c0039c4:	f7ff fd7a 	bl	c0034bc <uECC_vli_modMult_fast>
    uECC_vli_modAdd(result, result, curve->b, curve->p, num_words); /* r = x^3 - 3x + b */
 c0039c8:	687b      	ldr	r3, [r7, #4]
 c0039ca:	f103 0284 	add.w	r2, r3, #132	; 0x84
 c0039ce:	687b      	ldr	r3, [r7, #4]
 c0039d0:	1d19      	adds	r1, r3, #4
 c0039d2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c0039d6:	9300      	str	r3, [sp, #0]
 c0039d8:	460b      	mov	r3, r1
 c0039da:	68f9      	ldr	r1, [r7, #12]
 c0039dc:	68f8      	ldr	r0, [r7, #12]
 c0039de:	f7ff fbd2 	bl	c003186 <uECC_vli_modAdd>
}
 c0039e2:	bf00      	nop
 c0039e4:	3738      	adds	r7, #56	; 0x38
 c0039e6:	46bd      	mov	sp, r7
 c0039e8:	bd80      	pop	{r7, pc}

0c0039ea <mod_sqrt_default>:

#if uECC_SUPPORT_COMPRESSED_POINT
#if uECC_SUPPORTS_secp160r1 || uECC_SUPPORTS_secp192r1 || \
    uECC_SUPPORTS_secp256r1 || uECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
 c0039ea:	b580      	push	{r7, lr}
 c0039ec:	b094      	sub	sp, #80	; 0x50
 c0039ee:	af00      	add	r7, sp, #0
 c0039f0:	6078      	str	r0, [r7, #4]
 c0039f2:	6039      	str	r1, [r7, #0]
    bitcount_t i;
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
 c0039f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c0039f8:	2220      	movs	r2, #32
 c0039fa:	2100      	movs	r1, #0
 c0039fc:	4618      	mov	r0, r3
 c0039fe:	f005 fc16 	bl	c00922e <memset>
 c003a02:	2301      	movs	r3, #1
 c003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 c003a06:	f107 030c 	add.w	r3, r7, #12
 c003a0a:	2220      	movs	r2, #32
 c003a0c:	2100      	movs	r1, #0
 c003a0e:	4618      	mov	r0, r3
 c003a10:	f005 fc0d 	bl	c00922e <memset>
 c003a14:	2301      	movs	r3, #1
 c003a16:	60fb      	str	r3, [r7, #12]
    wordcount_t num_words = curve->num_words;
 c003a18:	683b      	ldr	r3, [r7, #0]
 c003a1a:	781b      	ldrb	r3, [r3, #0]
 c003a1c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    
    /* When curve->p == 3 (mod 4), we can compute
       sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 c003a20:	683b      	ldr	r3, [r7, #0]
 c003a22:	1d19      	adds	r1, r3, #4
 c003a24:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 c003a28:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 c003a2c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 c003a30:	f7ff f93e 	bl	c002cb0 <uECC_vli_add>
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 c003a34:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 c003a38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c003a3c:	4611      	mov	r1, r2
 c003a3e:	4618      	mov	r0, r3
 c003a40:	f7ff faa8 	bl	c002f94 <uECC_vli_numBits>
 c003a44:	4603      	mov	r3, r0
 c003a46:	b29b      	uxth	r3, r3
 c003a48:	3b01      	subs	r3, #1
 c003a4a:	b29b      	uxth	r3, r3
 c003a4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 c003a50:	e020      	b.n	c003a94 <mod_sqrt_default+0xaa>
        uECC_vli_modSquare_fast(l_result, l_result, curve);
 c003a52:	f107 010c 	add.w	r1, r7, #12
 c003a56:	f107 030c 	add.w	r3, r7, #12
 c003a5a:	683a      	ldr	r2, [r7, #0]
 c003a5c:	4618      	mov	r0, r3
 c003a5e:	f7ff fd49 	bl	c0034f4 <uECC_vli_modSquare_fast>
        if (uECC_vli_testBit(p1, i)) {
 c003a62:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 c003a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c003a6a:	4611      	mov	r1, r2
 c003a6c:	4618      	mov	r0, r3
 c003a6e:	f7ff fa51 	bl	c002f14 <uECC_vli_testBit>
 c003a72:	4603      	mov	r3, r0
 c003a74:	2b00      	cmp	r3, #0
 c003a76:	d007      	beq.n	c003a88 <mod_sqrt_default+0x9e>
            uECC_vli_modMult_fast(l_result, l_result, a, curve);
 c003a78:	f107 010c 	add.w	r1, r7, #12
 c003a7c:	f107 000c 	add.w	r0, r7, #12
 c003a80:	683b      	ldr	r3, [r7, #0]
 c003a82:	687a      	ldr	r2, [r7, #4]
 c003a84:	f7ff fd1a 	bl	c0034bc <uECC_vli_modMult_fast>
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 c003a88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 c003a8c:	3b01      	subs	r3, #1
 c003a8e:	b29b      	uxth	r3, r3
 c003a90:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 c003a94:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 c003a98:	2b01      	cmp	r3, #1
 c003a9a:	dcda      	bgt.n	c003a52 <mod_sqrt_default+0x68>
        }
    }
    uECC_vli_set(a, l_result, num_words);
 c003a9c:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 c003aa0:	f107 030c 	add.w	r3, r7, #12
 c003aa4:	4619      	mov	r1, r3
 c003aa6:	6878      	ldr	r0, [r7, #4]
 c003aa8:	f7ff faae 	bl	c003008 <uECC_vli_set>
}
 c003aac:	bf00      	nop
 c003aae:	3750      	adds	r7, #80	; 0x50
 c003ab0:	46bd      	mov	sp, r7
 c003ab2:	bd80      	pop	{r7, pc}

0c003ab4 <uECC_secp256r1>:
#if (uECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp256r1
#endif
};

uECC_Curve uECC_secp256r1(void) { return &curve_secp256r1; }
 c003ab4:	b480      	push	{r7}
 c003ab6:	af00      	add	r7, sp, #0
 c003ab8:	4b02      	ldr	r3, [pc, #8]	; (c003ac4 <uECC_secp256r1+0x10>)
 c003aba:	4618      	mov	r0, r3
 c003abc:	46bd      	mov	sp, r7
 c003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003ac2:	4770      	bx	lr
 c003ac4:	0c0092e0 	.word	0x0c0092e0

0c003ac8 <vli_mmod_fast_secp256r1>:
            carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
        }
    }
}
#elif uECC_WORD_SIZE == 4
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 c003ac8:	b580      	push	{r7, lr}
 c003aca:	b08c      	sub	sp, #48	; 0x30
 c003acc:	af00      	add	r7, sp, #0
 c003ace:	6078      	str	r0, [r7, #4]
 c003ad0:	6039      	str	r1, [r7, #0]
    uint32_t tmp[num_words_secp256r1];
    int carry;
    
    /* t */
    uECC_vli_set(result, product, num_words_secp256r1);
 c003ad2:	2208      	movs	r2, #8
 c003ad4:	6839      	ldr	r1, [r7, #0]
 c003ad6:	6878      	ldr	r0, [r7, #4]
 c003ad8:	f7ff fa96 	bl	c003008 <uECC_vli_set>
    
    /* s1 */
    tmp[0] = tmp[1] = tmp[2] = 0;
 c003adc:	2300      	movs	r3, #0
 c003ade:	617b      	str	r3, [r7, #20]
 c003ae0:	697b      	ldr	r3, [r7, #20]
 c003ae2:	613b      	str	r3, [r7, #16]
 c003ae4:	693b      	ldr	r3, [r7, #16]
 c003ae6:	60fb      	str	r3, [r7, #12]
    tmp[3] = product[11];
 c003ae8:	683b      	ldr	r3, [r7, #0]
 c003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003aec:	61bb      	str	r3, [r7, #24]
    tmp[4] = product[12];
 c003aee:	683b      	ldr	r3, [r7, #0]
 c003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c003af2:	61fb      	str	r3, [r7, #28]
    tmp[5] = product[13];
 c003af4:	683b      	ldr	r3, [r7, #0]
 c003af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003af8:	623b      	str	r3, [r7, #32]
    tmp[6] = product[14];
 c003afa:	683b      	ldr	r3, [r7, #0]
 c003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003afe:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[15];
 c003b00:	683b      	ldr	r3, [r7, #0]
 c003b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003b04:	62bb      	str	r3, [r7, #40]	; 0x28
    carry = uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 c003b06:	f107 020c 	add.w	r2, r7, #12
 c003b0a:	f107 010c 	add.w	r1, r7, #12
 c003b0e:	f107 000c 	add.w	r0, r7, #12
 c003b12:	2308      	movs	r3, #8
 c003b14:	f7ff f8cc 	bl	c002cb0 <uECC_vli_add>
 c003b18:	4603      	mov	r3, r0
 c003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 c003b1c:	f107 020c 	add.w	r2, r7, #12
 c003b20:	2308      	movs	r3, #8
 c003b22:	6879      	ldr	r1, [r7, #4]
 c003b24:	6878      	ldr	r0, [r7, #4]
 c003b26:	f7ff f8c3 	bl	c002cb0 <uECC_vli_add>
 c003b2a:	4602      	mov	r2, r0
 c003b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003b2e:	4413      	add	r3, r2
 c003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* s2 */
    tmp[3] = product[12];
 c003b32:	683b      	ldr	r3, [r7, #0]
 c003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c003b36:	61bb      	str	r3, [r7, #24]
    tmp[4] = product[13];
 c003b38:	683b      	ldr	r3, [r7, #0]
 c003b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003b3c:	61fb      	str	r3, [r7, #28]
    tmp[5] = product[14];
 c003b3e:	683b      	ldr	r3, [r7, #0]
 c003b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003b42:	623b      	str	r3, [r7, #32]
    tmp[6] = product[15];
 c003b44:	683b      	ldr	r3, [r7, #0]
 c003b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003b48:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = 0;
 c003b4a:	2300      	movs	r3, #0
 c003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 c003b4e:	f107 020c 	add.w	r2, r7, #12
 c003b52:	f107 010c 	add.w	r1, r7, #12
 c003b56:	f107 000c 	add.w	r0, r7, #12
 c003b5a:	2308      	movs	r3, #8
 c003b5c:	f7ff f8a8 	bl	c002cb0 <uECC_vli_add>
 c003b60:	4602      	mov	r2, r0
 c003b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003b64:	4413      	add	r3, r2
 c003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 c003b68:	f107 020c 	add.w	r2, r7, #12
 c003b6c:	2308      	movs	r3, #8
 c003b6e:	6879      	ldr	r1, [r7, #4]
 c003b70:	6878      	ldr	r0, [r7, #4]
 c003b72:	f7ff f89d 	bl	c002cb0 <uECC_vli_add>
 c003b76:	4602      	mov	r2, r0
 c003b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003b7a:	4413      	add	r3, r2
 c003b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* s3 */
    tmp[0] = product[8];
 c003b7e:	683b      	ldr	r3, [r7, #0]
 c003b80:	6a1b      	ldr	r3, [r3, #32]
 c003b82:	60fb      	str	r3, [r7, #12]
    tmp[1] = product[9];
 c003b84:	683b      	ldr	r3, [r7, #0]
 c003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003b88:	613b      	str	r3, [r7, #16]
    tmp[2] = product[10];
 c003b8a:	683b      	ldr	r3, [r7, #0]
 c003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003b8e:	617b      	str	r3, [r7, #20]
    tmp[3] = tmp[4] = tmp[5] = 0;
 c003b90:	2300      	movs	r3, #0
 c003b92:	623b      	str	r3, [r7, #32]
 c003b94:	6a3b      	ldr	r3, [r7, #32]
 c003b96:	61fb      	str	r3, [r7, #28]
 c003b98:	69fb      	ldr	r3, [r7, #28]
 c003b9a:	61bb      	str	r3, [r7, #24]
    tmp[6] = product[14];
 c003b9c:	683b      	ldr	r3, [r7, #0]
 c003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003ba0:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[15];
 c003ba2:	683b      	ldr	r3, [r7, #0]
 c003ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 c003ba8:	f107 020c 	add.w	r2, r7, #12
 c003bac:	2308      	movs	r3, #8
 c003bae:	6879      	ldr	r1, [r7, #4]
 c003bb0:	6878      	ldr	r0, [r7, #4]
 c003bb2:	f7ff f87d 	bl	c002cb0 <uECC_vli_add>
 c003bb6:	4602      	mov	r2, r0
 c003bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003bba:	4413      	add	r3, r2
 c003bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* s4 */
    tmp[0] = product[9];
 c003bbe:	683b      	ldr	r3, [r7, #0]
 c003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003bc2:	60fb      	str	r3, [r7, #12]
    tmp[1] = product[10];
 c003bc4:	683b      	ldr	r3, [r7, #0]
 c003bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003bc8:	613b      	str	r3, [r7, #16]
    tmp[2] = product[11];
 c003bca:	683b      	ldr	r3, [r7, #0]
 c003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003bce:	617b      	str	r3, [r7, #20]
    tmp[3] = product[13];
 c003bd0:	683b      	ldr	r3, [r7, #0]
 c003bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003bd4:	61bb      	str	r3, [r7, #24]
    tmp[4] = product[14];
 c003bd6:	683b      	ldr	r3, [r7, #0]
 c003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003bda:	61fb      	str	r3, [r7, #28]
    tmp[5] = product[15];
 c003bdc:	683b      	ldr	r3, [r7, #0]
 c003bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003be0:	623b      	str	r3, [r7, #32]
    tmp[6] = product[13];
 c003be2:	683b      	ldr	r3, [r7, #0]
 c003be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003be6:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[8];
 c003be8:	683b      	ldr	r3, [r7, #0]
 c003bea:	6a1b      	ldr	r3, [r3, #32]
 c003bec:	62bb      	str	r3, [r7, #40]	; 0x28
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 c003bee:	f107 020c 	add.w	r2, r7, #12
 c003bf2:	2308      	movs	r3, #8
 c003bf4:	6879      	ldr	r1, [r7, #4]
 c003bf6:	6878      	ldr	r0, [r7, #4]
 c003bf8:	f7ff f85a 	bl	c002cb0 <uECC_vli_add>
 c003bfc:	4602      	mov	r2, r0
 c003bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003c00:	4413      	add	r3, r2
 c003c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* d1 */
    tmp[0] = product[11];
 c003c04:	683b      	ldr	r3, [r7, #0]
 c003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003c08:	60fb      	str	r3, [r7, #12]
    tmp[1] = product[12];
 c003c0a:	683b      	ldr	r3, [r7, #0]
 c003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c003c0e:	613b      	str	r3, [r7, #16]
    tmp[2] = product[13];
 c003c10:	683b      	ldr	r3, [r7, #0]
 c003c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003c14:	617b      	str	r3, [r7, #20]
    tmp[3] = tmp[4] = tmp[5] = 0;
 c003c16:	2300      	movs	r3, #0
 c003c18:	623b      	str	r3, [r7, #32]
 c003c1a:	6a3b      	ldr	r3, [r7, #32]
 c003c1c:	61fb      	str	r3, [r7, #28]
 c003c1e:	69fb      	ldr	r3, [r7, #28]
 c003c20:	61bb      	str	r3, [r7, #24]
    tmp[6] = product[8];
 c003c22:	683b      	ldr	r3, [r7, #0]
 c003c24:	6a1b      	ldr	r3, [r3, #32]
 c003c26:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[10];
 c003c28:	683b      	ldr	r3, [r7, #0]
 c003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 c003c2e:	f107 020c 	add.w	r2, r7, #12
 c003c32:	2308      	movs	r3, #8
 c003c34:	6879      	ldr	r1, [r7, #4]
 c003c36:	6878      	ldr	r0, [r7, #4]
 c003c38:	f7ff f882 	bl	c002d40 <uECC_vli_sub>
 c003c3c:	4602      	mov	r2, r0
 c003c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003c40:	1a9b      	subs	r3, r3, r2
 c003c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* d2 */
    tmp[0] = product[12];
 c003c44:	683b      	ldr	r3, [r7, #0]
 c003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c003c48:	60fb      	str	r3, [r7, #12]
    tmp[1] = product[13];
 c003c4a:	683b      	ldr	r3, [r7, #0]
 c003c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003c4e:	613b      	str	r3, [r7, #16]
    tmp[2] = product[14];
 c003c50:	683b      	ldr	r3, [r7, #0]
 c003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003c54:	617b      	str	r3, [r7, #20]
    tmp[3] = product[15];
 c003c56:	683b      	ldr	r3, [r7, #0]
 c003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003c5a:	61bb      	str	r3, [r7, #24]
    tmp[4] = tmp[5] = 0;
 c003c5c:	2300      	movs	r3, #0
 c003c5e:	623b      	str	r3, [r7, #32]
 c003c60:	6a3b      	ldr	r3, [r7, #32]
 c003c62:	61fb      	str	r3, [r7, #28]
    tmp[6] = product[9];
 c003c64:	683b      	ldr	r3, [r7, #0]
 c003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003c68:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[11];
 c003c6a:	683b      	ldr	r3, [r7, #0]
 c003c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 c003c70:	f107 020c 	add.w	r2, r7, #12
 c003c74:	2308      	movs	r3, #8
 c003c76:	6879      	ldr	r1, [r7, #4]
 c003c78:	6878      	ldr	r0, [r7, #4]
 c003c7a:	f7ff f861 	bl	c002d40 <uECC_vli_sub>
 c003c7e:	4602      	mov	r2, r0
 c003c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003c82:	1a9b      	subs	r3, r3, r2
 c003c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* d3 */
    tmp[0] = product[13];
 c003c86:	683b      	ldr	r3, [r7, #0]
 c003c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003c8a:	60fb      	str	r3, [r7, #12]
    tmp[1] = product[14];
 c003c8c:	683b      	ldr	r3, [r7, #0]
 c003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003c90:	613b      	str	r3, [r7, #16]
    tmp[2] = product[15];
 c003c92:	683b      	ldr	r3, [r7, #0]
 c003c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003c96:	617b      	str	r3, [r7, #20]
    tmp[3] = product[8];
 c003c98:	683b      	ldr	r3, [r7, #0]
 c003c9a:	6a1b      	ldr	r3, [r3, #32]
 c003c9c:	61bb      	str	r3, [r7, #24]
    tmp[4] = product[9];
 c003c9e:	683b      	ldr	r3, [r7, #0]
 c003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003ca2:	61fb      	str	r3, [r7, #28]
    tmp[5] = product[10];
 c003ca4:	683b      	ldr	r3, [r7, #0]
 c003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003ca8:	623b      	str	r3, [r7, #32]
    tmp[6] = 0;
 c003caa:	2300      	movs	r3, #0
 c003cac:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[12];
 c003cae:	683b      	ldr	r3, [r7, #0]
 c003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c003cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 c003cb4:	f107 020c 	add.w	r2, r7, #12
 c003cb8:	2308      	movs	r3, #8
 c003cba:	6879      	ldr	r1, [r7, #4]
 c003cbc:	6878      	ldr	r0, [r7, #4]
 c003cbe:	f7ff f83f 	bl	c002d40 <uECC_vli_sub>
 c003cc2:	4602      	mov	r2, r0
 c003cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003cc6:	1a9b      	subs	r3, r3, r2
 c003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* d4 */
    tmp[0] = product[14];
 c003cca:	683b      	ldr	r3, [r7, #0]
 c003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003cce:	60fb      	str	r3, [r7, #12]
    tmp[1] = product[15];
 c003cd0:	683b      	ldr	r3, [r7, #0]
 c003cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003cd4:	613b      	str	r3, [r7, #16]
    tmp[2] = 0;
 c003cd6:	2300      	movs	r3, #0
 c003cd8:	617b      	str	r3, [r7, #20]
    tmp[3] = product[9];
 c003cda:	683b      	ldr	r3, [r7, #0]
 c003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003cde:	61bb      	str	r3, [r7, #24]
    tmp[4] = product[10];
 c003ce0:	683b      	ldr	r3, [r7, #0]
 c003ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003ce4:	61fb      	str	r3, [r7, #28]
    tmp[5] = product[11];
 c003ce6:	683b      	ldr	r3, [r7, #0]
 c003ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003cea:	623b      	str	r3, [r7, #32]
    tmp[6] = 0;
 c003cec:	2300      	movs	r3, #0
 c003cee:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[13];
 c003cf0:	683b      	ldr	r3, [r7, #0]
 c003cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 c003cf6:	f107 020c 	add.w	r2, r7, #12
 c003cfa:	2308      	movs	r3, #8
 c003cfc:	6879      	ldr	r1, [r7, #4]
 c003cfe:	6878      	ldr	r0, [r7, #4]
 c003d00:	f7ff f81e 	bl	c002d40 <uECC_vli_sub>
 c003d04:	4602      	mov	r2, r0
 c003d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003d08:	1a9b      	subs	r3, r3, r2
 c003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (carry < 0) {
 c003d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003d0e:	2b00      	cmp	r3, #0
 c003d10:	da17      	bge.n	c003d42 <vli_mmod_fast_secp256r1+0x27a>
        do {
            carry += uECC_vli_add(result, result, curve_secp256r1.p, num_words_secp256r1);
 c003d12:	2308      	movs	r3, #8
 c003d14:	4a12      	ldr	r2, [pc, #72]	; (c003d60 <vli_mmod_fast_secp256r1+0x298>)
 c003d16:	6879      	ldr	r1, [r7, #4]
 c003d18:	6878      	ldr	r0, [r7, #4]
 c003d1a:	f7fe ffc9 	bl	c002cb0 <uECC_vli_add>
 c003d1e:	4602      	mov	r2, r0
 c003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003d22:	4413      	add	r3, r2
 c003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
        } while (carry < 0);
 c003d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003d28:	2b00      	cmp	r3, #0
 c003d2a:	dbf2      	blt.n	c003d12 <vli_mmod_fast_secp256r1+0x24a>
    } else {
        while (carry || uECC_vli_cmp_unsafe(curve_secp256r1.p, result, num_words_secp256r1) != 1) {
            carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
        }
    }
}
 c003d2c:	e014      	b.n	c003d58 <vli_mmod_fast_secp256r1+0x290>
            carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
 c003d2e:	2308      	movs	r3, #8
 c003d30:	4a0b      	ldr	r2, [pc, #44]	; (c003d60 <vli_mmod_fast_secp256r1+0x298>)
 c003d32:	6879      	ldr	r1, [r7, #4]
 c003d34:	6878      	ldr	r0, [r7, #4]
 c003d36:	f7ff f803 	bl	c002d40 <uECC_vli_sub>
 c003d3a:	4602      	mov	r2, r0
 c003d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003d3e:	1a9b      	subs	r3, r3, r2
 c003d40:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (carry || uECC_vli_cmp_unsafe(curve_secp256r1.p, result, num_words_secp256r1) != 1) {
 c003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003d44:	2b00      	cmp	r3, #0
 c003d46:	d1f2      	bne.n	c003d2e <vli_mmod_fast_secp256r1+0x266>
 c003d48:	2208      	movs	r2, #8
 c003d4a:	6879      	ldr	r1, [r7, #4]
 c003d4c:	4804      	ldr	r0, [pc, #16]	; (c003d60 <vli_mmod_fast_secp256r1+0x298>)
 c003d4e:	f7ff f982 	bl	c003056 <uECC_vli_cmp_unsafe>
 c003d52:	4603      	mov	r3, r0
 c003d54:	2b01      	cmp	r3, #1
 c003d56:	d1ea      	bne.n	c003d2e <vli_mmod_fast_secp256r1+0x266>
}
 c003d58:	bf00      	nop
 c003d5a:	3730      	adds	r7, #48	; 0x30
 c003d5c:	46bd      	mov	sp, r7
 c003d5e:	bd80      	pop	{r7, pc}
 c003d60:	0c0092e4 	.word	0x0c0092e4

0c003d64 <apply_z>:

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(uECC_word_t * X1,
                    uECC_word_t * Y1,
                    const uECC_word_t * const Z,
                    uECC_Curve curve) {
 c003d64:	b580      	push	{r7, lr}
 c003d66:	b08c      	sub	sp, #48	; 0x30
 c003d68:	af00      	add	r7, sp, #0
 c003d6a:	60f8      	str	r0, [r7, #12]
 c003d6c:	60b9      	str	r1, [r7, #8]
 c003d6e:	607a      	str	r2, [r7, #4]
 c003d70:	603b      	str	r3, [r7, #0]
    uECC_word_t t1[uECC_MAX_WORDS];

    uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 c003d72:	f107 0310 	add.w	r3, r7, #16
 c003d76:	683a      	ldr	r2, [r7, #0]
 c003d78:	6879      	ldr	r1, [r7, #4]
 c003d7a:	4618      	mov	r0, r3
 c003d7c:	f7ff fbba 	bl	c0034f4 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 c003d80:	f107 0210 	add.w	r2, r7, #16
 c003d84:	683b      	ldr	r3, [r7, #0]
 c003d86:	68f9      	ldr	r1, [r7, #12]
 c003d88:	68f8      	ldr	r0, [r7, #12]
 c003d8a:	f7ff fb97 	bl	c0034bc <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 c003d8e:	f107 0110 	add.w	r1, r7, #16
 c003d92:	f107 0010 	add.w	r0, r7, #16
 c003d96:	683b      	ldr	r3, [r7, #0]
 c003d98:	687a      	ldr	r2, [r7, #4]
 c003d9a:	f7ff fb8f 	bl	c0034bc <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 c003d9e:	f107 0210 	add.w	r2, r7, #16
 c003da2:	683b      	ldr	r3, [r7, #0]
 c003da4:	68b9      	ldr	r1, [r7, #8]
 c003da6:	68b8      	ldr	r0, [r7, #8]
 c003da8:	f7ff fb88 	bl	c0034bc <uECC_vli_modMult_fast>
}
 c003dac:	bf00      	nop
 c003dae:	3730      	adds	r7, #48	; 0x30
 c003db0:	46bd      	mov	sp, r7
 c003db2:	bd80      	pop	{r7, pc}

0c003db4 <XYcZ_add>:
*/
static void XYcZ_add(uECC_word_t * X1,
                     uECC_word_t * Y1,
                     uECC_word_t * X2,
                     uECC_word_t * Y2,
                     uECC_Curve curve) {
 c003db4:	b580      	push	{r7, lr}
 c003db6:	b090      	sub	sp, #64	; 0x40
 c003db8:	af02      	add	r7, sp, #8
 c003dba:	60f8      	str	r0, [r7, #12]
 c003dbc:	60b9      	str	r1, [r7, #8]
 c003dbe:	607a      	str	r2, [r7, #4]
 c003dc0:	603b      	str	r3, [r7, #0]
    /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
    uECC_word_t t5[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
 c003dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003dc4:	781b      	ldrb	r3, [r3, #0]
 c003dc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 c003dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003dcc:	1d1a      	adds	r2, r3, #4
 c003dce:	f107 0014 	add.w	r0, r7, #20
 c003dd2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003dd6:	9300      	str	r3, [sp, #0]
 c003dd8:	4613      	mov	r3, r2
 c003dda:	68fa      	ldr	r2, [r7, #12]
 c003ddc:	6879      	ldr	r1, [r7, #4]
 c003dde:	f7ff f9f9 	bl	c0031d4 <uECC_vli_modSub>
    uECC_vli_modSquare_fast(t5, t5, curve);                  /* t5 = (x2 - x1)^2 = A */
 c003de2:	f107 0114 	add.w	r1, r7, #20
 c003de6:	f107 0314 	add.w	r3, r7, #20
 c003dea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 c003dec:	4618      	mov	r0, r3
 c003dee:	f7ff fb81 	bl	c0034f4 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = x1*A = B */
 c003df2:	f107 0214 	add.w	r2, r7, #20
 c003df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003df8:	68f9      	ldr	r1, [r7, #12]
 c003dfa:	68f8      	ldr	r0, [r7, #12]
 c003dfc:	f7ff fb5e 	bl	c0034bc <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(X2, X2, t5, curve);                /* t3 = x2*A = C */
 c003e00:	f107 0214 	add.w	r2, r7, #20
 c003e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003e06:	6879      	ldr	r1, [r7, #4]
 c003e08:	6878      	ldr	r0, [r7, #4]
 c003e0a:	f7ff fb57 	bl	c0034bc <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 c003e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003e10:	1d1a      	adds	r2, r3, #4
 c003e12:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003e16:	9300      	str	r3, [sp, #0]
 c003e18:	4613      	mov	r3, r2
 c003e1a:	68ba      	ldr	r2, [r7, #8]
 c003e1c:	6839      	ldr	r1, [r7, #0]
 c003e1e:	6838      	ldr	r0, [r7, #0]
 c003e20:	f7ff f9d8 	bl	c0031d4 <uECC_vli_modSub>
    uECC_vli_modSquare_fast(t5, Y2, curve);                  /* t5 = (y2 - y1)^2 = D */
 c003e24:	f107 0314 	add.w	r3, r7, #20
 c003e28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 c003e2a:	6839      	ldr	r1, [r7, #0]
 c003e2c:	4618      	mov	r0, r3
 c003e2e:	f7ff fb61 	bl	c0034f4 <uECC_vli_modSquare_fast>

    uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 c003e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003e34:	1d1a      	adds	r2, r3, #4
 c003e36:	f107 0114 	add.w	r1, r7, #20
 c003e3a:	f107 0014 	add.w	r0, r7, #20
 c003e3e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003e42:	9300      	str	r3, [sp, #0]
 c003e44:	4613      	mov	r3, r2
 c003e46:	68fa      	ldr	r2, [r7, #12]
 c003e48:	f7ff f9c4 	bl	c0031d4 <uECC_vli_modSub>
    uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 c003e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003e4e:	1d1a      	adds	r2, r3, #4
 c003e50:	f107 0114 	add.w	r1, r7, #20
 c003e54:	f107 0014 	add.w	r0, r7, #20
 c003e58:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003e5c:	9300      	str	r3, [sp, #0]
 c003e5e:	4613      	mov	r3, r2
 c003e60:	687a      	ldr	r2, [r7, #4]
 c003e62:	f7ff f9b7 	bl	c0031d4 <uECC_vli_modSub>
    uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 c003e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003e68:	1d1a      	adds	r2, r3, #4
 c003e6a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003e6e:	9300      	str	r3, [sp, #0]
 c003e70:	4613      	mov	r3, r2
 c003e72:	68fa      	ldr	r2, [r7, #12]
 c003e74:	6879      	ldr	r1, [r7, #4]
 c003e76:	6878      	ldr	r0, [r7, #4]
 c003e78:	f7ff f9ac 	bl	c0031d4 <uECC_vli_modSub>
    uECC_vli_modMult_fast(Y1, Y1, X2, curve);                /* t2 = y1*(C - B) */
 c003e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003e7e:	687a      	ldr	r2, [r7, #4]
 c003e80:	68b9      	ldr	r1, [r7, #8]
 c003e82:	68b8      	ldr	r0, [r7, #8]
 c003e84:	f7ff fb1a 	bl	c0034bc <uECC_vli_modMult_fast>
    uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 c003e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003e8a:	1d19      	adds	r1, r3, #4
 c003e8c:	f107 0214 	add.w	r2, r7, #20
 c003e90:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003e94:	9300      	str	r3, [sp, #0]
 c003e96:	460b      	mov	r3, r1
 c003e98:	68f9      	ldr	r1, [r7, #12]
 c003e9a:	6878      	ldr	r0, [r7, #4]
 c003e9c:	f7ff f99a 	bl	c0031d4 <uECC_vli_modSub>
    uECC_vli_modMult_fast(Y2, Y2, X2, curve);                /* t4 = (y2 - y1)*(B - x3) */
 c003ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003ea2:	687a      	ldr	r2, [r7, #4]
 c003ea4:	6839      	ldr	r1, [r7, #0]
 c003ea6:	6838      	ldr	r0, [r7, #0]
 c003ea8:	f7ff fb08 	bl	c0034bc <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 c003eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003eae:	1d1a      	adds	r2, r3, #4
 c003eb0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003eb4:	9300      	str	r3, [sp, #0]
 c003eb6:	4613      	mov	r3, r2
 c003eb8:	68ba      	ldr	r2, [r7, #8]
 c003eba:	6839      	ldr	r1, [r7, #0]
 c003ebc:	6838      	ldr	r0, [r7, #0]
 c003ebe:	f7ff f989 	bl	c0031d4 <uECC_vli_modSub>

    uECC_vli_set(X2, t5, num_words);
 c003ec2:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 c003ec6:	f107 0314 	add.w	r3, r7, #20
 c003eca:	4619      	mov	r1, r3
 c003ecc:	6878      	ldr	r0, [r7, #4]
 c003ece:	f7ff f89b 	bl	c003008 <uECC_vli_set>
}
 c003ed2:	bf00      	nop
 c003ed4:	3738      	adds	r7, #56	; 0x38
 c003ed6:	46bd      	mov	sp, r7
 c003ed8:	bd80      	pop	{r7, pc}

0c003eda <uECC_vli_bytesToNative>:
    }
}

uECC_VLI_API void uECC_vli_bytesToNative(uECC_word_t *native,
                                         const uint8_t *bytes,
                                         int num_bytes) {
 c003eda:	b580      	push	{r7, lr}
 c003edc:	b086      	sub	sp, #24
 c003ede:	af00      	add	r7, sp, #0
 c003ee0:	60f8      	str	r0, [r7, #12]
 c003ee2:	60b9      	str	r1, [r7, #8]
 c003ee4:	607a      	str	r2, [r7, #4]
    int i;
    uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 c003ee6:	687b      	ldr	r3, [r7, #4]
 c003ee8:	3303      	adds	r3, #3
 c003eea:	2b00      	cmp	r3, #0
 c003eec:	da00      	bge.n	c003ef0 <uECC_vli_bytesToNative+0x16>
 c003eee:	3303      	adds	r3, #3
 c003ef0:	109b      	asrs	r3, r3, #2
 c003ef2:	b25b      	sxtb	r3, r3
 c003ef4:	4619      	mov	r1, r3
 c003ef6:	68f8      	ldr	r0, [r7, #12]
 c003ef8:	f7fe ffc1 	bl	c002e7e <uECC_vli_clear>
    for (i = 0; i < num_bytes; ++i) {
 c003efc:	2300      	movs	r3, #0
 c003efe:	617b      	str	r3, [r7, #20]
 c003f00:	e01e      	b.n	c003f40 <uECC_vli_bytesToNative+0x66>
        unsigned b = num_bytes - 1 - i;
 c003f02:	687b      	ldr	r3, [r7, #4]
 c003f04:	1e5a      	subs	r2, r3, #1
 c003f06:	697b      	ldr	r3, [r7, #20]
 c003f08:	1ad3      	subs	r3, r2, r3
 c003f0a:	613b      	str	r3, [r7, #16]
        native[b / uECC_WORD_SIZE] |=
 c003f0c:	693b      	ldr	r3, [r7, #16]
 c003f0e:	f023 0303 	bic.w	r3, r3, #3
 c003f12:	68fa      	ldr	r2, [r7, #12]
 c003f14:	4413      	add	r3, r2
 c003f16:	6819      	ldr	r1, [r3, #0]
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
 c003f18:	697b      	ldr	r3, [r7, #20]
 c003f1a:	68ba      	ldr	r2, [r7, #8]
 c003f1c:	4413      	add	r3, r2
 c003f1e:	781b      	ldrb	r3, [r3, #0]
 c003f20:	461a      	mov	r2, r3
 c003f22:	693b      	ldr	r3, [r7, #16]
 c003f24:	f003 0303 	and.w	r3, r3, #3
 c003f28:	00db      	lsls	r3, r3, #3
 c003f2a:	409a      	lsls	r2, r3
        native[b / uECC_WORD_SIZE] |=
 c003f2c:	693b      	ldr	r3, [r7, #16]
 c003f2e:	f023 0303 	bic.w	r3, r3, #3
 c003f32:	68f8      	ldr	r0, [r7, #12]
 c003f34:	4403      	add	r3, r0
 c003f36:	430a      	orrs	r2, r1
 c003f38:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_bytes; ++i) {
 c003f3a:	697b      	ldr	r3, [r7, #20]
 c003f3c:	3301      	adds	r3, #1
 c003f3e:	617b      	str	r3, [r7, #20]
 c003f40:	697a      	ldr	r2, [r7, #20]
 c003f42:	687b      	ldr	r3, [r7, #4]
 c003f44:	429a      	cmp	r2, r3
 c003f46:	dbdc      	blt.n	c003f02 <uECC_vli_bytesToNative+0x28>
    }
}
 c003f48:	bf00      	nop
 c003f4a:	bf00      	nop
 c003f4c:	3718      	adds	r7, #24
 c003f4e:	46bd      	mov	sp, r7
 c003f50:	bd80      	pop	{r7, pc}

0c003f52 <bits2int>:
/* -------- ECDSA code -------- */

static void bits2int(uECC_word_t *native,
                     const uint8_t *bits,
                     unsigned bits_size,
                     uECC_Curve curve) {
 c003f52:	b580      	push	{r7, lr}
 c003f54:	b08a      	sub	sp, #40	; 0x28
 c003f56:	af00      	add	r7, sp, #0
 c003f58:	60f8      	str	r0, [r7, #12]
 c003f5a:	60b9      	str	r1, [r7, #8]
 c003f5c:	607a      	str	r2, [r7, #4]
 c003f5e:	603b      	str	r3, [r7, #0]
    unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
 c003f60:	683b      	ldr	r3, [r7, #0]
 c003f62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c003f66:	3307      	adds	r3, #7
 c003f68:	2b00      	cmp	r3, #0
 c003f6a:	da00      	bge.n	c003f6e <bits2int+0x1c>
 c003f6c:	3307      	adds	r3, #7
 c003f6e:	10db      	asrs	r3, r3, #3
 c003f70:	61fb      	str	r3, [r7, #28]
    unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 c003f72:	683b      	ldr	r3, [r7, #0]
 c003f74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c003f78:	331f      	adds	r3, #31
 c003f7a:	2b00      	cmp	r3, #0
 c003f7c:	da00      	bge.n	c003f80 <bits2int+0x2e>
 c003f7e:	331f      	adds	r3, #31
 c003f80:	115b      	asrs	r3, r3, #5
 c003f82:	61bb      	str	r3, [r7, #24]
    int shift;
    uECC_word_t carry;
    uECC_word_t *ptr;

    if (bits_size > num_n_bytes) {
 c003f84:	687a      	ldr	r2, [r7, #4]
 c003f86:	69fb      	ldr	r3, [r7, #28]
 c003f88:	429a      	cmp	r2, r3
 c003f8a:	d901      	bls.n	c003f90 <bits2int+0x3e>
        bits_size = num_n_bytes;
 c003f8c:	69fb      	ldr	r3, [r7, #28]
 c003f8e:	607b      	str	r3, [r7, #4]
    }

    uECC_vli_clear(native, num_n_words);
 c003f90:	69bb      	ldr	r3, [r7, #24]
 c003f92:	b25b      	sxtb	r3, r3
 c003f94:	4619      	mov	r1, r3
 c003f96:	68f8      	ldr	r0, [r7, #12]
 c003f98:	f7fe ff71 	bl	c002e7e <uECC_vli_clear>
#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) native, bits, bits_size);
#else
    uECC_vli_bytesToNative(native, bits, bits_size);
 c003f9c:	687b      	ldr	r3, [r7, #4]
 c003f9e:	461a      	mov	r2, r3
 c003fa0:	68b9      	ldr	r1, [r7, #8]
 c003fa2:	68f8      	ldr	r0, [r7, #12]
 c003fa4:	f7ff ff99 	bl	c003eda <uECC_vli_bytesToNative>
#endif
    if (bits_size * 8 <= (unsigned)curve->num_n_bits) {
 c003fa8:	687b      	ldr	r3, [r7, #4]
 c003faa:	00db      	lsls	r3, r3, #3
 c003fac:	683a      	ldr	r2, [r7, #0]
 c003fae:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 c003fb2:	4293      	cmp	r3, r2
 c003fb4:	d93a      	bls.n	c00402c <bits2int+0xda>
        return;
    }
    shift = bits_size * 8 - curve->num_n_bits;
 c003fb6:	687b      	ldr	r3, [r7, #4]
 c003fb8:	00db      	lsls	r3, r3, #3
 c003fba:	683a      	ldr	r2, [r7, #0]
 c003fbc:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 c003fc0:	1a9b      	subs	r3, r3, r2
 c003fc2:	617b      	str	r3, [r7, #20]
    carry = 0;
 c003fc4:	2300      	movs	r3, #0
 c003fc6:	627b      	str	r3, [r7, #36]	; 0x24
    ptr = native + num_n_words;
 c003fc8:	69bb      	ldr	r3, [r7, #24]
 c003fca:	009b      	lsls	r3, r3, #2
 c003fcc:	68fa      	ldr	r2, [r7, #12]
 c003fce:	4413      	add	r3, r2
 c003fd0:	623b      	str	r3, [r7, #32]
    while (ptr-- > native) {
 c003fd2:	e010      	b.n	c003ff6 <bits2int+0xa4>
        uECC_word_t temp = *ptr;
 c003fd4:	6a3b      	ldr	r3, [r7, #32]
 c003fd6:	681b      	ldr	r3, [r3, #0]
 c003fd8:	613b      	str	r3, [r7, #16]
        *ptr = (temp >> shift) | carry;
 c003fda:	693a      	ldr	r2, [r7, #16]
 c003fdc:	697b      	ldr	r3, [r7, #20]
 c003fde:	40da      	lsrs	r2, r3
 c003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c003fe2:	431a      	orrs	r2, r3
 c003fe4:	6a3b      	ldr	r3, [r7, #32]
 c003fe6:	601a      	str	r2, [r3, #0]
        carry = temp << (uECC_WORD_BITS - shift);
 c003fe8:	697b      	ldr	r3, [r7, #20]
 c003fea:	f1c3 0320 	rsb	r3, r3, #32
 c003fee:	693a      	ldr	r2, [r7, #16]
 c003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 c003ff4:	627b      	str	r3, [r7, #36]	; 0x24
    while (ptr-- > native) {
 c003ff6:	6a3b      	ldr	r3, [r7, #32]
 c003ff8:	1f1a      	subs	r2, r3, #4
 c003ffa:	623a      	str	r2, [r7, #32]
 c003ffc:	68fa      	ldr	r2, [r7, #12]
 c003ffe:	429a      	cmp	r2, r3
 c004000:	d3e8      	bcc.n	c003fd4 <bits2int+0x82>
    }

    /* Reduce mod curve_n */
    if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {
 c004002:	683b      	ldr	r3, [r7, #0]
 c004004:	3324      	adds	r3, #36	; 0x24
 c004006:	69ba      	ldr	r2, [r7, #24]
 c004008:	b252      	sxtb	r2, r2
 c00400a:	68f9      	ldr	r1, [r7, #12]
 c00400c:	4618      	mov	r0, r3
 c00400e:	f7ff f822 	bl	c003056 <uECC_vli_cmp_unsafe>
 c004012:	4603      	mov	r3, r0
 c004014:	2b01      	cmp	r3, #1
 c004016:	d00a      	beq.n	c00402e <bits2int+0xdc>
        uECC_vli_sub(native, native, curve->n, num_n_words);
 c004018:	683b      	ldr	r3, [r7, #0]
 c00401a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 c00401e:	69bb      	ldr	r3, [r7, #24]
 c004020:	b25b      	sxtb	r3, r3
 c004022:	68f9      	ldr	r1, [r7, #12]
 c004024:	68f8      	ldr	r0, [r7, #12]
 c004026:	f7fe fe8b 	bl	c002d40 <uECC_vli_sub>
 c00402a:	e000      	b.n	c00402e <bits2int+0xdc>
        return;
 c00402c:	bf00      	nop
    }
}
 c00402e:	3728      	adds	r7, #40	; 0x28
 c004030:	46bd      	mov	sp, r7
 c004032:	bd80      	pop	{r7, pc}

0c004034 <smax>:
        update_V(hash_context, K, V);
    }
    return 0;
}

static bitcount_t smax(bitcount_t a, bitcount_t b) {
 c004034:	b480      	push	{r7}
 c004036:	b083      	sub	sp, #12
 c004038:	af00      	add	r7, sp, #0
 c00403a:	4603      	mov	r3, r0
 c00403c:	460a      	mov	r2, r1
 c00403e:	80fb      	strh	r3, [r7, #6]
 c004040:	4613      	mov	r3, r2
 c004042:	80bb      	strh	r3, [r7, #4]
    return (a > b ? a : b);
 c004044:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 c004048:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c00404c:	4293      	cmp	r3, r2
 c00404e:	bfb8      	it	lt
 c004050:	4613      	movlt	r3, r2
 c004052:	b21b      	sxth	r3, r3
}
 c004054:	4618      	mov	r0, r3
 c004056:	370c      	adds	r7, #12
 c004058:	46bd      	mov	sp, r7
 c00405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00405e:	4770      	bx	lr

0c004060 <uECC_verify>:

int uECC_verify(const uint8_t *public_key,
                const uint8_t *message_hash,
                unsigned hash_size,
                const uint8_t *signature,
                uECC_Curve curve) {
 c004060:	b590      	push	{r4, r7, lr}
 c004062:	b0ff      	sub	sp, #508	; 0x1fc
 c004064:	af02      	add	r7, sp, #8
 c004066:	f507 74f8 	add.w	r4, r7, #496	; 0x1f0
 c00406a:	f5a4 74f2 	sub.w	r4, r4, #484	; 0x1e4
 c00406e:	6020      	str	r0, [r4, #0]
 c004070:	f507 70f8 	add.w	r0, r7, #496	; 0x1f0
 c004074:	f5a0 70f4 	sub.w	r0, r0, #488	; 0x1e8
 c004078:	6001      	str	r1, [r0, #0]
 c00407a:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 c00407e:	f5a1 71f6 	sub.w	r1, r1, #492	; 0x1ec
 c004082:	600a      	str	r2, [r1, #0]
 c004084:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 c004088:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 c00408c:	6013      	str	r3, [r2, #0]
    uECC_word_t *_public = (uECC_word_t *)public_key;
#else
    uECC_word_t _public[uECC_MAX_WORDS * 2];
#endif
    uECC_word_t r[uECC_MAX_WORDS], s[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
 c00408e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004092:	781b      	ldrb	r3, [r3, #0]
 c004094:	f887 31ed 	strb.w	r3, [r7, #493]	; 0x1ed
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 c004098:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00409c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c0040a0:	331f      	adds	r3, #31
 c0040a2:	2b00      	cmp	r3, #0
 c0040a4:	da00      	bge.n	c0040a8 <uECC_verify+0x48>
 c0040a6:	331f      	adds	r3, #31
 c0040a8:	115b      	asrs	r3, r3, #5
 c0040aa:	f887 31ec 	strb.w	r3, [r7, #492]	; 0x1ec

    rx[num_n_words - 1] = 0;
 c0040ae:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c0040b2:	3b01      	subs	r3, #1
 c0040b4:	009b      	lsls	r3, r3, #2
 c0040b6:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 c0040ba:	443b      	add	r3, r7
 c0040bc:	2200      	movs	r2, #0
 c0040be:	f843 2cd0 	str.w	r2, [r3, #-208]
    r[num_n_words - 1] = 0;
 c0040c2:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c0040c6:	1e5a      	subs	r2, r3, #1
 c0040c8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c0040cc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 c0040d0:	2100      	movs	r1, #0
 c0040d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    s[num_n_words - 1] = 0;
 c0040d6:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c0040da:	1e5a      	subs	r2, r3, #1
 c0040dc:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c0040e0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 c0040e4:	2100      	movs	r1, #0
 c0040e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) r, signature, curve->num_bytes);
    bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
#else
    uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
 c0040ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0040ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c0040f2:	461a      	mov	r2, r3
 c0040f4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c0040f8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 c0040fc:	f107 0050 	add.w	r0, r7, #80	; 0x50
 c004100:	6819      	ldr	r1, [r3, #0]
 c004102:	f7ff feea 	bl	c003eda <uECC_vli_bytesToNative>
    uECC_vli_bytesToNative(
        _public + num_words, public_key + curve->num_bytes, curve->num_bytes);
 c004106:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c00410a:	009b      	lsls	r3, r3, #2
    uECC_vli_bytesToNative(
 c00410c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 c004110:	18d0      	adds	r0, r2, r3
        _public + num_words, public_key + curve->num_bytes, curve->num_bytes);
 c004112:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004116:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c00411a:	461a      	mov	r2, r3
    uECC_vli_bytesToNative(
 c00411c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004120:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 c004124:	681b      	ldr	r3, [r3, #0]
 c004126:	1899      	adds	r1, r3, r2
        _public + num_words, public_key + curve->num_bytes, curve->num_bytes);
 c004128:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00412c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    uECC_vli_bytesToNative(
 c004130:	461a      	mov	r2, r3
 c004132:	f7ff fed2 	bl	c003eda <uECC_vli_bytesToNative>
    uECC_vli_bytesToNative(r, signature, curve->num_bytes);
 c004136:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00413a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c00413e:	461a      	mov	r2, r3
 c004140:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004144:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 c004148:	f107 0030 	add.w	r0, r7, #48	; 0x30
 c00414c:	6819      	ldr	r1, [r3, #0]
 c00414e:	f7ff fec4 	bl	c003eda <uECC_vli_bytesToNative>
    uECC_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 c004152:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004156:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c00415a:	461a      	mov	r2, r3
 c00415c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004160:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 c004164:	681b      	ldr	r3, [r3, #0]
 c004166:	1899      	adds	r1, r3, r2
 c004168:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00416c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c004170:	461a      	mov	r2, r3
 c004172:	f107 0310 	add.w	r3, r7, #16
 c004176:	4618      	mov	r0, r3
 c004178:	f7ff feaf 	bl	c003eda <uECC_vli_bytesToNative>
#endif

    /* r, s must not be 0. */
    if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
 c00417c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004180:	f107 0330 	add.w	r3, r7, #48	; 0x30
 c004184:	4611      	mov	r1, r2
 c004186:	4618      	mov	r0, r3
 c004188:	f7fe fe9a 	bl	c002ec0 <uECC_vli_isZero>
 c00418c:	4603      	mov	r3, r0
 c00418e:	2b00      	cmp	r3, #0
 c004190:	d10a      	bne.n	c0041a8 <uECC_verify+0x148>
 c004192:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004196:	f107 0310 	add.w	r3, r7, #16
 c00419a:	4611      	mov	r1, r2
 c00419c:	4618      	mov	r0, r3
 c00419e:	f7fe fe8f 	bl	c002ec0 <uECC_vli_isZero>
 c0041a2:	4603      	mov	r3, r0
 c0041a4:	2b00      	cmp	r3, #0
 c0041a6:	d001      	beq.n	c0041ac <uECC_verify+0x14c>
        return 0;
 c0041a8:	2300      	movs	r3, #0
 c0041aa:	e220      	b.n	c0045ee <uECC_verify+0x58e>
    }

    /* r, s must be < n. */
    if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 c0041ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0041b0:	3324      	adds	r3, #36	; 0x24
 c0041b2:	f997 21ec 	ldrsb.w	r2, [r7, #492]	; 0x1ec
 c0041b6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c0041ba:	4618      	mov	r0, r3
 c0041bc:	f7fe ff4b 	bl	c003056 <uECC_vli_cmp_unsafe>
 c0041c0:	4603      	mov	r3, r0
 c0041c2:	2b01      	cmp	r3, #1
 c0041c4:	d10c      	bne.n	c0041e0 <uECC_verify+0x180>
            uECC_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 c0041c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0041ca:	3324      	adds	r3, #36	; 0x24
 c0041cc:	f997 21ec 	ldrsb.w	r2, [r7, #492]	; 0x1ec
 c0041d0:	f107 0110 	add.w	r1, r7, #16
 c0041d4:	4618      	mov	r0, r3
 c0041d6:	f7fe ff3e 	bl	c003056 <uECC_vli_cmp_unsafe>
 c0041da:	4603      	mov	r3, r0
    if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 c0041dc:	2b01      	cmp	r3, #1
 c0041de:	d001      	beq.n	c0041e4 <uECC_verify+0x184>
        return 0;
 c0041e0:	2300      	movs	r3, #0
 c0041e2:	e204      	b.n	c0045ee <uECC_verify+0x58e>
    }

    /* Calculate u1 and u2. */
    uECC_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 c0041e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0041e8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 c0041ec:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c0041f0:	f107 0110 	add.w	r1, r7, #16
 c0041f4:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 c0041f8:	f7ff f9c4 	bl	c003584 <uECC_vli_modInv>
    u1[num_n_words - 1] = 0;
 c0041fc:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004200:	3b01      	subs	r3, #1
 c004202:	009b      	lsls	r3, r3, #2
 c004204:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 c004208:	443b      	add	r3, r7
 c00420a:	2200      	movs	r2, #0
 c00420c:	f843 2c30 	str.w	r2, [r3, #-48]
    bits2int(u1, message_hash, hash_size, curve);
 c004210:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004214:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 c004218:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c00421c:	f5a3 71f4 	sub.w	r1, r3, #488	; 0x1e8
 c004220:	f507 70e0 	add.w	r0, r7, #448	; 0x1c0
 c004224:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004228:	6812      	ldr	r2, [r2, #0]
 c00422a:	6809      	ldr	r1, [r1, #0]
 c00422c:	f7ff fe91 	bl	c003f52 <bits2int>
    uECC_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 c004230:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004234:	f103 0424 	add.w	r4, r3, #36	; 0x24
 c004238:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c00423c:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 c004240:	f507 70e0 	add.w	r0, r7, #448	; 0x1c0
 c004244:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004248:	9300      	str	r3, [sp, #0]
 c00424a:	4623      	mov	r3, r4
 c00424c:	f7ff f91b 	bl	c003486 <uECC_vli_modMult>
    uECC_vli_modMult(u2, r, z, curve->n, num_n_words); /* u2 = r/s */
 c004250:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004254:	f103 0424 	add.w	r4, r3, #36	; 0x24
 c004258:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c00425c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c004260:	f507 70d0 	add.w	r0, r7, #416	; 0x1a0
 c004264:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004268:	9300      	str	r3, [sp, #0]
 c00426a:	4623      	mov	r3, r4
 c00426c:	f7ff f90b 	bl	c003486 <uECC_vli_modMult>

    /* Calculate sum = G + Q. */
    uECC_vli_set(sum, _public, num_words);
 c004270:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004274:	f107 0150 	add.w	r1, r7, #80	; 0x50
 c004278:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 c00427c:	4618      	mov	r0, r3
 c00427e:	f7fe fec3 	bl	c003008 <uECC_vli_set>
    uECC_vli_set(sum + num_words, _public + num_words, num_words);
 c004282:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004286:	009b      	lsls	r3, r3, #2
 c004288:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 c00428c:	18d0      	adds	r0, r2, r3
 c00428e:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004292:	009b      	lsls	r3, r3, #2
 c004294:	f107 0250 	add.w	r2, r7, #80	; 0x50
 c004298:	4413      	add	r3, r2
 c00429a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c00429e:	4619      	mov	r1, r3
 c0042a0:	f7fe feb2 	bl	c003008 <uECC_vli_set>
    uECC_vli_set(tx, curve->G, num_words);
 c0042a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0042a8:	f103 0144 	add.w	r1, r3, #68	; 0x44
 c0042ac:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c0042b0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 c0042b4:	4618      	mov	r0, r3
 c0042b6:	f7fe fea7 	bl	c003008 <uECC_vli_set>
    uECC_vli_set(ty, curve->G + num_words, num_words);
 c0042ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0042be:	f103 0244 	add.w	r2, r3, #68	; 0x44
 c0042c2:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c0042c6:	009b      	lsls	r3, r3, #2
 c0042c8:	18d1      	adds	r1, r2, r3
 c0042ca:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c0042ce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 c0042d2:	4618      	mov	r0, r3
 c0042d4:	f7fe fe98 	bl	c003008 <uECC_vli_set>
    uECC_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 c0042d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0042dc:	1d1c      	adds	r4, r3, #4
 c0042de:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 c0042e2:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 c0042e6:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 c0042ea:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c0042ee:	9300      	str	r3, [sp, #0]
 c0042f0:	4623      	mov	r3, r4
 c0042f2:	f7fe ff6f 	bl	c0031d4 <uECC_vli_modSub>
    XYcZ_add(tx, ty, sum, sum + num_words, curve);
 c0042f6:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c0042fa:	009b      	lsls	r3, r3, #2
 c0042fc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 c004300:	18d4      	adds	r4, r2, r3
 c004302:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 c004306:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 c00430a:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 c00430e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004312:	9300      	str	r3, [sp, #0]
 c004314:	4623      	mov	r3, r4
 c004316:	f7ff fd4d 	bl	c003db4 <XYcZ_add>
    uECC_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 c00431a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00431e:	1d1a      	adds	r2, r3, #4
 c004320:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004324:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 c004328:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 c00432c:	f7ff f92a 	bl	c003584 <uECC_vli_modInv>
    apply_z(sum, sum + num_words, z, curve);
 c004330:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004334:	009b      	lsls	r3, r3, #2
 c004336:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 c00433a:	18d1      	adds	r1, r2, r3
 c00433c:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c004340:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 c004344:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004348:	f7ff fd0c 	bl	c003d64 <apply_z>

    /* Use Shamir's trick to calculate u1*G + u2*Q */
    points[0] = 0;
 c00434c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004350:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c004354:	2200      	movs	r2, #0
 c004356:	601a      	str	r2, [r3, #0]
    points[1] = curve->G;
 c004358:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00435c:	f103 0244 	add.w	r2, r3, #68	; 0x44
 c004360:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004364:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c004368:	605a      	str	r2, [r3, #4]
    points[2] = _public;
 c00436a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c00436e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c004372:	f107 0250 	add.w	r2, r7, #80	; 0x50
 c004376:	609a      	str	r2, [r3, #8]
    points[3] = sum;
 c004378:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c00437c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c004380:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 c004384:	60da      	str	r2, [r3, #12]
    num_bits = smax(uECC_vli_numBits(u1, num_n_words),
 c004386:	f997 21ec 	ldrsb.w	r2, [r7, #492]	; 0x1ec
 c00438a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 c00438e:	4611      	mov	r1, r2
 c004390:	4618      	mov	r0, r3
 c004392:	f7fe fdff 	bl	c002f94 <uECC_vli_numBits>
 c004396:	4603      	mov	r3, r0
 c004398:	461c      	mov	r4, r3
 c00439a:	f997 21ec 	ldrsb.w	r2, [r7, #492]	; 0x1ec
 c00439e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 c0043a2:	4611      	mov	r1, r2
 c0043a4:	4618      	mov	r0, r3
 c0043a6:	f7fe fdf5 	bl	c002f94 <uECC_vli_numBits>
 c0043aa:	4603      	mov	r3, r0
 c0043ac:	4619      	mov	r1, r3
 c0043ae:	4620      	mov	r0, r4
 c0043b0:	f7ff fe40 	bl	c004034 <smax>
 c0043b4:	4603      	mov	r3, r0
 c0043b6:	f8a7 31ea 	strh.w	r3, [r7, #490]	; 0x1ea
                    uECC_vli_numBits(u2, num_n_words));

    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 c0043ba:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
 c0043be:	3b01      	subs	r3, #1
 c0043c0:	b29b      	uxth	r3, r3
 c0043c2:	b21a      	sxth	r2, r3
 c0043c4:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 c0043c8:	4611      	mov	r1, r2
 c0043ca:	4618      	mov	r0, r3
 c0043cc:	f7fe fda2 	bl	c002f14 <uECC_vli_testBit>
 c0043d0:	4603      	mov	r3, r0
 c0043d2:	2b00      	cmp	r3, #0
 c0043d4:	bf14      	ite	ne
 c0043d6:	2301      	movne	r3, #1
 c0043d8:	2300      	moveq	r3, #0
 c0043da:	b2db      	uxtb	r3, r3
 c0043dc:	461c      	mov	r4, r3
                   ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
 c0043de:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
 c0043e2:	3b01      	subs	r3, #1
 c0043e4:	b29b      	uxth	r3, r3
 c0043e6:	b21a      	sxth	r2, r3
 c0043e8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 c0043ec:	4611      	mov	r1, r2
 c0043ee:	4618      	mov	r0, r3
 c0043f0:	f7fe fd90 	bl	c002f14 <uECC_vli_testBit>
 c0043f4:	4603      	mov	r3, r0
 c0043f6:	2b00      	cmp	r3, #0
 c0043f8:	d001      	beq.n	c0043fe <uECC_verify+0x39e>
 c0043fa:	2302      	movs	r3, #2
 c0043fc:	e000      	b.n	c004400 <uECC_verify+0x3a0>
 c0043fe:	2300      	movs	r3, #0
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 c004400:	ea43 0204 	orr.w	r2, r3, r4
 c004404:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004408:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c00440c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c004410:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    uECC_vli_set(rx, point, num_words);
 c004414:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004418:	f507 7390 	add.w	r3, r7, #288	; 0x120
 c00441c:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 c004420:	4618      	mov	r0, r3
 c004422:	f7fe fdf1 	bl	c003008 <uECC_vli_set>
    uECC_vli_set(ry, point + num_words, num_words);
 c004426:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c00442a:	009b      	lsls	r3, r3, #2
 c00442c:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 c004430:	18d1      	adds	r1, r2, r3
 c004432:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004436:	f507 7380 	add.w	r3, r7, #256	; 0x100
 c00443a:	4618      	mov	r0, r3
 c00443c:	f7fe fde4 	bl	c003008 <uECC_vli_set>
    uECC_vli_clear(z, num_words);
 c004440:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004444:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 c004448:	4611      	mov	r1, r2
 c00444a:	4618      	mov	r0, r3
 c00444c:	f7fe fd17 	bl	c002e7e <uECC_vli_clear>
    z[0] = 1;
 c004450:	2301      	movs	r3, #1
 c004452:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

    for (i = num_bits - 2; i >= 0; --i) {
 c004456:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
 c00445a:	3b02      	subs	r3, #2
 c00445c:	b29b      	uxth	r3, r3
 c00445e:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
 c004462:	e087      	b.n	c004574 <uECC_verify+0x514>
        uECC_word_t index;
        curve->double_jacobian(rx, ry, z, curve);
 c004464:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004468:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
 c00446c:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c004470:	f507 7180 	add.w	r1, r7, #256	; 0x100
 c004474:	f507 7090 	add.w	r0, r7, #288	; 0x120
 c004478:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00447c:	47a0      	blx	r4

        index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
 c00447e:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	; 0x1ee
 c004482:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 c004486:	4611      	mov	r1, r2
 c004488:	4618      	mov	r0, r3
 c00448a:	f7fe fd43 	bl	c002f14 <uECC_vli_testBit>
 c00448e:	4603      	mov	r3, r0
 c004490:	2b00      	cmp	r3, #0
 c004492:	bf14      	ite	ne
 c004494:	2301      	movne	r3, #1
 c004496:	2300      	moveq	r3, #0
 c004498:	b2db      	uxtb	r3, r3
 c00449a:	461c      	mov	r4, r3
 c00449c:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	; 0x1ee
 c0044a0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 c0044a4:	4611      	mov	r1, r2
 c0044a6:	4618      	mov	r0, r3
 c0044a8:	f7fe fd34 	bl	c002f14 <uECC_vli_testBit>
 c0044ac:	4603      	mov	r3, r0
 c0044ae:	2b00      	cmp	r3, #0
 c0044b0:	d001      	beq.n	c0044b6 <uECC_verify+0x456>
 c0044b2:	2302      	movs	r3, #2
 c0044b4:	e000      	b.n	c0044b8 <uECC_verify+0x458>
 c0044b6:	2300      	movs	r3, #0
 c0044b8:	4323      	orrs	r3, r4
 c0044ba:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        point = points[index];
 c0044be:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c0044c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c0044c6:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 c0044ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c0044ce:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
        if (point) {
 c0044d2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 c0044d6:	2b00      	cmp	r3, #0
 c0044d8:	d046      	beq.n	c004568 <uECC_verify+0x508>
            uECC_vli_set(tx, point, num_words);
 c0044da:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c0044de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 c0044e2:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 c0044e6:	4618      	mov	r0, r3
 c0044e8:	f7fe fd8e 	bl	c003008 <uECC_vli_set>
            uECC_vli_set(ty, point + num_words, num_words);
 c0044ec:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c0044f0:	009b      	lsls	r3, r3, #2
 c0044f2:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 c0044f6:	18d1      	adds	r1, r2, r3
 c0044f8:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c0044fc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 c004500:	4618      	mov	r0, r3
 c004502:	f7fe fd81 	bl	c003008 <uECC_vli_set>
            apply_z(tx, ty, z, curve);
 c004506:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c00450a:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 c00450e:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 c004512:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004516:	f7ff fc25 	bl	c003d64 <apply_z>
            uECC_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 c00451a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00451e:	1d1c      	adds	r4, r3, #4
 c004520:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 c004524:	f507 7190 	add.w	r1, r7, #288	; 0x120
 c004528:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 c00452c:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004530:	9300      	str	r3, [sp, #0]
 c004532:	4623      	mov	r3, r4
 c004534:	f7fe fe4e 	bl	c0031d4 <uECC_vli_modSub>
            XYcZ_add(tx, ty, rx, ry, curve);
 c004538:	f507 7480 	add.w	r4, r7, #256	; 0x100
 c00453c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 c004540:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 c004544:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 c004548:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00454c:	9300      	str	r3, [sp, #0]
 c00454e:	4623      	mov	r3, r4
 c004550:	f7ff fc30 	bl	c003db4 <XYcZ_add>
            uECC_vli_modMult_fast(z, z, tz, curve);
 c004554:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 c004558:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 c00455c:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 c004560:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004564:	f7fe ffaa 	bl	c0034bc <uECC_vli_modMult_fast>
    for (i = num_bits - 2; i >= 0; --i) {
 c004568:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 c00456c:	3b01      	subs	r3, #1
 c00456e:	b29b      	uxth	r3, r3
 c004570:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
 c004574:	f9b7 31ee 	ldrsh.w	r3, [r7, #494]	; 0x1ee
 c004578:	2b00      	cmp	r3, #0
 c00457a:	f6bf af73 	bge.w	c004464 <uECC_verify+0x404>
        }
    }

    uECC_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 c00457e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004582:	1d1a      	adds	r2, r3, #4
 c004584:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004588:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 c00458c:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 c004590:	f7fe fff8 	bl	c003584 <uECC_vli_modInv>
    apply_z(rx, ry, z, curve);
 c004594:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c004598:	f507 7180 	add.w	r1, r7, #256	; 0x100
 c00459c:	f507 7090 	add.w	r0, r7, #288	; 0x120
 c0045a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0045a4:	f7ff fbde 	bl	c003d64 <apply_z>

    /* v = x1 (mod n) */
    if (uECC_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 c0045a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0045ac:	3324      	adds	r3, #36	; 0x24
 c0045ae:	f997 21ec 	ldrsb.w	r2, [r7, #492]	; 0x1ec
 c0045b2:	f507 7190 	add.w	r1, r7, #288	; 0x120
 c0045b6:	4618      	mov	r0, r3
 c0045b8:	f7fe fd4d 	bl	c003056 <uECC_vli_cmp_unsafe>
 c0045bc:	4603      	mov	r3, r0
 c0045be:	2b01      	cmp	r3, #1
 c0045c0:	d00b      	beq.n	c0045da <uECC_verify+0x57a>
        uECC_vli_sub(rx, rx, curve->n, num_n_words);
 c0045c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0045c6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 c0045ca:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c0045ce:	f507 7190 	add.w	r1, r7, #288	; 0x120
 c0045d2:	f507 7090 	add.w	r0, r7, #288	; 0x120
 c0045d6:	f7fe fbb3 	bl	c002d40 <uECC_vli_sub>
    }

    /* Accept only if v == r. */
    return (int)(uECC_vli_equal(rx, r, num_words));
 c0045da:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c0045de:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c0045e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 c0045e6:	4618      	mov	r0, r3
 c0045e8:	f7fe fd71 	bl	c0030ce <uECC_vli_equal>
 c0045ec:	4603      	mov	r3, r0
}
 c0045ee:	4618      	mov	r0, r3
 c0045f0:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 c0045f4:	46bd      	mov	sp, r7
 c0045f6:	bd90      	pop	{r4, r7, pc}

0c0045f8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 c0045f8:	b580      	push	{r7, lr}
 c0045fa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 c0045fc:	4b22      	ldr	r3, [pc, #136]	; (c004688 <MX_LPUART1_UART_Init+0x90>)
 c0045fe:	4a23      	ldr	r2, [pc, #140]	; (c00468c <MX_LPUART1_UART_Init+0x94>)
 c004600:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 921600;
 c004602:	4b21      	ldr	r3, [pc, #132]	; (c004688 <MX_LPUART1_UART_Init+0x90>)
 c004604:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 c004608:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 c00460a:	4b1f      	ldr	r3, [pc, #124]	; (c004688 <MX_LPUART1_UART_Init+0x90>)
 c00460c:	2200      	movs	r2, #0
 c00460e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 c004610:	4b1d      	ldr	r3, [pc, #116]	; (c004688 <MX_LPUART1_UART_Init+0x90>)
 c004612:	2200      	movs	r2, #0
 c004614:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 c004616:	4b1c      	ldr	r3, [pc, #112]	; (c004688 <MX_LPUART1_UART_Init+0x90>)
 c004618:	2200      	movs	r2, #0
 c00461a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 c00461c:	4b1a      	ldr	r3, [pc, #104]	; (c004688 <MX_LPUART1_UART_Init+0x90>)
 c00461e:	220c      	movs	r2, #12
 c004620:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 c004622:	4b19      	ldr	r3, [pc, #100]	; (c004688 <MX_LPUART1_UART_Init+0x90>)
 c004624:	2200      	movs	r2, #0
 c004626:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c004628:	4b17      	ldr	r3, [pc, #92]	; (c004688 <MX_LPUART1_UART_Init+0x90>)
 c00462a:	2200      	movs	r2, #0
 c00462c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c00462e:	4b16      	ldr	r3, [pc, #88]	; (c004688 <MX_LPUART1_UART_Init+0x90>)
 c004630:	2200      	movs	r2, #0
 c004632:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c004634:	4b14      	ldr	r3, [pc, #80]	; (c004688 <MX_LPUART1_UART_Init+0x90>)
 c004636:	2200      	movs	r2, #0
 c004638:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 c00463a:	4b13      	ldr	r3, [pc, #76]	; (c004688 <MX_LPUART1_UART_Init+0x90>)
 c00463c:	2200      	movs	r2, #0
 c00463e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 c004640:	4811      	ldr	r0, [pc, #68]	; (c004688 <MX_LPUART1_UART_Init+0x90>)
 c004642:	f003 fe9b 	bl	c00837c <HAL_UART_Init>
 c004646:	4603      	mov	r3, r0
 c004648:	2b00      	cmp	r3, #0
 c00464a:	d001      	beq.n	c004650 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 c00464c:	f7fd fd8c 	bl	c002168 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c004650:	2100      	movs	r1, #0
 c004652:	480d      	ldr	r0, [pc, #52]	; (c004688 <MX_LPUART1_UART_Init+0x90>)
 c004654:	f004 fcf0 	bl	c009038 <HAL_UARTEx_SetTxFifoThreshold>
 c004658:	4603      	mov	r3, r0
 c00465a:	2b00      	cmp	r3, #0
 c00465c:	d001      	beq.n	c004662 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 c00465e:	f7fd fd83 	bl	c002168 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c004662:	2100      	movs	r1, #0
 c004664:	4808      	ldr	r0, [pc, #32]	; (c004688 <MX_LPUART1_UART_Init+0x90>)
 c004666:	f004 fd25 	bl	c0090b4 <HAL_UARTEx_SetRxFifoThreshold>
 c00466a:	4603      	mov	r3, r0
 c00466c:	2b00      	cmp	r3, #0
 c00466e:	d001      	beq.n	c004674 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 c004670:	f7fd fd7a 	bl	c002168 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 c004674:	4804      	ldr	r0, [pc, #16]	; (c004688 <MX_LPUART1_UART_Init+0x90>)
 c004676:	f004 fca6 	bl	c008fc6 <HAL_UARTEx_DisableFifoMode>
 c00467a:	4603      	mov	r3, r0
 c00467c:	2b00      	cmp	r3, #0
 c00467e:	d001      	beq.n	c004684 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 c004680:	f7fd fd72 	bl	c002168 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 c004684:	bf00      	nop
 c004686:	bd80      	pop	{r7, pc}
 c004688:	300023cc 	.word	0x300023cc
 c00468c:	50008000 	.word	0x50008000

0c004690 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 c004690:	b580      	push	{r7, lr}
 c004692:	b0ae      	sub	sp, #184	; 0xb8
 c004694:	af00      	add	r7, sp, #0
 c004696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c004698:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c00469c:	2200      	movs	r2, #0
 c00469e:	601a      	str	r2, [r3, #0]
 c0046a0:	605a      	str	r2, [r3, #4]
 c0046a2:	609a      	str	r2, [r3, #8]
 c0046a4:	60da      	str	r2, [r3, #12]
 c0046a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c0046a8:	f107 0310 	add.w	r3, r7, #16
 c0046ac:	2294      	movs	r2, #148	; 0x94
 c0046ae:	2100      	movs	r1, #0
 c0046b0:	4618      	mov	r0, r3
 c0046b2:	f004 fdbc 	bl	c00922e <memset>
  if(uartHandle->Instance==LPUART1)
 c0046b6:	687b      	ldr	r3, [r7, #4]
 c0046b8:	681b      	ldr	r3, [r3, #0]
 c0046ba:	4a22      	ldr	r2, [pc, #136]	; (c004744 <HAL_UART_MspInit+0xb4>)
 c0046bc:	4293      	cmp	r3, r2
 c0046be:	d13d      	bne.n	c00473c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 c0046c0:	2320      	movs	r3, #32
 c0046c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 c0046c4:	2300      	movs	r3, #0
 c0046c6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c0046c8:	f107 0310 	add.w	r3, r7, #16
 c0046cc:	4618      	mov	r0, r3
 c0046ce:	f002 fccd 	bl	c00706c <HAL_RCCEx_PeriphCLKConfig>
 c0046d2:	4603      	mov	r3, r0
 c0046d4:	2b00      	cmp	r3, #0
 c0046d6:	d001      	beq.n	c0046dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 c0046d8:	f7fd fd46 	bl	c002168 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 c0046dc:	4b1a      	ldr	r3, [pc, #104]	; (c004748 <HAL_UART_MspInit+0xb8>)
 c0046de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0046e0:	4a19      	ldr	r2, [pc, #100]	; (c004748 <HAL_UART_MspInit+0xb8>)
 c0046e2:	f043 0301 	orr.w	r3, r3, #1
 c0046e6:	65d3      	str	r3, [r2, #92]	; 0x5c
 c0046e8:	4b17      	ldr	r3, [pc, #92]	; (c004748 <HAL_UART_MspInit+0xb8>)
 c0046ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0046ec:	f003 0301 	and.w	r3, r3, #1
 c0046f0:	60fb      	str	r3, [r7, #12]
 c0046f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 c0046f4:	4b14      	ldr	r3, [pc, #80]	; (c004748 <HAL_UART_MspInit+0xb8>)
 c0046f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0046f8:	4a13      	ldr	r2, [pc, #76]	; (c004748 <HAL_UART_MspInit+0xb8>)
 c0046fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c0046fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 c004700:	4b11      	ldr	r3, [pc, #68]	; (c004748 <HAL_UART_MspInit+0xb8>)
 c004702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c004704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c004708:	60bb      	str	r3, [r7, #8]
 c00470a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 c00470c:	f001 fcac 	bl	c006068 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 c004710:	f44f 73c0 	mov.w	r3, #384	; 0x180
 c004714:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c004718:	2302      	movs	r3, #2
 c00471a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c00471e:	2300      	movs	r3, #0
 c004720:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c004724:	2300      	movs	r3, #0
 c004726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 c00472a:	2308      	movs	r3, #8
 c00472c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 c004730:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c004734:	4619      	mov	r1, r3
 c004736:	4805      	ldr	r0, [pc, #20]	; (c00474c <HAL_UART_MspInit+0xbc>)
 c004738:	f000 fbf0 	bl	c004f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 c00473c:	bf00      	nop
 c00473e:	37b8      	adds	r7, #184	; 0xb8
 c004740:	46bd      	mov	sp, r7
 c004742:	bd80      	pop	{r7, pc}
 c004744:	50008000 	.word	0x50008000
 c004748:	50021000 	.word	0x50021000
 c00474c:	52021800 	.word	0x52021800

0c004750 <SecureUartTx>:
}

/* USER CODE BEGIN 1 */

void SecureUartTx(uint8_t* data, uint16_t len)
{
 c004750:	b580      	push	{r7, lr}
 c004752:	b082      	sub	sp, #8
 c004754:	af00      	add	r7, sp, #0
 c004756:	6078      	str	r0, [r7, #4]
 c004758:	460b      	mov	r3, r1
 c00475a:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&hlpuart1, data, len, HAL_MAX_DELAY);
 c00475c:	887a      	ldrh	r2, [r7, #2]
 c00475e:	f04f 33ff 	mov.w	r3, #4294967295
 c004762:	6879      	ldr	r1, [r7, #4]
 c004764:	4803      	ldr	r0, [pc, #12]	; (c004774 <SecureUartTx+0x24>)
 c004766:	f003 fe59 	bl	c00841c <HAL_UART_Transmit>
}
 c00476a:	bf00      	nop
 c00476c:	3708      	adds	r7, #8
 c00476e:	46bd      	mov	sp, r7
 c004770:	bd80      	pop	{r7, pc}
 c004772:	bf00      	nop
 c004774:	300023cc 	.word	0x300023cc

0c004778 <SecureUartRx>:

void SecureUartRx(uint8_t* data, uint16_t len)
{
 c004778:	b580      	push	{r7, lr}
 c00477a:	b082      	sub	sp, #8
 c00477c:	af00      	add	r7, sp, #0
 c00477e:	6078      	str	r0, [r7, #4]
 c004780:	460b      	mov	r3, r1
 c004782:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&hlpuart1, data, len, HAL_MAX_DELAY);
 c004784:	887a      	ldrh	r2, [r7, #2]
 c004786:	f04f 33ff 	mov.w	r3, #4294967295
 c00478a:	6879      	ldr	r1, [r7, #4]
 c00478c:	4803      	ldr	r0, [pc, #12]	; (c00479c <SecureUartRx+0x24>)
 c00478e:	f003 fedb 	bl	c008548 <HAL_UART_Receive>

}
 c004792:	bf00      	nop
 c004794:	3708      	adds	r7, #8
 c004796:	46bd      	mov	sp, r7
 c004798:	bd80      	pop	{r7, pc}
 c00479a:	bf00      	nop
 c00479c:	300023cc 	.word	0x300023cc

0c0047a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c0047a0:	f8df d034 	ldr.w	sp, [pc, #52]	; c0047d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c0047a4:	f7fe f89c 	bl	c0028e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c0047a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c0047aa:	e003      	b.n	c0047b4 <LoopCopyDataInit>

0c0047ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c0047ac:	4b0b      	ldr	r3, [pc, #44]	; (c0047dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c0047ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c0047b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c0047b2:	3104      	adds	r1, #4

0c0047b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c0047b4:	480a      	ldr	r0, [pc, #40]	; (c0047e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 c0047b6:	4b0b      	ldr	r3, [pc, #44]	; (c0047e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 c0047b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c0047ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c0047bc:	d3f6      	bcc.n	c0047ac <CopyDataInit>
	ldr	r2, =_sbss
 c0047be:	4a0a      	ldr	r2, [pc, #40]	; (c0047e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 c0047c0:	e002      	b.n	c0047c8 <LoopFillZerobss>

0c0047c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c0047c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c0047c4:	f842 3b04 	str.w	r3, [r2], #4

0c0047c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c0047c8:	4b08      	ldr	r3, [pc, #32]	; (c0047ec <LoopForever+0x16>)
	cmp	r2, r3
 c0047ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c0047cc:	d3f9      	bcc.n	c0047c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c0047ce:	f004 fcfd 	bl	c0091cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c0047d2:	f7fd fc0f 	bl	c001ff4 <main>

0c0047d6 <LoopForever>:

LoopForever:
    b LoopForever
 c0047d6:	e7fe      	b.n	c0047d6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c0047d8:	30010000 	.word	0x30010000
	ldr	r3, =_sidata
 c0047dc:	0c0093cc 	.word	0x0c0093cc
	ldr	r0, =_sdata
 c0047e0:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c0047e4:	30000074 	.word	0x30000074
	ldr	r2, =_sbss
 c0047e8:	300020dc 	.word	0x300020dc
	ldr	r3, = _ebss
 c0047ec:	30002460 	.word	0x30002460

0c0047f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c0047f0:	e7fe      	b.n	c0047f0 <ADC1_2_IRQHandler>

0c0047f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c0047f2:	b580      	push	{r7, lr}
 c0047f4:	b082      	sub	sp, #8
 c0047f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c0047f8:	2300      	movs	r3, #0
 c0047fa:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c0047fc:	2004      	movs	r0, #4
 c0047fe:	f000 f93f 	bl	c004a80 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c004802:	f7fe f887 	bl	c002914 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c004806:	2007      	movs	r0, #7
 c004808:	f000 f80e 	bl	c004828 <HAL_InitTick>
 c00480c:	4603      	mov	r3, r0
 c00480e:	2b00      	cmp	r3, #0
 c004810:	d002      	beq.n	c004818 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c004812:	2301      	movs	r3, #1
 c004814:	71fb      	strb	r3, [r7, #7]
 c004816:	e001      	b.n	c00481c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c004818:	f7fd ff24 	bl	c002664 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c00481c:	79fb      	ldrb	r3, [r7, #7]
}
 c00481e:	4618      	mov	r0, r3
 c004820:	3708      	adds	r7, #8
 c004822:	46bd      	mov	sp, r7
 c004824:	bd80      	pop	{r7, pc}
	...

0c004828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c004828:	b580      	push	{r7, lr}
 c00482a:	b084      	sub	sp, #16
 c00482c:	af00      	add	r7, sp, #0
 c00482e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c004830:	2300      	movs	r3, #0
 c004832:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c004834:	4b17      	ldr	r3, [pc, #92]	; (c004894 <HAL_InitTick+0x6c>)
 c004836:	781b      	ldrb	r3, [r3, #0]
 c004838:	2b00      	cmp	r3, #0
 c00483a:	d023      	beq.n	c004884 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c00483c:	4b16      	ldr	r3, [pc, #88]	; (c004898 <HAL_InitTick+0x70>)
 c00483e:	681a      	ldr	r2, [r3, #0]
 c004840:	4b14      	ldr	r3, [pc, #80]	; (c004894 <HAL_InitTick+0x6c>)
 c004842:	781b      	ldrb	r3, [r3, #0]
 c004844:	4619      	mov	r1, r3
 c004846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c00484a:	fbb3 f3f1 	udiv	r3, r3, r1
 c00484e:	fbb2 f3f3 	udiv	r3, r2, r3
 c004852:	4618      	mov	r0, r3
 c004854:	f000 f947 	bl	c004ae6 <HAL_SYSTICK_Config>
 c004858:	4603      	mov	r3, r0
 c00485a:	2b00      	cmp	r3, #0
 c00485c:	d10f      	bne.n	c00487e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c00485e:	687b      	ldr	r3, [r7, #4]
 c004860:	2b07      	cmp	r3, #7
 c004862:	d809      	bhi.n	c004878 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c004864:	2200      	movs	r2, #0
 c004866:	6879      	ldr	r1, [r7, #4]
 c004868:	f04f 30ff 	mov.w	r0, #4294967295
 c00486c:	f000 f913 	bl	c004a96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c004870:	4a0a      	ldr	r2, [pc, #40]	; (c00489c <HAL_InitTick+0x74>)
 c004872:	687b      	ldr	r3, [r7, #4]
 c004874:	6013      	str	r3, [r2, #0]
 c004876:	e007      	b.n	c004888 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c004878:	2301      	movs	r3, #1
 c00487a:	73fb      	strb	r3, [r7, #15]
 c00487c:	e004      	b.n	c004888 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c00487e:	2301      	movs	r3, #1
 c004880:	73fb      	strb	r3, [r7, #15]
 c004882:	e001      	b.n	c004888 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c004884:	2301      	movs	r3, #1
 c004886:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c004888:	7bfb      	ldrb	r3, [r7, #15]
}
 c00488a:	4618      	mov	r0, r3
 c00488c:	3710      	adds	r7, #16
 c00488e:	46bd      	mov	sp, r7
 c004890:	bd80      	pop	{r7, pc}
 c004892:	bf00      	nop
 c004894:	30000070 	.word	0x30000070
 c004898:	30000068 	.word	0x30000068
 c00489c:	3000006c 	.word	0x3000006c

0c0048a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c0048a0:	b480      	push	{r7}
 c0048a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c0048a4:	4b06      	ldr	r3, [pc, #24]	; (c0048c0 <HAL_IncTick+0x20>)
 c0048a6:	781b      	ldrb	r3, [r3, #0]
 c0048a8:	461a      	mov	r2, r3
 c0048aa:	4b06      	ldr	r3, [pc, #24]	; (c0048c4 <HAL_IncTick+0x24>)
 c0048ac:	681b      	ldr	r3, [r3, #0]
 c0048ae:	4413      	add	r3, r2
 c0048b0:	4a04      	ldr	r2, [pc, #16]	; (c0048c4 <HAL_IncTick+0x24>)
 c0048b2:	6013      	str	r3, [r2, #0]
}
 c0048b4:	bf00      	nop
 c0048b6:	46bd      	mov	sp, r7
 c0048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0048bc:	4770      	bx	lr
 c0048be:	bf00      	nop
 c0048c0:	30000070 	.word	0x30000070
 c0048c4:	3000245c 	.word	0x3000245c

0c0048c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c0048c8:	b480      	push	{r7}
 c0048ca:	af00      	add	r7, sp, #0
  return uwTick;
 c0048cc:	4b03      	ldr	r3, [pc, #12]	; (c0048dc <HAL_GetTick+0x14>)
 c0048ce:	681b      	ldr	r3, [r3, #0]
}
 c0048d0:	4618      	mov	r0, r3
 c0048d2:	46bd      	mov	sp, r7
 c0048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0048d8:	4770      	bx	lr
 c0048da:	bf00      	nop
 c0048dc:	3000245c 	.word	0x3000245c

0c0048e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c0048e0:	b480      	push	{r7}
 c0048e2:	b085      	sub	sp, #20
 c0048e4:	af00      	add	r7, sp, #0
 c0048e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c0048e8:	687b      	ldr	r3, [r7, #4]
 c0048ea:	f003 0307 	and.w	r3, r3, #7
 c0048ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c0048f0:	4b0c      	ldr	r3, [pc, #48]	; (c004924 <__NVIC_SetPriorityGrouping+0x44>)
 c0048f2:	68db      	ldr	r3, [r3, #12]
 c0048f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c0048f6:	68ba      	ldr	r2, [r7, #8]
 c0048f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c0048fc:	4013      	ands	r3, r2
 c0048fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c004900:	68fb      	ldr	r3, [r7, #12]
 c004902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c004904:	68bb      	ldr	r3, [r7, #8]
 c004906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c004908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c00490c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c004910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c004912:	4a04      	ldr	r2, [pc, #16]	; (c004924 <__NVIC_SetPriorityGrouping+0x44>)
 c004914:	68bb      	ldr	r3, [r7, #8]
 c004916:	60d3      	str	r3, [r2, #12]
}
 c004918:	bf00      	nop
 c00491a:	3714      	adds	r7, #20
 c00491c:	46bd      	mov	sp, r7
 c00491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004922:	4770      	bx	lr
 c004924:	e000ed00 	.word	0xe000ed00

0c004928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c004928:	b480      	push	{r7}
 c00492a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c00492c:	4b04      	ldr	r3, [pc, #16]	; (c004940 <__NVIC_GetPriorityGrouping+0x18>)
 c00492e:	68db      	ldr	r3, [r3, #12]
 c004930:	0a1b      	lsrs	r3, r3, #8
 c004932:	f003 0307 	and.w	r3, r3, #7
}
 c004936:	4618      	mov	r0, r3
 c004938:	46bd      	mov	sp, r7
 c00493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00493e:	4770      	bx	lr
 c004940:	e000ed00 	.word	0xe000ed00

0c004944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c004944:	b480      	push	{r7}
 c004946:	b083      	sub	sp, #12
 c004948:	af00      	add	r7, sp, #0
 c00494a:	4603      	mov	r3, r0
 c00494c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c00494e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c004952:	2b00      	cmp	r3, #0
 c004954:	db0b      	blt.n	c00496e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c004956:	79fb      	ldrb	r3, [r7, #7]
 c004958:	f003 021f 	and.w	r2, r3, #31
 c00495c:	4907      	ldr	r1, [pc, #28]	; (c00497c <__NVIC_EnableIRQ+0x38>)
 c00495e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c004962:	095b      	lsrs	r3, r3, #5
 c004964:	2001      	movs	r0, #1
 c004966:	fa00 f202 	lsl.w	r2, r0, r2
 c00496a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c00496e:	bf00      	nop
 c004970:	370c      	adds	r7, #12
 c004972:	46bd      	mov	sp, r7
 c004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004978:	4770      	bx	lr
 c00497a:	bf00      	nop
 c00497c:	e000e100 	.word	0xe000e100

0c004980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c004980:	b480      	push	{r7}
 c004982:	b083      	sub	sp, #12
 c004984:	af00      	add	r7, sp, #0
 c004986:	4603      	mov	r3, r0
 c004988:	6039      	str	r1, [r7, #0]
 c00498a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c00498c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c004990:	2b00      	cmp	r3, #0
 c004992:	db0a      	blt.n	c0049aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c004994:	683b      	ldr	r3, [r7, #0]
 c004996:	b2da      	uxtb	r2, r3
 c004998:	490c      	ldr	r1, [pc, #48]	; (c0049cc <__NVIC_SetPriority+0x4c>)
 c00499a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00499e:	0152      	lsls	r2, r2, #5
 c0049a0:	b2d2      	uxtb	r2, r2
 c0049a2:	440b      	add	r3, r1
 c0049a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c0049a8:	e00a      	b.n	c0049c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0049aa:	683b      	ldr	r3, [r7, #0]
 c0049ac:	b2da      	uxtb	r2, r3
 c0049ae:	4908      	ldr	r1, [pc, #32]	; (c0049d0 <__NVIC_SetPriority+0x50>)
 c0049b0:	79fb      	ldrb	r3, [r7, #7]
 c0049b2:	f003 030f 	and.w	r3, r3, #15
 c0049b6:	3b04      	subs	r3, #4
 c0049b8:	0152      	lsls	r2, r2, #5
 c0049ba:	b2d2      	uxtb	r2, r2
 c0049bc:	440b      	add	r3, r1
 c0049be:	761a      	strb	r2, [r3, #24]
}
 c0049c0:	bf00      	nop
 c0049c2:	370c      	adds	r7, #12
 c0049c4:	46bd      	mov	sp, r7
 c0049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0049ca:	4770      	bx	lr
 c0049cc:	e000e100 	.word	0xe000e100
 c0049d0:	e000ed00 	.word	0xe000ed00

0c0049d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c0049d4:	b480      	push	{r7}
 c0049d6:	b089      	sub	sp, #36	; 0x24
 c0049d8:	af00      	add	r7, sp, #0
 c0049da:	60f8      	str	r0, [r7, #12]
 c0049dc:	60b9      	str	r1, [r7, #8]
 c0049de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c0049e0:	68fb      	ldr	r3, [r7, #12]
 c0049e2:	f003 0307 	and.w	r3, r3, #7
 c0049e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c0049e8:	69fb      	ldr	r3, [r7, #28]
 c0049ea:	f1c3 0307 	rsb	r3, r3, #7
 c0049ee:	2b03      	cmp	r3, #3
 c0049f0:	bf28      	it	cs
 c0049f2:	2303      	movcs	r3, #3
 c0049f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c0049f6:	69fb      	ldr	r3, [r7, #28]
 c0049f8:	3303      	adds	r3, #3
 c0049fa:	2b06      	cmp	r3, #6
 c0049fc:	d902      	bls.n	c004a04 <NVIC_EncodePriority+0x30>
 c0049fe:	69fb      	ldr	r3, [r7, #28]
 c004a00:	3b04      	subs	r3, #4
 c004a02:	e000      	b.n	c004a06 <NVIC_EncodePriority+0x32>
 c004a04:	2300      	movs	r3, #0
 c004a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c004a08:	f04f 32ff 	mov.w	r2, #4294967295
 c004a0c:	69bb      	ldr	r3, [r7, #24]
 c004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 c004a12:	43da      	mvns	r2, r3
 c004a14:	68bb      	ldr	r3, [r7, #8]
 c004a16:	401a      	ands	r2, r3
 c004a18:	697b      	ldr	r3, [r7, #20]
 c004a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c004a1c:	f04f 31ff 	mov.w	r1, #4294967295
 c004a20:	697b      	ldr	r3, [r7, #20]
 c004a22:	fa01 f303 	lsl.w	r3, r1, r3
 c004a26:	43d9      	mvns	r1, r3
 c004a28:	687b      	ldr	r3, [r7, #4]
 c004a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c004a2c:	4313      	orrs	r3, r2
         );
}
 c004a2e:	4618      	mov	r0, r3
 c004a30:	3724      	adds	r7, #36	; 0x24
 c004a32:	46bd      	mov	sp, r7
 c004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004a38:	4770      	bx	lr
	...

0c004a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c004a3c:	b580      	push	{r7, lr}
 c004a3e:	b082      	sub	sp, #8
 c004a40:	af00      	add	r7, sp, #0
 c004a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c004a44:	687b      	ldr	r3, [r7, #4]
 c004a46:	3b01      	subs	r3, #1
 c004a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c004a4c:	d301      	bcc.n	c004a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c004a4e:	2301      	movs	r3, #1
 c004a50:	e00f      	b.n	c004a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c004a52:	4a0a      	ldr	r2, [pc, #40]	; (c004a7c <SysTick_Config+0x40>)
 c004a54:	687b      	ldr	r3, [r7, #4]
 c004a56:	3b01      	subs	r3, #1
 c004a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c004a5a:	2107      	movs	r1, #7
 c004a5c:	f04f 30ff 	mov.w	r0, #4294967295
 c004a60:	f7ff ff8e 	bl	c004980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c004a64:	4b05      	ldr	r3, [pc, #20]	; (c004a7c <SysTick_Config+0x40>)
 c004a66:	2200      	movs	r2, #0
 c004a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c004a6a:	4b04      	ldr	r3, [pc, #16]	; (c004a7c <SysTick_Config+0x40>)
 c004a6c:	2207      	movs	r2, #7
 c004a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c004a70:	2300      	movs	r3, #0
}
 c004a72:	4618      	mov	r0, r3
 c004a74:	3708      	adds	r7, #8
 c004a76:	46bd      	mov	sp, r7
 c004a78:	bd80      	pop	{r7, pc}
 c004a7a:	bf00      	nop
 c004a7c:	e000e010 	.word	0xe000e010

0c004a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c004a80:	b580      	push	{r7, lr}
 c004a82:	b082      	sub	sp, #8
 c004a84:	af00      	add	r7, sp, #0
 c004a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c004a88:	6878      	ldr	r0, [r7, #4]
 c004a8a:	f7ff ff29 	bl	c0048e0 <__NVIC_SetPriorityGrouping>
}
 c004a8e:	bf00      	nop
 c004a90:	3708      	adds	r7, #8
 c004a92:	46bd      	mov	sp, r7
 c004a94:	bd80      	pop	{r7, pc}

0c004a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c004a96:	b580      	push	{r7, lr}
 c004a98:	b086      	sub	sp, #24
 c004a9a:	af00      	add	r7, sp, #0
 c004a9c:	4603      	mov	r3, r0
 c004a9e:	60b9      	str	r1, [r7, #8]
 c004aa0:	607a      	str	r2, [r7, #4]
 c004aa2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c004aa4:	f7ff ff40 	bl	c004928 <__NVIC_GetPriorityGrouping>
 c004aa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c004aaa:	687a      	ldr	r2, [r7, #4]
 c004aac:	68b9      	ldr	r1, [r7, #8]
 c004aae:	6978      	ldr	r0, [r7, #20]
 c004ab0:	f7ff ff90 	bl	c0049d4 <NVIC_EncodePriority>
 c004ab4:	4602      	mov	r2, r0
 c004ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c004aba:	4611      	mov	r1, r2
 c004abc:	4618      	mov	r0, r3
 c004abe:	f7ff ff5f 	bl	c004980 <__NVIC_SetPriority>
}
 c004ac2:	bf00      	nop
 c004ac4:	3718      	adds	r7, #24
 c004ac6:	46bd      	mov	sp, r7
 c004ac8:	bd80      	pop	{r7, pc}

0c004aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c004aca:	b580      	push	{r7, lr}
 c004acc:	b082      	sub	sp, #8
 c004ace:	af00      	add	r7, sp, #0
 c004ad0:	4603      	mov	r3, r0
 c004ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c004ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c004ad8:	4618      	mov	r0, r3
 c004ada:	f7ff ff33 	bl	c004944 <__NVIC_EnableIRQ>
}
 c004ade:	bf00      	nop
 c004ae0:	3708      	adds	r7, #8
 c004ae2:	46bd      	mov	sp, r7
 c004ae4:	bd80      	pop	{r7, pc}

0c004ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c004ae6:	b580      	push	{r7, lr}
 c004ae8:	b082      	sub	sp, #8
 c004aea:	af00      	add	r7, sp, #0
 c004aec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c004aee:	6878      	ldr	r0, [r7, #4]
 c004af0:	f7ff ffa4 	bl	c004a3c <SysTick_Config>
 c004af4:	4603      	mov	r3, r0
}
 c004af6:	4618      	mov	r0, r3
 c004af8:	3708      	adds	r7, #8
 c004afa:	46bd      	mov	sp, r7
 c004afc:	bd80      	pop	{r7, pc}
	...

0c004b00 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 c004b00:	b480      	push	{r7}
 c004b02:	b083      	sub	sp, #12
 c004b04:	af00      	add	r7, sp, #0
 c004b06:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL   = MPU_Control | MPU_CTRL_ENABLE_Msk;
 c004b08:	4a0b      	ldr	r2, [pc, #44]	; (c004b38 <HAL_MPU_Enable+0x38>)
 c004b0a:	687b      	ldr	r3, [r7, #4]
 c004b0c:	f043 0301 	orr.w	r3, r3, #1
 c004b10:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 c004b12:	4b0a      	ldr	r3, [pc, #40]	; (c004b3c <HAL_MPU_Enable+0x3c>)
 c004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004b16:	4a09      	ldr	r2, [pc, #36]	; (c004b3c <HAL_MPU_Enable+0x3c>)
 c004b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c004b1c:	6253      	str	r3, [r2, #36]	; 0x24
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 c004b1e:	f3bf 8f5f 	dmb	sy
}
 c004b22:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 c004b24:	f3bf 8f6f 	isb	sy
}
 c004b28:	bf00      	nop

  /* Follow ARM recommendation with */
  /* - Data Memory Barrier and Instruction Synchronization to insure MPU usage */
  __DMB(); /* Force memory writes before continuing */
  __ISB(); /* Flush and refill pipeline with updated permissions */
}
 c004b2a:	bf00      	nop
 c004b2c:	370c      	adds	r7, #12
 c004b2e:	46bd      	mov	sp, r7
 c004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004b34:	4770      	bx	lr
 c004b36:	bf00      	nop
 c004b38:	e000ed90 	.word	0xe000ed90
 c004b3c:	e000ed00 	.word	0xe000ed00

0c004b40 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 c004b40:	b480      	push	{r7}
 c004b42:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 c004b44:	f3bf 8f5f 	dmb	sy
}
 c004b48:	bf00      	nop
  __DMB(); /* Force any outstanding transfers to complete before disabling MPU */

  /* Disable the MPU */
  MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 c004b4a:	4b05      	ldr	r3, [pc, #20]	; (c004b60 <HAL_MPU_Disable+0x20>)
 c004b4c:	685b      	ldr	r3, [r3, #4]
 c004b4e:	4a04      	ldr	r2, [pc, #16]	; (c004b60 <HAL_MPU_Disable+0x20>)
 c004b50:	f023 0301 	bic.w	r3, r3, #1
 c004b54:	6053      	str	r3, [r2, #4]
}
 c004b56:	bf00      	nop
 c004b58:	46bd      	mov	sp, r7
 c004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004b5e:	4770      	bx	lr
 c004b60:	e000ed90 	.word	0xe000ed90

0c004b64 <HAL_MPU_ConfigRegion>:
  * @param  MPU_RegionInit Pointer to a MPU_Region_InitTypeDef structure that contains
  *                        the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_RegionInit)
{
 c004b64:	b580      	push	{r7, lr}
 c004b66:	b082      	sub	sp, #8
 c004b68:	af00      	add	r7, sp, #0
 c004b6a:	6078      	str	r0, [r7, #4]
  MPU_ConfigRegion(MPU, MPU_RegionInit);
 c004b6c:	6879      	ldr	r1, [r7, #4]
 c004b6e:	4803      	ldr	r0, [pc, #12]	; (c004b7c <HAL_MPU_ConfigRegion+0x18>)
 c004b70:	f000 f806 	bl	c004b80 <MPU_ConfigRegion>
}
 c004b74:	bf00      	nop
 c004b76:	3708      	adds	r7, #8
 c004b78:	46bd      	mov	sp, r7
 c004b7a:	bd80      	pop	{r7, pc}
 c004b7c:	e000ed90 	.word	0xe000ed90

0c004b80 <MPU_ConfigRegion>:
  */

#if (__MPU_PRESENT == 1)

static void MPU_ConfigRegion(MPU_Type* MPUx, MPU_Region_InitTypeDef *MPU_RegionInit)
{
 c004b80:	b480      	push	{r7}
 c004b82:	b083      	sub	sp, #12
 c004b84:	af00      	add	r7, sp, #0
 c004b86:	6078      	str	r0, [r7, #4]
 c004b88:	6039      	str	r1, [r7, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 c004b8a:	f3bf 8f5f 	dmb	sy
}
 c004b8e:	bf00      	nop

  /* Follow ARM recommendation with Data Memory Barrier prior to MPU configuration */
  __DMB();

  /* Set the Region number */
  MPUx->RNR = MPU_RegionInit->Number;
 c004b90:	683b      	ldr	r3, [r7, #0]
 c004b92:	785b      	ldrb	r3, [r3, #1]
 c004b94:	461a      	mov	r2, r3
 c004b96:	687b      	ldr	r3, [r7, #4]
 c004b98:	609a      	str	r2, [r3, #8]

  if (MPU_RegionInit->Enable != MPU_REGION_DISABLE)
 c004b9a:	683b      	ldr	r3, [r7, #0]
 c004b9c:	781b      	ldrb	r3, [r3, #0]
 c004b9e:	2b00      	cmp	r3, #0
 c004ba0:	d01e      	beq.n	c004be0 <MPU_ConfigRegion+0x60>
    /* Check the parameters */
    assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_RegionInit->DisableExec));
    assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_RegionInit->AccessPermission));
    assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_RegionInit->IsShareable));

    MPUx->RBAR = (((uint32_t)MPU_RegionInit->BaseAddress & 0xFFFFFFE0U)  |
 c004ba2:	683b      	ldr	r3, [r7, #0]
 c004ba4:	685b      	ldr	r3, [r3, #4]
 c004ba6:	f023 021f 	bic.w	r2, r3, #31
                  ((uint32_t)MPU_RegionInit->IsShareable      << MPU_RBAR_SH_Pos)  |
 c004baa:	683b      	ldr	r3, [r7, #0]
 c004bac:	7bdb      	ldrb	r3, [r3, #15]
 c004bae:	00db      	lsls	r3, r3, #3
    MPUx->RBAR = (((uint32_t)MPU_RegionInit->BaseAddress & 0xFFFFFFE0U)  |
 c004bb0:	431a      	orrs	r2, r3
                  ((uint32_t)MPU_RegionInit->AccessPermission << MPU_RBAR_AP_Pos)  |
 c004bb2:	683b      	ldr	r3, [r7, #0]
 c004bb4:	7b5b      	ldrb	r3, [r3, #13]
 c004bb6:	005b      	lsls	r3, r3, #1
                  ((uint32_t)MPU_RegionInit->IsShareable      << MPU_RBAR_SH_Pos)  |
 c004bb8:	4313      	orrs	r3, r2
                  ((uint32_t)MPU_RegionInit->DisableExec      << MPU_RBAR_XN_Pos));
 c004bba:	683a      	ldr	r2, [r7, #0]
 c004bbc:	7b92      	ldrb	r2, [r2, #14]
                  ((uint32_t)MPU_RegionInit->AccessPermission << MPU_RBAR_AP_Pos)  |
 c004bbe:	431a      	orrs	r2, r3
    MPUx->RBAR = (((uint32_t)MPU_RegionInit->BaseAddress & 0xFFFFFFE0U)  |
 c004bc0:	687b      	ldr	r3, [r7, #4]
 c004bc2:	60da      	str	r2, [r3, #12]

    MPUx->RLAR = (((uint32_t)MPU_RegionInit->LimitAddress & 0xFFFFFFE0U) |
 c004bc4:	683b      	ldr	r3, [r7, #0]
 c004bc6:	689b      	ldr	r3, [r3, #8]
 c004bc8:	f023 021f 	bic.w	r2, r3, #31
                  ((uint32_t)MPU_RegionInit->AttributesIndex << MPU_RLAR_AttrIndx_Pos) |
 c004bcc:	683b      	ldr	r3, [r7, #0]
 c004bce:	7b1b      	ldrb	r3, [r3, #12]
 c004bd0:	005b      	lsls	r3, r3, #1
    MPUx->RLAR = (((uint32_t)MPU_RegionInit->LimitAddress & 0xFFFFFFE0U) |
 c004bd2:	4313      	orrs	r3, r2
                  ((uint32_t)MPU_RegionInit->Enable          << MPU_RLAR_EN_Pos));
 c004bd4:	683a      	ldr	r2, [r7, #0]
 c004bd6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)MPU_RegionInit->AttributesIndex << MPU_RLAR_AttrIndx_Pos) |
 c004bd8:	431a      	orrs	r2, r3
    MPUx->RLAR = (((uint32_t)MPU_RegionInit->LimitAddress & 0xFFFFFFE0U) |
 c004bda:	687b      	ldr	r3, [r7, #4]
 c004bdc:	611a      	str	r2, [r3, #16]
  else
  {
    MPUx->RBAR = 0U;
    MPUx->RLAR = 0U;
  }
}
 c004bde:	e005      	b.n	c004bec <MPU_ConfigRegion+0x6c>
    MPUx->RBAR = 0U;
 c004be0:	687b      	ldr	r3, [r7, #4]
 c004be2:	2200      	movs	r2, #0
 c004be4:	60da      	str	r2, [r3, #12]
    MPUx->RLAR = 0U;
 c004be6:	687b      	ldr	r3, [r7, #4]
 c004be8:	2200      	movs	r2, #0
 c004bea:	611a      	str	r2, [r3, #16]
}
 c004bec:	bf00      	nop
 c004bee:	370c      	adds	r7, #12
 c004bf0:	46bd      	mov	sp, r7
 c004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004bf6:	4770      	bx	lr

0c004bf8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 c004bf8:	b580      	push	{r7, lr}
 c004bfa:	b084      	sub	sp, #16
 c004bfc:	af00      	add	r7, sp, #0
 c004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 c004c00:	687b      	ldr	r3, [r7, #4]
 c004c02:	2b00      	cmp	r3, #0
 c004c04:	d101      	bne.n	c004c0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 c004c06:	2301      	movs	r3, #1
 c004c08:	e08d      	b.n	c004d26 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 c004c0a:	687b      	ldr	r3, [r7, #4]
 c004c0c:	681b      	ldr	r3, [r3, #0]
 c004c0e:	461a      	mov	r2, r3
 c004c10:	4b47      	ldr	r3, [pc, #284]	; (c004d30 <HAL_DMA_Init+0x138>)
 c004c12:	429a      	cmp	r2, r3
 c004c14:	d80f      	bhi.n	c004c36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 c004c16:	687b      	ldr	r3, [r7, #4]
 c004c18:	681b      	ldr	r3, [r3, #0]
 c004c1a:	461a      	mov	r2, r3
 c004c1c:	4b45      	ldr	r3, [pc, #276]	; (c004d34 <HAL_DMA_Init+0x13c>)
 c004c1e:	4413      	add	r3, r2
 c004c20:	4a45      	ldr	r2, [pc, #276]	; (c004d38 <HAL_DMA_Init+0x140>)
 c004c22:	fba2 2303 	umull	r2, r3, r2, r3
 c004c26:	091b      	lsrs	r3, r3, #4
 c004c28:	009a      	lsls	r2, r3, #2
 c004c2a:	687b      	ldr	r3, [r7, #4]
 c004c2c:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 c004c2e:	687b      	ldr	r3, [r7, #4]
 c004c30:	4a42      	ldr	r2, [pc, #264]	; (c004d3c <HAL_DMA_Init+0x144>)
 c004c32:	649a      	str	r2, [r3, #72]	; 0x48
 c004c34:	e00e      	b.n	c004c54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 c004c36:	687b      	ldr	r3, [r7, #4]
 c004c38:	681b      	ldr	r3, [r3, #0]
 c004c3a:	461a      	mov	r2, r3
 c004c3c:	4b40      	ldr	r3, [pc, #256]	; (c004d40 <HAL_DMA_Init+0x148>)
 c004c3e:	4413      	add	r3, r2
 c004c40:	4a3d      	ldr	r2, [pc, #244]	; (c004d38 <HAL_DMA_Init+0x140>)
 c004c42:	fba2 2303 	umull	r2, r3, r2, r3
 c004c46:	091b      	lsrs	r3, r3, #4
 c004c48:	009a      	lsls	r2, r3, #2
 c004c4a:	687b      	ldr	r3, [r7, #4]
 c004c4c:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 c004c4e:	687b      	ldr	r3, [r7, #4]
 c004c50:	4a3c      	ldr	r2, [pc, #240]	; (c004d44 <HAL_DMA_Init+0x14c>)
 c004c52:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 c004c54:	687b      	ldr	r3, [r7, #4]
 c004c56:	2202      	movs	r2, #2
 c004c58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 c004c5c:	687b      	ldr	r3, [r7, #4]
 c004c5e:	681b      	ldr	r3, [r3, #0]
 c004c60:	681b      	ldr	r3, [r3, #0]
 c004c62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 c004c64:	68fb      	ldr	r3, [r7, #12]
 c004c66:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 c004c6a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 c004c6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 c004c70:	687b      	ldr	r3, [r7, #4]
 c004c72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c004c74:	687b      	ldr	r3, [r7, #4]
 c004c76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 c004c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c004c7a:	687b      	ldr	r3, [r7, #4]
 c004c7c:	691b      	ldr	r3, [r3, #16]
 c004c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c004c80:	687b      	ldr	r3, [r7, #4]
 c004c82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c004c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c004c86:	687b      	ldr	r3, [r7, #4]
 c004c88:	699b      	ldr	r3, [r3, #24]
 c004c8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 c004c8c:	687b      	ldr	r3, [r7, #4]
 c004c8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c004c90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 c004c92:	687b      	ldr	r3, [r7, #4]
 c004c94:	6a1b      	ldr	r3, [r3, #32]
 c004c96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 c004c98:	68fa      	ldr	r2, [r7, #12]
 c004c9a:	4313      	orrs	r3, r2
 c004c9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 c004c9e:	687b      	ldr	r3, [r7, #4]
 c004ca0:	681b      	ldr	r3, [r3, #0]
 c004ca2:	68fa      	ldr	r2, [r7, #12]
 c004ca4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 c004ca6:	6878      	ldr	r0, [r7, #4]
 c004ca8:	f000 f8d6 	bl	c004e58 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 c004cac:	687b      	ldr	r3, [r7, #4]
 c004cae:	689b      	ldr	r3, [r3, #8]
 c004cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c004cb4:	d102      	bne.n	c004cbc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 c004cb6:	687b      	ldr	r3, [r7, #4]
 c004cb8:	2200      	movs	r2, #0
 c004cba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 c004cbc:	687b      	ldr	r3, [r7, #4]
 c004cbe:	685a      	ldr	r2, [r3, #4]
 c004cc0:	687b      	ldr	r3, [r7, #4]
 c004cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c004cc4:	b2d2      	uxtb	r2, r2
 c004cc6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 c004cc8:	687b      	ldr	r3, [r7, #4]
 c004cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c004ccc:	687a      	ldr	r2, [r7, #4]
 c004cce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 c004cd0:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 c004cd2:	687b      	ldr	r3, [r7, #4]
 c004cd4:	685b      	ldr	r3, [r3, #4]
 c004cd6:	2b00      	cmp	r3, #0
 c004cd8:	d010      	beq.n	c004cfc <HAL_DMA_Init+0x104>
 c004cda:	687b      	ldr	r3, [r7, #4]
 c004cdc:	685b      	ldr	r3, [r3, #4]
 c004cde:	2b04      	cmp	r3, #4
 c004ce0:	d80c      	bhi.n	c004cfc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 c004ce2:	6878      	ldr	r0, [r7, #4]
 c004ce4:	f000 f8f6 	bl	c004ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 c004ce8:	687b      	ldr	r3, [r7, #4]
 c004cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c004cec:	2200      	movs	r2, #0
 c004cee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 c004cf0:	687b      	ldr	r3, [r7, #4]
 c004cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004cf4:	687a      	ldr	r2, [r7, #4]
 c004cf6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 c004cf8:	605a      	str	r2, [r3, #4]
 c004cfa:	e008      	b.n	c004d0e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 c004cfc:	687b      	ldr	r3, [r7, #4]
 c004cfe:	2200      	movs	r2, #0
 c004d00:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 c004d02:	687b      	ldr	r3, [r7, #4]
 c004d04:	2200      	movs	r2, #0
 c004d06:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 c004d08:	687b      	ldr	r3, [r7, #4]
 c004d0a:	2200      	movs	r2, #0
 c004d0c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 c004d0e:	687b      	ldr	r3, [r7, #4]
 c004d10:	2200      	movs	r2, #0
 c004d12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 c004d14:	687b      	ldr	r3, [r7, #4]
 c004d16:	2201      	movs	r2, #1
 c004d18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 c004d1c:	687b      	ldr	r3, [r7, #4]
 c004d1e:	2200      	movs	r2, #0
 c004d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 c004d24:	2300      	movs	r3, #0
}
 c004d26:	4618      	mov	r0, r3
 c004d28:	3710      	adds	r7, #16
 c004d2a:	46bd      	mov	sp, r7
 c004d2c:	bd80      	pop	{r7, pc}
 c004d2e:	bf00      	nop
 c004d30:	50020407 	.word	0x50020407
 c004d34:	affdfff8 	.word	0xaffdfff8
 c004d38:	cccccccd 	.word	0xcccccccd
 c004d3c:	50020000 	.word	0x50020000
 c004d40:	affdfbf8 	.word	0xaffdfbf8
 c004d44:	50020400 	.word	0x50020400

0c004d48 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 c004d48:	b480      	push	{r7}
 c004d4a:	b087      	sub	sp, #28
 c004d4c:	af00      	add	r7, sp, #0
 c004d4e:	6078      	str	r0, [r7, #4]
 c004d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c004d52:	2300      	movs	r3, #0
 c004d54:	75fb      	strb	r3, [r7, #23]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 c004d56:	687b      	ldr	r3, [r7, #4]
 c004d58:	2b00      	cmp	r3, #0
 c004d5a:	d103      	bne.n	c004d64 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 c004d5c:	2301      	movs	r3, #1
 c004d5e:	75fb      	strb	r3, [r7, #23]
    return status;
 c004d60:	7dfb      	ldrb	r3, [r7, #23]
 c004d62:	e073      	b.n	c004e4c <HAL_DMA_ConfigChannelAttributes+0x104>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 c004d64:	687b      	ldr	r3, [r7, #4]
 c004d66:	681b      	ldr	r3, [r3, #0]
 c004d68:	681b      	ldr	r3, [r3, #0]
 c004d6a:	613b      	str	r3, [r7, #16]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 c004d6c:	683b      	ldr	r3, [r7, #0]
 c004d6e:	f003 0310 	and.w	r3, r3, #16
 c004d72:	2b00      	cmp	r3, #0
 c004d74:	d00d      	beq.n	c004d92 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 c004d76:	683b      	ldr	r3, [r7, #0]
 c004d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c004d7c:	2b00      	cmp	r3, #0
 c004d7e:	d004      	beq.n	c004d8a <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 c004d80:	693b      	ldr	r3, [r7, #16]
 c004d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c004d86:	613b      	str	r3, [r7, #16]
 c004d88:	e003      	b.n	c004d92 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 c004d8a:	693b      	ldr	r3, [r7, #16]
 c004d8c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c004d90:	613b      	str	r3, [r7, #16]
  }

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Channel */
  /* Check what is the current SECM status */
  if ((hdma->Instance->CCR & DMA_CCR_SECM) == DMA_CCR_SECM)
 c004d92:	687b      	ldr	r3, [r7, #4]
 c004d94:	681b      	ldr	r3, [r3, #0]
 c004d96:	681b      	ldr	r3, [r3, #0]
 c004d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c004d9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c004da0:	d103      	bne.n	c004daa <HAL_DMA_ConfigChannelAttributes+0x62>
  {
    /* Channel is currently secure */
    ccr_SECM = DMA_CCR_SECM;
 c004da2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c004da6:	60fb      	str	r3, [r7, #12]
 c004da8:	e001      	b.n	c004dae <HAL_DMA_ConfigChannelAttributes+0x66>
  }
  else
  {
    /* Channel is currently non-secure */
    ccr_SECM = 0U;
 c004daa:	2300      	movs	r3, #0
 c004dac:	60fb      	str	r3, [r7, #12]
  }

  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_MASK) != 0U)
 c004dae:	683b      	ldr	r3, [r7, #0]
 c004db0:	f003 0302 	and.w	r3, r3, #2
 c004db4:	2b00      	cmp	r3, #0
 c004db6:	d012      	beq.n	c004dde <HAL_DMA_ConfigChannelAttributes+0x96>
  {
    if((ChannelAttributes & DMA_CCR_SECM) != 0U)
 c004db8:	683b      	ldr	r3, [r7, #0]
 c004dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c004dbe:	2b00      	cmp	r3, #0
 c004dc0:	d007      	beq.n	c004dd2 <HAL_DMA_ConfigChannelAttributes+0x8a>
    {
      SET_BIT(ccr, DMA_CCR_SECM);
 c004dc2:	693b      	ldr	r3, [r7, #16]
 c004dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c004dc8:	613b      	str	r3, [r7, #16]
      /* Channel changed to secure */
      ccr_SECM = DMA_CCR_SECM;
 c004dca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c004dce:	60fb      	str	r3, [r7, #12]
 c004dd0:	e005      	b.n	c004dde <HAL_DMA_ConfigChannelAttributes+0x96>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_SECM);
 c004dd2:	693b      	ldr	r3, [r7, #16]
 c004dd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 c004dd8:	613b      	str	r3, [r7, #16]
      /* Channel changed to non-secure */
      ccr_SECM = 0U;
 c004dda:	2300      	movs	r3, #0
 c004ddc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Channel source */
  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_SRC_MASK) != 0U)
 c004dde:	683b      	ldr	r3, [r7, #0]
 c004de0:	f003 0304 	and.w	r3, r3, #4
 c004de4:	2b00      	cmp	r3, #0
 c004de6:	d013      	beq.n	c004e10 <HAL_DMA_ConfigChannelAttributes+0xc8>
  {
    /* Configure Source security attributes */
    if ((ChannelAttributes & DMA_CCR_SSEC) != 0x0U)
 c004de8:	683b      	ldr	r3, [r7, #0]
 c004dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c004dee:	2b00      	cmp	r3, #0
 c004df0:	d00a      	beq.n	c004e08 <HAL_DMA_ConfigChannelAttributes+0xc0>
    {
      /* SSEC can only be set if channel is secure */
      /* Otherwise configuration is not taken into account */
      if (ccr_SECM == 0U)
 c004df2:	68fb      	ldr	r3, [r7, #12]
 c004df4:	2b00      	cmp	r3, #0
 c004df6:	d102      	bne.n	c004dfe <HAL_DMA_ConfigChannelAttributes+0xb6>
      {
        /* DSEC can not be secure */
        /* Source channel is non secure */
         status = HAL_ERROR;
 c004df8:	2301      	movs	r3, #1
 c004dfa:	75fb      	strb	r3, [r7, #23]
 c004dfc:	e008      	b.n	c004e10 <HAL_DMA_ConfigChannelAttributes+0xc8>
      }
      else
      {
        SET_BIT(ccr, DMA_CCR_SSEC);
 c004dfe:	693b      	ldr	r3, [r7, #16]
 c004e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c004e04:	613b      	str	r3, [r7, #16]
 c004e06:	e003      	b.n	c004e10 <HAL_DMA_ConfigChannelAttributes+0xc8>
      }
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_SSEC);
 c004e08:	693b      	ldr	r3, [r7, #16]
 c004e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c004e0e:	613b      	str	r3, [r7, #16]
    }
  }

  /* Channel destination */
  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_DEST_MASK) != 0U)
 c004e10:	683b      	ldr	r3, [r7, #0]
 c004e12:	f003 0308 	and.w	r3, r3, #8
 c004e16:	2b00      	cmp	r3, #0
 c004e18:	d013      	beq.n	c004e42 <HAL_DMA_ConfigChannelAttributes+0xfa>
  {
    /* Configure Destination security attributes */
    if((ChannelAttributes & DMA_CCR_DSEC) != 0U)
 c004e1a:	683b      	ldr	r3, [r7, #0]
 c004e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c004e20:	2b00      	cmp	r3, #0
 c004e22:	d00a      	beq.n	c004e3a <HAL_DMA_ConfigChannelAttributes+0xf2>
    {
      if (ccr_SECM == 0U)
 c004e24:	68fb      	ldr	r3, [r7, #12]
 c004e26:	2b00      	cmp	r3, #0
 c004e28:	d102      	bne.n	c004e30 <HAL_DMA_ConfigChannelAttributes+0xe8>
      {
        /* DSEC can only be set if channel is secure */
        /* Destination channel is non secure */
         status = HAL_ERROR;
 c004e2a:	2301      	movs	r3, #1
 c004e2c:	75fb      	strb	r3, [r7, #23]
 c004e2e:	e008      	b.n	c004e42 <HAL_DMA_ConfigChannelAttributes+0xfa>
      }
      else
      {
        SET_BIT(ccr, DMA_CCR_DSEC);
 c004e30:	693b      	ldr	r3, [r7, #16]
 c004e32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c004e36:	613b      	str	r3, [r7, #16]
 c004e38:	e003      	b.n	c004e42 <HAL_DMA_ConfigChannelAttributes+0xfa>
      }
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_DSEC);
 c004e3a:	693b      	ldr	r3, [r7, #16]
 c004e3c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 c004e40:	613b      	str	r3, [r7, #16]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 c004e42:	687b      	ldr	r3, [r7, #4]
 c004e44:	681b      	ldr	r3, [r3, #0]
 c004e46:	693a      	ldr	r2, [r7, #16]
 c004e48:	601a      	str	r2, [r3, #0]

  return status;
 c004e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 c004e4c:	4618      	mov	r0, r3
 c004e4e:	371c      	adds	r7, #28
 c004e50:	46bd      	mov	sp, r7
 c004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004e56:	4770      	bx	lr

0c004e58 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 c004e58:	b480      	push	{r7}
 c004e5a:	b085      	sub	sp, #20
 c004e5c:	af00      	add	r7, sp, #0
 c004e5e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 c004e60:	687b      	ldr	r3, [r7, #4]
 c004e62:	681b      	ldr	r3, [r3, #0]
 c004e64:	461a      	mov	r2, r3
 c004e66:	4b17      	ldr	r3, [pc, #92]	; (c004ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 c004e68:	429a      	cmp	r2, r3
 c004e6a:	d80a      	bhi.n	c004e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 c004e6c:	687b      	ldr	r3, [r7, #4]
 c004e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c004e70:	089b      	lsrs	r3, r3, #2
 c004e72:	009b      	lsls	r3, r3, #2
 c004e74:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 c004e78:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 c004e7c:	687a      	ldr	r2, [r7, #4]
 c004e7e:	6513      	str	r3, [r2, #80]	; 0x50
 c004e80:	e007      	b.n	c004e92 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 c004e82:	687b      	ldr	r3, [r7, #4]
 c004e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c004e86:	089b      	lsrs	r3, r3, #2
 c004e88:	009a      	lsls	r2, r3, #2
 c004e8a:	4b0f      	ldr	r3, [pc, #60]	; (c004ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 c004e8c:	4413      	add	r3, r2
 c004e8e:	687a      	ldr	r2, [r7, #4]
 c004e90:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 c004e92:	687b      	ldr	r3, [r7, #4]
 c004e94:	681b      	ldr	r3, [r3, #0]
 c004e96:	b2db      	uxtb	r3, r3
 c004e98:	3b08      	subs	r3, #8
 c004e9a:	4a0c      	ldr	r2, [pc, #48]	; (c004ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 c004e9c:	fba2 2303 	umull	r2, r3, r2, r3
 c004ea0:	091b      	lsrs	r3, r3, #4
 c004ea2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 c004ea4:	687b      	ldr	r3, [r7, #4]
 c004ea6:	4a0a      	ldr	r2, [pc, #40]	; (c004ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 c004ea8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 c004eaa:	68fb      	ldr	r3, [r7, #12]
 c004eac:	f003 031f 	and.w	r3, r3, #31
 c004eb0:	2201      	movs	r2, #1
 c004eb2:	409a      	lsls	r2, r3
 c004eb4:	687b      	ldr	r3, [r7, #4]
 c004eb6:	659a      	str	r2, [r3, #88]	; 0x58
}
 c004eb8:	bf00      	nop
 c004eba:	3714      	adds	r7, #20
 c004ebc:	46bd      	mov	sp, r7
 c004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004ec2:	4770      	bx	lr
 c004ec4:	50020407 	.word	0x50020407
 c004ec8:	50020820 	.word	0x50020820
 c004ecc:	cccccccd 	.word	0xcccccccd
 c004ed0:	50020880 	.word	0x50020880

0c004ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 c004ed4:	b480      	push	{r7}
 c004ed6:	b085      	sub	sp, #20
 c004ed8:	af00      	add	r7, sp, #0
 c004eda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 c004edc:	687b      	ldr	r3, [r7, #4]
 c004ede:	685b      	ldr	r3, [r3, #4]
 c004ee0:	b2db      	uxtb	r3, r3
 c004ee2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 c004ee4:	68fa      	ldr	r2, [r7, #12]
 c004ee6:	4b0b      	ldr	r3, [pc, #44]	; (c004f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 c004ee8:	4413      	add	r3, r2
 c004eea:	009b      	lsls	r3, r3, #2
 c004eec:	461a      	mov	r2, r3
 c004eee:	687b      	ldr	r3, [r7, #4]
 c004ef0:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 c004ef2:	687b      	ldr	r3, [r7, #4]
 c004ef4:	4a08      	ldr	r2, [pc, #32]	; (c004f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 c004ef6:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 c004ef8:	68fb      	ldr	r3, [r7, #12]
 c004efa:	3b01      	subs	r3, #1
 c004efc:	f003 0303 	and.w	r3, r3, #3
 c004f00:	2201      	movs	r2, #1
 c004f02:	409a      	lsls	r2, r3
 c004f04:	687b      	ldr	r3, [r7, #4]
 c004f06:	665a      	str	r2, [r3, #100]	; 0x64
}
 c004f08:	bf00      	nop
 c004f0a:	3714      	adds	r7, #20
 c004f0c:	46bd      	mov	sp, r7
 c004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004f12:	4770      	bx	lr
 c004f14:	1400823f 	.word	0x1400823f
 c004f18:	50020940 	.word	0x50020940

0c004f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c004f1c:	b480      	push	{r7}
 c004f1e:	b087      	sub	sp, #28
 c004f20:	af00      	add	r7, sp, #0
 c004f22:	6078      	str	r0, [r7, #4]
 c004f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c004f26:	2300      	movs	r3, #0
 c004f28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c004f2a:	e158      	b.n	c0051de <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c004f2c:	683b      	ldr	r3, [r7, #0]
 c004f2e:	681a      	ldr	r2, [r3, #0]
 c004f30:	2101      	movs	r1, #1
 c004f32:	697b      	ldr	r3, [r7, #20]
 c004f34:	fa01 f303 	lsl.w	r3, r1, r3
 c004f38:	4013      	ands	r3, r2
 c004f3a:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 c004f3c:	68fb      	ldr	r3, [r7, #12]
 c004f3e:	2b00      	cmp	r3, #0
 c004f40:	f000 814a 	beq.w	c0051d8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c004f44:	683b      	ldr	r3, [r7, #0]
 c004f46:	685b      	ldr	r3, [r3, #4]
 c004f48:	2b01      	cmp	r3, #1
 c004f4a:	d00b      	beq.n	c004f64 <HAL_GPIO_Init+0x48>
 c004f4c:	683b      	ldr	r3, [r7, #0]
 c004f4e:	685b      	ldr	r3, [r3, #4]
 c004f50:	2b02      	cmp	r3, #2
 c004f52:	d007      	beq.n	c004f64 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c004f54:	683b      	ldr	r3, [r7, #0]
 c004f56:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c004f58:	2b11      	cmp	r3, #17
 c004f5a:	d003      	beq.n	c004f64 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c004f5c:	683b      	ldr	r3, [r7, #0]
 c004f5e:	685b      	ldr	r3, [r3, #4]
 c004f60:	2b12      	cmp	r3, #18
 c004f62:	d130      	bne.n	c004fc6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c004f64:	687b      	ldr	r3, [r7, #4]
 c004f66:	689b      	ldr	r3, [r3, #8]
 c004f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c004f6a:	697b      	ldr	r3, [r7, #20]
 c004f6c:	005b      	lsls	r3, r3, #1
 c004f6e:	2203      	movs	r2, #3
 c004f70:	fa02 f303 	lsl.w	r3, r2, r3
 c004f74:	43db      	mvns	r3, r3
 c004f76:	693a      	ldr	r2, [r7, #16]
 c004f78:	4013      	ands	r3, r2
 c004f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c004f7c:	683b      	ldr	r3, [r7, #0]
 c004f7e:	68da      	ldr	r2, [r3, #12]
 c004f80:	697b      	ldr	r3, [r7, #20]
 c004f82:	005b      	lsls	r3, r3, #1
 c004f84:	fa02 f303 	lsl.w	r3, r2, r3
 c004f88:	693a      	ldr	r2, [r7, #16]
 c004f8a:	4313      	orrs	r3, r2
 c004f8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c004f8e:	687b      	ldr	r3, [r7, #4]
 c004f90:	693a      	ldr	r2, [r7, #16]
 c004f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c004f94:	687b      	ldr	r3, [r7, #4]
 c004f96:	685b      	ldr	r3, [r3, #4]
 c004f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c004f9a:	2201      	movs	r2, #1
 c004f9c:	697b      	ldr	r3, [r7, #20]
 c004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 c004fa2:	43db      	mvns	r3, r3
 c004fa4:	693a      	ldr	r2, [r7, #16]
 c004fa6:	4013      	ands	r3, r2
 c004fa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 c004faa:	683b      	ldr	r3, [r7, #0]
 c004fac:	685b      	ldr	r3, [r3, #4]
 c004fae:	091b      	lsrs	r3, r3, #4
 c004fb0:	f003 0201 	and.w	r2, r3, #1
 c004fb4:	697b      	ldr	r3, [r7, #20]
 c004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 c004fba:	693a      	ldr	r2, [r7, #16]
 c004fbc:	4313      	orrs	r3, r2
 c004fbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c004fc0:	687b      	ldr	r3, [r7, #4]
 c004fc2:	693a      	ldr	r2, [r7, #16]
 c004fc4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 c004fc6:	687b      	ldr	r3, [r7, #4]
 c004fc8:	68db      	ldr	r3, [r3, #12]
 c004fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c004fcc:	697b      	ldr	r3, [r7, #20]
 c004fce:	005b      	lsls	r3, r3, #1
 c004fd0:	2203      	movs	r2, #3
 c004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 c004fd6:	43db      	mvns	r3, r3
 c004fd8:	693a      	ldr	r2, [r7, #16]
 c004fda:	4013      	ands	r3, r2
 c004fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c004fde:	683b      	ldr	r3, [r7, #0]
 c004fe0:	689a      	ldr	r2, [r3, #8]
 c004fe2:	697b      	ldr	r3, [r7, #20]
 c004fe4:	005b      	lsls	r3, r3, #1
 c004fe6:	fa02 f303 	lsl.w	r3, r2, r3
 c004fea:	693a      	ldr	r2, [r7, #16]
 c004fec:	4313      	orrs	r3, r2
 c004fee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 c004ff0:	687b      	ldr	r3, [r7, #4]
 c004ff2:	693a      	ldr	r2, [r7, #16]
 c004ff4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c004ff6:	683b      	ldr	r3, [r7, #0]
 c004ff8:	685b      	ldr	r3, [r3, #4]
 c004ffa:	2b02      	cmp	r3, #2
 c004ffc:	d003      	beq.n	c005006 <HAL_GPIO_Init+0xea>
 c004ffe:	683b      	ldr	r3, [r7, #0]
 c005000:	685b      	ldr	r3, [r3, #4]
 c005002:	2b12      	cmp	r3, #18
 c005004:	d123      	bne.n	c00504e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c005006:	697b      	ldr	r3, [r7, #20]
 c005008:	08da      	lsrs	r2, r3, #3
 c00500a:	687b      	ldr	r3, [r7, #4]
 c00500c:	3208      	adds	r2, #8
 c00500e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c005012:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c005014:	697b      	ldr	r3, [r7, #20]
 c005016:	f003 0307 	and.w	r3, r3, #7
 c00501a:	009b      	lsls	r3, r3, #2
 c00501c:	220f      	movs	r2, #15
 c00501e:	fa02 f303 	lsl.w	r3, r2, r3
 c005022:	43db      	mvns	r3, r3
 c005024:	693a      	ldr	r2, [r7, #16]
 c005026:	4013      	ands	r3, r2
 c005028:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c00502a:	683b      	ldr	r3, [r7, #0]
 c00502c:	691a      	ldr	r2, [r3, #16]
 c00502e:	697b      	ldr	r3, [r7, #20]
 c005030:	f003 0307 	and.w	r3, r3, #7
 c005034:	009b      	lsls	r3, r3, #2
 c005036:	fa02 f303 	lsl.w	r3, r2, r3
 c00503a:	693a      	ldr	r2, [r7, #16]
 c00503c:	4313      	orrs	r3, r2
 c00503e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c005040:	697b      	ldr	r3, [r7, #20]
 c005042:	08da      	lsrs	r2, r3, #3
 c005044:	687b      	ldr	r3, [r7, #4]
 c005046:	3208      	adds	r2, #8
 c005048:	6939      	ldr	r1, [r7, #16]
 c00504a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c00504e:	687b      	ldr	r3, [r7, #4]
 c005050:	681b      	ldr	r3, [r3, #0]
 c005052:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c005054:	697b      	ldr	r3, [r7, #20]
 c005056:	005b      	lsls	r3, r3, #1
 c005058:	2203      	movs	r2, #3
 c00505a:	fa02 f303 	lsl.w	r3, r2, r3
 c00505e:	43db      	mvns	r3, r3
 c005060:	693a      	ldr	r2, [r7, #16]
 c005062:	4013      	ands	r3, r2
 c005064:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c005066:	683b      	ldr	r3, [r7, #0]
 c005068:	685b      	ldr	r3, [r3, #4]
 c00506a:	f003 0203 	and.w	r2, r3, #3
 c00506e:	697b      	ldr	r3, [r7, #20]
 c005070:	005b      	lsls	r3, r3, #1
 c005072:	fa02 f303 	lsl.w	r3, r2, r3
 c005076:	693a      	ldr	r2, [r7, #16]
 c005078:	4313      	orrs	r3, r2
 c00507a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c00507c:	687b      	ldr	r3, [r7, #4]
 c00507e:	693a      	ldr	r2, [r7, #16]
 c005080:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c005082:	683b      	ldr	r3, [r7, #0]
 c005084:	685b      	ldr	r3, [r3, #4]
 c005086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00508a:	2b00      	cmp	r3, #0
 c00508c:	f000 80a4 	beq.w	c0051d8 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c005090:	4a5a      	ldr	r2, [pc, #360]	; (c0051fc <HAL_GPIO_Init+0x2e0>)
 c005092:	697b      	ldr	r3, [r7, #20]
 c005094:	089b      	lsrs	r3, r3, #2
 c005096:	3318      	adds	r3, #24
 c005098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00509c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c00509e:	697b      	ldr	r3, [r7, #20]
 c0050a0:	f003 0303 	and.w	r3, r3, #3
 c0050a4:	00db      	lsls	r3, r3, #3
 c0050a6:	220f      	movs	r2, #15
 c0050a8:	fa02 f303 	lsl.w	r3, r2, r3
 c0050ac:	43db      	mvns	r3, r3
 c0050ae:	693a      	ldr	r2, [r7, #16]
 c0050b0:	4013      	ands	r3, r2
 c0050b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c0050b4:	687b      	ldr	r3, [r7, #4]
 c0050b6:	4a52      	ldr	r2, [pc, #328]	; (c005200 <HAL_GPIO_Init+0x2e4>)
 c0050b8:	4293      	cmp	r3, r2
 c0050ba:	d025      	beq.n	c005108 <HAL_GPIO_Init+0x1ec>
 c0050bc:	687b      	ldr	r3, [r7, #4]
 c0050be:	4a51      	ldr	r2, [pc, #324]	; (c005204 <HAL_GPIO_Init+0x2e8>)
 c0050c0:	4293      	cmp	r3, r2
 c0050c2:	d01f      	beq.n	c005104 <HAL_GPIO_Init+0x1e8>
 c0050c4:	687b      	ldr	r3, [r7, #4]
 c0050c6:	4a50      	ldr	r2, [pc, #320]	; (c005208 <HAL_GPIO_Init+0x2ec>)
 c0050c8:	4293      	cmp	r3, r2
 c0050ca:	d019      	beq.n	c005100 <HAL_GPIO_Init+0x1e4>
 c0050cc:	687b      	ldr	r3, [r7, #4]
 c0050ce:	4a4f      	ldr	r2, [pc, #316]	; (c00520c <HAL_GPIO_Init+0x2f0>)
 c0050d0:	4293      	cmp	r3, r2
 c0050d2:	d013      	beq.n	c0050fc <HAL_GPIO_Init+0x1e0>
 c0050d4:	687b      	ldr	r3, [r7, #4]
 c0050d6:	4a4e      	ldr	r2, [pc, #312]	; (c005210 <HAL_GPIO_Init+0x2f4>)
 c0050d8:	4293      	cmp	r3, r2
 c0050da:	d00d      	beq.n	c0050f8 <HAL_GPIO_Init+0x1dc>
 c0050dc:	687b      	ldr	r3, [r7, #4]
 c0050de:	4a4d      	ldr	r2, [pc, #308]	; (c005214 <HAL_GPIO_Init+0x2f8>)
 c0050e0:	4293      	cmp	r3, r2
 c0050e2:	d007      	beq.n	c0050f4 <HAL_GPIO_Init+0x1d8>
 c0050e4:	687b      	ldr	r3, [r7, #4]
 c0050e6:	4a4c      	ldr	r2, [pc, #304]	; (c005218 <HAL_GPIO_Init+0x2fc>)
 c0050e8:	4293      	cmp	r3, r2
 c0050ea:	d101      	bne.n	c0050f0 <HAL_GPIO_Init+0x1d4>
 c0050ec:	2306      	movs	r3, #6
 c0050ee:	e00c      	b.n	c00510a <HAL_GPIO_Init+0x1ee>
 c0050f0:	2307      	movs	r3, #7
 c0050f2:	e00a      	b.n	c00510a <HAL_GPIO_Init+0x1ee>
 c0050f4:	2305      	movs	r3, #5
 c0050f6:	e008      	b.n	c00510a <HAL_GPIO_Init+0x1ee>
 c0050f8:	2304      	movs	r3, #4
 c0050fa:	e006      	b.n	c00510a <HAL_GPIO_Init+0x1ee>
 c0050fc:	2303      	movs	r3, #3
 c0050fe:	e004      	b.n	c00510a <HAL_GPIO_Init+0x1ee>
 c005100:	2302      	movs	r3, #2
 c005102:	e002      	b.n	c00510a <HAL_GPIO_Init+0x1ee>
 c005104:	2301      	movs	r3, #1
 c005106:	e000      	b.n	c00510a <HAL_GPIO_Init+0x1ee>
 c005108:	2300      	movs	r3, #0
 c00510a:	697a      	ldr	r2, [r7, #20]
 c00510c:	f002 0203 	and.w	r2, r2, #3
 c005110:	00d2      	lsls	r2, r2, #3
 c005112:	4093      	lsls	r3, r2
 c005114:	693a      	ldr	r2, [r7, #16]
 c005116:	4313      	orrs	r3, r2
 c005118:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c00511a:	4938      	ldr	r1, [pc, #224]	; (c0051fc <HAL_GPIO_Init+0x2e0>)
 c00511c:	697b      	ldr	r3, [r7, #20]
 c00511e:	089b      	lsrs	r3, r3, #2
 c005120:	3318      	adds	r3, #24
 c005122:	693a      	ldr	r2, [r7, #16]
 c005124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 c005128:	4b34      	ldr	r3, [pc, #208]	; (c0051fc <HAL_GPIO_Init+0x2e0>)
 c00512a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c00512e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c005130:	68fb      	ldr	r3, [r7, #12]
 c005132:	43db      	mvns	r3, r3
 c005134:	693a      	ldr	r2, [r7, #16]
 c005136:	4013      	ands	r3, r2
 c005138:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c00513a:	683b      	ldr	r3, [r7, #0]
 c00513c:	685b      	ldr	r3, [r3, #4]
 c00513e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c005142:	2b00      	cmp	r3, #0
 c005144:	d003      	beq.n	c00514e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 c005146:	693a      	ldr	r2, [r7, #16]
 c005148:	68fb      	ldr	r3, [r7, #12]
 c00514a:	4313      	orrs	r3, r2
 c00514c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c00514e:	4a2b      	ldr	r2, [pc, #172]	; (c0051fc <HAL_GPIO_Init+0x2e0>)
 c005150:	693b      	ldr	r3, [r7, #16]
 c005152:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 c005156:	4b29      	ldr	r3, [pc, #164]	; (c0051fc <HAL_GPIO_Init+0x2e0>)
 c005158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c00515c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c00515e:	68fb      	ldr	r3, [r7, #12]
 c005160:	43db      	mvns	r3, r3
 c005162:	693a      	ldr	r2, [r7, #16]
 c005164:	4013      	ands	r3, r2
 c005166:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c005168:	683b      	ldr	r3, [r7, #0]
 c00516a:	685b      	ldr	r3, [r3, #4]
 c00516c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c005170:	2b00      	cmp	r3, #0
 c005172:	d003      	beq.n	c00517c <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 c005174:	693a      	ldr	r2, [r7, #16]
 c005176:	68fb      	ldr	r3, [r7, #12]
 c005178:	4313      	orrs	r3, r2
 c00517a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c00517c:	4a1f      	ldr	r2, [pc, #124]	; (c0051fc <HAL_GPIO_Init+0x2e0>)
 c00517e:	693b      	ldr	r3, [r7, #16]
 c005180:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c005184:	4b1d      	ldr	r3, [pc, #116]	; (c0051fc <HAL_GPIO_Init+0x2e0>)
 c005186:	681b      	ldr	r3, [r3, #0]
 c005188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c00518a:	68fb      	ldr	r3, [r7, #12]
 c00518c:	43db      	mvns	r3, r3
 c00518e:	693a      	ldr	r2, [r7, #16]
 c005190:	4013      	ands	r3, r2
 c005192:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c005194:	683b      	ldr	r3, [r7, #0]
 c005196:	685b      	ldr	r3, [r3, #4]
 c005198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c00519c:	2b00      	cmp	r3, #0
 c00519e:	d003      	beq.n	c0051a8 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 c0051a0:	693a      	ldr	r2, [r7, #16]
 c0051a2:	68fb      	ldr	r3, [r7, #12]
 c0051a4:	4313      	orrs	r3, r2
 c0051a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c0051a8:	4a14      	ldr	r2, [pc, #80]	; (c0051fc <HAL_GPIO_Init+0x2e0>)
 c0051aa:	693b      	ldr	r3, [r7, #16]
 c0051ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c0051ae:	4b13      	ldr	r3, [pc, #76]	; (c0051fc <HAL_GPIO_Init+0x2e0>)
 c0051b0:	685b      	ldr	r3, [r3, #4]
 c0051b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0051b4:	68fb      	ldr	r3, [r7, #12]
 c0051b6:	43db      	mvns	r3, r3
 c0051b8:	693a      	ldr	r2, [r7, #16]
 c0051ba:	4013      	ands	r3, r2
 c0051bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c0051be:	683b      	ldr	r3, [r7, #0]
 c0051c0:	685b      	ldr	r3, [r3, #4]
 c0051c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c0051c6:	2b00      	cmp	r3, #0
 c0051c8:	d003      	beq.n	c0051d2 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 c0051ca:	693a      	ldr	r2, [r7, #16]
 c0051cc:	68fb      	ldr	r3, [r7, #12]
 c0051ce:	4313      	orrs	r3, r2
 c0051d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c0051d2:	4a0a      	ldr	r2, [pc, #40]	; (c0051fc <HAL_GPIO_Init+0x2e0>)
 c0051d4:	693b      	ldr	r3, [r7, #16]
 c0051d6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 c0051d8:	697b      	ldr	r3, [r7, #20]
 c0051da:	3301      	adds	r3, #1
 c0051dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c0051de:	683b      	ldr	r3, [r7, #0]
 c0051e0:	681a      	ldr	r2, [r3, #0]
 c0051e2:	697b      	ldr	r3, [r7, #20]
 c0051e4:	fa22 f303 	lsr.w	r3, r2, r3
 c0051e8:	2b00      	cmp	r3, #0
 c0051ea:	f47f ae9f 	bne.w	c004f2c <HAL_GPIO_Init+0x10>
  }
}
 c0051ee:	bf00      	nop
 c0051f0:	bf00      	nop
 c0051f2:	371c      	adds	r7, #28
 c0051f4:	46bd      	mov	sp, r7
 c0051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0051fa:	4770      	bx	lr
 c0051fc:	5002f400 	.word	0x5002f400
 c005200:	52020000 	.word	0x52020000
 c005204:	52020400 	.word	0x52020400
 c005208:	52020800 	.word	0x52020800
 c00520c:	52020c00 	.word	0x52020c00
 c005210:	52021000 	.word	0x52021000
 c005214:	52021400 	.word	0x52021400
 c005218:	52021800 	.word	0x52021800

0c00521c <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c00521c:	b480      	push	{r7}
 c00521e:	b085      	sub	sp, #20
 c005220:	af00      	add	r7, sp, #0
 c005222:	6078      	str	r0, [r7, #4]
 c005224:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c005226:	683b      	ldr	r3, [r7, #0]
 c005228:	f5b3 7f41 	cmp.w	r3, #772	; 0x304
 c00522c:	d216      	bcs.n	c00525c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c00522e:	687b      	ldr	r3, [r7, #4]
 c005230:	0f1b      	lsrs	r3, r3, #28
 c005232:	015a      	lsls	r2, r3, #5
 c005234:	687b      	ldr	r3, [r7, #4]
 c005236:	f003 031f 	and.w	r3, r3, #31
 c00523a:	4413      	add	r3, r2
 c00523c:	2b32      	cmp	r3, #50	; 0x32
 c00523e:	d80d      	bhi.n	c00525c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c005240:	687b      	ldr	r3, [r7, #4]
 c005242:	f003 0320 	and.w	r3, r3, #32
 c005246:	2b00      	cmp	r3, #0
 c005248:	d00a      	beq.n	c005260 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
 c00524a:	687b      	ldr	r3, [r7, #4]
 c00524c:	0f1b      	lsrs	r3, r3, #28
 c00524e:	015a      	lsls	r2, r3, #5
 c005250:	687b      	ldr	r3, [r7, #4]
 c005252:	f003 031f 	and.w	r3, r3, #31
 c005256:	4413      	add	r3, r2
 c005258:	2b00      	cmp	r3, #0
 c00525a:	d001      	beq.n	c005260 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
  {
    return HAL_ERROR;
 c00525c:	2301      	movs	r3, #1
 c00525e:	e0a4      	b.n	c0053aa <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18e>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c005260:	687b      	ldr	r3, [r7, #4]
 c005262:	f003 0320 	and.w	r3, r3, #32
 c005266:	2b00      	cmp	r3, #0
 c005268:	d04a      	beq.n	c005300 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xe4>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c00526a:	683a      	ldr	r2, [r7, #0]
 c00526c:	f240 1301 	movw	r3, #257	; 0x101
 c005270:	4013      	ands	r3, r2
 c005272:	f240 1201 	movw	r2, #257	; 0x101
 c005276:	4293      	cmp	r3, r2
 c005278:	d10c      	bne.n	c005294 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x78>
    {
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c00527a:	4b4f      	ldr	r3, [pc, #316]	; (c0053b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00527c:	691b      	ldr	r3, [r3, #16]
 c00527e:	4b4e      	ldr	r3, [pc, #312]	; (c0053b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005280:	f04f 32ff 	mov.w	r2, #4294967295
 c005284:	611a      	str	r2, [r3, #16]
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c005286:	4b4c      	ldr	r3, [pc, #304]	; (c0053b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005288:	695a      	ldr	r2, [r3, #20]
 c00528a:	494b      	ldr	r1, [pc, #300]	; (c0053b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00528c:	4b4b      	ldr	r3, [pc, #300]	; (c0053bc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a0>)
 c00528e:	4313      	orrs	r3, r2
 c005290:	614b      	str	r3, [r1, #20]
 c005292:	e00f      	b.n	c0052b4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c005294:	683b      	ldr	r3, [r7, #0]
 c005296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00529a:	2b00      	cmp	r3, #0
 c00529c:	d00a      	beq.n	c0052b4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
    {
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c00529e:	4b46      	ldr	r3, [pc, #280]	; (c0053b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0052a0:	691b      	ldr	r3, [r3, #16]
 c0052a2:	4b45      	ldr	r3, [pc, #276]	; (c0053b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0052a4:	2200      	movs	r2, #0
 c0052a6:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c0052a8:	4b43      	ldr	r3, [pc, #268]	; (c0053b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0052aa:	695a      	ldr	r2, [r3, #20]
 c0052ac:	4942      	ldr	r1, [pc, #264]	; (c0053b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0052ae:	4b44      	ldr	r3, [pc, #272]	; (c0053c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0052b0:	4013      	ands	r3, r2
 c0052b2:	614b      	str	r3, [r1, #20]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c0052b4:	683a      	ldr	r2, [r7, #0]
 c0052b6:	f240 2302 	movw	r3, #514	; 0x202
 c0052ba:	4013      	ands	r3, r2
 c0052bc:	f240 2202 	movw	r2, #514	; 0x202
 c0052c0:	4293      	cmp	r3, r2
 c0052c2:	d10c      	bne.n	c0052de <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xc2>
    {
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c0052c4:	4b3c      	ldr	r3, [pc, #240]	; (c0053b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0052c6:	6a1b      	ldr	r3, [r3, #32]
 c0052c8:	4b3b      	ldr	r3, [pc, #236]	; (c0053b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0052ca:	f04f 32ff 	mov.w	r2, #4294967295
 c0052ce:	621a      	str	r2, [r3, #32]
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c0052d0:	4b39      	ldr	r3, [pc, #228]	; (c0053b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0052d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0052d4:	4938      	ldr	r1, [pc, #224]	; (c0053b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0052d6:	4b39      	ldr	r3, [pc, #228]	; (c0053bc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a0>)
 c0052d8:	4313      	orrs	r3, r2
 c0052da:	624b      	str	r3, [r1, #36]	; 0x24
 c0052dc:	e064      	b.n	c0053a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c0052de:	683b      	ldr	r3, [r7, #0]
 c0052e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c0052e4:	2b00      	cmp	r3, #0
 c0052e6:	d05f      	beq.n	c0053a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    {
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c0052e8:	4b33      	ldr	r3, [pc, #204]	; (c0053b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0052ea:	6a1b      	ldr	r3, [r3, #32]
 c0052ec:	4b32      	ldr	r3, [pc, #200]	; (c0053b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0052ee:	2200      	movs	r2, #0
 c0052f0:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c0052f2:	4b31      	ldr	r3, [pc, #196]	; (c0053b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0052f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0052f6:	4930      	ldr	r1, [pc, #192]	; (c0053b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0052f8:	4b31      	ldr	r3, [pc, #196]	; (c0053c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0052fa:	4013      	ands	r3, r2
 c0052fc:	624b      	str	r3, [r1, #36]	; 0x24
 c0052fe:	e053      	b.n	c0053a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
  {
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c005300:	687b      	ldr	r3, [r7, #4]
 c005302:	0f1a      	lsrs	r2, r3, #28
 c005304:	4b2f      	ldr	r3, [pc, #188]	; (c0053c4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a8>)
 c005306:	4413      	add	r3, r2
 c005308:	009b      	lsls	r3, r3, #2
 c00530a:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c00530c:	683a      	ldr	r2, [r7, #0]
 c00530e:	f240 1301 	movw	r3, #257	; 0x101
 c005312:	4013      	ands	r3, r2
 c005314:	f240 1201 	movw	r2, #257	; 0x101
 c005318:	4293      	cmp	r3, r2
 c00531a:	d10a      	bne.n	c005332 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x116>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c00531c:	68fb      	ldr	r3, [r7, #12]
 c00531e:	6819      	ldr	r1, [r3, #0]
 c005320:	687b      	ldr	r3, [r7, #4]
 c005322:	f003 031f 	and.w	r3, r3, #31
 c005326:	2201      	movs	r2, #1
 c005328:	409a      	lsls	r2, r3
 c00532a:	68fb      	ldr	r3, [r7, #12]
 c00532c:	430a      	orrs	r2, r1
 c00532e:	601a      	str	r2, [r3, #0]
 c005330:	e010      	b.n	c005354 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x138>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c005332:	683b      	ldr	r3, [r7, #0]
 c005334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c005338:	2b00      	cmp	r3, #0
 c00533a:	d00b      	beq.n	c005354 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x138>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c00533c:	68fb      	ldr	r3, [r7, #12]
 c00533e:	6819      	ldr	r1, [r3, #0]
 c005340:	687b      	ldr	r3, [r7, #4]
 c005342:	f003 031f 	and.w	r3, r3, #31
 c005346:	2201      	movs	r2, #1
 c005348:	fa02 f303 	lsl.w	r3, r2, r3
 c00534c:	43da      	mvns	r2, r3
 c00534e:	68fb      	ldr	r3, [r7, #12]
 c005350:	400a      	ands	r2, r1
 c005352:	601a      	str	r2, [r3, #0]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(GTZC_TZSC->PRIVCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c005354:	687b      	ldr	r3, [r7, #4]
 c005356:	0f1a      	lsrs	r2, r3, #28
 c005358:	4b1b      	ldr	r3, [pc, #108]	; (c0053c8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1ac>)
 c00535a:	4413      	add	r3, r2
 c00535c:	009b      	lsls	r3, r3, #2
 c00535e:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c005360:	683a      	ldr	r2, [r7, #0]
 c005362:	f240 2302 	movw	r3, #514	; 0x202
 c005366:	4013      	ands	r3, r2
 c005368:	f240 2202 	movw	r2, #514	; 0x202
 c00536c:	4293      	cmp	r3, r2
 c00536e:	d10a      	bne.n	c005386 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x16a>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c005370:	68fb      	ldr	r3, [r7, #12]
 c005372:	6819      	ldr	r1, [r3, #0]
 c005374:	687b      	ldr	r3, [r7, #4]
 c005376:	f003 031f 	and.w	r3, r3, #31
 c00537a:	2201      	movs	r2, #1
 c00537c:	409a      	lsls	r2, r3
 c00537e:	68fb      	ldr	r3, [r7, #12]
 c005380:	430a      	orrs	r2, r1
 c005382:	601a      	str	r2, [r3, #0]
 c005384:	e010      	b.n	c0053a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c005386:	683b      	ldr	r3, [r7, #0]
 c005388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c00538c:	2b00      	cmp	r3, #0
 c00538e:	d00b      	beq.n	c0053a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c005390:	68fb      	ldr	r3, [r7, #12]
 c005392:	6819      	ldr	r1, [r3, #0]
 c005394:	687b      	ldr	r3, [r7, #4]
 c005396:	f003 031f 	and.w	r3, r3, #31
 c00539a:	2201      	movs	r2, #1
 c00539c:	fa02 f303 	lsl.w	r3, r2, r3
 c0053a0:	43da      	mvns	r2, r3
 c0053a2:	68fb      	ldr	r3, [r7, #12]
 c0053a4:	400a      	ands	r2, r1
 c0053a6:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c0053a8:	2300      	movs	r3, #0
}
 c0053aa:	4618      	mov	r0, r3
 c0053ac:	3714      	adds	r7, #20
 c0053ae:	46bd      	mov	sp, r7
 c0053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0053b4:	4770      	bx	lr
 c0053b6:	bf00      	nop
 c0053b8:	50032400 	.word	0x50032400
 c0053bc:	00076fff 	.word	0x00076fff
 c0053c0:	fff89000 	.word	0xfff89000
 c0053c4:	1400c904 	.word	0x1400c904
 c0053c8:	1400c908 	.word	0x1400c908

0c0053cc <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c0053cc:	b480      	push	{r7}
 c0053ce:	b089      	sub	sp, #36	; 0x24
 c0053d0:	af00      	add	r7, sp, #0
 c0053d2:	6078      	str	r0, [r7, #4]
 c0053d4:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0053d6:	687b      	ldr	r3, [r7, #4]
 c0053d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c0053dc:	d00b      	beq.n	c0053f6 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c0053de:	687b      	ldr	r3, [r7, #4]
 c0053e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0053e4:	d007      	beq.n	c0053f6 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c0053e6:	687b      	ldr	r3, [r7, #4]
 c0053e8:	4a36      	ldr	r2, [pc, #216]	; (c0054c4 <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c0053ea:	4293      	cmp	r3, r2
 c0053ec:	d003      	beq.n	c0053f6 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c0053ee:	687b      	ldr	r3, [r7, #4]
 c0053f0:	4a35      	ldr	r2, [pc, #212]	; (c0054c8 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c0053f2:	4293      	cmp	r3, r2
 c0053f4:	d111      	bne.n	c00541a <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c0053f6:	683b      	ldr	r3, [r7, #0]
 c0053f8:	681b      	ldr	r3, [r3, #0]
 c0053fa:	2b00      	cmp	r3, #0
 c0053fc:	d004      	beq.n	c005408 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c0053fe:	683b      	ldr	r3, [r7, #0]
 c005400:	681b      	ldr	r3, [r3, #0]
 c005402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c005406:	d108      	bne.n	c00541a <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c005408:	683b      	ldr	r3, [r7, #0]
 c00540a:	685b      	ldr	r3, [r3, #4]
 c00540c:	2b00      	cmp	r3, #0
 c00540e:	d006      	beq.n	c00541e <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c005410:	683b      	ldr	r3, [r7, #0]
 c005412:	685b      	ldr	r3, [r3, #4]
 c005414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c005418:	d001      	beq.n	c00541e <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c00541a:	2301      	movs	r3, #1
 c00541c:	e04b      	b.n	c0054b6 <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c00541e:	683b      	ldr	r3, [r7, #0]
 c005420:	685b      	ldr	r3, [r3, #4]
 c005422:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c005424:	683b      	ldr	r3, [r7, #0]
 c005426:	681b      	ldr	r3, [r3, #0]
 c005428:	693a      	ldr	r2, [r7, #16]
 c00542a:	4313      	orrs	r3, r2
 c00542c:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c00542e:	687b      	ldr	r3, [r7, #4]
 c005430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c005434:	d003      	beq.n	c00543e <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c005436:	687b      	ldr	r3, [r7, #4]
 c005438:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c00543c:	d105      	bne.n	c00544a <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c00543e:	4b23      	ldr	r3, [pc, #140]	; (c0054cc <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c005440:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c005442:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c005446:	61bb      	str	r3, [r7, #24]
 c005448:	e004      	b.n	c005454 <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c00544a:	4b21      	ldr	r3, [pc, #132]	; (c0054d0 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c00544c:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c00544e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c005452:	61bb      	str	r3, [r7, #24]
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c005454:	69fb      	ldr	r3, [r7, #28]
 c005456:	681b      	ldr	r3, [r3, #0]
 c005458:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c00545c:	693b      	ldr	r3, [r7, #16]
 c00545e:	431a      	orrs	r2, r3
 c005460:	69fb      	ldr	r3, [r7, #28]
 c005462:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);
  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c005464:	69bb      	ldr	r3, [r7, #24]
 c005466:	0b5b      	lsrs	r3, r3, #13
 c005468:	2201      	movs	r2, #1
 c00546a:	fa02 f303 	lsl.w	r3, r2, r3
 c00546e:	3b01      	subs	r3, #1
 c005470:	60fb      	str	r3, [r7, #12]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c005472:	69fb      	ldr	r3, [r7, #28]
 c005474:	691a      	ldr	r2, [r3, #16]
 c005476:	68fb      	ldr	r3, [r7, #12]
 c005478:	43db      	mvns	r3, r3
 c00547a:	401a      	ands	r2, r3
 c00547c:	683b      	ldr	r3, [r7, #0]
 c00547e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c005480:	431a      	orrs	r2, r3
 c005482:	69fb      	ldr	r3, [r7, #28]
 c005484:	611a      	str	r2, [r3, #16]

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c005486:	69bb      	ldr	r3, [r7, #24]
 c005488:	0b5b      	lsrs	r3, r3, #13
 c00548a:	60bb      	str	r3, [r7, #8]
  for (i = 0U; i < size_in_superblocks; i++)
 c00548c:	2300      	movs	r3, #0
 c00548e:	617b      	str	r3, [r7, #20]
 c005490:	e00c      	b.n	c0054ac <HAL_GTZC_MPCBB_ConfigMem+0xe0>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c005492:	683b      	ldr	r3, [r7, #0]
 c005494:	697a      	ldr	r2, [r7, #20]
 c005496:	3202      	adds	r2, #2
 c005498:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c00549c:	69fb      	ldr	r3, [r7, #28]
 c00549e:	697a      	ldr	r2, [r7, #20]
 c0054a0:	3240      	adds	r2, #64	; 0x40
 c0054a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c0054a6:	697b      	ldr	r3, [r7, #20]
 c0054a8:	3301      	adds	r3, #1
 c0054aa:	617b      	str	r3, [r7, #20]
 c0054ac:	697a      	ldr	r2, [r7, #20]
 c0054ae:	68bb      	ldr	r3, [r7, #8]
 c0054b0:	429a      	cmp	r2, r3
 c0054b2:	d3ee      	bcc.n	c005492 <HAL_GTZC_MPCBB_ConfigMem+0xc6>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  return HAL_OK;
 c0054b4:	2300      	movs	r3, #0
}
 c0054b6:	4618      	mov	r0, r3
 c0054b8:	3724      	adds	r7, #36	; 0x24
 c0054ba:	46bd      	mov	sp, r7
 c0054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0054c0:	4770      	bx	lr
 c0054c2:	bf00      	nop
 c0054c4:	20030000 	.word	0x20030000
 c0054c8:	30030000 	.word	0x30030000
 c0054cc:	50032c00 	.word	0x50032c00
 c0054d0:	50033000 	.word	0x50033000

0c0054d4 <HAL_GTZC_TZIC_EnableIT>:
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId.
  *         Use GTZC_PERIPH_ALL to select all peripherals.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZIC_EnableIT(uint32_t PeriphId)
{
 c0054d4:	b480      	push	{r7}
 c0054d6:	b085      	sub	sp, #20
 c0054d8:	af00      	add	r7, sp, #0
 c0054da:	6078      	str	r0, [r7, #4]
  uint32_t register_address;

  /* check entry parameters */
  if ((HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZIC_PERIPH_NUMBER)
 c0054dc:	687b      	ldr	r3, [r7, #4]
 c0054de:	0f1b      	lsrs	r3, r3, #28
 c0054e0:	015a      	lsls	r2, r3, #5
 c0054e2:	687b      	ldr	r3, [r7, #4]
 c0054e4:	f003 031f 	and.w	r3, r3, #31
 c0054e8:	4413      	add	r3, r2
 c0054ea:	2b47      	cmp	r3, #71	; 0x47
 c0054ec:	d80d      	bhi.n	c00550a <HAL_GTZC_TZIC_EnableIT+0x36>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c0054ee:	687b      	ldr	r3, [r7, #4]
 c0054f0:	f003 0320 	and.w	r3, r3, #32
 c0054f4:	2b00      	cmp	r3, #0
 c0054f6:	d00a      	beq.n	c00550e <HAL_GTZC_TZIC_EnableIT+0x3a>
 c0054f8:	687b      	ldr	r3, [r7, #4]
 c0054fa:	0f1b      	lsrs	r3, r3, #28
 c0054fc:	015a      	lsls	r2, r3, #5
 c0054fe:	687b      	ldr	r3, [r7, #4]
 c005500:	f003 031f 	and.w	r3, r3, #31
 c005504:	4413      	add	r3, r2
 c005506:	2b00      	cmp	r3, #0
 c005508:	d001      	beq.n	c00550e <HAL_GTZC_TZIC_EnableIT+0x3a>
  {
    return HAL_ERROR;
 c00550a:	2301      	movs	r3, #1
 c00550c:	e022      	b.n	c005554 <HAL_GTZC_TZIC_EnableIT+0x80>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c00550e:	687b      	ldr	r3, [r7, #4]
 c005510:	f003 0320 	and.w	r3, r3, #32
 c005514:	2b00      	cmp	r3, #0
 c005516:	d00a      	beq.n	c00552e <HAL_GTZC_TZIC_EnableIT+0x5a>
  {
    /* same configuration is applied to all peripherals */
    WRITE_REG(GTZC_TZIC->IER1, TZIC_IER1_ALL);
 c005518:	4b11      	ldr	r3, [pc, #68]	; (c005560 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c00551a:	f04f 32ff 	mov.w	r2, #4294967295
 c00551e:	601a      	str	r2, [r3, #0]
    WRITE_REG(GTZC_TZIC->IER2, TZIC_IER2_ALL);
 c005520:	4b0f      	ldr	r3, [pc, #60]	; (c005560 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c005522:	4a10      	ldr	r2, [pc, #64]	; (c005564 <HAL_GTZC_TZIC_EnableIT+0x90>)
 c005524:	605a      	str	r2, [r3, #4]
    WRITE_REG(GTZC_TZIC->IER3, TZIC_IER3_ALL);
 c005526:	4b0e      	ldr	r3, [pc, #56]	; (c005560 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c005528:	22ff      	movs	r2, #255	; 0xff
 c00552a:	609a      	str	r2, [r3, #8]
 c00552c:	e011      	b.n	c005552 <HAL_GTZC_TZIC_EnableIT+0x7e>
  }
  else
  {
    /* common case where only one peripheral is configured */
    register_address = (uint32_t) &(GTZC_TZIC->IER1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c00552e:	687b      	ldr	r3, [r7, #4]
 c005530:	0f1b      	lsrs	r3, r3, #28
 c005532:	f103 53a0 	add.w	r3, r3, #335544320	; 0x14000000
 c005536:	f503 434a 	add.w	r3, r3, #51712	; 0xca00
 c00553a:	009b      	lsls	r3, r3, #2
 c00553c:	60fb      	str	r3, [r7, #12]
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c00553e:	68fb      	ldr	r3, [r7, #12]
 c005540:	6819      	ldr	r1, [r3, #0]
 c005542:	687b      	ldr	r3, [r7, #4]
 c005544:	f003 031f 	and.w	r3, r3, #31
 c005548:	2201      	movs	r2, #1
 c00554a:	409a      	lsls	r2, r3
 c00554c:	68fb      	ldr	r3, [r7, #12]
 c00554e:	430a      	orrs	r2, r1
 c005550:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 c005552:	2300      	movs	r3, #0
}
 c005554:	4618      	mov	r0, r3
 c005556:	3714      	adds	r7, #20
 c005558:	46bd      	mov	sp, r7
 c00555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00555e:	4770      	bx	lr
 c005560:	50032800 	.word	0x50032800
 c005564:	3fff6fff 	.word	0x3fff6fff

0c005568 <HAL_GTZC_IRQHandler>:
/**
  * @brief  This function handles GTZC interrupt request.
  * @retval None.
  */
void HAL_GTZC_IRQHandler(void)
{
 c005568:	b580      	push	{r7, lr}
 c00556a:	b084      	sub	sp, #16
 c00556c:	af00      	add	r7, sp, #0
  uint32_t flag;
  uint32_t ier_itsources;
  uint32_t sr_flags;

  /* Get current IT Flags and IT sources value on 1st register */
  ier_itsources = READ_REG(GTZC_TZIC->IER1);
 c00556e:	4b3f      	ldr	r3, [pc, #252]	; (c00566c <HAL_GTZC_IRQHandler+0x104>)
 c005570:	681b      	ldr	r3, [r3, #0]
 c005572:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR1);
 c005574:	4b3d      	ldr	r3, [pc, #244]	; (c00566c <HAL_GTZC_IRQHandler+0x104>)
 c005576:	691b      	ldr	r3, [r3, #16]
 c005578:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c00557a:	68ba      	ldr	r2, [r7, #8]
 c00557c:	687b      	ldr	r3, [r7, #4]
 c00557e:	4013      	ands	r3, r2
 c005580:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c005582:	683b      	ldr	r3, [r7, #0]
 c005584:	2b00      	cmp	r3, #0
 c005586:	d019      	beq.n	c0055bc <HAL_GTZC_IRQHandler+0x54>
  {
    WRITE_REG(GTZC_TZIC->FCR1, flag);
 c005588:	4a38      	ldr	r2, [pc, #224]	; (c00566c <HAL_GTZC_IRQHandler+0x104>)
 c00558a:	683b      	ldr	r3, [r7, #0]
 c00558c:	6213      	str	r3, [r2, #32]

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c00558e:	2300      	movs	r3, #0
 c005590:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c005592:	e00d      	b.n	c0055b0 <HAL_GTZC_IRQHandler+0x48>
    {
      if ((flag & (1UL << position)) != 0U)
 c005594:	683a      	ldr	r2, [r7, #0]
 c005596:	68fb      	ldr	r3, [r7, #12]
 c005598:	fa22 f303 	lsr.w	r3, r2, r3
 c00559c:	f003 0301 	and.w	r3, r3, #1
 c0055a0:	2b00      	cmp	r3, #0
 c0055a2:	d002      	beq.n	c0055aa <HAL_GTZC_IRQHandler+0x42>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG1 | position);
 c0055a4:	68f8      	ldr	r0, [r7, #12]
 c0055a6:	f000 f863 	bl	c005670 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c0055aa:	68fb      	ldr	r3, [r7, #12]
 c0055ac:	3301      	adds	r3, #1
 c0055ae:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0055b0:	683a      	ldr	r2, [r7, #0]
 c0055b2:	68fb      	ldr	r3, [r7, #12]
 c0055b4:	fa22 f303 	lsr.w	r3, r2, r3
 c0055b8:	2b00      	cmp	r3, #0
 c0055ba:	d1eb      	bne.n	c005594 <HAL_GTZC_IRQHandler+0x2c>
    }
  }

  /* Get current IT Flags and IT sources value on 2nd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER2);
 c0055bc:	4b2b      	ldr	r3, [pc, #172]	; (c00566c <HAL_GTZC_IRQHandler+0x104>)
 c0055be:	685b      	ldr	r3, [r3, #4]
 c0055c0:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR2);
 c0055c2:	4b2a      	ldr	r3, [pc, #168]	; (c00566c <HAL_GTZC_IRQHandler+0x104>)
 c0055c4:	695b      	ldr	r3, [r3, #20]
 c0055c6:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c0055c8:	68ba      	ldr	r2, [r7, #8]
 c0055ca:	687b      	ldr	r3, [r7, #4]
 c0055cc:	4013      	ands	r3, r2
 c0055ce:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c0055d0:	683b      	ldr	r3, [r7, #0]
 c0055d2:	2b00      	cmp	r3, #0
 c0055d4:	d01c      	beq.n	c005610 <HAL_GTZC_IRQHandler+0xa8>
  {
    WRITE_REG(GTZC_TZIC->FCR2, flag);
 c0055d6:	4a25      	ldr	r2, [pc, #148]	; (c00566c <HAL_GTZC_IRQHandler+0x104>)
 c0055d8:	683b      	ldr	r3, [r7, #0]
 c0055da:	6253      	str	r3, [r2, #36]	; 0x24

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c0055dc:	2300      	movs	r3, #0
 c0055de:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0055e0:	e010      	b.n	c005604 <HAL_GTZC_IRQHandler+0x9c>
    {
      if ((flag & (1UL << position)) != 0U)
 c0055e2:	683a      	ldr	r2, [r7, #0]
 c0055e4:	68fb      	ldr	r3, [r7, #12]
 c0055e6:	fa22 f303 	lsr.w	r3, r2, r3
 c0055ea:	f003 0301 	and.w	r3, r3, #1
 c0055ee:	2b00      	cmp	r3, #0
 c0055f0:	d005      	beq.n	c0055fe <HAL_GTZC_IRQHandler+0x96>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG2 | position);
 c0055f2:	68fb      	ldr	r3, [r7, #12]
 c0055f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0055f8:	4618      	mov	r0, r3
 c0055fa:	f000 f839 	bl	c005670 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c0055fe:	68fb      	ldr	r3, [r7, #12]
 c005600:	3301      	adds	r3, #1
 c005602:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c005604:	683a      	ldr	r2, [r7, #0]
 c005606:	68fb      	ldr	r3, [r7, #12]
 c005608:	fa22 f303 	lsr.w	r3, r2, r3
 c00560c:	2b00      	cmp	r3, #0
 c00560e:	d1e8      	bne.n	c0055e2 <HAL_GTZC_IRQHandler+0x7a>
    }
  }

  /* Get current IT Flags and IT sources value on 3rd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER3);
 c005610:	4b16      	ldr	r3, [pc, #88]	; (c00566c <HAL_GTZC_IRQHandler+0x104>)
 c005612:	689b      	ldr	r3, [r3, #8]
 c005614:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR3);
 c005616:	4b15      	ldr	r3, [pc, #84]	; (c00566c <HAL_GTZC_IRQHandler+0x104>)
 c005618:	699b      	ldr	r3, [r3, #24]
 c00561a:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c00561c:	68ba      	ldr	r2, [r7, #8]
 c00561e:	687b      	ldr	r3, [r7, #4]
 c005620:	4013      	ands	r3, r2
 c005622:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c005624:	683b      	ldr	r3, [r7, #0]
 c005626:	2b00      	cmp	r3, #0
 c005628:	d01c      	beq.n	c005664 <HAL_GTZC_IRQHandler+0xfc>
  {
    WRITE_REG(GTZC_TZIC->FCR3, flag);
 c00562a:	4a10      	ldr	r2, [pc, #64]	; (c00566c <HAL_GTZC_IRQHandler+0x104>)
 c00562c:	683b      	ldr	r3, [r7, #0]
 c00562e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c005630:	2300      	movs	r3, #0
 c005632:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c005634:	e010      	b.n	c005658 <HAL_GTZC_IRQHandler+0xf0>
    {
      if ((flag & (1UL << position)) != 0U)
 c005636:	683a      	ldr	r2, [r7, #0]
 c005638:	68fb      	ldr	r3, [r7, #12]
 c00563a:	fa22 f303 	lsr.w	r3, r2, r3
 c00563e:	f003 0301 	and.w	r3, r3, #1
 c005642:	2b00      	cmp	r3, #0
 c005644:	d005      	beq.n	c005652 <HAL_GTZC_IRQHandler+0xea>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG3 | position);
 c005646:	68fb      	ldr	r3, [r7, #12]
 c005648:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 c00564c:	4618      	mov	r0, r3
 c00564e:	f000 f80f 	bl	c005670 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c005652:	68fb      	ldr	r3, [r7, #12]
 c005654:	3301      	adds	r3, #1
 c005656:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c005658:	683a      	ldr	r2, [r7, #0]
 c00565a:	68fb      	ldr	r3, [r7, #12]
 c00565c:	fa22 f303 	lsr.w	r3, r2, r3
 c005660:	2b00      	cmp	r3, #0
 c005662:	d1e8      	bne.n	c005636 <HAL_GTZC_IRQHandler+0xce>
    }
  }
}
 c005664:	bf00      	nop
 c005666:	3710      	adds	r7, #16
 c005668:	46bd      	mov	sp, r7
 c00566a:	bd80      	pop	{r7, pc}
 c00566c:	50032800 	.word	0x50032800

0c005670 <HAL_GTZC_TZIC_Callback>:
  * @param  PeriphId Peripheral identifier triggering the illegal access.
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId
  * @retval None.
  */
__weak void HAL_GTZC_TZIC_Callback(uint32_t PeriphId)
{
 c005670:	b480      	push	{r7}
 c005672:	b083      	sub	sp, #12
 c005674:	af00      	add	r7, sp, #0
 c005676:	6078      	str	r0, [r7, #4]
  UNUSED(PeriphId);

  /* NOTE: This function should not be modified. When the callback is needed,
   * the HAL_GTZC_TZIC_Callback is to be implemented in the user file
   */
}
 c005678:	bf00      	nop
 c00567a:	370c      	adds	r7, #12
 c00567c:	46bd      	mov	sp, r7
 c00567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005682:	4770      	bx	lr

0c005684 <HAL_HASH_Init>:
  *         relevant APIs manage themselves the MDMAT bit.
  * @param  hhash HASH handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 c005684:	b580      	push	{r7, lr}
 c005686:	b082      	sub	sp, #8
 c005688:	af00      	add	r7, sp, #0
 c00568a:	6078      	str	r0, [r7, #4]
  /* Check the hash handle allocation */
  if(hhash == NULL)
 c00568c:	687b      	ldr	r3, [r7, #4]
 c00568e:	2b00      	cmp	r3, #0
 c005690:	d101      	bne.n	c005696 <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 c005692:	2301      	movs	r3, #1
 c005694:	e043      	b.n	c00571e <HAL_HASH_Init+0x9a>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if(hhash->State == HAL_HASH_STATE_RESET)
 c005696:	687b      	ldr	r3, [r7, #4]
 c005698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 c00569c:	b2db      	uxtb	r3, r3
 c00569e:	2b00      	cmp	r3, #0
 c0056a0:	d106      	bne.n	c0056b0 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 c0056a2:	687b      	ldr	r3, [r7, #4]
 c0056a4:	2200      	movs	r2, #0
 c0056a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 c0056aa:	6878      	ldr	r0, [r7, #4]
 c0056ac:	f000 f83e 	bl	c00572c <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

    /* Change the HASH state */
  hhash->State = HAL_HASH_STATE_BUSY;
 c0056b0:	687b      	ldr	r3, [r7, #4]
 c0056b2:	2202      	movs	r2, #2
 c0056b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Reset HashInCount, HashITCounter, HashBuffSize and NbWordsAlreadyPushed */
  hhash->HashInCount = 0;
 c0056b8:	687b      	ldr	r3, [r7, #4]
 c0056ba:	2200      	movs	r2, #0
 c0056bc:	621a      	str	r2, [r3, #32]
  hhash->HashBuffSize = 0;
 c0056be:	687b      	ldr	r3, [r7, #4]
 c0056c0:	2200      	movs	r2, #0
 c0056c2:	61da      	str	r2, [r3, #28]
  hhash->HashITCounter = 0;
 c0056c4:	687b      	ldr	r3, [r7, #4]
 c0056c6:	2200      	movs	r2, #0
 c0056c8:	625a      	str	r2, [r3, #36]	; 0x24
  hhash->NbWordsAlreadyPushed = 0;
 c0056ca:	687b      	ldr	r3, [r7, #4]
 c0056cc:	2200      	movs	r2, #0
 c0056ce:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset digest calculation bridle (MDMAT bit control) */
  hhash->DigestCalculationDisable = RESET;
 c0056d0:	687b      	ldr	r3, [r7, #4]
 c0056d2:	2200      	movs	r2, #0
 c0056d4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  /* Set phase to READY */
  hhash->Phase = HAL_HASH_PHASE_READY;
 c0056d8:	687b      	ldr	r3, [r7, #4]
 c0056da:	2201      	movs	r2, #1
 c0056dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
 c0056e0:	687b      	ldr	r3, [r7, #4]
 c0056e2:	2200      	movs	r2, #0
 c0056e4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Set the data type bit */
  MODIFY_REG(HASH->CR, HASH_CR_DATATYPE, hhash->Init.DataType);
 c0056e8:	4b0f      	ldr	r3, [pc, #60]	; (c005728 <HAL_HASH_Init+0xa4>)
 c0056ea:	681b      	ldr	r3, [r3, #0]
 c0056ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 c0056f0:	687b      	ldr	r3, [r7, #4]
 c0056f2:	681b      	ldr	r3, [r3, #0]
 c0056f4:	490c      	ldr	r1, [pc, #48]	; (c005728 <HAL_HASH_Init+0xa4>)
 c0056f6:	4313      	orrs	r3, r2
 c0056f8:	600b      	str	r3, [r1, #0]
  /* Reset MDMAT bit */
__HAL_HASH_RESET_MDMAT();
 c0056fa:	4b0b      	ldr	r3, [pc, #44]	; (c005728 <HAL_HASH_Init+0xa4>)
 c0056fc:	681b      	ldr	r3, [r3, #0]
 c0056fe:	4a0a      	ldr	r2, [pc, #40]	; (c005728 <HAL_HASH_Init+0xa4>)
 c005700:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 c005704:	6013      	str	r3, [r2, #0]
  /* Reset HASH handle status */
  hhash->Status = HAL_OK;
 c005706:	687b      	ldr	r3, [r7, #4]
 c005708:	2200      	movs	r2, #0
 c00570a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Set the HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 c00570e:	687b      	ldr	r3, [r7, #4]
 c005710:	2201      	movs	r2, #1
 c005712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Initialise the error code */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 c005716:	687b      	ldr	r3, [r7, #4]
 c005718:	2200      	movs	r2, #0
 c00571a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 c00571c:	2300      	movs	r3, #0
}
 c00571e:	4618      	mov	r0, r3
 c005720:	3708      	adds	r7, #8
 c005722:	46bd      	mov	sp, r7
 c005724:	bd80      	pop	{r7, pc}
 c005726:	bf00      	nop
 c005728:	520c0400 	.word	0x520c0400

0c00572c <HAL_HASH_MspInit>:
  * @brief  Initialize the HASH MSP.
  * @param  hhash HASH handle.
  * @retval None
  */
__weak void HAL_HASH_MspInit(HASH_HandleTypeDef *hhash)
{
 c00572c:	b480      	push	{r7}
 c00572e:	b083      	sub	sp, #12
 c005730:	af00      	add	r7, sp, #0
 c005732:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_MspInit() can be implemented in the user file.
   */
}
 c005734:	bf00      	nop
 c005736:	370c      	adds	r7, #12
 c005738:	46bd      	mov	sp, r7
 c00573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00573e:	4770      	bx	lr

0c005740 <HASH_WriteData>:
  *         processing is suspended when possible and the Peripheral feeding point reached at
  *         suspension time is stored in the handle for resumption later on.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WriteData(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size)
{
 c005740:	b480      	push	{r7}
 c005742:	b087      	sub	sp, #28
 c005744:	af00      	add	r7, sp, #0
 c005746:	60f8      	str	r0, [r7, #12]
 c005748:	60b9      	str	r1, [r7, #8]
 c00574a:	607a      	str	r2, [r7, #4]
  uint32_t buffercounter;
  __IO uint32_t inputaddr = (uint32_t) pInBuffer;
 c00574c:	68bb      	ldr	r3, [r7, #8]
 c00574e:	613b      	str	r3, [r7, #16]

  for(buffercounter = 0U; buffercounter < Size; buffercounter+=4U)
 c005750:	2300      	movs	r3, #0
 c005752:	617b      	str	r3, [r7, #20]
 c005754:	e057      	b.n	c005806 <HASH_WriteData+0xc6>
  {
    /* Write input data 4 bytes at a time */
    HASH->DIN = *(uint32_t*)inputaddr;
 c005756:	693b      	ldr	r3, [r7, #16]
 c005758:	4a30      	ldr	r2, [pc, #192]	; (c00581c <HASH_WriteData+0xdc>)
 c00575a:	681b      	ldr	r3, [r3, #0]
 c00575c:	6053      	str	r3, [r2, #4]
    inputaddr+=4U;
 c00575e:	693b      	ldr	r3, [r7, #16]
 c005760:	3304      	adds	r3, #4
 c005762:	613b      	str	r3, [r7, #16]

    /* If the suspension flag has been raised and if the processing is not about
    to end, suspend processing */
    if ((hhash->SuspendRequest == HAL_HASH_SUSPEND) && ((buffercounter+4U) < Size))
 c005764:	68fb      	ldr	r3, [r7, #12]
 c005766:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 c00576a:	2b01      	cmp	r3, #1
 c00576c:	d148      	bne.n	c005800 <HASH_WriteData+0xc0>
 c00576e:	697b      	ldr	r3, [r7, #20]
 c005770:	3304      	adds	r3, #4
 c005772:	687a      	ldr	r2, [r7, #4]
 c005774:	429a      	cmp	r2, r3
 c005776:	d943      	bls.n	c005800 <HASH_WriteData+0xc0>
    {
      /* Wait for DINIS = 1, which occurs when 16 32-bit locations are free
      in the input buffer */
      if (__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))
 c005778:	4b28      	ldr	r3, [pc, #160]	; (c00581c <HASH_WriteData+0xdc>)
 c00577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00577c:	f003 0301 	and.w	r3, r3, #1
 c005780:	2b01      	cmp	r3, #1
 c005782:	d13d      	bne.n	c005800 <HASH_WriteData+0xc0>
      {
        /* Reset SuspendRequest */
        hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
 c005784:	68fb      	ldr	r3, [r7, #12]
 c005786:	2200      	movs	r2, #0
 c005788:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

        /* Depending whether the key or the input data were fed to the Peripheral, the feeding point
        reached at suspension time is not saved in the same handle fields */
        if ((hhash->Phase == HAL_HASH_PHASE_PROCESS) || (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2))
 c00578c:	68fb      	ldr	r3, [r7, #12]
 c00578e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 c005792:	2b02      	cmp	r3, #2
 c005794:	d004      	beq.n	c0057a0 <HASH_WriteData+0x60>
 c005796:	68fb      	ldr	r3, [r7, #12]
 c005798:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 c00579c:	2b04      	cmp	r3, #4
 c00579e:	d10a      	bne.n	c0057b6 <HASH_WriteData+0x76>
        {
          /* Save current reading and writing locations of Input and Output buffers */
          hhash->pHashInBuffPtr =  (uint8_t *)inputaddr;
 c0057a0:	693b      	ldr	r3, [r7, #16]
 c0057a2:	461a      	mov	r2, r3
 c0057a4:	68fb      	ldr	r3, [r7, #12]
 c0057a6:	60da      	str	r2, [r3, #12]
          /* Save the number of bytes that remain to be processed at this point */
          hhash->HashInCount    =  Size - (buffercounter + 4U);
 c0057a8:	687a      	ldr	r2, [r7, #4]
 c0057aa:	697b      	ldr	r3, [r7, #20]
 c0057ac:	1ad3      	subs	r3, r2, r3
 c0057ae:	1f1a      	subs	r2, r3, #4
 c0057b0:	68fb      	ldr	r3, [r7, #12]
 c0057b2:	621a      	str	r2, [r3, #32]
 c0057b4:	e01e      	b.n	c0057f4 <HASH_WriteData+0xb4>
        }
        else if ((hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_1) || (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_3))
 c0057b6:	68fb      	ldr	r3, [r7, #12]
 c0057b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 c0057bc:	2b03      	cmp	r3, #3
 c0057be:	d004      	beq.n	c0057ca <HASH_WriteData+0x8a>
 c0057c0:	68fb      	ldr	r3, [r7, #12]
 c0057c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 c0057c6:	2b05      	cmp	r3, #5
 c0057c8:	d10a      	bne.n	c0057e0 <HASH_WriteData+0xa0>
        {
          /* Save current reading and writing locations of Input and Output buffers */
          hhash->pHashKeyBuffPtr  =  (uint8_t *)inputaddr;
 c0057ca:	693b      	ldr	r3, [r7, #16]
 c0057cc:	461a      	mov	r2, r3
 c0057ce:	68fb      	ldr	r3, [r7, #12]
 c0057d0:	615a      	str	r2, [r3, #20]
          /* Save the number of bytes that remain to be processed at this point */
          hhash->HashKeyCount  =  Size - (buffercounter + 4U);
 c0057d2:	687a      	ldr	r2, [r7, #4]
 c0057d4:	697b      	ldr	r3, [r7, #20]
 c0057d6:	1ad3      	subs	r3, r2, r3
 c0057d8:	1f1a      	subs	r2, r3, #4
 c0057da:	68fb      	ldr	r3, [r7, #12]
 c0057dc:	629a      	str	r2, [r3, #40]	; 0x28
 c0057de:	e009      	b.n	c0057f4 <HASH_WriteData+0xb4>
        }
        else
        {
          /* Unexpected phase: unlock process and report error */
          hhash->State = HAL_HASH_STATE_READY;
 c0057e0:	68fb      	ldr	r3, [r7, #12]
 c0057e2:	2201      	movs	r2, #1
 c0057e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          __HAL_UNLOCK(hhash);
 c0057e8:	68fb      	ldr	r3, [r7, #12]
 c0057ea:	2200      	movs	r2, #0
 c0057ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 c0057f0:	2301      	movs	r3, #1
 c0057f2:	e00d      	b.n	c005810 <HASH_WriteData+0xd0>
        }

        /* Set the HASH state to Suspended and exit to stop entering data */
        hhash->State = HAL_HASH_STATE_SUSPENDED;
 c0057f4:	68fb      	ldr	r3, [r7, #12]
 c0057f6:	2208      	movs	r2, #8
 c0057f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_OK;
 c0057fc:	2300      	movs	r3, #0
 c0057fe:	e007      	b.n	c005810 <HASH_WriteData+0xd0>
  for(buffercounter = 0U; buffercounter < Size; buffercounter+=4U)
 c005800:	697b      	ldr	r3, [r7, #20]
 c005802:	3304      	adds	r3, #4
 c005804:	617b      	str	r3, [r7, #20]
 c005806:	697a      	ldr	r2, [r7, #20]
 c005808:	687b      	ldr	r3, [r7, #4]
 c00580a:	429a      	cmp	r2, r3
 c00580c:	d3a3      	bcc.n	c005756 <HASH_WriteData+0x16>
      } /* if (__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))  */
    } /* if ((hhash->SuspendRequest == HAL_HASH_SUSPEND) && ((buffercounter+4) < Size)) */
  }   /* for(buffercounter = 0; buffercounter < Size; buffercounter+=4)                 */

  /* At this point, all the data have been entered to the Peripheral: exit */
  return  HAL_OK;
 c00580e:	2300      	movs	r3, #0
}
 c005810:	4618      	mov	r0, r3
 c005812:	371c      	adds	r7, #28
 c005814:	46bd      	mov	sp, r7
 c005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00581a:	4770      	bx	lr
 c00581c:	520c0400 	.word	0x520c0400

0c005820 <HASH_GetDigest>:
  * @param  pMsgDigest pointer to the computed digest.
  * @param  Size message digest size in bytes.
  * @retval None
  */
static void HASH_GetDigest(uint8_t *pMsgDigest, uint8_t Size)
{
 c005820:	b480      	push	{r7}
 c005822:	b09d      	sub	sp, #116	; 0x74
 c005824:	af00      	add	r7, sp, #0
 c005826:	6078      	str	r0, [r7, #4]
 c005828:	460b      	mov	r3, r1
 c00582a:	70fb      	strb	r3, [r7, #3]
  uint32_t msgdigest = (uint32_t)pMsgDigest;
 c00582c:	687b      	ldr	r3, [r7, #4]
 c00582e:	66fb      	str	r3, [r7, #108]	; 0x6c

  switch(Size)
 c005830:	78fb      	ldrb	r3, [r7, #3]
 c005832:	3b10      	subs	r3, #16
 c005834:	2b10      	cmp	r3, #16
 c005836:	f200 810d 	bhi.w	c005a54 <HASH_GetDigest+0x234>
 c00583a:	a201      	add	r2, pc, #4	; (adr r2, c005840 <HASH_GetDigest+0x20>)
 c00583c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c005840:	0c005885 	.word	0x0c005885
 c005844:	0c005a55 	.word	0x0c005a55
 c005848:	0c005a55 	.word	0x0c005a55
 c00584c:	0c005a55 	.word	0x0c005a55
 c005850:	0c0058d1 	.word	0x0c0058d1
 c005854:	0c005a55 	.word	0x0c005a55
 c005858:	0c005a55 	.word	0x0c005a55
 c00585c:	0c005a55 	.word	0x0c005a55
 c005860:	0c005a55 	.word	0x0c005a55
 c005864:	0c005a55 	.word	0x0c005a55
 c005868:	0c005a55 	.word	0x0c005a55
 c00586c:	0c005a55 	.word	0x0c005a55
 c005870:	0c005931 	.word	0x0c005931
 c005874:	0c005a55 	.word	0x0c005a55
 c005878:	0c005a55 	.word	0x0c005a55
 c00587c:	0c005a55 	.word	0x0c005a55
 c005880:	0c0059b9 	.word	0x0c0059b9
  {
    /* Read the message digest */
    case 16:  /* MD5 */
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[0]);
 c005884:	4b77      	ldr	r3, [pc, #476]	; (c005a64 <HASH_GetDigest+0x244>)
 c005886:	68da      	ldr	r2, [r3, #12]
 c005888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00588a:	65fa      	str	r2, [r7, #92]	; 0x5c
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 c00588c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 c00588e:	ba12      	rev	r2, r2
 c005890:	601a      	str	r2, [r3, #0]
      msgdigest+=4U;
 c005892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c005894:	3304      	adds	r3, #4
 c005896:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[1]);
 c005898:	4b72      	ldr	r3, [pc, #456]	; (c005a64 <HASH_GetDigest+0x244>)
 c00589a:	691a      	ldr	r2, [r3, #16]
 c00589c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00589e:	663a      	str	r2, [r7, #96]	; 0x60
 c0058a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 c0058a2:	ba12      	rev	r2, r2
 c0058a4:	601a      	str	r2, [r3, #0]
      msgdigest+=4U;
 c0058a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0058a8:	3304      	adds	r3, #4
 c0058aa:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[2]);
 c0058ac:	4b6d      	ldr	r3, [pc, #436]	; (c005a64 <HASH_GetDigest+0x244>)
 c0058ae:	695a      	ldr	r2, [r3, #20]
 c0058b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0058b2:	667a      	str	r2, [r7, #100]	; 0x64
 c0058b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 c0058b6:	ba12      	rev	r2, r2
 c0058b8:	601a      	str	r2, [r3, #0]
      msgdigest+=4U;
 c0058ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0058bc:	3304      	adds	r3, #4
 c0058be:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[3]);
 c0058c0:	4b68      	ldr	r3, [pc, #416]	; (c005a64 <HASH_GetDigest+0x244>)
 c0058c2:	699a      	ldr	r2, [r3, #24]
 c0058c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0058c6:	66ba      	str	r2, [r7, #104]	; 0x68
 c0058c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 c0058ca:	ba12      	rev	r2, r2
 c0058cc:	601a      	str	r2, [r3, #0]
    break;
 c0058ce:	e0c2      	b.n	c005a56 <HASH_GetDigest+0x236>
    case 20:  /* SHA1 */
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[0]);
 c0058d0:	4b64      	ldr	r3, [pc, #400]	; (c005a64 <HASH_GetDigest+0x244>)
 c0058d2:	68da      	ldr	r2, [r3, #12]
 c0058d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0058d6:	64ba      	str	r2, [r7, #72]	; 0x48
 c0058d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c0058da:	ba12      	rev	r2, r2
 c0058dc:	601a      	str	r2, [r3, #0]
      msgdigest+=4U;
 c0058de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0058e0:	3304      	adds	r3, #4
 c0058e2:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[1]);
 c0058e4:	4b5f      	ldr	r3, [pc, #380]	; (c005a64 <HASH_GetDigest+0x244>)
 c0058e6:	691a      	ldr	r2, [r3, #16]
 c0058e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0058ea:	64fa      	str	r2, [r7, #76]	; 0x4c
 c0058ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 c0058ee:	ba12      	rev	r2, r2
 c0058f0:	601a      	str	r2, [r3, #0]
      msgdigest+=4U;
 c0058f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0058f4:	3304      	adds	r3, #4
 c0058f6:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[2]);
 c0058f8:	4b5a      	ldr	r3, [pc, #360]	; (c005a64 <HASH_GetDigest+0x244>)
 c0058fa:	695a      	ldr	r2, [r3, #20]
 c0058fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0058fe:	653a      	str	r2, [r7, #80]	; 0x50
 c005900:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 c005902:	ba12      	rev	r2, r2
 c005904:	601a      	str	r2, [r3, #0]
      msgdigest+=4U;
 c005906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c005908:	3304      	adds	r3, #4
 c00590a:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[3]);
 c00590c:	4b55      	ldr	r3, [pc, #340]	; (c005a64 <HASH_GetDigest+0x244>)
 c00590e:	699a      	ldr	r2, [r3, #24]
 c005910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c005912:	657a      	str	r2, [r7, #84]	; 0x54
 c005914:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 c005916:	ba12      	rev	r2, r2
 c005918:	601a      	str	r2, [r3, #0]
      msgdigest+=4U;
 c00591a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00591c:	3304      	adds	r3, #4
 c00591e:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t*)(msgdigest) = __REV(HASH->HR[4]);
 c005920:	4b50      	ldr	r3, [pc, #320]	; (c005a64 <HASH_GetDigest+0x244>)
 c005922:	69da      	ldr	r2, [r3, #28]
 c005924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c005926:	65ba      	str	r2, [r7, #88]	; 0x58
 c005928:	6dba      	ldr	r2, [r7, #88]	; 0x58
 c00592a:	ba12      	rev	r2, r2
 c00592c:	601a      	str	r2, [r3, #0]
    break;
 c00592e:	e092      	b.n	c005a56 <HASH_GetDigest+0x236>
  case 28:  /* SHA224 */
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[0]);
 c005930:	4b4c      	ldr	r3, [pc, #304]	; (c005a64 <HASH_GetDigest+0x244>)
 c005932:	68da      	ldr	r2, [r3, #12]
 c005934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c005936:	62fa      	str	r2, [r7, #44]	; 0x2c
 c005938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c00593a:	ba12      	rev	r2, r2
 c00593c:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 c00593e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c005940:	3304      	adds	r3, #4
 c005942:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[1]);
 c005944:	4b47      	ldr	r3, [pc, #284]	; (c005a64 <HASH_GetDigest+0x244>)
 c005946:	691a      	ldr	r2, [r3, #16]
 c005948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00594a:	633a      	str	r2, [r7, #48]	; 0x30
 c00594c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 c00594e:	ba12      	rev	r2, r2
 c005950:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 c005952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c005954:	3304      	adds	r3, #4
 c005956:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[2]);
 c005958:	4b42      	ldr	r3, [pc, #264]	; (c005a64 <HASH_GetDigest+0x244>)
 c00595a:	695a      	ldr	r2, [r3, #20]
 c00595c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00595e:	637a      	str	r2, [r7, #52]	; 0x34
 c005960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 c005962:	ba12      	rev	r2, r2
 c005964:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 c005966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c005968:	3304      	adds	r3, #4
 c00596a:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[3]);
 c00596c:	4b3d      	ldr	r3, [pc, #244]	; (c005a64 <HASH_GetDigest+0x244>)
 c00596e:	699a      	ldr	r2, [r3, #24]
 c005970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c005972:	63ba      	str	r2, [r7, #56]	; 0x38
 c005974:	6bba      	ldr	r2, [r7, #56]	; 0x38
 c005976:	ba12      	rev	r2, r2
 c005978:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 c00597a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00597c:	3304      	adds	r3, #4
 c00597e:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[4]);
 c005980:	4b38      	ldr	r3, [pc, #224]	; (c005a64 <HASH_GetDigest+0x244>)
 c005982:	69da      	ldr	r2, [r3, #28]
 c005984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c005986:	63fa      	str	r2, [r7, #60]	; 0x3c
 c005988:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 c00598a:	ba12      	rev	r2, r2
 c00598c:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 c00598e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c005990:	3304      	adds	r3, #4
 c005992:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 c005994:	4b34      	ldr	r3, [pc, #208]	; (c005a68 <HASH_GetDigest+0x248>)
 c005996:	695a      	ldr	r2, [r3, #20]
 c005998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00599a:	643a      	str	r2, [r7, #64]	; 0x40
 c00599c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 c00599e:	ba12      	rev	r2, r2
 c0059a0:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 c0059a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0059a4:	3304      	adds	r3, #4
 c0059a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 c0059a8:	4b2f      	ldr	r3, [pc, #188]	; (c005a68 <HASH_GetDigest+0x248>)
 c0059aa:	699a      	ldr	r2, [r3, #24]
 c0059ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0059ae:	647a      	str	r2, [r7, #68]	; 0x44
 c0059b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 c0059b2:	ba12      	rev	r2, r2
 c0059b4:	601a      	str	r2, [r3, #0]
    break;
 c0059b6:	e04e      	b.n	c005a56 <HASH_GetDigest+0x236>
  case 32:   /* SHA256 */
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[0]);
 c0059b8:	4b2a      	ldr	r3, [pc, #168]	; (c005a64 <HASH_GetDigest+0x244>)
 c0059ba:	68da      	ldr	r2, [r3, #12]
 c0059bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0059be:	60fa      	str	r2, [r7, #12]
 c0059c0:	68fa      	ldr	r2, [r7, #12]
 c0059c2:	ba12      	rev	r2, r2
 c0059c4:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 c0059c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0059c8:	3304      	adds	r3, #4
 c0059ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[1]);
 c0059cc:	4b25      	ldr	r3, [pc, #148]	; (c005a64 <HASH_GetDigest+0x244>)
 c0059ce:	691a      	ldr	r2, [r3, #16]
 c0059d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0059d2:	613a      	str	r2, [r7, #16]
 c0059d4:	693a      	ldr	r2, [r7, #16]
 c0059d6:	ba12      	rev	r2, r2
 c0059d8:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 c0059da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0059dc:	3304      	adds	r3, #4
 c0059de:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[2]);
 c0059e0:	4b20      	ldr	r3, [pc, #128]	; (c005a64 <HASH_GetDigest+0x244>)
 c0059e2:	695a      	ldr	r2, [r3, #20]
 c0059e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0059e6:	617a      	str	r2, [r7, #20]
 c0059e8:	697a      	ldr	r2, [r7, #20]
 c0059ea:	ba12      	rev	r2, r2
 c0059ec:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 c0059ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0059f0:	3304      	adds	r3, #4
 c0059f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[3]);
 c0059f4:	4b1b      	ldr	r3, [pc, #108]	; (c005a64 <HASH_GetDigest+0x244>)
 c0059f6:	699a      	ldr	r2, [r3, #24]
 c0059f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0059fa:	61ba      	str	r2, [r7, #24]
 c0059fc:	69ba      	ldr	r2, [r7, #24]
 c0059fe:	ba12      	rev	r2, r2
 c005a00:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 c005a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c005a04:	3304      	adds	r3, #4
 c005a06:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH->HR[4]);
 c005a08:	4b16      	ldr	r3, [pc, #88]	; (c005a64 <HASH_GetDigest+0x244>)
 c005a0a:	69da      	ldr	r2, [r3, #28]
 c005a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c005a0e:	61fa      	str	r2, [r7, #28]
 c005a10:	69fa      	ldr	r2, [r7, #28]
 c005a12:	ba12      	rev	r2, r2
 c005a14:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 c005a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c005a18:	3304      	adds	r3, #4
 c005a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 c005a1c:	4b12      	ldr	r3, [pc, #72]	; (c005a68 <HASH_GetDigest+0x248>)
 c005a1e:	695a      	ldr	r2, [r3, #20]
 c005a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c005a22:	623a      	str	r2, [r7, #32]
 c005a24:	6a3a      	ldr	r2, [r7, #32]
 c005a26:	ba12      	rev	r2, r2
 c005a28:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 c005a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c005a2c:	3304      	adds	r3, #4
 c005a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 c005a30:	4b0d      	ldr	r3, [pc, #52]	; (c005a68 <HASH_GetDigest+0x248>)
 c005a32:	699a      	ldr	r2, [r3, #24]
 c005a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c005a36:	627a      	str	r2, [r7, #36]	; 0x24
 c005a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c005a3a:	ba12      	rev	r2, r2
 c005a3c:	601a      	str	r2, [r3, #0]
    msgdigest+=4U;
 c005a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c005a40:	3304      	adds	r3, #4
 c005a42:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 c005a44:	4b08      	ldr	r3, [pc, #32]	; (c005a68 <HASH_GetDigest+0x248>)
 c005a46:	69da      	ldr	r2, [r3, #28]
 c005a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c005a4a:	62ba      	str	r2, [r7, #40]	; 0x28
 c005a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 c005a4e:	ba12      	rev	r2, r2
 c005a50:	601a      	str	r2, [r3, #0]
    break;
 c005a52:	e000      	b.n	c005a56 <HASH_GetDigest+0x236>
    default:
    break;
 c005a54:	bf00      	nop
  }
}
 c005a56:	bf00      	nop
 c005a58:	3774      	adds	r7, #116	; 0x74
 c005a5a:	46bd      	mov	sp, r7
 c005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005a60:	4770      	bx	lr
 c005a62:	bf00      	nop
 c005a64:	520c0400 	.word	0x520c0400
 c005a68:	520c0710 	.word	0x520c0710

0c005a6c <HASH_WaitOnFlagUntilTimeout>:
  * @param  Status the Flag status (SET or RESET).
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WaitOnFlagUntilTimeout(HASH_HandleTypeDef *hhash, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 c005a6c:	b580      	push	{r7, lr}
 c005a6e:	b086      	sub	sp, #24
 c005a70:	af00      	add	r7, sp, #0
 c005a72:	60f8      	str	r0, [r7, #12]
 c005a74:	60b9      	str	r1, [r7, #8]
 c005a76:	603b      	str	r3, [r7, #0]
 c005a78:	4613      	mov	r3, r2
 c005a7a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = HAL_GetTick();
 c005a7c:	f7fe ff24 	bl	c0048c8 <HAL_GetTick>
 c005a80:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 c005a82:	79fb      	ldrb	r3, [r7, #7]
 c005a84:	2b00      	cmp	r3, #0
 c005a86:	d155      	bne.n	c005b34 <HASH_WaitOnFlagUntilTimeout+0xc8>
  {
    while(__HAL_HASH_GET_FLAG(Flag) == RESET)
 c005a88:	e01c      	b.n	c005ac4 <HASH_WaitOnFlagUntilTimeout+0x58>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 c005a8a:	683b      	ldr	r3, [r7, #0]
 c005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 c005a90:	d018      	beq.n	c005ac4 <HASH_WaitOnFlagUntilTimeout+0x58>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 c005a92:	f7fe ff19 	bl	c0048c8 <HAL_GetTick>
 c005a96:	4602      	mov	r2, r0
 c005a98:	697b      	ldr	r3, [r7, #20]
 c005a9a:	1ad3      	subs	r3, r2, r3
 c005a9c:	683a      	ldr	r2, [r7, #0]
 c005a9e:	429a      	cmp	r2, r3
 c005aa0:	d302      	bcc.n	c005aa8 <HASH_WaitOnFlagUntilTimeout+0x3c>
 c005aa2:	683b      	ldr	r3, [r7, #0]
 c005aa4:	2b00      	cmp	r3, #0
 c005aa6:	d10d      	bne.n	c005ac4 <HASH_WaitOnFlagUntilTimeout+0x58>
        {
          /* Set State to Ready to be able to restart later on */
          hhash->State  = HAL_HASH_STATE_READY;
 c005aa8:	68fb      	ldr	r3, [r7, #12]
 c005aaa:	2201      	movs	r2, #1
 c005aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          /* Store time out issue in handle status */
          hhash->Status = HAL_TIMEOUT;
 c005ab0:	68fb      	ldr	r3, [r7, #12]
 c005ab2:	2203      	movs	r2, #3
 c005ab4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

          /* Process Unlocked */
          __HAL_UNLOCK(hhash);
 c005ab8:	68fb      	ldr	r3, [r7, #12]
 c005aba:	2200      	movs	r2, #0
 c005abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 c005ac0:	2303      	movs	r3, #3
 c005ac2:	e052      	b.n	c005b6a <HASH_WaitOnFlagUntilTimeout+0xfe>
    while(__HAL_HASH_GET_FLAG(Flag) == RESET)
 c005ac4:	68bb      	ldr	r3, [r7, #8]
 c005ac6:	2b08      	cmp	r3, #8
 c005ac8:	d90a      	bls.n	c005ae0 <HASH_WaitOnFlagUntilTimeout+0x74>
 c005aca:	4b2a      	ldr	r3, [pc, #168]	; (c005b74 <HASH_WaitOnFlagUntilTimeout+0x108>)
 c005acc:	681a      	ldr	r2, [r3, #0]
 c005ace:	68bb      	ldr	r3, [r7, #8]
 c005ad0:	4013      	ands	r3, r2
 c005ad2:	68ba      	ldr	r2, [r7, #8]
 c005ad4:	429a      	cmp	r2, r3
 c005ad6:	bf14      	ite	ne
 c005ad8:	2301      	movne	r3, #1
 c005ada:	2300      	moveq	r3, #0
 c005adc:	b2db      	uxtb	r3, r3
 c005ade:	e009      	b.n	c005af4 <HASH_WaitOnFlagUntilTimeout+0x88>
 c005ae0:	4b24      	ldr	r3, [pc, #144]	; (c005b74 <HASH_WaitOnFlagUntilTimeout+0x108>)
 c005ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c005ae4:	68bb      	ldr	r3, [r7, #8]
 c005ae6:	4013      	ands	r3, r2
 c005ae8:	68ba      	ldr	r2, [r7, #8]
 c005aea:	429a      	cmp	r2, r3
 c005aec:	bf14      	ite	ne
 c005aee:	2301      	movne	r3, #1
 c005af0:	2300      	moveq	r3, #0
 c005af2:	b2db      	uxtb	r3, r3
 c005af4:	2b00      	cmp	r3, #0
 c005af6:	d1c8      	bne.n	c005a8a <HASH_WaitOnFlagUntilTimeout+0x1e>
 c005af8:	e036      	b.n	c005b68 <HASH_WaitOnFlagUntilTimeout+0xfc>
  else
  {
    while(__HAL_HASH_GET_FLAG(Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 c005afa:	683b      	ldr	r3, [r7, #0]
 c005afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 c005b00:	d018      	beq.n	c005b34 <HASH_WaitOnFlagUntilTimeout+0xc8>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 c005b02:	f7fe fee1 	bl	c0048c8 <HAL_GetTick>
 c005b06:	4602      	mov	r2, r0
 c005b08:	697b      	ldr	r3, [r7, #20]
 c005b0a:	1ad3      	subs	r3, r2, r3
 c005b0c:	683a      	ldr	r2, [r7, #0]
 c005b0e:	429a      	cmp	r2, r3
 c005b10:	d302      	bcc.n	c005b18 <HASH_WaitOnFlagUntilTimeout+0xac>
 c005b12:	683b      	ldr	r3, [r7, #0]
 c005b14:	2b00      	cmp	r3, #0
 c005b16:	d10d      	bne.n	c005b34 <HASH_WaitOnFlagUntilTimeout+0xc8>
        {
          /* Set State to Ready to be able to restart later on */
          hhash->State  = HAL_HASH_STATE_READY;
 c005b18:	68fb      	ldr	r3, [r7, #12]
 c005b1a:	2201      	movs	r2, #1
 c005b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          /* Store time out issue in handle status */
          hhash->Status = HAL_TIMEOUT;
 c005b20:	68fb      	ldr	r3, [r7, #12]
 c005b22:	2203      	movs	r2, #3
 c005b24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

          /* Process Unlocked */
          __HAL_UNLOCK(hhash);
 c005b28:	68fb      	ldr	r3, [r7, #12]
 c005b2a:	2200      	movs	r2, #0
 c005b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 c005b30:	2303      	movs	r3, #3
 c005b32:	e01a      	b.n	c005b6a <HASH_WaitOnFlagUntilTimeout+0xfe>
    while(__HAL_HASH_GET_FLAG(Flag) != RESET)
 c005b34:	68bb      	ldr	r3, [r7, #8]
 c005b36:	2b08      	cmp	r3, #8
 c005b38:	d90a      	bls.n	c005b50 <HASH_WaitOnFlagUntilTimeout+0xe4>
 c005b3a:	4b0e      	ldr	r3, [pc, #56]	; (c005b74 <HASH_WaitOnFlagUntilTimeout+0x108>)
 c005b3c:	681a      	ldr	r2, [r3, #0]
 c005b3e:	68bb      	ldr	r3, [r7, #8]
 c005b40:	4013      	ands	r3, r2
 c005b42:	68ba      	ldr	r2, [r7, #8]
 c005b44:	429a      	cmp	r2, r3
 c005b46:	bf0c      	ite	eq
 c005b48:	2301      	moveq	r3, #1
 c005b4a:	2300      	movne	r3, #0
 c005b4c:	b2db      	uxtb	r3, r3
 c005b4e:	e009      	b.n	c005b64 <HASH_WaitOnFlagUntilTimeout+0xf8>
 c005b50:	4b08      	ldr	r3, [pc, #32]	; (c005b74 <HASH_WaitOnFlagUntilTimeout+0x108>)
 c005b52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c005b54:	68bb      	ldr	r3, [r7, #8]
 c005b56:	4013      	ands	r3, r2
 c005b58:	68ba      	ldr	r2, [r7, #8]
 c005b5a:	429a      	cmp	r2, r3
 c005b5c:	bf0c      	ite	eq
 c005b5e:	2301      	moveq	r3, #1
 c005b60:	2300      	movne	r3, #0
 c005b62:	b2db      	uxtb	r3, r3
 c005b64:	2b00      	cmp	r3, #0
 c005b66:	d1c8      	bne.n	c005afa <HASH_WaitOnFlagUntilTimeout+0x8e>
        }
      }
    }
  }
  return HAL_OK;
 c005b68:	2300      	movs	r3, #0
}
 c005b6a:	4618      	mov	r0, r3
 c005b6c:	3718      	adds	r7, #24
 c005b6e:	46bd      	mov	sp, r7
 c005b70:	bd80      	pop	{r7, pc}
 c005b72:	bf00      	nop
 c005b74:	520c0400 	.word	0x520c0400

0c005b78 <HMAC_Processing>:
  * @param  hhash HASH handle.
  * @param  Timeout Timeout value.
  * @retval HAL status
  */
static HAL_StatusTypeDef HMAC_Processing(HASH_HandleTypeDef *hhash, uint32_t Timeout)
{
 c005b78:	b580      	push	{r7, lr}
 c005b7a:	b082      	sub	sp, #8
 c005b7c:	af00      	add	r7, sp, #0
 c005b7e:	6078      	str	r0, [r7, #4]
 c005b80:	6039      	str	r1, [r7, #0]
  /* Ensure first that Phase is correct */
  if ((hhash->Phase != HAL_HASH_PHASE_HMAC_STEP_1) && (hhash->Phase != HAL_HASH_PHASE_HMAC_STEP_2) && (hhash->Phase != HAL_HASH_PHASE_HMAC_STEP_3))
 c005b82:	687b      	ldr	r3, [r7, #4]
 c005b84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 c005b88:	2b03      	cmp	r3, #3
 c005b8a:	d013      	beq.n	c005bb4 <HMAC_Processing+0x3c>
 c005b8c:	687b      	ldr	r3, [r7, #4]
 c005b8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 c005b92:	2b04      	cmp	r3, #4
 c005b94:	d00e      	beq.n	c005bb4 <HMAC_Processing+0x3c>
 c005b96:	687b      	ldr	r3, [r7, #4]
 c005b98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 c005b9c:	2b05      	cmp	r3, #5
 c005b9e:	d009      	beq.n	c005bb4 <HMAC_Processing+0x3c>
  {
    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_READY;
 c005ba0:	687b      	ldr	r3, [r7, #4]
 c005ba2:	2201      	movs	r2, #1
 c005ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlock */
    __HAL_UNLOCK(hhash);
 c005ba8:	687b      	ldr	r3, [r7, #4]
 c005baa:	2200      	movs	r2, #0
 c005bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return function status */
    return HAL_ERROR;
 c005bb0:	2301      	movs	r3, #1
 c005bb2:	e108      	b.n	c005dc6 <HMAC_Processing+0x24e>
  }

  /* HMAC Step 1 processing */
  if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_1)
 c005bb4:	687b      	ldr	r3, [r7, #4]
 c005bb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 c005bba:	2b03      	cmp	r3, #3
 c005bbc:	d142      	bne.n	c005c44 <HMAC_Processing+0xcc>
  {
    /************************** STEP 1 ******************************************/
    /* Configure the Number of valid bits in last word of the message */
    __HAL_HASH_SET_NBVALIDBITS(hhash->Init.KeySize);
 c005bbe:	4b84      	ldr	r3, [pc, #528]	; (c005dd0 <HMAC_Processing+0x258>)
 c005bc0:	689b      	ldr	r3, [r3, #8]
 c005bc2:	f023 021f 	bic.w	r2, r3, #31
 c005bc6:	687b      	ldr	r3, [r7, #4]
 c005bc8:	685b      	ldr	r3, [r3, #4]
 c005bca:	f003 0303 	and.w	r3, r3, #3
 c005bce:	00db      	lsls	r3, r3, #3
 c005bd0:	497f      	ldr	r1, [pc, #508]	; (c005dd0 <HMAC_Processing+0x258>)
 c005bd2:	4313      	orrs	r3, r2
 c005bd4:	608b      	str	r3, [r1, #8]

    /* Write input buffer in Data register */
    hhash->Status = HASH_WriteData(hhash, hhash->pHashKeyBuffPtr, hhash->HashKeyCount);
 c005bd6:	687b      	ldr	r3, [r7, #4]
 c005bd8:	6959      	ldr	r1, [r3, #20]
 c005bda:	687b      	ldr	r3, [r7, #4]
 c005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005bde:	461a      	mov	r2, r3
 c005be0:	6878      	ldr	r0, [r7, #4]
 c005be2:	f7ff fdad 	bl	c005740 <HASH_WriteData>
 c005be6:	4603      	mov	r3, r0
 c005be8:	461a      	mov	r2, r3
 c005bea:	687b      	ldr	r3, [r7, #4]
 c005bec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (hhash->Status != HAL_OK)
 c005bf0:	687b      	ldr	r3, [r7, #4]
 c005bf2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 c005bf6:	2b00      	cmp	r3, #0
 c005bf8:	d003      	beq.n	c005c02 <HMAC_Processing+0x8a>
    {
      return hhash->Status;
 c005bfa:	687b      	ldr	r3, [r7, #4]
 c005bfc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 c005c00:	e0e1      	b.n	c005dc6 <HMAC_Processing+0x24e>
    }

    /* Check whether or not key entering process has been suspended */
    if (hhash->State == HAL_HASH_STATE_SUSPENDED)
 c005c02:	687b      	ldr	r3, [r7, #4]
 c005c04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 c005c08:	b2db      	uxtb	r3, r3
 c005c0a:	2b08      	cmp	r3, #8
 c005c0c:	d105      	bne.n	c005c1a <HMAC_Processing+0xa2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hhash);
 c005c0e:	687b      	ldr	r3, [r7, #4]
 c005c10:	2200      	movs	r2, #0
 c005c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Stop right there and return function status */
      return HAL_OK;
 c005c16:	2300      	movs	r3, #0
 c005c18:	e0d5      	b.n	c005dc6 <HMAC_Processing+0x24e>
    }

    /* No processing suspension at this point: set DCAL bit. */
    __HAL_HASH_START_DIGEST();
 c005c1a:	4b6d      	ldr	r3, [pc, #436]	; (c005dd0 <HMAC_Processing+0x258>)
 c005c1c:	689b      	ldr	r3, [r3, #8]
 c005c1e:	4a6c      	ldr	r2, [pc, #432]	; (c005dd0 <HMAC_Processing+0x258>)
 c005c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c005c24:	6093      	str	r3, [r2, #8]

    /* Wait for BUSY flag to be cleared */
    if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_BUSY, SET, Timeout) != HAL_OK)
 c005c26:	683b      	ldr	r3, [r7, #0]
 c005c28:	2201      	movs	r2, #1
 c005c2a:	2108      	movs	r1, #8
 c005c2c:	6878      	ldr	r0, [r7, #4]
 c005c2e:	f7ff ff1d 	bl	c005a6c <HASH_WaitOnFlagUntilTimeout>
 c005c32:	4603      	mov	r3, r0
 c005c34:	2b00      	cmp	r3, #0
 c005c36:	d001      	beq.n	c005c3c <HMAC_Processing+0xc4>
    {
      return HAL_TIMEOUT;
 c005c38:	2303      	movs	r3, #3
 c005c3a:	e0c4      	b.n	c005dc6 <HMAC_Processing+0x24e>
    }

    /* Move from Step 1 to Step 2 */
    hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_2;
 c005c3c:	687b      	ldr	r3, [r7, #4]
 c005c3e:	2204      	movs	r2, #4
 c005c40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  /* HMAC Step 2 processing.
     After phase check, HMAC_Processing() may
     - directly start up from this point in resumption case
       if the same Step 2 processing was suspended previously
    - or fall through from the Step 1 processing carried out hereabove */
  if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2)
 c005c44:	687b      	ldr	r3, [r7, #4]
 c005c46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 c005c4a:	2b04      	cmp	r3, #4
 c005c4c:	d14a      	bne.n	c005ce4 <HMAC_Processing+0x16c>
  {
    /************************** STEP 2 ******************************************/
    /* Configure the Number of valid bits in last word of the message */
    __HAL_HASH_SET_NBVALIDBITS(hhash->HashBuffSize);
 c005c4e:	4b60      	ldr	r3, [pc, #384]	; (c005dd0 <HMAC_Processing+0x258>)
 c005c50:	689b      	ldr	r3, [r3, #8]
 c005c52:	f023 021f 	bic.w	r2, r3, #31
 c005c56:	687b      	ldr	r3, [r7, #4]
 c005c58:	69db      	ldr	r3, [r3, #28]
 c005c5a:	f003 0303 	and.w	r3, r3, #3
 c005c5e:	00db      	lsls	r3, r3, #3
 c005c60:	495b      	ldr	r1, [pc, #364]	; (c005dd0 <HMAC_Processing+0x258>)
 c005c62:	4313      	orrs	r3, r2
 c005c64:	608b      	str	r3, [r1, #8]

    /* Write input buffer in Data register */
    hhash->Status = HASH_WriteData(hhash, hhash->pHashInBuffPtr, hhash->HashInCount);
 c005c66:	687b      	ldr	r3, [r7, #4]
 c005c68:	68d9      	ldr	r1, [r3, #12]
 c005c6a:	687b      	ldr	r3, [r7, #4]
 c005c6c:	6a1b      	ldr	r3, [r3, #32]
 c005c6e:	461a      	mov	r2, r3
 c005c70:	6878      	ldr	r0, [r7, #4]
 c005c72:	f7ff fd65 	bl	c005740 <HASH_WriteData>
 c005c76:	4603      	mov	r3, r0
 c005c78:	461a      	mov	r2, r3
 c005c7a:	687b      	ldr	r3, [r7, #4]
 c005c7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (hhash->Status != HAL_OK)
 c005c80:	687b      	ldr	r3, [r7, #4]
 c005c82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 c005c86:	2b00      	cmp	r3, #0
 c005c88:	d003      	beq.n	c005c92 <HMAC_Processing+0x11a>
    {
      return hhash->Status;
 c005c8a:	687b      	ldr	r3, [r7, #4]
 c005c8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 c005c90:	e099      	b.n	c005dc6 <HMAC_Processing+0x24e>
    }

    /* Check whether or not data entering process has been suspended */
    if (hhash->State == HAL_HASH_STATE_SUSPENDED)
 c005c92:	687b      	ldr	r3, [r7, #4]
 c005c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 c005c98:	b2db      	uxtb	r3, r3
 c005c9a:	2b08      	cmp	r3, #8
 c005c9c:	d105      	bne.n	c005caa <HMAC_Processing+0x132>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hhash);
 c005c9e:	687b      	ldr	r3, [r7, #4]
 c005ca0:	2200      	movs	r2, #0
 c005ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Stop right there and return function status */
      return HAL_OK;
 c005ca6:	2300      	movs	r3, #0
 c005ca8:	e08d      	b.n	c005dc6 <HMAC_Processing+0x24e>
    }

    /* No processing suspension at this point: set DCAL bit. */
    __HAL_HASH_START_DIGEST();
 c005caa:	4b49      	ldr	r3, [pc, #292]	; (c005dd0 <HMAC_Processing+0x258>)
 c005cac:	689b      	ldr	r3, [r3, #8]
 c005cae:	4a48      	ldr	r2, [pc, #288]	; (c005dd0 <HMAC_Processing+0x258>)
 c005cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c005cb4:	6093      	str	r3, [r2, #8]

    /* Wait for BUSY flag to be cleared */
    if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_BUSY, SET, Timeout) != HAL_OK)
 c005cb6:	683b      	ldr	r3, [r7, #0]
 c005cb8:	2201      	movs	r2, #1
 c005cba:	2108      	movs	r1, #8
 c005cbc:	6878      	ldr	r0, [r7, #4]
 c005cbe:	f7ff fed5 	bl	c005a6c <HASH_WaitOnFlagUntilTimeout>
 c005cc2:	4603      	mov	r3, r0
 c005cc4:	2b00      	cmp	r3, #0
 c005cc6:	d001      	beq.n	c005ccc <HMAC_Processing+0x154>
    {
      return HAL_TIMEOUT;
 c005cc8:	2303      	movs	r3, #3
 c005cca:	e07c      	b.n	c005dc6 <HMAC_Processing+0x24e>
    }

    /* Move from Step 2 to Step 3 */
    hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_3;
 c005ccc:	687b      	ldr	r3, [r7, #4]
 c005cce:	2205      	movs	r2, #5
 c005cd0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* In case Step 1 phase was suspended then resumed,
       set again Key input buffers and size before moving to
       next step */
    hhash->pHashKeyBuffPtr = hhash->Init.pKey;
 c005cd4:	687b      	ldr	r3, [r7, #4]
 c005cd6:	689a      	ldr	r2, [r3, #8]
 c005cd8:	687b      	ldr	r3, [r7, #4]
 c005cda:	615a      	str	r2, [r3, #20]
    hhash->HashKeyCount    = hhash->Init.KeySize;
 c005cdc:	687b      	ldr	r3, [r7, #4]
 c005cde:	685a      	ldr	r2, [r3, #4]
 c005ce0:	687b      	ldr	r3, [r7, #4]
 c005ce2:	629a      	str	r2, [r3, #40]	; 0x28
 /* HMAC Step 3 processing.
     After phase check, HMAC_Processing() may
     - directly start up from this point in resumption case
       if the same Step 3 processing was suspended previously
    - or fall through from the Step 2 processing carried out hereabove */
  if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_3)
 c005ce4:	687b      	ldr	r3, [r7, #4]
 c005ce6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 c005cea:	2b05      	cmp	r3, #5
 c005cec:	d162      	bne.n	c005db4 <HMAC_Processing+0x23c>
  {
    /************************** STEP 3 ******************************************/
    /* Configure the Number of valid bits in last word of the message */
    __HAL_HASH_SET_NBVALIDBITS(hhash->Init.KeySize);
 c005cee:	4b38      	ldr	r3, [pc, #224]	; (c005dd0 <HMAC_Processing+0x258>)
 c005cf0:	689b      	ldr	r3, [r3, #8]
 c005cf2:	f023 021f 	bic.w	r2, r3, #31
 c005cf6:	687b      	ldr	r3, [r7, #4]
 c005cf8:	685b      	ldr	r3, [r3, #4]
 c005cfa:	f003 0303 	and.w	r3, r3, #3
 c005cfe:	00db      	lsls	r3, r3, #3
 c005d00:	4933      	ldr	r1, [pc, #204]	; (c005dd0 <HMAC_Processing+0x258>)
 c005d02:	4313      	orrs	r3, r2
 c005d04:	608b      	str	r3, [r1, #8]

    /* Write input buffer in Data register */
    hhash->Status = HASH_WriteData(hhash, hhash->pHashKeyBuffPtr, hhash->HashKeyCount);
 c005d06:	687b      	ldr	r3, [r7, #4]
 c005d08:	6959      	ldr	r1, [r3, #20]
 c005d0a:	687b      	ldr	r3, [r7, #4]
 c005d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005d0e:	461a      	mov	r2, r3
 c005d10:	6878      	ldr	r0, [r7, #4]
 c005d12:	f7ff fd15 	bl	c005740 <HASH_WriteData>
 c005d16:	4603      	mov	r3, r0
 c005d18:	461a      	mov	r2, r3
 c005d1a:	687b      	ldr	r3, [r7, #4]
 c005d1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (hhash->Status != HAL_OK)
 c005d20:	687b      	ldr	r3, [r7, #4]
 c005d22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 c005d26:	2b00      	cmp	r3, #0
 c005d28:	d003      	beq.n	c005d32 <HMAC_Processing+0x1ba>
    {
      return hhash->Status;
 c005d2a:	687b      	ldr	r3, [r7, #4]
 c005d2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 c005d30:	e049      	b.n	c005dc6 <HMAC_Processing+0x24e>
    }

    /* Check whether or not key entering process has been suspended */
    if (hhash->State == HAL_HASH_STATE_SUSPENDED)
 c005d32:	687b      	ldr	r3, [r7, #4]
 c005d34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 c005d38:	b2db      	uxtb	r3, r3
 c005d3a:	2b08      	cmp	r3, #8
 c005d3c:	d105      	bne.n	c005d4a <HMAC_Processing+0x1d2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hhash);
 c005d3e:	687b      	ldr	r3, [r7, #4]
 c005d40:	2200      	movs	r2, #0
 c005d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Stop right there and return function status */
      return HAL_OK;
 c005d46:	2300      	movs	r3, #0
 c005d48:	e03d      	b.n	c005dc6 <HMAC_Processing+0x24e>
    }

    /* No processing suspension at this point: start the Digest calculation. */
    __HAL_HASH_START_DIGEST();
 c005d4a:	4b21      	ldr	r3, [pc, #132]	; (c005dd0 <HMAC_Processing+0x258>)
 c005d4c:	689b      	ldr	r3, [r3, #8]
 c005d4e:	4a20      	ldr	r2, [pc, #128]	; (c005dd0 <HMAC_Processing+0x258>)
 c005d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c005d54:	6093      	str	r3, [r2, #8]

    /* Wait for DCIS flag to be set */
     if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_DCIS, RESET, Timeout) != HAL_OK)
 c005d56:	683b      	ldr	r3, [r7, #0]
 c005d58:	2200      	movs	r2, #0
 c005d5a:	2102      	movs	r1, #2
 c005d5c:	6878      	ldr	r0, [r7, #4]
 c005d5e:	f7ff fe85 	bl	c005a6c <HASH_WaitOnFlagUntilTimeout>
 c005d62:	4603      	mov	r3, r0
 c005d64:	2b00      	cmp	r3, #0
 c005d66:	d001      	beq.n	c005d6c <HMAC_Processing+0x1f4>
    {
      return HAL_TIMEOUT;
 c005d68:	2303      	movs	r3, #3
 c005d6a:	e02c      	b.n	c005dc6 <HMAC_Processing+0x24e>
    }

    /* Read the message digest */
    HASH_GetDigest(hhash->pHashOutBuffPtr, HASH_DIGEST_LENGTH());
 c005d6c:	687b      	ldr	r3, [r7, #4]
 c005d6e:	6918      	ldr	r0, [r3, #16]
 c005d70:	4b17      	ldr	r3, [pc, #92]	; (c005dd0 <HMAC_Processing+0x258>)
 c005d72:	681a      	ldr	r2, [r3, #0]
 c005d74:	4b17      	ldr	r3, [pc, #92]	; (c005dd4 <HMAC_Processing+0x25c>)
 c005d76:	4013      	ands	r3, r2
 c005d78:	2b00      	cmp	r3, #0
 c005d7a:	d013      	beq.n	c005da4 <HMAC_Processing+0x22c>
 c005d7c:	4b14      	ldr	r3, [pc, #80]	; (c005dd0 <HMAC_Processing+0x258>)
 c005d7e:	681a      	ldr	r2, [r3, #0]
 c005d80:	4b14      	ldr	r3, [pc, #80]	; (c005dd4 <HMAC_Processing+0x25c>)
 c005d82:	4013      	ands	r3, r2
 c005d84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 c005d88:	d00a      	beq.n	c005da0 <HMAC_Processing+0x228>
 c005d8a:	4b11      	ldr	r3, [pc, #68]	; (c005dd0 <HMAC_Processing+0x258>)
 c005d8c:	681a      	ldr	r2, [r3, #0]
 c005d8e:	4b11      	ldr	r3, [pc, #68]	; (c005dd4 <HMAC_Processing+0x25c>)
 c005d90:	4013      	ands	r3, r2
 c005d92:	4a10      	ldr	r2, [pc, #64]	; (c005dd4 <HMAC_Processing+0x25c>)
 c005d94:	4293      	cmp	r3, r2
 c005d96:	d101      	bne.n	c005d9c <HMAC_Processing+0x224>
 c005d98:	2320      	movs	r3, #32
 c005d9a:	e004      	b.n	c005da6 <HMAC_Processing+0x22e>
 c005d9c:	2310      	movs	r3, #16
 c005d9e:	e002      	b.n	c005da6 <HMAC_Processing+0x22e>
 c005da0:	231c      	movs	r3, #28
 c005da2:	e000      	b.n	c005da6 <HMAC_Processing+0x22e>
 c005da4:	2314      	movs	r3, #20
 c005da6:	4619      	mov	r1, r3
 c005da8:	f7ff fd3a 	bl	c005820 <HASH_GetDigest>

    /* Reset HASH state machine */
    hhash->Phase = HAL_HASH_PHASE_READY;
 c005dac:	687b      	ldr	r3, [r7, #4]
 c005dae:	2201      	movs	r2, #1
 c005db0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

   /* Change the HASH state */
   hhash->State = HAL_HASH_STATE_READY;
 c005db4:	687b      	ldr	r3, [r7, #4]
 c005db6:	2201      	movs	r2, #1
 c005db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

   /* Process Unlock */
   __HAL_UNLOCK(hhash);
 c005dbc:	687b      	ldr	r3, [r7, #4]
 c005dbe:	2200      	movs	r2, #0
 c005dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

   /* Return function status */
   return HAL_OK;
 c005dc4:	2300      	movs	r3, #0
}
 c005dc6:	4618      	mov	r0, r3
 c005dc8:	3708      	adds	r7, #8
 c005dca:	46bd      	mov	sp, r7
 c005dcc:	bd80      	pop	{r7, pc}
 c005dce:	bf00      	nop
 c005dd0:	520c0400 	.word	0x520c0400
 c005dd4:	00040080 	.word	0x00040080

0c005dd8 <HMAC_Start>:
  * @param  Timeout Timeout value.
  * @param  Algorithm HASH algorithm.
  * @retval HAL status
  */
HAL_StatusTypeDef HMAC_Start(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint8_t* pOutBuffer, uint32_t Timeout, uint32_t Algorithm)
{
 c005dd8:	b580      	push	{r7, lr}
 c005dda:	b086      	sub	sp, #24
 c005ddc:	af00      	add	r7, sp, #0
 c005dde:	60f8      	str	r0, [r7, #12]
 c005de0:	60b9      	str	r1, [r7, #8]
 c005de2:	607a      	str	r2, [r7, #4]
 c005de4:	603b      	str	r3, [r7, #0]
    HAL_HASH_StateTypeDef State_tmp = hhash->State;
 c005de6:	68fb      	ldr	r3, [r7, #12]
 c005de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 c005dec:	75fb      	strb	r3, [r7, #23]

   /* If State is ready or suspended, start or resume polling-based HASH processing */
if((State_tmp == HAL_HASH_STATE_READY) || (State_tmp == HAL_HASH_STATE_SUSPENDED))
 c005dee:	7dfb      	ldrb	r3, [r7, #23]
 c005df0:	2b01      	cmp	r3, #1
 c005df2:	d002      	beq.n	c005dfa <HMAC_Start+0x22>
 c005df4:	7dfb      	ldrb	r3, [r7, #23]
 c005df6:	2b08      	cmp	r3, #8
 c005df8:	d167      	bne.n	c005eca <HMAC_Start+0xf2>
  {
    /* Check input parameters */
    if ((pInBuffer == NULL) || (Size == 0U) || (hhash->Init.pKey == NULL) || (hhash->Init.KeySize == 0U) || (pOutBuffer == NULL))
 c005dfa:	68bb      	ldr	r3, [r7, #8]
 c005dfc:	2b00      	cmp	r3, #0
 c005dfe:	d00d      	beq.n	c005e1c <HMAC_Start+0x44>
 c005e00:	687b      	ldr	r3, [r7, #4]
 c005e02:	2b00      	cmp	r3, #0
 c005e04:	d00a      	beq.n	c005e1c <HMAC_Start+0x44>
 c005e06:	68fb      	ldr	r3, [r7, #12]
 c005e08:	689b      	ldr	r3, [r3, #8]
 c005e0a:	2b00      	cmp	r3, #0
 c005e0c:	d006      	beq.n	c005e1c <HMAC_Start+0x44>
 c005e0e:	68fb      	ldr	r3, [r7, #12]
 c005e10:	685b      	ldr	r3, [r3, #4]
 c005e12:	2b00      	cmp	r3, #0
 c005e14:	d002      	beq.n	c005e1c <HMAC_Start+0x44>
 c005e16:	683b      	ldr	r3, [r7, #0]
 c005e18:	2b00      	cmp	r3, #0
 c005e1a:	d105      	bne.n	c005e28 <HMAC_Start+0x50>
    {
      hhash->State = HAL_HASH_STATE_READY;
 c005e1c:	68fb      	ldr	r3, [r7, #12]
 c005e1e:	2201      	movs	r2, #1
 c005e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      return  HAL_ERROR;
 c005e24:	2301      	movs	r3, #1
 c005e26:	e051      	b.n	c005ecc <HMAC_Start+0xf4>
    }

    /* Process Locked */
    __HAL_LOCK(hhash);
 c005e28:	68fb      	ldr	r3, [r7, #12]
 c005e2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 c005e2e:	2b01      	cmp	r3, #1
 c005e30:	d101      	bne.n	c005e36 <HMAC_Start+0x5e>
 c005e32:	2302      	movs	r3, #2
 c005e34:	e04a      	b.n	c005ecc <HMAC_Start+0xf4>
 c005e36:	68fb      	ldr	r3, [r7, #12]
 c005e38:	2201      	movs	r2, #1
 c005e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_BUSY;
 c005e3e:	68fb      	ldr	r3, [r7, #12]
 c005e40:	2202      	movs	r2, #2
 c005e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Check if initialization phase has already be performed */
    if(hhash->Phase == HAL_HASH_PHASE_READY)
 c005e46:	68fb      	ldr	r3, [r7, #12]
 c005e48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 c005e4c:	2b01      	cmp	r3, #1
 c005e4e:	d136      	bne.n	c005ebe <HMAC_Start+0xe6>
    {
      /* Check if key size is larger than 64 bytes, accordingly set LKEY and the other setting bits */
      if(hhash->Init.KeySize > 64U)
 c005e50:	68fb      	ldr	r3, [r7, #12]
 c005e52:	685b      	ldr	r3, [r3, #4]
 c005e54:	2b40      	cmp	r3, #64	; 0x40
 c005e56:	d90e      	bls.n	c005e76 <HMAC_Start+0x9e>
      {
        MODIFY_REG(HASH->CR, HASH_CR_LKEY|HASH_CR_ALGO|HASH_CR_MODE|HASH_CR_INIT, Algorithm | HASH_ALGOMODE_HMAC | HASH_HMAC_KEYTYPE_LONGKEY | HASH_CR_INIT);
 c005e58:	4b1e      	ldr	r3, [pc, #120]	; (c005ed4 <HMAC_Start+0xfc>)
 c005e5a:	681b      	ldr	r3, [r3, #0]
 c005e5c:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 c005e60:	f023 03c4 	bic.w	r3, r3, #196	; 0xc4
 c005e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c005e66:	4313      	orrs	r3, r2
 c005e68:	4a1a      	ldr	r2, [pc, #104]	; (c005ed4 <HMAC_Start+0xfc>)
 c005e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c005e6e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 c005e72:	6013      	str	r3, [r2, #0]
 c005e74:	e00b      	b.n	c005e8e <HMAC_Start+0xb6>
      }
      else
      {
        MODIFY_REG(HASH->CR, HASH_CR_LKEY|HASH_CR_ALGO|HASH_CR_MODE|HASH_CR_INIT, Algorithm | HASH_ALGOMODE_HMAC | HASH_CR_INIT);
 c005e76:	4b17      	ldr	r3, [pc, #92]	; (c005ed4 <HMAC_Start+0xfc>)
 c005e78:	681b      	ldr	r3, [r3, #0]
 c005e7a:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 c005e7e:	f023 03c4 	bic.w	r3, r3, #196	; 0xc4
 c005e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c005e84:	4313      	orrs	r3, r2
 c005e86:	4a13      	ldr	r2, [pc, #76]	; (c005ed4 <HMAC_Start+0xfc>)
 c005e88:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 c005e8c:	6013      	str	r3, [r2, #0]
      }
      /* Set the phase to Step 1 */
      hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_1;
 c005e8e:	68fb      	ldr	r3, [r7, #12]
 c005e90:	2203      	movs	r2, #3
 c005e92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      /* Resort to hhash internal fields to feed the Peripheral.
         Parameters will be updated in case of suspension to contain the proper
         information at resumption time. */
      hhash->pHashOutBuffPtr  = pOutBuffer;            /* Output digest address                                              */
 c005e96:	68fb      	ldr	r3, [r7, #12]
 c005e98:	683a      	ldr	r2, [r7, #0]
 c005e9a:	611a      	str	r2, [r3, #16]
      hhash->pHashInBuffPtr   = pInBuffer;             /* Input data address, HMAC_Processing input parameter for Step 2     */
 c005e9c:	68fb      	ldr	r3, [r7, #12]
 c005e9e:	68ba      	ldr	r2, [r7, #8]
 c005ea0:	60da      	str	r2, [r3, #12]
      hhash->HashInCount      = Size;                  /* Input data size, HMAC_Processing input parameter for Step 2        */
 c005ea2:	68fb      	ldr	r3, [r7, #12]
 c005ea4:	687a      	ldr	r2, [r7, #4]
 c005ea6:	621a      	str	r2, [r3, #32]
      hhash->HashBuffSize     = Size;                  /* Store the input buffer size for the whole HMAC process             */
 c005ea8:	68fb      	ldr	r3, [r7, #12]
 c005eaa:	687a      	ldr	r2, [r7, #4]
 c005eac:	61da      	str	r2, [r3, #28]
      hhash->pHashKeyBuffPtr  = hhash->Init.pKey;      /* Key address, HMAC_Processing input parameter for Step 1 and Step 3 */
 c005eae:	68fb      	ldr	r3, [r7, #12]
 c005eb0:	689a      	ldr	r2, [r3, #8]
 c005eb2:	68fb      	ldr	r3, [r7, #12]
 c005eb4:	615a      	str	r2, [r3, #20]
      hhash->HashKeyCount     = hhash->Init.KeySize;   /* Key size, HMAC_Processing input parameter for Step 1 and Step 3    */
 c005eb6:	68fb      	ldr	r3, [r7, #12]
 c005eb8:	685a      	ldr	r2, [r3, #4]
 c005eba:	68fb      	ldr	r3, [r7, #12]
 c005ebc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    /* Carry out HMAC processing */
    return HMAC_Processing(hhash, Timeout);
 c005ebe:	6a39      	ldr	r1, [r7, #32]
 c005ec0:	68f8      	ldr	r0, [r7, #12]
 c005ec2:	f7ff fe59 	bl	c005b78 <HMAC_Processing>
 c005ec6:	4603      	mov	r3, r0
 c005ec8:	e000      	b.n	c005ecc <HMAC_Start+0xf4>

  }
  else
  {
    return HAL_BUSY;
 c005eca:	2302      	movs	r3, #2
  }
}
 c005ecc:	4618      	mov	r0, r3
 c005ece:	3718      	adds	r7, #24
 c005ed0:	46bd      	mov	sp, r7
 c005ed2:	bd80      	pop	{r7, pc}
 c005ed4:	520c0400 	.word	0x520c0400

0c005ed8 <HAL_HMACEx_SHA256_Start>:
  * @param  pOutBuffer pointer to the computed digest. Digest size is 32 bytes.
  * @param  Timeout Timeout value.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HMACEx_SHA256_Start(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint8_t* pOutBuffer, uint32_t Timeout)
{
 c005ed8:	b580      	push	{r7, lr}
 c005eda:	b086      	sub	sp, #24
 c005edc:	af02      	add	r7, sp, #8
 c005ede:	60f8      	str	r0, [r7, #12]
 c005ee0:	60b9      	str	r1, [r7, #8]
 c005ee2:	607a      	str	r2, [r7, #4]
 c005ee4:	603b      	str	r3, [r7, #0]
  return HMAC_Start(hhash, pInBuffer, Size, pOutBuffer, Timeout, HASH_ALGOSELECTION_SHA256);
 c005ee6:	4b07      	ldr	r3, [pc, #28]	; (c005f04 <HAL_HMACEx_SHA256_Start+0x2c>)
 c005ee8:	9301      	str	r3, [sp, #4]
 c005eea:	69bb      	ldr	r3, [r7, #24]
 c005eec:	9300      	str	r3, [sp, #0]
 c005eee:	683b      	ldr	r3, [r7, #0]
 c005ef0:	687a      	ldr	r2, [r7, #4]
 c005ef2:	68b9      	ldr	r1, [r7, #8]
 c005ef4:	68f8      	ldr	r0, [r7, #12]
 c005ef6:	f7ff ff6f 	bl	c005dd8 <HMAC_Start>
 c005efa:	4603      	mov	r3, r0
}
 c005efc:	4618      	mov	r0, r3
 c005efe:	3710      	adds	r7, #16
 c005f00:	46bd      	mov	sp, r7
 c005f02:	bd80      	pop	{r7, pc}
 c005f04:	00040080 	.word	0x00040080

0c005f08 <HAL_PWR_ConfigAttributes>:
  *            @arg @ref PWR_SEC          Secure-only access
  *            @arg @ref PWR_NSEC         Secure/Non-secure access
  * @retval None
  */
void HAL_PWR_ConfigAttributes(uint32_t Item, uint32_t Attributes)
{
 c005f08:	b480      	push	{r7}
 c005f0a:	b083      	sub	sp, #12
 c005f0c:	af00      	add	r7, sp, #0
 c005f0e:	6078      	str	r0, [r7, #4]
 c005f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_PWR_ITEMS_ATTRIBUTES(Item));
  assert_param(IS_PWR_ATTRIBUTES(Attributes));

  /* Privilege/non-privilege attribute */
  if ((Attributes & PWR_PRIV) == PWR_PRIV)
 c005f12:	683a      	ldr	r2, [r7, #0]
 c005f14:	f240 2302 	movw	r3, #514	; 0x202
 c005f18:	4013      	ands	r3, r2
 c005f1a:	f240 2202 	movw	r2, #514	; 0x202
 c005f1e:	4293      	cmp	r3, r2
 c005f20:	d108      	bne.n	c005f34 <HAL_PWR_ConfigAttributes+0x2c>
  {
    SET_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_PRIV);
 c005f22:	4b1b      	ldr	r3, [pc, #108]	; (c005f90 <HAL_PWR_ConfigAttributes+0x88>)
 c005f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c005f28:	4a19      	ldr	r2, [pc, #100]	; (c005f90 <HAL_PWR_ConfigAttributes+0x88>)
 c005f2a:	f043 0301 	orr.w	r3, r3, #1
 c005f2e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 c005f32:	e00c      	b.n	c005f4e <HAL_PWR_ConfigAttributes+0x46>
  }
  else if ((Attributes & PWR_NPRIV) == PWR_NPRIV)
 c005f34:	683b      	ldr	r3, [r7, #0]
 c005f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c005f3a:	2b00      	cmp	r3, #0
 c005f3c:	d007      	beq.n	c005f4e <HAL_PWR_ConfigAttributes+0x46>
  {
    CLEAR_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_PRIV);
 c005f3e:	4b14      	ldr	r3, [pc, #80]	; (c005f90 <HAL_PWR_ConfigAttributes+0x88>)
 c005f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c005f44:	4a12      	ldr	r2, [pc, #72]	; (c005f90 <HAL_PWR_ConfigAttributes+0x88>)
 c005f46:	f023 0301 	bic.w	r3, r3, #1
 c005f4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80


#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)

  /* Secure/non-secure attribute */
  if ((Attributes & PWR_SEC) == PWR_SEC)
 c005f4e:	683a      	ldr	r2, [r7, #0]
 c005f50:	f240 1301 	movw	r3, #257	; 0x101
 c005f54:	4013      	ands	r3, r2
 c005f56:	f240 1201 	movw	r2, #257	; 0x101
 c005f5a:	4293      	cmp	r3, r2
 c005f5c:	d106      	bne.n	c005f6c <HAL_PWR_ConfigAttributes+0x64>
  {
    SET_BIT(PWR_S->SECCFGR, Item);
 c005f5e:	4b0c      	ldr	r3, [pc, #48]	; (c005f90 <HAL_PWR_ConfigAttributes+0x88>)
 c005f60:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 c005f62:	490b      	ldr	r1, [pc, #44]	; (c005f90 <HAL_PWR_ConfigAttributes+0x88>)
 c005f64:	687b      	ldr	r3, [r7, #4]
 c005f66:	4313      	orrs	r3, r2
 c005f68:	678b      	str	r3, [r1, #120]	; 0x78
  {
    /* do nothing */
  }

#endif /* __ARM_FEATURE_CMSE */
}
 c005f6a:	e00b      	b.n	c005f84 <HAL_PWR_ConfigAttributes+0x7c>
  else if ((Attributes & PWR_NSEC) == PWR_NSEC)
 c005f6c:	683b      	ldr	r3, [r7, #0]
 c005f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c005f72:	2b00      	cmp	r3, #0
 c005f74:	d006      	beq.n	c005f84 <HAL_PWR_ConfigAttributes+0x7c>
    CLEAR_BIT(PWR_S->SECCFGR, Item);
 c005f76:	4b06      	ldr	r3, [pc, #24]	; (c005f90 <HAL_PWR_ConfigAttributes+0x88>)
 c005f78:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 c005f7a:	687b      	ldr	r3, [r7, #4]
 c005f7c:	43db      	mvns	r3, r3
 c005f7e:	4904      	ldr	r1, [pc, #16]	; (c005f90 <HAL_PWR_ConfigAttributes+0x88>)
 c005f80:	4013      	ands	r3, r2
 c005f82:	678b      	str	r3, [r1, #120]	; 0x78
}
 c005f84:	bf00      	nop
 c005f86:	370c      	adds	r7, #12
 c005f88:	46bd      	mov	sp, r7
 c005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005f8e:	4770      	bx	lr
 c005f90:	50007000 	.word	0x50007000

0c005f94 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c005f94:	b480      	push	{r7}
 c005f96:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 c005f98:	4b04      	ldr	r3, [pc, #16]	; (c005fac <HAL_PWREx_GetVoltageRange+0x18>)
 c005f9a:	681b      	ldr	r3, [r3, #0]
 c005f9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 c005fa0:	4618      	mov	r0, r3
 c005fa2:	46bd      	mov	sp, r7
 c005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005fa8:	4770      	bx	lr
 c005faa:	bf00      	nop
 c005fac:	50007000 	.word	0x50007000

0c005fb0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c005fb0:	b580      	push	{r7, lr}
 c005fb2:	b084      	sub	sp, #16
 c005fb4:	af00      	add	r7, sp, #0
 c005fb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c005fb8:	4b27      	ldr	r3, [pc, #156]	; (c006058 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c005fba:	681b      	ldr	r3, [r3, #0]
 c005fbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 c005fc0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 c005fc2:	f000 f871 	bl	c0060a8 <HAL_PWREx_SMPS_GetEffectiveMode>
 c005fc6:	4603      	mov	r3, r0
 c005fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c005fcc:	d101      	bne.n	c005fd2 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 c005fce:	2301      	movs	r3, #1
 c005fd0:	e03e      	b.n	c006050 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c005fd2:	4b21      	ldr	r3, [pc, #132]	; (c006058 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c005fd4:	68db      	ldr	r3, [r3, #12]
 c005fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c005fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c005fde:	d101      	bne.n	c005fe4 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 c005fe0:	2301      	movs	r3, #1
 c005fe2:	e035      	b.n	c006050 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c005fe4:	68ba      	ldr	r2, [r7, #8]
 c005fe6:	687b      	ldr	r3, [r7, #4]
 c005fe8:	429a      	cmp	r2, r3
 c005fea:	d101      	bne.n	c005ff0 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 c005fec:	2300      	movs	r3, #0
 c005fee:	e02f      	b.n	c006050 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c005ff0:	4b19      	ldr	r3, [pc, #100]	; (c006058 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c005ff2:	681b      	ldr	r3, [r3, #0]
 c005ff4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 c005ff8:	4917      	ldr	r1, [pc, #92]	; (c006058 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c005ffa:	687b      	ldr	r3, [r7, #4]
 c005ffc:	4313      	orrs	r3, r2
 c005ffe:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c006000:	4b16      	ldr	r3, [pc, #88]	; (c00605c <HAL_PWREx_ControlVoltageScaling+0xac>)
 c006002:	681b      	ldr	r3, [r3, #0]
 c006004:	095b      	lsrs	r3, r3, #5
 c006006:	4a16      	ldr	r2, [pc, #88]	; (c006060 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 c006008:	fba2 2303 	umull	r2, r3, r2, r3
 c00600c:	09db      	lsrs	r3, r3, #7
 c00600e:	2232      	movs	r2, #50	; 0x32
 c006010:	fb02 f303 	mul.w	r3, r2, r3
 c006014:	4a13      	ldr	r2, [pc, #76]	; (c006064 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 c006016:	fba2 2303 	umull	r2, r3, r2, r3
 c00601a:	08db      	lsrs	r3, r3, #3
 c00601c:	3301      	adds	r3, #1
 c00601e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c006020:	e002      	b.n	c006028 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 c006022:	68fb      	ldr	r3, [r7, #12]
 c006024:	3b01      	subs	r3, #1
 c006026:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c006028:	4b0b      	ldr	r3, [pc, #44]	; (c006058 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c00602a:	695b      	ldr	r3, [r3, #20]
 c00602c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c006030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c006034:	d102      	bne.n	c00603c <HAL_PWREx_ControlVoltageScaling+0x8c>
 c006036:	68fb      	ldr	r3, [r7, #12]
 c006038:	2b00      	cmp	r3, #0
 c00603a:	d1f2      	bne.n	c006022 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c00603c:	4b06      	ldr	r3, [pc, #24]	; (c006058 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c00603e:	695b      	ldr	r3, [r3, #20]
 c006040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c006044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c006048:	d101      	bne.n	c00604e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 c00604a:	2303      	movs	r3, #3
 c00604c:	e000      	b.n	c006050 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 c00604e:	2300      	movs	r3, #0
}
 c006050:	4618      	mov	r0, r3
 c006052:	3710      	adds	r7, #16
 c006054:	46bd      	mov	sp, r7
 c006056:	bd80      	pop	{r7, pc}
 c006058:	50007000 	.word	0x50007000
 c00605c:	30000068 	.word	0x30000068
 c006060:	0a7c5ac5 	.word	0x0a7c5ac5
 c006064:	cccccccd 	.word	0xcccccccd

0c006068 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 c006068:	b480      	push	{r7}
 c00606a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 c00606c:	4b05      	ldr	r3, [pc, #20]	; (c006084 <HAL_PWREx_EnableVddIO2+0x1c>)
 c00606e:	685b      	ldr	r3, [r3, #4]
 c006070:	4a04      	ldr	r2, [pc, #16]	; (c006084 <HAL_PWREx_EnableVddIO2+0x1c>)
 c006072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 c006076:	6053      	str	r3, [r2, #4]
}
 c006078:	bf00      	nop
 c00607a:	46bd      	mov	sp, r7
 c00607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006080:	4770      	bx	lr
 c006082:	bf00      	nop
 c006084:	50007000 	.word	0x50007000

0c006088 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c006088:	b480      	push	{r7}
 c00608a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c00608c:	4b05      	ldr	r3, [pc, #20]	; (c0060a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c00608e:	689b      	ldr	r3, [r3, #8]
 c006090:	4a04      	ldr	r2, [pc, #16]	; (c0060a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c006092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c006096:	6093      	str	r3, [r2, #8]
}
 c006098:	bf00      	nop
 c00609a:	46bd      	mov	sp, r7
 c00609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0060a0:	4770      	bx	lr
 c0060a2:	bf00      	nop
 c0060a4:	50007000 	.word	0x50007000

0c0060a8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 c0060a8:	b480      	push	{r7}
 c0060aa:	b083      	sub	sp, #12
 c0060ac:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c0060ae:	4b0f      	ldr	r3, [pc, #60]	; (c0060ec <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 c0060b0:	691b      	ldr	r3, [r3, #16]
 c0060b2:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 c0060b4:	683b      	ldr	r3, [r7, #0]
 c0060b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c0060ba:	2b00      	cmp	r3, #0
 c0060bc:	d003      	beq.n	c0060c6 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 c0060be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c0060c2:	607b      	str	r3, [r7, #4]
 c0060c4:	e00a      	b.n	c0060dc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c0060c6:	683b      	ldr	r3, [r7, #0]
 c0060c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c0060cc:	2b00      	cmp	r3, #0
 c0060ce:	d103      	bne.n	c0060d8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 c0060d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c0060d4:	607b      	str	r3, [r7, #4]
 c0060d6:	e001      	b.n	c0060dc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 c0060d8:	2300      	movs	r3, #0
 c0060da:	607b      	str	r3, [r7, #4]
  }

  return mode;
 c0060dc:	687b      	ldr	r3, [r7, #4]
}
 c0060de:	4618      	mov	r0, r3
 c0060e0:	370c      	adds	r7, #12
 c0060e2:	46bd      	mov	sp, r7
 c0060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0060e8:	4770      	bx	lr
 c0060ea:	bf00      	nop
 c0060ec:	50007000 	.word	0x50007000

0c0060f0 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 c0060f0:	b580      	push	{r7, lr}
 c0060f2:	b088      	sub	sp, #32
 c0060f4:	af00      	add	r7, sp, #0
 c0060f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 c0060f8:	687b      	ldr	r3, [r7, #4]
 c0060fa:	2b00      	cmp	r3, #0
 c0060fc:	d102      	bne.n	c006104 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c0060fe:	2301      	movs	r3, #1
 c006100:	f000 bcd0 	b.w	c006aa4 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c006104:	4b99      	ldr	r3, [pc, #612]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c006106:	689b      	ldr	r3, [r3, #8]
 c006108:	f003 030c 	and.w	r3, r3, #12
 c00610c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c00610e:	4b97      	ldr	r3, [pc, #604]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c006110:	68db      	ldr	r3, [r3, #12]
 c006112:	f003 0303 	and.w	r3, r3, #3
 c006116:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c006118:	687b      	ldr	r3, [r7, #4]
 c00611a:	681b      	ldr	r3, [r3, #0]
 c00611c:	f003 0310 	and.w	r3, r3, #16
 c006120:	2b00      	cmp	r3, #0
 c006122:	f000 80e9 	beq.w	c0062f8 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c006126:	69bb      	ldr	r3, [r7, #24]
 c006128:	2b00      	cmp	r3, #0
 c00612a:	d006      	beq.n	c00613a <HAL_RCC_OscConfig+0x4a>
 c00612c:	69bb      	ldr	r3, [r7, #24]
 c00612e:	2b0c      	cmp	r3, #12
 c006130:	f040 8083 	bne.w	c00623a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c006134:	697b      	ldr	r3, [r7, #20]
 c006136:	2b01      	cmp	r3, #1
 c006138:	d17f      	bne.n	c00623a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c00613a:	4b8c      	ldr	r3, [pc, #560]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c00613c:	681b      	ldr	r3, [r3, #0]
 c00613e:	f003 0302 	and.w	r3, r3, #2
 c006142:	2b00      	cmp	r3, #0
 c006144:	d006      	beq.n	c006154 <HAL_RCC_OscConfig+0x64>
 c006146:	687b      	ldr	r3, [r7, #4]
 c006148:	69db      	ldr	r3, [r3, #28]
 c00614a:	2b00      	cmp	r3, #0
 c00614c:	d102      	bne.n	c006154 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 c00614e:	2301      	movs	r3, #1
 c006150:	f000 bca8 	b.w	c006aa4 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c006154:	687b      	ldr	r3, [r7, #4]
 c006156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c006158:	4b84      	ldr	r3, [pc, #528]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c00615a:	681b      	ldr	r3, [r3, #0]
 c00615c:	f003 0308 	and.w	r3, r3, #8
 c006160:	2b00      	cmp	r3, #0
 c006162:	d004      	beq.n	c00616e <HAL_RCC_OscConfig+0x7e>
 c006164:	4b81      	ldr	r3, [pc, #516]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c006166:	681b      	ldr	r3, [r3, #0]
 c006168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c00616c:	e005      	b.n	c00617a <HAL_RCC_OscConfig+0x8a>
 c00616e:	4b7f      	ldr	r3, [pc, #508]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c006170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c006174:	091b      	lsrs	r3, r3, #4
 c006176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c00617a:	4293      	cmp	r3, r2
 c00617c:	d224      	bcs.n	c0061c8 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c00617e:	687b      	ldr	r3, [r7, #4]
 c006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c006182:	4618      	mov	r0, r3
 c006184:	f000 fe96 	bl	c006eb4 <RCC_SetFlashLatencyFromMSIRange>
 c006188:	4603      	mov	r3, r0
 c00618a:	2b00      	cmp	r3, #0
 c00618c:	d002      	beq.n	c006194 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 c00618e:	2301      	movs	r3, #1
 c006190:	f000 bc88 	b.w	c006aa4 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c006194:	4b75      	ldr	r3, [pc, #468]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c006196:	681b      	ldr	r3, [r3, #0]
 c006198:	4a74      	ldr	r2, [pc, #464]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c00619a:	f043 0308 	orr.w	r3, r3, #8
 c00619e:	6013      	str	r3, [r2, #0]
 c0061a0:	4b72      	ldr	r3, [pc, #456]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c0061a2:	681b      	ldr	r3, [r3, #0]
 c0061a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c0061a8:	687b      	ldr	r3, [r7, #4]
 c0061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0061ac:	496f      	ldr	r1, [pc, #444]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c0061ae:	4313      	orrs	r3, r2
 c0061b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c0061b2:	4b6e      	ldr	r3, [pc, #440]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c0061b4:	685b      	ldr	r3, [r3, #4]
 c0061b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c0061ba:	687b      	ldr	r3, [r7, #4]
 c0061bc:	6a1b      	ldr	r3, [r3, #32]
 c0061be:	021b      	lsls	r3, r3, #8
 c0061c0:	496a      	ldr	r1, [pc, #424]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c0061c2:	4313      	orrs	r3, r2
 c0061c4:	604b      	str	r3, [r1, #4]
 c0061c6:	e026      	b.n	c006216 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c0061c8:	4b68      	ldr	r3, [pc, #416]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c0061ca:	681b      	ldr	r3, [r3, #0]
 c0061cc:	4a67      	ldr	r2, [pc, #412]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c0061ce:	f043 0308 	orr.w	r3, r3, #8
 c0061d2:	6013      	str	r3, [r2, #0]
 c0061d4:	4b65      	ldr	r3, [pc, #404]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c0061d6:	681b      	ldr	r3, [r3, #0]
 c0061d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c0061dc:	687b      	ldr	r3, [r7, #4]
 c0061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0061e0:	4962      	ldr	r1, [pc, #392]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c0061e2:	4313      	orrs	r3, r2
 c0061e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c0061e6:	4b61      	ldr	r3, [pc, #388]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c0061e8:	685b      	ldr	r3, [r3, #4]
 c0061ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c0061ee:	687b      	ldr	r3, [r7, #4]
 c0061f0:	6a1b      	ldr	r3, [r3, #32]
 c0061f2:	021b      	lsls	r3, r3, #8
 c0061f4:	495d      	ldr	r1, [pc, #372]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c0061f6:	4313      	orrs	r3, r2
 c0061f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0061fa:	69bb      	ldr	r3, [r7, #24]
 c0061fc:	2b00      	cmp	r3, #0
 c0061fe:	d10a      	bne.n	c006216 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c006200:	687b      	ldr	r3, [r7, #4]
 c006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c006204:	4618      	mov	r0, r3
 c006206:	f000 fe55 	bl	c006eb4 <RCC_SetFlashLatencyFromMSIRange>
 c00620a:	4603      	mov	r3, r0
 c00620c:	2b00      	cmp	r3, #0
 c00620e:	d002      	beq.n	c006216 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 c006210:	2301      	movs	r3, #1
 c006212:	f000 bc47 	b.w	c006aa4 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c006216:	f000 fe11 	bl	c006e3c <HAL_RCC_GetHCLKFreq>
 c00621a:	4603      	mov	r3, r0
 c00621c:	4a54      	ldr	r2, [pc, #336]	; (c006370 <HAL_RCC_OscConfig+0x280>)
 c00621e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c006220:	4b54      	ldr	r3, [pc, #336]	; (c006374 <HAL_RCC_OscConfig+0x284>)
 c006222:	681b      	ldr	r3, [r3, #0]
 c006224:	4618      	mov	r0, r3
 c006226:	f7fe faff 	bl	c004828 <HAL_InitTick>
 c00622a:	4603      	mov	r3, r0
 c00622c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 c00622e:	7bfb      	ldrb	r3, [r7, #15]
 c006230:	2b00      	cmp	r3, #0
 c006232:	d060      	beq.n	c0062f6 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 c006234:	7bfb      	ldrb	r3, [r7, #15]
 c006236:	f000 bc35 	b.w	c006aa4 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c00623a:	687b      	ldr	r3, [r7, #4]
 c00623c:	69db      	ldr	r3, [r3, #28]
 c00623e:	2b00      	cmp	r3, #0
 c006240:	d039      	beq.n	c0062b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 c006242:	4b4a      	ldr	r3, [pc, #296]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c006244:	681b      	ldr	r3, [r3, #0]
 c006246:	4a49      	ldr	r2, [pc, #292]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c006248:	f043 0301 	orr.w	r3, r3, #1
 c00624c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c00624e:	f7fe fb3b 	bl	c0048c8 <HAL_GetTick>
 c006252:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c006254:	e00f      	b.n	c006276 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c006256:	f7fe fb37 	bl	c0048c8 <HAL_GetTick>
 c00625a:	4602      	mov	r2, r0
 c00625c:	693b      	ldr	r3, [r7, #16]
 c00625e:	1ad3      	subs	r3, r2, r3
 c006260:	2b02      	cmp	r3, #2
 c006262:	d908      	bls.n	c006276 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c006264:	4b41      	ldr	r3, [pc, #260]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c006266:	681b      	ldr	r3, [r3, #0]
 c006268:	f003 0302 	and.w	r3, r3, #2
 c00626c:	2b00      	cmp	r3, #0
 c00626e:	d102      	bne.n	c006276 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 c006270:	2303      	movs	r3, #3
 c006272:	f000 bc17 	b.w	c006aa4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c006276:	4b3d      	ldr	r3, [pc, #244]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c006278:	681b      	ldr	r3, [r3, #0]
 c00627a:	f003 0302 	and.w	r3, r3, #2
 c00627e:	2b00      	cmp	r3, #0
 c006280:	d0e9      	beq.n	c006256 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c006282:	4b3a      	ldr	r3, [pc, #232]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c006284:	681b      	ldr	r3, [r3, #0]
 c006286:	4a39      	ldr	r2, [pc, #228]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c006288:	f043 0308 	orr.w	r3, r3, #8
 c00628c:	6013      	str	r3, [r2, #0]
 c00628e:	4b37      	ldr	r3, [pc, #220]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c006290:	681b      	ldr	r3, [r3, #0]
 c006292:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c006296:	687b      	ldr	r3, [r7, #4]
 c006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00629a:	4934      	ldr	r1, [pc, #208]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c00629c:	4313      	orrs	r3, r2
 c00629e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c0062a0:	4b32      	ldr	r3, [pc, #200]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c0062a2:	685b      	ldr	r3, [r3, #4]
 c0062a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c0062a8:	687b      	ldr	r3, [r7, #4]
 c0062aa:	6a1b      	ldr	r3, [r3, #32]
 c0062ac:	021b      	lsls	r3, r3, #8
 c0062ae:	492f      	ldr	r1, [pc, #188]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c0062b0:	4313      	orrs	r3, r2
 c0062b2:	604b      	str	r3, [r1, #4]
 c0062b4:	e020      	b.n	c0062f8 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 c0062b6:	4b2d      	ldr	r3, [pc, #180]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c0062b8:	681b      	ldr	r3, [r3, #0]
 c0062ba:	4a2c      	ldr	r2, [pc, #176]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c0062bc:	f023 0301 	bic.w	r3, r3, #1
 c0062c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c0062c2:	f7fe fb01 	bl	c0048c8 <HAL_GetTick>
 c0062c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c0062c8:	e00e      	b.n	c0062e8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c0062ca:	f7fe fafd 	bl	c0048c8 <HAL_GetTick>
 c0062ce:	4602      	mov	r2, r0
 c0062d0:	693b      	ldr	r3, [r7, #16]
 c0062d2:	1ad3      	subs	r3, r2, r3
 c0062d4:	2b02      	cmp	r3, #2
 c0062d6:	d907      	bls.n	c0062e8 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c0062d8:	4b24      	ldr	r3, [pc, #144]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c0062da:	681b      	ldr	r3, [r3, #0]
 c0062dc:	f003 0302 	and.w	r3, r3, #2
 c0062e0:	2b00      	cmp	r3, #0
 c0062e2:	d001      	beq.n	c0062e8 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 c0062e4:	2303      	movs	r3, #3
 c0062e6:	e3dd      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c0062e8:	4b20      	ldr	r3, [pc, #128]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c0062ea:	681b      	ldr	r3, [r3, #0]
 c0062ec:	f003 0302 	and.w	r3, r3, #2
 c0062f0:	2b00      	cmp	r3, #0
 c0062f2:	d1ea      	bne.n	c0062ca <HAL_RCC_OscConfig+0x1da>
 c0062f4:	e000      	b.n	c0062f8 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c0062f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c0062f8:	687b      	ldr	r3, [r7, #4]
 c0062fa:	681b      	ldr	r3, [r3, #0]
 c0062fc:	f003 0301 	and.w	r3, r3, #1
 c006300:	2b00      	cmp	r3, #0
 c006302:	d07e      	beq.n	c006402 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c006304:	69bb      	ldr	r3, [r7, #24]
 c006306:	2b08      	cmp	r3, #8
 c006308:	d005      	beq.n	c006316 <HAL_RCC_OscConfig+0x226>
 c00630a:	69bb      	ldr	r3, [r7, #24]
 c00630c:	2b0c      	cmp	r3, #12
 c00630e:	d10e      	bne.n	c00632e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c006310:	697b      	ldr	r3, [r7, #20]
 c006312:	2b03      	cmp	r3, #3
 c006314:	d10b      	bne.n	c00632e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c006316:	4b15      	ldr	r3, [pc, #84]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c006318:	681b      	ldr	r3, [r3, #0]
 c00631a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00631e:	2b00      	cmp	r3, #0
 c006320:	d06e      	beq.n	c006400 <HAL_RCC_OscConfig+0x310>
 c006322:	687b      	ldr	r3, [r7, #4]
 c006324:	685b      	ldr	r3, [r3, #4]
 c006326:	2b00      	cmp	r3, #0
 c006328:	d16a      	bne.n	c006400 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 c00632a:	2301      	movs	r3, #1
 c00632c:	e3ba      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c00632e:	687b      	ldr	r3, [r7, #4]
 c006330:	685b      	ldr	r3, [r3, #4]
 c006332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c006336:	d106      	bne.n	c006346 <HAL_RCC_OscConfig+0x256>
 c006338:	4b0c      	ldr	r3, [pc, #48]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c00633a:	681b      	ldr	r3, [r3, #0]
 c00633c:	4a0b      	ldr	r2, [pc, #44]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c00633e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c006342:	6013      	str	r3, [r2, #0]
 c006344:	e024      	b.n	c006390 <HAL_RCC_OscConfig+0x2a0>
 c006346:	687b      	ldr	r3, [r7, #4]
 c006348:	685b      	ldr	r3, [r3, #4]
 c00634a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c00634e:	d113      	bne.n	c006378 <HAL_RCC_OscConfig+0x288>
 c006350:	4b06      	ldr	r3, [pc, #24]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c006352:	681b      	ldr	r3, [r3, #0]
 c006354:	4a05      	ldr	r2, [pc, #20]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c006356:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c00635a:	6013      	str	r3, [r2, #0]
 c00635c:	4b03      	ldr	r3, [pc, #12]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c00635e:	681b      	ldr	r3, [r3, #0]
 c006360:	4a02      	ldr	r2, [pc, #8]	; (c00636c <HAL_RCC_OscConfig+0x27c>)
 c006362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c006366:	6013      	str	r3, [r2, #0]
 c006368:	e012      	b.n	c006390 <HAL_RCC_OscConfig+0x2a0>
 c00636a:	bf00      	nop
 c00636c:	50021000 	.word	0x50021000
 c006370:	30000068 	.word	0x30000068
 c006374:	3000006c 	.word	0x3000006c
 c006378:	4b8b      	ldr	r3, [pc, #556]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c00637a:	681b      	ldr	r3, [r3, #0]
 c00637c:	4a8a      	ldr	r2, [pc, #552]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c00637e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c006382:	6013      	str	r3, [r2, #0]
 c006384:	4b88      	ldr	r3, [pc, #544]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c006386:	681b      	ldr	r3, [r3, #0]
 c006388:	4a87      	ldr	r2, [pc, #540]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c00638a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c00638e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c006390:	687b      	ldr	r3, [r7, #4]
 c006392:	685b      	ldr	r3, [r3, #4]
 c006394:	2b00      	cmp	r3, #0
 c006396:	d019      	beq.n	c0063cc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c006398:	f7fe fa96 	bl	c0048c8 <HAL_GetTick>
 c00639c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00639e:	e00e      	b.n	c0063be <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c0063a0:	f7fe fa92 	bl	c0048c8 <HAL_GetTick>
 c0063a4:	4602      	mov	r2, r0
 c0063a6:	693b      	ldr	r3, [r7, #16]
 c0063a8:	1ad3      	subs	r3, r2, r3
 c0063aa:	2b64      	cmp	r3, #100	; 0x64
 c0063ac:	d907      	bls.n	c0063be <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0063ae:	4b7e      	ldr	r3, [pc, #504]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c0063b0:	681b      	ldr	r3, [r3, #0]
 c0063b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0063b6:	2b00      	cmp	r3, #0
 c0063b8:	d101      	bne.n	c0063be <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 c0063ba:	2303      	movs	r3, #3
 c0063bc:	e372      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0063be:	4b7a      	ldr	r3, [pc, #488]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c0063c0:	681b      	ldr	r3, [r3, #0]
 c0063c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0063c6:	2b00      	cmp	r3, #0
 c0063c8:	d0ea      	beq.n	c0063a0 <HAL_RCC_OscConfig+0x2b0>
 c0063ca:	e01a      	b.n	c006402 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0063cc:	f7fe fa7c 	bl	c0048c8 <HAL_GetTick>
 c0063d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0063d2:	e00e      	b.n	c0063f2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c0063d4:	f7fe fa78 	bl	c0048c8 <HAL_GetTick>
 c0063d8:	4602      	mov	r2, r0
 c0063da:	693b      	ldr	r3, [r7, #16]
 c0063dc:	1ad3      	subs	r3, r2, r3
 c0063de:	2b64      	cmp	r3, #100	; 0x64
 c0063e0:	d907      	bls.n	c0063f2 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0063e2:	4b71      	ldr	r3, [pc, #452]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c0063e4:	681b      	ldr	r3, [r3, #0]
 c0063e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0063ea:	2b00      	cmp	r3, #0
 c0063ec:	d001      	beq.n	c0063f2 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 c0063ee:	2303      	movs	r3, #3
 c0063f0:	e358      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0063f2:	4b6d      	ldr	r3, [pc, #436]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c0063f4:	681b      	ldr	r3, [r3, #0]
 c0063f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0063fa:	2b00      	cmp	r3, #0
 c0063fc:	d1ea      	bne.n	c0063d4 <HAL_RCC_OscConfig+0x2e4>
 c0063fe:	e000      	b.n	c006402 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c006400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c006402:	687b      	ldr	r3, [r7, #4]
 c006404:	681b      	ldr	r3, [r3, #0]
 c006406:	f003 0302 	and.w	r3, r3, #2
 c00640a:	2b00      	cmp	r3, #0
 c00640c:	d06c      	beq.n	c0064e8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c00640e:	69bb      	ldr	r3, [r7, #24]
 c006410:	2b04      	cmp	r3, #4
 c006412:	d005      	beq.n	c006420 <HAL_RCC_OscConfig+0x330>
 c006414:	69bb      	ldr	r3, [r7, #24]
 c006416:	2b0c      	cmp	r3, #12
 c006418:	d119      	bne.n	c00644e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c00641a:	697b      	ldr	r3, [r7, #20]
 c00641c:	2b02      	cmp	r3, #2
 c00641e:	d116      	bne.n	c00644e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c006420:	4b61      	ldr	r3, [pc, #388]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c006422:	681b      	ldr	r3, [r3, #0]
 c006424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c006428:	2b00      	cmp	r3, #0
 c00642a:	d005      	beq.n	c006438 <HAL_RCC_OscConfig+0x348>
 c00642c:	687b      	ldr	r3, [r7, #4]
 c00642e:	68db      	ldr	r3, [r3, #12]
 c006430:	2b00      	cmp	r3, #0
 c006432:	d101      	bne.n	c006438 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 c006434:	2301      	movs	r3, #1
 c006436:	e335      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c006438:	4b5b      	ldr	r3, [pc, #364]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c00643a:	685b      	ldr	r3, [r3, #4]
 c00643c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c006440:	687b      	ldr	r3, [r7, #4]
 c006442:	691b      	ldr	r3, [r3, #16]
 c006444:	061b      	lsls	r3, r3, #24
 c006446:	4958      	ldr	r1, [pc, #352]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c006448:	4313      	orrs	r3, r2
 c00644a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c00644c:	e04c      	b.n	c0064e8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c00644e:	687b      	ldr	r3, [r7, #4]
 c006450:	68db      	ldr	r3, [r3, #12]
 c006452:	2b00      	cmp	r3, #0
 c006454:	d029      	beq.n	c0064aa <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 c006456:	4b54      	ldr	r3, [pc, #336]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c006458:	681b      	ldr	r3, [r3, #0]
 c00645a:	4a53      	ldr	r2, [pc, #332]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c00645c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c006460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c006462:	f7fe fa31 	bl	c0048c8 <HAL_GetTick>
 c006466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c006468:	e00e      	b.n	c006488 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c00646a:	f7fe fa2d 	bl	c0048c8 <HAL_GetTick>
 c00646e:	4602      	mov	r2, r0
 c006470:	693b      	ldr	r3, [r7, #16]
 c006472:	1ad3      	subs	r3, r2, r3
 c006474:	2b02      	cmp	r3, #2
 c006476:	d907      	bls.n	c006488 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c006478:	4b4b      	ldr	r3, [pc, #300]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c00647a:	681b      	ldr	r3, [r3, #0]
 c00647c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c006480:	2b00      	cmp	r3, #0
 c006482:	d101      	bne.n	c006488 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 c006484:	2303      	movs	r3, #3
 c006486:	e30d      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c006488:	4b47      	ldr	r3, [pc, #284]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c00648a:	681b      	ldr	r3, [r3, #0]
 c00648c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c006490:	2b00      	cmp	r3, #0
 c006492:	d0ea      	beq.n	c00646a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c006494:	4b44      	ldr	r3, [pc, #272]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c006496:	685b      	ldr	r3, [r3, #4]
 c006498:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c00649c:	687b      	ldr	r3, [r7, #4]
 c00649e:	691b      	ldr	r3, [r3, #16]
 c0064a0:	061b      	lsls	r3, r3, #24
 c0064a2:	4941      	ldr	r1, [pc, #260]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c0064a4:	4313      	orrs	r3, r2
 c0064a6:	604b      	str	r3, [r1, #4]
 c0064a8:	e01e      	b.n	c0064e8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c0064aa:	4b3f      	ldr	r3, [pc, #252]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c0064ac:	681b      	ldr	r3, [r3, #0]
 c0064ae:	4a3e      	ldr	r2, [pc, #248]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c0064b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c0064b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0064b6:	f7fe fa07 	bl	c0048c8 <HAL_GetTick>
 c0064ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c0064bc:	e00e      	b.n	c0064dc <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c0064be:	f7fe fa03 	bl	c0048c8 <HAL_GetTick>
 c0064c2:	4602      	mov	r2, r0
 c0064c4:	693b      	ldr	r3, [r7, #16]
 c0064c6:	1ad3      	subs	r3, r2, r3
 c0064c8:	2b02      	cmp	r3, #2
 c0064ca:	d907      	bls.n	c0064dc <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c0064cc:	4b36      	ldr	r3, [pc, #216]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c0064ce:	681b      	ldr	r3, [r3, #0]
 c0064d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0064d4:	2b00      	cmp	r3, #0
 c0064d6:	d001      	beq.n	c0064dc <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 c0064d8:	2303      	movs	r3, #3
 c0064da:	e2e3      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c0064dc:	4b32      	ldr	r3, [pc, #200]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c0064de:	681b      	ldr	r3, [r3, #0]
 c0064e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0064e4:	2b00      	cmp	r3, #0
 c0064e6:	d1ea      	bne.n	c0064be <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c0064e8:	687b      	ldr	r3, [r7, #4]
 c0064ea:	681b      	ldr	r3, [r3, #0]
 c0064ec:	f003 0308 	and.w	r3, r3, #8
 c0064f0:	2b00      	cmp	r3, #0
 c0064f2:	d062      	beq.n	c0065ba <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c0064f4:	687b      	ldr	r3, [r7, #4]
 c0064f6:	695b      	ldr	r3, [r3, #20]
 c0064f8:	2b00      	cmp	r3, #0
 c0064fa:	d038      	beq.n	c00656e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c0064fc:	687b      	ldr	r3, [r7, #4]
 c0064fe:	699b      	ldr	r3, [r3, #24]
 c006500:	2b00      	cmp	r3, #0
 c006502:	d108      	bne.n	c006516 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c006504:	4b28      	ldr	r3, [pc, #160]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c006506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00650a:	4a27      	ldr	r2, [pc, #156]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c00650c:	f023 0310 	bic.w	r3, r3, #16
 c006510:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 c006514:	e007      	b.n	c006526 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c006516:	4b24      	ldr	r3, [pc, #144]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c006518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00651c:	4a22      	ldr	r2, [pc, #136]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c00651e:	f043 0310 	orr.w	r3, r3, #16
 c006522:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c006526:	4b20      	ldr	r3, [pc, #128]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c006528:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00652c:	4a1e      	ldr	r2, [pc, #120]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c00652e:	f043 0301 	orr.w	r3, r3, #1
 c006532:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006536:	f7fe f9c7 	bl	c0048c8 <HAL_GetTick>
 c00653a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c00653c:	e00f      	b.n	c00655e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c00653e:	f7fe f9c3 	bl	c0048c8 <HAL_GetTick>
 c006542:	4602      	mov	r2, r0
 c006544:	693b      	ldr	r3, [r7, #16]
 c006546:	1ad3      	subs	r3, r2, r3
 c006548:	2b07      	cmp	r3, #7
 c00654a:	d908      	bls.n	c00655e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c00654c:	4b16      	ldr	r3, [pc, #88]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c00654e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c006552:	f003 0302 	and.w	r3, r3, #2
 c006556:	2b00      	cmp	r3, #0
 c006558:	d101      	bne.n	c00655e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 c00655a:	2303      	movs	r3, #3
 c00655c:	e2a2      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c00655e:	4b12      	ldr	r3, [pc, #72]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c006560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c006564:	f003 0302 	and.w	r3, r3, #2
 c006568:	2b00      	cmp	r3, #0
 c00656a:	d0e8      	beq.n	c00653e <HAL_RCC_OscConfig+0x44e>
 c00656c:	e025      	b.n	c0065ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c00656e:	4b0e      	ldr	r3, [pc, #56]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c006570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c006574:	4a0c      	ldr	r2, [pc, #48]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c006576:	f023 0301 	bic.w	r3, r3, #1
 c00657a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00657e:	f7fe f9a3 	bl	c0048c8 <HAL_GetTick>
 c006582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c006584:	e012      	b.n	c0065ac <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c006586:	f7fe f99f 	bl	c0048c8 <HAL_GetTick>
 c00658a:	4602      	mov	r2, r0
 c00658c:	693b      	ldr	r3, [r7, #16]
 c00658e:	1ad3      	subs	r3, r2, r3
 c006590:	2b07      	cmp	r3, #7
 c006592:	d90b      	bls.n	c0065ac <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c006594:	4b04      	ldr	r3, [pc, #16]	; (c0065a8 <HAL_RCC_OscConfig+0x4b8>)
 c006596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00659a:	f003 0302 	and.w	r3, r3, #2
 c00659e:	2b00      	cmp	r3, #0
 c0065a0:	d004      	beq.n	c0065ac <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 c0065a2:	2303      	movs	r3, #3
 c0065a4:	e27e      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
 c0065a6:	bf00      	nop
 c0065a8:	50021000 	.word	0x50021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0065ac:	4ba8      	ldr	r3, [pc, #672]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c0065ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0065b2:	f003 0302 	and.w	r3, r3, #2
 c0065b6:	2b00      	cmp	r3, #0
 c0065b8:	d1e5      	bne.n	c006586 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c0065ba:	687b      	ldr	r3, [r7, #4]
 c0065bc:	681b      	ldr	r3, [r3, #0]
 c0065be:	f003 0304 	and.w	r3, r3, #4
 c0065c2:	2b00      	cmp	r3, #0
 c0065c4:	f000 812d 	beq.w	c006822 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 c0065c8:	2300      	movs	r3, #0
 c0065ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c0065cc:	4ba0      	ldr	r3, [pc, #640]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c0065ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0065d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0065d4:	2b00      	cmp	r3, #0
 c0065d6:	d10d      	bne.n	c0065f4 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c0065d8:	4b9d      	ldr	r3, [pc, #628]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c0065da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0065dc:	4a9c      	ldr	r2, [pc, #624]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c0065de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0065e2:	6593      	str	r3, [r2, #88]	; 0x58
 c0065e4:	4b9a      	ldr	r3, [pc, #616]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c0065e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0065e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0065ec:	60bb      	str	r3, [r7, #8]
 c0065ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 c0065f0:	2301      	movs	r3, #1
 c0065f2:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c0065f4:	4b97      	ldr	r3, [pc, #604]	; (c006854 <HAL_RCC_OscConfig+0x764>)
 c0065f6:	681b      	ldr	r3, [r3, #0]
 c0065f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0065fc:	2b00      	cmp	r3, #0
 c0065fe:	d11e      	bne.n	c00663e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c006600:	4b94      	ldr	r3, [pc, #592]	; (c006854 <HAL_RCC_OscConfig+0x764>)
 c006602:	681b      	ldr	r3, [r3, #0]
 c006604:	4a93      	ldr	r2, [pc, #588]	; (c006854 <HAL_RCC_OscConfig+0x764>)
 c006606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c00660a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c00660c:	f7fe f95c 	bl	c0048c8 <HAL_GetTick>
 c006610:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c006612:	e00e      	b.n	c006632 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c006614:	f7fe f958 	bl	c0048c8 <HAL_GetTick>
 c006618:	4602      	mov	r2, r0
 c00661a:	693b      	ldr	r3, [r7, #16]
 c00661c:	1ad3      	subs	r3, r2, r3
 c00661e:	2b02      	cmp	r3, #2
 c006620:	d907      	bls.n	c006632 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c006622:	4b8c      	ldr	r3, [pc, #560]	; (c006854 <HAL_RCC_OscConfig+0x764>)
 c006624:	681b      	ldr	r3, [r3, #0]
 c006626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00662a:	2b00      	cmp	r3, #0
 c00662c:	d101      	bne.n	c006632 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 c00662e:	2303      	movs	r3, #3
 c006630:	e238      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c006632:	4b88      	ldr	r3, [pc, #544]	; (c006854 <HAL_RCC_OscConfig+0x764>)
 c006634:	681b      	ldr	r3, [r3, #0]
 c006636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00663a:	2b00      	cmp	r3, #0
 c00663c:	d0ea      	beq.n	c006614 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c00663e:	687b      	ldr	r3, [r7, #4]
 c006640:	689b      	ldr	r3, [r3, #8]
 c006642:	f003 0301 	and.w	r3, r3, #1
 c006646:	2b00      	cmp	r3, #0
 c006648:	d01f      	beq.n	c00668a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c00664a:	687b      	ldr	r3, [r7, #4]
 c00664c:	689b      	ldr	r3, [r3, #8]
 c00664e:	f003 0304 	and.w	r3, r3, #4
 c006652:	2b00      	cmp	r3, #0
 c006654:	d010      	beq.n	c006678 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c006656:	4b7e      	ldr	r3, [pc, #504]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c006658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00665c:	4a7c      	ldr	r2, [pc, #496]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c00665e:	f043 0304 	orr.w	r3, r3, #4
 c006662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c006666:	4b7a      	ldr	r3, [pc, #488]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c006668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00666c:	4a78      	ldr	r2, [pc, #480]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c00666e:	f043 0301 	orr.w	r3, r3, #1
 c006672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c006676:	e018      	b.n	c0066aa <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c006678:	4b75      	ldr	r3, [pc, #468]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c00667a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00667e:	4a74      	ldr	r2, [pc, #464]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c006680:	f043 0301 	orr.w	r3, r3, #1
 c006684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c006688:	e00f      	b.n	c0066aa <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c00668a:	4b71      	ldr	r3, [pc, #452]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c00668c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006690:	4a6f      	ldr	r2, [pc, #444]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c006692:	f023 0301 	bic.w	r3, r3, #1
 c006696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c00669a:	4b6d      	ldr	r3, [pc, #436]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c00669c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0066a0:	4a6b      	ldr	r2, [pc, #428]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c0066a2:	f023 0304 	bic.w	r3, r3, #4
 c0066a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c0066aa:	687b      	ldr	r3, [r7, #4]
 c0066ac:	689b      	ldr	r3, [r3, #8]
 c0066ae:	2b00      	cmp	r3, #0
 c0066b0:	d068      	beq.n	c006784 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0066b2:	f7fe f909 	bl	c0048c8 <HAL_GetTick>
 c0066b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0066b8:	e011      	b.n	c0066de <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0066ba:	f7fe f905 	bl	c0048c8 <HAL_GetTick>
 c0066be:	4602      	mov	r2, r0
 c0066c0:	693b      	ldr	r3, [r7, #16]
 c0066c2:	1ad3      	subs	r3, r2, r3
 c0066c4:	f241 3288 	movw	r2, #5000	; 0x1388
 c0066c8:	4293      	cmp	r3, r2
 c0066ca:	d908      	bls.n	c0066de <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0066cc:	4b60      	ldr	r3, [pc, #384]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c0066ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0066d2:	f003 0302 	and.w	r3, r3, #2
 c0066d6:	2b00      	cmp	r3, #0
 c0066d8:	d101      	bne.n	c0066de <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 c0066da:	2303      	movs	r3, #3
 c0066dc:	e1e2      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0066de:	4b5c      	ldr	r3, [pc, #368]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c0066e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0066e4:	f003 0302 	and.w	r3, r3, #2
 c0066e8:	2b00      	cmp	r3, #0
 c0066ea:	d0e6      	beq.n	c0066ba <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c0066ec:	687b      	ldr	r3, [r7, #4]
 c0066ee:	689b      	ldr	r3, [r3, #8]
 c0066f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0066f4:	2b00      	cmp	r3, #0
 c0066f6:	d022      	beq.n	c00673e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0066f8:	4b55      	ldr	r3, [pc, #340]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c0066fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0066fe:	4a54      	ldr	r2, [pc, #336]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c006700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c006704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c006708:	e011      	b.n	c00672e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00670a:	f7fe f8dd 	bl	c0048c8 <HAL_GetTick>
 c00670e:	4602      	mov	r2, r0
 c006710:	693b      	ldr	r3, [r7, #16]
 c006712:	1ad3      	subs	r3, r2, r3
 c006714:	f241 3288 	movw	r2, #5000	; 0x1388
 c006718:	4293      	cmp	r3, r2
 c00671a:	d908      	bls.n	c00672e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c00671c:	4b4c      	ldr	r3, [pc, #304]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c00671e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c006726:	2b00      	cmp	r3, #0
 c006728:	d101      	bne.n	c00672e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 c00672a:	2303      	movs	r3, #3
 c00672c:	e1ba      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c00672e:	4b48      	ldr	r3, [pc, #288]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c006730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c006738:	2b00      	cmp	r3, #0
 c00673a:	d0e6      	beq.n	c00670a <HAL_RCC_OscConfig+0x61a>
 c00673c:	e068      	b.n	c006810 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c00673e:	4b44      	ldr	r3, [pc, #272]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c006740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006744:	4a42      	ldr	r2, [pc, #264]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c006746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c00674a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c00674e:	e011      	b.n	c006774 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c006750:	f7fe f8ba 	bl	c0048c8 <HAL_GetTick>
 c006754:	4602      	mov	r2, r0
 c006756:	693b      	ldr	r3, [r7, #16]
 c006758:	1ad3      	subs	r3, r2, r3
 c00675a:	f241 3288 	movw	r2, #5000	; 0x1388
 c00675e:	4293      	cmp	r3, r2
 c006760:	d908      	bls.n	c006774 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006762:	4b3b      	ldr	r3, [pc, #236]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c006764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00676c:	2b00      	cmp	r3, #0
 c00676e:	d001      	beq.n	c006774 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 c006770:	2303      	movs	r3, #3
 c006772:	e197      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006774:	4b36      	ldr	r3, [pc, #216]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c006776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00677a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00677e:	2b00      	cmp	r3, #0
 c006780:	d1e6      	bne.n	c006750 <HAL_RCC_OscConfig+0x660>
 c006782:	e045      	b.n	c006810 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006784:	f7fe f8a0 	bl	c0048c8 <HAL_GetTick>
 c006788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c00678a:	e011      	b.n	c0067b0 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00678c:	f7fe f89c 	bl	c0048c8 <HAL_GetTick>
 c006790:	4602      	mov	r2, r0
 c006792:	693b      	ldr	r3, [r7, #16]
 c006794:	1ad3      	subs	r3, r2, r3
 c006796:	f241 3288 	movw	r2, #5000	; 0x1388
 c00679a:	4293      	cmp	r3, r2
 c00679c:	d908      	bls.n	c0067b0 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c00679e:	4b2c      	ldr	r3, [pc, #176]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c0067a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0067a4:	f003 0302 	and.w	r3, r3, #2
 c0067a8:	2b00      	cmp	r3, #0
 c0067aa:	d001      	beq.n	c0067b0 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 c0067ac:	2303      	movs	r3, #3
 c0067ae:	e179      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c0067b0:	4b27      	ldr	r3, [pc, #156]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c0067b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0067b6:	f003 0302 	and.w	r3, r3, #2
 c0067ba:	2b00      	cmp	r3, #0
 c0067bc:	d1e6      	bne.n	c00678c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c0067be:	4b24      	ldr	r3, [pc, #144]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c0067c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0067c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0067c8:	2b00      	cmp	r3, #0
 c0067ca:	d021      	beq.n	c006810 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0067cc:	4b20      	ldr	r3, [pc, #128]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c0067ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0067d2:	4a1f      	ldr	r2, [pc, #124]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c0067d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c0067d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0067dc:	e011      	b.n	c006802 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0067de:	f7fe f873 	bl	c0048c8 <HAL_GetTick>
 c0067e2:	4602      	mov	r2, r0
 c0067e4:	693b      	ldr	r3, [r7, #16]
 c0067e6:	1ad3      	subs	r3, r2, r3
 c0067e8:	f241 3288 	movw	r2, #5000	; 0x1388
 c0067ec:	4293      	cmp	r3, r2
 c0067ee:	d908      	bls.n	c006802 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0067f0:	4b17      	ldr	r3, [pc, #92]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c0067f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0067f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c0067fa:	2b00      	cmp	r3, #0
 c0067fc:	d001      	beq.n	c006802 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 c0067fe:	2303      	movs	r3, #3
 c006800:	e150      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006802:	4b13      	ldr	r3, [pc, #76]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c006804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00680c:	2b00      	cmp	r3, #0
 c00680e:	d1e6      	bne.n	c0067de <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c006810:	7ffb      	ldrb	r3, [r7, #31]
 c006812:	2b01      	cmp	r3, #1
 c006814:	d105      	bne.n	c006822 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c006816:	4b0e      	ldr	r3, [pc, #56]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c006818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00681a:	4a0d      	ldr	r2, [pc, #52]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c00681c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c006820:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c006822:	687b      	ldr	r3, [r7, #4]
 c006824:	681b      	ldr	r3, [r3, #0]
 c006826:	f003 0320 	and.w	r3, r3, #32
 c00682a:	2b00      	cmp	r3, #0
 c00682c:	d04f      	beq.n	c0068ce <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c00682e:	687b      	ldr	r3, [r7, #4]
 c006830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006832:	2b00      	cmp	r3, #0
 c006834:	d028      	beq.n	c006888 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c006836:	4b06      	ldr	r3, [pc, #24]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c006838:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c00683c:	4a04      	ldr	r2, [pc, #16]	; (c006850 <HAL_RCC_OscConfig+0x760>)
 c00683e:	f043 0301 	orr.w	r3, r3, #1
 c006842:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006846:	f7fe f83f 	bl	c0048c8 <HAL_GetTick>
 c00684a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c00684c:	e014      	b.n	c006878 <HAL_RCC_OscConfig+0x788>
 c00684e:	bf00      	nop
 c006850:	50021000 	.word	0x50021000
 c006854:	50007000 	.word	0x50007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c006858:	f7fe f836 	bl	c0048c8 <HAL_GetTick>
 c00685c:	4602      	mov	r2, r0
 c00685e:	693b      	ldr	r3, [r7, #16]
 c006860:	1ad3      	subs	r3, r2, r3
 c006862:	2b02      	cmp	r3, #2
 c006864:	d908      	bls.n	c006878 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c006866:	4b91      	ldr	r3, [pc, #580]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c006868:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c00686c:	f003 0302 	and.w	r3, r3, #2
 c006870:	2b00      	cmp	r3, #0
 c006872:	d101      	bne.n	c006878 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 c006874:	2303      	movs	r3, #3
 c006876:	e115      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c006878:	4b8c      	ldr	r3, [pc, #560]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c00687a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c00687e:	f003 0302 	and.w	r3, r3, #2
 c006882:	2b00      	cmp	r3, #0
 c006884:	d0e8      	beq.n	c006858 <HAL_RCC_OscConfig+0x768>
 c006886:	e022      	b.n	c0068ce <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c006888:	4b88      	ldr	r3, [pc, #544]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c00688a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c00688e:	4a87      	ldr	r2, [pc, #540]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c006890:	f023 0301 	bic.w	r3, r3, #1
 c006894:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006898:	f7fe f816 	bl	c0048c8 <HAL_GetTick>
 c00689c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c00689e:	e00f      	b.n	c0068c0 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c0068a0:	f7fe f812 	bl	c0048c8 <HAL_GetTick>
 c0068a4:	4602      	mov	r2, r0
 c0068a6:	693b      	ldr	r3, [r7, #16]
 c0068a8:	1ad3      	subs	r3, r2, r3
 c0068aa:	2b02      	cmp	r3, #2
 c0068ac:	d908      	bls.n	c0068c0 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c0068ae:	4b7f      	ldr	r3, [pc, #508]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c0068b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0068b4:	f003 0302 	and.w	r3, r3, #2
 c0068b8:	2b00      	cmp	r3, #0
 c0068ba:	d001      	beq.n	c0068c0 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 c0068bc:	2303      	movs	r3, #3
 c0068be:	e0f1      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c0068c0:	4b7a      	ldr	r3, [pc, #488]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c0068c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0068c6:	f003 0302 	and.w	r3, r3, #2
 c0068ca:	2b00      	cmp	r3, #0
 c0068cc:	d1e8      	bne.n	c0068a0 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c0068ce:	687b      	ldr	r3, [r7, #4]
 c0068d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0068d2:	2b00      	cmp	r3, #0
 c0068d4:	f000 80e5 	beq.w	c006aa2 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c0068d8:	4b74      	ldr	r3, [pc, #464]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c0068da:	689b      	ldr	r3, [r3, #8]
 c0068dc:	f003 030c 	and.w	r3, r3, #12
 c0068e0:	2b0c      	cmp	r3, #12
 c0068e2:	f000 809f 	beq.w	c006a24 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c0068e6:	687b      	ldr	r3, [r7, #4]
 c0068e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0068ea:	2b02      	cmp	r3, #2
 c0068ec:	d166      	bne.n	c0069bc <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c0068ee:	4b6f      	ldr	r3, [pc, #444]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c0068f0:	681b      	ldr	r3, [r3, #0]
 c0068f2:	4a6e      	ldr	r2, [pc, #440]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c0068f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c0068f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0068fa:	f7fd ffe5 	bl	c0048c8 <HAL_GetTick>
 c0068fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006900:	e00e      	b.n	c006920 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c006902:	f7fd ffe1 	bl	c0048c8 <HAL_GetTick>
 c006906:	4602      	mov	r2, r0
 c006908:	693b      	ldr	r3, [r7, #16]
 c00690a:	1ad3      	subs	r3, r2, r3
 c00690c:	2b02      	cmp	r3, #2
 c00690e:	d907      	bls.n	c006920 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006910:	4b66      	ldr	r3, [pc, #408]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c006912:	681b      	ldr	r3, [r3, #0]
 c006914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c006918:	2b00      	cmp	r3, #0
 c00691a:	d001      	beq.n	c006920 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 c00691c:	2303      	movs	r3, #3
 c00691e:	e0c1      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006920:	4b62      	ldr	r3, [pc, #392]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c006922:	681b      	ldr	r3, [r3, #0]
 c006924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c006928:	2b00      	cmp	r3, #0
 c00692a:	d1ea      	bne.n	c006902 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c00692c:	4b5f      	ldr	r3, [pc, #380]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c00692e:	68da      	ldr	r2, [r3, #12]
 c006930:	4b5f      	ldr	r3, [pc, #380]	; (c006ab0 <HAL_RCC_OscConfig+0x9c0>)
 c006932:	4013      	ands	r3, r2
 c006934:	687a      	ldr	r2, [r7, #4]
 c006936:	6b11      	ldr	r1, [r2, #48]	; 0x30
 c006938:	687a      	ldr	r2, [r7, #4]
 c00693a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 c00693c:	3a01      	subs	r2, #1
 c00693e:	0112      	lsls	r2, r2, #4
 c006940:	4311      	orrs	r1, r2
 c006942:	687a      	ldr	r2, [r7, #4]
 c006944:	6b92      	ldr	r2, [r2, #56]	; 0x38
 c006946:	0212      	lsls	r2, r2, #8
 c006948:	4311      	orrs	r1, r2
 c00694a:	687a      	ldr	r2, [r7, #4]
 c00694c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c00694e:	0852      	lsrs	r2, r2, #1
 c006950:	3a01      	subs	r2, #1
 c006952:	0552      	lsls	r2, r2, #21
 c006954:	4311      	orrs	r1, r2
 c006956:	687a      	ldr	r2, [r7, #4]
 c006958:	6c52      	ldr	r2, [r2, #68]	; 0x44
 c00695a:	0852      	lsrs	r2, r2, #1
 c00695c:	3a01      	subs	r2, #1
 c00695e:	0652      	lsls	r2, r2, #25
 c006960:	4311      	orrs	r1, r2
 c006962:	687a      	ldr	r2, [r7, #4]
 c006964:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 c006966:	06d2      	lsls	r2, r2, #27
 c006968:	430a      	orrs	r2, r1
 c00696a:	4950      	ldr	r1, [pc, #320]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c00696c:	4313      	orrs	r3, r2
 c00696e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 c006970:	4b4e      	ldr	r3, [pc, #312]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c006972:	681b      	ldr	r3, [r3, #0]
 c006974:	4a4d      	ldr	r2, [pc, #308]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c006976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c00697a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c00697c:	4b4b      	ldr	r3, [pc, #300]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c00697e:	68db      	ldr	r3, [r3, #12]
 c006980:	4a4a      	ldr	r2, [pc, #296]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c006982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c006986:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c006988:	f7fd ff9e 	bl	c0048c8 <HAL_GetTick>
 c00698c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c00698e:	e00e      	b.n	c0069ae <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c006990:	f7fd ff9a 	bl	c0048c8 <HAL_GetTick>
 c006994:	4602      	mov	r2, r0
 c006996:	693b      	ldr	r3, [r7, #16]
 c006998:	1ad3      	subs	r3, r2, r3
 c00699a:	2b02      	cmp	r3, #2
 c00699c:	d907      	bls.n	c0069ae <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c00699e:	4b43      	ldr	r3, [pc, #268]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c0069a0:	681b      	ldr	r3, [r3, #0]
 c0069a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0069a6:	2b00      	cmp	r3, #0
 c0069a8:	d101      	bne.n	c0069ae <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 c0069aa:	2303      	movs	r3, #3
 c0069ac:	e07a      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c0069ae:	4b3f      	ldr	r3, [pc, #252]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c0069b0:	681b      	ldr	r3, [r3, #0]
 c0069b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0069b6:	2b00      	cmp	r3, #0
 c0069b8:	d0ea      	beq.n	c006990 <HAL_RCC_OscConfig+0x8a0>
 c0069ba:	e072      	b.n	c006aa2 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c0069bc:	4b3b      	ldr	r3, [pc, #236]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c0069be:	681b      	ldr	r3, [r3, #0]
 c0069c0:	4a3a      	ldr	r2, [pc, #232]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c0069c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c0069c6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 c0069c8:	4b38      	ldr	r3, [pc, #224]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c0069ca:	681b      	ldr	r3, [r3, #0]
 c0069cc:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 c0069d0:	2b00      	cmp	r3, #0
 c0069d2:	d105      	bne.n	c0069e0 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 c0069d4:	4b35      	ldr	r3, [pc, #212]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c0069d6:	68db      	ldr	r3, [r3, #12]
 c0069d8:	4a34      	ldr	r2, [pc, #208]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c0069da:	f023 0303 	bic.w	r3, r3, #3
 c0069de:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c0069e0:	4b32      	ldr	r3, [pc, #200]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c0069e2:	68db      	ldr	r3, [r3, #12]
 c0069e4:	4a31      	ldr	r2, [pc, #196]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c0069e6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 c0069ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c0069ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0069f0:	f7fd ff6a 	bl	c0048c8 <HAL_GetTick>
 c0069f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0069f6:	e00e      	b.n	c006a16 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0069f8:	f7fd ff66 	bl	c0048c8 <HAL_GetTick>
 c0069fc:	4602      	mov	r2, r0
 c0069fe:	693b      	ldr	r3, [r7, #16]
 c006a00:	1ad3      	subs	r3, r2, r3
 c006a02:	2b02      	cmp	r3, #2
 c006a04:	d907      	bls.n	c006a16 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006a06:	4b29      	ldr	r3, [pc, #164]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c006a08:	681b      	ldr	r3, [r3, #0]
 c006a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c006a0e:	2b00      	cmp	r3, #0
 c006a10:	d001      	beq.n	c006a16 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 c006a12:	2303      	movs	r3, #3
 c006a14:	e046      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006a16:	4b25      	ldr	r3, [pc, #148]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c006a18:	681b      	ldr	r3, [r3, #0]
 c006a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c006a1e:	2b00      	cmp	r3, #0
 c006a20:	d1ea      	bne.n	c0069f8 <HAL_RCC_OscConfig+0x908>
 c006a22:	e03e      	b.n	c006aa2 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c006a24:	687b      	ldr	r3, [r7, #4]
 c006a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c006a28:	2b01      	cmp	r3, #1
 c006a2a:	d101      	bne.n	c006a30 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 c006a2c:	2301      	movs	r3, #1
 c006a2e:	e039      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 c006a30:	4b1e      	ldr	r3, [pc, #120]	; (c006aac <HAL_RCC_OscConfig+0x9bc>)
 c006a32:	68db      	ldr	r3, [r3, #12]
 c006a34:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c006a36:	697b      	ldr	r3, [r7, #20]
 c006a38:	f003 0203 	and.w	r2, r3, #3
 c006a3c:	687b      	ldr	r3, [r7, #4]
 c006a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c006a40:	429a      	cmp	r2, r3
 c006a42:	d12c      	bne.n	c006a9e <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c006a44:	697b      	ldr	r3, [r7, #20]
 c006a46:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c006a4a:	687b      	ldr	r3, [r7, #4]
 c006a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c006a4e:	3b01      	subs	r3, #1
 c006a50:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c006a52:	429a      	cmp	r2, r3
 c006a54:	d123      	bne.n	c006a9e <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c006a56:	697b      	ldr	r3, [r7, #20]
 c006a58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 c006a5c:	687b      	ldr	r3, [r7, #4]
 c006a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c006a60:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c006a62:	429a      	cmp	r2, r3
 c006a64:	d11b      	bne.n	c006a9e <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c006a66:	697b      	ldr	r3, [r7, #20]
 c006a68:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 c006a6c:	687b      	ldr	r3, [r7, #4]
 c006a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c006a70:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c006a72:	429a      	cmp	r2, r3
 c006a74:	d113      	bne.n	c006a9e <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c006a76:	697b      	ldr	r3, [r7, #20]
 c006a78:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 c006a7c:	687b      	ldr	r3, [r7, #4]
 c006a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c006a80:	085b      	lsrs	r3, r3, #1
 c006a82:	3b01      	subs	r3, #1
 c006a84:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c006a86:	429a      	cmp	r2, r3
 c006a88:	d109      	bne.n	c006a9e <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c006a8a:	697b      	ldr	r3, [r7, #20]
 c006a8c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 c006a90:	687b      	ldr	r3, [r7, #4]
 c006a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c006a94:	085b      	lsrs	r3, r3, #1
 c006a96:	3b01      	subs	r3, #1
 c006a98:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c006a9a:	429a      	cmp	r2, r3
 c006a9c:	d001      	beq.n	c006aa2 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 c006a9e:	2301      	movs	r3, #1
 c006aa0:	e000      	b.n	c006aa4 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 c006aa2:	2300      	movs	r3, #0
}
 c006aa4:	4618      	mov	r0, r3
 c006aa6:	3720      	adds	r7, #32
 c006aa8:	46bd      	mov	sp, r7
 c006aaa:	bd80      	pop	{r7, pc}
 c006aac:	50021000 	.word	0x50021000
 c006ab0:	019f800c 	.word	0x019f800c

0c006ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 c006ab4:	b580      	push	{r7, lr}
 c006ab6:	b086      	sub	sp, #24
 c006ab8:	af00      	add	r7, sp, #0
 c006aba:	6078      	str	r0, [r7, #4]
 c006abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c006abe:	2300      	movs	r3, #0
 c006ac0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 c006ac2:	687b      	ldr	r3, [r7, #4]
 c006ac4:	2b00      	cmp	r3, #0
 c006ac6:	d101      	bne.n	c006acc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 c006ac8:	2301      	movs	r3, #1
 c006aca:	e10d      	b.n	c006ce8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c006acc:	4b88      	ldr	r3, [pc, #544]	; (c006cf0 <HAL_RCC_ClockConfig+0x23c>)
 c006ace:	681b      	ldr	r3, [r3, #0]
 c006ad0:	f003 030f 	and.w	r3, r3, #15
 c006ad4:	683a      	ldr	r2, [r7, #0]
 c006ad6:	429a      	cmp	r2, r3
 c006ad8:	d910      	bls.n	c006afc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c006ada:	4b85      	ldr	r3, [pc, #532]	; (c006cf0 <HAL_RCC_ClockConfig+0x23c>)
 c006adc:	681b      	ldr	r3, [r3, #0]
 c006ade:	f023 020f 	bic.w	r2, r3, #15
 c006ae2:	4983      	ldr	r1, [pc, #524]	; (c006cf0 <HAL_RCC_ClockConfig+0x23c>)
 c006ae4:	683b      	ldr	r3, [r7, #0]
 c006ae6:	4313      	orrs	r3, r2
 c006ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c006aea:	4b81      	ldr	r3, [pc, #516]	; (c006cf0 <HAL_RCC_ClockConfig+0x23c>)
 c006aec:	681b      	ldr	r3, [r3, #0]
 c006aee:	f003 030f 	and.w	r3, r3, #15
 c006af2:	683a      	ldr	r2, [r7, #0]
 c006af4:	429a      	cmp	r2, r3
 c006af6:	d001      	beq.n	c006afc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 c006af8:	2301      	movs	r3, #1
 c006afa:	e0f5      	b.n	c006ce8 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c006afc:	687b      	ldr	r3, [r7, #4]
 c006afe:	681b      	ldr	r3, [r3, #0]
 c006b00:	f003 0301 	and.w	r3, r3, #1
 c006b04:	2b00      	cmp	r3, #0
 c006b06:	f000 8094 	beq.w	c006c32 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c006b0a:	687b      	ldr	r3, [r7, #4]
 c006b0c:	685b      	ldr	r3, [r3, #4]
 c006b0e:	2b03      	cmp	r3, #3
 c006b10:	d134      	bne.n	c006b7c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c006b12:	4b78      	ldr	r3, [pc, #480]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006b14:	681b      	ldr	r3, [r3, #0]
 c006b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c006b1a:	2b00      	cmp	r3, #0
 c006b1c:	d101      	bne.n	c006b22 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 c006b1e:	2301      	movs	r3, #1
 c006b20:	e0e2      	b.n	c006ce8 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 c006b22:	f000 fa2b 	bl	c006f7c <RCC_GetSysClockFreqFromPLLSource>
 c006b26:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 c006b28:	693b      	ldr	r3, [r7, #16]
 c006b2a:	4a73      	ldr	r2, [pc, #460]	; (c006cf8 <HAL_RCC_ClockConfig+0x244>)
 c006b2c:	4293      	cmp	r3, r2
 c006b2e:	d956      	bls.n	c006bde <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c006b30:	4b70      	ldr	r3, [pc, #448]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006b32:	689b      	ldr	r3, [r3, #8]
 c006b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c006b38:	2b00      	cmp	r3, #0
 c006b3a:	d10a      	bne.n	c006b52 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c006b3c:	4b6d      	ldr	r3, [pc, #436]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006b3e:	689b      	ldr	r3, [r3, #8]
 c006b40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c006b44:	4a6b      	ldr	r2, [pc, #428]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c006b4a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c006b4c:	2380      	movs	r3, #128	; 0x80
 c006b4e:	617b      	str	r3, [r7, #20]
 c006b50:	e045      	b.n	c006bde <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c006b52:	687b      	ldr	r3, [r7, #4]
 c006b54:	681b      	ldr	r3, [r3, #0]
 c006b56:	f003 0302 	and.w	r3, r3, #2
 c006b5a:	2b00      	cmp	r3, #0
 c006b5c:	d03f      	beq.n	c006bde <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 c006b5e:	687b      	ldr	r3, [r7, #4]
 c006b60:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c006b62:	2b00      	cmp	r3, #0
 c006b64:	d13b      	bne.n	c006bde <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c006b66:	4b63      	ldr	r3, [pc, #396]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006b68:	689b      	ldr	r3, [r3, #8]
 c006b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c006b6e:	4a61      	ldr	r2, [pc, #388]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c006b74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c006b76:	2380      	movs	r3, #128	; 0x80
 c006b78:	617b      	str	r3, [r7, #20]
 c006b7a:	e030      	b.n	c006bde <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c006b7c:	687b      	ldr	r3, [r7, #4]
 c006b7e:	685b      	ldr	r3, [r3, #4]
 c006b80:	2b02      	cmp	r3, #2
 c006b82:	d107      	bne.n	c006b94 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c006b84:	4b5b      	ldr	r3, [pc, #364]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006b86:	681b      	ldr	r3, [r3, #0]
 c006b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c006b8c:	2b00      	cmp	r3, #0
 c006b8e:	d115      	bne.n	c006bbc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c006b90:	2301      	movs	r3, #1
 c006b92:	e0a9      	b.n	c006ce8 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c006b94:	687b      	ldr	r3, [r7, #4]
 c006b96:	685b      	ldr	r3, [r3, #4]
 c006b98:	2b00      	cmp	r3, #0
 c006b9a:	d107      	bne.n	c006bac <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c006b9c:	4b55      	ldr	r3, [pc, #340]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006b9e:	681b      	ldr	r3, [r3, #0]
 c006ba0:	f003 0302 	and.w	r3, r3, #2
 c006ba4:	2b00      	cmp	r3, #0
 c006ba6:	d109      	bne.n	c006bbc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c006ba8:	2301      	movs	r3, #1
 c006baa:	e09d      	b.n	c006ce8 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c006bac:	4b51      	ldr	r3, [pc, #324]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006bae:	681b      	ldr	r3, [r3, #0]
 c006bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c006bb4:	2b00      	cmp	r3, #0
 c006bb6:	d101      	bne.n	c006bbc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c006bb8:	2301      	movs	r3, #1
 c006bba:	e095      	b.n	c006ce8 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 c006bbc:	f000 f8a2 	bl	c006d04 <HAL_RCC_GetSysClockFreq>
 c006bc0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 c006bc2:	693b      	ldr	r3, [r7, #16]
 c006bc4:	4a4c      	ldr	r2, [pc, #304]	; (c006cf8 <HAL_RCC_ClockConfig+0x244>)
 c006bc6:	4293      	cmp	r3, r2
 c006bc8:	d909      	bls.n	c006bde <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c006bca:	4b4a      	ldr	r3, [pc, #296]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006bcc:	689b      	ldr	r3, [r3, #8]
 c006bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c006bd2:	4a48      	ldr	r2, [pc, #288]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c006bd8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 c006bda:	2380      	movs	r3, #128	; 0x80
 c006bdc:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c006bde:	4b45      	ldr	r3, [pc, #276]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006be0:	689b      	ldr	r3, [r3, #8]
 c006be2:	f023 0203 	bic.w	r2, r3, #3
 c006be6:	687b      	ldr	r3, [r7, #4]
 c006be8:	685b      	ldr	r3, [r3, #4]
 c006bea:	4942      	ldr	r1, [pc, #264]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006bec:	4313      	orrs	r3, r2
 c006bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c006bf0:	f7fd fe6a 	bl	c0048c8 <HAL_GetTick>
 c006bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c006bf6:	e013      	b.n	c006c20 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c006bf8:	f7fd fe66 	bl	c0048c8 <HAL_GetTick>
 c006bfc:	4602      	mov	r2, r0
 c006bfe:	68fb      	ldr	r3, [r7, #12]
 c006c00:	1ad3      	subs	r3, r2, r3
 c006c02:	f241 3288 	movw	r2, #5000	; 0x1388
 c006c06:	4293      	cmp	r3, r2
 c006c08:	d90a      	bls.n	c006c20 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c006c0a:	4b3a      	ldr	r3, [pc, #232]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006c0c:	689b      	ldr	r3, [r3, #8]
 c006c0e:	f003 020c 	and.w	r2, r3, #12
 c006c12:	687b      	ldr	r3, [r7, #4]
 c006c14:	685b      	ldr	r3, [r3, #4]
 c006c16:	009b      	lsls	r3, r3, #2
 c006c18:	429a      	cmp	r2, r3
 c006c1a:	d001      	beq.n	c006c20 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 c006c1c:	2303      	movs	r3, #3
 c006c1e:	e063      	b.n	c006ce8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c006c20:	4b34      	ldr	r3, [pc, #208]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006c22:	689b      	ldr	r3, [r3, #8]
 c006c24:	f003 020c 	and.w	r2, r3, #12
 c006c28:	687b      	ldr	r3, [r7, #4]
 c006c2a:	685b      	ldr	r3, [r3, #4]
 c006c2c:	009b      	lsls	r3, r3, #2
 c006c2e:	429a      	cmp	r2, r3
 c006c30:	d1e2      	bne.n	c006bf8 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c006c32:	687b      	ldr	r3, [r7, #4]
 c006c34:	681b      	ldr	r3, [r3, #0]
 c006c36:	f003 0302 	and.w	r3, r3, #2
 c006c3a:	2b00      	cmp	r3, #0
 c006c3c:	d009      	beq.n	c006c52 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c006c3e:	4b2d      	ldr	r3, [pc, #180]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006c40:	689b      	ldr	r3, [r3, #8]
 c006c42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c006c46:	687b      	ldr	r3, [r7, #4]
 c006c48:	689b      	ldr	r3, [r3, #8]
 c006c4a:	492a      	ldr	r1, [pc, #168]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006c4c:	4313      	orrs	r3, r2
 c006c4e:	608b      	str	r3, [r1, #8]
 c006c50:	e008      	b.n	c006c64 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 c006c52:	697b      	ldr	r3, [r7, #20]
 c006c54:	2b80      	cmp	r3, #128	; 0x80
 c006c56:	d105      	bne.n	c006c64 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c006c58:	4b26      	ldr	r3, [pc, #152]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006c5a:	689b      	ldr	r3, [r3, #8]
 c006c5c:	4a25      	ldr	r2, [pc, #148]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c006c62:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c006c64:	4b22      	ldr	r3, [pc, #136]	; (c006cf0 <HAL_RCC_ClockConfig+0x23c>)
 c006c66:	681b      	ldr	r3, [r3, #0]
 c006c68:	f003 030f 	and.w	r3, r3, #15
 c006c6c:	683a      	ldr	r2, [r7, #0]
 c006c6e:	429a      	cmp	r2, r3
 c006c70:	d210      	bcs.n	c006c94 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c006c72:	4b1f      	ldr	r3, [pc, #124]	; (c006cf0 <HAL_RCC_ClockConfig+0x23c>)
 c006c74:	681b      	ldr	r3, [r3, #0]
 c006c76:	f023 020f 	bic.w	r2, r3, #15
 c006c7a:	491d      	ldr	r1, [pc, #116]	; (c006cf0 <HAL_RCC_ClockConfig+0x23c>)
 c006c7c:	683b      	ldr	r3, [r7, #0]
 c006c7e:	4313      	orrs	r3, r2
 c006c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c006c82:	4b1b      	ldr	r3, [pc, #108]	; (c006cf0 <HAL_RCC_ClockConfig+0x23c>)
 c006c84:	681b      	ldr	r3, [r3, #0]
 c006c86:	f003 030f 	and.w	r3, r3, #15
 c006c8a:	683a      	ldr	r2, [r7, #0]
 c006c8c:	429a      	cmp	r2, r3
 c006c8e:	d001      	beq.n	c006c94 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 c006c90:	2301      	movs	r3, #1
 c006c92:	e029      	b.n	c006ce8 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c006c94:	687b      	ldr	r3, [r7, #4]
 c006c96:	681b      	ldr	r3, [r3, #0]
 c006c98:	f003 0304 	and.w	r3, r3, #4
 c006c9c:	2b00      	cmp	r3, #0
 c006c9e:	d008      	beq.n	c006cb2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c006ca0:	4b14      	ldr	r3, [pc, #80]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006ca2:	689b      	ldr	r3, [r3, #8]
 c006ca4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c006ca8:	687b      	ldr	r3, [r7, #4]
 c006caa:	68db      	ldr	r3, [r3, #12]
 c006cac:	4911      	ldr	r1, [pc, #68]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006cae:	4313      	orrs	r3, r2
 c006cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c006cb2:	687b      	ldr	r3, [r7, #4]
 c006cb4:	681b      	ldr	r3, [r3, #0]
 c006cb6:	f003 0308 	and.w	r3, r3, #8
 c006cba:	2b00      	cmp	r3, #0
 c006cbc:	d009      	beq.n	c006cd2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c006cbe:	4b0d      	ldr	r3, [pc, #52]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006cc0:	689b      	ldr	r3, [r3, #8]
 c006cc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 c006cc6:	687b      	ldr	r3, [r7, #4]
 c006cc8:	691b      	ldr	r3, [r3, #16]
 c006cca:	00db      	lsls	r3, r3, #3
 c006ccc:	4909      	ldr	r1, [pc, #36]	; (c006cf4 <HAL_RCC_ClockConfig+0x240>)
 c006cce:	4313      	orrs	r3, r2
 c006cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c006cd2:	f000 f8b3 	bl	c006e3c <HAL_RCC_GetHCLKFreq>
 c006cd6:	4603      	mov	r3, r0
 c006cd8:	4a08      	ldr	r2, [pc, #32]	; (c006cfc <HAL_RCC_ClockConfig+0x248>)
 c006cda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 c006cdc:	4b08      	ldr	r3, [pc, #32]	; (c006d00 <HAL_RCC_ClockConfig+0x24c>)
 c006cde:	681b      	ldr	r3, [r3, #0]
 c006ce0:	4618      	mov	r0, r3
 c006ce2:	f7fd fda1 	bl	c004828 <HAL_InitTick>
 c006ce6:	4603      	mov	r3, r0
}
 c006ce8:	4618      	mov	r0, r3
 c006cea:	3718      	adds	r7, #24
 c006cec:	46bd      	mov	sp, r7
 c006cee:	bd80      	pop	{r7, pc}
 c006cf0:	50022000 	.word	0x50022000
 c006cf4:	50021000 	.word	0x50021000
 c006cf8:	04c4b400 	.word	0x04c4b400
 c006cfc:	30000068 	.word	0x30000068
 c006d00:	3000006c 	.word	0x3000006c

0c006d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c006d04:	b480      	push	{r7}
 c006d06:	b089      	sub	sp, #36	; 0x24
 c006d08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c006d0a:	2300      	movs	r3, #0
 c006d0c:	61fb      	str	r3, [r7, #28]
 c006d0e:	2300      	movs	r3, #0
 c006d10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c006d12:	4b47      	ldr	r3, [pc, #284]	; (c006e30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c006d14:	689b      	ldr	r3, [r3, #8]
 c006d16:	f003 030c 	and.w	r3, r3, #12
 c006d1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c006d1c:	4b44      	ldr	r3, [pc, #272]	; (c006e30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c006d1e:	68db      	ldr	r3, [r3, #12]
 c006d20:	f003 0303 	and.w	r3, r3, #3
 c006d24:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c006d26:	693b      	ldr	r3, [r7, #16]
 c006d28:	2b00      	cmp	r3, #0
 c006d2a:	d005      	beq.n	c006d38 <HAL_RCC_GetSysClockFreq+0x34>
 c006d2c:	693b      	ldr	r3, [r7, #16]
 c006d2e:	2b0c      	cmp	r3, #12
 c006d30:	d121      	bne.n	c006d76 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c006d32:	68fb      	ldr	r3, [r7, #12]
 c006d34:	2b01      	cmp	r3, #1
 c006d36:	d11e      	bne.n	c006d76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c006d38:	4b3d      	ldr	r3, [pc, #244]	; (c006e30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c006d3a:	681b      	ldr	r3, [r3, #0]
 c006d3c:	f003 0308 	and.w	r3, r3, #8
 c006d40:	2b00      	cmp	r3, #0
 c006d42:	d107      	bne.n	c006d54 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c006d44:	4b3a      	ldr	r3, [pc, #232]	; (c006e30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c006d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c006d4a:	0a1b      	lsrs	r3, r3, #8
 c006d4c:	f003 030f 	and.w	r3, r3, #15
 c006d50:	61fb      	str	r3, [r7, #28]
 c006d52:	e005      	b.n	c006d60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c006d54:	4b36      	ldr	r3, [pc, #216]	; (c006e30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c006d56:	681b      	ldr	r3, [r3, #0]
 c006d58:	091b      	lsrs	r3, r3, #4
 c006d5a:	f003 030f 	and.w	r3, r3, #15
 c006d5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c006d60:	4a34      	ldr	r2, [pc, #208]	; (c006e34 <HAL_RCC_GetSysClockFreq+0x130>)
 c006d62:	69fb      	ldr	r3, [r7, #28]
 c006d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c006d68:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c006d6a:	693b      	ldr	r3, [r7, #16]
 c006d6c:	2b00      	cmp	r3, #0
 c006d6e:	d10d      	bne.n	c006d8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c006d70:	69fb      	ldr	r3, [r7, #28]
 c006d72:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c006d74:	e00a      	b.n	c006d8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c006d76:	693b      	ldr	r3, [r7, #16]
 c006d78:	2b04      	cmp	r3, #4
 c006d7a:	d102      	bne.n	c006d82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c006d7c:	4b2e      	ldr	r3, [pc, #184]	; (c006e38 <HAL_RCC_GetSysClockFreq+0x134>)
 c006d7e:	61bb      	str	r3, [r7, #24]
 c006d80:	e004      	b.n	c006d8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c006d82:	693b      	ldr	r3, [r7, #16]
 c006d84:	2b08      	cmp	r3, #8
 c006d86:	d101      	bne.n	c006d8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c006d88:	4b2b      	ldr	r3, [pc, #172]	; (c006e38 <HAL_RCC_GetSysClockFreq+0x134>)
 c006d8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c006d8c:	693b      	ldr	r3, [r7, #16]
 c006d8e:	2b0c      	cmp	r3, #12
 c006d90:	d146      	bne.n	c006e20 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c006d92:	4b27      	ldr	r3, [pc, #156]	; (c006e30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c006d94:	68db      	ldr	r3, [r3, #12]
 c006d96:	f003 0303 	and.w	r3, r3, #3
 c006d9a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c006d9c:	4b24      	ldr	r3, [pc, #144]	; (c006e30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c006d9e:	68db      	ldr	r3, [r3, #12]
 c006da0:	091b      	lsrs	r3, r3, #4
 c006da2:	f003 030f 	and.w	r3, r3, #15
 c006da6:	3301      	adds	r3, #1
 c006da8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 c006daa:	68bb      	ldr	r3, [r7, #8]
 c006dac:	2b02      	cmp	r3, #2
 c006dae:	d003      	beq.n	c006db8 <HAL_RCC_GetSysClockFreq+0xb4>
 c006db0:	68bb      	ldr	r3, [r7, #8]
 c006db2:	2b03      	cmp	r3, #3
 c006db4:	d00d      	beq.n	c006dd2 <HAL_RCC_GetSysClockFreq+0xce>
 c006db6:	e019      	b.n	c006dec <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c006db8:	4a1f      	ldr	r2, [pc, #124]	; (c006e38 <HAL_RCC_GetSysClockFreq+0x134>)
 c006dba:	687b      	ldr	r3, [r7, #4]
 c006dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 c006dc0:	4a1b      	ldr	r2, [pc, #108]	; (c006e30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c006dc2:	68d2      	ldr	r2, [r2, #12]
 c006dc4:	0a12      	lsrs	r2, r2, #8
 c006dc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c006dca:	fb02 f303 	mul.w	r3, r2, r3
 c006dce:	617b      	str	r3, [r7, #20]
        break;
 c006dd0:	e019      	b.n	c006e06 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c006dd2:	4a19      	ldr	r2, [pc, #100]	; (c006e38 <HAL_RCC_GetSysClockFreq+0x134>)
 c006dd4:	687b      	ldr	r3, [r7, #4]
 c006dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 c006dda:	4a15      	ldr	r2, [pc, #84]	; (c006e30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c006ddc:	68d2      	ldr	r2, [r2, #12]
 c006dde:	0a12      	lsrs	r2, r2, #8
 c006de0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c006de4:	fb02 f303 	mul.w	r3, r2, r3
 c006de8:	617b      	str	r3, [r7, #20]
        break;
 c006dea:	e00c      	b.n	c006e06 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c006dec:	69fa      	ldr	r2, [r7, #28]
 c006dee:	687b      	ldr	r3, [r7, #4]
 c006df0:	fbb2 f3f3 	udiv	r3, r2, r3
 c006df4:	4a0e      	ldr	r2, [pc, #56]	; (c006e30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c006df6:	68d2      	ldr	r2, [r2, #12]
 c006df8:	0a12      	lsrs	r2, r2, #8
 c006dfa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c006dfe:	fb02 f303 	mul.w	r3, r2, r3
 c006e02:	617b      	str	r3, [r7, #20]
        break;
 c006e04:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c006e06:	4b0a      	ldr	r3, [pc, #40]	; (c006e30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c006e08:	68db      	ldr	r3, [r3, #12]
 c006e0a:	0e5b      	lsrs	r3, r3, #25
 c006e0c:	f003 0303 	and.w	r3, r3, #3
 c006e10:	3301      	adds	r3, #1
 c006e12:	005b      	lsls	r3, r3, #1
 c006e14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 c006e16:	697a      	ldr	r2, [r7, #20]
 c006e18:	683b      	ldr	r3, [r7, #0]
 c006e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 c006e1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 c006e20:	69bb      	ldr	r3, [r7, #24]
}
 c006e22:	4618      	mov	r0, r3
 c006e24:	3724      	adds	r7, #36	; 0x24
 c006e26:	46bd      	mov	sp, r7
 c006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006e2c:	4770      	bx	lr
 c006e2e:	bf00      	nop
 c006e30:	50021000 	.word	0x50021000
 c006e34:	0c0092a0 	.word	0x0c0092a0
 c006e38:	00f42400 	.word	0x00f42400

0c006e3c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c006e3c:	b580      	push	{r7, lr}
 c006e3e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c006e40:	f7ff ff60 	bl	c006d04 <HAL_RCC_GetSysClockFreq>
 c006e44:	4602      	mov	r2, r0
 c006e46:	4b05      	ldr	r3, [pc, #20]	; (c006e5c <HAL_RCC_GetHCLKFreq+0x20>)
 c006e48:	689b      	ldr	r3, [r3, #8]
 c006e4a:	091b      	lsrs	r3, r3, #4
 c006e4c:	f003 030f 	and.w	r3, r3, #15
 c006e50:	4903      	ldr	r1, [pc, #12]	; (c006e60 <HAL_RCC_GetHCLKFreq+0x24>)
 c006e52:	5ccb      	ldrb	r3, [r1, r3]
 c006e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 c006e58:	4618      	mov	r0, r3
 c006e5a:	bd80      	pop	{r7, pc}
 c006e5c:	50021000 	.word	0x50021000
 c006e60:	0c009288 	.word	0x0c009288

0c006e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c006e64:	b580      	push	{r7, lr}
 c006e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c006e68:	f7ff ffe8 	bl	c006e3c <HAL_RCC_GetHCLKFreq>
 c006e6c:	4602      	mov	r2, r0
 c006e6e:	4b05      	ldr	r3, [pc, #20]	; (c006e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 c006e70:	689b      	ldr	r3, [r3, #8]
 c006e72:	0a1b      	lsrs	r3, r3, #8
 c006e74:	f003 0307 	and.w	r3, r3, #7
 c006e78:	4903      	ldr	r1, [pc, #12]	; (c006e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 c006e7a:	5ccb      	ldrb	r3, [r1, r3]
 c006e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 c006e80:	4618      	mov	r0, r3
 c006e82:	bd80      	pop	{r7, pc}
 c006e84:	50021000 	.word	0x50021000
 c006e88:	0c009298 	.word	0x0c009298

0c006e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c006e8c:	b580      	push	{r7, lr}
 c006e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c006e90:	f7ff ffd4 	bl	c006e3c <HAL_RCC_GetHCLKFreq>
 c006e94:	4602      	mov	r2, r0
 c006e96:	4b05      	ldr	r3, [pc, #20]	; (c006eac <HAL_RCC_GetPCLK2Freq+0x20>)
 c006e98:	689b      	ldr	r3, [r3, #8]
 c006e9a:	0adb      	lsrs	r3, r3, #11
 c006e9c:	f003 0307 	and.w	r3, r3, #7
 c006ea0:	4903      	ldr	r1, [pc, #12]	; (c006eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 c006ea2:	5ccb      	ldrb	r3, [r1, r3]
 c006ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 c006ea8:	4618      	mov	r0, r3
 c006eaa:	bd80      	pop	{r7, pc}
 c006eac:	50021000 	.word	0x50021000
 c006eb0:	0c009298 	.word	0x0c009298

0c006eb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c006eb4:	b580      	push	{r7, lr}
 c006eb6:	b086      	sub	sp, #24
 c006eb8:	af00      	add	r7, sp, #0
 c006eba:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 c006ebc:	2300      	movs	r3, #0
 c006ebe:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c006ec0:	4b2c      	ldr	r3, [pc, #176]	; (c006f74 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c006ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c006ec8:	2b00      	cmp	r3, #0
 c006eca:	d003      	beq.n	c006ed4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c006ecc:	f7ff f862 	bl	c005f94 <HAL_PWREx_GetVoltageRange>
 c006ed0:	6138      	str	r0, [r7, #16]
 c006ed2:	e014      	b.n	c006efe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c006ed4:	4b27      	ldr	r3, [pc, #156]	; (c006f74 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c006ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006ed8:	4a26      	ldr	r2, [pc, #152]	; (c006f74 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c006eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c006ede:	6593      	str	r3, [r2, #88]	; 0x58
 c006ee0:	4b24      	ldr	r3, [pc, #144]	; (c006f74 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c006ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c006ee8:	60fb      	str	r3, [r7, #12]
 c006eea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c006eec:	f7ff f852 	bl	c005f94 <HAL_PWREx_GetVoltageRange>
 c006ef0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 c006ef2:	4b20      	ldr	r3, [pc, #128]	; (c006f74 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c006ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006ef6:	4a1f      	ldr	r2, [pc, #124]	; (c006f74 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c006ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c006efc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c006efe:	693b      	ldr	r3, [r7, #16]
 c006f00:	2b00      	cmp	r3, #0
 c006f02:	d003      	beq.n	c006f0c <RCC_SetFlashLatencyFromMSIRange+0x58>
 c006f04:	693b      	ldr	r3, [r7, #16]
 c006f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c006f0a:	d10b      	bne.n	c006f24 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 c006f0c:	687b      	ldr	r3, [r7, #4]
 c006f0e:	2b80      	cmp	r3, #128	; 0x80
 c006f10:	d919      	bls.n	c006f46 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 c006f12:	687b      	ldr	r3, [r7, #4]
 c006f14:	2ba0      	cmp	r3, #160	; 0xa0
 c006f16:	d902      	bls.n	c006f1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c006f18:	2302      	movs	r3, #2
 c006f1a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c006f1c:	e013      	b.n	c006f46 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c006f1e:	2301      	movs	r3, #1
 c006f20:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c006f22:	e010      	b.n	c006f46 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c006f24:	687b      	ldr	r3, [r7, #4]
 c006f26:	2b80      	cmp	r3, #128	; 0x80
 c006f28:	d902      	bls.n	c006f30 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 c006f2a:	2303      	movs	r3, #3
 c006f2c:	617b      	str	r3, [r7, #20]
 c006f2e:	e00a      	b.n	c006f46 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c006f30:	687b      	ldr	r3, [r7, #4]
 c006f32:	2b80      	cmp	r3, #128	; 0x80
 c006f34:	d102      	bne.n	c006f3c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c006f36:	2302      	movs	r3, #2
 c006f38:	617b      	str	r3, [r7, #20]
 c006f3a:	e004      	b.n	c006f46 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 c006f3c:	687b      	ldr	r3, [r7, #4]
 c006f3e:	2b70      	cmp	r3, #112	; 0x70
 c006f40:	d101      	bne.n	c006f46 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c006f42:	2301      	movs	r3, #1
 c006f44:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c006f46:	4b0c      	ldr	r3, [pc, #48]	; (c006f78 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c006f48:	681b      	ldr	r3, [r3, #0]
 c006f4a:	f023 020f 	bic.w	r2, r3, #15
 c006f4e:	490a      	ldr	r1, [pc, #40]	; (c006f78 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c006f50:	697b      	ldr	r3, [r7, #20]
 c006f52:	4313      	orrs	r3, r2
 c006f54:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c006f56:	4b08      	ldr	r3, [pc, #32]	; (c006f78 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c006f58:	681b      	ldr	r3, [r3, #0]
 c006f5a:	f003 030f 	and.w	r3, r3, #15
 c006f5e:	697a      	ldr	r2, [r7, #20]
 c006f60:	429a      	cmp	r2, r3
 c006f62:	d001      	beq.n	c006f68 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 c006f64:	2301      	movs	r3, #1
 c006f66:	e000      	b.n	c006f6a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 c006f68:	2300      	movs	r3, #0
}
 c006f6a:	4618      	mov	r0, r3
 c006f6c:	3718      	adds	r7, #24
 c006f6e:	46bd      	mov	sp, r7
 c006f70:	bd80      	pop	{r7, pc}
 c006f72:	bf00      	nop
 c006f74:	50021000 	.word	0x50021000
 c006f78:	50022000 	.word	0x50022000

0c006f7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 c006f7c:	b480      	push	{r7}
 c006f7e:	b087      	sub	sp, #28
 c006f80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 c006f82:	2300      	movs	r3, #0
 c006f84:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 c006f86:	4b36      	ldr	r3, [pc, #216]	; (c007060 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c006f88:	68db      	ldr	r3, [r3, #12]
 c006f8a:	f003 0303 	and.w	r3, r3, #3
 c006f8e:	2b01      	cmp	r3, #1
 c006f90:	d118      	bne.n	c006fc4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c006f92:	4b33      	ldr	r3, [pc, #204]	; (c007060 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c006f94:	681b      	ldr	r3, [r3, #0]
 c006f96:	f003 0308 	and.w	r3, r3, #8
 c006f9a:	2b00      	cmp	r3, #0
 c006f9c:	d107      	bne.n	c006fae <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c006f9e:	4b30      	ldr	r3, [pc, #192]	; (c007060 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c006fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c006fa4:	0a1b      	lsrs	r3, r3, #8
 c006fa6:	f003 030f 	and.w	r3, r3, #15
 c006faa:	617b      	str	r3, [r7, #20]
 c006fac:	e005      	b.n	c006fba <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c006fae:	4b2c      	ldr	r3, [pc, #176]	; (c007060 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c006fb0:	681b      	ldr	r3, [r3, #0]
 c006fb2:	091b      	lsrs	r3, r3, #4
 c006fb4:	f003 030f 	and.w	r3, r3, #15
 c006fb8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c006fba:	4a2a      	ldr	r2, [pc, #168]	; (c007064 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 c006fbc:	697b      	ldr	r3, [r7, #20]
 c006fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c006fc2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c006fc4:	4b26      	ldr	r3, [pc, #152]	; (c007060 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c006fc6:	68db      	ldr	r3, [r3, #12]
 c006fc8:	f003 0303 	and.w	r3, r3, #3
 c006fcc:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c006fce:	4b24      	ldr	r3, [pc, #144]	; (c007060 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c006fd0:	68db      	ldr	r3, [r3, #12]
 c006fd2:	091b      	lsrs	r3, r3, #4
 c006fd4:	f003 030f 	and.w	r3, r3, #15
 c006fd8:	3301      	adds	r3, #1
 c006fda:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 c006fdc:	68fb      	ldr	r3, [r7, #12]
 c006fde:	2b02      	cmp	r3, #2
 c006fe0:	d003      	beq.n	c006fea <RCC_GetSysClockFreqFromPLLSource+0x6e>
 c006fe2:	68fb      	ldr	r3, [r7, #12]
 c006fe4:	2b03      	cmp	r3, #3
 c006fe6:	d00d      	beq.n	c007004 <RCC_GetSysClockFreqFromPLLSource+0x88>
 c006fe8:	e019      	b.n	c00701e <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c006fea:	4a1f      	ldr	r2, [pc, #124]	; (c007068 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 c006fec:	68bb      	ldr	r3, [r7, #8]
 c006fee:	fbb2 f3f3 	udiv	r3, r2, r3
 c006ff2:	4a1b      	ldr	r2, [pc, #108]	; (c007060 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c006ff4:	68d2      	ldr	r2, [r2, #12]
 c006ff6:	0a12      	lsrs	r2, r2, #8
 c006ff8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c006ffc:	fb02 f303 	mul.w	r3, r2, r3
 c007000:	613b      	str	r3, [r7, #16]
      break;
 c007002:	e019      	b.n	c007038 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c007004:	4a18      	ldr	r2, [pc, #96]	; (c007068 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 c007006:	68bb      	ldr	r3, [r7, #8]
 c007008:	fbb2 f3f3 	udiv	r3, r2, r3
 c00700c:	4a14      	ldr	r2, [pc, #80]	; (c007060 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c00700e:	68d2      	ldr	r2, [r2, #12]
 c007010:	0a12      	lsrs	r2, r2, #8
 c007012:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c007016:	fb02 f303 	mul.w	r3, r2, r3
 c00701a:	613b      	str	r3, [r7, #16]
      break;
 c00701c:	e00c      	b.n	c007038 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00701e:	697a      	ldr	r2, [r7, #20]
 c007020:	68bb      	ldr	r3, [r7, #8]
 c007022:	fbb2 f3f3 	udiv	r3, r2, r3
 c007026:	4a0e      	ldr	r2, [pc, #56]	; (c007060 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c007028:	68d2      	ldr	r2, [r2, #12]
 c00702a:	0a12      	lsrs	r2, r2, #8
 c00702c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c007030:	fb02 f303 	mul.w	r3, r2, r3
 c007034:	613b      	str	r3, [r7, #16]
      break;
 c007036:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c007038:	4b09      	ldr	r3, [pc, #36]	; (c007060 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c00703a:	68db      	ldr	r3, [r3, #12]
 c00703c:	0e5b      	lsrs	r3, r3, #25
 c00703e:	f003 0303 	and.w	r3, r3, #3
 c007042:	3301      	adds	r3, #1
 c007044:	005b      	lsls	r3, r3, #1
 c007046:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 c007048:	693a      	ldr	r2, [r7, #16]
 c00704a:	687b      	ldr	r3, [r7, #4]
 c00704c:	fbb2 f3f3 	udiv	r3, r2, r3
 c007050:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 c007052:	683b      	ldr	r3, [r7, #0]
}
 c007054:	4618      	mov	r0, r3
 c007056:	371c      	adds	r7, #28
 c007058:	46bd      	mov	sp, r7
 c00705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00705e:	4770      	bx	lr
 c007060:	50021000 	.word	0x50021000
 c007064:	0c0092a0 	.word	0x0c0092a0
 c007068:	00f42400 	.word	0x00f42400

0c00706c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 c00706c:	b580      	push	{r7, lr}
 c00706e:	b088      	sub	sp, #32
 c007070:	af00      	add	r7, sp, #0
 c007072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c007074:	2300      	movs	r3, #0
 c007076:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c007078:	2300      	movs	r3, #0
 c00707a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c00707c:	687b      	ldr	r3, [r7, #4]
 c00707e:	681b      	ldr	r3, [r3, #0]
 c007080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c007084:	2b00      	cmp	r3, #0
 c007086:	d040      	beq.n	c00710a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 c007088:	687b      	ldr	r3, [r7, #4]
 c00708a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c00708c:	2b80      	cmp	r3, #128	; 0x80
 c00708e:	d02a      	beq.n	c0070e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c007090:	2b80      	cmp	r3, #128	; 0x80
 c007092:	d825      	bhi.n	c0070e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c007094:	2b60      	cmp	r3, #96	; 0x60
 c007096:	d026      	beq.n	c0070e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c007098:	2b60      	cmp	r3, #96	; 0x60
 c00709a:	d821      	bhi.n	c0070e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c00709c:	2b40      	cmp	r3, #64	; 0x40
 c00709e:	d006      	beq.n	c0070ae <HAL_RCCEx_PeriphCLKConfig+0x42>
 c0070a0:	2b40      	cmp	r3, #64	; 0x40
 c0070a2:	d81d      	bhi.n	c0070e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c0070a4:	2b00      	cmp	r3, #0
 c0070a6:	d009      	beq.n	c0070bc <HAL_RCCEx_PeriphCLKConfig+0x50>
 c0070a8:	2b20      	cmp	r3, #32
 c0070aa:	d010      	beq.n	c0070ce <HAL_RCCEx_PeriphCLKConfig+0x62>
 c0070ac:	e018      	b.n	c0070e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c0070ae:	4b8f      	ldr	r3, [pc, #572]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0070b0:	68db      	ldr	r3, [r3, #12]
 c0070b2:	4a8e      	ldr	r2, [pc, #568]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0070b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0070b8:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c0070ba:	e015      	b.n	c0070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c0070bc:	687b      	ldr	r3, [r7, #4]
 c0070be:	3304      	adds	r3, #4
 c0070c0:	2100      	movs	r1, #0
 c0070c2:	4618      	mov	r0, r3
 c0070c4:	f000 fb56 	bl	c007774 <RCCEx_PLLSAI1_Config>
 c0070c8:	4603      	mov	r3, r0
 c0070ca:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c0070cc:	e00c      	b.n	c0070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c0070ce:	687b      	ldr	r3, [r7, #4]
 c0070d0:	3320      	adds	r3, #32
 c0070d2:	2100      	movs	r1, #0
 c0070d4:	4618      	mov	r0, r3
 c0070d6:	f000 fc33 	bl	c007940 <RCCEx_PLLSAI2_Config>
 c0070da:	4603      	mov	r3, r0
 c0070dc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c0070de:	e003      	b.n	c0070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0070e0:	2301      	movs	r3, #1
 c0070e2:	77fb      	strb	r3, [r7, #31]
        break;
 c0070e4:	e000      	b.n	c0070e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 c0070e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0070e8:	7ffb      	ldrb	r3, [r7, #31]
 c0070ea:	2b00      	cmp	r3, #0
 c0070ec:	d10b      	bne.n	c007106 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c0070ee:	4b7f      	ldr	r3, [pc, #508]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0070f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0070f4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 c0070f8:	687b      	ldr	r3, [r7, #4]
 c0070fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c0070fc:	497b      	ldr	r1, [pc, #492]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0070fe:	4313      	orrs	r3, r2
 c007100:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c007104:	e001      	b.n	c00710a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c007106:	7ffb      	ldrb	r3, [r7, #31]
 c007108:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c00710a:	687b      	ldr	r3, [r7, #4]
 c00710c:	681b      	ldr	r3, [r3, #0]
 c00710e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c007112:	2b00      	cmp	r3, #0
 c007114:	d047      	beq.n	c0071a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 c007116:	687b      	ldr	r3, [r7, #4]
 c007118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c00711a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c00711e:	d030      	beq.n	c007182 <HAL_RCCEx_PeriphCLKConfig+0x116>
 c007120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c007124:	d82a      	bhi.n	c00717c <HAL_RCCEx_PeriphCLKConfig+0x110>
 c007126:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c00712a:	d02a      	beq.n	c007182 <HAL_RCCEx_PeriphCLKConfig+0x116>
 c00712c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c007130:	d824      	bhi.n	c00717c <HAL_RCCEx_PeriphCLKConfig+0x110>
 c007132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c007136:	d008      	beq.n	c00714a <HAL_RCCEx_PeriphCLKConfig+0xde>
 c007138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c00713c:	d81e      	bhi.n	c00717c <HAL_RCCEx_PeriphCLKConfig+0x110>
 c00713e:	2b00      	cmp	r3, #0
 c007140:	d00a      	beq.n	c007158 <HAL_RCCEx_PeriphCLKConfig+0xec>
 c007142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c007146:	d010      	beq.n	c00716a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 c007148:	e018      	b.n	c00717c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c00714a:	4b68      	ldr	r3, [pc, #416]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00714c:	68db      	ldr	r3, [r3, #12]
 c00714e:	4a67      	ldr	r2, [pc, #412]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c007154:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c007156:	e015      	b.n	c007184 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c007158:	687b      	ldr	r3, [r7, #4]
 c00715a:	3304      	adds	r3, #4
 c00715c:	2100      	movs	r1, #0
 c00715e:	4618      	mov	r0, r3
 c007160:	f000 fb08 	bl	c007774 <RCCEx_PLLSAI1_Config>
 c007164:	4603      	mov	r3, r0
 c007166:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c007168:	e00c      	b.n	c007184 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c00716a:	687b      	ldr	r3, [r7, #4]
 c00716c:	3320      	adds	r3, #32
 c00716e:	2100      	movs	r1, #0
 c007170:	4618      	mov	r0, r3
 c007172:	f000 fbe5 	bl	c007940 <RCCEx_PLLSAI2_Config>
 c007176:	4603      	mov	r3, r0
 c007178:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c00717a:	e003      	b.n	c007184 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c00717c:	2301      	movs	r3, #1
 c00717e:	77fb      	strb	r3, [r7, #31]
        break;
 c007180:	e000      	b.n	c007184 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 c007182:	bf00      	nop
    }

    if (ret == HAL_OK)
 c007184:	7ffb      	ldrb	r3, [r7, #31]
 c007186:	2b00      	cmp	r3, #0
 c007188:	d10b      	bne.n	c0071a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 c00718a:	4b58      	ldr	r3, [pc, #352]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00718c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c007190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c007194:	687b      	ldr	r3, [r7, #4]
 c007196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c007198:	4954      	ldr	r1, [pc, #336]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00719a:	4313      	orrs	r3, r2
 c00719c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c0071a0:	e001      	b.n	c0071a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0071a2:	7ffb      	ldrb	r3, [r7, #31]
 c0071a4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c0071a6:	687b      	ldr	r3, [r7, #4]
 c0071a8:	681b      	ldr	r3, [r3, #0]
 c0071aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0071ae:	2b00      	cmp	r3, #0
 c0071b0:	f000 80ab 	beq.w	c00730a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 c0071b4:	2300      	movs	r3, #0
 c0071b6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c0071b8:	4b4c      	ldr	r3, [pc, #304]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0071ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0071bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0071c0:	2b00      	cmp	r3, #0
 c0071c2:	d10d      	bne.n	c0071e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c0071c4:	4b49      	ldr	r3, [pc, #292]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0071c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0071c8:	4a48      	ldr	r2, [pc, #288]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0071ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0071ce:	6593      	str	r3, [r2, #88]	; 0x58
 c0071d0:	4b46      	ldr	r3, [pc, #280]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0071d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0071d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0071d8:	60fb      	str	r3, [r7, #12]
 c0071da:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 c0071dc:	2301      	movs	r3, #1
 c0071de:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c0071e0:	4b43      	ldr	r3, [pc, #268]	; (c0072f0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c0071e2:	681b      	ldr	r3, [r3, #0]
 c0071e4:	4a42      	ldr	r2, [pc, #264]	; (c0072f0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c0071e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c0071ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c0071ec:	f7fd fb6c 	bl	c0048c8 <HAL_GetTick>
 c0071f0:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c0071f2:	e00f      	b.n	c007214 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c0071f4:	f7fd fb68 	bl	c0048c8 <HAL_GetTick>
 c0071f8:	4602      	mov	r2, r0
 c0071fa:	693b      	ldr	r3, [r7, #16]
 c0071fc:	1ad3      	subs	r3, r2, r3
 c0071fe:	2b02      	cmp	r3, #2
 c007200:	d908      	bls.n	c007214 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c007202:	4b3b      	ldr	r3, [pc, #236]	; (c0072f0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c007204:	681b      	ldr	r3, [r3, #0]
 c007206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00720a:	2b00      	cmp	r3, #0
 c00720c:	d109      	bne.n	c007222 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 c00720e:	2303      	movs	r3, #3
 c007210:	77fb      	strb	r3, [r7, #31]
        }
        break;
 c007212:	e006      	b.n	c007222 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c007214:	4b36      	ldr	r3, [pc, #216]	; (c0072f0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c007216:	681b      	ldr	r3, [r3, #0]
 c007218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00721c:	2b00      	cmp	r3, #0
 c00721e:	d0e9      	beq.n	c0071f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
 c007220:	e000      	b.n	c007224 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 c007222:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 c007224:	7ffb      	ldrb	r3, [r7, #31]
 c007226:	2b00      	cmp	r3, #0
 c007228:	d164      	bne.n	c0072f4 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c00722a:	4b30      	ldr	r3, [pc, #192]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00722c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c007230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c007234:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 c007236:	69bb      	ldr	r3, [r7, #24]
 c007238:	2b00      	cmp	r3, #0
 c00723a:	d01f      	beq.n	c00727c <HAL_RCCEx_PeriphCLKConfig+0x210>
 c00723c:	687b      	ldr	r3, [r7, #4]
 c00723e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c007242:	69ba      	ldr	r2, [r7, #24]
 c007244:	429a      	cmp	r2, r3
 c007246:	d019      	beq.n	c00727c <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c007248:	4b28      	ldr	r3, [pc, #160]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00724a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00724e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c007252:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c007254:	4b25      	ldr	r3, [pc, #148]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00725a:	4a24      	ldr	r2, [pc, #144]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00725c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c007260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 c007264:	4b21      	ldr	r3, [pc, #132]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00726a:	4a20      	ldr	r2, [pc, #128]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00726c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c007270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c007274:	4a1d      	ldr	r2, [pc, #116]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007276:	69bb      	ldr	r3, [r7, #24]
 c007278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c00727c:	69bb      	ldr	r3, [r7, #24]
 c00727e:	f003 0301 	and.w	r3, r3, #1
 c007282:	2b00      	cmp	r3, #0
 c007284:	d01f      	beq.n	c0072c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c007286:	f7fd fb1f 	bl	c0048c8 <HAL_GetTick>
 c00728a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00728c:	e012      	b.n	c0072b4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00728e:	f7fd fb1b 	bl	c0048c8 <HAL_GetTick>
 c007292:	4602      	mov	r2, r0
 c007294:	693b      	ldr	r3, [r7, #16]
 c007296:	1ad3      	subs	r3, r2, r3
 c007298:	f241 3288 	movw	r2, #5000	; 0x1388
 c00729c:	4293      	cmp	r3, r2
 c00729e:	d909      	bls.n	c0072b4 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0072a0:	4b12      	ldr	r3, [pc, #72]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0072a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0072a6:	f003 0302 	and.w	r3, r3, #2
 c0072aa:	2b00      	cmp	r3, #0
 c0072ac:	d10a      	bne.n	c0072c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 c0072ae:	2303      	movs	r3, #3
 c0072b0:	77fb      	strb	r3, [r7, #31]
            }
            break;
 c0072b2:	e007      	b.n	c0072c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0072b4:	4b0d      	ldr	r3, [pc, #52]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0072b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0072ba:	f003 0302 	and.w	r3, r3, #2
 c0072be:	2b00      	cmp	r3, #0
 c0072c0:	d0e5      	beq.n	c00728e <HAL_RCCEx_PeriphCLKConfig+0x222>
 c0072c2:	e000      	b.n	c0072c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 c0072c4:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 c0072c6:	7ffb      	ldrb	r3, [r7, #31]
 c0072c8:	2b00      	cmp	r3, #0
 c0072ca:	d10c      	bne.n	c0072e6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 c0072cc:	4b07      	ldr	r3, [pc, #28]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0072ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0072d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c0072d6:	687b      	ldr	r3, [r7, #4]
 c0072d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0072dc:	4903      	ldr	r1, [pc, #12]	; (c0072ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0072de:	4313      	orrs	r3, r2
 c0072e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 c0072e4:	e008      	b.n	c0072f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c0072e6:	7ffb      	ldrb	r3, [r7, #31]
 c0072e8:	77bb      	strb	r3, [r7, #30]
 c0072ea:	e005      	b.n	c0072f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 c0072ec:	50021000 	.word	0x50021000
 c0072f0:	50007000 	.word	0x50007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0072f4:	7ffb      	ldrb	r3, [r7, #31]
 c0072f6:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c0072f8:	7dfb      	ldrb	r3, [r7, #23]
 c0072fa:	2b01      	cmp	r3, #1
 c0072fc:	d105      	bne.n	c00730a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c0072fe:	4b9c      	ldr	r3, [pc, #624]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c007302:	4a9b      	ldr	r2, [pc, #620]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c007308:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c00730a:	687b      	ldr	r3, [r7, #4]
 c00730c:	681b      	ldr	r3, [r3, #0]
 c00730e:	f003 0301 	and.w	r3, r3, #1
 c007312:	2b00      	cmp	r3, #0
 c007314:	d00a      	beq.n	c00732c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 c007316:	4b96      	ldr	r3, [pc, #600]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00731c:	f023 0203 	bic.w	r2, r3, #3
 c007320:	687b      	ldr	r3, [r7, #4]
 c007322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c007324:	4992      	ldr	r1, [pc, #584]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007326:	4313      	orrs	r3, r2
 c007328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c00732c:	687b      	ldr	r3, [r7, #4]
 c00732e:	681b      	ldr	r3, [r3, #0]
 c007330:	f003 0302 	and.w	r3, r3, #2
 c007334:	2b00      	cmp	r3, #0
 c007336:	d00a      	beq.n	c00734e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 c007338:	4b8d      	ldr	r3, [pc, #564]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00733a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00733e:	f023 020c 	bic.w	r2, r3, #12
 c007342:	687b      	ldr	r3, [r7, #4]
 c007344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c007346:	498a      	ldr	r1, [pc, #552]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007348:	4313      	orrs	r3, r2
 c00734a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c00734e:	687b      	ldr	r3, [r7, #4]
 c007350:	681b      	ldr	r3, [r3, #0]
 c007352:	f003 0304 	and.w	r3, r3, #4
 c007356:	2b00      	cmp	r3, #0
 c007358:	d00a      	beq.n	c007370 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 c00735a:	4b85      	ldr	r3, [pc, #532]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00735c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007360:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 c007364:	687b      	ldr	r3, [r7, #4]
 c007366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c007368:	4981      	ldr	r1, [pc, #516]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00736a:	4313      	orrs	r3, r2
 c00736c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c007370:	687b      	ldr	r3, [r7, #4]
 c007372:	681b      	ldr	r3, [r3, #0]
 c007374:	f003 0308 	and.w	r3, r3, #8
 c007378:	2b00      	cmp	r3, #0
 c00737a:	d00a      	beq.n	c007392 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 c00737c:	4b7c      	ldr	r3, [pc, #496]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00737e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007382:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 c007386:	687b      	ldr	r3, [r7, #4]
 c007388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c00738a:	4979      	ldr	r1, [pc, #484]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00738c:	4313      	orrs	r3, r2
 c00738e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c007392:	687b      	ldr	r3, [r7, #4]
 c007394:	681b      	ldr	r3, [r3, #0]
 c007396:	f003 0310 	and.w	r3, r3, #16
 c00739a:	2b00      	cmp	r3, #0
 c00739c:	d00a      	beq.n	c0073b4 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 c00739e:	4b74      	ldr	r3, [pc, #464]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0073a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0073a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c0073a8:	687b      	ldr	r3, [r7, #4]
 c0073aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0073ac:	4970      	ldr	r1, [pc, #448]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0073ae:	4313      	orrs	r3, r2
 c0073b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c0073b4:	687b      	ldr	r3, [r7, #4]
 c0073b6:	681b      	ldr	r3, [r3, #0]
 c0073b8:	f003 0320 	and.w	r3, r3, #32
 c0073bc:	2b00      	cmp	r3, #0
 c0073be:	d00a      	beq.n	c0073d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 c0073c0:	4b6b      	ldr	r3, [pc, #428]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0073c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0073c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 c0073ca:	687b      	ldr	r3, [r7, #4]
 c0073cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0073ce:	4968      	ldr	r1, [pc, #416]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0073d0:	4313      	orrs	r3, r2
 c0073d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c0073d6:	687b      	ldr	r3, [r7, #4]
 c0073d8:	681b      	ldr	r3, [r3, #0]
 c0073da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c0073de:	2b00      	cmp	r3, #0
 c0073e0:	d00a      	beq.n	c0073f8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 c0073e2:	4b63      	ldr	r3, [pc, #396]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0073e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0073e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 c0073ec:	687b      	ldr	r3, [r7, #4]
 c0073ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0073f0:	495f      	ldr	r1, [pc, #380]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0073f2:	4313      	orrs	r3, r2
 c0073f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c0073f8:	687b      	ldr	r3, [r7, #4]
 c0073fa:	681b      	ldr	r3, [r3, #0]
 c0073fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c007400:	2b00      	cmp	r3, #0
 c007402:	d00a      	beq.n	c00741a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 c007404:	4b5a      	ldr	r3, [pc, #360]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00740a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c00740e:	687b      	ldr	r3, [r7, #4]
 c007410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c007412:	4957      	ldr	r1, [pc, #348]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007414:	4313      	orrs	r3, r2
 c007416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 c00741a:	687b      	ldr	r3, [r7, #4]
 c00741c:	681b      	ldr	r3, [r3, #0]
 c00741e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c007422:	2b00      	cmp	r3, #0
 c007424:	d00a      	beq.n	c00743c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 c007426:	4b52      	ldr	r3, [pc, #328]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00742c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 c007430:	687b      	ldr	r3, [r7, #4]
 c007432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c007434:	494e      	ldr	r1, [pc, #312]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007436:	4313      	orrs	r3, r2
 c007438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 c00743c:	687b      	ldr	r3, [r7, #4]
 c00743e:	681b      	ldr	r3, [r3, #0]
 c007440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c007444:	2b00      	cmp	r3, #0
 c007446:	d031      	beq.n	c0074ac <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 c007448:	687b      	ldr	r3, [r7, #4]
 c00744a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c00744c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c007450:	d00e      	beq.n	c007470 <HAL_RCCEx_PeriphCLKConfig+0x404>
 c007452:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c007456:	d814      	bhi.n	c007482 <HAL_RCCEx_PeriphCLKConfig+0x416>
 c007458:	2b00      	cmp	r3, #0
 c00745a:	d015      	beq.n	c007488 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c00745c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c007460:	d10f      	bne.n	c007482 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c007462:	4b43      	ldr	r3, [pc, #268]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007464:	68db      	ldr	r3, [r3, #12]
 c007466:	4a42      	ldr	r2, [pc, #264]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007468:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c00746c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c00746e:	e00c      	b.n	c00748a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c007470:	687b      	ldr	r3, [r7, #4]
 c007472:	3304      	adds	r3, #4
 c007474:	2100      	movs	r1, #0
 c007476:	4618      	mov	r0, r3
 c007478:	f000 f97c 	bl	c007774 <RCCEx_PLLSAI1_Config>
 c00747c:	4603      	mov	r3, r0
 c00747e:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c007480:	e003      	b.n	c00748a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 c007482:	2301      	movs	r3, #1
 c007484:	77fb      	strb	r3, [r7, #31]
        break;
 c007486:	e000      	b.n	c00748a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 c007488:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00748a:	7ffb      	ldrb	r3, [r7, #31]
 c00748c:	2b00      	cmp	r3, #0
 c00748e:	d10b      	bne.n	c0074a8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 c007490:	4b37      	ldr	r3, [pc, #220]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007496:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 c00749a:	687b      	ldr	r3, [r7, #4]
 c00749c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c00749e:	4934      	ldr	r1, [pc, #208]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0074a0:	4313      	orrs	r3, r2
 c0074a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c0074a6:	e001      	b.n	c0074ac <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0074a8:	7ffb      	ldrb	r3, [r7, #31]
 c0074aa:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c0074ac:	687b      	ldr	r3, [r7, #4]
 c0074ae:	681b      	ldr	r3, [r3, #0]
 c0074b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0074b4:	2b00      	cmp	r3, #0
 c0074b6:	d00a      	beq.n	c0074ce <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 c0074b8:	4b2d      	ldr	r3, [pc, #180]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0074ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0074be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 c0074c2:	687b      	ldr	r3, [r7, #4]
 c0074c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0074c6:	492a      	ldr	r1, [pc, #168]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0074c8:	4313      	orrs	r3, r2
 c0074ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c0074ce:	687b      	ldr	r3, [r7, #4]
 c0074d0:	681b      	ldr	r3, [r3, #0]
 c0074d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0074d6:	2b00      	cmp	r3, #0
 c0074d8:	d00a      	beq.n	c0074f0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 c0074da:	4b25      	ldr	r3, [pc, #148]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0074dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0074e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 c0074e4:	687b      	ldr	r3, [r7, #4]
 c0074e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c0074e8:	4921      	ldr	r1, [pc, #132]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0074ea:	4313      	orrs	r3, r2
 c0074ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c0074f0:	687b      	ldr	r3, [r7, #4]
 c0074f2:	681b      	ldr	r3, [r3, #0]
 c0074f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0074f8:	2b00      	cmp	r3, #0
 c0074fa:	d00a      	beq.n	c007512 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 c0074fc:	4b1c      	ldr	r3, [pc, #112]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0074fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007502:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 c007506:	687b      	ldr	r3, [r7, #4]
 c007508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c00750a:	4919      	ldr	r1, [pc, #100]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00750c:	4313      	orrs	r3, r2
 c00750e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c007512:	687b      	ldr	r3, [r7, #4]
 c007514:	681b      	ldr	r3, [r3, #0]
 c007516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c00751a:	2b00      	cmp	r3, #0
 c00751c:	d00a      	beq.n	c007534 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 c00751e:	4b14      	ldr	r3, [pc, #80]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007520:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c007524:	f023 0203 	bic.w	r2, r3, #3
 c007528:	687b      	ldr	r3, [r7, #4]
 c00752a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00752c:	4910      	ldr	r1, [pc, #64]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00752e:	4313      	orrs	r3, r2
 c007530:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 c007534:	687b      	ldr	r3, [r7, #4]
 c007536:	681b      	ldr	r3, [r3, #0]
 c007538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c00753c:	2b00      	cmp	r3, #0
 c00753e:	d02b      	beq.n	c007598 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c007540:	4b0b      	ldr	r3, [pc, #44]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007546:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c00754a:	687b      	ldr	r3, [r7, #4]
 c00754c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c00754e:	4908      	ldr	r1, [pc, #32]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007550:	4313      	orrs	r3, r2
 c007552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c007556:	687b      	ldr	r3, [r7, #4]
 c007558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c00755a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c00755e:	d109      	bne.n	c007574 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c007560:	4b03      	ldr	r3, [pc, #12]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007562:	68db      	ldr	r3, [r3, #12]
 c007564:	4a02      	ldr	r2, [pc, #8]	; (c007570 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c00756a:	60d3      	str	r3, [r2, #12]
 c00756c:	e014      	b.n	c007598 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 c00756e:	bf00      	nop
 c007570:	50021000 	.word	0x50021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 c007574:	687b      	ldr	r3, [r7, #4]
 c007576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c007578:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c00757c:	d10c      	bne.n	c007598 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c00757e:	687b      	ldr	r3, [r7, #4]
 c007580:	3304      	adds	r3, #4
 c007582:	2101      	movs	r1, #1
 c007584:	4618      	mov	r0, r3
 c007586:	f000 f8f5 	bl	c007774 <RCCEx_PLLSAI1_Config>
 c00758a:	4603      	mov	r3, r0
 c00758c:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 c00758e:	7ffb      	ldrb	r3, [r7, #31]
 c007590:	2b00      	cmp	r3, #0
 c007592:	d001      	beq.n	c007598 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 c007594:	7ffb      	ldrb	r3, [r7, #31]
 c007596:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 c007598:	687b      	ldr	r3, [r7, #4]
 c00759a:	681b      	ldr	r3, [r3, #0]
 c00759c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c0075a0:	2b00      	cmp	r3, #0
 c0075a2:	d04a      	beq.n	c00763a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c0075a4:	687b      	ldr	r3, [r7, #4]
 c0075a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c0075a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c0075ac:	d108      	bne.n	c0075c0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 c0075ae:	4b70      	ldr	r3, [pc, #448]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0075b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0075b4:	4a6e      	ldr	r2, [pc, #440]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0075b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c0075ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 c0075be:	e012      	b.n	c0075e6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 c0075c0:	4b6b      	ldr	r3, [pc, #428]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0075c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0075c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c0075ca:	687b      	ldr	r3, [r7, #4]
 c0075cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c0075ce:	4968      	ldr	r1, [pc, #416]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0075d0:	4313      	orrs	r3, r2
 c0075d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c0075d6:	4b66      	ldr	r3, [pc, #408]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0075d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0075dc:	4a64      	ldr	r2, [pc, #400]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0075de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 c0075e2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c0075e6:	687b      	ldr	r3, [r7, #4]
 c0075e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c0075ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c0075ee:	d10d      	bne.n	c00760c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c0075f0:	687b      	ldr	r3, [r7, #4]
 c0075f2:	3304      	adds	r3, #4
 c0075f4:	2101      	movs	r1, #1
 c0075f6:	4618      	mov	r0, r3
 c0075f8:	f000 f8bc 	bl	c007774 <RCCEx_PLLSAI1_Config>
 c0075fc:	4603      	mov	r3, r0
 c0075fe:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c007600:	7ffb      	ldrb	r3, [r7, #31]
 c007602:	2b00      	cmp	r3, #0
 c007604:	d019      	beq.n	c00763a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 c007606:	7ffb      	ldrb	r3, [r7, #31]
 c007608:	77bb      	strb	r3, [r7, #30]
 c00760a:	e016      	b.n	c00763a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 c00760c:	687b      	ldr	r3, [r7, #4]
 c00760e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c007610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c007614:	d106      	bne.n	c007624 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c007616:	4b56      	ldr	r3, [pc, #344]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007618:	68db      	ldr	r3, [r3, #12]
 c00761a:	4a55      	ldr	r2, [pc, #340]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00761c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c007620:	60d3      	str	r3, [r2, #12]
 c007622:	e00a      	b.n	c00763a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 c007624:	687b      	ldr	r3, [r7, #4]
 c007626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c007628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c00762c:	d105      	bne.n	c00763a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c00762e:	4b50      	ldr	r3, [pc, #320]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007630:	68db      	ldr	r3, [r3, #12]
 c007632:	4a4f      	ldr	r2, [pc, #316]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c007638:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 c00763a:	687b      	ldr	r3, [r7, #4]
 c00763c:	681b      	ldr	r3, [r3, #0]
 c00763e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c007642:	2b00      	cmp	r3, #0
 c007644:	d028      	beq.n	c007698 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c007646:	4b4a      	ldr	r3, [pc, #296]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00764c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c007650:	687b      	ldr	r3, [r7, #4]
 c007652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c007654:	4946      	ldr	r1, [pc, #280]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007656:	4313      	orrs	r3, r2
 c007658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c00765c:	687b      	ldr	r3, [r7, #4]
 c00765e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c007660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c007664:	d106      	bne.n	c007674 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c007666:	4b42      	ldr	r3, [pc, #264]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007668:	68db      	ldr	r3, [r3, #12]
 c00766a:	4a41      	ldr	r2, [pc, #260]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00766c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c007670:	60d3      	str	r3, [r2, #12]
 c007672:	e011      	b.n	c007698 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 c007674:	687b      	ldr	r3, [r7, #4]
 c007676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c007678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c00767c:	d10c      	bne.n	c007698 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c00767e:	687b      	ldr	r3, [r7, #4]
 c007680:	3304      	adds	r3, #4
 c007682:	2101      	movs	r1, #1
 c007684:	4618      	mov	r0, r3
 c007686:	f000 f875 	bl	c007774 <RCCEx_PLLSAI1_Config>
 c00768a:	4603      	mov	r3, r0
 c00768c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c00768e:	7ffb      	ldrb	r3, [r7, #31]
 c007690:	2b00      	cmp	r3, #0
 c007692:	d001      	beq.n	c007698 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 c007694:	7ffb      	ldrb	r3, [r7, #31]
 c007696:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 c007698:	687b      	ldr	r3, [r7, #4]
 c00769a:	681b      	ldr	r3, [r3, #0]
 c00769c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c0076a0:	2b00      	cmp	r3, #0
 c0076a2:	d01e      	beq.n	c0076e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c0076a4:	4b32      	ldr	r3, [pc, #200]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0076a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0076aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 c0076ae:	687b      	ldr	r3, [r7, #4]
 c0076b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0076b4:	492e      	ldr	r1, [pc, #184]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0076b6:	4313      	orrs	r3, r2
 c0076b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c0076bc:	687b      	ldr	r3, [r7, #4]
 c0076be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0076c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c0076c6:	d10c      	bne.n	c0076e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 c0076c8:	687b      	ldr	r3, [r7, #4]
 c0076ca:	3304      	adds	r3, #4
 c0076cc:	2102      	movs	r1, #2
 c0076ce:	4618      	mov	r0, r3
 c0076d0:	f000 f850 	bl	c007774 <RCCEx_PLLSAI1_Config>
 c0076d4:	4603      	mov	r3, r0
 c0076d6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c0076d8:	7ffb      	ldrb	r3, [r7, #31]
 c0076da:	2b00      	cmp	r3, #0
 c0076dc:	d001      	beq.n	c0076e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 c0076de:	7ffb      	ldrb	r3, [r7, #31]
 c0076e0:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 c0076e2:	687b      	ldr	r3, [r7, #4]
 c0076e4:	681b      	ldr	r3, [r3, #0]
 c0076e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0076ea:	2b00      	cmp	r3, #0
 c0076ec:	d00b      	beq.n	c007706 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 c0076ee:	4b20      	ldr	r3, [pc, #128]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0076f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0076f4:	f023 0204 	bic.w	r2, r3, #4
 c0076f8:	687b      	ldr	r3, [r7, #4]
 c0076fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c0076fe:	491c      	ldr	r1, [pc, #112]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007700:	4313      	orrs	r3, r2
 c007702:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 c007706:	687b      	ldr	r3, [r7, #4]
 c007708:	681b      	ldr	r3, [r3, #0]
 c00770a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c00770e:	2b00      	cmp	r3, #0
 c007710:	d00b      	beq.n	c00772a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 c007712:	4b17      	ldr	r3, [pc, #92]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007714:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c007718:	f023 0218 	bic.w	r2, r3, #24
 c00771c:	687b      	ldr	r3, [r7, #4]
 c00771e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007722:	4913      	ldr	r1, [pc, #76]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007724:	4313      	orrs	r3, r2
 c007726:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c00772a:	687b      	ldr	r3, [r7, #4]
 c00772c:	681b      	ldr	r3, [r3, #0]
 c00772e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c007732:	2b00      	cmp	r3, #0
 c007734:	d017      	beq.n	c007766 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c007736:	4b0e      	ldr	r3, [pc, #56]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007738:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c00773c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c007740:	687b      	ldr	r3, [r7, #4]
 c007742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c007746:	490a      	ldr	r1, [pc, #40]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007748:	4313      	orrs	r3, r2
 c00774a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c00774e:	687b      	ldr	r3, [r7, #4]
 c007750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c007754:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c007758:	d105      	bne.n	c007766 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c00775a:	4b05      	ldr	r3, [pc, #20]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00775c:	68db      	ldr	r3, [r3, #12]
 c00775e:	4a04      	ldr	r2, [pc, #16]	; (c007770 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c007764:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 c007766:	7fbb      	ldrb	r3, [r7, #30]
}
 c007768:	4618      	mov	r0, r3
 c00776a:	3720      	adds	r7, #32
 c00776c:	46bd      	mov	sp, r7
 c00776e:	bd80      	pop	{r7, pc}
 c007770:	50021000 	.word	0x50021000

0c007774 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 c007774:	b580      	push	{r7, lr}
 c007776:	b084      	sub	sp, #16
 c007778:	af00      	add	r7, sp, #0
 c00777a:	6078      	str	r0, [r7, #4]
 c00777c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c00777e:	2300      	movs	r3, #0
 c007780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 c007782:	687b      	ldr	r3, [r7, #4]
 c007784:	681b      	ldr	r3, [r3, #0]
 c007786:	2b03      	cmp	r3, #3
 c007788:	d018      	beq.n	c0077bc <RCCEx_PLLSAI1_Config+0x48>
 c00778a:	2b03      	cmp	r3, #3
 c00778c:	d81f      	bhi.n	c0077ce <RCCEx_PLLSAI1_Config+0x5a>
 c00778e:	2b01      	cmp	r3, #1
 c007790:	d002      	beq.n	c007798 <RCCEx_PLLSAI1_Config+0x24>
 c007792:	2b02      	cmp	r3, #2
 c007794:	d009      	beq.n	c0077aa <RCCEx_PLLSAI1_Config+0x36>
 c007796:	e01a      	b.n	c0077ce <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c007798:	4b65      	ldr	r3, [pc, #404]	; (c007930 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00779a:	681b      	ldr	r3, [r3, #0]
 c00779c:	f003 0302 	and.w	r3, r3, #2
 c0077a0:	2b00      	cmp	r3, #0
 c0077a2:	d117      	bne.n	c0077d4 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 c0077a4:	2301      	movs	r3, #1
 c0077a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0077a8:	e014      	b.n	c0077d4 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c0077aa:	4b61      	ldr	r3, [pc, #388]	; (c007930 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0077ac:	681b      	ldr	r3, [r3, #0]
 c0077ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0077b2:	2b00      	cmp	r3, #0
 c0077b4:	d110      	bne.n	c0077d8 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 c0077b6:	2301      	movs	r3, #1
 c0077b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0077ba:	e00d      	b.n	c0077d8 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c0077bc:	4b5c      	ldr	r3, [pc, #368]	; (c007930 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0077be:	681b      	ldr	r3, [r3, #0]
 c0077c0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c0077c4:	2b00      	cmp	r3, #0
 c0077c6:	d109      	bne.n	c0077dc <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 c0077c8:	2301      	movs	r3, #1
 c0077ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0077cc:	e006      	b.n	c0077dc <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 c0077ce:	2301      	movs	r3, #1
 c0077d0:	73fb      	strb	r3, [r7, #15]
      break;
 c0077d2:	e004      	b.n	c0077de <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c0077d4:	bf00      	nop
 c0077d6:	e002      	b.n	c0077de <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c0077d8:	bf00      	nop
 c0077da:	e000      	b.n	c0077de <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c0077dc:	bf00      	nop
  }

  if (status == HAL_OK)
 c0077de:	7bfb      	ldrb	r3, [r7, #15]
 c0077e0:	2b00      	cmp	r3, #0
 c0077e2:	f040 809f 	bne.w	c007924 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 c0077e6:	4b52      	ldr	r3, [pc, #328]	; (c007930 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0077e8:	681b      	ldr	r3, [r3, #0]
 c0077ea:	4a51      	ldr	r2, [pc, #324]	; (c007930 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0077ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c0077f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c0077f2:	f7fd f869 	bl	c0048c8 <HAL_GetTick>
 c0077f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c0077f8:	e00f      	b.n	c00781a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c0077fa:	f7fd f865 	bl	c0048c8 <HAL_GetTick>
 c0077fe:	4602      	mov	r2, r0
 c007800:	68bb      	ldr	r3, [r7, #8]
 c007802:	1ad3      	subs	r3, r2, r3
 c007804:	2b02      	cmp	r3, #2
 c007806:	d908      	bls.n	c00781a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c007808:	4b49      	ldr	r3, [pc, #292]	; (c007930 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00780a:	681b      	ldr	r3, [r3, #0]
 c00780c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c007810:	2b00      	cmp	r3, #0
 c007812:	d009      	beq.n	c007828 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 c007814:	2303      	movs	r3, #3
 c007816:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c007818:	e006      	b.n	c007828 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c00781a:	4b45      	ldr	r3, [pc, #276]	; (c007930 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00781c:	681b      	ldr	r3, [r3, #0]
 c00781e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c007822:	2b00      	cmp	r3, #0
 c007824:	d1e9      	bne.n	c0077fa <RCCEx_PLLSAI1_Config+0x86>
 c007826:	e000      	b.n	c00782a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 c007828:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c00782a:	7bfb      	ldrb	r3, [r7, #15]
 c00782c:	2b00      	cmp	r3, #0
 c00782e:	d179      	bne.n	c007924 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c007830:	683b      	ldr	r3, [r7, #0]
 c007832:	2b00      	cmp	r3, #0
 c007834:	d116      	bne.n	c007864 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c007836:	4b3e      	ldr	r3, [pc, #248]	; (c007930 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007838:	691a      	ldr	r2, [r3, #16]
 c00783a:	4b3e      	ldr	r3, [pc, #248]	; (c007934 <RCCEx_PLLSAI1_Config+0x1c0>)
 c00783c:	4013      	ands	r3, r2
 c00783e:	687a      	ldr	r2, [r7, #4]
 c007840:	6892      	ldr	r2, [r2, #8]
 c007842:	0211      	lsls	r1, r2, #8
 c007844:	687a      	ldr	r2, [r7, #4]
 c007846:	68d2      	ldr	r2, [r2, #12]
 c007848:	06d2      	lsls	r2, r2, #27
 c00784a:	4311      	orrs	r1, r2
 c00784c:	687a      	ldr	r2, [r7, #4]
 c00784e:	6852      	ldr	r2, [r2, #4]
 c007850:	3a01      	subs	r2, #1
 c007852:	0112      	lsls	r2, r2, #4
 c007854:	4311      	orrs	r1, r2
 c007856:	687a      	ldr	r2, [r7, #4]
 c007858:	6812      	ldr	r2, [r2, #0]
 c00785a:	430a      	orrs	r2, r1
 c00785c:	4934      	ldr	r1, [pc, #208]	; (c007930 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00785e:	4313      	orrs	r3, r2
 c007860:	610b      	str	r3, [r1, #16]
 c007862:	e033      	b.n	c0078cc <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 c007864:	683b      	ldr	r3, [r7, #0]
 c007866:	2b01      	cmp	r3, #1
 c007868:	d118      	bne.n	c00789c <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c00786a:	4b31      	ldr	r3, [pc, #196]	; (c007930 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00786c:	691a      	ldr	r2, [r3, #16]
 c00786e:	4b32      	ldr	r3, [pc, #200]	; (c007938 <RCCEx_PLLSAI1_Config+0x1c4>)
 c007870:	4013      	ands	r3, r2
 c007872:	687a      	ldr	r2, [r7, #4]
 c007874:	6892      	ldr	r2, [r2, #8]
 c007876:	0211      	lsls	r1, r2, #8
 c007878:	687a      	ldr	r2, [r7, #4]
 c00787a:	6912      	ldr	r2, [r2, #16]
 c00787c:	0852      	lsrs	r2, r2, #1
 c00787e:	3a01      	subs	r2, #1
 c007880:	0552      	lsls	r2, r2, #21
 c007882:	4311      	orrs	r1, r2
 c007884:	687a      	ldr	r2, [r7, #4]
 c007886:	6852      	ldr	r2, [r2, #4]
 c007888:	3a01      	subs	r2, #1
 c00788a:	0112      	lsls	r2, r2, #4
 c00788c:	4311      	orrs	r1, r2
 c00788e:	687a      	ldr	r2, [r7, #4]
 c007890:	6812      	ldr	r2, [r2, #0]
 c007892:	430a      	orrs	r2, r1
 c007894:	4926      	ldr	r1, [pc, #152]	; (c007930 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007896:	4313      	orrs	r3, r2
 c007898:	610b      	str	r3, [r1, #16]
 c00789a:	e017      	b.n	c0078cc <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c00789c:	4b24      	ldr	r3, [pc, #144]	; (c007930 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00789e:	691a      	ldr	r2, [r3, #16]
 c0078a0:	4b26      	ldr	r3, [pc, #152]	; (c00793c <RCCEx_PLLSAI1_Config+0x1c8>)
 c0078a2:	4013      	ands	r3, r2
 c0078a4:	687a      	ldr	r2, [r7, #4]
 c0078a6:	6892      	ldr	r2, [r2, #8]
 c0078a8:	0211      	lsls	r1, r2, #8
 c0078aa:	687a      	ldr	r2, [r7, #4]
 c0078ac:	6952      	ldr	r2, [r2, #20]
 c0078ae:	0852      	lsrs	r2, r2, #1
 c0078b0:	3a01      	subs	r2, #1
 c0078b2:	0652      	lsls	r2, r2, #25
 c0078b4:	4311      	orrs	r1, r2
 c0078b6:	687a      	ldr	r2, [r7, #4]
 c0078b8:	6852      	ldr	r2, [r2, #4]
 c0078ba:	3a01      	subs	r2, #1
 c0078bc:	0112      	lsls	r2, r2, #4
 c0078be:	4311      	orrs	r1, r2
 c0078c0:	687a      	ldr	r2, [r7, #4]
 c0078c2:	6812      	ldr	r2, [r2, #0]
 c0078c4:	430a      	orrs	r2, r1
 c0078c6:	491a      	ldr	r1, [pc, #104]	; (c007930 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0078c8:	4313      	orrs	r3, r2
 c0078ca:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 c0078cc:	4b18      	ldr	r3, [pc, #96]	; (c007930 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0078ce:	681b      	ldr	r3, [r3, #0]
 c0078d0:	4a17      	ldr	r2, [pc, #92]	; (c007930 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0078d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c0078d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0078d8:	f7fc fff6 	bl	c0048c8 <HAL_GetTick>
 c0078dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c0078de:	e00f      	b.n	c007900 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c0078e0:	f7fc fff2 	bl	c0048c8 <HAL_GetTick>
 c0078e4:	4602      	mov	r2, r0
 c0078e6:	68bb      	ldr	r3, [r7, #8]
 c0078e8:	1ad3      	subs	r3, r2, r3
 c0078ea:	2b02      	cmp	r3, #2
 c0078ec:	d908      	bls.n	c007900 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c0078ee:	4b10      	ldr	r3, [pc, #64]	; (c007930 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0078f0:	681b      	ldr	r3, [r3, #0]
 c0078f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c0078f6:	2b00      	cmp	r3, #0
 c0078f8:	d109      	bne.n	c00790e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 c0078fa:	2303      	movs	r3, #3
 c0078fc:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c0078fe:	e006      	b.n	c00790e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c007900:	4b0b      	ldr	r3, [pc, #44]	; (c007930 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007902:	681b      	ldr	r3, [r3, #0]
 c007904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c007908:	2b00      	cmp	r3, #0
 c00790a:	d0e9      	beq.n	c0078e0 <RCCEx_PLLSAI1_Config+0x16c>
 c00790c:	e000      	b.n	c007910 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 c00790e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c007910:	7bfb      	ldrb	r3, [r7, #15]
 c007912:	2b00      	cmp	r3, #0
 c007914:	d106      	bne.n	c007924 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 c007916:	4b06      	ldr	r3, [pc, #24]	; (c007930 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007918:	691a      	ldr	r2, [r3, #16]
 c00791a:	687b      	ldr	r3, [r7, #4]
 c00791c:	699b      	ldr	r3, [r3, #24]
 c00791e:	4904      	ldr	r1, [pc, #16]	; (c007930 <RCCEx_PLLSAI1_Config+0x1bc>)
 c007920:	4313      	orrs	r3, r2
 c007922:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 c007924:	7bfb      	ldrb	r3, [r7, #15]
}
 c007926:	4618      	mov	r0, r3
 c007928:	3710      	adds	r7, #16
 c00792a:	46bd      	mov	sp, r7
 c00792c:	bd80      	pop	{r7, pc}
 c00792e:	bf00      	nop
 c007930:	50021000 	.word	0x50021000
 c007934:	07ff800c 	.word	0x07ff800c
 c007938:	ff9f800c 	.word	0xff9f800c
 c00793c:	f9ff800c 	.word	0xf9ff800c

0c007940 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 c007940:	b580      	push	{r7, lr}
 c007942:	b084      	sub	sp, #16
 c007944:	af00      	add	r7, sp, #0
 c007946:	6078      	str	r0, [r7, #4]
 c007948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c00794a:	2300      	movs	r3, #0
 c00794c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 c00794e:	687b      	ldr	r3, [r7, #4]
 c007950:	681b      	ldr	r3, [r3, #0]
 c007952:	2b03      	cmp	r3, #3
 c007954:	d018      	beq.n	c007988 <RCCEx_PLLSAI2_Config+0x48>
 c007956:	2b03      	cmp	r3, #3
 c007958:	d81f      	bhi.n	c00799a <RCCEx_PLLSAI2_Config+0x5a>
 c00795a:	2b01      	cmp	r3, #1
 c00795c:	d002      	beq.n	c007964 <RCCEx_PLLSAI2_Config+0x24>
 c00795e:	2b02      	cmp	r3, #2
 c007960:	d009      	beq.n	c007976 <RCCEx_PLLSAI2_Config+0x36>
 c007962:	e01a      	b.n	c00799a <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c007964:	4b4a      	ldr	r3, [pc, #296]	; (c007a90 <RCCEx_PLLSAI2_Config+0x150>)
 c007966:	681b      	ldr	r3, [r3, #0]
 c007968:	f003 0302 	and.w	r3, r3, #2
 c00796c:	2b00      	cmp	r3, #0
 c00796e:	d117      	bne.n	c0079a0 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 c007970:	2301      	movs	r3, #1
 c007972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007974:	e014      	b.n	c0079a0 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c007976:	4b46      	ldr	r3, [pc, #280]	; (c007a90 <RCCEx_PLLSAI2_Config+0x150>)
 c007978:	681b      	ldr	r3, [r3, #0]
 c00797a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00797e:	2b00      	cmp	r3, #0
 c007980:	d110      	bne.n	c0079a4 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 c007982:	2301      	movs	r3, #1
 c007984:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007986:	e00d      	b.n	c0079a4 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c007988:	4b41      	ldr	r3, [pc, #260]	; (c007a90 <RCCEx_PLLSAI2_Config+0x150>)
 c00798a:	681b      	ldr	r3, [r3, #0]
 c00798c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c007990:	2b00      	cmp	r3, #0
 c007992:	d109      	bne.n	c0079a8 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 c007994:	2301      	movs	r3, #1
 c007996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007998:	e006      	b.n	c0079a8 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 c00799a:	2301      	movs	r3, #1
 c00799c:	73fb      	strb	r3, [r7, #15]
      break;
 c00799e:	e004      	b.n	c0079aa <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c0079a0:	bf00      	nop
 c0079a2:	e002      	b.n	c0079aa <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c0079a4:	bf00      	nop
 c0079a6:	e000      	b.n	c0079aa <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c0079a8:	bf00      	nop
  }

  if (status == HAL_OK)
 c0079aa:	7bfb      	ldrb	r3, [r7, #15]
 c0079ac:	2b00      	cmp	r3, #0
 c0079ae:	d169      	bne.n	c007a84 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 c0079b0:	4b37      	ldr	r3, [pc, #220]	; (c007a90 <RCCEx_PLLSAI2_Config+0x150>)
 c0079b2:	681b      	ldr	r3, [r3, #0]
 c0079b4:	4a36      	ldr	r2, [pc, #216]	; (c007a90 <RCCEx_PLLSAI2_Config+0x150>)
 c0079b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c0079ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c0079bc:	f7fc ff84 	bl	c0048c8 <HAL_GetTick>
 c0079c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c0079c2:	e00f      	b.n	c0079e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c0079c4:	f7fc ff80 	bl	c0048c8 <HAL_GetTick>
 c0079c8:	4602      	mov	r2, r0
 c0079ca:	68bb      	ldr	r3, [r7, #8]
 c0079cc:	1ad3      	subs	r3, r2, r3
 c0079ce:	2b02      	cmp	r3, #2
 c0079d0:	d908      	bls.n	c0079e4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c0079d2:	4b2f      	ldr	r3, [pc, #188]	; (c007a90 <RCCEx_PLLSAI2_Config+0x150>)
 c0079d4:	681b      	ldr	r3, [r3, #0]
 c0079d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c0079da:	2b00      	cmp	r3, #0
 c0079dc:	d009      	beq.n	c0079f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 c0079de:	2303      	movs	r3, #3
 c0079e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c0079e2:	e006      	b.n	c0079f2 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c0079e4:	4b2a      	ldr	r3, [pc, #168]	; (c007a90 <RCCEx_PLLSAI2_Config+0x150>)
 c0079e6:	681b      	ldr	r3, [r3, #0]
 c0079e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c0079ec:	2b00      	cmp	r3, #0
 c0079ee:	d1e9      	bne.n	c0079c4 <RCCEx_PLLSAI2_Config+0x84>
 c0079f0:	e000      	b.n	c0079f4 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 c0079f2:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c0079f4:	7bfb      	ldrb	r3, [r7, #15]
 c0079f6:	2b00      	cmp	r3, #0
 c0079f8:	d144      	bne.n	c007a84 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c0079fa:	683b      	ldr	r3, [r7, #0]
 c0079fc:	2b00      	cmp	r3, #0
 c0079fe:	d115      	bne.n	c007a2c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 c007a00:	4b23      	ldr	r3, [pc, #140]	; (c007a90 <RCCEx_PLLSAI2_Config+0x150>)
 c007a02:	695a      	ldr	r2, [r3, #20]
 c007a04:	4b23      	ldr	r3, [pc, #140]	; (c007a94 <RCCEx_PLLSAI2_Config+0x154>)
 c007a06:	4013      	ands	r3, r2
 c007a08:	687a      	ldr	r2, [r7, #4]
 c007a0a:	6892      	ldr	r2, [r2, #8]
 c007a0c:	0211      	lsls	r1, r2, #8
 c007a0e:	687a      	ldr	r2, [r7, #4]
 c007a10:	68d2      	ldr	r2, [r2, #12]
 c007a12:	06d2      	lsls	r2, r2, #27
 c007a14:	4311      	orrs	r1, r2
 c007a16:	687a      	ldr	r2, [r7, #4]
 c007a18:	6852      	ldr	r2, [r2, #4]
 c007a1a:	3a01      	subs	r2, #1
 c007a1c:	0112      	lsls	r2, r2, #4
 c007a1e:	4311      	orrs	r1, r2
 c007a20:	687a      	ldr	r2, [r7, #4]
 c007a22:	6812      	ldr	r2, [r2, #0]
 c007a24:	430a      	orrs	r2, r1
 c007a26:	491a      	ldr	r1, [pc, #104]	; (c007a90 <RCCEx_PLLSAI2_Config+0x150>)
 c007a28:	4313      	orrs	r3, r2
 c007a2a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 c007a2c:	4b18      	ldr	r3, [pc, #96]	; (c007a90 <RCCEx_PLLSAI2_Config+0x150>)
 c007a2e:	681b      	ldr	r3, [r3, #0]
 c007a30:	4a17      	ldr	r2, [pc, #92]	; (c007a90 <RCCEx_PLLSAI2_Config+0x150>)
 c007a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c007a36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c007a38:	f7fc ff46 	bl	c0048c8 <HAL_GetTick>
 c007a3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c007a3e:	e00f      	b.n	c007a60 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c007a40:	f7fc ff42 	bl	c0048c8 <HAL_GetTick>
 c007a44:	4602      	mov	r2, r0
 c007a46:	68bb      	ldr	r3, [r7, #8]
 c007a48:	1ad3      	subs	r3, r2, r3
 c007a4a:	2b02      	cmp	r3, #2
 c007a4c:	d908      	bls.n	c007a60 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c007a4e:	4b10      	ldr	r3, [pc, #64]	; (c007a90 <RCCEx_PLLSAI2_Config+0x150>)
 c007a50:	681b      	ldr	r3, [r3, #0]
 c007a52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c007a56:	2b00      	cmp	r3, #0
 c007a58:	d109      	bne.n	c007a6e <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 c007a5a:	2303      	movs	r3, #3
 c007a5c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c007a5e:	e006      	b.n	c007a6e <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c007a60:	4b0b      	ldr	r3, [pc, #44]	; (c007a90 <RCCEx_PLLSAI2_Config+0x150>)
 c007a62:	681b      	ldr	r3, [r3, #0]
 c007a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c007a68:	2b00      	cmp	r3, #0
 c007a6a:	d0e9      	beq.n	c007a40 <RCCEx_PLLSAI2_Config+0x100>
 c007a6c:	e000      	b.n	c007a70 <RCCEx_PLLSAI2_Config+0x130>
          break;
 c007a6e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c007a70:	7bfb      	ldrb	r3, [r7, #15]
 c007a72:	2b00      	cmp	r3, #0
 c007a74:	d106      	bne.n	c007a84 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 c007a76:	4b06      	ldr	r3, [pc, #24]	; (c007a90 <RCCEx_PLLSAI2_Config+0x150>)
 c007a78:	695a      	ldr	r2, [r3, #20]
 c007a7a:	687b      	ldr	r3, [r7, #4]
 c007a7c:	691b      	ldr	r3, [r3, #16]
 c007a7e:	4904      	ldr	r1, [pc, #16]	; (c007a90 <RCCEx_PLLSAI2_Config+0x150>)
 c007a80:	4313      	orrs	r3, r2
 c007a82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 c007a84:	7bfb      	ldrb	r3, [r7, #15]
}
 c007a86:	4618      	mov	r0, r3
 c007a88:	3710      	adds	r7, #16
 c007a8a:	46bd      	mov	sp, r7
 c007a8c:	bd80      	pop	{r7, pc}
 c007a8e:	bf00      	nop
 c007a90:	50021000 	.word	0x50021000
 c007a94:	07ff800c 	.word	0x07ff800c

0c007a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 c007a98:	b580      	push	{r7, lr}
 c007a9a:	b082      	sub	sp, #8
 c007a9c:	af00      	add	r7, sp, #0
 c007a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 c007aa0:	687b      	ldr	r3, [r7, #4]
 c007aa2:	2b00      	cmp	r3, #0
 c007aa4:	d101      	bne.n	c007aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 c007aa6:	2301      	movs	r3, #1
 c007aa8:	e049      	b.n	c007b3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 c007aaa:	687b      	ldr	r3, [r7, #4]
 c007aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 c007ab0:	b2db      	uxtb	r3, r3
 c007ab2:	2b00      	cmp	r3, #0
 c007ab4:	d106      	bne.n	c007ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 c007ab6:	687b      	ldr	r3, [r7, #4]
 c007ab8:	2200      	movs	r2, #0
 c007aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 c007abe:	6878      	ldr	r0, [r7, #4]
 c007ac0:	f7fb f8b0 	bl	c002c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 c007ac4:	687b      	ldr	r3, [r7, #4]
 c007ac6:	2202      	movs	r2, #2
 c007ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 c007acc:	687b      	ldr	r3, [r7, #4]
 c007ace:	681a      	ldr	r2, [r3, #0]
 c007ad0:	687b      	ldr	r3, [r7, #4]
 c007ad2:	3304      	adds	r3, #4
 c007ad4:	4619      	mov	r1, r3
 c007ad6:	4610      	mov	r0, r2
 c007ad8:	f000 fa74 	bl	c007fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 c007adc:	687b      	ldr	r3, [r7, #4]
 c007ade:	2201      	movs	r2, #1
 c007ae0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 c007ae4:	687b      	ldr	r3, [r7, #4]
 c007ae6:	2201      	movs	r2, #1
 c007ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 c007aec:	687b      	ldr	r3, [r7, #4]
 c007aee:	2201      	movs	r2, #1
 c007af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 c007af4:	687b      	ldr	r3, [r7, #4]
 c007af6:	2201      	movs	r2, #1
 c007af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 c007afc:	687b      	ldr	r3, [r7, #4]
 c007afe:	2201      	movs	r2, #1
 c007b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 c007b04:	687b      	ldr	r3, [r7, #4]
 c007b06:	2201      	movs	r2, #1
 c007b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 c007b0c:	687b      	ldr	r3, [r7, #4]
 c007b0e:	2201      	movs	r2, #1
 c007b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 c007b14:	687b      	ldr	r3, [r7, #4]
 c007b16:	2201      	movs	r2, #1
 c007b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 c007b1c:	687b      	ldr	r3, [r7, #4]
 c007b1e:	2201      	movs	r2, #1
 c007b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 c007b24:	687b      	ldr	r3, [r7, #4]
 c007b26:	2201      	movs	r2, #1
 c007b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 c007b2c:	687b      	ldr	r3, [r7, #4]
 c007b2e:	2201      	movs	r2, #1
 c007b30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 c007b34:	687b      	ldr	r3, [r7, #4]
 c007b36:	2201      	movs	r2, #1
 c007b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 c007b3c:	2300      	movs	r3, #0
}
 c007b3e:	4618      	mov	r0, r3
 c007b40:	3708      	adds	r7, #8
 c007b42:	46bd      	mov	sp, r7
 c007b44:	bd80      	pop	{r7, pc}

0c007b46 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 c007b46:	b480      	push	{r7}
 c007b48:	b083      	sub	sp, #12
 c007b4a:	af00      	add	r7, sp, #0
 c007b4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 c007b4e:	687b      	ldr	r3, [r7, #4]
 c007b50:	681b      	ldr	r3, [r3, #0]
 c007b52:	6a1a      	ldr	r2, [r3, #32]
 c007b54:	f241 1311 	movw	r3, #4369	; 0x1111
 c007b58:	4013      	ands	r3, r2
 c007b5a:	2b00      	cmp	r3, #0
 c007b5c:	d10f      	bne.n	c007b7e <HAL_TIM_Base_Stop+0x38>
 c007b5e:	687b      	ldr	r3, [r7, #4]
 c007b60:	681b      	ldr	r3, [r3, #0]
 c007b62:	6a1a      	ldr	r2, [r3, #32]
 c007b64:	f240 4344 	movw	r3, #1092	; 0x444
 c007b68:	4013      	ands	r3, r2
 c007b6a:	2b00      	cmp	r3, #0
 c007b6c:	d107      	bne.n	c007b7e <HAL_TIM_Base_Stop+0x38>
 c007b6e:	687b      	ldr	r3, [r7, #4]
 c007b70:	681b      	ldr	r3, [r3, #0]
 c007b72:	681a      	ldr	r2, [r3, #0]
 c007b74:	687b      	ldr	r3, [r7, #4]
 c007b76:	681b      	ldr	r3, [r3, #0]
 c007b78:	f022 0201 	bic.w	r2, r2, #1
 c007b7c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 c007b7e:	687b      	ldr	r3, [r7, #4]
 c007b80:	2201      	movs	r2, #1
 c007b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 c007b86:	2300      	movs	r3, #0
}
 c007b88:	4618      	mov	r0, r3
 c007b8a:	370c      	adds	r7, #12
 c007b8c:	46bd      	mov	sp, r7
 c007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007b92:	4770      	bx	lr

0c007b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 c007b94:	b580      	push	{r7, lr}
 c007b96:	b082      	sub	sp, #8
 c007b98:	af00      	add	r7, sp, #0
 c007b9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 c007b9c:	687b      	ldr	r3, [r7, #4]
 c007b9e:	681b      	ldr	r3, [r3, #0]
 c007ba0:	691b      	ldr	r3, [r3, #16]
 c007ba2:	f003 0302 	and.w	r3, r3, #2
 c007ba6:	2b02      	cmp	r3, #2
 c007ba8:	d122      	bne.n	c007bf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 c007baa:	687b      	ldr	r3, [r7, #4]
 c007bac:	681b      	ldr	r3, [r3, #0]
 c007bae:	68db      	ldr	r3, [r3, #12]
 c007bb0:	f003 0302 	and.w	r3, r3, #2
 c007bb4:	2b02      	cmp	r3, #2
 c007bb6:	d11b      	bne.n	c007bf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 c007bb8:	687b      	ldr	r3, [r7, #4]
 c007bba:	681b      	ldr	r3, [r3, #0]
 c007bbc:	f06f 0202 	mvn.w	r2, #2
 c007bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 c007bc2:	687b      	ldr	r3, [r7, #4]
 c007bc4:	2201      	movs	r2, #1
 c007bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 c007bc8:	687b      	ldr	r3, [r7, #4]
 c007bca:	681b      	ldr	r3, [r3, #0]
 c007bcc:	699b      	ldr	r3, [r3, #24]
 c007bce:	f003 0303 	and.w	r3, r3, #3
 c007bd2:	2b00      	cmp	r3, #0
 c007bd4:	d003      	beq.n	c007bde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 c007bd6:	6878      	ldr	r0, [r7, #4]
 c007bd8:	f000 f9d5 	bl	c007f86 <HAL_TIM_IC_CaptureCallback>
 c007bdc:	e005      	b.n	c007bea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 c007bde:	6878      	ldr	r0, [r7, #4]
 c007be0:	f000 f9c7 	bl	c007f72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 c007be4:	6878      	ldr	r0, [r7, #4]
 c007be6:	f000 f9d8 	bl	c007f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c007bea:	687b      	ldr	r3, [r7, #4]
 c007bec:	2200      	movs	r2, #0
 c007bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 c007bf0:	687b      	ldr	r3, [r7, #4]
 c007bf2:	681b      	ldr	r3, [r3, #0]
 c007bf4:	691b      	ldr	r3, [r3, #16]
 c007bf6:	f003 0304 	and.w	r3, r3, #4
 c007bfa:	2b04      	cmp	r3, #4
 c007bfc:	d122      	bne.n	c007c44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 c007bfe:	687b      	ldr	r3, [r7, #4]
 c007c00:	681b      	ldr	r3, [r3, #0]
 c007c02:	68db      	ldr	r3, [r3, #12]
 c007c04:	f003 0304 	and.w	r3, r3, #4
 c007c08:	2b04      	cmp	r3, #4
 c007c0a:	d11b      	bne.n	c007c44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 c007c0c:	687b      	ldr	r3, [r7, #4]
 c007c0e:	681b      	ldr	r3, [r3, #0]
 c007c10:	f06f 0204 	mvn.w	r2, #4
 c007c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 c007c16:	687b      	ldr	r3, [r7, #4]
 c007c18:	2202      	movs	r2, #2
 c007c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 c007c1c:	687b      	ldr	r3, [r7, #4]
 c007c1e:	681b      	ldr	r3, [r3, #0]
 c007c20:	699b      	ldr	r3, [r3, #24]
 c007c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c007c26:	2b00      	cmp	r3, #0
 c007c28:	d003      	beq.n	c007c32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 c007c2a:	6878      	ldr	r0, [r7, #4]
 c007c2c:	f000 f9ab 	bl	c007f86 <HAL_TIM_IC_CaptureCallback>
 c007c30:	e005      	b.n	c007c3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 c007c32:	6878      	ldr	r0, [r7, #4]
 c007c34:	f000 f99d 	bl	c007f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 c007c38:	6878      	ldr	r0, [r7, #4]
 c007c3a:	f000 f9ae 	bl	c007f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c007c3e:	687b      	ldr	r3, [r7, #4]
 c007c40:	2200      	movs	r2, #0
 c007c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 c007c44:	687b      	ldr	r3, [r7, #4]
 c007c46:	681b      	ldr	r3, [r3, #0]
 c007c48:	691b      	ldr	r3, [r3, #16]
 c007c4a:	f003 0308 	and.w	r3, r3, #8
 c007c4e:	2b08      	cmp	r3, #8
 c007c50:	d122      	bne.n	c007c98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 c007c52:	687b      	ldr	r3, [r7, #4]
 c007c54:	681b      	ldr	r3, [r3, #0]
 c007c56:	68db      	ldr	r3, [r3, #12]
 c007c58:	f003 0308 	and.w	r3, r3, #8
 c007c5c:	2b08      	cmp	r3, #8
 c007c5e:	d11b      	bne.n	c007c98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 c007c60:	687b      	ldr	r3, [r7, #4]
 c007c62:	681b      	ldr	r3, [r3, #0]
 c007c64:	f06f 0208 	mvn.w	r2, #8
 c007c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 c007c6a:	687b      	ldr	r3, [r7, #4]
 c007c6c:	2204      	movs	r2, #4
 c007c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 c007c70:	687b      	ldr	r3, [r7, #4]
 c007c72:	681b      	ldr	r3, [r3, #0]
 c007c74:	69db      	ldr	r3, [r3, #28]
 c007c76:	f003 0303 	and.w	r3, r3, #3
 c007c7a:	2b00      	cmp	r3, #0
 c007c7c:	d003      	beq.n	c007c86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 c007c7e:	6878      	ldr	r0, [r7, #4]
 c007c80:	f000 f981 	bl	c007f86 <HAL_TIM_IC_CaptureCallback>
 c007c84:	e005      	b.n	c007c92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 c007c86:	6878      	ldr	r0, [r7, #4]
 c007c88:	f000 f973 	bl	c007f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 c007c8c:	6878      	ldr	r0, [r7, #4]
 c007c8e:	f000 f984 	bl	c007f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c007c92:	687b      	ldr	r3, [r7, #4]
 c007c94:	2200      	movs	r2, #0
 c007c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 c007c98:	687b      	ldr	r3, [r7, #4]
 c007c9a:	681b      	ldr	r3, [r3, #0]
 c007c9c:	691b      	ldr	r3, [r3, #16]
 c007c9e:	f003 0310 	and.w	r3, r3, #16
 c007ca2:	2b10      	cmp	r3, #16
 c007ca4:	d122      	bne.n	c007cec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 c007ca6:	687b      	ldr	r3, [r7, #4]
 c007ca8:	681b      	ldr	r3, [r3, #0]
 c007caa:	68db      	ldr	r3, [r3, #12]
 c007cac:	f003 0310 	and.w	r3, r3, #16
 c007cb0:	2b10      	cmp	r3, #16
 c007cb2:	d11b      	bne.n	c007cec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 c007cb4:	687b      	ldr	r3, [r7, #4]
 c007cb6:	681b      	ldr	r3, [r3, #0]
 c007cb8:	f06f 0210 	mvn.w	r2, #16
 c007cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 c007cbe:	687b      	ldr	r3, [r7, #4]
 c007cc0:	2208      	movs	r2, #8
 c007cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 c007cc4:	687b      	ldr	r3, [r7, #4]
 c007cc6:	681b      	ldr	r3, [r3, #0]
 c007cc8:	69db      	ldr	r3, [r3, #28]
 c007cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c007cce:	2b00      	cmp	r3, #0
 c007cd0:	d003      	beq.n	c007cda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 c007cd2:	6878      	ldr	r0, [r7, #4]
 c007cd4:	f000 f957 	bl	c007f86 <HAL_TIM_IC_CaptureCallback>
 c007cd8:	e005      	b.n	c007ce6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 c007cda:	6878      	ldr	r0, [r7, #4]
 c007cdc:	f000 f949 	bl	c007f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 c007ce0:	6878      	ldr	r0, [r7, #4]
 c007ce2:	f000 f95a 	bl	c007f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c007ce6:	687b      	ldr	r3, [r7, #4]
 c007ce8:	2200      	movs	r2, #0
 c007cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 c007cec:	687b      	ldr	r3, [r7, #4]
 c007cee:	681b      	ldr	r3, [r3, #0]
 c007cf0:	691b      	ldr	r3, [r3, #16]
 c007cf2:	f003 0301 	and.w	r3, r3, #1
 c007cf6:	2b01      	cmp	r3, #1
 c007cf8:	d10e      	bne.n	c007d18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 c007cfa:	687b      	ldr	r3, [r7, #4]
 c007cfc:	681b      	ldr	r3, [r3, #0]
 c007cfe:	68db      	ldr	r3, [r3, #12]
 c007d00:	f003 0301 	and.w	r3, r3, #1
 c007d04:	2b01      	cmp	r3, #1
 c007d06:	d107      	bne.n	c007d18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 c007d08:	687b      	ldr	r3, [r7, #4]
 c007d0a:	681b      	ldr	r3, [r3, #0]
 c007d0c:	f06f 0201 	mvn.w	r2, #1
 c007d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 c007d12:	6878      	ldr	r0, [r7, #4]
 c007d14:	f000 f923 	bl	c007f5e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 c007d18:	687b      	ldr	r3, [r7, #4]
 c007d1a:	681b      	ldr	r3, [r3, #0]
 c007d1c:	691b      	ldr	r3, [r3, #16]
 c007d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c007d22:	2b80      	cmp	r3, #128	; 0x80
 c007d24:	d10e      	bne.n	c007d44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 c007d26:	687b      	ldr	r3, [r7, #4]
 c007d28:	681b      	ldr	r3, [r3, #0]
 c007d2a:	68db      	ldr	r3, [r3, #12]
 c007d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c007d30:	2b80      	cmp	r3, #128	; 0x80
 c007d32:	d107      	bne.n	c007d44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 c007d34:	687b      	ldr	r3, [r7, #4]
 c007d36:	681b      	ldr	r3, [r3, #0]
 c007d38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 c007d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 c007d3e:	6878      	ldr	r0, [r7, #4]
 c007d40:	f000 fb08 	bl	c008354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 c007d44:	687b      	ldr	r3, [r7, #4]
 c007d46:	681b      	ldr	r3, [r3, #0]
 c007d48:	691b      	ldr	r3, [r3, #16]
 c007d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c007d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c007d52:	d10e      	bne.n	c007d72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 c007d54:	687b      	ldr	r3, [r7, #4]
 c007d56:	681b      	ldr	r3, [r3, #0]
 c007d58:	68db      	ldr	r3, [r3, #12]
 c007d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c007d5e:	2b80      	cmp	r3, #128	; 0x80
 c007d60:	d107      	bne.n	c007d72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 c007d62:	687b      	ldr	r3, [r7, #4]
 c007d64:	681b      	ldr	r3, [r3, #0]
 c007d66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 c007d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 c007d6c:	6878      	ldr	r0, [r7, #4]
 c007d6e:	f000 fafb 	bl	c008368 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 c007d72:	687b      	ldr	r3, [r7, #4]
 c007d74:	681b      	ldr	r3, [r3, #0]
 c007d76:	691b      	ldr	r3, [r3, #16]
 c007d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c007d7c:	2b40      	cmp	r3, #64	; 0x40
 c007d7e:	d10e      	bne.n	c007d9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 c007d80:	687b      	ldr	r3, [r7, #4]
 c007d82:	681b      	ldr	r3, [r3, #0]
 c007d84:	68db      	ldr	r3, [r3, #12]
 c007d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c007d8a:	2b40      	cmp	r3, #64	; 0x40
 c007d8c:	d107      	bne.n	c007d9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 c007d8e:	687b      	ldr	r3, [r7, #4]
 c007d90:	681b      	ldr	r3, [r3, #0]
 c007d92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 c007d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 c007d98:	6878      	ldr	r0, [r7, #4]
 c007d9a:	f000 f908 	bl	c007fae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 c007d9e:	687b      	ldr	r3, [r7, #4]
 c007da0:	681b      	ldr	r3, [r3, #0]
 c007da2:	691b      	ldr	r3, [r3, #16]
 c007da4:	f003 0320 	and.w	r3, r3, #32
 c007da8:	2b20      	cmp	r3, #32
 c007daa:	d10e      	bne.n	c007dca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 c007dac:	687b      	ldr	r3, [r7, #4]
 c007dae:	681b      	ldr	r3, [r3, #0]
 c007db0:	68db      	ldr	r3, [r3, #12]
 c007db2:	f003 0320 	and.w	r3, r3, #32
 c007db6:	2b20      	cmp	r3, #32
 c007db8:	d107      	bne.n	c007dca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 c007dba:	687b      	ldr	r3, [r7, #4]
 c007dbc:	681b      	ldr	r3, [r3, #0]
 c007dbe:	f06f 0220 	mvn.w	r2, #32
 c007dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 c007dc4:	6878      	ldr	r0, [r7, #4]
 c007dc6:	f000 fabb 	bl	c008340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 c007dca:	bf00      	nop
 c007dcc:	3708      	adds	r7, #8
 c007dce:	46bd      	mov	sp, r7
 c007dd0:	bd80      	pop	{r7, pc}

0c007dd2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 c007dd2:	b580      	push	{r7, lr}
 c007dd4:	b084      	sub	sp, #16
 c007dd6:	af00      	add	r7, sp, #0
 c007dd8:	6078      	str	r0, [r7, #4]
 c007dda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 c007ddc:	687b      	ldr	r3, [r7, #4]
 c007dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 c007de2:	2b01      	cmp	r3, #1
 c007de4:	d101      	bne.n	c007dea <HAL_TIM_ConfigClockSource+0x18>
 c007de6:	2302      	movs	r3, #2
 c007de8:	e0b5      	b.n	c007f56 <HAL_TIM_ConfigClockSource+0x184>
 c007dea:	687b      	ldr	r3, [r7, #4]
 c007dec:	2201      	movs	r2, #1
 c007dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 c007df2:	687b      	ldr	r3, [r7, #4]
 c007df4:	2202      	movs	r2, #2
 c007df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 c007dfa:	687b      	ldr	r3, [r7, #4]
 c007dfc:	681b      	ldr	r3, [r3, #0]
 c007dfe:	689b      	ldr	r3, [r3, #8]
 c007e00:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 c007e02:	68fb      	ldr	r3, [r7, #12]
 c007e04:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 c007e08:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 c007e0c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 c007e0e:	68fb      	ldr	r3, [r7, #12]
 c007e10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 c007e14:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 c007e16:	687b      	ldr	r3, [r7, #4]
 c007e18:	681b      	ldr	r3, [r3, #0]
 c007e1a:	68fa      	ldr	r2, [r7, #12]
 c007e1c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 c007e1e:	683b      	ldr	r3, [r7, #0]
 c007e20:	681b      	ldr	r3, [r3, #0]
 c007e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c007e26:	d03e      	beq.n	c007ea6 <HAL_TIM_ConfigClockSource+0xd4>
 c007e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c007e2c:	f200 8087 	bhi.w	c007f3e <HAL_TIM_ConfigClockSource+0x16c>
 c007e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c007e34:	f000 8085 	beq.w	c007f42 <HAL_TIM_ConfigClockSource+0x170>
 c007e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c007e3c:	d87f      	bhi.n	c007f3e <HAL_TIM_ConfigClockSource+0x16c>
 c007e3e:	2b70      	cmp	r3, #112	; 0x70
 c007e40:	d01a      	beq.n	c007e78 <HAL_TIM_ConfigClockSource+0xa6>
 c007e42:	2b70      	cmp	r3, #112	; 0x70
 c007e44:	d87b      	bhi.n	c007f3e <HAL_TIM_ConfigClockSource+0x16c>
 c007e46:	2b60      	cmp	r3, #96	; 0x60
 c007e48:	d050      	beq.n	c007eec <HAL_TIM_ConfigClockSource+0x11a>
 c007e4a:	2b60      	cmp	r3, #96	; 0x60
 c007e4c:	d877      	bhi.n	c007f3e <HAL_TIM_ConfigClockSource+0x16c>
 c007e4e:	2b50      	cmp	r3, #80	; 0x50
 c007e50:	d03c      	beq.n	c007ecc <HAL_TIM_ConfigClockSource+0xfa>
 c007e52:	2b50      	cmp	r3, #80	; 0x50
 c007e54:	d873      	bhi.n	c007f3e <HAL_TIM_ConfigClockSource+0x16c>
 c007e56:	2b40      	cmp	r3, #64	; 0x40
 c007e58:	d058      	beq.n	c007f0c <HAL_TIM_ConfigClockSource+0x13a>
 c007e5a:	2b40      	cmp	r3, #64	; 0x40
 c007e5c:	d86f      	bhi.n	c007f3e <HAL_TIM_ConfigClockSource+0x16c>
 c007e5e:	2b30      	cmp	r3, #48	; 0x30
 c007e60:	d064      	beq.n	c007f2c <HAL_TIM_ConfigClockSource+0x15a>
 c007e62:	2b30      	cmp	r3, #48	; 0x30
 c007e64:	d86b      	bhi.n	c007f3e <HAL_TIM_ConfigClockSource+0x16c>
 c007e66:	2b20      	cmp	r3, #32
 c007e68:	d060      	beq.n	c007f2c <HAL_TIM_ConfigClockSource+0x15a>
 c007e6a:	2b20      	cmp	r3, #32
 c007e6c:	d867      	bhi.n	c007f3e <HAL_TIM_ConfigClockSource+0x16c>
 c007e6e:	2b00      	cmp	r3, #0
 c007e70:	d05c      	beq.n	c007f2c <HAL_TIM_ConfigClockSource+0x15a>
 c007e72:	2b10      	cmp	r3, #16
 c007e74:	d05a      	beq.n	c007f2c <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 c007e76:	e062      	b.n	c007f3e <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 c007e78:	687b      	ldr	r3, [r7, #4]
 c007e7a:	6818      	ldr	r0, [r3, #0]
 c007e7c:	683b      	ldr	r3, [r7, #0]
 c007e7e:	6899      	ldr	r1, [r3, #8]
 c007e80:	683b      	ldr	r3, [r7, #0]
 c007e82:	685a      	ldr	r2, [r3, #4]
 c007e84:	683b      	ldr	r3, [r7, #0]
 c007e86:	68db      	ldr	r3, [r3, #12]
 c007e88:	f000 f9b2 	bl	c0081f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 c007e8c:	687b      	ldr	r3, [r7, #4]
 c007e8e:	681b      	ldr	r3, [r3, #0]
 c007e90:	689b      	ldr	r3, [r3, #8]
 c007e92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 c007e94:	68fb      	ldr	r3, [r7, #12]
 c007e96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 c007e9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 c007e9c:	687b      	ldr	r3, [r7, #4]
 c007e9e:	681b      	ldr	r3, [r3, #0]
 c007ea0:	68fa      	ldr	r2, [r7, #12]
 c007ea2:	609a      	str	r2, [r3, #8]
      break;
 c007ea4:	e04e      	b.n	c007f44 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 c007ea6:	687b      	ldr	r3, [r7, #4]
 c007ea8:	6818      	ldr	r0, [r3, #0]
 c007eaa:	683b      	ldr	r3, [r7, #0]
 c007eac:	6899      	ldr	r1, [r3, #8]
 c007eae:	683b      	ldr	r3, [r7, #0]
 c007eb0:	685a      	ldr	r2, [r3, #4]
 c007eb2:	683b      	ldr	r3, [r7, #0]
 c007eb4:	68db      	ldr	r3, [r3, #12]
 c007eb6:	f000 f99b 	bl	c0081f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 c007eba:	687b      	ldr	r3, [r7, #4]
 c007ebc:	681b      	ldr	r3, [r3, #0]
 c007ebe:	689a      	ldr	r2, [r3, #8]
 c007ec0:	687b      	ldr	r3, [r7, #4]
 c007ec2:	681b      	ldr	r3, [r3, #0]
 c007ec4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 c007ec8:	609a      	str	r2, [r3, #8]
      break;
 c007eca:	e03b      	b.n	c007f44 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 c007ecc:	687b      	ldr	r3, [r7, #4]
 c007ece:	6818      	ldr	r0, [r3, #0]
 c007ed0:	683b      	ldr	r3, [r7, #0]
 c007ed2:	6859      	ldr	r1, [r3, #4]
 c007ed4:	683b      	ldr	r3, [r7, #0]
 c007ed6:	68db      	ldr	r3, [r3, #12]
 c007ed8:	461a      	mov	r2, r3
 c007eda:	f000 f90d 	bl	c0080f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 c007ede:	687b      	ldr	r3, [r7, #4]
 c007ee0:	681b      	ldr	r3, [r3, #0]
 c007ee2:	2150      	movs	r1, #80	; 0x50
 c007ee4:	4618      	mov	r0, r3
 c007ee6:	f000 f966 	bl	c0081b6 <TIM_ITRx_SetConfig>
      break;
 c007eea:	e02b      	b.n	c007f44 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 c007eec:	687b      	ldr	r3, [r7, #4]
 c007eee:	6818      	ldr	r0, [r3, #0]
 c007ef0:	683b      	ldr	r3, [r7, #0]
 c007ef2:	6859      	ldr	r1, [r3, #4]
 c007ef4:	683b      	ldr	r3, [r7, #0]
 c007ef6:	68db      	ldr	r3, [r3, #12]
 c007ef8:	461a      	mov	r2, r3
 c007efa:	f000 f92c 	bl	c008156 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 c007efe:	687b      	ldr	r3, [r7, #4]
 c007f00:	681b      	ldr	r3, [r3, #0]
 c007f02:	2160      	movs	r1, #96	; 0x60
 c007f04:	4618      	mov	r0, r3
 c007f06:	f000 f956 	bl	c0081b6 <TIM_ITRx_SetConfig>
      break;
 c007f0a:	e01b      	b.n	c007f44 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 c007f0c:	687b      	ldr	r3, [r7, #4]
 c007f0e:	6818      	ldr	r0, [r3, #0]
 c007f10:	683b      	ldr	r3, [r7, #0]
 c007f12:	6859      	ldr	r1, [r3, #4]
 c007f14:	683b      	ldr	r3, [r7, #0]
 c007f16:	68db      	ldr	r3, [r3, #12]
 c007f18:	461a      	mov	r2, r3
 c007f1a:	f000 f8ed 	bl	c0080f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 c007f1e:	687b      	ldr	r3, [r7, #4]
 c007f20:	681b      	ldr	r3, [r3, #0]
 c007f22:	2140      	movs	r1, #64	; 0x40
 c007f24:	4618      	mov	r0, r3
 c007f26:	f000 f946 	bl	c0081b6 <TIM_ITRx_SetConfig>
      break;
 c007f2a:	e00b      	b.n	c007f44 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 c007f2c:	687b      	ldr	r3, [r7, #4]
 c007f2e:	681a      	ldr	r2, [r3, #0]
 c007f30:	683b      	ldr	r3, [r7, #0]
 c007f32:	681b      	ldr	r3, [r3, #0]
 c007f34:	4619      	mov	r1, r3
 c007f36:	4610      	mov	r0, r2
 c007f38:	f000 f93d 	bl	c0081b6 <TIM_ITRx_SetConfig>
        break;
 c007f3c:	e002      	b.n	c007f44 <HAL_TIM_ConfigClockSource+0x172>
      break;
 c007f3e:	bf00      	nop
 c007f40:	e000      	b.n	c007f44 <HAL_TIM_ConfigClockSource+0x172>
      break;
 c007f42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 c007f44:	687b      	ldr	r3, [r7, #4]
 c007f46:	2201      	movs	r2, #1
 c007f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 c007f4c:	687b      	ldr	r3, [r7, #4]
 c007f4e:	2200      	movs	r2, #0
 c007f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 c007f54:	2300      	movs	r3, #0
}
 c007f56:	4618      	mov	r0, r3
 c007f58:	3710      	adds	r7, #16
 c007f5a:	46bd      	mov	sp, r7
 c007f5c:	bd80      	pop	{r7, pc}

0c007f5e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 c007f5e:	b480      	push	{r7}
 c007f60:	b083      	sub	sp, #12
 c007f62:	af00      	add	r7, sp, #0
 c007f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 c007f66:	bf00      	nop
 c007f68:	370c      	adds	r7, #12
 c007f6a:	46bd      	mov	sp, r7
 c007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007f70:	4770      	bx	lr

0c007f72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 c007f72:	b480      	push	{r7}
 c007f74:	b083      	sub	sp, #12
 c007f76:	af00      	add	r7, sp, #0
 c007f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 c007f7a:	bf00      	nop
 c007f7c:	370c      	adds	r7, #12
 c007f7e:	46bd      	mov	sp, r7
 c007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007f84:	4770      	bx	lr

0c007f86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 c007f86:	b480      	push	{r7}
 c007f88:	b083      	sub	sp, #12
 c007f8a:	af00      	add	r7, sp, #0
 c007f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 c007f8e:	bf00      	nop
 c007f90:	370c      	adds	r7, #12
 c007f92:	46bd      	mov	sp, r7
 c007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007f98:	4770      	bx	lr

0c007f9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 c007f9a:	b480      	push	{r7}
 c007f9c:	b083      	sub	sp, #12
 c007f9e:	af00      	add	r7, sp, #0
 c007fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 c007fa2:	bf00      	nop
 c007fa4:	370c      	adds	r7, #12
 c007fa6:	46bd      	mov	sp, r7
 c007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007fac:	4770      	bx	lr

0c007fae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 c007fae:	b480      	push	{r7}
 c007fb0:	b083      	sub	sp, #12
 c007fb2:	af00      	add	r7, sp, #0
 c007fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 c007fb6:	bf00      	nop
 c007fb8:	370c      	adds	r7, #12
 c007fba:	46bd      	mov	sp, r7
 c007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007fc0:	4770      	bx	lr
	...

0c007fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 c007fc4:	b480      	push	{r7}
 c007fc6:	b085      	sub	sp, #20
 c007fc8:	af00      	add	r7, sp, #0
 c007fca:	6078      	str	r0, [r7, #4]
 c007fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 c007fce:	687b      	ldr	r3, [r7, #4]
 c007fd0:	681b      	ldr	r3, [r3, #0]
 c007fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 c007fd4:	687b      	ldr	r3, [r7, #4]
 c007fd6:	4a40      	ldr	r2, [pc, #256]	; (c0080d8 <TIM_Base_SetConfig+0x114>)
 c007fd8:	4293      	cmp	r3, r2
 c007fda:	d013      	beq.n	c008004 <TIM_Base_SetConfig+0x40>
 c007fdc:	687b      	ldr	r3, [r7, #4]
 c007fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c007fe2:	d00f      	beq.n	c008004 <TIM_Base_SetConfig+0x40>
 c007fe4:	687b      	ldr	r3, [r7, #4]
 c007fe6:	4a3d      	ldr	r2, [pc, #244]	; (c0080dc <TIM_Base_SetConfig+0x118>)
 c007fe8:	4293      	cmp	r3, r2
 c007fea:	d00b      	beq.n	c008004 <TIM_Base_SetConfig+0x40>
 c007fec:	687b      	ldr	r3, [r7, #4]
 c007fee:	4a3c      	ldr	r2, [pc, #240]	; (c0080e0 <TIM_Base_SetConfig+0x11c>)
 c007ff0:	4293      	cmp	r3, r2
 c007ff2:	d007      	beq.n	c008004 <TIM_Base_SetConfig+0x40>
 c007ff4:	687b      	ldr	r3, [r7, #4]
 c007ff6:	4a3b      	ldr	r2, [pc, #236]	; (c0080e4 <TIM_Base_SetConfig+0x120>)
 c007ff8:	4293      	cmp	r3, r2
 c007ffa:	d003      	beq.n	c008004 <TIM_Base_SetConfig+0x40>
 c007ffc:	687b      	ldr	r3, [r7, #4]
 c007ffe:	4a3a      	ldr	r2, [pc, #232]	; (c0080e8 <TIM_Base_SetConfig+0x124>)
 c008000:	4293      	cmp	r3, r2
 c008002:	d108      	bne.n	c008016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 c008004:	68fb      	ldr	r3, [r7, #12]
 c008006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 c00800a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 c00800c:	683b      	ldr	r3, [r7, #0]
 c00800e:	685b      	ldr	r3, [r3, #4]
 c008010:	68fa      	ldr	r2, [r7, #12]
 c008012:	4313      	orrs	r3, r2
 c008014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 c008016:	687b      	ldr	r3, [r7, #4]
 c008018:	4a2f      	ldr	r2, [pc, #188]	; (c0080d8 <TIM_Base_SetConfig+0x114>)
 c00801a:	4293      	cmp	r3, r2
 c00801c:	d01f      	beq.n	c00805e <TIM_Base_SetConfig+0x9a>
 c00801e:	687b      	ldr	r3, [r7, #4]
 c008020:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c008024:	d01b      	beq.n	c00805e <TIM_Base_SetConfig+0x9a>
 c008026:	687b      	ldr	r3, [r7, #4]
 c008028:	4a2c      	ldr	r2, [pc, #176]	; (c0080dc <TIM_Base_SetConfig+0x118>)
 c00802a:	4293      	cmp	r3, r2
 c00802c:	d017      	beq.n	c00805e <TIM_Base_SetConfig+0x9a>
 c00802e:	687b      	ldr	r3, [r7, #4]
 c008030:	4a2b      	ldr	r2, [pc, #172]	; (c0080e0 <TIM_Base_SetConfig+0x11c>)
 c008032:	4293      	cmp	r3, r2
 c008034:	d013      	beq.n	c00805e <TIM_Base_SetConfig+0x9a>
 c008036:	687b      	ldr	r3, [r7, #4]
 c008038:	4a2a      	ldr	r2, [pc, #168]	; (c0080e4 <TIM_Base_SetConfig+0x120>)
 c00803a:	4293      	cmp	r3, r2
 c00803c:	d00f      	beq.n	c00805e <TIM_Base_SetConfig+0x9a>
 c00803e:	687b      	ldr	r3, [r7, #4]
 c008040:	4a29      	ldr	r2, [pc, #164]	; (c0080e8 <TIM_Base_SetConfig+0x124>)
 c008042:	4293      	cmp	r3, r2
 c008044:	d00b      	beq.n	c00805e <TIM_Base_SetConfig+0x9a>
 c008046:	687b      	ldr	r3, [r7, #4]
 c008048:	4a28      	ldr	r2, [pc, #160]	; (c0080ec <TIM_Base_SetConfig+0x128>)
 c00804a:	4293      	cmp	r3, r2
 c00804c:	d007      	beq.n	c00805e <TIM_Base_SetConfig+0x9a>
 c00804e:	687b      	ldr	r3, [r7, #4]
 c008050:	4a27      	ldr	r2, [pc, #156]	; (c0080f0 <TIM_Base_SetConfig+0x12c>)
 c008052:	4293      	cmp	r3, r2
 c008054:	d003      	beq.n	c00805e <TIM_Base_SetConfig+0x9a>
 c008056:	687b      	ldr	r3, [r7, #4]
 c008058:	4a26      	ldr	r2, [pc, #152]	; (c0080f4 <TIM_Base_SetConfig+0x130>)
 c00805a:	4293      	cmp	r3, r2
 c00805c:	d108      	bne.n	c008070 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 c00805e:	68fb      	ldr	r3, [r7, #12]
 c008060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c008064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 c008066:	683b      	ldr	r3, [r7, #0]
 c008068:	68db      	ldr	r3, [r3, #12]
 c00806a:	68fa      	ldr	r2, [r7, #12]
 c00806c:	4313      	orrs	r3, r2
 c00806e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 c008070:	68fb      	ldr	r3, [r7, #12]
 c008072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 c008076:	683b      	ldr	r3, [r7, #0]
 c008078:	695b      	ldr	r3, [r3, #20]
 c00807a:	4313      	orrs	r3, r2
 c00807c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 c00807e:	687b      	ldr	r3, [r7, #4]
 c008080:	68fa      	ldr	r2, [r7, #12]
 c008082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 c008084:	683b      	ldr	r3, [r7, #0]
 c008086:	689a      	ldr	r2, [r3, #8]
 c008088:	687b      	ldr	r3, [r7, #4]
 c00808a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 c00808c:	683b      	ldr	r3, [r7, #0]
 c00808e:	681a      	ldr	r2, [r3, #0]
 c008090:	687b      	ldr	r3, [r7, #4]
 c008092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 c008094:	687b      	ldr	r3, [r7, #4]
 c008096:	4a10      	ldr	r2, [pc, #64]	; (c0080d8 <TIM_Base_SetConfig+0x114>)
 c008098:	4293      	cmp	r3, r2
 c00809a:	d00f      	beq.n	c0080bc <TIM_Base_SetConfig+0xf8>
 c00809c:	687b      	ldr	r3, [r7, #4]
 c00809e:	4a12      	ldr	r2, [pc, #72]	; (c0080e8 <TIM_Base_SetConfig+0x124>)
 c0080a0:	4293      	cmp	r3, r2
 c0080a2:	d00b      	beq.n	c0080bc <TIM_Base_SetConfig+0xf8>
 c0080a4:	687b      	ldr	r3, [r7, #4]
 c0080a6:	4a11      	ldr	r2, [pc, #68]	; (c0080ec <TIM_Base_SetConfig+0x128>)
 c0080a8:	4293      	cmp	r3, r2
 c0080aa:	d007      	beq.n	c0080bc <TIM_Base_SetConfig+0xf8>
 c0080ac:	687b      	ldr	r3, [r7, #4]
 c0080ae:	4a10      	ldr	r2, [pc, #64]	; (c0080f0 <TIM_Base_SetConfig+0x12c>)
 c0080b0:	4293      	cmp	r3, r2
 c0080b2:	d003      	beq.n	c0080bc <TIM_Base_SetConfig+0xf8>
 c0080b4:	687b      	ldr	r3, [r7, #4]
 c0080b6:	4a0f      	ldr	r2, [pc, #60]	; (c0080f4 <TIM_Base_SetConfig+0x130>)
 c0080b8:	4293      	cmp	r3, r2
 c0080ba:	d103      	bne.n	c0080c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 c0080bc:	683b      	ldr	r3, [r7, #0]
 c0080be:	691a      	ldr	r2, [r3, #16]
 c0080c0:	687b      	ldr	r3, [r7, #4]
 c0080c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 c0080c4:	687b      	ldr	r3, [r7, #4]
 c0080c6:	2201      	movs	r2, #1
 c0080c8:	615a      	str	r2, [r3, #20]
}
 c0080ca:	bf00      	nop
 c0080cc:	3714      	adds	r7, #20
 c0080ce:	46bd      	mov	sp, r7
 c0080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0080d4:	4770      	bx	lr
 c0080d6:	bf00      	nop
 c0080d8:	50012c00 	.word	0x50012c00
 c0080dc:	50000400 	.word	0x50000400
 c0080e0:	50000800 	.word	0x50000800
 c0080e4:	50000c00 	.word	0x50000c00
 c0080e8:	50013400 	.word	0x50013400
 c0080ec:	50014000 	.word	0x50014000
 c0080f0:	50014400 	.word	0x50014400
 c0080f4:	50014800 	.word	0x50014800

0c0080f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 c0080f8:	b480      	push	{r7}
 c0080fa:	b087      	sub	sp, #28
 c0080fc:	af00      	add	r7, sp, #0
 c0080fe:	60f8      	str	r0, [r7, #12]
 c008100:	60b9      	str	r1, [r7, #8]
 c008102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 c008104:	68fb      	ldr	r3, [r7, #12]
 c008106:	6a1b      	ldr	r3, [r3, #32]
 c008108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 c00810a:	68fb      	ldr	r3, [r7, #12]
 c00810c:	6a1b      	ldr	r3, [r3, #32]
 c00810e:	f023 0201 	bic.w	r2, r3, #1
 c008112:	68fb      	ldr	r3, [r7, #12]
 c008114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 c008116:	68fb      	ldr	r3, [r7, #12]
 c008118:	699b      	ldr	r3, [r3, #24]
 c00811a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 c00811c:	693b      	ldr	r3, [r7, #16]
 c00811e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c008122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 c008124:	687b      	ldr	r3, [r7, #4]
 c008126:	011b      	lsls	r3, r3, #4
 c008128:	693a      	ldr	r2, [r7, #16]
 c00812a:	4313      	orrs	r3, r2
 c00812c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 c00812e:	697b      	ldr	r3, [r7, #20]
 c008130:	f023 030a 	bic.w	r3, r3, #10
 c008134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 c008136:	697a      	ldr	r2, [r7, #20]
 c008138:	68bb      	ldr	r3, [r7, #8]
 c00813a:	4313      	orrs	r3, r2
 c00813c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 c00813e:	68fb      	ldr	r3, [r7, #12]
 c008140:	693a      	ldr	r2, [r7, #16]
 c008142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 c008144:	68fb      	ldr	r3, [r7, #12]
 c008146:	697a      	ldr	r2, [r7, #20]
 c008148:	621a      	str	r2, [r3, #32]
}
 c00814a:	bf00      	nop
 c00814c:	371c      	adds	r7, #28
 c00814e:	46bd      	mov	sp, r7
 c008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008154:	4770      	bx	lr

0c008156 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 c008156:	b480      	push	{r7}
 c008158:	b087      	sub	sp, #28
 c00815a:	af00      	add	r7, sp, #0
 c00815c:	60f8      	str	r0, [r7, #12]
 c00815e:	60b9      	str	r1, [r7, #8]
 c008160:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 c008162:	68fb      	ldr	r3, [r7, #12]
 c008164:	6a1b      	ldr	r3, [r3, #32]
 c008166:	f023 0210 	bic.w	r2, r3, #16
 c00816a:	68fb      	ldr	r3, [r7, #12]
 c00816c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 c00816e:	68fb      	ldr	r3, [r7, #12]
 c008170:	699b      	ldr	r3, [r3, #24]
 c008172:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 c008174:	68fb      	ldr	r3, [r7, #12]
 c008176:	6a1b      	ldr	r3, [r3, #32]
 c008178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 c00817a:	697b      	ldr	r3, [r7, #20]
 c00817c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 c008180:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 c008182:	687b      	ldr	r3, [r7, #4]
 c008184:	031b      	lsls	r3, r3, #12
 c008186:	697a      	ldr	r2, [r7, #20]
 c008188:	4313      	orrs	r3, r2
 c00818a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 c00818c:	693b      	ldr	r3, [r7, #16]
 c00818e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 c008192:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 c008194:	68bb      	ldr	r3, [r7, #8]
 c008196:	011b      	lsls	r3, r3, #4
 c008198:	693a      	ldr	r2, [r7, #16]
 c00819a:	4313      	orrs	r3, r2
 c00819c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 c00819e:	68fb      	ldr	r3, [r7, #12]
 c0081a0:	697a      	ldr	r2, [r7, #20]
 c0081a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 c0081a4:	68fb      	ldr	r3, [r7, #12]
 c0081a6:	693a      	ldr	r2, [r7, #16]
 c0081a8:	621a      	str	r2, [r3, #32]
}
 c0081aa:	bf00      	nop
 c0081ac:	371c      	adds	r7, #28
 c0081ae:	46bd      	mov	sp, r7
 c0081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0081b4:	4770      	bx	lr

0c0081b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 c0081b6:	b480      	push	{r7}
 c0081b8:	b085      	sub	sp, #20
 c0081ba:	af00      	add	r7, sp, #0
 c0081bc:	6078      	str	r0, [r7, #4]
 c0081be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 c0081c0:	687b      	ldr	r3, [r7, #4]
 c0081c2:	689b      	ldr	r3, [r3, #8]
 c0081c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 c0081c6:	68fb      	ldr	r3, [r7, #12]
 c0081c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 c0081cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 c0081d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 c0081d2:	683a      	ldr	r2, [r7, #0]
 c0081d4:	68fb      	ldr	r3, [r7, #12]
 c0081d6:	4313      	orrs	r3, r2
 c0081d8:	f043 0307 	orr.w	r3, r3, #7
 c0081dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 c0081de:	687b      	ldr	r3, [r7, #4]
 c0081e0:	68fa      	ldr	r2, [r7, #12]
 c0081e2:	609a      	str	r2, [r3, #8]
}
 c0081e4:	bf00      	nop
 c0081e6:	3714      	adds	r7, #20
 c0081e8:	46bd      	mov	sp, r7
 c0081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0081ee:	4770      	bx	lr

0c0081f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 c0081f0:	b480      	push	{r7}
 c0081f2:	b087      	sub	sp, #28
 c0081f4:	af00      	add	r7, sp, #0
 c0081f6:	60f8      	str	r0, [r7, #12]
 c0081f8:	60b9      	str	r1, [r7, #8]
 c0081fa:	607a      	str	r2, [r7, #4]
 c0081fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 c0081fe:	68fb      	ldr	r3, [r7, #12]
 c008200:	689b      	ldr	r3, [r3, #8]
 c008202:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 c008204:	697b      	ldr	r3, [r7, #20]
 c008206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 c00820a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 c00820c:	683b      	ldr	r3, [r7, #0]
 c00820e:	021a      	lsls	r2, r3, #8
 c008210:	687b      	ldr	r3, [r7, #4]
 c008212:	431a      	orrs	r2, r3
 c008214:	68bb      	ldr	r3, [r7, #8]
 c008216:	4313      	orrs	r3, r2
 c008218:	697a      	ldr	r2, [r7, #20]
 c00821a:	4313      	orrs	r3, r2
 c00821c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 c00821e:	68fb      	ldr	r3, [r7, #12]
 c008220:	697a      	ldr	r2, [r7, #20]
 c008222:	609a      	str	r2, [r3, #8]
}
 c008224:	bf00      	nop
 c008226:	371c      	adds	r7, #28
 c008228:	46bd      	mov	sp, r7
 c00822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00822e:	4770      	bx	lr

0c008230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 c008230:	b480      	push	{r7}
 c008232:	b085      	sub	sp, #20
 c008234:	af00      	add	r7, sp, #0
 c008236:	6078      	str	r0, [r7, #4]
 c008238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 c00823a:	687b      	ldr	r3, [r7, #4]
 c00823c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 c008240:	2b01      	cmp	r3, #1
 c008242:	d101      	bne.n	c008248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 c008244:	2302      	movs	r3, #2
 c008246:	e068      	b.n	c00831a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 c008248:	687b      	ldr	r3, [r7, #4]
 c00824a:	2201      	movs	r2, #1
 c00824c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 c008250:	687b      	ldr	r3, [r7, #4]
 c008252:	2202      	movs	r2, #2
 c008254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 c008258:	687b      	ldr	r3, [r7, #4]
 c00825a:	681b      	ldr	r3, [r3, #0]
 c00825c:	685b      	ldr	r3, [r3, #4]
 c00825e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 c008260:	687b      	ldr	r3, [r7, #4]
 c008262:	681b      	ldr	r3, [r3, #0]
 c008264:	689b      	ldr	r3, [r3, #8]
 c008266:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 c008268:	687b      	ldr	r3, [r7, #4]
 c00826a:	681b      	ldr	r3, [r3, #0]
 c00826c:	4a2e      	ldr	r2, [pc, #184]	; (c008328 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 c00826e:	4293      	cmp	r3, r2
 c008270:	d004      	beq.n	c00827c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 c008272:	687b      	ldr	r3, [r7, #4]
 c008274:	681b      	ldr	r3, [r3, #0]
 c008276:	4a2d      	ldr	r2, [pc, #180]	; (c00832c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 c008278:	4293      	cmp	r3, r2
 c00827a:	d108      	bne.n	c00828e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 c00827c:	68fb      	ldr	r3, [r7, #12]
 c00827e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 c008282:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 c008284:	683b      	ldr	r3, [r7, #0]
 c008286:	685b      	ldr	r3, [r3, #4]
 c008288:	68fa      	ldr	r2, [r7, #12]
 c00828a:	4313      	orrs	r3, r2
 c00828c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 c00828e:	68fb      	ldr	r3, [r7, #12]
 c008290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 c008294:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 c008296:	683b      	ldr	r3, [r7, #0]
 c008298:	681b      	ldr	r3, [r3, #0]
 c00829a:	68fa      	ldr	r2, [r7, #12]
 c00829c:	4313      	orrs	r3, r2
 c00829e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 c0082a0:	687b      	ldr	r3, [r7, #4]
 c0082a2:	681b      	ldr	r3, [r3, #0]
 c0082a4:	68fa      	ldr	r2, [r7, #12]
 c0082a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 c0082a8:	687b      	ldr	r3, [r7, #4]
 c0082aa:	681b      	ldr	r3, [r3, #0]
 c0082ac:	4a1e      	ldr	r2, [pc, #120]	; (c008328 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 c0082ae:	4293      	cmp	r3, r2
 c0082b0:	d01d      	beq.n	c0082ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c0082b2:	687b      	ldr	r3, [r7, #4]
 c0082b4:	681b      	ldr	r3, [r3, #0]
 c0082b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c0082ba:	d018      	beq.n	c0082ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c0082bc:	687b      	ldr	r3, [r7, #4]
 c0082be:	681b      	ldr	r3, [r3, #0]
 c0082c0:	4a1b      	ldr	r2, [pc, #108]	; (c008330 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 c0082c2:	4293      	cmp	r3, r2
 c0082c4:	d013      	beq.n	c0082ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c0082c6:	687b      	ldr	r3, [r7, #4]
 c0082c8:	681b      	ldr	r3, [r3, #0]
 c0082ca:	4a1a      	ldr	r2, [pc, #104]	; (c008334 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 c0082cc:	4293      	cmp	r3, r2
 c0082ce:	d00e      	beq.n	c0082ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c0082d0:	687b      	ldr	r3, [r7, #4]
 c0082d2:	681b      	ldr	r3, [r3, #0]
 c0082d4:	4a18      	ldr	r2, [pc, #96]	; (c008338 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 c0082d6:	4293      	cmp	r3, r2
 c0082d8:	d009      	beq.n	c0082ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c0082da:	687b      	ldr	r3, [r7, #4]
 c0082dc:	681b      	ldr	r3, [r3, #0]
 c0082de:	4a13      	ldr	r2, [pc, #76]	; (c00832c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 c0082e0:	4293      	cmp	r3, r2
 c0082e2:	d004      	beq.n	c0082ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c0082e4:	687b      	ldr	r3, [r7, #4]
 c0082e6:	681b      	ldr	r3, [r3, #0]
 c0082e8:	4a14      	ldr	r2, [pc, #80]	; (c00833c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 c0082ea:	4293      	cmp	r3, r2
 c0082ec:	d10c      	bne.n	c008308 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 c0082ee:	68bb      	ldr	r3, [r7, #8]
 c0082f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c0082f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 c0082f6:	683b      	ldr	r3, [r7, #0]
 c0082f8:	689b      	ldr	r3, [r3, #8]
 c0082fa:	68ba      	ldr	r2, [r7, #8]
 c0082fc:	4313      	orrs	r3, r2
 c0082fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 c008300:	687b      	ldr	r3, [r7, #4]
 c008302:	681b      	ldr	r3, [r3, #0]
 c008304:	68ba      	ldr	r2, [r7, #8]
 c008306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 c008308:	687b      	ldr	r3, [r7, #4]
 c00830a:	2201      	movs	r2, #1
 c00830c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 c008310:	687b      	ldr	r3, [r7, #4]
 c008312:	2200      	movs	r2, #0
 c008314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 c008318:	2300      	movs	r3, #0
}
 c00831a:	4618      	mov	r0, r3
 c00831c:	3714      	adds	r7, #20
 c00831e:	46bd      	mov	sp, r7
 c008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008324:	4770      	bx	lr
 c008326:	bf00      	nop
 c008328:	50012c00 	.word	0x50012c00
 c00832c:	50013400 	.word	0x50013400
 c008330:	50000400 	.word	0x50000400
 c008334:	50000800 	.word	0x50000800
 c008338:	50000c00 	.word	0x50000c00
 c00833c:	50014000 	.word	0x50014000

0c008340 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 c008340:	b480      	push	{r7}
 c008342:	b083      	sub	sp, #12
 c008344:	af00      	add	r7, sp, #0
 c008346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 c008348:	bf00      	nop
 c00834a:	370c      	adds	r7, #12
 c00834c:	46bd      	mov	sp, r7
 c00834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008352:	4770      	bx	lr

0c008354 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 c008354:	b480      	push	{r7}
 c008356:	b083      	sub	sp, #12
 c008358:	af00      	add	r7, sp, #0
 c00835a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 c00835c:	bf00      	nop
 c00835e:	370c      	adds	r7, #12
 c008360:	46bd      	mov	sp, r7
 c008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008366:	4770      	bx	lr

0c008368 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 c008368:	b480      	push	{r7}
 c00836a:	b083      	sub	sp, #12
 c00836c:	af00      	add	r7, sp, #0
 c00836e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 c008370:	bf00      	nop
 c008372:	370c      	adds	r7, #12
 c008374:	46bd      	mov	sp, r7
 c008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00837a:	4770      	bx	lr

0c00837c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 c00837c:	b580      	push	{r7, lr}
 c00837e:	b082      	sub	sp, #8
 c008380:	af00      	add	r7, sp, #0
 c008382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 c008384:	687b      	ldr	r3, [r7, #4]
 c008386:	2b00      	cmp	r3, #0
 c008388:	d101      	bne.n	c00838e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 c00838a:	2301      	movs	r3, #1
 c00838c:	e042      	b.n	c008414 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 c00838e:	687b      	ldr	r3, [r7, #4]
 c008390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c008394:	2b00      	cmp	r3, #0
 c008396:	d106      	bne.n	c0083a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 c008398:	687b      	ldr	r3, [r7, #4]
 c00839a:	2200      	movs	r2, #0
 c00839c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 c0083a0:	6878      	ldr	r0, [r7, #4]
 c0083a2:	f7fc f975 	bl	c004690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 c0083a6:	687b      	ldr	r3, [r7, #4]
 c0083a8:	2224      	movs	r2, #36	; 0x24
 c0083aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 c0083ae:	687b      	ldr	r3, [r7, #4]
 c0083b0:	681b      	ldr	r3, [r3, #0]
 c0083b2:	681a      	ldr	r2, [r3, #0]
 c0083b4:	687b      	ldr	r3, [r7, #4]
 c0083b6:	681b      	ldr	r3, [r3, #0]
 c0083b8:	f022 0201 	bic.w	r2, r2, #1
 c0083bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 c0083be:	6878      	ldr	r0, [r7, #4]
 c0083c0:	f000 f996 	bl	c0086f0 <UART_SetConfig>
 c0083c4:	4603      	mov	r3, r0
 c0083c6:	2b01      	cmp	r3, #1
 c0083c8:	d101      	bne.n	c0083ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 c0083ca:	2301      	movs	r3, #1
 c0083cc:	e022      	b.n	c008414 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c0083ce:	687b      	ldr	r3, [r7, #4]
 c0083d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0083d2:	2b00      	cmp	r3, #0
 c0083d4:	d002      	beq.n	c0083dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 c0083d6:	6878      	ldr	r0, [r7, #4]
 c0083d8:	f000 fc88 	bl	c008cec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c0083dc:	687b      	ldr	r3, [r7, #4]
 c0083de:	681b      	ldr	r3, [r3, #0]
 c0083e0:	685a      	ldr	r2, [r3, #4]
 c0083e2:	687b      	ldr	r3, [r7, #4]
 c0083e4:	681b      	ldr	r3, [r3, #0]
 c0083e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 c0083ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c0083ec:	687b      	ldr	r3, [r7, #4]
 c0083ee:	681b      	ldr	r3, [r3, #0]
 c0083f0:	689a      	ldr	r2, [r3, #8]
 c0083f2:	687b      	ldr	r3, [r7, #4]
 c0083f4:	681b      	ldr	r3, [r3, #0]
 c0083f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 c0083fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 c0083fc:	687b      	ldr	r3, [r7, #4]
 c0083fe:	681b      	ldr	r3, [r3, #0]
 c008400:	681a      	ldr	r2, [r3, #0]
 c008402:	687b      	ldr	r3, [r7, #4]
 c008404:	681b      	ldr	r3, [r3, #0]
 c008406:	f042 0201 	orr.w	r2, r2, #1
 c00840a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 c00840c:	6878      	ldr	r0, [r7, #4]
 c00840e:	f000 fd0f 	bl	c008e30 <UART_CheckIdleState>
 c008412:	4603      	mov	r3, r0
}
 c008414:	4618      	mov	r0, r3
 c008416:	3708      	adds	r7, #8
 c008418:	46bd      	mov	sp, r7
 c00841a:	bd80      	pop	{r7, pc}

0c00841c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c00841c:	b580      	push	{r7, lr}
 c00841e:	b08a      	sub	sp, #40	; 0x28
 c008420:	af02      	add	r7, sp, #8
 c008422:	60f8      	str	r0, [r7, #12]
 c008424:	60b9      	str	r1, [r7, #8]
 c008426:	603b      	str	r3, [r7, #0]
 c008428:	4613      	mov	r3, r2
 c00842a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 c00842c:	68fb      	ldr	r3, [r7, #12]
 c00842e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c008432:	2b20      	cmp	r3, #32
 c008434:	f040 8083 	bne.w	c00853e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 c008438:	68bb      	ldr	r3, [r7, #8]
 c00843a:	2b00      	cmp	r3, #0
 c00843c:	d002      	beq.n	c008444 <HAL_UART_Transmit+0x28>
 c00843e:	88fb      	ldrh	r3, [r7, #6]
 c008440:	2b00      	cmp	r3, #0
 c008442:	d101      	bne.n	c008448 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 c008444:	2301      	movs	r3, #1
 c008446:	e07b      	b.n	c008540 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 c008448:	68fb      	ldr	r3, [r7, #12]
 c00844a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c00844e:	2b01      	cmp	r3, #1
 c008450:	d101      	bne.n	c008456 <HAL_UART_Transmit+0x3a>
 c008452:	2302      	movs	r3, #2
 c008454:	e074      	b.n	c008540 <HAL_UART_Transmit+0x124>
 c008456:	68fb      	ldr	r3, [r7, #12]
 c008458:	2201      	movs	r2, #1
 c00845a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c00845e:	68fb      	ldr	r3, [r7, #12]
 c008460:	2200      	movs	r2, #0
 c008462:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c008466:	68fb      	ldr	r3, [r7, #12]
 c008468:	2221      	movs	r2, #33	; 0x21
 c00846a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c00846e:	f7fc fa2b 	bl	c0048c8 <HAL_GetTick>
 c008472:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 c008474:	68fb      	ldr	r3, [r7, #12]
 c008476:	88fa      	ldrh	r2, [r7, #6]
 c008478:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 c00847c:	68fb      	ldr	r3, [r7, #12]
 c00847e:	88fa      	ldrh	r2, [r7, #6]
 c008480:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c008484:	68fb      	ldr	r3, [r7, #12]
 c008486:	689b      	ldr	r3, [r3, #8]
 c008488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c00848c:	d108      	bne.n	c0084a0 <HAL_UART_Transmit+0x84>
 c00848e:	68fb      	ldr	r3, [r7, #12]
 c008490:	691b      	ldr	r3, [r3, #16]
 c008492:	2b00      	cmp	r3, #0
 c008494:	d104      	bne.n	c0084a0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 c008496:	2300      	movs	r3, #0
 c008498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 c00849a:	68bb      	ldr	r3, [r7, #8]
 c00849c:	61bb      	str	r3, [r7, #24]
 c00849e:	e003      	b.n	c0084a8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 c0084a0:	68bb      	ldr	r3, [r7, #8]
 c0084a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c0084a4:	2300      	movs	r3, #0
 c0084a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 c0084a8:	68fb      	ldr	r3, [r7, #12]
 c0084aa:	2200      	movs	r2, #0
 c0084ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 c0084b0:	e02c      	b.n	c00850c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 c0084b2:	683b      	ldr	r3, [r7, #0]
 c0084b4:	9300      	str	r3, [sp, #0]
 c0084b6:	697b      	ldr	r3, [r7, #20]
 c0084b8:	2200      	movs	r2, #0
 c0084ba:	2180      	movs	r1, #128	; 0x80
 c0084bc:	68f8      	ldr	r0, [r7, #12]
 c0084be:	f000 fd02 	bl	c008ec6 <UART_WaitOnFlagUntilTimeout>
 c0084c2:	4603      	mov	r3, r0
 c0084c4:	2b00      	cmp	r3, #0
 c0084c6:	d001      	beq.n	c0084cc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 c0084c8:	2303      	movs	r3, #3
 c0084ca:	e039      	b.n	c008540 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 c0084cc:	69fb      	ldr	r3, [r7, #28]
 c0084ce:	2b00      	cmp	r3, #0
 c0084d0:	d10b      	bne.n	c0084ea <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 c0084d2:	69bb      	ldr	r3, [r7, #24]
 c0084d4:	881b      	ldrh	r3, [r3, #0]
 c0084d6:	461a      	mov	r2, r3
 c0084d8:	68fb      	ldr	r3, [r7, #12]
 c0084da:	681b      	ldr	r3, [r3, #0]
 c0084dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 c0084e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 c0084e2:	69bb      	ldr	r3, [r7, #24]
 c0084e4:	3302      	adds	r3, #2
 c0084e6:	61bb      	str	r3, [r7, #24]
 c0084e8:	e007      	b.n	c0084fa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 c0084ea:	69fb      	ldr	r3, [r7, #28]
 c0084ec:	781a      	ldrb	r2, [r3, #0]
 c0084ee:	68fb      	ldr	r3, [r7, #12]
 c0084f0:	681b      	ldr	r3, [r3, #0]
 c0084f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 c0084f4:	69fb      	ldr	r3, [r7, #28]
 c0084f6:	3301      	adds	r3, #1
 c0084f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 c0084fa:	68fb      	ldr	r3, [r7, #12]
 c0084fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c008500:	b29b      	uxth	r3, r3
 c008502:	3b01      	subs	r3, #1
 c008504:	b29a      	uxth	r2, r3
 c008506:	68fb      	ldr	r3, [r7, #12]
 c008508:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 c00850c:	68fb      	ldr	r3, [r7, #12]
 c00850e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c008512:	b29b      	uxth	r3, r3
 c008514:	2b00      	cmp	r3, #0
 c008516:	d1cc      	bne.n	c0084b2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 c008518:	683b      	ldr	r3, [r7, #0]
 c00851a:	9300      	str	r3, [sp, #0]
 c00851c:	697b      	ldr	r3, [r7, #20]
 c00851e:	2200      	movs	r2, #0
 c008520:	2140      	movs	r1, #64	; 0x40
 c008522:	68f8      	ldr	r0, [r7, #12]
 c008524:	f000 fccf 	bl	c008ec6 <UART_WaitOnFlagUntilTimeout>
 c008528:	4603      	mov	r3, r0
 c00852a:	2b00      	cmp	r3, #0
 c00852c:	d001      	beq.n	c008532 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 c00852e:	2303      	movs	r3, #3
 c008530:	e006      	b.n	c008540 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 c008532:	68fb      	ldr	r3, [r7, #12]
 c008534:	2220      	movs	r2, #32
 c008536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 c00853a:	2300      	movs	r3, #0
 c00853c:	e000      	b.n	c008540 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 c00853e:	2302      	movs	r3, #2
  }
}
 c008540:	4618      	mov	r0, r3
 c008542:	3720      	adds	r7, #32
 c008544:	46bd      	mov	sp, r7
 c008546:	bd80      	pop	{r7, pc}

0c008548 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c008548:	b580      	push	{r7, lr}
 c00854a:	b08a      	sub	sp, #40	; 0x28
 c00854c:	af02      	add	r7, sp, #8
 c00854e:	60f8      	str	r0, [r7, #12]
 c008550:	60b9      	str	r1, [r7, #8]
 c008552:	603b      	str	r3, [r7, #0]
 c008554:	4613      	mov	r3, r2
 c008556:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 c008558:	68fb      	ldr	r3, [r7, #12]
 c00855a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00855e:	2b20      	cmp	r3, #32
 c008560:	f040 80c0 	bne.w	c0086e4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 c008564:	68bb      	ldr	r3, [r7, #8]
 c008566:	2b00      	cmp	r3, #0
 c008568:	d002      	beq.n	c008570 <HAL_UART_Receive+0x28>
 c00856a:	88fb      	ldrh	r3, [r7, #6]
 c00856c:	2b00      	cmp	r3, #0
 c00856e:	d101      	bne.n	c008574 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 c008570:	2301      	movs	r3, #1
 c008572:	e0b8      	b.n	c0086e6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 c008574:	68fb      	ldr	r3, [r7, #12]
 c008576:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c00857a:	2b01      	cmp	r3, #1
 c00857c:	d101      	bne.n	c008582 <HAL_UART_Receive+0x3a>
 c00857e:	2302      	movs	r3, #2
 c008580:	e0b1      	b.n	c0086e6 <HAL_UART_Receive+0x19e>
 c008582:	68fb      	ldr	r3, [r7, #12]
 c008584:	2201      	movs	r2, #1
 c008586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c00858a:	68fb      	ldr	r3, [r7, #12]
 c00858c:	2200      	movs	r2, #0
 c00858e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 c008592:	68fb      	ldr	r3, [r7, #12]
 c008594:	2222      	movs	r2, #34	; 0x22
 c008596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c00859a:	68fb      	ldr	r3, [r7, #12]
 c00859c:	2200      	movs	r2, #0
 c00859e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c0085a0:	f7fc f992 	bl	c0048c8 <HAL_GetTick>
 c0085a4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 c0085a6:	68fb      	ldr	r3, [r7, #12]
 c0085a8:	88fa      	ldrh	r2, [r7, #6]
 c0085aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 c0085ae:	68fb      	ldr	r3, [r7, #12]
 c0085b0:	88fa      	ldrh	r2, [r7, #6]
 c0085b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 c0085b6:	68fb      	ldr	r3, [r7, #12]
 c0085b8:	689b      	ldr	r3, [r3, #8]
 c0085ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c0085be:	d10e      	bne.n	c0085de <HAL_UART_Receive+0x96>
 c0085c0:	68fb      	ldr	r3, [r7, #12]
 c0085c2:	691b      	ldr	r3, [r3, #16]
 c0085c4:	2b00      	cmp	r3, #0
 c0085c6:	d105      	bne.n	c0085d4 <HAL_UART_Receive+0x8c>
 c0085c8:	68fb      	ldr	r3, [r7, #12]
 c0085ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 c0085ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c0085d2:	e02d      	b.n	c008630 <HAL_UART_Receive+0xe8>
 c0085d4:	68fb      	ldr	r3, [r7, #12]
 c0085d6:	22ff      	movs	r2, #255	; 0xff
 c0085d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c0085dc:	e028      	b.n	c008630 <HAL_UART_Receive+0xe8>
 c0085de:	68fb      	ldr	r3, [r7, #12]
 c0085e0:	689b      	ldr	r3, [r3, #8]
 c0085e2:	2b00      	cmp	r3, #0
 c0085e4:	d10d      	bne.n	c008602 <HAL_UART_Receive+0xba>
 c0085e6:	68fb      	ldr	r3, [r7, #12]
 c0085e8:	691b      	ldr	r3, [r3, #16]
 c0085ea:	2b00      	cmp	r3, #0
 c0085ec:	d104      	bne.n	c0085f8 <HAL_UART_Receive+0xb0>
 c0085ee:	68fb      	ldr	r3, [r7, #12]
 c0085f0:	22ff      	movs	r2, #255	; 0xff
 c0085f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c0085f6:	e01b      	b.n	c008630 <HAL_UART_Receive+0xe8>
 c0085f8:	68fb      	ldr	r3, [r7, #12]
 c0085fa:	227f      	movs	r2, #127	; 0x7f
 c0085fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c008600:	e016      	b.n	c008630 <HAL_UART_Receive+0xe8>
 c008602:	68fb      	ldr	r3, [r7, #12]
 c008604:	689b      	ldr	r3, [r3, #8]
 c008606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c00860a:	d10d      	bne.n	c008628 <HAL_UART_Receive+0xe0>
 c00860c:	68fb      	ldr	r3, [r7, #12]
 c00860e:	691b      	ldr	r3, [r3, #16]
 c008610:	2b00      	cmp	r3, #0
 c008612:	d104      	bne.n	c00861e <HAL_UART_Receive+0xd6>
 c008614:	68fb      	ldr	r3, [r7, #12]
 c008616:	227f      	movs	r2, #127	; 0x7f
 c008618:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c00861c:	e008      	b.n	c008630 <HAL_UART_Receive+0xe8>
 c00861e:	68fb      	ldr	r3, [r7, #12]
 c008620:	223f      	movs	r2, #63	; 0x3f
 c008622:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c008626:	e003      	b.n	c008630 <HAL_UART_Receive+0xe8>
 c008628:	68fb      	ldr	r3, [r7, #12]
 c00862a:	2200      	movs	r2, #0
 c00862c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 c008630:	68fb      	ldr	r3, [r7, #12]
 c008632:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 c008636:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c008638:	68fb      	ldr	r3, [r7, #12]
 c00863a:	689b      	ldr	r3, [r3, #8]
 c00863c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c008640:	d108      	bne.n	c008654 <HAL_UART_Receive+0x10c>
 c008642:	68fb      	ldr	r3, [r7, #12]
 c008644:	691b      	ldr	r3, [r3, #16]
 c008646:	2b00      	cmp	r3, #0
 c008648:	d104      	bne.n	c008654 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 c00864a:	2300      	movs	r3, #0
 c00864c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 c00864e:	68bb      	ldr	r3, [r7, #8]
 c008650:	61bb      	str	r3, [r7, #24]
 c008652:	e003      	b.n	c00865c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 c008654:	68bb      	ldr	r3, [r7, #8]
 c008656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c008658:	2300      	movs	r3, #0
 c00865a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 c00865c:	68fb      	ldr	r3, [r7, #12]
 c00865e:	2200      	movs	r2, #0
 c008660:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 c008664:	e032      	b.n	c0086cc <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 c008666:	683b      	ldr	r3, [r7, #0]
 c008668:	9300      	str	r3, [sp, #0]
 c00866a:	697b      	ldr	r3, [r7, #20]
 c00866c:	2200      	movs	r2, #0
 c00866e:	2120      	movs	r1, #32
 c008670:	68f8      	ldr	r0, [r7, #12]
 c008672:	f000 fc28 	bl	c008ec6 <UART_WaitOnFlagUntilTimeout>
 c008676:	4603      	mov	r3, r0
 c008678:	2b00      	cmp	r3, #0
 c00867a:	d001      	beq.n	c008680 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 c00867c:	2303      	movs	r3, #3
 c00867e:	e032      	b.n	c0086e6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 c008680:	69fb      	ldr	r3, [r7, #28]
 c008682:	2b00      	cmp	r3, #0
 c008684:	d10c      	bne.n	c0086a0 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 c008686:	68fb      	ldr	r3, [r7, #12]
 c008688:	681b      	ldr	r3, [r3, #0]
 c00868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00868c:	b29a      	uxth	r2, r3
 c00868e:	8a7b      	ldrh	r3, [r7, #18]
 c008690:	4013      	ands	r3, r2
 c008692:	b29a      	uxth	r2, r3
 c008694:	69bb      	ldr	r3, [r7, #24]
 c008696:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 c008698:	69bb      	ldr	r3, [r7, #24]
 c00869a:	3302      	adds	r3, #2
 c00869c:	61bb      	str	r3, [r7, #24]
 c00869e:	e00c      	b.n	c0086ba <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 c0086a0:	68fb      	ldr	r3, [r7, #12]
 c0086a2:	681b      	ldr	r3, [r3, #0]
 c0086a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0086a6:	b2da      	uxtb	r2, r3
 c0086a8:	8a7b      	ldrh	r3, [r7, #18]
 c0086aa:	b2db      	uxtb	r3, r3
 c0086ac:	4013      	ands	r3, r2
 c0086ae:	b2da      	uxtb	r2, r3
 c0086b0:	69fb      	ldr	r3, [r7, #28]
 c0086b2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 c0086b4:	69fb      	ldr	r3, [r7, #28]
 c0086b6:	3301      	adds	r3, #1
 c0086b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 c0086ba:	68fb      	ldr	r3, [r7, #12]
 c0086bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 c0086c0:	b29b      	uxth	r3, r3
 c0086c2:	3b01      	subs	r3, #1
 c0086c4:	b29a      	uxth	r2, r3
 c0086c6:	68fb      	ldr	r3, [r7, #12]
 c0086c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 c0086cc:	68fb      	ldr	r3, [r7, #12]
 c0086ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 c0086d2:	b29b      	uxth	r3, r3
 c0086d4:	2b00      	cmp	r3, #0
 c0086d6:	d1c6      	bne.n	c008666 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 c0086d8:	68fb      	ldr	r3, [r7, #12]
 c0086da:	2220      	movs	r2, #32
 c0086dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 c0086e0:	2300      	movs	r3, #0
 c0086e2:	e000      	b.n	c0086e6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 c0086e4:	2302      	movs	r3, #2
  }
}
 c0086e6:	4618      	mov	r0, r3
 c0086e8:	3720      	adds	r7, #32
 c0086ea:	46bd      	mov	sp, r7
 c0086ec:	bd80      	pop	{r7, pc}
	...

0c0086f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 c0086f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c0086f4:	b08c      	sub	sp, #48	; 0x30
 c0086f6:	af00      	add	r7, sp, #0
 c0086f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 c0086fa:	2300      	movs	r3, #0
 c0086fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c008700:	697b      	ldr	r3, [r7, #20]
 c008702:	689a      	ldr	r2, [r3, #8]
 c008704:	697b      	ldr	r3, [r7, #20]
 c008706:	691b      	ldr	r3, [r3, #16]
 c008708:	431a      	orrs	r2, r3
 c00870a:	697b      	ldr	r3, [r7, #20]
 c00870c:	695b      	ldr	r3, [r3, #20]
 c00870e:	431a      	orrs	r2, r3
 c008710:	697b      	ldr	r3, [r7, #20]
 c008712:	69db      	ldr	r3, [r3, #28]
 c008714:	4313      	orrs	r3, r2
 c008716:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c008718:	697b      	ldr	r3, [r7, #20]
 c00871a:	681b      	ldr	r3, [r3, #0]
 c00871c:	681a      	ldr	r2, [r3, #0]
 c00871e:	4baa      	ldr	r3, [pc, #680]	; (c0089c8 <UART_SetConfig+0x2d8>)
 c008720:	4013      	ands	r3, r2
 c008722:	697a      	ldr	r2, [r7, #20]
 c008724:	6812      	ldr	r2, [r2, #0]
 c008726:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c008728:	430b      	orrs	r3, r1
 c00872a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c00872c:	697b      	ldr	r3, [r7, #20]
 c00872e:	681b      	ldr	r3, [r3, #0]
 c008730:	685b      	ldr	r3, [r3, #4]
 c008732:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 c008736:	697b      	ldr	r3, [r7, #20]
 c008738:	68da      	ldr	r2, [r3, #12]
 c00873a:	697b      	ldr	r3, [r7, #20]
 c00873c:	681b      	ldr	r3, [r3, #0]
 c00873e:	430a      	orrs	r2, r1
 c008740:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c008742:	697b      	ldr	r3, [r7, #20]
 c008744:	699b      	ldr	r3, [r3, #24]
 c008746:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c008748:	697b      	ldr	r3, [r7, #20]
 c00874a:	681b      	ldr	r3, [r3, #0]
 c00874c:	4a9f      	ldr	r2, [pc, #636]	; (c0089cc <UART_SetConfig+0x2dc>)
 c00874e:	4293      	cmp	r3, r2
 c008750:	d004      	beq.n	c00875c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 c008752:	697b      	ldr	r3, [r7, #20]
 c008754:	6a1b      	ldr	r3, [r3, #32]
 c008756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c008758:	4313      	orrs	r3, r2
 c00875a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c00875c:	697b      	ldr	r3, [r7, #20]
 c00875e:	681b      	ldr	r3, [r3, #0]
 c008760:	689b      	ldr	r3, [r3, #8]
 c008762:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 c008766:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 c00876a:	697a      	ldr	r2, [r7, #20]
 c00876c:	6812      	ldr	r2, [r2, #0]
 c00876e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c008770:	430b      	orrs	r3, r1
 c008772:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c008774:	697b      	ldr	r3, [r7, #20]
 c008776:	681b      	ldr	r3, [r3, #0]
 c008778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c00877a:	f023 010f 	bic.w	r1, r3, #15
 c00877e:	697b      	ldr	r3, [r7, #20]
 c008780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c008782:	697b      	ldr	r3, [r7, #20]
 c008784:	681b      	ldr	r3, [r3, #0]
 c008786:	430a      	orrs	r2, r1
 c008788:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 c00878a:	697b      	ldr	r3, [r7, #20]
 c00878c:	681b      	ldr	r3, [r3, #0]
 c00878e:	4a90      	ldr	r2, [pc, #576]	; (c0089d0 <UART_SetConfig+0x2e0>)
 c008790:	4293      	cmp	r3, r2
 c008792:	d125      	bne.n	c0087e0 <UART_SetConfig+0xf0>
 c008794:	4b8f      	ldr	r3, [pc, #572]	; (c0089d4 <UART_SetConfig+0x2e4>)
 c008796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00879a:	f003 0303 	and.w	r3, r3, #3
 c00879e:	2b03      	cmp	r3, #3
 c0087a0:	d81a      	bhi.n	c0087d8 <UART_SetConfig+0xe8>
 c0087a2:	a201      	add	r2, pc, #4	; (adr r2, c0087a8 <UART_SetConfig+0xb8>)
 c0087a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0087a8:	0c0087b9 	.word	0x0c0087b9
 c0087ac:	0c0087c9 	.word	0x0c0087c9
 c0087b0:	0c0087c1 	.word	0x0c0087c1
 c0087b4:	0c0087d1 	.word	0x0c0087d1
 c0087b8:	2301      	movs	r3, #1
 c0087ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0087be:	e114      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c0087c0:	2302      	movs	r3, #2
 c0087c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0087c6:	e110      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c0087c8:	2304      	movs	r3, #4
 c0087ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0087ce:	e10c      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c0087d0:	2308      	movs	r3, #8
 c0087d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0087d6:	e108      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c0087d8:	2310      	movs	r3, #16
 c0087da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0087de:	e104      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c0087e0:	697b      	ldr	r3, [r7, #20]
 c0087e2:	681b      	ldr	r3, [r3, #0]
 c0087e4:	4a7c      	ldr	r2, [pc, #496]	; (c0089d8 <UART_SetConfig+0x2e8>)
 c0087e6:	4293      	cmp	r3, r2
 c0087e8:	d138      	bne.n	c00885c <UART_SetConfig+0x16c>
 c0087ea:	4b7a      	ldr	r3, [pc, #488]	; (c0089d4 <UART_SetConfig+0x2e4>)
 c0087ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0087f0:	f003 030c 	and.w	r3, r3, #12
 c0087f4:	2b0c      	cmp	r3, #12
 c0087f6:	d82d      	bhi.n	c008854 <UART_SetConfig+0x164>
 c0087f8:	a201      	add	r2, pc, #4	; (adr r2, c008800 <UART_SetConfig+0x110>)
 c0087fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0087fe:	bf00      	nop
 c008800:	0c008835 	.word	0x0c008835
 c008804:	0c008855 	.word	0x0c008855
 c008808:	0c008855 	.word	0x0c008855
 c00880c:	0c008855 	.word	0x0c008855
 c008810:	0c008845 	.word	0x0c008845
 c008814:	0c008855 	.word	0x0c008855
 c008818:	0c008855 	.word	0x0c008855
 c00881c:	0c008855 	.word	0x0c008855
 c008820:	0c00883d 	.word	0x0c00883d
 c008824:	0c008855 	.word	0x0c008855
 c008828:	0c008855 	.word	0x0c008855
 c00882c:	0c008855 	.word	0x0c008855
 c008830:	0c00884d 	.word	0x0c00884d
 c008834:	2300      	movs	r3, #0
 c008836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00883a:	e0d6      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c00883c:	2302      	movs	r3, #2
 c00883e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008842:	e0d2      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c008844:	2304      	movs	r3, #4
 c008846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00884a:	e0ce      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c00884c:	2308      	movs	r3, #8
 c00884e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008852:	e0ca      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c008854:	2310      	movs	r3, #16
 c008856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00885a:	e0c6      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c00885c:	697b      	ldr	r3, [r7, #20]
 c00885e:	681b      	ldr	r3, [r3, #0]
 c008860:	4a5e      	ldr	r2, [pc, #376]	; (c0089dc <UART_SetConfig+0x2ec>)
 c008862:	4293      	cmp	r3, r2
 c008864:	d125      	bne.n	c0088b2 <UART_SetConfig+0x1c2>
 c008866:	4b5b      	ldr	r3, [pc, #364]	; (c0089d4 <UART_SetConfig+0x2e4>)
 c008868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00886c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 c008870:	2b30      	cmp	r3, #48	; 0x30
 c008872:	d016      	beq.n	c0088a2 <UART_SetConfig+0x1b2>
 c008874:	2b30      	cmp	r3, #48	; 0x30
 c008876:	d818      	bhi.n	c0088aa <UART_SetConfig+0x1ba>
 c008878:	2b20      	cmp	r3, #32
 c00887a:	d00a      	beq.n	c008892 <UART_SetConfig+0x1a2>
 c00887c:	2b20      	cmp	r3, #32
 c00887e:	d814      	bhi.n	c0088aa <UART_SetConfig+0x1ba>
 c008880:	2b00      	cmp	r3, #0
 c008882:	d002      	beq.n	c00888a <UART_SetConfig+0x19a>
 c008884:	2b10      	cmp	r3, #16
 c008886:	d008      	beq.n	c00889a <UART_SetConfig+0x1aa>
 c008888:	e00f      	b.n	c0088aa <UART_SetConfig+0x1ba>
 c00888a:	2300      	movs	r3, #0
 c00888c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008890:	e0ab      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c008892:	2302      	movs	r3, #2
 c008894:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008898:	e0a7      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c00889a:	2304      	movs	r3, #4
 c00889c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0088a0:	e0a3      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c0088a2:	2308      	movs	r3, #8
 c0088a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0088a8:	e09f      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c0088aa:	2310      	movs	r3, #16
 c0088ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0088b0:	e09b      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c0088b2:	697b      	ldr	r3, [r7, #20]
 c0088b4:	681b      	ldr	r3, [r3, #0]
 c0088b6:	4a4a      	ldr	r2, [pc, #296]	; (c0089e0 <UART_SetConfig+0x2f0>)
 c0088b8:	4293      	cmp	r3, r2
 c0088ba:	d125      	bne.n	c008908 <UART_SetConfig+0x218>
 c0088bc:	4b45      	ldr	r3, [pc, #276]	; (c0089d4 <UART_SetConfig+0x2e4>)
 c0088be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0088c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 c0088c6:	2bc0      	cmp	r3, #192	; 0xc0
 c0088c8:	d016      	beq.n	c0088f8 <UART_SetConfig+0x208>
 c0088ca:	2bc0      	cmp	r3, #192	; 0xc0
 c0088cc:	d818      	bhi.n	c008900 <UART_SetConfig+0x210>
 c0088ce:	2b80      	cmp	r3, #128	; 0x80
 c0088d0:	d00a      	beq.n	c0088e8 <UART_SetConfig+0x1f8>
 c0088d2:	2b80      	cmp	r3, #128	; 0x80
 c0088d4:	d814      	bhi.n	c008900 <UART_SetConfig+0x210>
 c0088d6:	2b00      	cmp	r3, #0
 c0088d8:	d002      	beq.n	c0088e0 <UART_SetConfig+0x1f0>
 c0088da:	2b40      	cmp	r3, #64	; 0x40
 c0088dc:	d008      	beq.n	c0088f0 <UART_SetConfig+0x200>
 c0088de:	e00f      	b.n	c008900 <UART_SetConfig+0x210>
 c0088e0:	2300      	movs	r3, #0
 c0088e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0088e6:	e080      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c0088e8:	2302      	movs	r3, #2
 c0088ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0088ee:	e07c      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c0088f0:	2304      	movs	r3, #4
 c0088f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0088f6:	e078      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c0088f8:	2308      	movs	r3, #8
 c0088fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0088fe:	e074      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c008900:	2310      	movs	r3, #16
 c008902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008906:	e070      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c008908:	697b      	ldr	r3, [r7, #20]
 c00890a:	681b      	ldr	r3, [r3, #0]
 c00890c:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 c008910:	d12a      	bne.n	c008968 <UART_SetConfig+0x278>
 c008912:	4b30      	ldr	r3, [pc, #192]	; (c0089d4 <UART_SetConfig+0x2e4>)
 c008914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c008918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c00891c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c008920:	d01a      	beq.n	c008958 <UART_SetConfig+0x268>
 c008922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c008926:	d81b      	bhi.n	c008960 <UART_SetConfig+0x270>
 c008928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c00892c:	d00c      	beq.n	c008948 <UART_SetConfig+0x258>
 c00892e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c008932:	d815      	bhi.n	c008960 <UART_SetConfig+0x270>
 c008934:	2b00      	cmp	r3, #0
 c008936:	d003      	beq.n	c008940 <UART_SetConfig+0x250>
 c008938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c00893c:	d008      	beq.n	c008950 <UART_SetConfig+0x260>
 c00893e:	e00f      	b.n	c008960 <UART_SetConfig+0x270>
 c008940:	2300      	movs	r3, #0
 c008942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008946:	e050      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c008948:	2302      	movs	r3, #2
 c00894a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00894e:	e04c      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c008950:	2304      	movs	r3, #4
 c008952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008956:	e048      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c008958:	2308      	movs	r3, #8
 c00895a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00895e:	e044      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c008960:	2310      	movs	r3, #16
 c008962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008966:	e040      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c008968:	697b      	ldr	r3, [r7, #20]
 c00896a:	681b      	ldr	r3, [r3, #0]
 c00896c:	4a17      	ldr	r2, [pc, #92]	; (c0089cc <UART_SetConfig+0x2dc>)
 c00896e:	4293      	cmp	r3, r2
 c008970:	d138      	bne.n	c0089e4 <UART_SetConfig+0x2f4>
 c008972:	4b18      	ldr	r3, [pc, #96]	; (c0089d4 <UART_SetConfig+0x2e4>)
 c008974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c008978:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 c00897c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c008980:	d01a      	beq.n	c0089b8 <UART_SetConfig+0x2c8>
 c008982:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c008986:	d81b      	bhi.n	c0089c0 <UART_SetConfig+0x2d0>
 c008988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c00898c:	d00c      	beq.n	c0089a8 <UART_SetConfig+0x2b8>
 c00898e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c008992:	d815      	bhi.n	c0089c0 <UART_SetConfig+0x2d0>
 c008994:	2b00      	cmp	r3, #0
 c008996:	d003      	beq.n	c0089a0 <UART_SetConfig+0x2b0>
 c008998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c00899c:	d008      	beq.n	c0089b0 <UART_SetConfig+0x2c0>
 c00899e:	e00f      	b.n	c0089c0 <UART_SetConfig+0x2d0>
 c0089a0:	2300      	movs	r3, #0
 c0089a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0089a6:	e020      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c0089a8:	2302      	movs	r3, #2
 c0089aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0089ae:	e01c      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c0089b0:	2304      	movs	r3, #4
 c0089b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0089b6:	e018      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c0089b8:	2308      	movs	r3, #8
 c0089ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0089be:	e014      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c0089c0:	2310      	movs	r3, #16
 c0089c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0089c6:	e010      	b.n	c0089ea <UART_SetConfig+0x2fa>
 c0089c8:	cfff69f3 	.word	0xcfff69f3
 c0089cc:	50008000 	.word	0x50008000
 c0089d0:	50013800 	.word	0x50013800
 c0089d4:	50021000 	.word	0x50021000
 c0089d8:	50004400 	.word	0x50004400
 c0089dc:	50004800 	.word	0x50004800
 c0089e0:	50004c00 	.word	0x50004c00
 c0089e4:	2310      	movs	r3, #16
 c0089e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 c0089ea:	697b      	ldr	r3, [r7, #20]
 c0089ec:	681b      	ldr	r3, [r3, #0]
 c0089ee:	4ab0      	ldr	r2, [pc, #704]	; (c008cb0 <UART_SetConfig+0x5c0>)
 c0089f0:	4293      	cmp	r3, r2
 c0089f2:	f040 809b 	bne.w	c008b2c <UART_SetConfig+0x43c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 c0089f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c0089fa:	2b08      	cmp	r3, #8
 c0089fc:	d827      	bhi.n	c008a4e <UART_SetConfig+0x35e>
 c0089fe:	a201      	add	r2, pc, #4	; (adr r2, c008a04 <UART_SetConfig+0x314>)
 c008a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c008a04:	0c008a29 	.word	0x0c008a29
 c008a08:	0c008a31 	.word	0x0c008a31
 c008a0c:	0c008a39 	.word	0x0c008a39
 c008a10:	0c008a4f 	.word	0x0c008a4f
 c008a14:	0c008a3f 	.word	0x0c008a3f
 c008a18:	0c008a4f 	.word	0x0c008a4f
 c008a1c:	0c008a4f 	.word	0x0c008a4f
 c008a20:	0c008a4f 	.word	0x0c008a4f
 c008a24:	0c008a47 	.word	0x0c008a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c008a28:	f7fe fa1c 	bl	c006e64 <HAL_RCC_GetPCLK1Freq>
 c008a2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c008a2e:	e014      	b.n	c008a5a <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c008a30:	f7fe fa2c 	bl	c006e8c <HAL_RCC_GetPCLK2Freq>
 c008a34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c008a36:	e010      	b.n	c008a5a <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c008a38:	4b9e      	ldr	r3, [pc, #632]	; (c008cb4 <UART_SetConfig+0x5c4>)
 c008a3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c008a3c:	e00d      	b.n	c008a5a <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c008a3e:	f7fe f961 	bl	c006d04 <HAL_RCC_GetSysClockFreq>
 c008a42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c008a44:	e009      	b.n	c008a5a <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c008a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c008a4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c008a4c:	e005      	b.n	c008a5a <UART_SetConfig+0x36a>
      default:
        pclk = 0U;
 c008a4e:	2300      	movs	r3, #0
 c008a50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c008a52:	2301      	movs	r3, #1
 c008a54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c008a58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 c008a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c008a5c:	2b00      	cmp	r3, #0
 c008a5e:	f000 8130 	beq.w	c008cc2 <UART_SetConfig+0x5d2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c008a62:	697b      	ldr	r3, [r7, #20]
 c008a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c008a66:	4a94      	ldr	r2, [pc, #592]	; (c008cb8 <UART_SetConfig+0x5c8>)
 c008a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c008a6c:	461a      	mov	r2, r3
 c008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c008a70:	fbb3 f3f2 	udiv	r3, r3, r2
 c008a74:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
//      volatile uint32_t value1 = 3U * huart->Init.BaudRate;
//      volatile uint32_t value2 = 4096U * huart->Init.BaudRate;
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c008a76:	697b      	ldr	r3, [r7, #20]
 c008a78:	685a      	ldr	r2, [r3, #4]
 c008a7a:	4613      	mov	r3, r2
 c008a7c:	005b      	lsls	r3, r3, #1
 c008a7e:	4413      	add	r3, r2
 c008a80:	69ba      	ldr	r2, [r7, #24]
 c008a82:	429a      	cmp	r2, r3
 c008a84:	d305      	bcc.n	c008a92 <UART_SetConfig+0x3a2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 c008a86:	697b      	ldr	r3, [r7, #20]
 c008a88:	685b      	ldr	r3, [r3, #4]
 c008a8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c008a8c:	69ba      	ldr	r2, [r7, #24]
 c008a8e:	429a      	cmp	r2, r3
 c008a90:	d903      	bls.n	c008a9a <UART_SetConfig+0x3aa>
      {
        ret = HAL_ERROR;
 c008a92:	2301      	movs	r3, #1
 c008a94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c008a98:	e113      	b.n	c008cc2 <UART_SetConfig+0x5d2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c008a9c:	2200      	movs	r2, #0
 c008a9e:	60bb      	str	r3, [r7, #8]
 c008aa0:	60fa      	str	r2, [r7, #12]
 c008aa2:	697b      	ldr	r3, [r7, #20]
 c008aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c008aa6:	4a84      	ldr	r2, [pc, #528]	; (c008cb8 <UART_SetConfig+0x5c8>)
 c008aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c008aac:	b29b      	uxth	r3, r3
 c008aae:	2200      	movs	r2, #0
 c008ab0:	603b      	str	r3, [r7, #0]
 c008ab2:	607a      	str	r2, [r7, #4]
 c008ab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 c008ab8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 c008abc:	f7f7 fbf8 	bl	c0002b0 <__aeabi_uldivmod>
 c008ac0:	4602      	mov	r2, r0
 c008ac2:	460b      	mov	r3, r1
 c008ac4:	4610      	mov	r0, r2
 c008ac6:	4619      	mov	r1, r3
 c008ac8:	f04f 0200 	mov.w	r2, #0
 c008acc:	f04f 0300 	mov.w	r3, #0
 c008ad0:	020b      	lsls	r3, r1, #8
 c008ad2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 c008ad6:	0202      	lsls	r2, r0, #8
 c008ad8:	6979      	ldr	r1, [r7, #20]
 c008ada:	6849      	ldr	r1, [r1, #4]
 c008adc:	0849      	lsrs	r1, r1, #1
 c008ade:	2000      	movs	r0, #0
 c008ae0:	460c      	mov	r4, r1
 c008ae2:	4605      	mov	r5, r0
 c008ae4:	eb12 0804 	adds.w	r8, r2, r4
 c008ae8:	eb43 0905 	adc.w	r9, r3, r5
 c008aec:	697b      	ldr	r3, [r7, #20]
 c008aee:	685b      	ldr	r3, [r3, #4]
 c008af0:	2200      	movs	r2, #0
 c008af2:	469a      	mov	sl, r3
 c008af4:	4693      	mov	fp, r2
 c008af6:	4652      	mov	r2, sl
 c008af8:	465b      	mov	r3, fp
 c008afa:	4640      	mov	r0, r8
 c008afc:	4649      	mov	r1, r9
 c008afe:	f7f7 fbd7 	bl	c0002b0 <__aeabi_uldivmod>
 c008b02:	4602      	mov	r2, r0
 c008b04:	460b      	mov	r3, r1
 c008b06:	4613      	mov	r3, r2
 c008b08:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c008b0a:	6a3b      	ldr	r3, [r7, #32]
 c008b0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c008b10:	d308      	bcc.n	c008b24 <UART_SetConfig+0x434>
 c008b12:	6a3b      	ldr	r3, [r7, #32]
 c008b14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c008b18:	d204      	bcs.n	c008b24 <UART_SetConfig+0x434>
        {
          huart->Instance->BRR = usartdiv;
 c008b1a:	697b      	ldr	r3, [r7, #20]
 c008b1c:	681b      	ldr	r3, [r3, #0]
 c008b1e:	6a3a      	ldr	r2, [r7, #32]
 c008b20:	60da      	str	r2, [r3, #12]
 c008b22:	e0ce      	b.n	c008cc2 <UART_SetConfig+0x5d2>
        }
        else
        {
          ret = HAL_ERROR;
 c008b24:	2301      	movs	r3, #1
 c008b26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c008b2a:	e0ca      	b.n	c008cc2 <UART_SetConfig+0x5d2>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c008b2c:	697b      	ldr	r3, [r7, #20]
 c008b2e:	69db      	ldr	r3, [r3, #28]
 c008b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c008b34:	d167      	bne.n	c008c06 <UART_SetConfig+0x516>
  {
    switch (clocksource)
 c008b36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c008b3a:	2b08      	cmp	r3, #8
 c008b3c:	d827      	bhi.n	c008b8e <UART_SetConfig+0x49e>
 c008b3e:	a201      	add	r2, pc, #4	; (adr r2, c008b44 <UART_SetConfig+0x454>)
 c008b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c008b44:	0c008b69 	.word	0x0c008b69
 c008b48:	0c008b71 	.word	0x0c008b71
 c008b4c:	0c008b79 	.word	0x0c008b79
 c008b50:	0c008b8f 	.word	0x0c008b8f
 c008b54:	0c008b7f 	.word	0x0c008b7f
 c008b58:	0c008b8f 	.word	0x0c008b8f
 c008b5c:	0c008b8f 	.word	0x0c008b8f
 c008b60:	0c008b8f 	.word	0x0c008b8f
 c008b64:	0c008b87 	.word	0x0c008b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c008b68:	f7fe f97c 	bl	c006e64 <HAL_RCC_GetPCLK1Freq>
 c008b6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c008b6e:	e014      	b.n	c008b9a <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c008b70:	f7fe f98c 	bl	c006e8c <HAL_RCC_GetPCLK2Freq>
 c008b74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c008b76:	e010      	b.n	c008b9a <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c008b78:	4b4e      	ldr	r3, [pc, #312]	; (c008cb4 <UART_SetConfig+0x5c4>)
 c008b7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c008b7c:	e00d      	b.n	c008b9a <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c008b7e:	f7fe f8c1 	bl	c006d04 <HAL_RCC_GetSysClockFreq>
 c008b82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c008b84:	e009      	b.n	c008b9a <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c008b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c008b8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c008b8c:	e005      	b.n	c008b9a <UART_SetConfig+0x4aa>
      default:
        pclk = 0U;
 c008b8e:	2300      	movs	r3, #0
 c008b90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c008b92:	2301      	movs	r3, #1
 c008b94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c008b98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 c008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c008b9c:	2b00      	cmp	r3, #0
 c008b9e:	f000 8090 	beq.w	c008cc2 <UART_SetConfig+0x5d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c008ba2:	697b      	ldr	r3, [r7, #20]
 c008ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c008ba6:	4a44      	ldr	r2, [pc, #272]	; (c008cb8 <UART_SetConfig+0x5c8>)
 c008ba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c008bac:	461a      	mov	r2, r3
 c008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c008bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 c008bb4:	005a      	lsls	r2, r3, #1
 c008bb6:	697b      	ldr	r3, [r7, #20]
 c008bb8:	685b      	ldr	r3, [r3, #4]
 c008bba:	085b      	lsrs	r3, r3, #1
 c008bbc:	441a      	add	r2, r3
 c008bbe:	697b      	ldr	r3, [r7, #20]
 c008bc0:	685b      	ldr	r3, [r3, #4]
 c008bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 c008bc6:	b29b      	uxth	r3, r3
 c008bc8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c008bca:	6a3b      	ldr	r3, [r7, #32]
 c008bcc:	2b0f      	cmp	r3, #15
 c008bce:	d916      	bls.n	c008bfe <UART_SetConfig+0x50e>
 c008bd0:	6a3b      	ldr	r3, [r7, #32]
 c008bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c008bd6:	d212      	bcs.n	c008bfe <UART_SetConfig+0x50e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c008bd8:	6a3b      	ldr	r3, [r7, #32]
 c008bda:	b29b      	uxth	r3, r3
 c008bdc:	f023 030f 	bic.w	r3, r3, #15
 c008be0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c008be2:	6a3b      	ldr	r3, [r7, #32]
 c008be4:	085b      	lsrs	r3, r3, #1
 c008be6:	b29b      	uxth	r3, r3
 c008be8:	f003 0307 	and.w	r3, r3, #7
 c008bec:	b29a      	uxth	r2, r3
 c008bee:	8bfb      	ldrh	r3, [r7, #30]
 c008bf0:	4313      	orrs	r3, r2
 c008bf2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 c008bf4:	697b      	ldr	r3, [r7, #20]
 c008bf6:	681b      	ldr	r3, [r3, #0]
 c008bf8:	8bfa      	ldrh	r2, [r7, #30]
 c008bfa:	60da      	str	r2, [r3, #12]
 c008bfc:	e061      	b.n	c008cc2 <UART_SetConfig+0x5d2>
      }
      else
      {
        ret = HAL_ERROR;
 c008bfe:	2301      	movs	r3, #1
 c008c00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c008c04:	e05d      	b.n	c008cc2 <UART_SetConfig+0x5d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 c008c06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c008c0a:	2b08      	cmp	r3, #8
 c008c0c:	d827      	bhi.n	c008c5e <UART_SetConfig+0x56e>
 c008c0e:	a201      	add	r2, pc, #4	; (adr r2, c008c14 <UART_SetConfig+0x524>)
 c008c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c008c14:	0c008c39 	.word	0x0c008c39
 c008c18:	0c008c41 	.word	0x0c008c41
 c008c1c:	0c008c49 	.word	0x0c008c49
 c008c20:	0c008c5f 	.word	0x0c008c5f
 c008c24:	0c008c4f 	.word	0x0c008c4f
 c008c28:	0c008c5f 	.word	0x0c008c5f
 c008c2c:	0c008c5f 	.word	0x0c008c5f
 c008c30:	0c008c5f 	.word	0x0c008c5f
 c008c34:	0c008c57 	.word	0x0c008c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c008c38:	f7fe f914 	bl	c006e64 <HAL_RCC_GetPCLK1Freq>
 c008c3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c008c3e:	e014      	b.n	c008c6a <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c008c40:	f7fe f924 	bl	c006e8c <HAL_RCC_GetPCLK2Freq>
 c008c44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c008c46:	e010      	b.n	c008c6a <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c008c48:	4b1a      	ldr	r3, [pc, #104]	; (c008cb4 <UART_SetConfig+0x5c4>)
 c008c4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c008c4c:	e00d      	b.n	c008c6a <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c008c4e:	f7fe f859 	bl	c006d04 <HAL_RCC_GetSysClockFreq>
 c008c52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c008c54:	e009      	b.n	c008c6a <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c008c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c008c5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c008c5c:	e005      	b.n	c008c6a <UART_SetConfig+0x57a>
      default:
        pclk = 0U;
 c008c5e:	2300      	movs	r3, #0
 c008c60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c008c62:	2301      	movs	r3, #1
 c008c64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c008c68:	bf00      	nop
    }

    if (pclk != 0U)
 c008c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c008c6c:	2b00      	cmp	r3, #0
 c008c6e:	d028      	beq.n	c008cc2 <UART_SetConfig+0x5d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c008c70:	697b      	ldr	r3, [r7, #20]
 c008c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c008c74:	4a10      	ldr	r2, [pc, #64]	; (c008cb8 <UART_SetConfig+0x5c8>)
 c008c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c008c7a:	461a      	mov	r2, r3
 c008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c008c7e:	fbb3 f2f2 	udiv	r2, r3, r2
 c008c82:	697b      	ldr	r3, [r7, #20]
 c008c84:	685b      	ldr	r3, [r3, #4]
 c008c86:	085b      	lsrs	r3, r3, #1
 c008c88:	441a      	add	r2, r3
 c008c8a:	697b      	ldr	r3, [r7, #20]
 c008c8c:	685b      	ldr	r3, [r3, #4]
 c008c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 c008c92:	b29b      	uxth	r3, r3
 c008c94:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c008c96:	6a3b      	ldr	r3, [r7, #32]
 c008c98:	2b0f      	cmp	r3, #15
 c008c9a:	d90f      	bls.n	c008cbc <UART_SetConfig+0x5cc>
 c008c9c:	6a3b      	ldr	r3, [r7, #32]
 c008c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c008ca2:	d20b      	bcs.n	c008cbc <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = usartdiv;
 c008ca4:	697b      	ldr	r3, [r7, #20]
 c008ca6:	681b      	ldr	r3, [r3, #0]
 c008ca8:	6a3a      	ldr	r2, [r7, #32]
 c008caa:	60da      	str	r2, [r3, #12]
 c008cac:	e009      	b.n	c008cc2 <UART_SetConfig+0x5d2>
 c008cae:	bf00      	nop
 c008cb0:	50008000 	.word	0x50008000
 c008cb4:	00f42400 	.word	0x00f42400
 c008cb8:	0c009394 	.word	0x0c009394
      }
      else
      {
        ret = HAL_ERROR;
 c008cbc:	2301      	movs	r3, #1
 c008cbe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 c008cc2:	697b      	ldr	r3, [r7, #20]
 c008cc4:	2201      	movs	r2, #1
 c008cc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 c008cca:	697b      	ldr	r3, [r7, #20]
 c008ccc:	2201      	movs	r2, #1
 c008cce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 c008cd2:	697b      	ldr	r3, [r7, #20]
 c008cd4:	2200      	movs	r2, #0
 c008cd6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 c008cd8:	697b      	ldr	r3, [r7, #20]
 c008cda:	2200      	movs	r2, #0
 c008cdc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 c008cde:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 c008ce2:	4618      	mov	r0, r3
 c008ce4:	3730      	adds	r7, #48	; 0x30
 c008ce6:	46bd      	mov	sp, r7
 c008ce8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c008cec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 c008cec:	b480      	push	{r7}
 c008cee:	b083      	sub	sp, #12
 c008cf0:	af00      	add	r7, sp, #0
 c008cf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c008cf4:	687b      	ldr	r3, [r7, #4]
 c008cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c008cf8:	f003 0301 	and.w	r3, r3, #1
 c008cfc:	2b00      	cmp	r3, #0
 c008cfe:	d00a      	beq.n	c008d16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c008d00:	687b      	ldr	r3, [r7, #4]
 c008d02:	681b      	ldr	r3, [r3, #0]
 c008d04:	685b      	ldr	r3, [r3, #4]
 c008d06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 c008d0a:	687b      	ldr	r3, [r7, #4]
 c008d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c008d0e:	687b      	ldr	r3, [r7, #4]
 c008d10:	681b      	ldr	r3, [r3, #0]
 c008d12:	430a      	orrs	r2, r1
 c008d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c008d16:	687b      	ldr	r3, [r7, #4]
 c008d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c008d1a:	f003 0302 	and.w	r3, r3, #2
 c008d1e:	2b00      	cmp	r3, #0
 c008d20:	d00a      	beq.n	c008d38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c008d22:	687b      	ldr	r3, [r7, #4]
 c008d24:	681b      	ldr	r3, [r3, #0]
 c008d26:	685b      	ldr	r3, [r3, #4]
 c008d28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 c008d2c:	687b      	ldr	r3, [r7, #4]
 c008d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c008d30:	687b      	ldr	r3, [r7, #4]
 c008d32:	681b      	ldr	r3, [r3, #0]
 c008d34:	430a      	orrs	r2, r1
 c008d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c008d38:	687b      	ldr	r3, [r7, #4]
 c008d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c008d3c:	f003 0304 	and.w	r3, r3, #4
 c008d40:	2b00      	cmp	r3, #0
 c008d42:	d00a      	beq.n	c008d5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c008d44:	687b      	ldr	r3, [r7, #4]
 c008d46:	681b      	ldr	r3, [r3, #0]
 c008d48:	685b      	ldr	r3, [r3, #4]
 c008d4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 c008d4e:	687b      	ldr	r3, [r7, #4]
 c008d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c008d52:	687b      	ldr	r3, [r7, #4]
 c008d54:	681b      	ldr	r3, [r3, #0]
 c008d56:	430a      	orrs	r2, r1
 c008d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c008d5a:	687b      	ldr	r3, [r7, #4]
 c008d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c008d5e:	f003 0308 	and.w	r3, r3, #8
 c008d62:	2b00      	cmp	r3, #0
 c008d64:	d00a      	beq.n	c008d7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c008d66:	687b      	ldr	r3, [r7, #4]
 c008d68:	681b      	ldr	r3, [r3, #0]
 c008d6a:	685b      	ldr	r3, [r3, #4]
 c008d6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 c008d70:	687b      	ldr	r3, [r7, #4]
 c008d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 c008d74:	687b      	ldr	r3, [r7, #4]
 c008d76:	681b      	ldr	r3, [r3, #0]
 c008d78:	430a      	orrs	r2, r1
 c008d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c008d7c:	687b      	ldr	r3, [r7, #4]
 c008d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c008d80:	f003 0310 	and.w	r3, r3, #16
 c008d84:	2b00      	cmp	r3, #0
 c008d86:	d00a      	beq.n	c008d9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c008d88:	687b      	ldr	r3, [r7, #4]
 c008d8a:	681b      	ldr	r3, [r3, #0]
 c008d8c:	689b      	ldr	r3, [r3, #8]
 c008d8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 c008d92:	687b      	ldr	r3, [r7, #4]
 c008d94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 c008d96:	687b      	ldr	r3, [r7, #4]
 c008d98:	681b      	ldr	r3, [r3, #0]
 c008d9a:	430a      	orrs	r2, r1
 c008d9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c008d9e:	687b      	ldr	r3, [r7, #4]
 c008da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c008da2:	f003 0320 	and.w	r3, r3, #32
 c008da6:	2b00      	cmp	r3, #0
 c008da8:	d00a      	beq.n	c008dc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c008daa:	687b      	ldr	r3, [r7, #4]
 c008dac:	681b      	ldr	r3, [r3, #0]
 c008dae:	689b      	ldr	r3, [r3, #8]
 c008db0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 c008db4:	687b      	ldr	r3, [r7, #4]
 c008db6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 c008db8:	687b      	ldr	r3, [r7, #4]
 c008dba:	681b      	ldr	r3, [r3, #0]
 c008dbc:	430a      	orrs	r2, r1
 c008dbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c008dc0:	687b      	ldr	r3, [r7, #4]
 c008dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c008dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c008dc8:	2b00      	cmp	r3, #0
 c008dca:	d01a      	beq.n	c008e02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c008dcc:	687b      	ldr	r3, [r7, #4]
 c008dce:	681b      	ldr	r3, [r3, #0]
 c008dd0:	685b      	ldr	r3, [r3, #4]
 c008dd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 c008dd6:	687b      	ldr	r3, [r7, #4]
 c008dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 c008dda:	687b      	ldr	r3, [r7, #4]
 c008ddc:	681b      	ldr	r3, [r3, #0]
 c008dde:	430a      	orrs	r2, r1
 c008de0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c008de2:	687b      	ldr	r3, [r7, #4]
 c008de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c008de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c008dea:	d10a      	bne.n	c008e02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c008dec:	687b      	ldr	r3, [r7, #4]
 c008dee:	681b      	ldr	r3, [r3, #0]
 c008df0:	685b      	ldr	r3, [r3, #4]
 c008df2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 c008df6:	687b      	ldr	r3, [r7, #4]
 c008df8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c008dfa:	687b      	ldr	r3, [r7, #4]
 c008dfc:	681b      	ldr	r3, [r3, #0]
 c008dfe:	430a      	orrs	r2, r1
 c008e00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c008e02:	687b      	ldr	r3, [r7, #4]
 c008e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c008e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c008e0a:	2b00      	cmp	r3, #0
 c008e0c:	d00a      	beq.n	c008e24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c008e0e:	687b      	ldr	r3, [r7, #4]
 c008e10:	681b      	ldr	r3, [r3, #0]
 c008e12:	685b      	ldr	r3, [r3, #4]
 c008e14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 c008e18:	687b      	ldr	r3, [r7, #4]
 c008e1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c008e1c:	687b      	ldr	r3, [r7, #4]
 c008e1e:	681b      	ldr	r3, [r3, #0]
 c008e20:	430a      	orrs	r2, r1
 c008e22:	605a      	str	r2, [r3, #4]
  }
}
 c008e24:	bf00      	nop
 c008e26:	370c      	adds	r7, #12
 c008e28:	46bd      	mov	sp, r7
 c008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008e2e:	4770      	bx	lr

0c008e30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 c008e30:	b580      	push	{r7, lr}
 c008e32:	b086      	sub	sp, #24
 c008e34:	af02      	add	r7, sp, #8
 c008e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c008e38:	687b      	ldr	r3, [r7, #4]
 c008e3a:	2200      	movs	r2, #0
 c008e3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 c008e40:	f7fb fd42 	bl	c0048c8 <HAL_GetTick>
 c008e44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c008e46:	687b      	ldr	r3, [r7, #4]
 c008e48:	681b      	ldr	r3, [r3, #0]
 c008e4a:	681b      	ldr	r3, [r3, #0]
 c008e4c:	f003 0308 	and.w	r3, r3, #8
 c008e50:	2b08      	cmp	r3, #8
 c008e52:	d10e      	bne.n	c008e72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c008e54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c008e58:	9300      	str	r3, [sp, #0]
 c008e5a:	68fb      	ldr	r3, [r7, #12]
 c008e5c:	2200      	movs	r2, #0
 c008e5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 c008e62:	6878      	ldr	r0, [r7, #4]
 c008e64:	f000 f82f 	bl	c008ec6 <UART_WaitOnFlagUntilTimeout>
 c008e68:	4603      	mov	r3, r0
 c008e6a:	2b00      	cmp	r3, #0
 c008e6c:	d001      	beq.n	c008e72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 c008e6e:	2303      	movs	r3, #3
 c008e70:	e025      	b.n	c008ebe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c008e72:	687b      	ldr	r3, [r7, #4]
 c008e74:	681b      	ldr	r3, [r3, #0]
 c008e76:	681b      	ldr	r3, [r3, #0]
 c008e78:	f003 0304 	and.w	r3, r3, #4
 c008e7c:	2b04      	cmp	r3, #4
 c008e7e:	d10e      	bne.n	c008e9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c008e80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c008e84:	9300      	str	r3, [sp, #0]
 c008e86:	68fb      	ldr	r3, [r7, #12]
 c008e88:	2200      	movs	r2, #0
 c008e8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 c008e8e:	6878      	ldr	r0, [r7, #4]
 c008e90:	f000 f819 	bl	c008ec6 <UART_WaitOnFlagUntilTimeout>
 c008e94:	4603      	mov	r3, r0
 c008e96:	2b00      	cmp	r3, #0
 c008e98:	d001      	beq.n	c008e9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 c008e9a:	2303      	movs	r3, #3
 c008e9c:	e00f      	b.n	c008ebe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 c008e9e:	687b      	ldr	r3, [r7, #4]
 c008ea0:	2220      	movs	r2, #32
 c008ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 c008ea6:	687b      	ldr	r3, [r7, #4]
 c008ea8:	2220      	movs	r2, #32
 c008eaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c008eae:	687b      	ldr	r3, [r7, #4]
 c008eb0:	2200      	movs	r2, #0
 c008eb2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 c008eb4:	687b      	ldr	r3, [r7, #4]
 c008eb6:	2200      	movs	r2, #0
 c008eb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c008ebc:	2300      	movs	r3, #0
}
 c008ebe:	4618      	mov	r0, r3
 c008ec0:	3710      	adds	r7, #16
 c008ec2:	46bd      	mov	sp, r7
 c008ec4:	bd80      	pop	{r7, pc}

0c008ec6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 c008ec6:	b580      	push	{r7, lr}
 c008ec8:	b084      	sub	sp, #16
 c008eca:	af00      	add	r7, sp, #0
 c008ecc:	60f8      	str	r0, [r7, #12]
 c008ece:	60b9      	str	r1, [r7, #8]
 c008ed0:	603b      	str	r3, [r7, #0]
 c008ed2:	4613      	mov	r3, r2
 c008ed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c008ed6:	e062      	b.n	c008f9e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c008ed8:	69bb      	ldr	r3, [r7, #24]
 c008eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 c008ede:	d05e      	beq.n	c008f9e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c008ee0:	f7fb fcf2 	bl	c0048c8 <HAL_GetTick>
 c008ee4:	4602      	mov	r2, r0
 c008ee6:	683b      	ldr	r3, [r7, #0]
 c008ee8:	1ad3      	subs	r3, r2, r3
 c008eea:	69ba      	ldr	r2, [r7, #24]
 c008eec:	429a      	cmp	r2, r3
 c008eee:	d302      	bcc.n	c008ef6 <UART_WaitOnFlagUntilTimeout+0x30>
 c008ef0:	69bb      	ldr	r3, [r7, #24]
 c008ef2:	2b00      	cmp	r3, #0
 c008ef4:	d11d      	bne.n	c008f32 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c008ef6:	68fb      	ldr	r3, [r7, #12]
 c008ef8:	681b      	ldr	r3, [r3, #0]
 c008efa:	681a      	ldr	r2, [r3, #0]
 c008efc:	68fb      	ldr	r3, [r7, #12]
 c008efe:	681b      	ldr	r3, [r3, #0]
 c008f00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 c008f04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c008f06:	68fb      	ldr	r3, [r7, #12]
 c008f08:	681b      	ldr	r3, [r3, #0]
 c008f0a:	689a      	ldr	r2, [r3, #8]
 c008f0c:	68fb      	ldr	r3, [r7, #12]
 c008f0e:	681b      	ldr	r3, [r3, #0]
 c008f10:	f022 0201 	bic.w	r2, r2, #1
 c008f14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 c008f16:	68fb      	ldr	r3, [r7, #12]
 c008f18:	2220      	movs	r2, #32
 c008f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 c008f1e:	68fb      	ldr	r3, [r7, #12]
 c008f20:	2220      	movs	r2, #32
 c008f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 c008f26:	68fb      	ldr	r3, [r7, #12]
 c008f28:	2200      	movs	r2, #0
 c008f2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 c008f2e:	2303      	movs	r3, #3
 c008f30:	e045      	b.n	c008fbe <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c008f32:	68fb      	ldr	r3, [r7, #12]
 c008f34:	681b      	ldr	r3, [r3, #0]
 c008f36:	681b      	ldr	r3, [r3, #0]
 c008f38:	f003 0304 	and.w	r3, r3, #4
 c008f3c:	2b00      	cmp	r3, #0
 c008f3e:	d02e      	beq.n	c008f9e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c008f40:	68fb      	ldr	r3, [r7, #12]
 c008f42:	681b      	ldr	r3, [r3, #0]
 c008f44:	69db      	ldr	r3, [r3, #28]
 c008f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c008f4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c008f4e:	d126      	bne.n	c008f9e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c008f50:	68fb      	ldr	r3, [r7, #12]
 c008f52:	681b      	ldr	r3, [r3, #0]
 c008f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c008f58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c008f5a:	68fb      	ldr	r3, [r7, #12]
 c008f5c:	681b      	ldr	r3, [r3, #0]
 c008f5e:	681a      	ldr	r2, [r3, #0]
 c008f60:	68fb      	ldr	r3, [r7, #12]
 c008f62:	681b      	ldr	r3, [r3, #0]
 c008f64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 c008f68:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c008f6a:	68fb      	ldr	r3, [r7, #12]
 c008f6c:	681b      	ldr	r3, [r3, #0]
 c008f6e:	689a      	ldr	r2, [r3, #8]
 c008f70:	68fb      	ldr	r3, [r7, #12]
 c008f72:	681b      	ldr	r3, [r3, #0]
 c008f74:	f022 0201 	bic.w	r2, r2, #1
 c008f78:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 c008f7a:	68fb      	ldr	r3, [r7, #12]
 c008f7c:	2220      	movs	r2, #32
 c008f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 c008f82:	68fb      	ldr	r3, [r7, #12]
 c008f84:	2220      	movs	r2, #32
 c008f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c008f8a:	68fb      	ldr	r3, [r7, #12]
 c008f8c:	2220      	movs	r2, #32
 c008f8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c008f92:	68fb      	ldr	r3, [r7, #12]
 c008f94:	2200      	movs	r2, #0
 c008f96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 c008f9a:	2303      	movs	r3, #3
 c008f9c:	e00f      	b.n	c008fbe <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c008f9e:	68fb      	ldr	r3, [r7, #12]
 c008fa0:	681b      	ldr	r3, [r3, #0]
 c008fa2:	69da      	ldr	r2, [r3, #28]
 c008fa4:	68bb      	ldr	r3, [r7, #8]
 c008fa6:	4013      	ands	r3, r2
 c008fa8:	68ba      	ldr	r2, [r7, #8]
 c008faa:	429a      	cmp	r2, r3
 c008fac:	bf0c      	ite	eq
 c008fae:	2301      	moveq	r3, #1
 c008fb0:	2300      	movne	r3, #0
 c008fb2:	b2db      	uxtb	r3, r3
 c008fb4:	461a      	mov	r2, r3
 c008fb6:	79fb      	ldrb	r3, [r7, #7]
 c008fb8:	429a      	cmp	r2, r3
 c008fba:	d08d      	beq.n	c008ed8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c008fbc:	2300      	movs	r3, #0
}
 c008fbe:	4618      	mov	r0, r3
 c008fc0:	3710      	adds	r7, #16
 c008fc2:	46bd      	mov	sp, r7
 c008fc4:	bd80      	pop	{r7, pc}

0c008fc6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 c008fc6:	b480      	push	{r7}
 c008fc8:	b085      	sub	sp, #20
 c008fca:	af00      	add	r7, sp, #0
 c008fcc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 c008fce:	687b      	ldr	r3, [r7, #4]
 c008fd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c008fd4:	2b01      	cmp	r3, #1
 c008fd6:	d101      	bne.n	c008fdc <HAL_UARTEx_DisableFifoMode+0x16>
 c008fd8:	2302      	movs	r3, #2
 c008fda:	e027      	b.n	c00902c <HAL_UARTEx_DisableFifoMode+0x66>
 c008fdc:	687b      	ldr	r3, [r7, #4]
 c008fde:	2201      	movs	r2, #1
 c008fe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c008fe4:	687b      	ldr	r3, [r7, #4]
 c008fe6:	2224      	movs	r2, #36	; 0x24
 c008fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c008fec:	687b      	ldr	r3, [r7, #4]
 c008fee:	681b      	ldr	r3, [r3, #0]
 c008ff0:	681b      	ldr	r3, [r3, #0]
 c008ff2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c008ff4:	687b      	ldr	r3, [r7, #4]
 c008ff6:	681b      	ldr	r3, [r3, #0]
 c008ff8:	681a      	ldr	r2, [r3, #0]
 c008ffa:	687b      	ldr	r3, [r7, #4]
 c008ffc:	681b      	ldr	r3, [r3, #0]
 c008ffe:	f022 0201 	bic.w	r2, r2, #1
 c009002:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 c009004:	68fb      	ldr	r3, [r7, #12]
 c009006:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 c00900a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c00900c:	687b      	ldr	r3, [r7, #4]
 c00900e:	2200      	movs	r2, #0
 c009010:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c009012:	687b      	ldr	r3, [r7, #4]
 c009014:	681b      	ldr	r3, [r3, #0]
 c009016:	68fa      	ldr	r2, [r7, #12]
 c009018:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c00901a:	687b      	ldr	r3, [r7, #4]
 c00901c:	2220      	movs	r2, #32
 c00901e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c009022:	687b      	ldr	r3, [r7, #4]
 c009024:	2200      	movs	r2, #0
 c009026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c00902a:	2300      	movs	r3, #0
}
 c00902c:	4618      	mov	r0, r3
 c00902e:	3714      	adds	r7, #20
 c009030:	46bd      	mov	sp, r7
 c009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 c009036:	4770      	bx	lr

0c009038 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c009038:	b580      	push	{r7, lr}
 c00903a:	b084      	sub	sp, #16
 c00903c:	af00      	add	r7, sp, #0
 c00903e:	6078      	str	r0, [r7, #4]
 c009040:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c009042:	687b      	ldr	r3, [r7, #4]
 c009044:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c009048:	2b01      	cmp	r3, #1
 c00904a:	d101      	bne.n	c009050 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 c00904c:	2302      	movs	r3, #2
 c00904e:	e02d      	b.n	c0090ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 c009050:	687b      	ldr	r3, [r7, #4]
 c009052:	2201      	movs	r2, #1
 c009054:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c009058:	687b      	ldr	r3, [r7, #4]
 c00905a:	2224      	movs	r2, #36	; 0x24
 c00905c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c009060:	687b      	ldr	r3, [r7, #4]
 c009062:	681b      	ldr	r3, [r3, #0]
 c009064:	681b      	ldr	r3, [r3, #0]
 c009066:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c009068:	687b      	ldr	r3, [r7, #4]
 c00906a:	681b      	ldr	r3, [r3, #0]
 c00906c:	681a      	ldr	r2, [r3, #0]
 c00906e:	687b      	ldr	r3, [r7, #4]
 c009070:	681b      	ldr	r3, [r3, #0]
 c009072:	f022 0201 	bic.w	r2, r2, #1
 c009076:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 c009078:	687b      	ldr	r3, [r7, #4]
 c00907a:	681b      	ldr	r3, [r3, #0]
 c00907c:	689b      	ldr	r3, [r3, #8]
 c00907e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 c009082:	687b      	ldr	r3, [r7, #4]
 c009084:	681b      	ldr	r3, [r3, #0]
 c009086:	683a      	ldr	r2, [r7, #0]
 c009088:	430a      	orrs	r2, r1
 c00908a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c00908c:	6878      	ldr	r0, [r7, #4]
 c00908e:	f000 f84f 	bl	c009130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c009092:	687b      	ldr	r3, [r7, #4]
 c009094:	681b      	ldr	r3, [r3, #0]
 c009096:	68fa      	ldr	r2, [r7, #12]
 c009098:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c00909a:	687b      	ldr	r3, [r7, #4]
 c00909c:	2220      	movs	r2, #32
 c00909e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c0090a2:	687b      	ldr	r3, [r7, #4]
 c0090a4:	2200      	movs	r2, #0
 c0090a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c0090aa:	2300      	movs	r3, #0
}
 c0090ac:	4618      	mov	r0, r3
 c0090ae:	3710      	adds	r7, #16
 c0090b0:	46bd      	mov	sp, r7
 c0090b2:	bd80      	pop	{r7, pc}

0c0090b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c0090b4:	b580      	push	{r7, lr}
 c0090b6:	b084      	sub	sp, #16
 c0090b8:	af00      	add	r7, sp, #0
 c0090ba:	6078      	str	r0, [r7, #4]
 c0090bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c0090be:	687b      	ldr	r3, [r7, #4]
 c0090c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c0090c4:	2b01      	cmp	r3, #1
 c0090c6:	d101      	bne.n	c0090cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 c0090c8:	2302      	movs	r3, #2
 c0090ca:	e02d      	b.n	c009128 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 c0090cc:	687b      	ldr	r3, [r7, #4]
 c0090ce:	2201      	movs	r2, #1
 c0090d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c0090d4:	687b      	ldr	r3, [r7, #4]
 c0090d6:	2224      	movs	r2, #36	; 0x24
 c0090d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c0090dc:	687b      	ldr	r3, [r7, #4]
 c0090de:	681b      	ldr	r3, [r3, #0]
 c0090e0:	681b      	ldr	r3, [r3, #0]
 c0090e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c0090e4:	687b      	ldr	r3, [r7, #4]
 c0090e6:	681b      	ldr	r3, [r3, #0]
 c0090e8:	681a      	ldr	r2, [r3, #0]
 c0090ea:	687b      	ldr	r3, [r7, #4]
 c0090ec:	681b      	ldr	r3, [r3, #0]
 c0090ee:	f022 0201 	bic.w	r2, r2, #1
 c0090f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 c0090f4:	687b      	ldr	r3, [r7, #4]
 c0090f6:	681b      	ldr	r3, [r3, #0]
 c0090f8:	689b      	ldr	r3, [r3, #8]
 c0090fa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 c0090fe:	687b      	ldr	r3, [r7, #4]
 c009100:	681b      	ldr	r3, [r3, #0]
 c009102:	683a      	ldr	r2, [r7, #0]
 c009104:	430a      	orrs	r2, r1
 c009106:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c009108:	6878      	ldr	r0, [r7, #4]
 c00910a:	f000 f811 	bl	c009130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00910e:	687b      	ldr	r3, [r7, #4]
 c009110:	681b      	ldr	r3, [r3, #0]
 c009112:	68fa      	ldr	r2, [r7, #12]
 c009114:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c009116:	687b      	ldr	r3, [r7, #4]
 c009118:	2220      	movs	r2, #32
 c00911a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00911e:	687b      	ldr	r3, [r7, #4]
 c009120:	2200      	movs	r2, #0
 c009122:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c009126:	2300      	movs	r3, #0
}
 c009128:	4618      	mov	r0, r3
 c00912a:	3710      	adds	r7, #16
 c00912c:	46bd      	mov	sp, r7
 c00912e:	bd80      	pop	{r7, pc}

0c009130 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 c009130:	b480      	push	{r7}
 c009132:	b085      	sub	sp, #20
 c009134:	af00      	add	r7, sp, #0
 c009136:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c009138:	687b      	ldr	r3, [r7, #4]
 c00913a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c00913c:	2b00      	cmp	r3, #0
 c00913e:	d108      	bne.n	c009152 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 c009140:	687b      	ldr	r3, [r7, #4]
 c009142:	2201      	movs	r2, #1
 c009144:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 c009148:	687b      	ldr	r3, [r7, #4]
 c00914a:	2201      	movs	r2, #1
 c00914c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 c009150:	e031      	b.n	c0091b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 c009152:	2308      	movs	r3, #8
 c009154:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 c009156:	2308      	movs	r3, #8
 c009158:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c00915a:	687b      	ldr	r3, [r7, #4]
 c00915c:	681b      	ldr	r3, [r3, #0]
 c00915e:	689b      	ldr	r3, [r3, #8]
 c009160:	0e5b      	lsrs	r3, r3, #25
 c009162:	b2db      	uxtb	r3, r3
 c009164:	f003 0307 	and.w	r3, r3, #7
 c009168:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c00916a:	687b      	ldr	r3, [r7, #4]
 c00916c:	681b      	ldr	r3, [r3, #0]
 c00916e:	689b      	ldr	r3, [r3, #8]
 c009170:	0f5b      	lsrs	r3, r3, #29
 c009172:	b2db      	uxtb	r3, r3
 c009174:	f003 0307 	and.w	r3, r3, #7
 c009178:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c00917a:	7bbb      	ldrb	r3, [r7, #14]
 c00917c:	7b3a      	ldrb	r2, [r7, #12]
 c00917e:	4911      	ldr	r1, [pc, #68]	; (c0091c4 <UARTEx_SetNbDataToProcess+0x94>)
 c009180:	5c8a      	ldrb	r2, [r1, r2]
 c009182:	fb02 f303 	mul.w	r3, r2, r3
 c009186:	7b3a      	ldrb	r2, [r7, #12]
 c009188:	490f      	ldr	r1, [pc, #60]	; (c0091c8 <UARTEx_SetNbDataToProcess+0x98>)
 c00918a:	5c8a      	ldrb	r2, [r1, r2]
 c00918c:	fb93 f3f2 	sdiv	r3, r3, r2
 c009190:	b29a      	uxth	r2, r3
 c009192:	687b      	ldr	r3, [r7, #4]
 c009194:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c009198:	7bfb      	ldrb	r3, [r7, #15]
 c00919a:	7b7a      	ldrb	r2, [r7, #13]
 c00919c:	4909      	ldr	r1, [pc, #36]	; (c0091c4 <UARTEx_SetNbDataToProcess+0x94>)
 c00919e:	5c8a      	ldrb	r2, [r1, r2]
 c0091a0:	fb02 f303 	mul.w	r3, r2, r3
 c0091a4:	7b7a      	ldrb	r2, [r7, #13]
 c0091a6:	4908      	ldr	r1, [pc, #32]	; (c0091c8 <UARTEx_SetNbDataToProcess+0x98>)
 c0091a8:	5c8a      	ldrb	r2, [r1, r2]
 c0091aa:	fb93 f3f2 	sdiv	r3, r3, r2
 c0091ae:	b29a      	uxth	r2, r3
 c0091b0:	687b      	ldr	r3, [r7, #4]
 c0091b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 c0091b6:	bf00      	nop
 c0091b8:	3714      	adds	r7, #20
 c0091ba:	46bd      	mov	sp, r7
 c0091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0091c0:	4770      	bx	lr
 c0091c2:	bf00      	nop
 c0091c4:	0c0093ac 	.word	0x0c0093ac
 c0091c8:	0c0093b4 	.word	0x0c0093b4

0c0091cc <__libc_init_array>:
 c0091cc:	b570      	push	{r4, r5, r6, lr}
 c0091ce:	4d0d      	ldr	r5, [pc, #52]	; (c009204 <__libc_init_array+0x38>)
 c0091d0:	2600      	movs	r6, #0
 c0091d2:	4c0d      	ldr	r4, [pc, #52]	; (c009208 <__libc_init_array+0x3c>)
 c0091d4:	1b64      	subs	r4, r4, r5
 c0091d6:	10a4      	asrs	r4, r4, #2
 c0091d8:	42a6      	cmp	r6, r4
 c0091da:	d109      	bne.n	c0091f0 <__libc_init_array+0x24>
 c0091dc:	4d0b      	ldr	r5, [pc, #44]	; (c00920c <__libc_init_array+0x40>)
 c0091de:	2600      	movs	r6, #0
 c0091e0:	4c0b      	ldr	r4, [pc, #44]	; (c009210 <__libc_init_array+0x44>)
 c0091e2:	f000 f82d 	bl	c009240 <_init>
 c0091e6:	1b64      	subs	r4, r4, r5
 c0091e8:	10a4      	asrs	r4, r4, #2
 c0091ea:	42a6      	cmp	r6, r4
 c0091ec:	d105      	bne.n	c0091fa <__libc_init_array+0x2e>
 c0091ee:	bd70      	pop	{r4, r5, r6, pc}
 c0091f0:	f855 3b04 	ldr.w	r3, [r5], #4
 c0091f4:	3601      	adds	r6, #1
 c0091f6:	4798      	blx	r3
 c0091f8:	e7ee      	b.n	c0091d8 <__libc_init_array+0xc>
 c0091fa:	f855 3b04 	ldr.w	r3, [r5], #4
 c0091fe:	3601      	adds	r6, #1
 c009200:	4798      	blx	r3
 c009202:	e7f2      	b.n	c0091ea <__libc_init_array+0x1e>
 c009204:	0c0093c4 	.word	0x0c0093c4
 c009208:	0c0093c4 	.word	0x0c0093c4
 c00920c:	0c0093c4 	.word	0x0c0093c4
 c009210:	0c0093c8 	.word	0x0c0093c8

0c009214 <memcpy>:
 c009214:	440a      	add	r2, r1
 c009216:	1e43      	subs	r3, r0, #1
 c009218:	4291      	cmp	r1, r2
 c00921a:	d100      	bne.n	c00921e <memcpy+0xa>
 c00921c:	4770      	bx	lr
 c00921e:	b510      	push	{r4, lr}
 c009220:	f811 4b01 	ldrb.w	r4, [r1], #1
 c009224:	4291      	cmp	r1, r2
 c009226:	f803 4f01 	strb.w	r4, [r3, #1]!
 c00922a:	d1f9      	bne.n	c009220 <memcpy+0xc>
 c00922c:	bd10      	pop	{r4, pc}

0c00922e <memset>:
 c00922e:	4402      	add	r2, r0
 c009230:	4603      	mov	r3, r0
 c009232:	4293      	cmp	r3, r2
 c009234:	d100      	bne.n	c009238 <memset+0xa>
 c009236:	4770      	bx	lr
 c009238:	f803 1b01 	strb.w	r1, [r3], #1
 c00923c:	e7f9      	b.n	c009232 <memset+0x4>
	...

0c009240 <_init>:
 c009240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c009242:	bf00      	nop
 c009244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c009246:	bc08      	pop	{r3}
 c009248:	469e      	mov	lr, r3
 c00924a:	4770      	bx	lr

0c00924c <_fini>:
 c00924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00924e:	bf00      	nop
 c009250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c009252:	bc08      	pop	{r3}
 c009254:	469e      	mov	lr, r3
 c009256:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_SystemCoreClockUpdate>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c4 bd32 	b.w	c002a6c <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e008 <SECURE_log_cond_br>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c4 ba61 	b.w	c0024d2 <__acle_se_SECURE_log_cond_br>

0c03e010 <SECURE_RunCallback>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c4 b912 	b.w	c00223c <__acle_se_SECURE_RunCallback>

0c03e018 <SECURE_log_call>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c4 ba10 	b.w	c002440 <__acle_se_SECURE_log_call>

0c03e020 <SECURE_record_output_data>:
 c03e020:	e97f e97f 	sg
 c03e024:	f7c4 bade 	b.w	c0025e4 <__acle_se_SECURE_record_output_data>

0c03e028 <SECURE_Initialize_CFA_engine>:
 c03e028:	e97f e97f 	sg
 c03e02c:	f7c4 b944 	b.w	c0022b8 <__acle_se_SECURE_Initialize_CFA_engine>

0c03e030 <SECURE_Initialize_Attestation>:
 c03e030:	e97f e97f 	sg
 c03e034:	f7c4 b97c 	b.w	c002330 <__acle_se_SECURE_Initialize_Attestation>

0c03e038 <SECURE_log_ret>:
 c03e038:	e97f e97f 	sg
 c03e03c:	f7c4 b9b4 	b.w	c0023a8 <__acle_se_SECURE_log_ret>

0c03e040 <SECURE_RegisterCallback>:
 c03e040:	e97f e97f 	sg
 c03e044:	f7c4 b896 	b.w	c002174 <__acle_se_SECURE_RegisterCallback>

0c03e048 <SECURE_run_attestation_wait_mode>:
 c03e048:	e97f e97f 	sg
 c03e04c:	f7c4 ba8e 	b.w	c00256c <__acle_se_SECURE_run_attestation_wait_mode>
	...
