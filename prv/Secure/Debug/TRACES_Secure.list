
TRACES_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a660  0c000200  0c000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  0c00a860  0c00a860  0001a860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c00ab0c  0c00ab0c  00034000  2**0
                  CONTENTS
  4 .ARM          00000008  0c00ab0c  0c00ab0c  0001ab0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0c00ab14  0c00ab14  00034000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c00ab14  0c00ab14  0001ab14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c00ab18  0c00ab18  0001ab18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .cfa_data     00002000  0e002000  0e002000  00032000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000f4  30000000  0c00ab1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .gnu.sgstubs  00000060  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .bss          00002388  300000f4  300000f4  000400f4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  3000247c  3000247c  000400f4  2**0
                  ALLOC
 13 .ARM.attributes 00000036  00000000  00000000  00034000  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018ff7  00000000  00000000  00034036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000039f2  00000000  00000000  0004d02d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001790  00000000  00000000  00050a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001608  00000000  00000000  000521b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ccc6  00000000  00000000  000537b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a59e  00000000  00000000  0008047e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00112ae2  00000000  00000000  0009aa1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001ad4fe  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006c0c  00000000  00000000  001ad550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c000200 <__do_global_dtors_aux>:
 c000200:	b510      	push	{r4, lr}
 c000202:	4c05      	ldr	r4, [pc, #20]	; (c000218 <__do_global_dtors_aux+0x18>)
 c000204:	7823      	ldrb	r3, [r4, #0]
 c000206:	b933      	cbnz	r3, c000216 <__do_global_dtors_aux+0x16>
 c000208:	4b04      	ldr	r3, [pc, #16]	; (c00021c <__do_global_dtors_aux+0x1c>)
 c00020a:	b113      	cbz	r3, c000212 <__do_global_dtors_aux+0x12>
 c00020c:	4804      	ldr	r0, [pc, #16]	; (c000220 <__do_global_dtors_aux+0x20>)
 c00020e:	e000      	b.n	c000212 <__do_global_dtors_aux+0x12>
 c000210:	bf00      	nop
 c000212:	2301      	movs	r3, #1
 c000214:	7023      	strb	r3, [r4, #0]
 c000216:	bd10      	pop	{r4, pc}
 c000218:	300000f4 	.word	0x300000f4
 c00021c:	00000000 	.word	0x00000000
 c000220:	0c00a848 	.word	0x0c00a848

0c000224 <frame_dummy>:
 c000224:	b508      	push	{r3, lr}
 c000226:	4b03      	ldr	r3, [pc, #12]	; (c000234 <frame_dummy+0x10>)
 c000228:	b11b      	cbz	r3, c000232 <frame_dummy+0xe>
 c00022a:	4903      	ldr	r1, [pc, #12]	; (c000238 <frame_dummy+0x14>)
 c00022c:	4803      	ldr	r0, [pc, #12]	; (c00023c <frame_dummy+0x18>)
 c00022e:	e000      	b.n	c000232 <frame_dummy+0xe>
 c000230:	bf00      	nop
 c000232:	bd08      	pop	{r3, pc}
 c000234:	00000000 	.word	0x00000000
 c000238:	300000f8 	.word	0x300000f8
 c00023c:	0c00a848 	.word	0x0c00a848

0c000240 <strcmp>:
 c000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 c000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 c000248:	2a01      	cmp	r2, #1
 c00024a:	bf28      	it	cs
 c00024c:	429a      	cmpcs	r2, r3
 c00024e:	d0f7      	beq.n	c000240 <strcmp>
 c000250:	1ad0      	subs	r0, r2, r3
 c000252:	4770      	bx	lr

0c000254 <__gnu_cmse_nonsecure_call>:
 c000254:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000258:	4627      	mov	r7, r4
 c00025a:	46a0      	mov	r8, r4
 c00025c:	46a1      	mov	r9, r4
 c00025e:	46a2      	mov	sl, r4
 c000260:	46a3      	mov	fp, r4
 c000262:	46a4      	mov	ip, r4
 c000264:	ed2d 8b10 	vpush	{d8-d15}
 c000268:	f04f 0500 	mov.w	r5, #0
 c00026c:	ec45 5b18 	vmov	d8, r5, r5
 c000270:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000274:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000278:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c00027c:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000280:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000284:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000288:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c00028c:	eef1 5a10 	vmrs	r5, fpscr
 c000290:	f64f 7660 	movw	r6, #65376	; 0xff60
 c000294:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c000298:	4035      	ands	r5, r6
 c00029a:	eee1 5a10 	vmsr	fpscr, r5
 c00029e:	f384 8800 	msr	CPSR_f, r4
 c0002a2:	4625      	mov	r5, r4
 c0002a4:	4626      	mov	r6, r4
 c0002a6:	47a4      	blxns	r4
 c0002a8:	ecbd 8b10 	vpop	{d8-d15}
 c0002ac:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c0002b0 <__aeabi_uldivmod>:
 c0002b0:	b953      	cbnz	r3, c0002c8 <__aeabi_uldivmod+0x18>
 c0002b2:	b94a      	cbnz	r2, c0002c8 <__aeabi_uldivmod+0x18>
 c0002b4:	2900      	cmp	r1, #0
 c0002b6:	bf08      	it	eq
 c0002b8:	2800      	cmpeq	r0, #0
 c0002ba:	bf1c      	itt	ne
 c0002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 c0002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 c0002c4:	f000 b982 	b.w	c0005cc <__aeabi_idiv0>
 c0002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 c0002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c0002d0:	f000 f806 	bl	c0002e0 <__udivmoddi4>
 c0002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 c0002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c0002dc:	b004      	add	sp, #16
 c0002de:	4770      	bx	lr

0c0002e0 <__udivmoddi4>:
 c0002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0002e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 c0002e6:	4604      	mov	r4, r0
 c0002e8:	460f      	mov	r7, r1
 c0002ea:	2b00      	cmp	r3, #0
 c0002ec:	d148      	bne.n	c000380 <__udivmoddi4+0xa0>
 c0002ee:	428a      	cmp	r2, r1
 c0002f0:	4694      	mov	ip, r2
 c0002f2:	d961      	bls.n	c0003b8 <__udivmoddi4+0xd8>
 c0002f4:	fab2 f382 	clz	r3, r2
 c0002f8:	b143      	cbz	r3, c00030c <__udivmoddi4+0x2c>
 c0002fa:	f1c3 0120 	rsb	r1, r3, #32
 c0002fe:	409f      	lsls	r7, r3
 c000300:	fa02 fc03 	lsl.w	ip, r2, r3
 c000304:	409c      	lsls	r4, r3
 c000306:	fa20 f101 	lsr.w	r1, r0, r1
 c00030a:	430f      	orrs	r7, r1
 c00030c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 c000310:	fa1f fe8c 	uxth.w	lr, ip
 c000314:	0c22      	lsrs	r2, r4, #16
 c000316:	fbb7 f6f1 	udiv	r6, r7, r1
 c00031a:	fb01 7716 	mls	r7, r1, r6, r7
 c00031e:	fb06 f00e 	mul.w	r0, r6, lr
 c000322:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 c000326:	4290      	cmp	r0, r2
 c000328:	d908      	bls.n	c00033c <__udivmoddi4+0x5c>
 c00032a:	eb1c 0202 	adds.w	r2, ip, r2
 c00032e:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 c000332:	d202      	bcs.n	c00033a <__udivmoddi4+0x5a>
 c000334:	4290      	cmp	r0, r2
 c000336:	f200 8137 	bhi.w	c0005a8 <__udivmoddi4+0x2c8>
 c00033a:	463e      	mov	r6, r7
 c00033c:	1a12      	subs	r2, r2, r0
 c00033e:	b2a4      	uxth	r4, r4
 c000340:	fbb2 f0f1 	udiv	r0, r2, r1
 c000344:	fb01 2210 	mls	r2, r1, r0, r2
 c000348:	fb00 fe0e 	mul.w	lr, r0, lr
 c00034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 c000350:	45a6      	cmp	lr, r4
 c000352:	d908      	bls.n	c000366 <__udivmoddi4+0x86>
 c000354:	eb1c 0404 	adds.w	r4, ip, r4
 c000358:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 c00035c:	d202      	bcs.n	c000364 <__udivmoddi4+0x84>
 c00035e:	45a6      	cmp	lr, r4
 c000360:	f200 811c 	bhi.w	c00059c <__udivmoddi4+0x2bc>
 c000364:	4610      	mov	r0, r2
 c000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 c00036a:	eba4 040e 	sub.w	r4, r4, lr
 c00036e:	2600      	movs	r6, #0
 c000370:	b11d      	cbz	r5, c00037a <__udivmoddi4+0x9a>
 c000372:	40dc      	lsrs	r4, r3
 c000374:	2300      	movs	r3, #0
 c000376:	e9c5 4300 	strd	r4, r3, [r5]
 c00037a:	4631      	mov	r1, r6
 c00037c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000380:	428b      	cmp	r3, r1
 c000382:	d909      	bls.n	c000398 <__udivmoddi4+0xb8>
 c000384:	2d00      	cmp	r5, #0
 c000386:	f000 80fd 	beq.w	c000584 <__udivmoddi4+0x2a4>
 c00038a:	2600      	movs	r6, #0
 c00038c:	e9c5 0100 	strd	r0, r1, [r5]
 c000390:	4630      	mov	r0, r6
 c000392:	4631      	mov	r1, r6
 c000394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000398:	fab3 f683 	clz	r6, r3
 c00039c:	2e00      	cmp	r6, #0
 c00039e:	d14b      	bne.n	c000438 <__udivmoddi4+0x158>
 c0003a0:	428b      	cmp	r3, r1
 c0003a2:	f0c0 80f2 	bcc.w	c00058a <__udivmoddi4+0x2aa>
 c0003a6:	4282      	cmp	r2, r0
 c0003a8:	f240 80ef 	bls.w	c00058a <__udivmoddi4+0x2aa>
 c0003ac:	4630      	mov	r0, r6
 c0003ae:	2d00      	cmp	r5, #0
 c0003b0:	d0e3      	beq.n	c00037a <__udivmoddi4+0x9a>
 c0003b2:	e9c5 4700 	strd	r4, r7, [r5]
 c0003b6:	e7e0      	b.n	c00037a <__udivmoddi4+0x9a>
 c0003b8:	b902      	cbnz	r2, c0003bc <__udivmoddi4+0xdc>
 c0003ba:	deff      	udf	#255	; 0xff
 c0003bc:	fab2 f382 	clz	r3, r2
 c0003c0:	2b00      	cmp	r3, #0
 c0003c2:	f040 809d 	bne.w	c000500 <__udivmoddi4+0x220>
 c0003c6:	1a89      	subs	r1, r1, r2
 c0003c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 c0003cc:	b297      	uxth	r7, r2
 c0003ce:	2601      	movs	r6, #1
 c0003d0:	0c20      	lsrs	r0, r4, #16
 c0003d2:	fbb1 f2fe 	udiv	r2, r1, lr
 c0003d6:	fb0e 1112 	mls	r1, lr, r2, r1
 c0003da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c0003de:	fb07 f002 	mul.w	r0, r7, r2
 c0003e2:	4288      	cmp	r0, r1
 c0003e4:	d90f      	bls.n	c000406 <__udivmoddi4+0x126>
 c0003e6:	eb1c 0101 	adds.w	r1, ip, r1
 c0003ea:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 c0003ee:	bf2c      	ite	cs
 c0003f0:	f04f 0901 	movcs.w	r9, #1
 c0003f4:	f04f 0900 	movcc.w	r9, #0
 c0003f8:	4288      	cmp	r0, r1
 c0003fa:	d903      	bls.n	c000404 <__udivmoddi4+0x124>
 c0003fc:	f1b9 0f00 	cmp.w	r9, #0
 c000400:	f000 80cf 	beq.w	c0005a2 <__udivmoddi4+0x2c2>
 c000404:	4642      	mov	r2, r8
 c000406:	1a09      	subs	r1, r1, r0
 c000408:	b2a4      	uxth	r4, r4
 c00040a:	fbb1 f0fe 	udiv	r0, r1, lr
 c00040e:	fb0e 1110 	mls	r1, lr, r0, r1
 c000412:	fb00 f707 	mul.w	r7, r0, r7
 c000416:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 c00041a:	42a7      	cmp	r7, r4
 c00041c:	d908      	bls.n	c000430 <__udivmoddi4+0x150>
 c00041e:	eb1c 0404 	adds.w	r4, ip, r4
 c000422:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 c000426:	d202      	bcs.n	c00042e <__udivmoddi4+0x14e>
 c000428:	42a7      	cmp	r7, r4
 c00042a:	f200 80b4 	bhi.w	c000596 <__udivmoddi4+0x2b6>
 c00042e:	4608      	mov	r0, r1
 c000430:	1be4      	subs	r4, r4, r7
 c000432:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 c000436:	e79b      	b.n	c000370 <__udivmoddi4+0x90>
 c000438:	f1c6 0720 	rsb	r7, r6, #32
 c00043c:	40b3      	lsls	r3, r6
 c00043e:	fa01 f406 	lsl.w	r4, r1, r6
 c000442:	fa22 fc07 	lsr.w	ip, r2, r7
 c000446:	40f9      	lsrs	r1, r7
 c000448:	40b2      	lsls	r2, r6
 c00044a:	ea4c 0c03 	orr.w	ip, ip, r3
 c00044e:	fa20 f307 	lsr.w	r3, r0, r7
 c000452:	ea4f 491c 	mov.w	r9, ip, lsr #16
 c000456:	431c      	orrs	r4, r3
 c000458:	fa1f fe8c 	uxth.w	lr, ip
 c00045c:	fa00 f306 	lsl.w	r3, r0, r6
 c000460:	0c20      	lsrs	r0, r4, #16
 c000462:	fbb1 f8f9 	udiv	r8, r1, r9
 c000466:	fb09 1118 	mls	r1, r9, r8, r1
 c00046a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c00046e:	fb08 f00e 	mul.w	r0, r8, lr
 c000472:	4288      	cmp	r0, r1
 c000474:	d90f      	bls.n	c000496 <__udivmoddi4+0x1b6>
 c000476:	eb1c 0101 	adds.w	r1, ip, r1
 c00047a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 c00047e:	bf2c      	ite	cs
 c000480:	f04f 0b01 	movcs.w	fp, #1
 c000484:	f04f 0b00 	movcc.w	fp, #0
 c000488:	4288      	cmp	r0, r1
 c00048a:	d903      	bls.n	c000494 <__udivmoddi4+0x1b4>
 c00048c:	f1bb 0f00 	cmp.w	fp, #0
 c000490:	f000 808d 	beq.w	c0005ae <__udivmoddi4+0x2ce>
 c000494:	46d0      	mov	r8, sl
 c000496:	1a09      	subs	r1, r1, r0
 c000498:	b2a4      	uxth	r4, r4
 c00049a:	fbb1 f0f9 	udiv	r0, r1, r9
 c00049e:	fb09 1110 	mls	r1, r9, r0, r1
 c0004a2:	fb00 fe0e 	mul.w	lr, r0, lr
 c0004a6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 c0004aa:	458e      	cmp	lr, r1
 c0004ac:	d907      	bls.n	c0004be <__udivmoddi4+0x1de>
 c0004ae:	eb1c 0101 	adds.w	r1, ip, r1
 c0004b2:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 c0004b6:	d201      	bcs.n	c0004bc <__udivmoddi4+0x1dc>
 c0004b8:	458e      	cmp	lr, r1
 c0004ba:	d87f      	bhi.n	c0005bc <__udivmoddi4+0x2dc>
 c0004bc:	4620      	mov	r0, r4
 c0004be:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 c0004c2:	eba1 010e 	sub.w	r1, r1, lr
 c0004c6:	fba0 9802 	umull	r9, r8, r0, r2
 c0004ca:	4541      	cmp	r1, r8
 c0004cc:	464c      	mov	r4, r9
 c0004ce:	46c6      	mov	lr, r8
 c0004d0:	d302      	bcc.n	c0004d8 <__udivmoddi4+0x1f8>
 c0004d2:	d106      	bne.n	c0004e2 <__udivmoddi4+0x202>
 c0004d4:	454b      	cmp	r3, r9
 c0004d6:	d204      	bcs.n	c0004e2 <__udivmoddi4+0x202>
 c0004d8:	3801      	subs	r0, #1
 c0004da:	ebb9 0402 	subs.w	r4, r9, r2
 c0004de:	eb68 0e0c 	sbc.w	lr, r8, ip
 c0004e2:	2d00      	cmp	r5, #0
 c0004e4:	d070      	beq.n	c0005c8 <__udivmoddi4+0x2e8>
 c0004e6:	1b1a      	subs	r2, r3, r4
 c0004e8:	eb61 010e 	sbc.w	r1, r1, lr
 c0004ec:	fa22 f306 	lsr.w	r3, r2, r6
 c0004f0:	fa01 f707 	lsl.w	r7, r1, r7
 c0004f4:	40f1      	lsrs	r1, r6
 c0004f6:	2600      	movs	r6, #0
 c0004f8:	431f      	orrs	r7, r3
 c0004fa:	e9c5 7100 	strd	r7, r1, [r5]
 c0004fe:	e73c      	b.n	c00037a <__udivmoddi4+0x9a>
 c000500:	fa02 fc03 	lsl.w	ip, r2, r3
 c000504:	f1c3 0020 	rsb	r0, r3, #32
 c000508:	fa01 f203 	lsl.w	r2, r1, r3
 c00050c:	fa21 f600 	lsr.w	r6, r1, r0
 c000510:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 c000514:	fa24 f100 	lsr.w	r1, r4, r0
 c000518:	fa1f f78c 	uxth.w	r7, ip
 c00051c:	409c      	lsls	r4, r3
 c00051e:	4311      	orrs	r1, r2
 c000520:	fbb6 f0fe 	udiv	r0, r6, lr
 c000524:	0c0a      	lsrs	r2, r1, #16
 c000526:	fb0e 6610 	mls	r6, lr, r0, r6
 c00052a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 c00052e:	fb00 f607 	mul.w	r6, r0, r7
 c000532:	4296      	cmp	r6, r2
 c000534:	d90e      	bls.n	c000554 <__udivmoddi4+0x274>
 c000536:	eb1c 0202 	adds.w	r2, ip, r2
 c00053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 c00053e:	bf2c      	ite	cs
 c000540:	f04f 0901 	movcs.w	r9, #1
 c000544:	f04f 0900 	movcc.w	r9, #0
 c000548:	4296      	cmp	r6, r2
 c00054a:	d902      	bls.n	c000552 <__udivmoddi4+0x272>
 c00054c:	f1b9 0f00 	cmp.w	r9, #0
 c000550:	d031      	beq.n	c0005b6 <__udivmoddi4+0x2d6>
 c000552:	4640      	mov	r0, r8
 c000554:	1b92      	subs	r2, r2, r6
 c000556:	b289      	uxth	r1, r1
 c000558:	fbb2 f6fe 	udiv	r6, r2, lr
 c00055c:	fb0e 2216 	mls	r2, lr, r6, r2
 c000560:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 c000564:	fb06 f207 	mul.w	r2, r6, r7
 c000568:	428a      	cmp	r2, r1
 c00056a:	d907      	bls.n	c00057c <__udivmoddi4+0x29c>
 c00056c:	eb1c 0101 	adds.w	r1, ip, r1
 c000570:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 c000574:	d201      	bcs.n	c00057a <__udivmoddi4+0x29a>
 c000576:	428a      	cmp	r2, r1
 c000578:	d823      	bhi.n	c0005c2 <__udivmoddi4+0x2e2>
 c00057a:	4646      	mov	r6, r8
 c00057c:	1a89      	subs	r1, r1, r2
 c00057e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 c000582:	e725      	b.n	c0003d0 <__udivmoddi4+0xf0>
 c000584:	462e      	mov	r6, r5
 c000586:	4628      	mov	r0, r5
 c000588:	e6f7      	b.n	c00037a <__udivmoddi4+0x9a>
 c00058a:	1a84      	subs	r4, r0, r2
 c00058c:	eb61 0303 	sbc.w	r3, r1, r3
 c000590:	2001      	movs	r0, #1
 c000592:	461f      	mov	r7, r3
 c000594:	e70b      	b.n	c0003ae <__udivmoddi4+0xce>
 c000596:	4464      	add	r4, ip
 c000598:	3802      	subs	r0, #2
 c00059a:	e749      	b.n	c000430 <__udivmoddi4+0x150>
 c00059c:	4464      	add	r4, ip
 c00059e:	3802      	subs	r0, #2
 c0005a0:	e6e1      	b.n	c000366 <__udivmoddi4+0x86>
 c0005a2:	3a02      	subs	r2, #2
 c0005a4:	4461      	add	r1, ip
 c0005a6:	e72e      	b.n	c000406 <__udivmoddi4+0x126>
 c0005a8:	3e02      	subs	r6, #2
 c0005aa:	4462      	add	r2, ip
 c0005ac:	e6c6      	b.n	c00033c <__udivmoddi4+0x5c>
 c0005ae:	f1a8 0802 	sub.w	r8, r8, #2
 c0005b2:	4461      	add	r1, ip
 c0005b4:	e76f      	b.n	c000496 <__udivmoddi4+0x1b6>
 c0005b6:	3802      	subs	r0, #2
 c0005b8:	4462      	add	r2, ip
 c0005ba:	e7cb      	b.n	c000554 <__udivmoddi4+0x274>
 c0005bc:	3802      	subs	r0, #2
 c0005be:	4461      	add	r1, ip
 c0005c0:	e77d      	b.n	c0004be <__udivmoddi4+0x1de>
 c0005c2:	3e02      	subs	r6, #2
 c0005c4:	4461      	add	r1, ip
 c0005c6:	e7d9      	b.n	c00057c <__udivmoddi4+0x29c>
 c0005c8:	462e      	mov	r6, r5
 c0005ca:	e6d6      	b.n	c00037a <__udivmoddi4+0x9a>

0c0005cc <__aeabi_idiv0>:
 c0005cc:	4770      	bx	lr
 c0005ce:	bf00      	nop

0c0005d0 <load32>:
  uint16_t x;
  memcpy(&x, b, 2);
  return x;
}

inline static uint32_t load32(uint8_t *b) {
 c0005d0:	b480      	push	{r7}
 c0005d2:	b085      	sub	sp, #20
 c0005d4:	af00      	add	r7, sp, #0
 c0005d6:	6078      	str	r0, [r7, #4]
 c0005d8:	687b      	ldr	r3, [r7, #4]
 c0005da:	681b      	ldr	r3, [r3, #0]
  uint32_t x;
  memcpy(&x, b, 4);
 c0005dc:	60fb      	str	r3, [r7, #12]
  return x;
 c0005de:	68fb      	ldr	r3, [r7, #12]
}
 c0005e0:	4618      	mov	r0, r3
 c0005e2:	3714      	adds	r7, #20
 c0005e4:	46bd      	mov	sp, r7
 c0005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0005ea:	4770      	bx	lr

0c0005ec <store32>:
  return x;
}

inline static void store16(uint8_t *b, uint16_t i) { memcpy(b, &i, 2); }

inline static void store32(uint8_t *b, uint32_t i) { memcpy(b, &i, 4); }
 c0005ec:	b480      	push	{r7}
 c0005ee:	b083      	sub	sp, #12
 c0005f0:	af00      	add	r7, sp, #0
 c0005f2:	6078      	str	r0, [r7, #4]
 c0005f4:	6039      	str	r1, [r7, #0]
 c0005f6:	683a      	ldr	r2, [r7, #0]
 c0005f8:	687b      	ldr	r3, [r7, #4]
 c0005fa:	601a      	str	r2, [r3, #0]
 c0005fc:	bf00      	nop
 c0005fe:	370c      	adds	r7, #12
 c000600:	46bd      	mov	sp, r7
 c000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000606:	4770      	bx	lr

0c000608 <store64>:

inline static void store64(uint8_t *b, uint64_t i) { memcpy(b, &i, 8); }
 c000608:	b580      	push	{r7, lr}
 c00060a:	b084      	sub	sp, #16
 c00060c:	af00      	add	r7, sp, #0
 c00060e:	60f8      	str	r0, [r7, #12]
 c000610:	e9c7 2300 	strd	r2, r3, [r7]
 c000614:	463b      	mov	r3, r7
 c000616:	2208      	movs	r2, #8
 c000618:	4619      	mov	r1, r3
 c00061a:	68f8      	ldr	r0, [r7, #12]
 c00061c:	f009 f8b8 	bl	c009790 <memcpy>
 c000620:	bf00      	nop
 c000622:	3710      	adds	r7, #16
 c000624:	46bd      	mov	sp, r7
 c000626:	bd80      	pop	{r7, pc}

0c000628 <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes>:

#include "Hacl_SHA2_256.h"

static void
Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes(uint32_t *output, uint8_t *input, uint32_t len)
{
 c000628:	b580      	push	{r7, lr}
 c00062a:	b088      	sub	sp, #32
 c00062c:	af00      	add	r7, sp, #0
 c00062e:	60f8      	str	r0, [r7, #12]
 c000630:	60b9      	str	r1, [r7, #8]
 c000632:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c000634:	2300      	movs	r3, #0
 c000636:	61fb      	str	r3, [r7, #28]
 c000638:	e021      	b.n	c00067e <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes+0x56>
  {
    uint8_t *x0 = input + (uint32_t)4U * i;
 c00063a:	69fb      	ldr	r3, [r7, #28]
 c00063c:	009b      	lsls	r3, r3, #2
 c00063e:	68ba      	ldr	r2, [r7, #8]
 c000640:	4413      	add	r3, r2
 c000642:	61bb      	str	r3, [r7, #24]
    uint32_t inputi = load32_be(x0);
 c000644:	69b8      	ldr	r0, [r7, #24]
 c000646:	f7ff ffc3 	bl	c0005d0 <load32>
 c00064a:	6178      	str	r0, [r7, #20]
 c00064c:	697b      	ldr	r3, [r7, #20]
 c00064e:	0e1a      	lsrs	r2, r3, #24
 c000650:	697b      	ldr	r3, [r7, #20]
 c000652:	0a1b      	lsrs	r3, r3, #8
 c000654:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c000658:	431a      	orrs	r2, r3
 c00065a:	697b      	ldr	r3, [r7, #20]
 c00065c:	021b      	lsls	r3, r3, #8
 c00065e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c000662:	431a      	orrs	r2, r3
 c000664:	697b      	ldr	r3, [r7, #20]
 c000666:	061b      	lsls	r3, r3, #24
 c000668:	4313      	orrs	r3, r2
 c00066a:	613b      	str	r3, [r7, #16]
    output[i] = inputi;
 c00066c:	69fb      	ldr	r3, [r7, #28]
 c00066e:	009b      	lsls	r3, r3, #2
 c000670:	68fa      	ldr	r2, [r7, #12]
 c000672:	4413      	add	r3, r2
 c000674:	693a      	ldr	r2, [r7, #16]
 c000676:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c000678:	69fb      	ldr	r3, [r7, #28]
 c00067a:	3301      	adds	r3, #1
 c00067c:	61fb      	str	r3, [r7, #28]
 c00067e:	69fa      	ldr	r2, [r7, #28]
 c000680:	687b      	ldr	r3, [r7, #4]
 c000682:	429a      	cmp	r2, r3
 c000684:	d3d9      	bcc.n	c00063a <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes+0x12>
  }
}
 c000686:	bf00      	nop
 c000688:	bf00      	nop
 c00068a:	3720      	adds	r7, #32
 c00068c:	46bd      	mov	sp, r7
 c00068e:	bd80      	pop	{r7, pc}

0c000690 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes>:

static void
Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes(uint8_t *output, uint32_t *input, uint32_t len)
{
 c000690:	b580      	push	{r7, lr}
 c000692:	b088      	sub	sp, #32
 c000694:	af00      	add	r7, sp, #0
 c000696:	60f8      	str	r0, [r7, #12]
 c000698:	60b9      	str	r1, [r7, #8]
 c00069a:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c00069c:	2300      	movs	r3, #0
 c00069e:	61fb      	str	r3, [r7, #28]
 c0006a0:	e022      	b.n	c0006e8 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes+0x58>
  {
    uint32_t hd1 = input[i];
 c0006a2:	69fb      	ldr	r3, [r7, #28]
 c0006a4:	009b      	lsls	r3, r3, #2
 c0006a6:	68ba      	ldr	r2, [r7, #8]
 c0006a8:	4413      	add	r3, r2
 c0006aa:	681b      	ldr	r3, [r3, #0]
 c0006ac:	61bb      	str	r3, [r7, #24]
    uint8_t *x0 = output + (uint32_t)4U * i;
 c0006ae:	69fb      	ldr	r3, [r7, #28]
 c0006b0:	009b      	lsls	r3, r3, #2
 c0006b2:	68fa      	ldr	r2, [r7, #12]
 c0006b4:	4413      	add	r3, r2
 c0006b6:	617b      	str	r3, [r7, #20]
    store32_be(x0, hd1);
 c0006b8:	69bb      	ldr	r3, [r7, #24]
 c0006ba:	613b      	str	r3, [r7, #16]
 c0006bc:	693b      	ldr	r3, [r7, #16]
 c0006be:	0e1a      	lsrs	r2, r3, #24
 c0006c0:	693b      	ldr	r3, [r7, #16]
 c0006c2:	0a1b      	lsrs	r3, r3, #8
 c0006c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c0006c8:	431a      	orrs	r2, r3
 c0006ca:	693b      	ldr	r3, [r7, #16]
 c0006cc:	021b      	lsls	r3, r3, #8
 c0006ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c0006d2:	431a      	orrs	r2, r3
 c0006d4:	693b      	ldr	r3, [r7, #16]
 c0006d6:	061b      	lsls	r3, r3, #24
 c0006d8:	4313      	orrs	r3, r2
 c0006da:	4619      	mov	r1, r3
 c0006dc:	6978      	ldr	r0, [r7, #20]
 c0006de:	f7ff ff85 	bl	c0005ec <store32>
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c0006e2:	69fb      	ldr	r3, [r7, #28]
 c0006e4:	3301      	adds	r3, #1
 c0006e6:	61fb      	str	r3, [r7, #28]
 c0006e8:	69fa      	ldr	r2, [r7, #28]
 c0006ea:	687b      	ldr	r3, [r7, #4]
 c0006ec:	429a      	cmp	r2, r3
 c0006ee:	d3d8      	bcc.n	c0006a2 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes+0x12>
  }
}
 c0006f0:	bf00      	nop
 c0006f2:	bf00      	nop
 c0006f4:	3720      	adds	r7, #32
 c0006f6:	46bd      	mov	sp, r7
 c0006f8:	bd80      	pop	{r7, pc}
	...

0c0006fc <Hacl_Impl_SHA2_256_init>:

static void Hacl_Impl_SHA2_256_init(uint32_t *state)
{
 c0006fc:	b480      	push	{r7}
 c0006fe:	b0a3      	sub	sp, #140	; 0x8c
 c000700:	af00      	add	r7, sp, #0
 c000702:	6078      	str	r0, [r7, #4]
  uint32_t *k1 = state;
 c000704:	687b      	ldr	r3, [r7, #4]
 c000706:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t *h_01 = state + (uint32_t)128U;
 c00070a:	687b      	ldr	r3, [r7, #4]
 c00070c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c000710:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t *p10 = k1;
 c000714:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000718:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t *p20 = k1 + (uint32_t)16U;
 c00071a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c00071e:	3340      	adds	r3, #64	; 0x40
 c000720:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t *p3 = k1 + (uint32_t)32U;
 c000722:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000726:	3380      	adds	r3, #128	; 0x80
 c000728:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t *p4 = k1 + (uint32_t)48U;
 c00072a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c00072e:	33c0      	adds	r3, #192	; 0xc0
 c000730:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t *p11 = p10;
 c000732:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 c000734:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t *p21 = p10 + (uint32_t)8U;
 c000736:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 c000738:	3320      	adds	r3, #32
 c00073a:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t *p12 = p11;
 c00073c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00073e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t *p22 = p11 + (uint32_t)4U;
 c000740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c000742:	3310      	adds	r3, #16
 c000744:	663b      	str	r3, [r7, #96]	; 0x60
  p12[0U] = (uint32_t)0x428a2f98U;
 c000746:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c000748:	4a8d      	ldr	r2, [pc, #564]	; (c000980 <Hacl_Impl_SHA2_256_init+0x284>)
 c00074a:	601a      	str	r2, [r3, #0]
  p12[1U] = (uint32_t)0x71374491U;
 c00074c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c00074e:	3304      	adds	r3, #4
 c000750:	4a8c      	ldr	r2, [pc, #560]	; (c000984 <Hacl_Impl_SHA2_256_init+0x288>)
 c000752:	601a      	str	r2, [r3, #0]
  p12[2U] = (uint32_t)0xb5c0fbcfU;
 c000754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c000756:	3308      	adds	r3, #8
 c000758:	4a8b      	ldr	r2, [pc, #556]	; (c000988 <Hacl_Impl_SHA2_256_init+0x28c>)
 c00075a:	601a      	str	r2, [r3, #0]
  p12[3U] = (uint32_t)0xe9b5dba5U;
 c00075c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c00075e:	330c      	adds	r3, #12
 c000760:	4a8a      	ldr	r2, [pc, #552]	; (c00098c <Hacl_Impl_SHA2_256_init+0x290>)
 c000762:	601a      	str	r2, [r3, #0]
  p22[0U] = (uint32_t)0x3956c25bU;
 c000764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c000766:	4a8a      	ldr	r2, [pc, #552]	; (c000990 <Hacl_Impl_SHA2_256_init+0x294>)
 c000768:	601a      	str	r2, [r3, #0]
  p22[1U] = (uint32_t)0x59f111f1U;
 c00076a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c00076c:	3304      	adds	r3, #4
 c00076e:	4a89      	ldr	r2, [pc, #548]	; (c000994 <Hacl_Impl_SHA2_256_init+0x298>)
 c000770:	601a      	str	r2, [r3, #0]
  p22[2U] = (uint32_t)0x923f82a4U;
 c000772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c000774:	3308      	adds	r3, #8
 c000776:	4a88      	ldr	r2, [pc, #544]	; (c000998 <Hacl_Impl_SHA2_256_init+0x29c>)
 c000778:	601a      	str	r2, [r3, #0]
  p22[3U] = (uint32_t)0xab1c5ed5U;
 c00077a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c00077c:	330c      	adds	r3, #12
 c00077e:	4a87      	ldr	r2, [pc, #540]	; (c00099c <Hacl_Impl_SHA2_256_init+0x2a0>)
 c000780:	601a      	str	r2, [r3, #0]
  uint32_t *p13 = p21;
 c000782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c000784:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t *p23 = p21 + (uint32_t)4U;
 c000786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c000788:	3310      	adds	r3, #16
 c00078a:	65bb      	str	r3, [r7, #88]	; 0x58
  p13[0U] = (uint32_t)0xd807aa98U;
 c00078c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00078e:	4a84      	ldr	r2, [pc, #528]	; (c0009a0 <Hacl_Impl_SHA2_256_init+0x2a4>)
 c000790:	601a      	str	r2, [r3, #0]
  p13[1U] = (uint32_t)0x12835b01U;
 c000792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c000794:	3304      	adds	r3, #4
 c000796:	4a83      	ldr	r2, [pc, #524]	; (c0009a4 <Hacl_Impl_SHA2_256_init+0x2a8>)
 c000798:	601a      	str	r2, [r3, #0]
  p13[2U] = (uint32_t)0x243185beU;
 c00079a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00079c:	3308      	adds	r3, #8
 c00079e:	4a82      	ldr	r2, [pc, #520]	; (c0009a8 <Hacl_Impl_SHA2_256_init+0x2ac>)
 c0007a0:	601a      	str	r2, [r3, #0]
  p13[3U] = (uint32_t)0x550c7dc3U;
 c0007a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c0007a4:	330c      	adds	r3, #12
 c0007a6:	4a81      	ldr	r2, [pc, #516]	; (c0009ac <Hacl_Impl_SHA2_256_init+0x2b0>)
 c0007a8:	601a      	str	r2, [r3, #0]
  p23[0U] = (uint32_t)0x72be5d74U;
 c0007aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0007ac:	4a80      	ldr	r2, [pc, #512]	; (c0009b0 <Hacl_Impl_SHA2_256_init+0x2b4>)
 c0007ae:	601a      	str	r2, [r3, #0]
  p23[1U] = (uint32_t)0x80deb1feU;
 c0007b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0007b2:	3304      	adds	r3, #4
 c0007b4:	4a7f      	ldr	r2, [pc, #508]	; (c0009b4 <Hacl_Impl_SHA2_256_init+0x2b8>)
 c0007b6:	601a      	str	r2, [r3, #0]
  p23[2U] = (uint32_t)0x9bdc06a7U;
 c0007b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0007ba:	3308      	adds	r3, #8
 c0007bc:	4a7e      	ldr	r2, [pc, #504]	; (c0009b8 <Hacl_Impl_SHA2_256_init+0x2bc>)
 c0007be:	601a      	str	r2, [r3, #0]
  p23[3U] = (uint32_t)0xc19bf174U;
 c0007c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0007c2:	330c      	adds	r3, #12
 c0007c4:	4a7d      	ldr	r2, [pc, #500]	; (c0009bc <Hacl_Impl_SHA2_256_init+0x2c0>)
 c0007c6:	601a      	str	r2, [r3, #0]
  uint32_t *p14 = p20;
 c0007c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c0007ca:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t *p24 = p20 + (uint32_t)8U;
 c0007cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c0007ce:	3320      	adds	r3, #32
 c0007d0:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t *p15 = p14;
 c0007d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c0007d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t *p25 = p14 + (uint32_t)4U;
 c0007d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c0007d8:	3310      	adds	r3, #16
 c0007da:	64bb      	str	r3, [r7, #72]	; 0x48
  p15[0U] = (uint32_t)0xe49b69c1U;
 c0007dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0007de:	4a78      	ldr	r2, [pc, #480]	; (c0009c0 <Hacl_Impl_SHA2_256_init+0x2c4>)
 c0007e0:	601a      	str	r2, [r3, #0]
  p15[1U] = (uint32_t)0xefbe4786U;
 c0007e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0007e4:	3304      	adds	r3, #4
 c0007e6:	4a77      	ldr	r2, [pc, #476]	; (c0009c4 <Hacl_Impl_SHA2_256_init+0x2c8>)
 c0007e8:	601a      	str	r2, [r3, #0]
  p15[2U] = (uint32_t)0x0fc19dc6U;
 c0007ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0007ec:	3308      	adds	r3, #8
 c0007ee:	4a76      	ldr	r2, [pc, #472]	; (c0009c8 <Hacl_Impl_SHA2_256_init+0x2cc>)
 c0007f0:	601a      	str	r2, [r3, #0]
  p15[3U] = (uint32_t)0x240ca1ccU;
 c0007f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0007f4:	330c      	adds	r3, #12
 c0007f6:	4a75      	ldr	r2, [pc, #468]	; (c0009cc <Hacl_Impl_SHA2_256_init+0x2d0>)
 c0007f8:	601a      	str	r2, [r3, #0]
  p25[0U] = (uint32_t)0x2de92c6fU;
 c0007fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c0007fc:	4a74      	ldr	r2, [pc, #464]	; (c0009d0 <Hacl_Impl_SHA2_256_init+0x2d4>)
 c0007fe:	601a      	str	r2, [r3, #0]
  p25[1U] = (uint32_t)0x4a7484aaU;
 c000800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c000802:	3304      	adds	r3, #4
 c000804:	4a73      	ldr	r2, [pc, #460]	; (c0009d4 <Hacl_Impl_SHA2_256_init+0x2d8>)
 c000806:	601a      	str	r2, [r3, #0]
  p25[2U] = (uint32_t)0x5cb0a9dcU;
 c000808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c00080a:	3308      	adds	r3, #8
 c00080c:	4a72      	ldr	r2, [pc, #456]	; (c0009d8 <Hacl_Impl_SHA2_256_init+0x2dc>)
 c00080e:	601a      	str	r2, [r3, #0]
  p25[3U] = (uint32_t)0x76f988daU;
 c000810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c000812:	330c      	adds	r3, #12
 c000814:	4a71      	ldr	r2, [pc, #452]	; (c0009dc <Hacl_Impl_SHA2_256_init+0x2e0>)
 c000816:	601a      	str	r2, [r3, #0]
  uint32_t *p16 = p24;
 c000818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00081a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t *p26 = p24 + (uint32_t)4U;
 c00081c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00081e:	3310      	adds	r3, #16
 c000820:	643b      	str	r3, [r7, #64]	; 0x40
  p16[0U] = (uint32_t)0x983e5152U;
 c000822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c000824:	4a6e      	ldr	r2, [pc, #440]	; (c0009e0 <Hacl_Impl_SHA2_256_init+0x2e4>)
 c000826:	601a      	str	r2, [r3, #0]
  p16[1U] = (uint32_t)0xa831c66dU;
 c000828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00082a:	3304      	adds	r3, #4
 c00082c:	4a6d      	ldr	r2, [pc, #436]	; (c0009e4 <Hacl_Impl_SHA2_256_init+0x2e8>)
 c00082e:	601a      	str	r2, [r3, #0]
  p16[2U] = (uint32_t)0xb00327c8U;
 c000830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c000832:	3308      	adds	r3, #8
 c000834:	4a6c      	ldr	r2, [pc, #432]	; (c0009e8 <Hacl_Impl_SHA2_256_init+0x2ec>)
 c000836:	601a      	str	r2, [r3, #0]
  p16[3U] = (uint32_t)0xbf597fc7U;
 c000838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00083a:	330c      	adds	r3, #12
 c00083c:	4a6b      	ldr	r2, [pc, #428]	; (c0009ec <Hacl_Impl_SHA2_256_init+0x2f0>)
 c00083e:	601a      	str	r2, [r3, #0]
  p26[0U] = (uint32_t)0xc6e00bf3U;
 c000840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c000842:	4a6b      	ldr	r2, [pc, #428]	; (c0009f0 <Hacl_Impl_SHA2_256_init+0x2f4>)
 c000844:	601a      	str	r2, [r3, #0]
  p26[1U] = (uint32_t)0xd5a79147U;
 c000846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c000848:	3304      	adds	r3, #4
 c00084a:	4a6a      	ldr	r2, [pc, #424]	; (c0009f4 <Hacl_Impl_SHA2_256_init+0x2f8>)
 c00084c:	601a      	str	r2, [r3, #0]
  p26[2U] = (uint32_t)0x06ca6351U;
 c00084e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c000850:	3308      	adds	r3, #8
 c000852:	4a69      	ldr	r2, [pc, #420]	; (c0009f8 <Hacl_Impl_SHA2_256_init+0x2fc>)
 c000854:	601a      	str	r2, [r3, #0]
  p26[3U] = (uint32_t)0x14292967U;
 c000856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c000858:	330c      	adds	r3, #12
 c00085a:	4a68      	ldr	r2, [pc, #416]	; (c0009fc <Hacl_Impl_SHA2_256_init+0x300>)
 c00085c:	601a      	str	r2, [r3, #0]
  uint32_t *p17 = p3;
 c00085e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c000860:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t *p27 = p3 + (uint32_t)8U;
 c000862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c000864:	3320      	adds	r3, #32
 c000866:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t *p18 = p17;
 c000868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c00086a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t *p28 = p17 + (uint32_t)4U;
 c00086c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c00086e:	3310      	adds	r3, #16
 c000870:	633b      	str	r3, [r7, #48]	; 0x30
  p18[0U] = (uint32_t)0x27b70a85U;
 c000872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c000874:	4a62      	ldr	r2, [pc, #392]	; (c000a00 <Hacl_Impl_SHA2_256_init+0x304>)
 c000876:	601a      	str	r2, [r3, #0]
  p18[1U] = (uint32_t)0x2e1b2138U;
 c000878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00087a:	3304      	adds	r3, #4
 c00087c:	4a61      	ldr	r2, [pc, #388]	; (c000a04 <Hacl_Impl_SHA2_256_init+0x308>)
 c00087e:	601a      	str	r2, [r3, #0]
  p18[2U] = (uint32_t)0x4d2c6dfcU;
 c000880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c000882:	3308      	adds	r3, #8
 c000884:	4a60      	ldr	r2, [pc, #384]	; (c000a08 <Hacl_Impl_SHA2_256_init+0x30c>)
 c000886:	601a      	str	r2, [r3, #0]
  p18[3U] = (uint32_t)0x53380d13U;
 c000888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00088a:	330c      	adds	r3, #12
 c00088c:	4a5f      	ldr	r2, [pc, #380]	; (c000a0c <Hacl_Impl_SHA2_256_init+0x310>)
 c00088e:	601a      	str	r2, [r3, #0]
  p28[0U] = (uint32_t)0x650a7354U;
 c000890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c000892:	4a5f      	ldr	r2, [pc, #380]	; (c000a10 <Hacl_Impl_SHA2_256_init+0x314>)
 c000894:	601a      	str	r2, [r3, #0]
  p28[1U] = (uint32_t)0x766a0abbU;
 c000896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c000898:	3304      	adds	r3, #4
 c00089a:	4a5e      	ldr	r2, [pc, #376]	; (c000a14 <Hacl_Impl_SHA2_256_init+0x318>)
 c00089c:	601a      	str	r2, [r3, #0]
  p28[2U] = (uint32_t)0x81c2c92eU;
 c00089e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c0008a0:	3308      	adds	r3, #8
 c0008a2:	4a5d      	ldr	r2, [pc, #372]	; (c000a18 <Hacl_Impl_SHA2_256_init+0x31c>)
 c0008a4:	601a      	str	r2, [r3, #0]
  p28[3U] = (uint32_t)0x92722c85U;
 c0008a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c0008a8:	330c      	adds	r3, #12
 c0008aa:	4a5c      	ldr	r2, [pc, #368]	; (c000a1c <Hacl_Impl_SHA2_256_init+0x320>)
 c0008ac:	601a      	str	r2, [r3, #0]
  uint32_t *p19 = p27;
 c0008ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t *p29 = p27 + (uint32_t)4U;
 c0008b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0008b4:	3310      	adds	r3, #16
 c0008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  p19[0U] = (uint32_t)0xa2bfe8a1U;
 c0008b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0008ba:	4a59      	ldr	r2, [pc, #356]	; (c000a20 <Hacl_Impl_SHA2_256_init+0x324>)
 c0008bc:	601a      	str	r2, [r3, #0]
  p19[1U] = (uint32_t)0xa81a664bU;
 c0008be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0008c0:	3304      	adds	r3, #4
 c0008c2:	4a58      	ldr	r2, [pc, #352]	; (c000a24 <Hacl_Impl_SHA2_256_init+0x328>)
 c0008c4:	601a      	str	r2, [r3, #0]
  p19[2U] = (uint32_t)0xc24b8b70U;
 c0008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0008c8:	3308      	adds	r3, #8
 c0008ca:	4a57      	ldr	r2, [pc, #348]	; (c000a28 <Hacl_Impl_SHA2_256_init+0x32c>)
 c0008cc:	601a      	str	r2, [r3, #0]
  p19[3U] = (uint32_t)0xc76c51a3U;
 c0008ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0008d0:	330c      	adds	r3, #12
 c0008d2:	4a56      	ldr	r2, [pc, #344]	; (c000a2c <Hacl_Impl_SHA2_256_init+0x330>)
 c0008d4:	601a      	str	r2, [r3, #0]
  p29[0U] = (uint32_t)0xd192e819U;
 c0008d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0008d8:	4a55      	ldr	r2, [pc, #340]	; (c000a30 <Hacl_Impl_SHA2_256_init+0x334>)
 c0008da:	601a      	str	r2, [r3, #0]
  p29[1U] = (uint32_t)0xd6990624U;
 c0008dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0008de:	3304      	adds	r3, #4
 c0008e0:	4a54      	ldr	r2, [pc, #336]	; (c000a34 <Hacl_Impl_SHA2_256_init+0x338>)
 c0008e2:	601a      	str	r2, [r3, #0]
  p29[2U] = (uint32_t)0xf40e3585U;
 c0008e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0008e6:	3308      	adds	r3, #8
 c0008e8:	4a53      	ldr	r2, [pc, #332]	; (c000a38 <Hacl_Impl_SHA2_256_init+0x33c>)
 c0008ea:	601a      	str	r2, [r3, #0]
  p29[3U] = (uint32_t)0x106aa070U;
 c0008ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0008ee:	330c      	adds	r3, #12
 c0008f0:	4a52      	ldr	r2, [pc, #328]	; (c000a3c <Hacl_Impl_SHA2_256_init+0x340>)
 c0008f2:	601a      	str	r2, [r3, #0]
  uint32_t *p110 = p4;
 c0008f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c0008f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t *p210 = p4 + (uint32_t)8U;
 c0008f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c0008fa:	3320      	adds	r3, #32
 c0008fc:	623b      	str	r3, [r7, #32]
  uint32_t *p1 = p110;
 c0008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000900:	61fb      	str	r3, [r7, #28]
  uint32_t *p211 = p110 + (uint32_t)4U;
 c000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000904:	3310      	adds	r3, #16
 c000906:	61bb      	str	r3, [r7, #24]
  p1[0U] = (uint32_t)0x19a4c116U;
 c000908:	69fb      	ldr	r3, [r7, #28]
 c00090a:	4a4d      	ldr	r2, [pc, #308]	; (c000a40 <Hacl_Impl_SHA2_256_init+0x344>)
 c00090c:	601a      	str	r2, [r3, #0]
  p1[1U] = (uint32_t)0x1e376c08U;
 c00090e:	69fb      	ldr	r3, [r7, #28]
 c000910:	3304      	adds	r3, #4
 c000912:	4a4c      	ldr	r2, [pc, #304]	; (c000a44 <Hacl_Impl_SHA2_256_init+0x348>)
 c000914:	601a      	str	r2, [r3, #0]
  p1[2U] = (uint32_t)0x2748774cU;
 c000916:	69fb      	ldr	r3, [r7, #28]
 c000918:	3308      	adds	r3, #8
 c00091a:	4a4b      	ldr	r2, [pc, #300]	; (c000a48 <Hacl_Impl_SHA2_256_init+0x34c>)
 c00091c:	601a      	str	r2, [r3, #0]
  p1[3U] = (uint32_t)0x34b0bcb5U;
 c00091e:	69fb      	ldr	r3, [r7, #28]
 c000920:	330c      	adds	r3, #12
 c000922:	4a4a      	ldr	r2, [pc, #296]	; (c000a4c <Hacl_Impl_SHA2_256_init+0x350>)
 c000924:	601a      	str	r2, [r3, #0]
  p211[0U] = (uint32_t)0x391c0cb3U;
 c000926:	69bb      	ldr	r3, [r7, #24]
 c000928:	4a49      	ldr	r2, [pc, #292]	; (c000a50 <Hacl_Impl_SHA2_256_init+0x354>)
 c00092a:	601a      	str	r2, [r3, #0]
  p211[1U] = (uint32_t)0x4ed8aa4aU;
 c00092c:	69bb      	ldr	r3, [r7, #24]
 c00092e:	3304      	adds	r3, #4
 c000930:	4a48      	ldr	r2, [pc, #288]	; (c000a54 <Hacl_Impl_SHA2_256_init+0x358>)
 c000932:	601a      	str	r2, [r3, #0]
  p211[2U] = (uint32_t)0x5b9cca4fU;
 c000934:	69bb      	ldr	r3, [r7, #24]
 c000936:	3308      	adds	r3, #8
 c000938:	4a47      	ldr	r2, [pc, #284]	; (c000a58 <Hacl_Impl_SHA2_256_init+0x35c>)
 c00093a:	601a      	str	r2, [r3, #0]
  p211[3U] = (uint32_t)0x682e6ff3U;
 c00093c:	69bb      	ldr	r3, [r7, #24]
 c00093e:	330c      	adds	r3, #12
 c000940:	4a46      	ldr	r2, [pc, #280]	; (c000a5c <Hacl_Impl_SHA2_256_init+0x360>)
 c000942:	601a      	str	r2, [r3, #0]
  uint32_t *p111 = p210;
 c000944:	6a3b      	ldr	r3, [r7, #32]
 c000946:	617b      	str	r3, [r7, #20]
  uint32_t *p212 = p210 + (uint32_t)4U;
 c000948:	6a3b      	ldr	r3, [r7, #32]
 c00094a:	3310      	adds	r3, #16
 c00094c:	613b      	str	r3, [r7, #16]
  p111[0U] = (uint32_t)0x748f82eeU;
 c00094e:	697b      	ldr	r3, [r7, #20]
 c000950:	4a43      	ldr	r2, [pc, #268]	; (c000a60 <Hacl_Impl_SHA2_256_init+0x364>)
 c000952:	601a      	str	r2, [r3, #0]
  p111[1U] = (uint32_t)0x78a5636fU;
 c000954:	697b      	ldr	r3, [r7, #20]
 c000956:	3304      	adds	r3, #4
 c000958:	4a42      	ldr	r2, [pc, #264]	; (c000a64 <Hacl_Impl_SHA2_256_init+0x368>)
 c00095a:	601a      	str	r2, [r3, #0]
  p111[2U] = (uint32_t)0x84c87814U;
 c00095c:	697b      	ldr	r3, [r7, #20]
 c00095e:	3308      	adds	r3, #8
 c000960:	4a41      	ldr	r2, [pc, #260]	; (c000a68 <Hacl_Impl_SHA2_256_init+0x36c>)
 c000962:	601a      	str	r2, [r3, #0]
  p111[3U] = (uint32_t)0x8cc70208U;
 c000964:	697b      	ldr	r3, [r7, #20]
 c000966:	330c      	adds	r3, #12
 c000968:	4a40      	ldr	r2, [pc, #256]	; (c000a6c <Hacl_Impl_SHA2_256_init+0x370>)
 c00096a:	601a      	str	r2, [r3, #0]
  p212[0U] = (uint32_t)0x90befffaU;
 c00096c:	693b      	ldr	r3, [r7, #16]
 c00096e:	4a40      	ldr	r2, [pc, #256]	; (c000a70 <Hacl_Impl_SHA2_256_init+0x374>)
 c000970:	601a      	str	r2, [r3, #0]
  p212[1U] = (uint32_t)0xa4506cebU;
 c000972:	693b      	ldr	r3, [r7, #16]
 c000974:	3304      	adds	r3, #4
 c000976:	4a3f      	ldr	r2, [pc, #252]	; (c000a74 <Hacl_Impl_SHA2_256_init+0x378>)
 c000978:	601a      	str	r2, [r3, #0]
  p212[2U] = (uint32_t)0xbef9a3f7U;
 c00097a:	693b      	ldr	r3, [r7, #16]
 c00097c:	e07c      	b.n	c000a78 <Hacl_Impl_SHA2_256_init+0x37c>
 c00097e:	bf00      	nop
 c000980:	428a2f98 	.word	0x428a2f98
 c000984:	71374491 	.word	0x71374491
 c000988:	b5c0fbcf 	.word	0xb5c0fbcf
 c00098c:	e9b5dba5 	.word	0xe9b5dba5
 c000990:	3956c25b 	.word	0x3956c25b
 c000994:	59f111f1 	.word	0x59f111f1
 c000998:	923f82a4 	.word	0x923f82a4
 c00099c:	ab1c5ed5 	.word	0xab1c5ed5
 c0009a0:	d807aa98 	.word	0xd807aa98
 c0009a4:	12835b01 	.word	0x12835b01
 c0009a8:	243185be 	.word	0x243185be
 c0009ac:	550c7dc3 	.word	0x550c7dc3
 c0009b0:	72be5d74 	.word	0x72be5d74
 c0009b4:	80deb1fe 	.word	0x80deb1fe
 c0009b8:	9bdc06a7 	.word	0x9bdc06a7
 c0009bc:	c19bf174 	.word	0xc19bf174
 c0009c0:	e49b69c1 	.word	0xe49b69c1
 c0009c4:	efbe4786 	.word	0xefbe4786
 c0009c8:	0fc19dc6 	.word	0x0fc19dc6
 c0009cc:	240ca1cc 	.word	0x240ca1cc
 c0009d0:	2de92c6f 	.word	0x2de92c6f
 c0009d4:	4a7484aa 	.word	0x4a7484aa
 c0009d8:	5cb0a9dc 	.word	0x5cb0a9dc
 c0009dc:	76f988da 	.word	0x76f988da
 c0009e0:	983e5152 	.word	0x983e5152
 c0009e4:	a831c66d 	.word	0xa831c66d
 c0009e8:	b00327c8 	.word	0xb00327c8
 c0009ec:	bf597fc7 	.word	0xbf597fc7
 c0009f0:	c6e00bf3 	.word	0xc6e00bf3
 c0009f4:	d5a79147 	.word	0xd5a79147
 c0009f8:	06ca6351 	.word	0x06ca6351
 c0009fc:	14292967 	.word	0x14292967
 c000a00:	27b70a85 	.word	0x27b70a85
 c000a04:	2e1b2138 	.word	0x2e1b2138
 c000a08:	4d2c6dfc 	.word	0x4d2c6dfc
 c000a0c:	53380d13 	.word	0x53380d13
 c000a10:	650a7354 	.word	0x650a7354
 c000a14:	766a0abb 	.word	0x766a0abb
 c000a18:	81c2c92e 	.word	0x81c2c92e
 c000a1c:	92722c85 	.word	0x92722c85
 c000a20:	a2bfe8a1 	.word	0xa2bfe8a1
 c000a24:	a81a664b 	.word	0xa81a664b
 c000a28:	c24b8b70 	.word	0xc24b8b70
 c000a2c:	c76c51a3 	.word	0xc76c51a3
 c000a30:	d192e819 	.word	0xd192e819
 c000a34:	d6990624 	.word	0xd6990624
 c000a38:	f40e3585 	.word	0xf40e3585
 c000a3c:	106aa070 	.word	0x106aa070
 c000a40:	19a4c116 	.word	0x19a4c116
 c000a44:	1e376c08 	.word	0x1e376c08
 c000a48:	2748774c 	.word	0x2748774c
 c000a4c:	34b0bcb5 	.word	0x34b0bcb5
 c000a50:	391c0cb3 	.word	0x391c0cb3
 c000a54:	4ed8aa4a 	.word	0x4ed8aa4a
 c000a58:	5b9cca4f 	.word	0x5b9cca4f
 c000a5c:	682e6ff3 	.word	0x682e6ff3
 c000a60:	748f82ee 	.word	0x748f82ee
 c000a64:	78a5636f 	.word	0x78a5636f
 c000a68:	84c87814 	.word	0x84c87814
 c000a6c:	8cc70208 	.word	0x8cc70208
 c000a70:	90befffa 	.word	0x90befffa
 c000a74:	a4506ceb 	.word	0xa4506ceb
 c000a78:	3308      	adds	r3, #8
 c000a7a:	4a18      	ldr	r2, [pc, #96]	; (c000adc <Hacl_Impl_SHA2_256_init+0x3e0>)
 c000a7c:	601a      	str	r2, [r3, #0]
  p212[3U] = (uint32_t)0xc67178f2U;
 c000a7e:	693b      	ldr	r3, [r7, #16]
 c000a80:	330c      	adds	r3, #12
 c000a82:	4a17      	ldr	r2, [pc, #92]	; (c000ae0 <Hacl_Impl_SHA2_256_init+0x3e4>)
 c000a84:	601a      	str	r2, [r3, #0]
  uint32_t *p112 = h_01;
 c000a86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000a8a:	60fb      	str	r3, [r7, #12]
  uint32_t *p2 = h_01 + (uint32_t)4U;
 c000a8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000a90:	3310      	adds	r3, #16
 c000a92:	60bb      	str	r3, [r7, #8]
  p112[0U] = (uint32_t)0x6a09e667U;
 c000a94:	68fb      	ldr	r3, [r7, #12]
 c000a96:	4a13      	ldr	r2, [pc, #76]	; (c000ae4 <Hacl_Impl_SHA2_256_init+0x3e8>)
 c000a98:	601a      	str	r2, [r3, #0]
  p112[1U] = (uint32_t)0xbb67ae85U;
 c000a9a:	68fb      	ldr	r3, [r7, #12]
 c000a9c:	3304      	adds	r3, #4
 c000a9e:	4a12      	ldr	r2, [pc, #72]	; (c000ae8 <Hacl_Impl_SHA2_256_init+0x3ec>)
 c000aa0:	601a      	str	r2, [r3, #0]
  p112[2U] = (uint32_t)0x3c6ef372U;
 c000aa2:	68fb      	ldr	r3, [r7, #12]
 c000aa4:	3308      	adds	r3, #8
 c000aa6:	4a11      	ldr	r2, [pc, #68]	; (c000aec <Hacl_Impl_SHA2_256_init+0x3f0>)
 c000aa8:	601a      	str	r2, [r3, #0]
  p112[3U] = (uint32_t)0xa54ff53aU;
 c000aaa:	68fb      	ldr	r3, [r7, #12]
 c000aac:	330c      	adds	r3, #12
 c000aae:	4a10      	ldr	r2, [pc, #64]	; (c000af0 <Hacl_Impl_SHA2_256_init+0x3f4>)
 c000ab0:	601a      	str	r2, [r3, #0]
  p2[0U] = (uint32_t)0x510e527fU;
 c000ab2:	68bb      	ldr	r3, [r7, #8]
 c000ab4:	4a0f      	ldr	r2, [pc, #60]	; (c000af4 <Hacl_Impl_SHA2_256_init+0x3f8>)
 c000ab6:	601a      	str	r2, [r3, #0]
  p2[1U] = (uint32_t)0x9b05688cU;
 c000ab8:	68bb      	ldr	r3, [r7, #8]
 c000aba:	3304      	adds	r3, #4
 c000abc:	4a0e      	ldr	r2, [pc, #56]	; (c000af8 <Hacl_Impl_SHA2_256_init+0x3fc>)
 c000abe:	601a      	str	r2, [r3, #0]
  p2[2U] = (uint32_t)0x1f83d9abU;
 c000ac0:	68bb      	ldr	r3, [r7, #8]
 c000ac2:	3308      	adds	r3, #8
 c000ac4:	4a0d      	ldr	r2, [pc, #52]	; (c000afc <Hacl_Impl_SHA2_256_init+0x400>)
 c000ac6:	601a      	str	r2, [r3, #0]
  p2[3U] = (uint32_t)0x5be0cd19U;
 c000ac8:	68bb      	ldr	r3, [r7, #8]
 c000aca:	330c      	adds	r3, #12
 c000acc:	4a0c      	ldr	r2, [pc, #48]	; (c000b00 <Hacl_Impl_SHA2_256_init+0x404>)
 c000ace:	601a      	str	r2, [r3, #0]
}
 c000ad0:	bf00      	nop
 c000ad2:	378c      	adds	r7, #140	; 0x8c
 c000ad4:	46bd      	mov	sp, r7
 c000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ada:	4770      	bx	lr
 c000adc:	bef9a3f7 	.word	0xbef9a3f7
 c000ae0:	c67178f2 	.word	0xc67178f2
 c000ae4:	6a09e667 	.word	0x6a09e667
 c000ae8:	bb67ae85 	.word	0xbb67ae85
 c000aec:	3c6ef372 	.word	0x3c6ef372
 c000af0:	a54ff53a 	.word	0xa54ff53a
 c000af4:	510e527f 	.word	0x510e527f
 c000af8:	9b05688c 	.word	0x9b05688c
 c000afc:	1f83d9ab 	.word	0x1f83d9ab
 c000b00:	5be0cd19 	.word	0x5be0cd19

0c000b04 <Hacl_Impl_SHA2_256_update>:

static void Hacl_Impl_SHA2_256_update(uint32_t *state, uint8_t *data)
{
 c000b04:	b580      	push	{r7, lr}
 c000b06:	b0bc      	sub	sp, #240	; 0xf0
 c000b08:	af00      	add	r7, sp, #0
 c000b0a:	6078      	str	r0, [r7, #4]
 c000b0c:	6039      	str	r1, [r7, #0]
  uint32_t data_w[16U] = { 0U };
 c000b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c000b12:	2240      	movs	r2, #64	; 0x40
 c000b14:	2100      	movs	r1, #0
 c000b16:	4618      	mov	r0, r3
 c000b18:	f008 fe47 	bl	c0097aa <memset>
  Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes(data_w, data, (uint32_t)16U);
 c000b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c000b20:	2210      	movs	r2, #16
 c000b22:	6839      	ldr	r1, [r7, #0]
 c000b24:	4618      	mov	r0, r3
 c000b26:	f7ff fd7f 	bl	c000628 <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes>
  uint32_t *hash_w = state + (uint32_t)128U;
 c000b2a:	687b      	ldr	r3, [r7, #4]
 c000b2c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c000b30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t *ws_w = state + (uint32_t)64U;
 c000b34:	687b      	ldr	r3, [r7, #4]
 c000b36:	f503 7380 	add.w	r3, r3, #256	; 0x100
 c000b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t *k_w = state;
 c000b3e:	687b      	ldr	r3, [r7, #4]
 c000b40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint32_t *counter_w = state + (uint32_t)136U;
 c000b44:	687b      	ldr	r3, [r7, #4]
 c000b46:	f503 7308 	add.w	r3, r3, #544	; 0x220
 c000b4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)16U; i = i + (uint32_t)1U)
 c000b4e:	2300      	movs	r3, #0
 c000b50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000b54:	e014      	b.n	c000b80 <Hacl_Impl_SHA2_256_update+0x7c>
  {
    uint32_t b = data_w[i];
 c000b56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000b5a:	009b      	lsls	r3, r3, #2
 c000b5c:	33f0      	adds	r3, #240	; 0xf0
 c000b5e:	443b      	add	r3, r7
 c000b60:	f853 3cc4 	ldr.w	r3, [r3, #-196]
 c000b64:	66fb      	str	r3, [r7, #108]	; 0x6c
    ws_w[i] = b;
 c000b66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000b6a:	009b      	lsls	r3, r3, #2
 c000b6c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000b70:	4413      	add	r3, r2
 c000b72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 c000b74:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)16U; i = i + (uint32_t)1U)
 c000b76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000b7a:	3301      	adds	r3, #1
 c000b7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000b80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000b84:	2b0f      	cmp	r3, #15
 c000b86:	d9e6      	bls.n	c000b56 <Hacl_Impl_SHA2_256_update+0x52>
  }
  for (uint32_t i = (uint32_t)16U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000b88:	2310      	movs	r3, #16
 c000b8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 c000b8e:	e050      	b.n	c000c32 <Hacl_Impl_SHA2_256_update+0x12e>
  {
    uint32_t t16 = ws_w[i - (uint32_t)16U];
 c000b90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000b94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c000b98:	3b10      	subs	r3, #16
 c000b9a:	009b      	lsls	r3, r3, #2
 c000b9c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000ba0:	4413      	add	r3, r2
 c000ba2:	681b      	ldr	r3, [r3, #0]
 c000ba4:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint32_t t15 = ws_w[i - (uint32_t)15U];
 c000ba6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000baa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c000bae:	3b0f      	subs	r3, #15
 c000bb0:	009b      	lsls	r3, r3, #2
 c000bb2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000bb6:	4413      	add	r3, r2
 c000bb8:	681b      	ldr	r3, [r3, #0]
 c000bba:	67bb      	str	r3, [r7, #120]	; 0x78
    uint32_t t7 = ws_w[i - (uint32_t)7U];
 c000bbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000bc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c000bc4:	3b07      	subs	r3, #7
 c000bc6:	009b      	lsls	r3, r3, #2
 c000bc8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000bcc:	4413      	add	r3, r2
 c000bce:	681b      	ldr	r3, [r3, #0]
 c000bd0:	677b      	str	r3, [r7, #116]	; 0x74
    uint32_t t2 = ws_w[i - (uint32_t)2U];
 c000bd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000bd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c000bda:	3b02      	subs	r3, #2
 c000bdc:	009b      	lsls	r3, r3, #2
 c000bde:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000be2:	4413      	add	r3, r2
 c000be4:	681b      	ldr	r3, [r3, #0]
 c000be6:	673b      	str	r3, [r7, #112]	; 0x70
    ws_w[i] =
      ((t2 >> (uint32_t)17U | t2 << ((uint32_t)32U - (uint32_t)17U))
 c000be8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c000bea:	ea4f 4273 	mov.w	r2, r3, ror #17
      ^ ((t2 >> (uint32_t)19U | t2 << ((uint32_t)32U - (uint32_t)19U)) ^ t2 >> (uint32_t)10U))
 c000bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c000bf0:	ea4f 41f3 	mov.w	r1, r3, ror #19
 c000bf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c000bf6:	0a9b      	lsrs	r3, r3, #10
 c000bf8:	404b      	eors	r3, r1
 c000bfa:	405a      	eors	r2, r3
      +
 c000bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c000bfe:	441a      	add	r2, r3
        t7
        +
          ((t15 >> (uint32_t)7U | t15 << ((uint32_t)32U - (uint32_t)7U))
 c000c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c000c02:	ea4f 11f3 	mov.w	r1, r3, ror #7
          ^ ((t15 >> (uint32_t)18U | t15 << ((uint32_t)32U - (uint32_t)18U)) ^ t15 >> (uint32_t)3U))
 c000c06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c000c08:	ea4f 40b3 	mov.w	r0, r3, ror #18
 c000c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c000c0e:	08db      	lsrs	r3, r3, #3
 c000c10:	4043      	eors	r3, r0
 c000c12:	404b      	eors	r3, r1
        +
 c000c14:	18d1      	adds	r1, r2, r3
    ws_w[i] =
 c000c16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000c1a:	009b      	lsls	r3, r3, #2
 c000c1c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000c20:	4413      	add	r3, r2
          + t16;
 c000c22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 c000c24:	440a      	add	r2, r1
    ws_w[i] =
 c000c26:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)16U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000c28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000c2c:	3301      	adds	r3, #1
 c000c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 c000c32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000c36:	2b3f      	cmp	r3, #63	; 0x3f
 c000c38:	d9aa      	bls.n	c000b90 <Hacl_Impl_SHA2_256_update+0x8c>
  }
  uint32_t hash_0[8U] = { 0U };
 c000c3a:	f107 030c 	add.w	r3, r7, #12
 c000c3e:	2220      	movs	r2, #32
 c000c40:	2100      	movs	r1, #0
 c000c42:	4618      	mov	r0, r3
 c000c44:	f008 fdb1 	bl	c0097aa <memset>
  memcpy(hash_0, hash_w, (uint32_t)8U * sizeof hash_w[0U]);
 c000c48:	f107 030c 	add.w	r3, r7, #12
 c000c4c:	2220      	movs	r2, #32
 c000c4e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 c000c52:	4618      	mov	r0, r3
 c000c54:	f008 fd9c 	bl	c009790 <memcpy>
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000c58:	2300      	movs	r3, #0
 c000c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c000c5e:	e0b8      	b.n	c000dd2 <Hacl_Impl_SHA2_256_update+0x2ce>
  {
    uint32_t a = hash_0[0U];
 c000c60:	68fb      	ldr	r3, [r7, #12]
 c000c62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    uint32_t b = hash_0[1U];
 c000c66:	693b      	ldr	r3, [r7, #16]
 c000c68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    uint32_t c = hash_0[2U];
 c000c6c:	697b      	ldr	r3, [r7, #20]
 c000c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    uint32_t d = hash_0[3U];
 c000c72:	69bb      	ldr	r3, [r7, #24]
 c000c74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint32_t e = hash_0[4U];
 c000c78:	69fb      	ldr	r3, [r7, #28]
 c000c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    uint32_t f1 = hash_0[5U];
 c000c7e:	6a3b      	ldr	r3, [r7, #32]
 c000c80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    uint32_t g = hash_0[6U];
 c000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000c86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    uint32_t h = hash_0[7U];
 c000c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c000c8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    uint32_t kt = k_w[i];
 c000c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000c94:	009b      	lsls	r3, r3, #2
 c000c96:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 c000c9a:	4413      	add	r3, r2
 c000c9c:	681b      	ldr	r3, [r3, #0]
 c000c9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t wst = ws_w[i];
 c000ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000ca6:	009b      	lsls	r3, r3, #2
 c000ca8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000cac:	4413      	add	r3, r2
 c000cae:	681b      	ldr	r3, [r3, #0]
 c000cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint32_t
    t1 =
      h
      +
        ((e >> (uint32_t)6U | e << ((uint32_t)32U - (uint32_t)6U))
 c000cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000cb8:	ea4f 12b3 	mov.w	r2, r3, ror #6
        ^
          ((e >> (uint32_t)11U | e << ((uint32_t)32U - (uint32_t)11U))
 c000cbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000cc0:	ea4f 21f3 	mov.w	r1, r3, ror #11
          ^ (e >> (uint32_t)25U | e << ((uint32_t)32U - (uint32_t)25U))))
 c000cc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000cc8:	ea4f 6373 	mov.w	r3, r3, ror #25
 c000ccc:	404b      	eors	r3, r1
        ^
 c000cce:	405a      	eors	r2, r3
      +
 c000cd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 c000cd4:	441a      	add	r2, r3
      + ((e & f1) ^ (~e & g))
 c000cd6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 c000cda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 c000cde:	4019      	ands	r1, r3
 c000ce0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000ce4:	43d8      	mvns	r0, r3
 c000ce6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 c000cea:	4003      	ands	r3, r0
 c000cec:	404b      	eors	r3, r1
 c000cee:	441a      	add	r2, r3
      + kt
 c000cf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 c000cf4:	4413      	add	r3, r2
    t1 =
 c000cf6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 c000cfa:	4413      	add	r3, r2
 c000cfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      + wst;
    uint32_t
    t2 =
      ((a >> (uint32_t)2U | a << ((uint32_t)32U - (uint32_t)2U))
 c000d00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c000d04:	ea4f 02b3 	mov.w	r2, r3, ror #2
      ^
        ((a >> (uint32_t)13U | a << ((uint32_t)32U - (uint32_t)13U))
 c000d08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c000d0c:	ea4f 3173 	mov.w	r1, r3, ror #13
        ^ (a >> (uint32_t)22U | a << ((uint32_t)32U - (uint32_t)22U))))
 c000d10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c000d14:	ea4f 53b3 	mov.w	r3, r3, ror #22
 c000d18:	404b      	eors	r3, r1
      ^
 c000d1a:	405a      	eors	r2, r3
      + ((a & b) ^ ((a & c) ^ (b & c)));
 c000d1c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 c000d20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c000d24:	4019      	ands	r1, r3
 c000d26:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 c000d2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c000d2e:	4058      	eors	r0, r3
 c000d30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000d34:	4003      	ands	r3, r0
 c000d36:	404b      	eors	r3, r1
    t2 =
 c000d38:	4413      	add	r3, r2
 c000d3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    uint32_t x1 = t1 + t2;
 c000d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 c000d42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c000d46:	4413      	add	r3, r2
 c000d48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint32_t x5 = d + t1;
 c000d4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 c000d50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 c000d54:	4413      	add	r3, r2
 c000d56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    uint32_t *p1 = hash_0;
 c000d5a:	f107 030c 	add.w	r3, r7, #12
 c000d5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t *p2 = hash_0 + (uint32_t)4U;
 c000d62:	f107 030c 	add.w	r3, r7, #12
 c000d66:	3310      	adds	r3, #16
 c000d68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    p1[0U] = x1;
 c000d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000d70:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 c000d74:	601a      	str	r2, [r3, #0]
    p1[1U] = a;
 c000d76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000d7a:	3304      	adds	r3, #4
 c000d7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 c000d80:	601a      	str	r2, [r3, #0]
    p1[2U] = b;
 c000d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000d86:	3308      	adds	r3, #8
 c000d88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 c000d8c:	601a      	str	r2, [r3, #0]
    p1[3U] = c;
 c000d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000d92:	330c      	adds	r3, #12
 c000d94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 c000d98:	601a      	str	r2, [r3, #0]
    p2[0U] = x5;
 c000d9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000d9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 c000da2:	601a      	str	r2, [r3, #0]
    p2[1U] = e;
 c000da4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000da8:	3304      	adds	r3, #4
 c000daa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 c000dae:	601a      	str	r2, [r3, #0]
    p2[2U] = f1;
 c000db0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000db4:	3308      	adds	r3, #8
 c000db6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 c000dba:	601a      	str	r2, [r3, #0]
    p2[3U] = g;
 c000dbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000dc0:	330c      	adds	r3, #12
 c000dc2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 c000dc6:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000dcc:	3301      	adds	r3, #1
 c000dce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c000dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000dd6:	2b3f      	cmp	r3, #63	; 0x3f
 c000dd8:	f67f af42 	bls.w	c000c60 <Hacl_Impl_SHA2_256_update+0x15c>
  }
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)8U; i = i + (uint32_t)1U)
 c000ddc:	2300      	movs	r3, #0
 c000dde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c000de2:	e022      	b.n	c000e2a <Hacl_Impl_SHA2_256_update+0x326>
  {
    uint32_t xi = hash_w[i];
 c000de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000de8:	009b      	lsls	r3, r3, #2
 c000dea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 c000dee:	4413      	add	r3, r2
 c000df0:	681b      	ldr	r3, [r3, #0]
 c000df2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32_t yi = hash_0[i];
 c000df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000dfa:	009b      	lsls	r3, r3, #2
 c000dfc:	33f0      	adds	r3, #240	; 0xf0
 c000dfe:	443b      	add	r3, r7
 c000e00:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 c000e04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    hash_w[i] = xi + yi;
 c000e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000e0c:	009b      	lsls	r3, r3, #2
 c000e0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 c000e12:	4413      	add	r3, r2
 c000e14:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 c000e18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 c000e1c:	440a      	add	r2, r1
 c000e1e:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)8U; i = i + (uint32_t)1U)
 c000e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000e24:	3301      	adds	r3, #1
 c000e26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c000e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000e2e:	2b07      	cmp	r3, #7
 c000e30:	d9d8      	bls.n	c000de4 <Hacl_Impl_SHA2_256_update+0x2e0>
  }
  uint32_t c0 = counter_w[0U];
 c000e32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c000e36:	681b      	ldr	r3, [r3, #0]
 c000e38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  uint32_t one1 = (uint32_t)1U;
 c000e3c:	2301      	movs	r3, #1
 c000e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  counter_w[0U] = c0 + one1;
 c000e42:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 c000e46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 c000e4a:	441a      	add	r2, r3
 c000e4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c000e50:	601a      	str	r2, [r3, #0]
}
 c000e52:	bf00      	nop
 c000e54:	37f0      	adds	r7, #240	; 0xf0
 c000e56:	46bd      	mov	sp, r7
 c000e58:	bd80      	pop	{r7, pc}

0c000e5a <Hacl_Impl_SHA2_256_update_multi>:

static void Hacl_Impl_SHA2_256_update_multi(uint32_t *state, uint8_t *data, uint32_t n1)
{
 c000e5a:	b580      	push	{r7, lr}
 c000e5c:	b086      	sub	sp, #24
 c000e5e:	af00      	add	r7, sp, #0
 c000e60:	60f8      	str	r0, [r7, #12]
 c000e62:	60b9      	str	r1, [r7, #8]
 c000e64:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < n1; i = i + (uint32_t)1U)
 c000e66:	2300      	movs	r3, #0
 c000e68:	617b      	str	r3, [r7, #20]
 c000e6a:	e00b      	b.n	c000e84 <Hacl_Impl_SHA2_256_update_multi+0x2a>
  {
    uint8_t *b = data + i * (uint32_t)64U;
 c000e6c:	697b      	ldr	r3, [r7, #20]
 c000e6e:	019b      	lsls	r3, r3, #6
 c000e70:	68ba      	ldr	r2, [r7, #8]
 c000e72:	4413      	add	r3, r2
 c000e74:	613b      	str	r3, [r7, #16]
    Hacl_Impl_SHA2_256_update(state, b);
 c000e76:	6939      	ldr	r1, [r7, #16]
 c000e78:	68f8      	ldr	r0, [r7, #12]
 c000e7a:	f7ff fe43 	bl	c000b04 <Hacl_Impl_SHA2_256_update>
  for (uint32_t i = (uint32_t)0U; i < n1; i = i + (uint32_t)1U)
 c000e7e:	697b      	ldr	r3, [r7, #20]
 c000e80:	3301      	adds	r3, #1
 c000e82:	617b      	str	r3, [r7, #20]
 c000e84:	697a      	ldr	r2, [r7, #20]
 c000e86:	687b      	ldr	r3, [r7, #4]
 c000e88:	429a      	cmp	r2, r3
 c000e8a:	d3ef      	bcc.n	c000e6c <Hacl_Impl_SHA2_256_update_multi+0x12>
  }
}
 c000e8c:	bf00      	nop
 c000e8e:	bf00      	nop
 c000e90:	3718      	adds	r7, #24
 c000e92:	46bd      	mov	sp, r7
 c000e94:	bd80      	pop	{r7, pc}

0c000e96 <Hacl_Impl_SHA2_256_update_last>:

static void Hacl_Impl_SHA2_256_update_last(uint32_t *state, uint8_t *data, uint32_t len)
{
 c000e96:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c000e9a:	b0ba      	sub	sp, #232	; 0xe8
 c000e9c:	af00      	add	r7, sp, #0
 c000e9e:	6278      	str	r0, [r7, #36]	; 0x24
 c000ea0:	6239      	str	r1, [r7, #32]
 c000ea2:	61fa      	str	r2, [r7, #28]
  uint8_t blocks[128U] = { 0U };
 c000ea4:	2300      	movs	r3, #0
 c000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 c000ea8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 c000eac:	237c      	movs	r3, #124	; 0x7c
 c000eae:	461a      	mov	r2, r3
 c000eb0:	2100      	movs	r1, #0
 c000eb2:	f008 fc7a 	bl	c0097aa <memset>
  uint32_t nb;
  if (len < (uint32_t)56U)
 c000eb6:	69fb      	ldr	r3, [r7, #28]
 c000eb8:	2b37      	cmp	r3, #55	; 0x37
 c000eba:	d803      	bhi.n	c000ec4 <Hacl_Impl_SHA2_256_update_last+0x2e>
    nb = (uint32_t)1U;
 c000ebc:	2301      	movs	r3, #1
 c000ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c000ec2:	e002      	b.n	c000eca <Hacl_Impl_SHA2_256_update_last+0x34>
  else
    nb = (uint32_t)2U;
 c000ec4:	2302      	movs	r3, #2
 c000ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint8_t *final_blocks;
  if (len < (uint32_t)56U)
 c000eca:	69fb      	ldr	r3, [r7, #28]
 c000ecc:	2b37      	cmp	r3, #55	; 0x37
 c000ece:	d805      	bhi.n	c000edc <Hacl_Impl_SHA2_256_update_last+0x46>
    final_blocks = blocks + (uint32_t)64U;
 c000ed0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 c000ed4:	3340      	adds	r3, #64	; 0x40
 c000ed6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c000eda:	e003      	b.n	c000ee4 <Hacl_Impl_SHA2_256_update_last+0x4e>
  else
    final_blocks = blocks;
 c000edc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 c000ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  memcpy(final_blocks, data, len * sizeof data[0U]);
 c000ee4:	69fa      	ldr	r2, [r7, #28]
 c000ee6:	6a39      	ldr	r1, [r7, #32]
 c000ee8:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 c000eec:	f008 fc50 	bl	c009790 <memcpy>
  uint32_t n1 = state[136U];
 c000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000ef2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 c000ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint8_t *padding = final_blocks + len;
 c000efa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 c000efe:	69fb      	ldr	r3, [r7, #28]
 c000f00:	4413      	add	r3, r2
 c000f02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t
  pad0len = ((uint32_t)64U - (len + (uint32_t)8U + (uint32_t)1U) % (uint32_t)64U) % (uint32_t)64U;
 c000f06:	69fa      	ldr	r2, [r7, #28]
 c000f08:	f06f 0308 	mvn.w	r3, #8
 c000f0c:	1a9b      	subs	r3, r3, r2
 c000f0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c000f12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint8_t *buf1 = padding;
 c000f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 c000f1a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  uint8_t *buf2 = padding + (uint32_t)1U + pad0len;
 c000f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 c000f22:	3301      	adds	r3, #1
 c000f24:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000f28:	4413      	add	r3, r2
 c000f2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  uint64_t
  encodedlen = ((uint64_t)n1 * (uint64_t)(uint32_t)64U + (uint64_t)len) * (uint64_t)(uint32_t)8U;
 c000f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 c000f32:	2200      	movs	r2, #0
 c000f34:	4698      	mov	r8, r3
 c000f36:	4691      	mov	r9, r2
 c000f38:	f04f 0200 	mov.w	r2, #0
 c000f3c:	f04f 0300 	mov.w	r3, #0
 c000f40:	ea4f 1389 	mov.w	r3, r9, lsl #6
 c000f44:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 c000f48:	ea4f 1288 	mov.w	r2, r8, lsl #6
 c000f4c:	69f9      	ldr	r1, [r7, #28]
 c000f4e:	2000      	movs	r0, #0
 c000f50:	6139      	str	r1, [r7, #16]
 c000f52:	6178      	str	r0, [r7, #20]
 c000f54:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 c000f58:	4641      	mov	r1, r8
 c000f5a:	1854      	adds	r4, r2, r1
 c000f5c:	4649      	mov	r1, r9
 c000f5e:	eb43 0101 	adc.w	r1, r3, r1
 c000f62:	460d      	mov	r5, r1
 c000f64:	f04f 0200 	mov.w	r2, #0
 c000f68:	f04f 0300 	mov.w	r3, #0
 c000f6c:	00eb      	lsls	r3, r5, #3
 c000f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 c000f72:	00e2      	lsls	r2, r4, #3
 c000f74:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  buf1[0U] = (uint8_t)0x80U;
 c000f78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c000f7c:	2280      	movs	r2, #128	; 0x80
 c000f7e:	701a      	strb	r2, [r3, #0]
  store64_be(buf2, encodedlen);
 c000f80:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 c000f84:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 c000f88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c000f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 c000f90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000f94:	0e1a      	lsrs	r2, r3, #24
 c000f96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000f9a:	0a1b      	lsrs	r3, r3, #8
 c000f9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c000fa0:	431a      	orrs	r2, r3
 c000fa2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000fa6:	021b      	lsls	r3, r3, #8
 c000fa8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c000fac:	431a      	orrs	r2, r3
 c000fae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000fb2:	061b      	lsls	r3, r3, #24
 c000fb4:	4313      	orrs	r3, r2
 c000fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 c000fba:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 c000fbe:	f04f 0200 	mov.w	r2, #0
 c000fc2:	f04f 0300 	mov.w	r3, #0
 c000fc6:	000a      	movs	r2, r1
 c000fc8:	2300      	movs	r3, #0
 c000fca:	4613      	mov	r3, r2
 c000fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c000fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000fd4:	0e1a      	lsrs	r2, r3, #24
 c000fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000fda:	0a1b      	lsrs	r3, r3, #8
 c000fdc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c000fe0:	431a      	orrs	r2, r3
 c000fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000fe6:	021b      	lsls	r3, r3, #8
 c000fe8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c000fec:	431a      	orrs	r2, r3
 c000fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000ff2:	061b      	lsls	r3, r3, #24
 c000ff4:	4313      	orrs	r3, r2
 c000ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 c000ffa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c000ffe:	2200      	movs	r2, #0
 c001000:	60bb      	str	r3, [r7, #8]
 c001002:	60fa      	str	r2, [r7, #12]
 c001004:	f04f 0200 	mov.w	r2, #0
 c001008:	f04f 0300 	mov.w	r3, #0
 c00100c:	68b9      	ldr	r1, [r7, #8]
 c00100e:	000b      	movs	r3, r1
 c001010:	2200      	movs	r2, #0
 c001012:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 c001016:	2000      	movs	r0, #0
 c001018:	468a      	mov	sl, r1
 c00101a:	4683      	mov	fp, r0
 c00101c:	ea42 010a 	orr.w	r1, r2, sl
 c001020:	6039      	str	r1, [r7, #0]
 c001022:	ea43 030b 	orr.w	r3, r3, fp
 c001026:	607b      	str	r3, [r7, #4]
 c001028:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00102c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 c001030:	f7ff faea 	bl	c000608 <store64>
  Hacl_Impl_SHA2_256_update_multi(state, final_blocks, nb);
 c001034:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 c001038:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 c00103c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 c00103e:	f7ff ff0c 	bl	c000e5a <Hacl_Impl_SHA2_256_update_multi>
}
 c001042:	bf00      	nop
 c001044:	37e8      	adds	r7, #232	; 0xe8
 c001046:	46bd      	mov	sp, r7
 c001048:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c00104c <Hacl_Impl_SHA2_256_finish>:

static void Hacl_Impl_SHA2_256_finish(uint32_t *state, uint8_t *hash1)
{
 c00104c:	b580      	push	{r7, lr}
 c00104e:	b084      	sub	sp, #16
 c001050:	af00      	add	r7, sp, #0
 c001052:	6078      	str	r0, [r7, #4]
 c001054:	6039      	str	r1, [r7, #0]
  uint32_t *hash_w = state + (uint32_t)128U;
 c001056:	687b      	ldr	r3, [r7, #4]
 c001058:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c00105c:	60fb      	str	r3, [r7, #12]
  Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes(hash1, hash_w, (uint32_t)8U);
 c00105e:	2208      	movs	r2, #8
 c001060:	68f9      	ldr	r1, [r7, #12]
 c001062:	6838      	ldr	r0, [r7, #0]
 c001064:	f7ff fb14 	bl	c000690 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes>
}
 c001068:	bf00      	nop
 c00106a:	3710      	adds	r7, #16
 c00106c:	46bd      	mov	sp, r7
 c00106e:	bd80      	pop	{r7, pc}

0c001070 <Hacl_Impl_SHA2_256_hash>:

static void Hacl_Impl_SHA2_256_hash(uint8_t *hash1, uint8_t *input, uint32_t len)
{
 c001070:	b580      	push	{r7, lr}
 c001072:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 c001076:	af00      	add	r7, sp, #0
 c001078:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c00107c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 c001080:	6018      	str	r0, [r3, #0]
 c001082:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001086:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 c00108a:	6019      	str	r1, [r3, #0]
 c00108c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001090:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c001094:	601a      	str	r2, [r3, #0]
  uint32_t state[137U] = { 0U };
 c001096:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c00109a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 c00109e:	4618      	mov	r0, r3
 c0010a0:	f44f 7309 	mov.w	r3, #548	; 0x224
 c0010a4:	461a      	mov	r2, r3
 c0010a6:	2100      	movs	r1, #0
 c0010a8:	f008 fb7f 	bl	c0097aa <memset>
  uint32_t n1 = len / (uint32_t)64U;
 c0010ac:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c0010b0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c0010b4:	681b      	ldr	r3, [r3, #0]
 c0010b6:	099b      	lsrs	r3, r3, #6
 c0010b8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  uint32_t r = len % (uint32_t)64U;
 c0010bc:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c0010c0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c0010c4:	681b      	ldr	r3, [r3, #0]
 c0010c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c0010ca:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  uint8_t *input_blocks = input;
 c0010ce:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c0010d2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 c0010d6:	681b      	ldr	r3, [r3, #0]
 c0010d8:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  uint8_t *input_last = input + n1 * (uint32_t)64U;
 c0010dc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 c0010e0:	019b      	lsls	r3, r3, #6
 c0010e2:	f507 7212 	add.w	r2, r7, #584	; 0x248
 c0010e6:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 c0010ea:	6812      	ldr	r2, [r2, #0]
 c0010ec:	4413      	add	r3, r2
 c0010ee:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
  Hacl_Impl_SHA2_256_init(state);
 c0010f2:	f107 0314 	add.w	r3, r7, #20
 c0010f6:	4618      	mov	r0, r3
 c0010f8:	f7ff fb00 	bl	c0006fc <Hacl_Impl_SHA2_256_init>
  Hacl_Impl_SHA2_256_update_multi(state, input_blocks, n1);
 c0010fc:	f107 0314 	add.w	r3, r7, #20
 c001100:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 c001104:	f8d7 123c 	ldr.w	r1, [r7, #572]	; 0x23c
 c001108:	4618      	mov	r0, r3
 c00110a:	f7ff fea6 	bl	c000e5a <Hacl_Impl_SHA2_256_update_multi>
  Hacl_Impl_SHA2_256_update_last(state, input_last, r);
 c00110e:	f107 0314 	add.w	r3, r7, #20
 c001112:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 c001116:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 c00111a:	4618      	mov	r0, r3
 c00111c:	f7ff febb 	bl	c000e96 <Hacl_Impl_SHA2_256_update_last>
  Hacl_Impl_SHA2_256_finish(state, hash1);
 c001120:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001124:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 c001128:	f107 0214 	add.w	r2, r7, #20
 c00112c:	6819      	ldr	r1, [r3, #0]
 c00112e:	4610      	mov	r0, r2
 c001130:	f7ff ff8c 	bl	c00104c <Hacl_Impl_SHA2_256_finish>
}
 c001134:	bf00      	nop
 c001136:	f507 7712 	add.w	r7, r7, #584	; 0x248
 c00113a:	46bd      	mov	sp, r7
 c00113c:	bd80      	pop	{r7, pc}

0c00113e <Hacl_SHA2_256_hash>:
{
  Hacl_Impl_SHA2_256_finish(state, hash1);
}

void Hacl_SHA2_256_hash(uint8_t *hash1, uint8_t *input, uint32_t len)
{
 c00113e:	b580      	push	{r7, lr}
 c001140:	b084      	sub	sp, #16
 c001142:	af00      	add	r7, sp, #0
 c001144:	60f8      	str	r0, [r7, #12]
 c001146:	60b9      	str	r1, [r7, #8]
 c001148:	607a      	str	r2, [r7, #4]
  Hacl_Impl_SHA2_256_hash(hash1, input, len);
 c00114a:	687a      	ldr	r2, [r7, #4]
 c00114c:	68b9      	ldr	r1, [r7, #8]
 c00114e:	68f8      	ldr	r0, [r7, #12]
 c001150:	f7ff ff8e 	bl	c001070 <Hacl_Impl_SHA2_256_hash>
}
 c001154:	bf00      	nop
 c001156:	3710      	adds	r7, #16
 c001158:	46bd      	mov	sp, r7
 c00115a:	bd80      	pop	{r7, pc}

0c00115c <ti_syncDebbugTimer>:
#include "main.h"

extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;

void ti_syncDebbugTimer(){
 c00115c:	b580      	push	{r7, lr}
 c00115e:	af00      	add	r7, sp, #0
	HAL_DBGMCU_EnableDBGStandbyMode();
 c001160:	f004 f96e 	bl	c005440 <HAL_DBGMCU_EnableDBGStandbyMode>
	HAL_DBGMCU_EnableDBGStopMode();
 c001164:	f004 f95c 	bl	c005420 <HAL_DBGMCU_EnableDBGStopMode>
	htim3.Instance->CNT = 0;
 c001168:	4b0a      	ldr	r3, [pc, #40]	; (c001194 <ti_syncDebbugTimer+0x38>)
 c00116a:	681b      	ldr	r3, [r3, #0]
 c00116c:	2200      	movs	r2, #0
 c00116e:	625a      	str	r2, [r3, #36]	; 0x24
	htim4.Instance->CNT = 0;
 c001170:	4b09      	ldr	r3, [pc, #36]	; (c001198 <ti_syncDebbugTimer+0x3c>)
 c001172:	681b      	ldr	r3, [r3, #0]
 c001174:	2200      	movs	r2, #0
 c001176:	625a      	str	r2, [r3, #36]	; 0x24
	DBGMCU->APB1FZR1 |= DBGMCU_APB1FZR1_DBG_TIM3_STOP;
 c001178:	4b08      	ldr	r3, [pc, #32]	; (c00119c <ti_syncDebbugTimer+0x40>)
 c00117a:	689b      	ldr	r3, [r3, #8]
 c00117c:	4a07      	ldr	r2, [pc, #28]	; (c00119c <ti_syncDebbugTimer+0x40>)
 c00117e:	f043 0302 	orr.w	r3, r3, #2
 c001182:	6093      	str	r3, [r2, #8]
	DBGMCU->APB1FZR1 |= DBGMCU_APB1FZR1_DBG_TIM4_STOP;
 c001184:	4b05      	ldr	r3, [pc, #20]	; (c00119c <ti_syncDebbugTimer+0x40>)
 c001186:	689b      	ldr	r3, [r3, #8]
 c001188:	4a04      	ldr	r2, [pc, #16]	; (c00119c <ti_syncDebbugTimer+0x40>)
 c00118a:	f043 0304 	orr.w	r3, r3, #4
 c00118e:	6093      	str	r3, [r2, #8]
	return;
 c001190:	bf00      	nop
}
 c001192:	bd80      	pop	{r7, pc}
 c001194:	30002340 	.word	0x30002340
 c001198:	3000238c 	.word	0x3000238c
 c00119c:	e0044000 	.word	0xe0044000

0c0011a0 <_setup_data>:
	----------------------------- SUPERVISOR  --------------------------------------------
	---------------------------------------------------------------------------------
*/

//-------------------------- UTILS -------//
void _setup_data(){
 c0011a0:	b480      	push	{r7}
 c0011a2:	b083      	sub	sp, #12
 c0011a4:	af00      	add	r7, sp, #0
	for(unsigned int i = 0; i < CHAL_SIZE; ++i ){
 c0011a6:	2300      	movs	r3, #0
 c0011a8:	607b      	str	r3, [r7, #4]
 c0011aa:	e014      	b.n	c0011d6 <_setup_data+0x36>
		cfa_engine_conf.hash_key[i] = i;
 c0011ac:	687b      	ldr	r3, [r7, #4]
 c0011ae:	b2d9      	uxtb	r1, r3
 c0011b0:	4a0e      	ldr	r2, [pc, #56]	; (c0011ec <_setup_data+0x4c>)
 c0011b2:	687b      	ldr	r3, [r7, #4]
 c0011b4:	4413      	add	r3, r2
 c0011b6:	334a      	adds	r3, #74	; 0x4a
 c0011b8:	460a      	mov	r2, r1
 c0011ba:	701a      	strb	r2, [r3, #0]
		cfa_engine_conf.challenge[i] = 0x65+i;
 c0011bc:	687b      	ldr	r3, [r7, #4]
 c0011be:	b2db      	uxtb	r3, r3
 c0011c0:	3365      	adds	r3, #101	; 0x65
 c0011c2:	b2d9      	uxtb	r1, r3
 c0011c4:	4a09      	ldr	r2, [pc, #36]	; (c0011ec <_setup_data+0x4c>)
 c0011c6:	687b      	ldr	r3, [r7, #4]
 c0011c8:	4413      	add	r3, r2
 c0011ca:	3308      	adds	r3, #8
 c0011cc:	460a      	mov	r2, r1
 c0011ce:	701a      	strb	r2, [r3, #0]
	for(unsigned int i = 0; i < CHAL_SIZE; ++i ){
 c0011d0:	687b      	ldr	r3, [r7, #4]
 c0011d2:	3301      	adds	r3, #1
 c0011d4:	607b      	str	r3, [r7, #4]
 c0011d6:	687b      	ldr	r3, [r7, #4]
 c0011d8:	2b3f      	cmp	r3, #63	; 0x3f
 c0011da:	d9e7      	bls.n	c0011ac <_setup_data+0xc>
	}
}
 c0011dc:	bf00      	nop
 c0011de:	bf00      	nop
 c0011e0:	370c      	adds	r7, #12
 c0011e2:	46bd      	mov	sp, r7
 c0011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0011e8:	4770      	bx	lr
 c0011ea:	bf00      	nop
 c0011ec:	30000110 	.word	0x30000110

0c0011f0 <_update_challenge>:

void _update_challenge(uint8_t* chl){
 c0011f0:	b4f0      	push	{r4, r5, r6, r7}
 c0011f2:	b082      	sub	sp, #8
 c0011f4:	af00      	add	r7, sp, #0
 c0011f6:	6078      	str	r0, [r7, #4]
	memcpy(cfa_engine_conf.challenge,chl, CHAL_SIZE);
 c0011f8:	4b15      	ldr	r3, [pc, #84]	; (c001250 <_update_challenge+0x60>)
 c0011fa:	687a      	ldr	r2, [r7, #4]
 c0011fc:	4614      	mov	r4, r2
 c0011fe:	f103 0608 	add.w	r6, r3, #8
 c001202:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 c001206:	4635      	mov	r5, r6
 c001208:	4623      	mov	r3, r4
 c00120a:	6818      	ldr	r0, [r3, #0]
 c00120c:	6859      	ldr	r1, [r3, #4]
 c00120e:	689a      	ldr	r2, [r3, #8]
 c001210:	68db      	ldr	r3, [r3, #12]
 c001212:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 c001214:	3410      	adds	r4, #16
 c001216:	3610      	adds	r6, #16
 c001218:	4564      	cmp	r4, ip
 c00121a:	d1f4      	bne.n	c001206 <_update_challenge+0x16>
	memcpy(vrf_resp.new_challenge,chl, CHAL_SIZE);
 c00121c:	4a0d      	ldr	r2, [pc, #52]	; (c001254 <_update_challenge+0x64>)
 c00121e:	687b      	ldr	r3, [r7, #4]
 c001220:	461c      	mov	r4, r3
 c001222:	4616      	mov	r6, r2
 c001224:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 c001228:	4635      	mov	r5, r6
 c00122a:	4623      	mov	r3, r4
 c00122c:	6818      	ldr	r0, [r3, #0]
 c00122e:	6859      	ldr	r1, [r3, #4]
 c001230:	689a      	ldr	r2, [r3, #8]
 c001232:	68db      	ldr	r3, [r3, #12]
 c001234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 c001236:	3410      	adds	r4, #16
 c001238:	3610      	adds	r6, #16
 c00123a:	4564      	cmp	r4, ip
 c00123c:	d1f4      	bne.n	c001228 <_update_challenge+0x38>
	cfa_engine_conf.challenge_renewed = TRUE;
 c00123e:	4b04      	ldr	r3, [pc, #16]	; (c001250 <_update_challenge+0x60>)
 c001240:	2201      	movs	r2, #1
 c001242:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 c001246:	bf00      	nop
 c001248:	3708      	adds	r7, #8
 c00124a:	46bd      	mov	sp, r7
 c00124c:	bcf0      	pop	{r4, r5, r6, r7}
 c00124e:	4770      	bx	lr
 c001250:	30000110 	.word	0x30000110
 c001254:	30002204 	.word	0x30002204

0c001258 <_clean>:

void _clean(){
 c001258:	b480      	push	{r7}
 c00125a:	af00      	add	r7, sp, #0
	cfa_engine_conf.log_counter = 0;
 c00125c:	4b10      	ldr	r3, [pc, #64]	; (c0012a0 <_clean+0x48>)
 c00125e:	2200      	movs	r2, #0
 c001260:	80da      	strh	r2, [r3, #6]
	report_secure.number_of_logs_sent = 0;
 c001262:	4b10      	ldr	r3, [pc, #64]	; (c0012a4 <_clean+0x4c>)
 c001264:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 c001268:	2200      	movs	r2, #0
 c00126a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	cfa_engine_conf.initialized = INITIALIZED;
 c00126e:	4b0c      	ldr	r3, [pc, #48]	; (c0012a0 <_clean+0x48>)
 c001270:	22ee      	movs	r2, #238	; 0xee
 c001272:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	cfa_engine_conf.attestation_status = INACTIVE;
 c001276:	4b0a      	ldr	r3, [pc, #40]	; (c0012a0 <_clean+0x48>)
 c001278:	2200      	movs	r2, #0
 c00127a:	711a      	strb	r2, [r3, #4]
	report_secure.num_CF_Log_size = 0;
 c00127c:	4b09      	ldr	r3, [pc, #36]	; (c0012a4 <_clean+0x4c>)
 c00127e:	2200      	movs	r2, #0
 c001280:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	cfa_engine_conf.challenge_renewed = FALSE;
 c001284:	4b06      	ldr	r3, [pc, #24]	; (c0012a0 <_clean+0x48>)
 c001286:	2200      	movs	r2, #0
 c001288:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	report_secure.isFinal = FALSE;
 c00128c:	4b05      	ldr	r3, [pc, #20]	; (c0012a4 <_clean+0x4c>)
 c00128e:	2200      	movs	r2, #0
 c001290:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	#if CFLOG_TYPE == CFLOG_RAM
	for(int i=0; i<MAX_CF_LOG_SIZE; i++) report_secure.CFLog[i] = 0;
	#endif
}
 c001294:	bf00      	nop
 c001296:	46bd      	mov	sp, r7
 c001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00129c:	4770      	bx	lr
 c00129e:	bf00      	nop
 c0012a0:	30000110 	.word	0x30000110
 c0012a4:	3000019c 	.word	0x3000019c

0c0012a8 <_clean_partial>:

void _clean_partial(){
 c0012a8:	b480      	push	{r7}
 c0012aa:	af00      	add	r7, sp, #0
	report_secure.num_CF_Log_size = 0;
 c0012ac:	4b04      	ldr	r3, [pc, #16]	; (c0012c0 <_clean_partial+0x18>)
 c0012ae:	2200      	movs	r2, #0
 c0012b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
}
 c0012b4:	bf00      	nop
 c0012b6:	46bd      	mov	sp, r7
 c0012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0012bc:	4770      	bx	lr
 c0012be:	bf00      	nop
 c0012c0:	3000019c 	.word	0x3000019c

0c0012c4 <_run_application>:

void _run_application(){
 c0012c4:	b598      	push	{r3, r4, r7, lr}
 c0012c6:	af00      	add	r7, sp, #0
	//start app
	if (cfa_engine_conf.iac.app_start_address != NULL){
 c0012c8:	4b18      	ldr	r3, [pc, #96]	; (c00132c <_run_application+0x68>)
 c0012ca:	681b      	ldr	r3, [r3, #0]
 c0012cc:	2b00      	cmp	r3, #0
 c0012ce:	d02b      	beq.n	c001328 <_run_application+0x64>
		cfa_engine_conf.iac.app_start_address();
 c0012d0:	4b16      	ldr	r3, [pc, #88]	; (c00132c <_run_application+0x68>)
 c0012d2:	681b      	ldr	r3, [r3, #0]
 c0012d4:	461c      	mov	r4, r3
 c0012d6:	0864      	lsrs	r4, r4, #1
 c0012d8:	0064      	lsls	r4, r4, #1
 c0012da:	4620      	mov	r0, r4
 c0012dc:	4621      	mov	r1, r4
 c0012de:	4622      	mov	r2, r4
 c0012e0:	4623      	mov	r3, r4
 c0012e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0012e6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0012ea:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0012ee:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0012f2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0012f6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0012fa:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0012fe:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001302:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001306:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00130a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00130e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001312:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00131a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00131e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001322:	f7fe ff97 	bl	c000254 <__gnu_cmse_nonsecure_call>
	}
	return;
 c001326:	bf00      	nop
 c001328:	bf00      	nop
}
 c00132a:	bd98      	pop	{r3, r4, r7, pc}
 c00132c:	30000110 	.word	0x30000110

0c001330 <record_output_data>:

uint32_t output_data = 0;
void record_output_data(uint32_t value){
 c001330:	b480      	push	{r7}
 c001332:	b083      	sub	sp, #12
 c001334:	af00      	add	r7, sp, #0
 c001336:	6078      	str	r0, [r7, #4]
	output_data = value;
 c001338:	4a04      	ldr	r2, [pc, #16]	; (c00134c <record_output_data+0x1c>)
 c00133a:	687b      	ldr	r3, [r7, #4]
 c00133c:	6013      	str	r3, [r2, #0]
}
 c00133e:	bf00      	nop
 c001340:	370c      	adds	r7, #12
 c001342:	46bd      	mov	sp, r7
 c001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001348:	4770      	bx	lr
 c00134a:	bf00      	nop
 c00134c:	300022e4 	.word	0x300022e4

0c001350 <update_flash>:

#if CFLOG_TYPE == CFLOG_FLASH
void update_flash(uint32_t addr, uint64_t data){
 c001350:	b580      	push	{r7, lr}
 c001352:	b086      	sub	sp, #24
 c001354:	af00      	add	r7, sp, #0
 c001356:	60f8      	str	r0, [r7, #12]
 c001358:	e9c7 2300 	strd	r2, r3, [r7]
	uint32_t page_err;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 c00135c:	4b0c      	ldr	r3, [pc, #48]	; (c001390 <update_flash+0x40>)
 c00135e:	2202      	movs	r2, #2
 c001360:	601a      	str	r2, [r3, #0]
	EraseInitStruct.NbPages = 1;
 c001362:	4b0b      	ldr	r3, [pc, #44]	; (c001390 <update_flash+0x40>)
 c001364:	2201      	movs	r2, #1
 c001366:	60da      	str	r2, [r3, #12]
	HAL_FLASH_Unlock();
 c001368:	f004 f9d4 	bl	c005714 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &page_err);
 c00136c:	f107 0314 	add.w	r3, r7, #20
 c001370:	4619      	mov	r1, r3
 c001372:	4807      	ldr	r0, [pc, #28]	; (c001390 <update_flash+0x40>)
 c001374:	f004 face 	bl	c005914 <HAL_FLASHEx_Erase>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr, data);
 c001378:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00137c:	68f9      	ldr	r1, [r7, #12]
 c00137e:	2001      	movs	r0, #1
 c001380:	f004 f97e 	bl	c005680 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 c001384:	f004 f9fc 	bl	c005780 <HAL_FLASH_Lock>
}
 c001388:	bf00      	nop
 c00138a:	3718      	adds	r7, #24
 c00138c:	46bd      	mov	sp, r7
 c00138e:	bd80      	pop	{r7, pc}
 c001390:	30002288 	.word	0x30002288

0c001394 <CFA_ENGINE_start>:
#endif

/* -------------  NON SECURE CALLABLES */

void CFA_ENGINE_start(){
 c001394:	b580      	push	{r7, lr}
 c001396:	af00      	add	r7, sp, #0
	while(1){
		_attest_memory();
 c001398:	f000 fabe 	bl	c001918 <_attest_memory>
		_setup_data();
 c00139c:	f7ff ff00 	bl	c0011a0 <_setup_data>
		_clean();
 c0013a0:	f7ff ff5a 	bl	c001258 <_clean>
		_read_serial_loop();
 c0013a4:	f000 f8da 	bl	c00155c <_read_serial_loop>
		_attest_memory();
 c0013a8:	e7f6      	b.n	c001398 <CFA_ENGINE_start+0x4>
	...

0c0013ac <CFA_ENGINE_register_callback>:
	}
}

void CFA_ENGINE_register_callback(){
 c0013ac:	b480      	push	{r7}
 c0013ae:	af00      	add	r7, sp, #0
	cfa_engine_conf.iac.app_start_address = (funcptr_NS)  pAttestationFunctionCallback;
 c0013b0:	4b04      	ldr	r3, [pc, #16]	; (c0013c4 <CFA_ENGINE_register_callback+0x18>)
 c0013b2:	681b      	ldr	r3, [r3, #0]
 c0013b4:	461a      	mov	r2, r3
 c0013b6:	4b04      	ldr	r3, [pc, #16]	; (c0013c8 <CFA_ENGINE_register_callback+0x1c>)
 c0013b8:	601a      	str	r2, [r3, #0]
	return;
 c0013ba:	bf00      	nop
}
 c0013bc:	46bd      	mov	sp, r7
 c0013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0013c2:	4770      	bx	lr
 c0013c4:	30002338 	.word	0x30002338
 c0013c8:	30000110 	.word	0x30000110

0c0013cc <STATE_initialize_attestation>:

/* --------------- - STATE HANDLING --------------------- */



int STATE_initialize_attestation(){
 c0013cc:	b580      	push	{r7, lr}
 c0013ce:	b082      	sub	sp, #8
 c0013d0:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.attestation_status == INACTIVE){
 c0013d2:	4b13      	ldr	r3, [pc, #76]	; (c001420 <STATE_initialize_attestation+0x54>)
 c0013d4:	791b      	ldrb	r3, [r3, #4]
 c0013d6:	2b00      	cmp	r3, #0
 c0013d8:	d11c      	bne.n	c001414 <STATE_initialize_attestation+0x48>

		// send response to vrf
		uint8_t ready_char[COMMAND_SIZE+1] = INIT_ATTESTATION;
 c0013da:	4a12      	ldr	r2, [pc, #72]	; (c001424 <STATE_initialize_attestation+0x58>)
 c0013dc:	463b      	mov	r3, r7
 c0013de:	e892 0003 	ldmia.w	r2, {r0, r1}
 c0013e2:	6018      	str	r0, [r3, #0]
 c0013e4:	3304      	adds	r3, #4
 c0013e6:	7019      	strb	r1, [r3, #0]
		SecureUartTx(ready_char, COMMAND_SIZE);
 c0013e8:	463b      	mov	r3, r7
 c0013ea:	2104      	movs	r1, #4
 c0013ec:	4618      	mov	r0, r3
 c0013ee:	f003 ff4f 	bl	c005290 <SecureUartTx>

		// receive challange
		if(_receive_challenge()) return 1;
 c0013f2:	f000 f991 	bl	c001718 <_receive_challenge>
 c0013f6:	4603      	mov	r3, r0
 c0013f8:	2b00      	cmp	r3, #0
 c0013fa:	d001      	beq.n	c001400 <STATE_initialize_attestation+0x34>
 c0013fc:	2301      	movs	r3, #1
 c0013fe:	e00a      	b.n	c001416 <STATE_initialize_attestation+0x4a>

		// start application
		cfa_engine_conf.attestation_status = ACTIVE;
 c001400:	4b07      	ldr	r3, [pc, #28]	; (c001420 <STATE_initialize_attestation+0x54>)
 c001402:	2201      	movs	r2, #1
 c001404:	711a      	strb	r2, [r3, #4]
		CFA_ENGINE_run_attestation();
 c001406:	f000 fbeb 	bl	c001be0 <CFA_ENGINE_run_attestation>
		cfa_engine_conf.attestation_status = COMPLETE;
 c00140a:	4b05      	ldr	r3, [pc, #20]	; (c001420 <STATE_initialize_attestation+0x54>)
 c00140c:	2202      	movs	r2, #2
 c00140e:	711a      	strb	r2, [r3, #4]

		// Send final report
		_send_report();
 c001410:	f000 fa30 	bl	c001874 <_send_report>
	}
	return CONTINUE_LOOP;
 c001414:	2301      	movs	r3, #1
}
 c001416:	4618      	mov	r0, r3
 c001418:	3708      	adds	r7, #8
 c00141a:	46bd      	mov	sp, r7
 c00141c:	bd80      	pop	{r7, pc}
 c00141e:	bf00      	nop
 c001420:	30000110 	.word	0x30000110
 c001424:	0c00a860 	.word	0x0c00a860

0c001428 <STATE_accept_report>:

int STATE_accept_report(){
 c001428:	b580      	push	{r7, lr}
 c00142a:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.attestation_status == COMPLETE){
 c00142c:	4b06      	ldr	r3, [pc, #24]	; (c001448 <STATE_accept_report+0x20>)
 c00142e:	791b      	ldrb	r3, [r3, #4]
 c001430:	2b02      	cmp	r3, #2
 c001432:	d106      	bne.n	c001442 <STATE_accept_report+0x1a>
		cfa_engine_conf.attestation_status = INACTIVE; //temp
 c001434:	4b04      	ldr	r3, [pc, #16]	; (c001448 <STATE_accept_report+0x20>)
 c001436:	2200      	movs	r2, #0
 c001438:	711a      	strb	r2, [r3, #4]
		_clean();
 c00143a:	f7ff ff0d 	bl	c001258 <_clean>
		return EXIT_LOOP;
 c00143e:	2300      	movs	r3, #0
 c001440:	e000      	b.n	c001444 <STATE_accept_report+0x1c>
	}
	return CONTINUE_LOOP;
 c001442:	2301      	movs	r3, #1
}
 c001444:	4618      	mov	r0, r3
 c001446:	bd80      	pop	{r7, pc}
 c001448:	30000110 	.word	0x30000110

0c00144c <STATE_heal>:

int STATE_heal(){
 c00144c:	b580      	push	{r7, lr}
 c00144e:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.attestation_status == COMPLETE || cfa_engine_conf.attestation_status == WAITING_PARTIAL){
 c001450:	4b07      	ldr	r3, [pc, #28]	; (c001470 <STATE_heal+0x24>)
 c001452:	791b      	ldrb	r3, [r3, #4]
 c001454:	2b02      	cmp	r3, #2
 c001456:	d003      	beq.n	c001460 <STATE_heal+0x14>
 c001458:	4b05      	ldr	r3, [pc, #20]	; (c001470 <STATE_heal+0x24>)
 c00145a:	791b      	ldrb	r3, [r3, #4]
 c00145c:	2b04      	cmp	r3, #4
 c00145e:	d103      	bne.n	c001468 <STATE_heal+0x1c>
		_heal_function();
 c001460:	f000 fc10 	bl	c001c84 <_heal_function>
		return EXIT_LOOP;
 c001464:	2300      	movs	r3, #0
 c001466:	e000      	b.n	c00146a <STATE_heal+0x1e>
	}
	return CONTINUE_LOOP;
 c001468:	2301      	movs	r3, #1
}
 c00146a:	4618      	mov	r0, r3
 c00146c:	bd80      	pop	{r7, pc}
 c00146e:	bf00      	nop
 c001470:	30000110 	.word	0x30000110

0c001474 <STATE_continue>:

int STATE_continue(){
 c001474:	b580      	push	{r7, lr}
 c001476:	af00      	add	r7, sp, #0

	_receive_challenge();
 c001478:	f000 f94e 	bl	c001718 <_receive_challenge>

	cfa_engine_conf.attestation_status = ACTIVE;
 c00147c:	4b03      	ldr	r3, [pc, #12]	; (c00148c <STATE_continue+0x18>)
 c00147e:	2201      	movs	r2, #1
 c001480:	711a      	strb	r2, [r3, #4]

	_initialize_timer_interrupt();
 c001482:	f000 f8d1 	bl	c001628 <_initialize_timer_interrupt>

	return EXIT_LOOP;
 c001486:	2300      	movs	r3, #0
}
 c001488:	4618      	mov	r0, r3
 c00148a:	bd80      	pop	{r7, pc}
 c00148c:	30000110 	.word	0x30000110

0c001490 <translate_command>:

/* ---------------------------  PROTOCOL  ----------------------------------------- */


char translate_command(int8_t command_received[]){
 c001490:	b580      	push	{r7, lr}
 c001492:	b082      	sub	sp, #8
 c001494:	af00      	add	r7, sp, #0
 c001496:	6078      	str	r0, [r7, #4]
	command_received[COMMAND_SIZE] = '\0';
 c001498:	687b      	ldr	r3, [r7, #4]
 c00149a:	3304      	adds	r3, #4
 c00149c:	2200      	movs	r2, #0
 c00149e:	701a      	strb	r2, [r3, #0]
	if (!strcmp(command_received,INIT_ATTESTATION))
 c0014a0:	4914      	ldr	r1, [pc, #80]	; (c0014f4 <translate_command+0x64>)
 c0014a2:	6878      	ldr	r0, [r7, #4]
 c0014a4:	f7fe fecc 	bl	c000240 <strcmp>
 c0014a8:	4603      	mov	r3, r0
 c0014aa:	2b00      	cmp	r3, #0
 c0014ac:	d101      	bne.n	c0014b2 <translate_command+0x22>
		return INIT_ATTESTATION_CHAR;
 c0014ae:	2369      	movs	r3, #105	; 0x69
 c0014b0:	e01b      	b.n	c0014ea <translate_command+0x5a>
	else if (!strcmp(command_received,ACCEPTED_REPORT))
 c0014b2:	4911      	ldr	r1, [pc, #68]	; (c0014f8 <translate_command+0x68>)
 c0014b4:	6878      	ldr	r0, [r7, #4]
 c0014b6:	f7fe fec3 	bl	c000240 <strcmp>
 c0014ba:	4603      	mov	r3, r0
 c0014bc:	2b00      	cmp	r3, #0
 c0014be:	d101      	bne.n	c0014c4 <translate_command+0x34>
		return ACCEPT_REPORT_CHAR;
 c0014c0:	2376      	movs	r3, #118	; 0x76
 c0014c2:	e012      	b.n	c0014ea <translate_command+0x5a>
	else if (!strcmp(command_received,CONTINUE_REQUEST))
 c0014c4:	490d      	ldr	r1, [pc, #52]	; (c0014fc <translate_command+0x6c>)
 c0014c6:	6878      	ldr	r0, [r7, #4]
 c0014c8:	f7fe feba 	bl	c000240 <strcmp>
 c0014cc:	4603      	mov	r3, r0
 c0014ce:	2b00      	cmp	r3, #0
 c0014d0:	d101      	bne.n	c0014d6 <translate_command+0x46>
		return CONTINUE_CHAR;
 c0014d2:	2363      	movs	r3, #99	; 0x63
 c0014d4:	e009      	b.n	c0014ea <translate_command+0x5a>
	else if (!strcmp(command_received,HEAL_REQUEST))
 c0014d6:	490a      	ldr	r1, [pc, #40]	; (c001500 <translate_command+0x70>)
 c0014d8:	6878      	ldr	r0, [r7, #4]
 c0014da:	f7fe feb1 	bl	c000240 <strcmp>
 c0014de:	4603      	mov	r3, r0
 c0014e0:	2b00      	cmp	r3, #0
 c0014e2:	d101      	bne.n	c0014e8 <translate_command+0x58>
		return HEAL_CHAR;
 c0014e4:	2368      	movs	r3, #104	; 0x68
 c0014e6:	e000      	b.n	c0014ea <translate_command+0x5a>
	return 'X';
 c0014e8:	2358      	movs	r3, #88	; 0x58

}
 c0014ea:	4618      	mov	r0, r3
 c0014ec:	3708      	adds	r7, #8
 c0014ee:	46bd      	mov	sp, r7
 c0014f0:	bd80      	pop	{r7, pc}
 c0014f2:	bf00      	nop
 c0014f4:	0c00a860 	.word	0x0c00a860
 c0014f8:	0c00a868 	.word	0x0c00a868
 c0014fc:	0c00a870 	.word	0x0c00a870
 c001500:	0c00a878 	.word	0x0c00a878

0c001504 <wait_for_command>:

void wait_for_command(char pattern[],int size){
 c001504:	b580      	push	{r7, lr}
 c001506:	b086      	sub	sp, #24
 c001508:	af00      	add	r7, sp, #0
 c00150a:	6078      	str	r0, [r7, #4]
 c00150c:	6039      	str	r1, [r7, #0]
	int found_size = 0;
 c00150e:	2300      	movs	r3, #0
 c001510:	617b      	str	r3, [r7, #20]
	int i = 0;
 c001512:	2300      	movs	r3, #0
 c001514:	613b      	str	r3, [r7, #16]
	char read_char;
	while(found_size != size){
 c001516:	e017      	b.n	c001548 <wait_for_command+0x44>
		SecureUartRx((uint8_t*)&read_char, 1);
 c001518:	f107 030f 	add.w	r3, r7, #15
 c00151c:	2101      	movs	r1, #1
 c00151e:	4618      	mov	r0, r3
 c001520:	f003 feca 	bl	c0052b8 <SecureUartRx>
		if (read_char == pattern[i]){
 c001524:	693b      	ldr	r3, [r7, #16]
 c001526:	687a      	ldr	r2, [r7, #4]
 c001528:	4413      	add	r3, r2
 c00152a:	781a      	ldrb	r2, [r3, #0]
 c00152c:	7bfb      	ldrb	r3, [r7, #15]
 c00152e:	429a      	cmp	r2, r3
 c001530:	d106      	bne.n	c001540 <wait_for_command+0x3c>
			i++;
 c001532:	693b      	ldr	r3, [r7, #16]
 c001534:	3301      	adds	r3, #1
 c001536:	613b      	str	r3, [r7, #16]
			found_size++;
 c001538:	697b      	ldr	r3, [r7, #20]
 c00153a:	3301      	adds	r3, #1
 c00153c:	617b      	str	r3, [r7, #20]
 c00153e:	e003      	b.n	c001548 <wait_for_command+0x44>
		}
		else{
			i = 0;
 c001540:	2300      	movs	r3, #0
 c001542:	613b      	str	r3, [r7, #16]
			found_size = 0;
 c001544:	2300      	movs	r3, #0
 c001546:	617b      	str	r3, [r7, #20]
	while(found_size != size){
 c001548:	697a      	ldr	r2, [r7, #20]
 c00154a:	683b      	ldr	r3, [r7, #0]
 c00154c:	429a      	cmp	r2, r3
 c00154e:	d1e3      	bne.n	c001518 <wait_for_command+0x14>
		}
	}
}
 c001550:	bf00      	nop
 c001552:	bf00      	nop
 c001554:	3718      	adds	r7, #24
 c001556:	46bd      	mov	sp, r7
 c001558:	bd80      	pop	{r7, pc}
	...

0c00155c <_read_serial_loop>:

void _read_serial_loop(){
 c00155c:	b580      	push	{r7, lr}
 c00155e:	b082      	sub	sp, #8
 c001560:	af00      	add	r7, sp, #0
	uint8_t command_received[COMMAND_SIZE+1];
	uint8_t state = CONTINUE_LOOP;
 c001562:	2301      	movs	r3, #1
 c001564:	71fb      	strb	r3, [r7, #7]
	char aaa;
	while(state == CONTINUE_LOOP){
 c001566:	e054      	b.n	c001612 <_read_serial_loop+0xb6>
		wait_for_command(BEGGINING_OF_COMMAND,COMMAND_SIZE);
 c001568:	2104      	movs	r1, #4
 c00156a:	482e      	ldr	r0, [pc, #184]	; (c001624 <_read_serial_loop+0xc8>)
 c00156c:	f7ff ffca 	bl	c001504 <wait_for_command>
		_receive_request(COMMAND_SIZE, command_received);
 c001570:	463b      	mov	r3, r7
 c001572:	4619      	mov	r1, r3
 c001574:	2004      	movs	r0, #4
 c001576:	f000 f92b 	bl	c0017d0 <_receive_request>
		aaa = translate_command(command_received);
 c00157a:	463b      	mov	r3, r7
 c00157c:	4618      	mov	r0, r3
 c00157e:	f7ff ff87 	bl	c001490 <translate_command>
 c001582:	4603      	mov	r3, r0
 c001584:	71bb      	strb	r3, [r7, #6]
		switch(aaa){
 c001586:	79bb      	ldrb	r3, [r7, #6]
 c001588:	3b63      	subs	r3, #99	; 0x63
 c00158a:	2b13      	cmp	r3, #19
 c00158c:	d83e      	bhi.n	c00160c <_read_serial_loop+0xb0>
 c00158e:	a201      	add	r2, pc, #4	; (adr r2, c001594 <_read_serial_loop+0x38>)
 c001590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c001594:	0c001603 	.word	0x0c001603
 c001598:	0c00160d 	.word	0x0c00160d
 c00159c:	0c00160d 	.word	0x0c00160d
 c0015a0:	0c00160d 	.word	0x0c00160d
 c0015a4:	0c00160d 	.word	0x0c00160d
 c0015a8:	0c0015f9 	.word	0x0c0015f9
 c0015ac:	0c0015e5 	.word	0x0c0015e5
 c0015b0:	0c00160d 	.word	0x0c00160d
 c0015b4:	0c00160d 	.word	0x0c00160d
 c0015b8:	0c00160d 	.word	0x0c00160d
 c0015bc:	0c00160d 	.word	0x0c00160d
 c0015c0:	0c00160d 	.word	0x0c00160d
 c0015c4:	0c00160d 	.word	0x0c00160d
 c0015c8:	0c00160d 	.word	0x0c00160d
 c0015cc:	0c00160d 	.word	0x0c00160d
 c0015d0:	0c00160d 	.word	0x0c00160d
 c0015d4:	0c00160d 	.word	0x0c00160d
 c0015d8:	0c00160d 	.word	0x0c00160d
 c0015dc:	0c00160d 	.word	0x0c00160d
 c0015e0:	0c0015ef 	.word	0x0c0015ef

			case INIT_ATTESTATION_CHAR:
				state = STATE_initialize_attestation();
 c0015e4:	f7ff fef2 	bl	c0013cc <STATE_initialize_attestation>
 c0015e8:	4603      	mov	r3, r0
 c0015ea:	71fb      	strb	r3, [r7, #7]
				break;
 c0015ec:	e011      	b.n	c001612 <_read_serial_loop+0xb6>

			case ACCEPT_REPORT_CHAR:
				state = STATE_accept_report();
 c0015ee:	f7ff ff1b 	bl	c001428 <STATE_accept_report>
 c0015f2:	4603      	mov	r3, r0
 c0015f4:	71fb      	strb	r3, [r7, #7]
				break;
 c0015f6:	e00c      	b.n	c001612 <_read_serial_loop+0xb6>

			case HEAL_CHAR:
				state = STATE_heal();
 c0015f8:	f7ff ff28 	bl	c00144c <STATE_heal>
 c0015fc:	4603      	mov	r3, r0
 c0015fe:	71fb      	strb	r3, [r7, #7]
				break;
 c001600:	e007      	b.n	c001612 <_read_serial_loop+0xb6>

			case CONTINUE_CHAR:
				state = STATE_continue();
 c001602:	f7ff ff37 	bl	c001474 <STATE_continue>
 c001606:	4603      	mov	r3, r0
 c001608:	71fb      	strb	r3, [r7, #7]
				break;
 c00160a:	e002      	b.n	c001612 <_read_serial_loop+0xb6>

			default:
				state = CONTINUE_LOOP;
 c00160c:	2301      	movs	r3, #1
 c00160e:	71fb      	strb	r3, [r7, #7]
				break;
 c001610:	bf00      	nop
	while(state == CONTINUE_LOOP){
 c001612:	79fb      	ldrb	r3, [r7, #7]
 c001614:	2b01      	cmp	r3, #1
 c001616:	d0a7      	beq.n	c001568 <_read_serial_loop+0xc>
		}
	}
}
 c001618:	bf00      	nop
 c00161a:	bf00      	nop
 c00161c:	3708      	adds	r7, #8
 c00161e:	46bd      	mov	sp, r7
 c001620:	bd80      	pop	{r7, pc}
 c001622:	bf00      	nop
 c001624:	0c00a880 	.word	0x0c00a880

0c001628 <_initialize_timer_interrupt>:
/* ------------------------------ INTERRUPT OPERATIONS ----------------------------- */


#define TIMER_PERIOD 65535-1

void _initialize_timer_interrupt(){
 c001628:	b580      	push	{r7, lr}
 c00162a:	b082      	sub	sp, #8
 c00162c:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM3_CLK_DISABLE();
 c00162e:	4b14      	ldr	r3, [pc, #80]	; (c001680 <_initialize_timer_interrupt+0x58>)
 c001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001632:	4a13      	ldr	r2, [pc, #76]	; (c001680 <_initialize_timer_interrupt+0x58>)
 c001634:	f023 0302 	bic.w	r3, r3, #2
 c001638:	6593      	str	r3, [r2, #88]	; 0x58
	ti_syncDebbugTimer();
 c00163a:	f7ff fd8f 	bl	c00115c <ti_syncDebbugTimer>
//	ti_set_prescaler(TIMER_PERIOD,0);
	ti_set_period(TIMER_INTERRUPT,TIMER_PERIOD);
 c00163e:	4b11      	ldr	r3, [pc, #68]	; (c001684 <_initialize_timer_interrupt+0x5c>)
 c001640:	681b      	ldr	r3, [r3, #0]
 c001642:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 c001646:	62da      	str	r2, [r3, #44]	; 0x2c
	ti_start_timer_interrupt(TIMER_INTERRUPT);
 c001648:	480e      	ldr	r0, [pc, #56]	; (c001684 <_initialize_timer_interrupt+0x5c>)
 c00164a:	f006 fc5b 	bl	c007f04 <HAL_TIM_Base_Start>
 c00164e:	480d      	ldr	r0, [pc, #52]	; (c001684 <_initialize_timer_interrupt+0x5c>)
 c001650:	f006 fce8 	bl	c008024 <HAL_TIM_Base_Start_IT>
	_activate_timeout_interrupt();
 c001654:	f000 f818 	bl	c001688 <_activate_timeout_interrupt>
	ti_reset_timer_counter(TIMER_INTERRUPT);
 c001658:	4b0a      	ldr	r3, [pc, #40]	; (c001684 <_initialize_timer_interrupt+0x5c>)
 c00165a:	681b      	ldr	r3, [r3, #0]
 c00165c:	2200      	movs	r2, #0
 c00165e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RCC_TIM3_CLK_ENABLE();
 c001660:	4b07      	ldr	r3, [pc, #28]	; (c001680 <_initialize_timer_interrupt+0x58>)
 c001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001664:	4a06      	ldr	r2, [pc, #24]	; (c001680 <_initialize_timer_interrupt+0x58>)
 c001666:	f043 0302 	orr.w	r3, r3, #2
 c00166a:	6593      	str	r3, [r2, #88]	; 0x58
 c00166c:	4b04      	ldr	r3, [pc, #16]	; (c001680 <_initialize_timer_interrupt+0x58>)
 c00166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001670:	f003 0302 	and.w	r3, r3, #2
 c001674:	607b      	str	r3, [r7, #4]
 c001676:	687b      	ldr	r3, [r7, #4]

}
 c001678:	bf00      	nop
 c00167a:	3708      	adds	r7, #8
 c00167c:	46bd      	mov	sp, r7
 c00167e:	bd80      	pop	{r7, pc}
 c001680:	50021000 	.word	0x50021000
 c001684:	30002340 	.word	0x30002340

0c001688 <_activate_timeout_interrupt>:

void _activate_timeout_interrupt(){
 c001688:	b580      	push	{r7, lr}
 c00168a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim3);
 c00168c:	4802      	ldr	r0, [pc, #8]	; (c001698 <_activate_timeout_interrupt+0x10>)
 c00168e:	f006 fc39 	bl	c007f04 <HAL_TIM_Base_Start>
}
 c001692:	bf00      	nop
 c001694:	bd80      	pop	{r7, pc}
 c001696:	bf00      	nop
 c001698:	30002340 	.word	0x30002340

0c00169c <_deactivate_timer_interrupt>:


void _deactivate_timer_interrupt(){
 c00169c:	b580      	push	{r7, lr}
 c00169e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim3);
 c0016a0:	4804      	ldr	r0, [pc, #16]	; (c0016b4 <_deactivate_timer_interrupt+0x18>)
 c0016a2:	f006 fc97 	bl	c007fd4 <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim3, 0); // reset count
 c0016a6:	4b03      	ldr	r3, [pc, #12]	; (c0016b4 <_deactivate_timer_interrupt+0x18>)
 c0016a8:	681b      	ldr	r3, [r3, #0]
 c0016aa:	2200      	movs	r2, #0
 c0016ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 c0016ae:	bf00      	nop
 c0016b0:	bd80      	pop	{r7, pc}
 c0016b2:	bf00      	nop
 c0016b4:	30002340 	.word	0x30002340

0c0016b8 <CFA_time_interrupt_handler>:

void CFA_time_interrupt_handler(){
 c0016b8:	b580      	push	{r7, lr}
 c0016ba:	b082      	sub	sp, #8
 c0016bc:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM3_CLK_DISABLE();
 c0016be:	4b13      	ldr	r3, [pc, #76]	; (c00170c <CFA_time_interrupt_handler+0x54>)
 c0016c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0016c2:	4a12      	ldr	r2, [pc, #72]	; (c00170c <CFA_time_interrupt_handler+0x54>)
 c0016c4:	f023 0302 	bic.w	r3, r3, #2
 c0016c8:	6593      	str	r3, [r2, #88]	; 0x58
	report_secure.isFinal = PARTIAL_REPORT;
 c0016ca:	4b11      	ldr	r3, [pc, #68]	; (c001710 <CFA_time_interrupt_handler+0x58>)
 c0016cc:	2250      	movs	r2, #80	; 0x50
 c0016ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	_sign_report();
 c0016d2:	f000 f947 	bl	c001964 <_sign_report>
	_send_report_message();
 c0016d6:	f000 f88b 	bl	c0017f0 <_send_report_message>
	_clean_partial();
 c0016da:	f7ff fde5 	bl	c0012a8 <_clean_partial>
	_read_serial_loop();
 c0016de:	f7ff ff3d 	bl	c00155c <_read_serial_loop>
	ti_reset_timer_counter(TIMER_INTERRUPT);
 c0016e2:	4b0c      	ldr	r3, [pc, #48]	; (c001714 <CFA_time_interrupt_handler+0x5c>)
 c0016e4:	681b      	ldr	r3, [r3, #0]
 c0016e6:	2200      	movs	r2, #0
 c0016e8:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RCC_TIM3_CLK_ENABLE();
 c0016ea:	4b08      	ldr	r3, [pc, #32]	; (c00170c <CFA_time_interrupt_handler+0x54>)
 c0016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0016ee:	4a07      	ldr	r2, [pc, #28]	; (c00170c <CFA_time_interrupt_handler+0x54>)
 c0016f0:	f043 0302 	orr.w	r3, r3, #2
 c0016f4:	6593      	str	r3, [r2, #88]	; 0x58
 c0016f6:	4b05      	ldr	r3, [pc, #20]	; (c00170c <CFA_time_interrupt_handler+0x54>)
 c0016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0016fa:	f003 0302 	and.w	r3, r3, #2
 c0016fe:	607b      	str	r3, [r7, #4]
 c001700:	687b      	ldr	r3, [r7, #4]
}
 c001702:	bf00      	nop
 c001704:	3708      	adds	r7, #8
 c001706:	46bd      	mov	sp, r7
 c001708:	bd80      	pop	{r7, pc}
 c00170a:	bf00      	nop
 c00170c:	50021000 	.word	0x50021000
 c001710:	3000019c 	.word	0x3000019c
 c001714:	30002340 	.word	0x30002340

0c001718 <_receive_challenge>:

/* -----------------------------  SENDING REPORT ------------------------------------ */
uint32_t receive_resp_time;
uint32_t verify_resp_time;
uint8_t  _receive_challenge(){
 c001718:	b580      	push	{r7, lr}
 c00171a:	b096      	sub	sp, #88	; 0x58
 c00171c:	af02      	add	r7, sp, #8
	uint8_t chl[64];
//	uint8_t init_chal[] = BEGGINING_OF_CHALLANGE;

	uint32_t start = HAL_GetTick();
 c00171e:	f003 fe73 	bl	c005408 <HAL_GetTick>
 c001722:	64f8      	str	r0, [r7, #76]	; 0x4c
	SecureUartRx((uint8_t*)chl, 64);
 c001724:	463b      	mov	r3, r7
 c001726:	2140      	movs	r1, #64	; 0x40
 c001728:	4618      	mov	r0, r3
 c00172a:	f003 fdc5 	bl	c0052b8 <SecureUartRx>
//	SecureUartTx(init_chal, COMMAND_SIZE); // echo for debug
//	SecureUartTx((uint8_t*)chl, 64);
	_update_challenge(chl);
 c00172e:	463b      	mov	r3, r7
 c001730:	4618      	mov	r0, r3
 c001732:	f7ff fd5d 	bl	c0011f0 <_update_challenge>

	// read verifier signature
	SecureUartRx((uint8_t*)(&vrf_resp.signature), SIGNATURE_SIZE_BYTES);
 c001736:	2140      	movs	r1, #64	; 0x40
 c001738:	481d      	ldr	r0, [pc, #116]	; (c0017b0 <_receive_challenge+0x98>)
 c00173a:	f003 fdbd 	bl	c0052b8 <SecureUartRx>
//	SecureUartTx((uint8_t*)(&vrf_resp.signature), SIGNATURE_SIZE_BYTES);

	vrf_resp.verify_result = 1;
 c00173e:	4b1d      	ldr	r3, [pc, #116]	; (c0017b4 <_receive_challenge+0x9c>)
 c001740:	2201      	movs	r2, #1
 c001742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	uint32_t stop = HAL_GetTick();
 c001746:	f003 fe5f 	bl	c005408 <HAL_GetTick>
 c00174a:	64b8      	str	r0, [r7, #72]	; 0x48
	receive_resp_time = stop-start;
 c00174c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c00174e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c001750:	1ad3      	subs	r3, r2, r3
 c001752:	4a19      	ldr	r2, [pc, #100]	; (c0017b8 <_receive_challenge+0xa0>)
 c001754:	6013      	str	r3, [r2, #0]

	start = HAL_GetTick();
 c001756:	f003 fe57 	bl	c005408 <HAL_GetTick>
 c00175a:	64f8      	str	r0, [r7, #76]	; 0x4c
	// check verifier signature by sig = ECDSA(private_key, hash(report))
	// 1) get SHA256 hash over report (excluding buffer that holds signature)
	uint32_t response_size = CHAL_SIZE + 1 + HASH_SIZE_BYTES;
 c00175c:	2361      	movs	r3, #97	; 0x61
 c00175e:	647b      	str	r3, [r7, #68]	; 0x44
	Hacl_SHA2_256_hash(response_hash, (uint8_t*)(&vrf_resp), response_size);
 c001760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 c001762:	4914      	ldr	r1, [pc, #80]	; (c0017b4 <_receive_challenge+0x9c>)
 c001764:	4815      	ldr	r0, [pc, #84]	; (c0017bc <_receive_challenge+0xa4>)
 c001766:	f7ff fcea 	bl	c00113e <Hacl_SHA2_256_hash>
	// 2) verify signature of hash
    curve = uECC_secp256r1();
 c00176a:	f002 fa2d 	bl	c003bc8 <uECC_secp256r1>
 c00176e:	4603      	mov	r3, r0
 c001770:	4a13      	ldr	r2, [pc, #76]	; (c0017c0 <_receive_challenge+0xa8>)
 c001772:	6013      	str	r3, [r2, #0]
    int t =  uECC_verify(public_key, response_hash, HASH_SIZE_BYTES, vrf_resp.signature, curve);
 c001774:	4b12      	ldr	r3, [pc, #72]	; (c0017c0 <_receive_challenge+0xa8>)
 c001776:	681b      	ldr	r3, [r3, #0]
 c001778:	9300      	str	r3, [sp, #0]
 c00177a:	4b0d      	ldr	r3, [pc, #52]	; (c0017b0 <_receive_challenge+0x98>)
 c00177c:	2220      	movs	r2, #32
 c00177e:	490f      	ldr	r1, [pc, #60]	; (c0017bc <_receive_challenge+0xa4>)
 c001780:	4810      	ldr	r0, [pc, #64]	; (c0017c4 <_receive_challenge+0xac>)
 c001782:	f003 fa0d 	bl	c004ba0 <uECC_verify>
 c001786:	6438      	str	r0, [r7, #64]	; 0x40
    stop = HAL_GetTick();
 c001788:	f003 fe3e 	bl	c005408 <HAL_GetTick>
 c00178c:	64b8      	str	r0, [r7, #72]	; 0x48
    verify_resp_time = stop-start;
 c00178e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c001790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c001792:	1ad3      	subs	r3, r2, r3
 c001794:	4a0c      	ldr	r2, [pc, #48]	; (c0017c8 <_receive_challenge+0xb0>)
 c001796:	6013      	str	r3, [r2, #0]

    recv_verify_response_time = receive_resp_time + verify_resp_time;
 c001798:	4b07      	ldr	r3, [pc, #28]	; (c0017b8 <_receive_challenge+0xa0>)
 c00179a:	681a      	ldr	r2, [r3, #0]
 c00179c:	4b0a      	ldr	r3, [pc, #40]	; (c0017c8 <_receive_challenge+0xb0>)
 c00179e:	681b      	ldr	r3, [r3, #0]
 c0017a0:	4413      	add	r3, r2
 c0017a2:	4a0a      	ldr	r2, [pc, #40]	; (c0017cc <_receive_challenge+0xb4>)
 c0017a4:	6013      	str	r3, [r2, #0]
	return 0;
 c0017a6:	2300      	movs	r3, #0
}
 c0017a8:	4618      	mov	r0, r3
 c0017aa:	3750      	adds	r7, #80	; 0x50
 c0017ac:	46bd      	mov	sp, r7
 c0017ae:	bd80      	pop	{r7, pc}
 c0017b0:	30002245 	.word	0x30002245
 c0017b4:	30002204 	.word	0x30002204
 c0017b8:	300022e8 	.word	0x300022e8
 c0017bc:	300022b8 	.word	0x300022b8
 c0017c0:	300022d8 	.word	0x300022d8
 c0017c4:	30000020 	.word	0x30000020
 c0017c8:	300022ec 	.word	0x300022ec
 c0017cc:	300022dc 	.word	0x300022dc

0c0017d0 <_receive_request>:

void _receive_request(int size,uint8_t* read_char){
 c0017d0:	b580      	push	{r7, lr}
 c0017d2:	b082      	sub	sp, #8
 c0017d4:	af00      	add	r7, sp, #0
 c0017d6:	6078      	str	r0, [r7, #4]
 c0017d8:	6039      	str	r1, [r7, #0]
	SecureUartRx(read_char, size);
 c0017da:	687b      	ldr	r3, [r7, #4]
 c0017dc:	b29b      	uxth	r3, r3
 c0017de:	4619      	mov	r1, r3
 c0017e0:	6838      	ldr	r0, [r7, #0]
 c0017e2:	f003 fd69 	bl	c0052b8 <SecureUartRx>
	return;
 c0017e6:	bf00      	nop
}
 c0017e8:	3708      	adds	r7, #8
 c0017ea:	46bd      	mov	sp, r7
 c0017ec:	bd80      	pop	{r7, pc}
	...

0c0017f0 <_send_report_message>:
uint32_t send_report_time;
uint32_t send_report_start;
uint32_t send_report_stop;
void _send_report_message(){
 c0017f0:	b580      	push	{r7, lr}
 c0017f2:	b084      	sub	sp, #16
 c0017f4:	af00      	add	r7, sp, #0
	send_report_start = HAL_GetTick();
 c0017f6:	f003 fe07 	bl	c005408 <HAL_GetTick>
 c0017fa:	4603      	mov	r3, r0
 c0017fc:	4a18      	ldr	r2, [pc, #96]	; (c001860 <_send_report_message+0x70>)
 c0017fe:	6013      	str	r3, [r2, #0]
	uint8_t init_report[] = BEGGINING_OF_REPORT;
 c001800:	4a18      	ldr	r2, [pc, #96]	; (c001864 <_send_report_message+0x74>)
 c001802:	463b      	mov	r3, r7
 c001804:	e892 0003 	ldmia.w	r2, {r0, r1}
 c001808:	6018      	str	r0, [r3, #0]
 c00180a:	3304      	adds	r3, #4
 c00180c:	7019      	strb	r1, [r3, #0]
	SecureUartTx(init_report, COMMAND_SIZE);
 c00180e:	463b      	mov	r3, r7
 c001810:	2104      	movs	r1, #4
 c001812:	4618      	mov	r0, r3
 c001814:	f003 fd3c 	bl	c005290 <SecureUartTx>
	// Baseline End-to-end APP
//	SecureUartTx((uint8_t *)(&output_data), 4);
//	SecureUartTx(report_secure.signature, SIGNATURE_SIZE_BYTES);

	// CFA or TRACES
	int data_size = 2 + SIGNATURE_SIZE_BYTES + HASH_SIZE_BYTES + 2 + 4*report_secure.num_CF_Log_size + 2;
 c001818:	4b13      	ldr	r3, [pc, #76]	; (c001868 <_send_report_message+0x78>)
 c00181a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c00181e:	3319      	adds	r3, #25
 c001820:	009b      	lsls	r3, r3, #2
 c001822:	3302      	adds	r3, #2
 c001824:	60fb      	str	r3, [r7, #12]
	uint8_t * report_addr = (uint8_t*)(&report_secure);
 c001826:	4b10      	ldr	r3, [pc, #64]	; (c001868 <_send_report_message+0x78>)
 c001828:	60bb      	str	r3, [r7, #8]
	SecureUartTx(report_addr, data_size);
 c00182a:	68fb      	ldr	r3, [r7, #12]
 c00182c:	b29b      	uxth	r3, r3
 c00182e:	4619      	mov	r1, r3
 c001830:	68b8      	ldr	r0, [r7, #8]
 c001832:	f003 fd2d 	bl	c005290 <SecureUartTx>
	send_report_stop = HAL_GetTick();
 c001836:	f003 fde7 	bl	c005408 <HAL_GetTick>
 c00183a:	4603      	mov	r3, r0
 c00183c:	4a0b      	ldr	r2, [pc, #44]	; (c00186c <_send_report_message+0x7c>)
 c00183e:	6013      	str	r3, [r2, #0]
	send_report_time = send_report_stop - send_report_start;
 c001840:	4b0a      	ldr	r3, [pc, #40]	; (c00186c <_send_report_message+0x7c>)
 c001842:	681a      	ldr	r2, [r3, #0]
 c001844:	4b06      	ldr	r3, [pc, #24]	; (c001860 <_send_report_message+0x70>)
 c001846:	681b      	ldr	r3, [r3, #0]
 c001848:	1ad3      	subs	r3, r2, r3
 c00184a:	4a09      	ldr	r2, [pc, #36]	; (c001870 <_send_report_message+0x80>)
 c00184c:	6013      	str	r3, [r2, #0]

	// timing for debug
	SecureUartTx((uint8_t *)(&send_report_time), 4);
 c00184e:	2104      	movs	r1, #4
 c001850:	4807      	ldr	r0, [pc, #28]	; (c001870 <_send_report_message+0x80>)
 c001852:	f003 fd1d 	bl	c005290 <SecureUartTx>
}
 c001856:	bf00      	nop
 c001858:	3710      	adds	r7, #16
 c00185a:	46bd      	mov	sp, r7
 c00185c:	bd80      	pop	{r7, pc}
 c00185e:	bf00      	nop
 c001860:	300022f4 	.word	0x300022f4
 c001864:	0c00a888 	.word	0x0c00a888
 c001868:	3000019c 	.word	0x3000019c
 c00186c:	300022f8 	.word	0x300022f8
 c001870:	300022f0 	.word	0x300022f0

0c001874 <_send_report>:
uint32_t compute_send_report_time;
uint32_t compute_send_report_start;
uint32_t compute_send_report_stop;
void _send_report(){
 c001874:	b580      	push	{r7, lr}
 c001876:	af00      	add	r7, sp, #0
	_deactivate_timer_interrupt();
 c001878:	f7ff ff10 	bl	c00169c <_deactivate_timer_interrupt>
	report_secure.number_of_logs_sent ++;
 c00187c:	4b21      	ldr	r3, [pc, #132]	; (c001904 <_send_report+0x90>)
 c00187e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 c001882:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 c001886:	3301      	adds	r3, #1
 c001888:	b29a      	uxth	r2, r3
 c00188a:	4b1e      	ldr	r3, [pc, #120]	; (c001904 <_send_report+0x90>)
 c00188c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 c001890:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	if (cfa_engine_conf.attestation_status == COMPLETE){
 c001894:	4b1c      	ldr	r3, [pc, #112]	; (c001908 <_send_report+0x94>)
 c001896:	791b      	ldrb	r3, [r3, #4]
 c001898:	2b02      	cmp	r3, #2
 c00189a:	d112      	bne.n	c0018c2 <_send_report+0x4e>
		report_secure.isFinal = FINAL_REPORT;
 c00189c:	4b19      	ldr	r3, [pc, #100]	; (c001904 <_send_report+0x90>)
 c00189e:	2246      	movs	r2, #70	; 0x46
 c0018a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		compute_send_report_start = HAL_GetTick();
 c0018a4:	f003 fdb0 	bl	c005408 <HAL_GetTick>
 c0018a8:	4603      	mov	r3, r0
 c0018aa:	4a18      	ldr	r2, [pc, #96]	; (c00190c <_send_report+0x98>)
 c0018ac:	6013      	str	r3, [r2, #0]
		_sign_report(); // must come after isFinal is set since signs all report data
 c0018ae:	f000 f859 	bl	c001964 <_sign_report>
		_send_report_message();
 c0018b2:	f7ff ff9d 	bl	c0017f0 <_send_report_message>
		compute_send_report_stop = HAL_GetTick();
 c0018b6:	f003 fda7 	bl	c005408 <HAL_GetTick>
 c0018ba:	4603      	mov	r3, r0
 c0018bc:	4a14      	ldr	r2, [pc, #80]	; (c001910 <_send_report+0x9c>)
 c0018be:	6013      	str	r3, [r2, #0]
 c0018c0:	e017      	b.n	c0018f2 <_send_report+0x7e>
	}
	else if(cfa_engine_conf.attestation_status == WAITING_PARTIAL){
 c0018c2:	4b11      	ldr	r3, [pc, #68]	; (c001908 <_send_report+0x94>)
 c0018c4:	791b      	ldrb	r3, [r3, #4]
 c0018c6:	2b04      	cmp	r3, #4
 c0018c8:	d113      	bne.n	c0018f2 <_send_report+0x7e>
		report_secure.isFinal = PARTIAL_REPORT;
 c0018ca:	4b0e      	ldr	r3, [pc, #56]	; (c001904 <_send_report+0x90>)
 c0018cc:	2250      	movs	r2, #80	; 0x50
 c0018ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		compute_send_report_start = HAL_GetTick();
 c0018d2:	f003 fd99 	bl	c005408 <HAL_GetTick>
 c0018d6:	4603      	mov	r3, r0
 c0018d8:	4a0c      	ldr	r2, [pc, #48]	; (c00190c <_send_report+0x98>)
 c0018da:	6013      	str	r3, [r2, #0]
		_sign_report();
 c0018dc:	f000 f842 	bl	c001964 <_sign_report>
		_send_report_message();
 c0018e0:	f7ff ff86 	bl	c0017f0 <_send_report_message>
		_clean_partial();
 c0018e4:	f7ff fce0 	bl	c0012a8 <_clean_partial>
		compute_send_report_stop = HAL_GetTick();
 c0018e8:	f003 fd8e 	bl	c005408 <HAL_GetTick>
 c0018ec:	4603      	mov	r3, r0
 c0018ee:	4a08      	ldr	r2, [pc, #32]	; (c001910 <_send_report+0x9c>)
 c0018f0:	6013      	str	r3, [r2, #0]
	}

	compute_send_report_time = compute_send_report_stop - compute_send_report_start;
 c0018f2:	4b07      	ldr	r3, [pc, #28]	; (c001910 <_send_report+0x9c>)
 c0018f4:	681a      	ldr	r2, [r3, #0]
 c0018f6:	4b05      	ldr	r3, [pc, #20]	; (c00190c <_send_report+0x98>)
 c0018f8:	681b      	ldr	r3, [r3, #0]
 c0018fa:	1ad3      	subs	r3, r2, r3
 c0018fc:	4a05      	ldr	r2, [pc, #20]	; (c001914 <_send_report+0xa0>)
 c0018fe:	6013      	str	r3, [r2, #0]
	return;
 c001900:	bf00      	nop
}
 c001902:	bd80      	pop	{r7, pc}
 c001904:	3000019c 	.word	0x3000019c
 c001908:	30000110 	.word	0x30000110
 c00190c:	30002300 	.word	0x30002300
 c001910:	30002304 	.word	0x30002304
 c001914:	300022fc 	.word	0x300022fc

0c001918 <_attest_memory>:

/* ----------------------------- CRYPTO-OPERATIONS --------------------------------- */
uint32_t time_hash_memory;
uint32_t time_hash_memory_start;
uint32_t time_hash_memory_end;
void _attest_memory(){
 c001918:	b580      	push	{r7, lr}
 c00191a:	af00      	add	r7, sp, #0
	time_hash_memory_start = HAL_GetTick();
 c00191c:	f003 fd74 	bl	c005408 <HAL_GetTick>
 c001920:	4603      	mov	r3, r0
 c001922:	4a0b      	ldr	r2, [pc, #44]	; (c001950 <_attest_memory+0x38>)
 c001924:	6013      	str	r3, [r2, #0]
	// Compute sigle hash of non-secure memory
	Hacl_SHA2_256_hash(report_secure.mem_hash, (uint8_t*)(NONSECURE_FLASH_START), NONSECURE_FLASH_SIZE);
 c001926:	f44f 6236 	mov.w	r2, #2912	; 0xb60
 c00192a:	490a      	ldr	r1, [pc, #40]	; (c001954 <_attest_memory+0x3c>)
 c00192c:	480a      	ldr	r0, [pc, #40]	; (c001958 <_attest_memory+0x40>)
 c00192e:	f7ff fc06 	bl	c00113e <Hacl_SHA2_256_hash>
	time_hash_memory_end = HAL_GetTick();
 c001932:	f003 fd69 	bl	c005408 <HAL_GetTick>
 c001936:	4603      	mov	r3, r0
 c001938:	4a08      	ldr	r2, [pc, #32]	; (c00195c <_attest_memory+0x44>)
 c00193a:	6013      	str	r3, [r2, #0]
	time_hash_memory = time_hash_memory_end-time_hash_memory_start;
 c00193c:	4b07      	ldr	r3, [pc, #28]	; (c00195c <_attest_memory+0x44>)
 c00193e:	681a      	ldr	r2, [r3, #0]
 c001940:	4b03      	ldr	r3, [pc, #12]	; (c001950 <_attest_memory+0x38>)
 c001942:	681b      	ldr	r3, [r3, #0]
 c001944:	1ad3      	subs	r3, r2, r3
 c001946:	4a06      	ldr	r2, [pc, #24]	; (c001960 <_attest_memory+0x48>)
 c001948:	6013      	str	r3, [r2, #0]
}
 c00194a:	bf00      	nop
 c00194c:	bd80      	pop	{r7, pc}
 c00194e:	bf00      	nop
 c001950:	3000230c 	.word	0x3000230c
 c001954:	080401f8 	.word	0x080401f8
 c001958:	300001de 	.word	0x300001de
 c00195c:	30002310 	.word	0x30002310
 c001960:	30002308 	.word	0x30002308

0c001964 <_sign_report>:

uint32_t time_sign_report;
uint32_t time_sign_report_start;
uint32_t time_sign_report_end;
void _sign_report(){
 c001964:	b580      	push	{r7, lr}
 c001966:	b086      	sub	sp, #24
 c001968:	af02      	add	r7, sp, #8
	time_sign_report_start = HAL_GetTick();
 c00196a:	f003 fd4d 	bl	c005408 <HAL_GetTick>
 c00196e:	4603      	mov	r3, r0
 c001970:	4a21      	ldr	r2, [pc, #132]	; (c0019f8 <_sign_report+0x94>)
 c001972:	6013      	str	r3, [r2, #0]
	// Copy from Flash to Report Struct
	#if CFLOG_TYPE == CFLOG_FLASH
	unsigned int i;
	for(i=0; i<report_secure.num_CF_Log_size; i++){
 c001974:	2300      	movs	r3, #0
 c001976:	60fb      	str	r3, [r7, #12]
 c001978:	e00c      	b.n	c001994 <_sign_report+0x30>
		report_secure.CFLog[i] = FLASH_CFLog[i];
 c00197a:	4a20      	ldr	r2, [pc, #128]	; (c0019fc <_sign_report+0x98>)
 c00197c:	68fb      	ldr	r3, [r7, #12]
 c00197e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 c001982:	491f      	ldr	r1, [pc, #124]	; (c001a00 <_sign_report+0x9c>)
 c001984:	68fb      	ldr	r3, [r7, #12]
 c001986:	3318      	adds	r3, #24
 c001988:	009b      	lsls	r3, r3, #2
 c00198a:	440b      	add	r3, r1
 c00198c:	605a      	str	r2, [r3, #4]
	for(i=0; i<report_secure.num_CF_Log_size; i++){
 c00198e:	68fb      	ldr	r3, [r7, #12]
 c001990:	3301      	adds	r3, #1
 c001992:	60fb      	str	r3, [r7, #12]
 c001994:	4b1a      	ldr	r3, [pc, #104]	; (c001a00 <_sign_report+0x9c>)
 c001996:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c00199a:	461a      	mov	r2, r3
 c00199c:	68fb      	ldr	r3, [r7, #12]
 c00199e:	4293      	cmp	r3, r2
 c0019a0:	d3eb      	bcc.n	c00197a <_sign_report+0x16>
	// Baseline End-to-end APP
//	uint32_t report_size = 4; // in bytes
//	Hacl_SHA2_256_hash(report_hash, (uint8_t*)(&output_data), report_size);

	// CFA or TRACES
	uint32_t report_size = 2 + HASH_SIZE_BYTES + 2 + 4*report_secure.num_CF_Log_size;
 c0019a2:	4b17      	ldr	r3, [pc, #92]	; (c001a00 <_sign_report+0x9c>)
 c0019a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c0019a8:	3309      	adds	r3, #9
 c0019aa:	009b      	lsls	r3, r3, #2
 c0019ac:	60bb      	str	r3, [r7, #8]
	Hacl_SHA2_256_hash(report_hash, (uint8_t*)(&report_secure.isFinal), report_size);
 c0019ae:	68ba      	ldr	r2, [r7, #8]
 c0019b0:	4914      	ldr	r1, [pc, #80]	; (c001a04 <_sign_report+0xa0>)
 c0019b2:	4815      	ldr	r0, [pc, #84]	; (c001a08 <_sign_report+0xa4>)
 c0019b4:	f7ff fbc3 	bl	c00113e <Hacl_SHA2_256_hash>

	// sign hash
    curve = uECC_secp256r1();
 c0019b8:	f002 f906 	bl	c003bc8 <uECC_secp256r1>
 c0019bc:	4603      	mov	r3, r0
 c0019be:	4a13      	ldr	r2, [pc, #76]	; (c001a0c <_sign_report+0xa8>)
 c0019c0:	6013      	str	r3, [r2, #0]
    int t =  uECC_sign(private_key, report_hash, HASH_SIZE_BYTES, report_secure.signature, curve);
 c0019c2:	4b12      	ldr	r3, [pc, #72]	; (c001a0c <_sign_report+0xa8>)
 c0019c4:	681b      	ldr	r3, [r3, #0]
 c0019c6:	9300      	str	r3, [sp, #0]
 c0019c8:	4b0d      	ldr	r3, [pc, #52]	; (c001a00 <_sign_report+0x9c>)
 c0019ca:	2220      	movs	r2, #32
 c0019cc:	490e      	ldr	r1, [pc, #56]	; (c001a08 <_sign_report+0xa4>)
 c0019ce:	4810      	ldr	r0, [pc, #64]	; (c001a10 <_sign_report+0xac>)
 c0019d0:	f003 f894 	bl	c004afc <uECC_sign>
 c0019d4:	6078      	str	r0, [r7, #4]

    time_sign_report_end = HAL_GetTick();
 c0019d6:	f003 fd17 	bl	c005408 <HAL_GetTick>
 c0019da:	4603      	mov	r3, r0
 c0019dc:	4a0d      	ldr	r2, [pc, #52]	; (c001a14 <_sign_report+0xb0>)
 c0019de:	6013      	str	r3, [r2, #0]
	time_sign_report = time_sign_report_end-time_sign_report_start;
 c0019e0:	4b0c      	ldr	r3, [pc, #48]	; (c001a14 <_sign_report+0xb0>)
 c0019e2:	681a      	ldr	r2, [r3, #0]
 c0019e4:	4b04      	ldr	r3, [pc, #16]	; (c0019f8 <_sign_report+0x94>)
 c0019e6:	681b      	ldr	r3, [r3, #0]
 c0019e8:	1ad3      	subs	r3, r2, r3
 c0019ea:	4a0b      	ldr	r2, [pc, #44]	; (c001a18 <_sign_report+0xb4>)
 c0019ec:	6013      	str	r3, [r2, #0]
}
 c0019ee:	bf00      	nop
 c0019f0:	3710      	adds	r7, #16
 c0019f2:	46bd      	mov	sp, r7
 c0019f4:	bd80      	pop	{r7, pc}
 c0019f6:	bf00      	nop
 c0019f8:	30002318 	.word	0x30002318
 c0019fc:	0e002000 	.word	0x0e002000
 c001a00:	3000019c 	.word	0x3000019c
 c001a04:	300001dc 	.word	0x300001dc
 c001a08:	30002298 	.word	0x30002298
 c001a0c:	300022d8 	.word	0x300022d8
 c001a10:	30000000 	.word	0x30000000
 c001a14:	3000231c 	.word	0x3000231c
 c001a18:	30002314 	.word	0x30002314

0c001a1c <CFA_ENGINE_new_log_entry>:
uint8_t loop_detect = 0;
uint16_t loop_counter = 1;
uint32_t prev_entry;

//void CFA_ENGINE_new_log_entry(CFA_ENTRY value){
void CFA_ENGINE_new_log_entry(uint32_t value){
 c001a1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 c001a20:	b08e      	sub	sp, #56	; 0x38
 c001a22:	af00      	add	r7, sp, #0
 c001a24:	6078      	str	r0, [r7, #4]
	if(cfa_engine_conf.log_counter % MAX_CF_LOG_SIZE == 0 && cfa_engine_conf.log_counter > 0){
 c001a26:	4966      	ldr	r1, [pc, #408]	; (c001bc0 <CFA_ENGINE_new_log_entry+0x1a4>)
 c001a28:	88c9      	ldrh	r1, [r1, #6]
 c001a2a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 c001a2e:	b289      	uxth	r1, r1
 c001a30:	2900      	cmp	r1, #0
 c001a32:	d136      	bne.n	c001aa2 <CFA_ENGINE_new_log_entry+0x86>
 c001a34:	4962      	ldr	r1, [pc, #392]	; (c001bc0 <CFA_ENGINE_new_log_entry+0x1a4>)
 c001a36:	88c9      	ldrh	r1, [r1, #6]
 c001a38:	2900      	cmp	r1, #0
 c001a3a:	d032      	beq.n	c001aa2 <CFA_ENGINE_new_log_entry+0x86>
		app_exec_time = htim3.Instance->CNT;
 c001a3c:	4b61      	ldr	r3, [pc, #388]	; (c001bc4 <CFA_ENGINE_new_log_entry+0x1a8>)
 c001a3e:	681b      	ldr	r3, [r3, #0]
 c001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001a42:	4a61      	ldr	r2, [pc, #388]	; (c001bc8 <CFA_ENGINE_new_log_entry+0x1ac>)
 c001a44:	6013      	str	r3, [r2, #0]
		cfa_engine_conf.attestation_status = WAITING_PARTIAL;
 c001a46:	4b5e      	ldr	r3, [pc, #376]	; (c001bc0 <CFA_ENGINE_new_log_entry+0x1a4>)
 c001a48:	2204      	movs	r2, #4
 c001a4a:	711a      	strb	r2, [r3, #4]
		_send_report();
 c001a4c:	f7ff ff12 	bl	c001874 <_send_report>

		#if CFLOG_TYPE == CFLOG_RAM
		report_secure.CFLog[report_secure.num_CF_Log_size] = value;
		#else
		uint32_t addr = (uint32_t)(&FLASH_CFLog[report_secure.num_CF_Log_size]);
 c001a50:	4b5e      	ldr	r3, [pc, #376]	; (c001bcc <CFA_ENGINE_new_log_entry+0x1b0>)
 c001a52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c001a56:	009b      	lsls	r3, r3, #2
 c001a58:	4a5d      	ldr	r2, [pc, #372]	; (c001bd0 <CFA_ENGINE_new_log_entry+0x1b4>)
 c001a5a:	4413      	add	r3, r2
 c001a5c:	637b      	str	r3, [r7, #52]	; 0x34
		uint64_t data = (prev_entry << 32) | value;
 c001a5e:	4b5d      	ldr	r3, [pc, #372]	; (c001bd4 <CFA_ENGINE_new_log_entry+0x1b8>)
 c001a60:	681b      	ldr	r3, [r3, #0]
 c001a62:	2220      	movs	r2, #32
 c001a64:	fa03 f202 	lsl.w	r2, r3, r2
 c001a68:	687b      	ldr	r3, [r7, #4]
 c001a6a:	4313      	orrs	r3, r2
 c001a6c:	2200      	movs	r2, #0
 c001a6e:	4698      	mov	r8, r3
 c001a70:	4691      	mov	r9, r2
 c001a72:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
		update_flash(addr, data);
 c001a76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 c001a7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 c001a7c:	f7ff fc68 	bl	c001350 <update_flash>
		#endif

		report_secure.num_CF_Log_size++;
 c001a80:	4b52      	ldr	r3, [pc, #328]	; (c001bcc <CFA_ENGINE_new_log_entry+0x1b0>)
 c001a82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c001a86:	3301      	adds	r3, #1
 c001a88:	b29a      	uxth	r2, r3
 c001a8a:	4b50      	ldr	r3, [pc, #320]	; (c001bcc <CFA_ENGINE_new_log_entry+0x1b0>)
 c001a8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		cfa_engine_conf.log_counter++;
 c001a90:	4b4b      	ldr	r3, [pc, #300]	; (c001bc0 <CFA_ENGINE_new_log_entry+0x1a4>)
 c001a92:	88db      	ldrh	r3, [r3, #6]
 c001a94:	3301      	adds	r3, #1
 c001a96:	b29a      	uxth	r2, r3
 c001a98:	4b49      	ldr	r3, [pc, #292]	; (c001bc0 <CFA_ENGINE_new_log_entry+0x1a4>)
 c001a9a:	80da      	strh	r2, [r3, #6]
		_read_serial_loop();
 c001a9c:	f7ff fd5e 	bl	c00155c <_read_serial_loop>
	if(cfa_engine_conf.log_counter % MAX_CF_LOG_SIZE == 0 && cfa_engine_conf.log_counter > 0){
 c001aa0:	e089      	b.n	c001bb6 <CFA_ENGINE_new_log_entry+0x19a>
	else{
		// compare current value to previous, if equal, replace with counter
		#if CFLOG_TYPE == CFLOG_RAM
		if(report_secure.num_CF_Log_size != 0 && report_secure.CFLog[report_secure.num_CF_Log_size - 1] == value){
		#else
		if(report_secure.num_CF_Log_size != 0 && FLASH_CFLog[report_secure.num_CF_Log_size - 1] == value){
 c001aa2:	494a      	ldr	r1, [pc, #296]	; (c001bcc <CFA_ENGINE_new_log_entry+0x1b0>)
 c001aa4:	f8b1 1062 	ldrh.w	r1, [r1, #98]	; 0x62
 c001aa8:	2900      	cmp	r1, #0
 c001aaa:	d020      	beq.n	c001aee <CFA_ENGINE_new_log_entry+0xd2>
 c001aac:	4947      	ldr	r1, [pc, #284]	; (c001bcc <CFA_ENGINE_new_log_entry+0x1b0>)
 c001aae:	f8b1 1062 	ldrh.w	r1, [r1, #98]	; 0x62
 c001ab2:	3901      	subs	r1, #1
 c001ab4:	4846      	ldr	r0, [pc, #280]	; (c001bd0 <CFA_ENGINE_new_log_entry+0x1b4>)
 c001ab6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 c001aba:	6878      	ldr	r0, [r7, #4]
 c001abc:	4288      	cmp	r0, r1
 c001abe:	d116      	bne.n	c001aee <CFA_ENGINE_new_log_entry+0xd2>
		#endif
			if (loop_detect == 0){
 c001ac0:	4b45      	ldr	r3, [pc, #276]	; (c001bd8 <CFA_ENGINE_new_log_entry+0x1bc>)
 c001ac2:	781b      	ldrb	r3, [r3, #0]
 c001ac4:	2b00      	cmp	r3, #0
 c001ac6:	d107      	bne.n	c001ad8 <CFA_ENGINE_new_log_entry+0xbc>
				// since first instance of repeat, set flag
				loop_detect ^= 1;
 c001ac8:	4b43      	ldr	r3, [pc, #268]	; (c001bd8 <CFA_ENGINE_new_log_entry+0x1bc>)
 c001aca:	781b      	ldrb	r3, [r3, #0]
 c001acc:	f083 0301 	eor.w	r3, r3, #1
 c001ad0:	b2da      	uxtb	r2, r3
 c001ad2:	4b41      	ldr	r3, [pc, #260]	; (c001bd8 <CFA_ENGINE_new_log_entry+0x1bc>)
 c001ad4:	701a      	strb	r2, [r3, #0]
			if (loop_detect == 0){
 c001ad6:	e06d      	b.n	c001bb4 <CFA_ENGINE_new_log_entry+0x198>
			} else if (loop_detect == 1){
 c001ad8:	4b3f      	ldr	r3, [pc, #252]	; (c001bd8 <CFA_ENGINE_new_log_entry+0x1bc>)
 c001ada:	781b      	ldrb	r3, [r3, #0]
 c001adc:	2b01      	cmp	r3, #1
 c001ade:	d169      	bne.n	c001bb4 <CFA_ENGINE_new_log_entry+0x198>
				// if more than one instance, increment counter
				loop_counter++;
 c001ae0:	4b3e      	ldr	r3, [pc, #248]	; (c001bdc <CFA_ENGINE_new_log_entry+0x1c0>)
 c001ae2:	881b      	ldrh	r3, [r3, #0]
 c001ae4:	3301      	adds	r3, #1
 c001ae6:	b29a      	uxth	r2, r3
 c001ae8:	4b3c      	ldr	r3, [pc, #240]	; (c001bdc <CFA_ENGINE_new_log_entry+0x1c0>)
 c001aea:	801a      	strh	r2, [r3, #0]
			if (loop_detect == 0){
 c001aec:	e062      	b.n	c001bb4 <CFA_ENGINE_new_log_entry+0x198>
			}
		}
		else{ // enter this block either because 1) not a loop or 2) loop exit
			if(loop_detect == 1){
 c001aee:	493a      	ldr	r1, [pc, #232]	; (c001bd8 <CFA_ENGINE_new_log_entry+0x1bc>)
 c001af0:	7809      	ldrb	r1, [r1, #0]
 c001af2:	2901      	cmp	r1, #1
 c001af4:	d134      	bne.n	c001b60 <CFA_ENGINE_new_log_entry+0x144>
				// if loop exit, clear flag and increment log size for next entry
				#if CFLOG_TYPE == CFLOG_FLASH
				uint32_t addr = (uint32_t)(&FLASH_CFLog[report_secure.num_CF_Log_size]);
 c001af6:	4935      	ldr	r1, [pc, #212]	; (c001bcc <CFA_ENGINE_new_log_entry+0x1b0>)
 c001af8:	f8b1 1062 	ldrh.w	r1, [r1, #98]	; 0x62
 c001afc:	0089      	lsls	r1, r1, #2
 c001afe:	4834      	ldr	r0, [pc, #208]	; (c001bd0 <CFA_ENGINE_new_log_entry+0x1b4>)
 c001b00:	4401      	add	r1, r0
 c001b02:	6279      	str	r1, [r7, #36]	; 0x24
				uint64_t data = (prev_entry << 32) | (0xffff0000 + loop_counter);
 c001b04:	4933      	ldr	r1, [pc, #204]	; (c001bd4 <CFA_ENGINE_new_log_entry+0x1b8>)
 c001b06:	6809      	ldr	r1, [r1, #0]
 c001b08:	2020      	movs	r0, #32
 c001b0a:	fa01 f000 	lsl.w	r0, r1, r0
 c001b0e:	4933      	ldr	r1, [pc, #204]	; (c001bdc <CFA_ENGINE_new_log_entry+0x1c0>)
 c001b10:	8809      	ldrh	r1, [r1, #0]
 c001b12:	f5a1 3180 	sub.w	r1, r1, #65536	; 0x10000
 c001b16:	4301      	orrs	r1, r0
 c001b18:	2000      	movs	r0, #0
 c001b1a:	460a      	mov	r2, r1
 c001b1c:	4603      	mov	r3, r0
 c001b1e:	e9c7 2306 	strd	r2, r3, [r7, #24]
				prev_entry = (0xffff0000 + loop_counter);
 c001b22:	4b2e      	ldr	r3, [pc, #184]	; (c001bdc <CFA_ENGINE_new_log_entry+0x1c0>)
 c001b24:	881b      	ldrh	r3, [r3, #0]
 c001b26:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 c001b2a:	4a2a      	ldr	r2, [pc, #168]	; (c001bd4 <CFA_ENGINE_new_log_entry+0x1b8>)
 c001b2c:	6013      	str	r3, [r2, #0]
				update_flash(addr, data);
 c001b2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 c001b32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 c001b34:	f7ff fc0c 	bl	c001350 <update_flash>
				#else
					report_secure.CFLog[report_secure.num_CF_Log_size] = (0xffff0000 + loop_counter);
				#endif

				loop_detect = 0;
 c001b38:	4b27      	ldr	r3, [pc, #156]	; (c001bd8 <CFA_ENGINE_new_log_entry+0x1bc>)
 c001b3a:	2200      	movs	r2, #0
 c001b3c:	701a      	strb	r2, [r3, #0]
				cfa_engine_conf.log_counter++;
 c001b3e:	4b20      	ldr	r3, [pc, #128]	; (c001bc0 <CFA_ENGINE_new_log_entry+0x1a4>)
 c001b40:	88db      	ldrh	r3, [r3, #6]
 c001b42:	3301      	adds	r3, #1
 c001b44:	b29a      	uxth	r2, r3
 c001b46:	4b1e      	ldr	r3, [pc, #120]	; (c001bc0 <CFA_ENGINE_new_log_entry+0x1a4>)
 c001b48:	80da      	strh	r2, [r3, #6]
				report_secure.num_CF_Log_size++;
 c001b4a:	4b20      	ldr	r3, [pc, #128]	; (c001bcc <CFA_ENGINE_new_log_entry+0x1b0>)
 c001b4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c001b50:	3301      	adds	r3, #1
 c001b52:	b29a      	uxth	r2, r3
 c001b54:	4b1d      	ldr	r3, [pc, #116]	; (c001bcc <CFA_ENGINE_new_log_entry+0x1b0>)
 c001b56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
				loop_counter = 1;
 c001b5a:	4b20      	ldr	r3, [pc, #128]	; (c001bdc <CFA_ENGINE_new_log_entry+0x1c0>)
 c001b5c:	2201      	movs	r2, #1
 c001b5e:	801a      	strh	r2, [r3, #0]
			}

			#if CFLOG_TYPE == CFLOG_RAM
			report_secure.CFLog[report_secure.num_CF_Log_size] = value;
			#else
			uint32_t addr = (uint32_t)(&FLASH_CFLog[report_secure.num_CF_Log_size]);
 c001b60:	4b1a      	ldr	r3, [pc, #104]	; (c001bcc <CFA_ENGINE_new_log_entry+0x1b0>)
 c001b62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c001b66:	009b      	lsls	r3, r3, #2
 c001b68:	4a19      	ldr	r2, [pc, #100]	; (c001bd0 <CFA_ENGINE_new_log_entry+0x1b4>)
 c001b6a:	4413      	add	r3, r2
 c001b6c:	617b      	str	r3, [r7, #20]
			uint64_t data = (prev_entry << 32) | value;
 c001b6e:	4b19      	ldr	r3, [pc, #100]	; (c001bd4 <CFA_ENGINE_new_log_entry+0x1b8>)
 c001b70:	681b      	ldr	r3, [r3, #0]
 c001b72:	2220      	movs	r2, #32
 c001b74:	fa03 f202 	lsl.w	r2, r3, r2
 c001b78:	687b      	ldr	r3, [r7, #4]
 c001b7a:	4313      	orrs	r3, r2
 c001b7c:	2200      	movs	r2, #0
 c001b7e:	461c      	mov	r4, r3
 c001b80:	4615      	mov	r5, r2
 c001b82:	e9c7 4502 	strd	r4, r5, [r7, #8]
			update_flash(addr, data);
 c001b86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 c001b8a:	6978      	ldr	r0, [r7, #20]
 c001b8c:	f7ff fbe0 	bl	c001350 <update_flash>
			prev_entry = value;
 c001b90:	4a10      	ldr	r2, [pc, #64]	; (c001bd4 <CFA_ENGINE_new_log_entry+0x1b8>)
 c001b92:	687b      	ldr	r3, [r7, #4]
 c001b94:	6013      	str	r3, [r2, #0]
			#endif

			cfa_engine_conf.log_counter++;
 c001b96:	4b0a      	ldr	r3, [pc, #40]	; (c001bc0 <CFA_ENGINE_new_log_entry+0x1a4>)
 c001b98:	88db      	ldrh	r3, [r3, #6]
 c001b9a:	3301      	adds	r3, #1
 c001b9c:	b29a      	uxth	r2, r3
 c001b9e:	4b08      	ldr	r3, [pc, #32]	; (c001bc0 <CFA_ENGINE_new_log_entry+0x1a4>)
 c001ba0:	80da      	strh	r2, [r3, #6]
			report_secure.num_CF_Log_size++;
 c001ba2:	4b0a      	ldr	r3, [pc, #40]	; (c001bcc <CFA_ENGINE_new_log_entry+0x1b0>)
 c001ba4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c001ba8:	3301      	adds	r3, #1
 c001baa:	b29a      	uxth	r2, r3
 c001bac:	4b07      	ldr	r3, [pc, #28]	; (c001bcc <CFA_ENGINE_new_log_entry+0x1b0>)
 c001bae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		}
	}
	return;
 c001bb2:	e000      	b.n	c001bb6 <CFA_ENGINE_new_log_entry+0x19a>
			if (loop_detect == 0){
 c001bb4:	bf00      	nop
	return;
 c001bb6:	bf00      	nop
}
 c001bb8:	3738      	adds	r7, #56	; 0x38
 c001bba:	46bd      	mov	sp, r7
 c001bbc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 c001bc0:	30000110 	.word	0x30000110
 c001bc4:	30002340 	.word	0x30002340
 c001bc8:	300022e0 	.word	0x300022e0
 c001bcc:	3000019c 	.word	0x3000019c
 c001bd0:	0e002000 	.word	0x0e002000
 c001bd4:	30002324 	.word	0x30002324
 c001bd8:	30002320 	.word	0x30002320
 c001bdc:	30000060 	.word	0x30000060

0c001be0 <CFA_ENGINE_run_attestation>:

uint32_t start;
uint32_t end;
void CFA_ENGINE_run_attestation(){
 c001be0:	b580      	push	{r7, lr}
 c001be2:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.initialized != INITIALIZED){
 c001be4:	4b19      	ldr	r3, [pc, #100]	; (c001c4c <CFA_ENGINE_run_attestation+0x6c>)
 c001be6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 c001bea:	2bee      	cmp	r3, #238	; 0xee
 c001bec:	d12b      	bne.n	c001c46 <CFA_ENGINE_run_attestation+0x66>
	//	*ERROR = ERROR_CFA_ENGINE_NOT_INITIALIZED;
		return;
	}

	report_secure.num_CF_Log_size = 0;
 c001bee:	4b18      	ldr	r3, [pc, #96]	; (c001c50 <CFA_ENGINE_run_attestation+0x70>)
 c001bf0:	2200      	movs	r2, #0
 c001bf2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	cfa_engine_conf.attestation_status = ACTIVE;
 c001bf6:	4b15      	ldr	r3, [pc, #84]	; (c001c4c <CFA_ENGINE_run_attestation+0x6c>)
 c001bf8:	2201      	movs	r2, #1
 c001bfa:	711a      	strb	r2, [r3, #4]
	cfa_engine_conf.log_counter = 0;
 c001bfc:	4b13      	ldr	r3, [pc, #76]	; (c001c4c <CFA_ENGINE_run_attestation+0x6c>)
 c001bfe:	2200      	movs	r2, #0
 c001c00:	80da      	strh	r2, [r3, #6]
	report_secure.number_of_logs_sent = 0;
 c001c02:	4b13      	ldr	r3, [pc, #76]	; (c001c50 <CFA_ENGINE_run_attestation+0x70>)
 c001c04:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 c001c08:	2200      	movs	r2, #0
 c001c0a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64


	_initialize_timer_interrupt();
 c001c0e:	f7ff fd0b 	bl	c001628 <_initialize_timer_interrupt>

	// Call the application
	start = HAL_GetTick();
 c001c12:	f003 fbf9 	bl	c005408 <HAL_GetTick>
 c001c16:	4603      	mov	r3, r0
 c001c18:	4a0e      	ldr	r2, [pc, #56]	; (c001c54 <CFA_ENGINE_run_attestation+0x74>)
 c001c1a:	6013      	str	r3, [r2, #0]
	_run_application();
 c001c1c:	f7ff fb52 	bl	c0012c4 <_run_application>
	end = HAL_GetTick();
 c001c20:	f003 fbf2 	bl	c005408 <HAL_GetTick>
 c001c24:	4603      	mov	r3, r0
 c001c26:	4a0c      	ldr	r2, [pc, #48]	; (c001c58 <CFA_ENGINE_run_attestation+0x78>)
 c001c28:	6013      	str	r3, [r2, #0]
	app_exec_time = end - start;
 c001c2a:	4b0b      	ldr	r3, [pc, #44]	; (c001c58 <CFA_ENGINE_run_attestation+0x78>)
 c001c2c:	681a      	ldr	r2, [r3, #0]
 c001c2e:	4b09      	ldr	r3, [pc, #36]	; (c001c54 <CFA_ENGINE_run_attestation+0x74>)
 c001c30:	681b      	ldr	r3, [r3, #0]
 c001c32:	1ad3      	subs	r3, r2, r3
 c001c34:	4a09      	ldr	r2, [pc, #36]	; (c001c5c <CFA_ENGINE_run_attestation+0x7c>)
 c001c36:	6013      	str	r3, [r2, #0]

	_deactivate_timer_interrupt();
 c001c38:	f7ff fd30 	bl	c00169c <_deactivate_timer_interrupt>

	// Set Final report Flag
	report_secure.isFinal = TRUE;
 c001c3c:	4b04      	ldr	r3, [pc, #16]	; (c001c50 <CFA_ENGINE_run_attestation+0x70>)
 c001c3e:	2201      	movs	r2, #1
 c001c40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	return;
 c001c44:	e000      	b.n	c001c48 <CFA_ENGINE_run_attestation+0x68>
		return;
 c001c46:	bf00      	nop
}
 c001c48:	bd80      	pop	{r7, pc}
 c001c4a:	bf00      	nop
 c001c4c:	30000110 	.word	0x30000110
 c001c50:	3000019c 	.word	0x3000019c
 c001c54:	30002328 	.word	0x30002328
 c001c58:	3000232c 	.word	0x3000232c
 c001c5c:	300022e0 	.word	0x300022e0

0c001c60 <CFA_ENGINE_initialize>:

void CFA_ENGINE_initialize(){
 c001c60:	b580      	push	{r7, lr}
 c001c62:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.initialized == INITIALIZED){
 c001c64:	4b06      	ldr	r3, [pc, #24]	; (c001c80 <CFA_ENGINE_initialize+0x20>)
 c001c66:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 c001c6a:	2bee      	cmp	r3, #238	; 0xee
 c001c6c:	d006      	beq.n	c001c7c <CFA_ENGINE_initialize+0x1c>
		return; //ERROR_cfa_engine_ALREADY_INITIALIZED;;
	}
	_attest_memory();
 c001c6e:	f7ff fe53 	bl	c001918 <_attest_memory>
	_setup_data();
 c001c72:	f7ff fa95 	bl	c0011a0 <_setup_data>
	_clean();
 c001c76:	f7ff faef 	bl	c001258 <_clean>

	return;
 c001c7a:	e000      	b.n	c001c7e <CFA_ENGINE_initialize+0x1e>
		return; //ERROR_cfa_engine_ALREADY_INITIALIZED;;
 c001c7c:	bf00      	nop
}
 c001c7e:	bd80      	pop	{r7, pc}
 c001c80:	30000110 	.word	0x30000110

0c001c84 <_heal_function>:
	HAL_NVIC_SystemReset();
	return;
}


void _heal_function(){
 c001c84:	b480      	push	{r7}
 c001c86:	af00      	add	r7, sp, #0
	while(1);
 c001c88:	e7fe      	b.n	c001c88 <_heal_function+0x4>
	...

0c001c8c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 c001c8c:	b580      	push	{r7, lr}
 c001c8e:	b082      	sub	sp, #8
 c001c90:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c001c92:	4b09      	ldr	r3, [pc, #36]	; (c001cb8 <MX_GPIO_Init+0x2c>)
 c001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001c96:	4a08      	ldr	r2, [pc, #32]	; (c001cb8 <MX_GPIO_Init+0x2c>)
 c001c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c001c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 c001c9e:	4b06      	ldr	r3, [pc, #24]	; (c001cb8 <MX_GPIO_Init+0x2c>)
 c001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c001ca6:	607b      	str	r3, [r7, #4]
 c001ca8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 c001caa:	f004 fbbb 	bl	c006424 <HAL_PWREx_EnableVddIO2>

}
 c001cae:	bf00      	nop
 c001cb0:	3708      	adds	r7, #8
 c001cb2:	46bd      	mov	sp, r7
 c001cb4:	bd80      	pop	{r7, pc}
 c001cb6:	bf00      	nop
 c001cb8:	50021000 	.word	0x50021000

0c001cbc <MX_GTZC_S_Init>:

/* USER CODE END 0 */

/* GTZC_S init function */
void MX_GTZC_S_Init(void)
{
 c001cbc:	b580      	push	{r7, lr}
 c001cbe:	b09c      	sub	sp, #112	; 0x70
 c001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c001cc2:	1d3b      	adds	r3, r7, #4
 c001cc4:	226c      	movs	r2, #108	; 0x6c
 c001cc6:	2100      	movs	r1, #0
 c001cc8:	4618      	mov	r0, r3
 c001cca:	f007 fd6e 	bl	c0097aa <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_TIM3, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c001cce:	f240 3101 	movw	r1, #769	; 0x301
 c001cd2:	2001      	movs	r0, #1
 c001cd4:	f004 f8c2 	bl	c005e5c <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c001cd8:	4603      	mov	r3, r0
 c001cda:	2b00      	cmp	r3, #0
 c001cdc:	d001      	beq.n	c001ce2 <MX_GTZC_S_Init+0x26>
  {
    Error_Handler();
 c001cde:	f000 f9cb 	bl	c002078 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_TIM4, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c001ce2:	f240 3101 	movw	r1, #769	; 0x301
 c001ce6:	2002      	movs	r0, #2
 c001ce8:	f004 f8b8 	bl	c005e5c <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c001cec:	4603      	mov	r3, r0
 c001cee:	2b00      	cmp	r3, #0
 c001cf0:	d001      	beq.n	c001cf6 <MX_GTZC_S_Init+0x3a>
  {
    Error_Handler();
 c001cf2:	f000 f9c1 	bl	c002078 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_LPUART1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c001cf6:	f240 3101 	movw	r1, #769	; 0x301
 c001cfa:	2015      	movs	r0, #21
 c001cfc:	f004 f8ae 	bl	c005e5c <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c001d00:	4603      	mov	r3, r0
 c001d02:	2b00      	cmp	r3, #0
 c001d04:	d001      	beq.n	c001d0a <MX_GTZC_S_Init+0x4e>
  {
    Error_Handler();
 c001d06:	f000 f9b7 	bl	c002078 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c001d0a:	2300      	movs	r3, #0
 c001d0c:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c001d0e:	2300      	movs	r3, #0
 c001d10:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c001d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001d16:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c001d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001d1c:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c001d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001d22:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c001d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001d28:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c001d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001d2e:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c001d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001d34:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c001d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c001d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001d40:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c001d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c001d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001d4c:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c001d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001d52:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c001d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c001d58:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c001d5a:	2300      	movs	r3, #0
 c001d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c001d5e:	2300      	movs	r3, #0
 c001d60:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c001d62:	2300      	movs	r3, #0
 c001d64:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c001d66:	2300      	movs	r3, #0
 c001d68:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c001d6a:	2300      	movs	r3, #0
 c001d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c001d6e:	2300      	movs	r3, #0
 c001d70:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c001d72:	2300      	movs	r3, #0
 c001d74:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c001d76:	2300      	movs	r3, #0
 c001d78:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c001d7a:	2300      	movs	r3, #0
 c001d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c001d7e:	2300      	movs	r3, #0
 c001d80:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c001d82:	2300      	movs	r3, #0
 c001d84:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c001d86:	2300      	movs	r3, #0
 c001d88:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c001d8a:	2300      	movs	r3, #0
 c001d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c001d8e:	1d3b      	adds	r3, r7, #4
 c001d90:	4619      	mov	r1, r3
 c001d92:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c001d96:	f004 f939 	bl	c00600c <HAL_GTZC_MPCBB_ConfigMem>
 c001d9a:	4603      	mov	r3, r0
 c001d9c:	2b00      	cmp	r3, #0
 c001d9e:	d001      	beq.n	c001da4 <MX_GTZC_S_Init+0xe8>
  {
    Error_Handler();
 c001da0:	f000 f96a 	bl	c002078 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c001da4:	2300      	movs	r3, #0
 c001da6:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c001da8:	2300      	movs	r3, #0
 c001daa:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c001dac:	2300      	movs	r3, #0
 c001dae:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c001db0:	2300      	movs	r3, #0
 c001db2:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c001db4:	2300      	movs	r3, #0
 c001db6:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c001db8:	2300      	movs	r3, #0
 c001dba:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c001dbc:	2300      	movs	r3, #0
 c001dbe:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c001dc0:	2300      	movs	r3, #0
 c001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c001dc4:	2300      	movs	r3, #0
 c001dc6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c001dc8:	1d3b      	adds	r3, r7, #4
 c001dca:	4619      	mov	r1, r3
 c001dcc:	4809      	ldr	r0, [pc, #36]	; (c001df4 <MX_GTZC_S_Init+0x138>)
 c001dce:	f004 f91d 	bl	c00600c <HAL_GTZC_MPCBB_ConfigMem>
 c001dd2:	4603      	mov	r3, r0
 c001dd4:	2b00      	cmp	r3, #0
 c001dd6:	d001      	beq.n	c001ddc <MX_GTZC_S_Init+0x120>
  {
    Error_Handler();
 c001dd8:	f000 f94e 	bl	c002078 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */
  if (HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_LPUART1) != HAL_OK)
 c001ddc:	2015      	movs	r0, #21
 c001dde:	f004 f999 	bl	c006114 <HAL_GTZC_TZIC_EnableIT>
 c001de2:	4603      	mov	r3, r0
 c001de4:	2b00      	cmp	r3, #0
 c001de6:	d001      	beq.n	c001dec <MX_GTZC_S_Init+0x130>
  {
    Error_Handler();
 c001de8:	f000 f946 	bl	c002078 <Error_Handler>
  }

  /* USER CODE END GTZC_S_Init 2 */

}
 c001dec:	bf00      	nop
 c001dee:	3770      	adds	r7, #112	; 0x70
 c001df0:	46bd      	mov	sp, r7
 c001df2:	bd80      	pop	{r7, pc}
 c001df4:	30030000 	.word	0x30030000

0c001df8 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c001df8:	b480      	push	{r7}
 c001dfa:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c001dfc:	4b2f      	ldr	r3, [pc, #188]	; (c001ebc <TZ_SAU_Setup+0xc4>)
 c001dfe:	2200      	movs	r2, #0
 c001e00:	609a      	str	r2, [r3, #8]
 c001e02:	4b2e      	ldr	r3, [pc, #184]	; (c001ebc <TZ_SAU_Setup+0xc4>)
 c001e04:	4a2e      	ldr	r2, [pc, #184]	; (c001ec0 <TZ_SAU_Setup+0xc8>)
 c001e06:	60da      	str	r2, [r3, #12]
 c001e08:	4b2c      	ldr	r3, [pc, #176]	; (c001ebc <TZ_SAU_Setup+0xc4>)
 c001e0a:	4a2e      	ldr	r2, [pc, #184]	; (c001ec4 <TZ_SAU_Setup+0xcc>)
 c001e0c:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c001e0e:	4b2b      	ldr	r3, [pc, #172]	; (c001ebc <TZ_SAU_Setup+0xc4>)
 c001e10:	2201      	movs	r2, #1
 c001e12:	609a      	str	r2, [r3, #8]
 c001e14:	4b29      	ldr	r3, [pc, #164]	; (c001ebc <TZ_SAU_Setup+0xc4>)
 c001e16:	4a2c      	ldr	r2, [pc, #176]	; (c001ec8 <TZ_SAU_Setup+0xd0>)
 c001e18:	60da      	str	r2, [r3, #12]
 c001e1a:	4b28      	ldr	r3, [pc, #160]	; (c001ebc <TZ_SAU_Setup+0xc4>)
 c001e1c:	4a2b      	ldr	r2, [pc, #172]	; (c001ecc <TZ_SAU_Setup+0xd4>)
 c001e1e:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c001e20:	4b26      	ldr	r3, [pc, #152]	; (c001ebc <TZ_SAU_Setup+0xc4>)
 c001e22:	2202      	movs	r2, #2
 c001e24:	609a      	str	r2, [r3, #8]
 c001e26:	4b25      	ldr	r3, [pc, #148]	; (c001ebc <TZ_SAU_Setup+0xc4>)
 c001e28:	4a29      	ldr	r2, [pc, #164]	; (c001ed0 <TZ_SAU_Setup+0xd8>)
 c001e2a:	60da      	str	r2, [r3, #12]
 c001e2c:	4b23      	ldr	r3, [pc, #140]	; (c001ebc <TZ_SAU_Setup+0xc4>)
 c001e2e:	4a29      	ldr	r2, [pc, #164]	; (c001ed4 <TZ_SAU_Setup+0xdc>)
 c001e30:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c001e32:	4b22      	ldr	r3, [pc, #136]	; (c001ebc <TZ_SAU_Setup+0xc4>)
 c001e34:	2203      	movs	r2, #3
 c001e36:	609a      	str	r2, [r3, #8]
 c001e38:	4b20      	ldr	r3, [pc, #128]	; (c001ebc <TZ_SAU_Setup+0xc4>)
 c001e3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c001e3e:	60da      	str	r2, [r3, #12]
 c001e40:	4b1e      	ldr	r3, [pc, #120]	; (c001ebc <TZ_SAU_Setup+0xc4>)
 c001e42:	4a25      	ldr	r2, [pc, #148]	; (c001ed8 <TZ_SAU_Setup+0xe0>)
 c001e44:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c001e46:	4b1d      	ldr	r3, [pc, #116]	; (c001ebc <TZ_SAU_Setup+0xc4>)
 c001e48:	2204      	movs	r2, #4
 c001e4a:	609a      	str	r2, [r3, #8]
 c001e4c:	4b1b      	ldr	r3, [pc, #108]	; (c001ebc <TZ_SAU_Setup+0xc4>)
 c001e4e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c001e52:	60da      	str	r2, [r3, #12]
 c001e54:	4b19      	ldr	r3, [pc, #100]	; (c001ebc <TZ_SAU_Setup+0xc4>)
 c001e56:	4a21      	ldr	r2, [pc, #132]	; (c001edc <TZ_SAU_Setup+0xe4>)
 c001e58:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c001e5a:	4b18      	ldr	r3, [pc, #96]	; (c001ebc <TZ_SAU_Setup+0xc4>)
 c001e5c:	2205      	movs	r2, #5
 c001e5e:	609a      	str	r2, [r3, #8]
 c001e60:	4b16      	ldr	r3, [pc, #88]	; (c001ebc <TZ_SAU_Setup+0xc4>)
 c001e62:	4a1f      	ldr	r2, [pc, #124]	; (c001ee0 <TZ_SAU_Setup+0xe8>)
 c001e64:	60da      	str	r2, [r3, #12]
 c001e66:	4b15      	ldr	r3, [pc, #84]	; (c001ebc <TZ_SAU_Setup+0xc4>)
 c001e68:	4a1e      	ldr	r2, [pc, #120]	; (c001ee4 <TZ_SAU_Setup+0xec>)
 c001e6a:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c001e6c:	4b13      	ldr	r3, [pc, #76]	; (c001ebc <TZ_SAU_Setup+0xc4>)
 c001e6e:	2201      	movs	r2, #1
 c001e70:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c001e72:	4b1d      	ldr	r3, [pc, #116]	; (c001ee8 <TZ_SAU_Setup+0xf0>)
 c001e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c001e78:	4a1b      	ldr	r2, [pc, #108]	; (c001ee8 <TZ_SAU_Setup+0xf0>)
 c001e7a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c001e7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001e82:	4b1a      	ldr	r3, [pc, #104]	; (c001eec <TZ_SAU_Setup+0xf4>)
 c001e84:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c001e86:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001e8a:	4a18      	ldr	r2, [pc, #96]	; (c001eec <TZ_SAU_Setup+0xf4>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c001e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001e90:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c001e92:	4b17      	ldr	r3, [pc, #92]	; (c001ef0 <TZ_SAU_Setup+0xf8>)
 c001e94:	2200      	movs	r2, #0
 c001e96:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c001e9a:	4b15      	ldr	r3, [pc, #84]	; (c001ef0 <TZ_SAU_Setup+0xf8>)
 c001e9c:	2200      	movs	r2, #0
 c001e9e:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c001ea2:	4b13      	ldr	r3, [pc, #76]	; (c001ef0 <TZ_SAU_Setup+0xf8>)
 c001ea4:	2200      	movs	r2, #0
 c001ea6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c001eaa:	4b11      	ldr	r3, [pc, #68]	; (c001ef0 <TZ_SAU_Setup+0xf8>)
 c001eac:	2200      	movs	r2, #0
 c001eae:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c001eb2:	bf00      	nop
 c001eb4:	46bd      	mov	sp, r7
 c001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001eba:	4770      	bx	lr
 c001ebc:	e000edd0 	.word	0xe000edd0
 c001ec0:	0c03e000 	.word	0x0c03e000
 c001ec4:	0c03ffe3 	.word	0x0c03ffe3
 c001ec8:	08040000 	.word	0x08040000
 c001ecc:	0807ffe1 	.word	0x0807ffe1
 c001ed0:	20018000 	.word	0x20018000
 c001ed4:	2003ffe1 	.word	0x2003ffe1
 c001ed8:	4fffffe1 	.word	0x4fffffe1
 c001edc:	9fffffe1 	.word	0x9fffffe1
 c001ee0:	0bf90000 	.word	0x0bf90000
 c001ee4:	0bfa8fe1 	.word	0x0bfa8fe1
 c001ee8:	e000ed00 	.word	0xe000ed00
 c001eec:	e000ef30 	.word	0xe000ef30
 c001ef0:	e000e100 	.word	0xe000e100

0c001ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c001ef4:	b580      	push	{r7, lr}
 c001ef6:	b082      	sub	sp, #8
 c001ef8:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and interrupts secure/non-secure allocation setup done */
  /* in SystemInit() based on partition_stm32l552xx.h file's definitions. */
  /* USER CODE BEGIN 1 */

  //enable SecureFault_Handler, without this HardFault_Handler will be raised.
  SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
 c001efa:	4b13      	ldr	r3, [pc, #76]	; (c001f48 <main+0x54>)
 c001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001efe:	4a12      	ldr	r2, [pc, #72]	; (c001f48 <main+0x54>)
 c001f00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c001f04:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c001f06:	f003 fa14 	bl	c005332 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c001f0a:	f000 f865 	bl	c001fd8 <SystemClock_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c001f0e:	f7ff fed5 	bl	c001cbc <MX_GTZC_S_Init>

  /* USER CODE BEGIN SysInit */

  // Enable flash controller clock
  __HAL_RCC_FLASH_CLK_ENABLE();
 c001f12:	4b0e      	ldr	r3, [pc, #56]	; (c001f4c <main+0x58>)
 c001f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001f16:	4a0d      	ldr	r2, [pc, #52]	; (c001f4c <main+0x58>)
 c001f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c001f1c:	6493      	str	r3, [r2, #72]	; 0x48
 c001f1e:	4b0b      	ldr	r3, [pc, #44]	; (c001f4c <main+0x58>)
 c001f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001f26:	607b      	str	r3, [r7, #4]
 c001f28:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END SysInit */
 
  // Configure SAU and NVIC
  TZ_SAU_Setup();
 c001f2a:	f7ff ff65 	bl	c001df8 <TZ_SAU_Setup>
 
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c001f2e:	f7ff fead 	bl	c001c8c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 c001f32:	f003 f901 	bl	c005138 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 c001f36:	f000 fe19 	bl	c002b6c <MX_TIM3_Init>
  MX_TIM4_Init();
 c001f3a:	f000 fe65 	bl	c002c08 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  CFA_ENGINE_initialize();
 c001f3e:	f7ff fe8f 	bl	c001c60 <CFA_ENGINE_initialize>
  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/


  NonSecure_Init();
 c001f42:	f000 f805 	bl	c001f50 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c001f46:	e7fe      	b.n	c001f46 <main+0x52>
 c001f48:	e000ed00 	.word	0xe000ed00
 c001f4c:	50021000 	.word	0x50021000

0c001f50 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c001f50:	b590      	push	{r4, r7, lr}
 c001f52:	b083      	sub	sp, #12
 c001f54:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c001f56:	4b1d      	ldr	r3, [pc, #116]	; (c001fcc <NonSecure_Init+0x7c>)
 c001f58:	4a1d      	ldr	r2, [pc, #116]	; (c001fd0 <NonSecure_Init+0x80>)
 c001f5a:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c001f5c:	4b1c      	ldr	r3, [pc, #112]	; (c001fd0 <NonSecure_Init+0x80>)
 c001f5e:	681b      	ldr	r3, [r3, #0]
 c001f60:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c001f62:	683b      	ldr	r3, [r7, #0]
 c001f64:	f383 8888 	msr	MSP_NS, r3
}
 c001f68:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c001f6a:	4b1a      	ldr	r3, [pc, #104]	; (c001fd4 <NonSecure_Init+0x84>)
 c001f6c:	681b      	ldr	r3, [r3, #0]
 c001f6e:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c001f70:	687b      	ldr	r3, [r7, #4]
 c001f72:	461c      	mov	r4, r3
 c001f74:	0864      	lsrs	r4, r4, #1
 c001f76:	0064      	lsls	r4, r4, #1
 c001f78:	4620      	mov	r0, r4
 c001f7a:	4621      	mov	r1, r4
 c001f7c:	4622      	mov	r2, r4
 c001f7e:	4623      	mov	r3, r4
 c001f80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001f84:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001f88:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001f8c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001f90:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001f94:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001f98:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001f9c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001fa0:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001fa4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001fa8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001fac:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001fb0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001fb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001fb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001fbc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001fc0:	f7fe f948 	bl	c000254 <__gnu_cmse_nonsecure_call>
}
 c001fc4:	bf00      	nop
 c001fc6:	370c      	adds	r7, #12
 c001fc8:	46bd      	mov	sp, r7
 c001fca:	bd90      	pop	{r4, r7, pc}
 c001fcc:	e002ed00 	.word	0xe002ed00
 c001fd0:	08040000 	.word	0x08040000
 c001fd4:	08040004 	.word	0x08040004

0c001fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c001fd8:	b580      	push	{r7, lr}
 c001fda:	b098      	sub	sp, #96	; 0x60
 c001fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c001fde:	f107 0318 	add.w	r3, r7, #24
 c001fe2:	2248      	movs	r2, #72	; 0x48
 c001fe4:	2100      	movs	r1, #0
 c001fe6:	4618      	mov	r0, r3
 c001fe8:	f007 fbdf 	bl	c0097aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c001fec:	1d3b      	adds	r3, r7, #4
 c001fee:	2200      	movs	r2, #0
 c001ff0:	601a      	str	r2, [r3, #0]
 c001ff2:	605a      	str	r2, [r3, #4]
 c001ff4:	609a      	str	r2, [r3, #8]
 c001ff6:	60da      	str	r2, [r3, #12]
 c001ff8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c001ffa:	2000      	movs	r0, #0
 c001ffc:	f004 f9b6 	bl	c00636c <HAL_PWREx_ControlVoltageScaling>
 c002000:	4603      	mov	r3, r0
 c002002:	2b00      	cmp	r3, #0
 c002004:	d001      	beq.n	c00200a <SystemClock_Config+0x32>
  {
    Error_Handler();
 c002006:	f000 f837 	bl	c002078 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 c00200a:	2302      	movs	r3, #2
 c00200c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 c00200e:	f44f 7380 	mov.w	r3, #256	; 0x100
 c002012:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 c002014:	2340      	movs	r3, #64	; 0x40
 c002016:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c002018:	2302      	movs	r3, #2
 c00201a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 c00201c:	2302      	movs	r3, #2
 c00201e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 c002020:	2304      	movs	r3, #4
 c002022:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 c002024:	2337      	movs	r3, #55	; 0x37
 c002026:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c002028:	2307      	movs	r3, #7
 c00202a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 c00202c:	2302      	movs	r3, #2
 c00202e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c002030:	2302      	movs	r3, #2
 c002032:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c002034:	f107 0318 	add.w	r3, r7, #24
 c002038:	4618      	mov	r0, r3
 c00203a:	f004 fa37 	bl	c0064ac <HAL_RCC_OscConfig>
 c00203e:	4603      	mov	r3, r0
 c002040:	2b00      	cmp	r3, #0
 c002042:	d001      	beq.n	c002048 <SystemClock_Config+0x70>
  {
    Error_Handler();
 c002044:	f000 f818 	bl	c002078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c002048:	230f      	movs	r3, #15
 c00204a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c00204c:	2303      	movs	r3, #3
 c00204e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c002050:	2300      	movs	r3, #0
 c002052:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c002054:	2300      	movs	r3, #0
 c002056:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c002058:	2300      	movs	r3, #0
 c00205a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c00205c:	1d3b      	adds	r3, r7, #4
 c00205e:	2105      	movs	r1, #5
 c002060:	4618      	mov	r0, r3
 c002062:	f004 ff05 	bl	c006e70 <HAL_RCC_ClockConfig>
 c002066:	4603      	mov	r3, r0
 c002068:	2b00      	cmp	r3, #0
 c00206a:	d001      	beq.n	c002070 <SystemClock_Config+0x98>
  {
    Error_Handler();
 c00206c:	f000 f804 	bl	c002078 <Error_Handler>
  }
}
 c002070:	bf00      	nop
 c002072:	3760      	adds	r7, #96	; 0x60
 c002074:	46bd      	mov	sp, r7
 c002076:	bd80      	pop	{r7, pc}

0c002078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c002078:	b480      	push	{r7}
 c00207a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c00207c:	b672      	cpsid	i
}
 c00207e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c002080:	e7fe      	b.n	c002080 <Error_Handler+0x8>
	...

0c002084 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */

CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func){
 c002084:	b580      	push	{r7, lr}
 c002086:	b082      	sub	sp, #8
 c002088:	af00      	add	r7, sp, #0
 c00208a:	4603      	mov	r3, r0
 c00208c:	6039      	str	r1, [r7, #0]
 c00208e:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c002090:	683b      	ldr	r3, [r7, #0]
 c002092:	2b00      	cmp	r3, #0
 c002094:	d017      	beq.n	c0020c6 <__acle_se_SECURE_RegisterCallback+0x42>
  {
    switch(CallbackId)
 c002096:	79fb      	ldrb	r3, [r7, #7]
 c002098:	2b02      	cmp	r3, #2
 c00209a:	d00e      	beq.n	c0020ba <__acle_se_SECURE_RegisterCallback+0x36>
 c00209c:	2b02      	cmp	r3, #2
 c00209e:	dc14      	bgt.n	c0020ca <__acle_se_SECURE_RegisterCallback+0x46>
 c0020a0:	2b00      	cmp	r3, #0
 c0020a2:	d002      	beq.n	c0020aa <__acle_se_SECURE_RegisterCallback+0x26>
 c0020a4:	2b01      	cmp	r3, #1
 c0020a6:	d004      	beq.n	c0020b2 <__acle_se_SECURE_RegisterCallback+0x2e>
      case ATTESTATION_APP_ID:
			pAttestationFunctionCallback = func;
			CFA_ENGINE_register_callback();
			break;
      default:
        break;
 c0020a8:	e00f      	b.n	c0020ca <__acle_se_SECURE_RegisterCallback+0x46>
			pSecureFaultCallback = func;
 c0020aa:	4a25      	ldr	r2, [pc, #148]	; (c002140 <__acle_se_SECURE_RegisterCallback+0xbc>)
 c0020ac:	683b      	ldr	r3, [r7, #0]
 c0020ae:	6013      	str	r3, [r2, #0]
			break;
 c0020b0:	e00c      	b.n	c0020cc <__acle_se_SECURE_RegisterCallback+0x48>
			pSecureErrorCallback = func;
 c0020b2:	4a24      	ldr	r2, [pc, #144]	; (c002144 <__acle_se_SECURE_RegisterCallback+0xc0>)
 c0020b4:	683b      	ldr	r3, [r7, #0]
 c0020b6:	6013      	str	r3, [r2, #0]
			break;
 c0020b8:	e008      	b.n	c0020cc <__acle_se_SECURE_RegisterCallback+0x48>
			pAttestationFunctionCallback = func;
 c0020ba:	4a23      	ldr	r2, [pc, #140]	; (c002148 <__acle_se_SECURE_RegisterCallback+0xc4>)
 c0020bc:	683b      	ldr	r3, [r7, #0]
 c0020be:	6013      	str	r3, [r2, #0]
			CFA_ENGINE_register_callback();
 c0020c0:	f7ff f974 	bl	c0013ac <CFA_ENGINE_register_callback>
			break;
 c0020c4:	e002      	b.n	c0020cc <__acle_se_SECURE_RegisterCallback+0x48>
    }
  }
 c0020c6:	bf00      	nop
 c0020c8:	e000      	b.n	c0020cc <__acle_se_SECURE_RegisterCallback+0x48>
        break;
 c0020ca:	bf00      	nop
}
 c0020cc:	bf00      	nop
 c0020ce:	3708      	adds	r7, #8
 c0020d0:	46bd      	mov	sp, r7
 c0020d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0020d6:	4670      	mov	r0, lr
 c0020d8:	4671      	mov	r1, lr
 c0020da:	4672      	mov	r2, lr
 c0020dc:	4673      	mov	r3, lr
 c0020de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0020e2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0020e6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0020ea:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0020ee:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0020f2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0020f6:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0020fa:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0020fe:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c002102:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c002106:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00210a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00210e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c002112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002116:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00211a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00211e:	f38e 8c00 	msr	CPSR_fs, lr
 c002122:	b410      	push	{r4}
 c002124:	eef1 ca10 	vmrs	ip, fpscr
 c002128:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00212c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c002130:	ea0c 0c04 	and.w	ip, ip, r4
 c002134:	eee1 ca10 	vmsr	fpscr, ip
 c002138:	bc10      	pop	{r4}
 c00213a:	46f4      	mov	ip, lr
 c00213c:	4774      	bxns	lr
 c00213e:	bf00      	nop
 c002140:	30002330 	.word	0x30002330
 c002144:	30002334 	.word	0x30002334
 c002148:	30002338 	.word	0x30002338

0c00214c <__acle_se_SECURE_RunCallback>:

CMSE_NS_ENTRY void SECURE_RunCallback(){
 c00214c:	b580      	push	{r7, lr}
 c00214e:	af00      	add	r7, sp, #0
	CFA_ENGINE_run_attestation(0x23FA);
 c002150:	f242 30fa 	movw	r0, #9210	; 0x23fa
 c002154:	f7ff fd44 	bl	c001be0 <CFA_ENGINE_run_attestation>
	return;
 c002158:	bf00      	nop
}
 c00215a:	46bd      	mov	sp, r7
 c00215c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c002160:	4670      	mov	r0, lr
 c002162:	4671      	mov	r1, lr
 c002164:	4672      	mov	r2, lr
 c002166:	4673      	mov	r3, lr
 c002168:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00216c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c002170:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c002174:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c002178:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00217c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c002180:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c002184:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c002188:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00218c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c002190:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c002194:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c002198:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00219c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0021a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0021a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0021a8:	f38e 8c00 	msr	CPSR_fs, lr
 c0021ac:	b410      	push	{r4}
 c0021ae:	eef1 ca10 	vmrs	ip, fpscr
 c0021b2:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0021b6:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0021ba:	ea0c 0c04 	and.w	ip, ip, r4
 c0021be:	eee1 ca10 	vmsr	fpscr, ip
 c0021c2:	bc10      	pop	{r4}
 c0021c4:	46f4      	mov	ip, lr
 c0021c6:	4774      	bxns	lr

0c0021c8 <__acle_se_SECURE_Initialize_CFA_engine>:

CMSE_NS_ENTRY void SECURE_Initialize_CFA_engine(){
 c0021c8:	b580      	push	{r7, lr}
 c0021ca:	af00      	add	r7, sp, #0
	CFA_ENGINE_initialize();
 c0021cc:	f7ff fd48 	bl	c001c60 <CFA_ENGINE_initialize>
	return;
 c0021d0:	bf00      	nop
}
 c0021d2:	46bd      	mov	sp, r7
 c0021d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0021d8:	4670      	mov	r0, lr
 c0021da:	4671      	mov	r1, lr
 c0021dc:	4672      	mov	r2, lr
 c0021de:	4673      	mov	r3, lr
 c0021e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0021e4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0021e8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0021ec:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0021f0:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0021f4:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0021f8:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0021fc:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c002200:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c002204:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c002208:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00220c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c002210:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c002214:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002218:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00221c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c002220:	f38e 8c00 	msr	CPSR_fs, lr
 c002224:	b410      	push	{r4}
 c002226:	eef1 ca10 	vmrs	ip, fpscr
 c00222a:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00222e:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c002232:	ea0c 0c04 	and.w	ip, ip, r4
 c002236:	eee1 ca10 	vmsr	fpscr, ip
 c00223a:	bc10      	pop	{r4}
 c00223c:	46f4      	mov	ip, lr
 c00223e:	4774      	bxns	lr

0c002240 <__acle_se_SECURE_Initialize_Attestation>:

CMSE_NS_ENTRY void SECURE_Initialize_Attestation(){
 c002240:	b580      	push	{r7, lr}
 c002242:	af00      	add	r7, sp, #0
	CFA_ENGINE_initialize();
 c002244:	f7ff fd0c 	bl	c001c60 <CFA_ENGINE_initialize>
	return;
 c002248:	bf00      	nop
}
 c00224a:	46bd      	mov	sp, r7
 c00224c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c002250:	4670      	mov	r0, lr
 c002252:	4671      	mov	r1, lr
 c002254:	4672      	mov	r2, lr
 c002256:	4673      	mov	r3, lr
 c002258:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00225c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c002260:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c002264:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c002268:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00226c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c002270:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c002274:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c002278:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00227c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c002280:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c002284:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c002288:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00228c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002290:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c002294:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c002298:	f38e 8c00 	msr	CPSR_fs, lr
 c00229c:	b410      	push	{r4}
 c00229e:	eef1 ca10 	vmrs	ip, fpscr
 c0022a2:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0022a6:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0022aa:	ea0c 0c04 	and.w	ip, ip, r4
 c0022ae:	eee1 ca10 	vmsr	fpscr, ip
 c0022b2:	bc10      	pop	{r4}
 c0022b4:	46f4      	mov	ip, lr
 c0022b6:	4774      	bxns	lr

0c0022b8 <__acle_se_SECURE_log_ret>:

CMSE_NS_ENTRY __attribute ((naked)) void SECURE_log_ret(){
	__asm__ volatile("push	{r0, r1, r2, r3, r7, r12}");
 c0022b8:	e92d 108f 	stmdb	sp!, {r0, r1, r2, r3, r7, ip}
	__asm__ volatile("sub	sp, sp, #24");
 c0022bc:	b086      	sub	sp, #24
	__asm__ volatile("add	r7, sp, #0");
 c0022be:	af00      	add	r7, sp, #0
	__asm__ volatile("push	{r7, lr}");
 c0022c0:	b580      	push	{r7, lr}
	__asm__ volatile("sub	sp, sp, #8");
 c0022c2:	b082      	sub	sp, #8
	__asm__ volatile("add	r7, sp, #0");
 c0022c4:	af00      	add	r7, sp, #0

	uint32_t inst_addr;
	asm("mov %0, lr" : "=r"(inst_addr));
 c0022c6:	4673      	mov	r3, lr
 c0022c8:	461c      	mov	r4, r3
	CFA_ENGINE_new_log_entry(inst_addr);
 c0022ca:	4620      	mov	r0, r4
 c0022cc:	f7ff fba6 	bl	c001a1c <CFA_ENGINE_new_log_entry>

	__asm__ volatile("nop");
 c0022d0:	bf00      	nop
	__asm__ volatile("adds	r7, r7, #8");
 c0022d2:	3708      	adds	r7, #8
	__asm__ volatile("mov	sp, r7");
 c0022d4:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r7, lr}");
 c0022d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	__asm__ volatile("mov	r0, lr");
 c0022da:	4670      	mov	r0, lr
	__asm__ volatile("mov	r1, lr");
 c0022dc:	4671      	mov	r1, lr
	__asm__ volatile("mov	r2, lr");
 c0022de:	4672      	mov	r2, lr
	__asm__ volatile("mov	r3, lr");
 c0022e0:	4673      	mov	r3, lr
	__asm__ volatile("vmov.f32	s0, #1.0e+0");
 c0022e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s1, #1.0e+0");
 c0022e6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s2, #1.0e+0");
 c0022ea:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s3, #1.0e+0");
 c0022ee:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s4, #1.0e+0");
 c0022f2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s5, #1.0e+0");
 c0022f6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s6, #1.0e+0");
 c0022fa:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s7, #1.0e+0");
 c0022fe:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s8, #1.0e+0");
 c002302:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s9, #1.0e+0");
 c002306:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s10, #1.0e+0");
 c00230a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s11, #1.0e+0");
 c00230e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s12, #1.0e+0");
 c002312:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s13, #1.0e+0");
 c002316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s14, #1.0e+0");
 c00231a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s15, #1.0e+0");
 c00231e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	__asm__ volatile("msr	APSR_nzcvqg, lr");
 c002322:	f38e 8c00 	msr	CPSR_fs, lr
	__asm__ volatile("push	{r4}");
 c002326:	b410      	push	{r4}
	__asm__ volatile("vmrs	ip, fpscr");
 c002328:	eef1 ca10 	vmrs	ip, fpscr
	__asm__ volatile("movw	r4, #65376");
 c00232c:	f64f 7460 	movw	r4, #65376	; 0xff60
	__asm__ volatile("movt	r4, #4095");
 c002330:	f6c0 74ff 	movt	r4, #4095	; 0xfff
	__asm__ volatile("and	ip, r4");
 c002334:	ea0c 0c04 	and.w	ip, ip, r4
	__asm__ volatile("vmsr	fpscr, ip");
 c002338:	eee1 ca10 	vmsr	fpscr, ip
	__asm__ volatile("pop	{r4}");
 c00233c:	bc10      	pop	{r4}
	__asm__ volatile("mov	ip, lr");
 c00233e:	46f4      	mov	ip, lr
	__asm__ volatile("adds	r7, r7, #24");
 c002340:	3718      	adds	r7, #24
	__asm__ volatile("mov	sp, r7");
 c002342:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r0, r1, r2, r3, r7, r12}");
 c002344:	e8bd 108f 	ldmia.w	sp!, {r0, r1, r2, r3, r7, ip}
	__asm__ volatile("bics	lr, #1");
 c002348:	f03e 0e01 	bics.w	lr, lr, #1
	__asm__ volatile("bxns	lr");
 c00234c:	4774      	bxns	lr
}
 c00234e:	bf00      	nop

0c002350 <__acle_se_SECURE_log_call>:

CMSE_NS_ENTRY __attribute ((naked)) void SECURE_log_call(uint32_t addr){
	__asm__ volatile("push	{r0, r1, r2, r3, r7, r10}");
 c002350:	e92d 048f 	stmdb	sp!, {r0, r1, r2, r3, r7, sl}
	__asm__ volatile("sub	sp, sp, #24");
 c002354:	b086      	sub	sp, #24
	__asm__ volatile("add	r7, sp, #0");
 c002356:	af00      	add	r7, sp, #0
	__asm__ volatile("push	{r7, lr}");
 c002358:	b580      	push	{r7, lr}
	__asm__ volatile("sub	sp, sp, #8");
 c00235a:	b082      	sub	sp, #8
	__asm__ volatile("add	r7, sp, #0");
 c00235c:	af00      	add	r7, sp, #0
	__asm__ volatile("sub	r0, r10, #1");
 c00235e:	f1aa 0001 	sub.w	r0, sl, #1
	__asm__ volatile("bl	CFA_ENGINE_new_log_entry");
 c002362:	f7ff fb5b 	bl	c001a1c <CFA_ENGINE_new_log_entry>
	__asm__ volatile("nop");
 c002366:	bf00      	nop
	__asm__ volatile("adds	r7, r7, #8");
 c002368:	3708      	adds	r7, #8
	__asm__ volatile("mov	sp, r7");
 c00236a:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r7, lr}");
 c00236c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	__asm__ volatile("mov	r0, lr");
 c002370:	4670      	mov	r0, lr
	__asm__ volatile("mov	r1, lr");
 c002372:	4671      	mov	r1, lr
	__asm__ volatile("mov	r2, lr");
 c002374:	4672      	mov	r2, lr
	__asm__ volatile("mov	r3, lr");
 c002376:	4673      	mov	r3, lr
	__asm__ volatile("vmov.f32	s0, #1.0e+0");
 c002378:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s1, #1.0e+0");
 c00237c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s2, #1.0e+0");
 c002380:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s3, #1.0e+0");
 c002384:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s4, #1.0e+0");
 c002388:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s5, #1.0e+0");
 c00238c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s6, #1.0e+0");
 c002390:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s7, #1.0e+0");
 c002394:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s8, #1.0e+0");
 c002398:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s9, #1.0e+0");
 c00239c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s10, #1.0e+0");
 c0023a0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s11, #1.0e+0");
 c0023a4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s12, #1.0e+0");
 c0023a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s13, #1.0e+0");
 c0023ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s14, #1.0e+0");
 c0023b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s15, #1.0e+0");
 c0023b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	__asm__ volatile("msr	APSR_nzcvqg, lr");
 c0023b8:	f38e 8c00 	msr	CPSR_fs, lr
	__asm__ volatile("vmrs	ip, fpscr");
 c0023bc:	eef1 ca10 	vmrs	ip, fpscr
	__asm__ volatile("movw	r4, #65376");
 c0023c0:	f64f 7460 	movw	r4, #65376	; 0xff60
	__asm__ volatile("movt	r4, #4095");
 c0023c4:	f6c0 74ff 	movt	r4, #4095	; 0xfff
	__asm__ volatile("and	ip, r4");
 c0023c8:	ea0c 0c04 	and.w	ip, ip, r4
	__asm__ volatile("vmsr	fpscr, ip");
 c0023cc:	eee1 ca10 	vmsr	fpscr, ip
	__asm__ volatile("mov	ip, lr");
 c0023d0:	46f4      	mov	ip, lr
	__asm__ volatile("adds	r7, r7, #24");
 c0023d2:	3718      	adds	r7, #24
	__asm__ volatile("mov	sp, r7");
 c0023d4:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r0, r1, r2, r3, r7, r10}");
 c0023d6:	e8bd 048f 	ldmia.w	sp!, {r0, r1, r2, r3, r7, sl}
	__asm__ volatile("bics	r10, #1");
 c0023da:	f03a 0a01 	bics.w	sl, sl, #1
	__asm__ volatile("bxns	r10");
 c0023de:	4754      	bxns	sl
}
 c0023e0:	bf00      	nop

0c0023e2 <__acle_se_SECURE_log_cond_br>:


CMSE_NS_ENTRY __attribute ((naked)) void SECURE_log_cond_br(){;
	__asm__ volatile("push	{r0, r1, r2, r3, r7, r12}");
 c0023e2:	e92d 108f 	stmdb	sp!, {r0, r1, r2, r3, r7, ip}
	__asm__ volatile("sub	sp, sp, #24");
 c0023e6:	b086      	sub	sp, #24
	__asm__ volatile("add	r7, sp, #0");
 c0023e8:	af00      	add	r7, sp, #0
	__asm__ volatile("push	{r7, lr}");
 c0023ea:	b580      	push	{r7, lr}
	__asm__ volatile("sub	sp, sp, #8");
 c0023ec:	b082      	sub	sp, #8
	__asm__ volatile("add	r7, sp, #0");
 c0023ee:	af00      	add	r7, sp, #0

	uint32_t inst_addr;
	asm("mov %0, lr" : "=r"(inst_addr));
 c0023f0:	4673      	mov	r3, lr
 c0023f2:	461c      	mov	r4, r3
	inst_addr -= 4;
 c0023f4:	3c04      	subs	r4, #4
	CFA_ENGINE_new_log_entry(inst_addr);
 c0023f6:	4620      	mov	r0, r4
 c0023f8:	f7ff fb10 	bl	c001a1c <CFA_ENGINE_new_log_entry>

	__asm__ volatile("nop");
 c0023fc:	bf00      	nop
	__asm__ volatile("adds	r7, r7, #8");
 c0023fe:	3708      	adds	r7, #8
	__asm__ volatile("mov	sp, r7");
 c002400:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r7, lr}");
 c002402:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	__asm__ volatile("mov	r0, lr");
 c002406:	4670      	mov	r0, lr
	__asm__ volatile("mov	r1, lr");
 c002408:	4671      	mov	r1, lr
	__asm__ volatile("mov	r2, lr");
 c00240a:	4672      	mov	r2, lr
	__asm__ volatile("mov	r3, lr");
 c00240c:	4673      	mov	r3, lr
	__asm__ volatile("vmov.f32	s0, #1.0e+0");
 c00240e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s1, #1.0e+0");
 c002412:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s2, #1.0e+0");
 c002416:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s3, #1.0e+0");
 c00241a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s4, #1.0e+0");
 c00241e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s5, #1.0e+0");
 c002422:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s6, #1.0e+0");
 c002426:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s7, #1.0e+0");
 c00242a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s8, #1.0e+0");
 c00242e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s9, #1.0e+0");
 c002432:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s10, #1.0e+0");
 c002436:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s11, #1.0e+0");
 c00243a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s12, #1.0e+0");
 c00243e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s13, #1.0e+0");
 c002442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s14, #1.0e+0");
 c002446:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s15, #1.0e+0");
 c00244a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	__asm__ volatile("msr	APSR_nzcvqg, lr");
 c00244e:	f38e 8c00 	msr	CPSR_fs, lr
	__asm__ volatile("push	{r4}");
 c002452:	b410      	push	{r4}
	__asm__ volatile("vmrs	ip, fpscr");
 c002454:	eef1 ca10 	vmrs	ip, fpscr
	__asm__ volatile("movw	r4, #65376");
 c002458:	f64f 7460 	movw	r4, #65376	; 0xff60
	__asm__ volatile("movt	r4, #4095");
 c00245c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
	__asm__ volatile("and	ip, r4");
 c002460:	ea0c 0c04 	and.w	ip, ip, r4
	__asm__ volatile("vmsr	fpscr, ip");
 c002464:	eee1 ca10 	vmsr	fpscr, ip
	__asm__ volatile("pop	{r4}");
 c002468:	bc10      	pop	{r4}
	__asm__ volatile("mov	ip, lr");
 c00246a:	46f4      	mov	ip, lr
	__asm__ volatile("adds	r7, r7, #24");
 c00246c:	3718      	adds	r7, #24
	__asm__ volatile("mov	sp, r7");
 c00246e:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r0, r1, r2, r3, r7, r12}");
 c002470:	e8bd 108f 	ldmia.w	sp!, {r0, r1, r2, r3, r7, ip}
	__asm__ volatile("bics	lr, #1");
 c002474:	f03e 0e01 	bics.w	lr, lr, #1
	__asm__ volatile("bxns	lr");
 c002478:	4774      	bxns	lr
}
 c00247a:	bf00      	nop

0c00247c <__acle_se_SECURE_run_attestation_wait_mode>:

CMSE_NS_ENTRY void  SECURE_run_attestation_wait_mode(){
 c00247c:	b580      	push	{r7, lr}
 c00247e:	af00      	add	r7, sp, #0
	CFA_ENGINE_start();
 c002480:	f7fe ff88 	bl	c001394 <CFA_ENGINE_start>
	return;
 c002484:	bf00      	nop
};
 c002486:	46bd      	mov	sp, r7
 c002488:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00248c:	4670      	mov	r0, lr
 c00248e:	4671      	mov	r1, lr
 c002490:	4672      	mov	r2, lr
 c002492:	4673      	mov	r3, lr
 c002494:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c002498:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00249c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0024a0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0024a4:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0024a8:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0024ac:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0024b0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0024b4:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0024b8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0024bc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0024c0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0024c4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0024c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0024cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0024d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0024d4:	f38e 8c00 	msr	CPSR_fs, lr
 c0024d8:	b410      	push	{r4}
 c0024da:	eef1 ca10 	vmrs	ip, fpscr
 c0024de:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0024e2:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0024e6:	ea0c 0c04 	and.w	ip, ip, r4
 c0024ea:	eee1 ca10 	vmsr	fpscr, ip
 c0024ee:	bc10      	pop	{r4}
 c0024f0:	46f4      	mov	ip, lr
 c0024f2:	4774      	bxns	lr

0c0024f4 <__acle_se_SECURE_record_output_data>:

CMSE_NS_ENTRY void SECURE_record_output_data(uint32_t value){
 c0024f4:	b580      	push	{r7, lr}
 c0024f6:	b082      	sub	sp, #8
 c0024f8:	af00      	add	r7, sp, #0
 c0024fa:	6078      	str	r0, [r7, #4]
	record_output_data(value);
 c0024fc:	6878      	ldr	r0, [r7, #4]
 c0024fe:	f7fe ff17 	bl	c001330 <record_output_data>
	return;
 c002502:	bf00      	nop
};
 c002504:	3708      	adds	r7, #8
 c002506:	46bd      	mov	sp, r7
 c002508:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00250c:	4670      	mov	r0, lr
 c00250e:	4671      	mov	r1, lr
 c002510:	4672      	mov	r2, lr
 c002512:	4673      	mov	r3, lr
 c002514:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c002518:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00251c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c002520:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c002524:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c002528:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00252c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c002530:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c002534:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c002538:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00253c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c002540:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c002544:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c002548:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00254c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c002550:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c002554:	f38e 8c00 	msr	CPSR_fs, lr
 c002558:	b410      	push	{r4}
 c00255a:	eef1 ca10 	vmrs	ip, fpscr
 c00255e:	f64f 7460 	movw	r4, #65376	; 0xff60
 c002562:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c002566:	ea0c 0c04 	and.w	ip, ip, r4
 c00256a:	eee1 ca10 	vmsr	fpscr, ip
 c00256e:	bc10      	pop	{r4}
 c002570:	46f4      	mov	ip, lr
 c002572:	4774      	bxns	lr

0c002574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c002574:	b580      	push	{r7, lr}
 c002576:	b084      	sub	sp, #16
 c002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c00257a:	4b31      	ldr	r3, [pc, #196]	; (c002640 <HAL_MspInit+0xcc>)
 c00257c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00257e:	4a30      	ldr	r2, [pc, #192]	; (c002640 <HAL_MspInit+0xcc>)
 c002580:	f043 0301 	orr.w	r3, r3, #1
 c002584:	6613      	str	r3, [r2, #96]	; 0x60
 c002586:	4b2e      	ldr	r3, [pc, #184]	; (c002640 <HAL_MspInit+0xcc>)
 c002588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00258a:	f003 0301 	and.w	r3, r3, #1
 c00258e:	60fb      	str	r3, [r7, #12]
 c002590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c002592:	4b2b      	ldr	r3, [pc, #172]	; (c002640 <HAL_MspInit+0xcc>)
 c002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002596:	4a2a      	ldr	r2, [pc, #168]	; (c002640 <HAL_MspInit+0xcc>)
 c002598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c00259c:	6593      	str	r3, [r2, #88]	; 0x58
 c00259e:	4b28      	ldr	r3, [pc, #160]	; (c002640 <HAL_MspInit+0xcc>)
 c0025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0025a6:	60bb      	str	r3, [r7, #8]
 c0025a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c0025aa:	4b25      	ldr	r3, [pc, #148]	; (c002640 <HAL_MspInit+0xcc>)
 c0025ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0025ae:	4a24      	ldr	r2, [pc, #144]	; (c002640 <HAL_MspInit+0xcc>)
 c0025b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c0025b4:	6493      	str	r3, [r2, #72]	; 0x48
 c0025b6:	4b22      	ldr	r3, [pc, #136]	; (c002640 <HAL_MspInit+0xcc>)
 c0025b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0025ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c0025be:	607b      	str	r3, [r7, #4]
 c0025c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c0025c2:	2200      	movs	r2, #0
 c0025c4:	2100      	movs	r1, #0
 c0025c6:	2008      	movs	r0, #8
 c0025c8:	f003 f825 	bl	c005616 <HAL_NVIC_SetPriority>
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(GTZC_IRQn);
 c0025cc:	2008      	movs	r0, #8
 c0025ce:	f003 f83c 	bl	c00564a <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 c0025d2:	f003 ff37 	bl	c006444 <HAL_PWREx_DisableUCPDDeadBattery>

  /** PWR Non-Privilege/Non-Secure Items Configurations
  */
  HAL_PWR_ConfigAttributes(PWR_WKUP1, PWR_NSEC |PWR_NPRIV);
 c0025d6:	f44f 7140 	mov.w	r1, #768	; 0x300
 c0025da:	2001      	movs	r0, #1
 c0025dc:	f003 fe72 	bl	c0062c4 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP2, PWR_NSEC |PWR_NPRIV);
 c0025e0:	f44f 7140 	mov.w	r1, #768	; 0x300
 c0025e4:	2002      	movs	r0, #2
 c0025e6:	f003 fe6d 	bl	c0062c4 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP3, PWR_NSEC |PWR_NPRIV);
 c0025ea:	f44f 7140 	mov.w	r1, #768	; 0x300
 c0025ee:	2004      	movs	r0, #4
 c0025f0:	f003 fe68 	bl	c0062c4 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP4, PWR_NSEC |PWR_NPRIV);
 c0025f4:	f44f 7140 	mov.w	r1, #768	; 0x300
 c0025f8:	2008      	movs	r0, #8
 c0025fa:	f003 fe63 	bl	c0062c4 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP5, PWR_NSEC |PWR_NPRIV);
 c0025fe:	f44f 7140 	mov.w	r1, #768	; 0x300
 c002602:	2010      	movs	r0, #16
 c002604:	f003 fe5e 	bl	c0062c4 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_VDM, PWR_NSEC |PWR_NPRIV);
 c002608:	f44f 7140 	mov.w	r1, #768	; 0x300
 c00260c:	f44f 7000 	mov.w	r0, #512	; 0x200
 c002610:	f003 fe58 	bl	c0062c4 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_APC, PWR_NSEC |PWR_NPRIV);
 c002614:	f44f 7140 	mov.w	r1, #768	; 0x300
 c002618:	f44f 6000 	mov.w	r0, #2048	; 0x800
 c00261c:	f003 fe52 	bl	c0062c4 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_LPM, PWR_NSEC |PWR_NPRIV);
 c002620:	f44f 7140 	mov.w	r1, #768	; 0x300
 c002624:	f44f 7080 	mov.w	r0, #256	; 0x100
 c002628:	f003 fe4c 	bl	c0062c4 <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_VB, PWR_NSEC |PWR_NPRIV);
 c00262c:	f44f 7140 	mov.w	r1, #768	; 0x300
 c002630:	f44f 6080 	mov.w	r0, #1024	; 0x400
 c002634:	f003 fe46 	bl	c0062c4 <HAL_PWR_ConfigAttributes>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c002638:	bf00      	nop
 c00263a:	3710      	adds	r7, #16
 c00263c:	46bd      	mov	sp, r7
 c00263e:	bd80      	pop	{r7, pc}
 c002640:	50021000 	.word	0x50021000

0c002644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c002644:	b480      	push	{r7}
 c002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c002648:	e7fe      	b.n	c002648 <NMI_Handler+0x4>

0c00264a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c00264a:	b480      	push	{r7}
 c00264c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c00264e:	e7fe      	b.n	c00264e <HardFault_Handler+0x4>

0c002650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c002650:	b480      	push	{r7}
 c002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c002654:	e7fe      	b.n	c002654 <MemManage_Handler+0x4>

0c002656 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c002656:	b480      	push	{r7}
 c002658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c00265a:	e7fe      	b.n	c00265a <BusFault_Handler+0x4>

0c00265c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c00265c:	b480      	push	{r7}
 c00265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c002660:	e7fe      	b.n	c002660 <UsageFault_Handler+0x4>

0c002662 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c002662:	b480      	push	{r7}
 c002664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c002666:	e7fe      	b.n	c002666 <SecureFault_Handler+0x4>

0c002668 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c002668:	b480      	push	{r7}
 c00266a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c00266c:	bf00      	nop
 c00266e:	46bd      	mov	sp, r7
 c002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002674:	4770      	bx	lr

0c002676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c002676:	b480      	push	{r7}
 c002678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c00267a:	bf00      	nop
 c00267c:	46bd      	mov	sp, r7
 c00267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002682:	4770      	bx	lr

0c002684 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c002684:	b480      	push	{r7}
 c002686:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c002688:	bf00      	nop
 c00268a:	46bd      	mov	sp, r7
 c00268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002690:	4770      	bx	lr

0c002692 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c002692:	b580      	push	{r7, lr}
 c002694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c002696:	f002 fea3 	bl	c0053e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c00269a:	bf00      	nop
 c00269c:	bd80      	pop	{r7, pc}

0c00269e <GTZC_IRQHandler>:

/**
  * @brief This function handles Global TrustZone controller global interrupt.
  */
void GTZC_IRQHandler(void)
{
 c00269e:	b580      	push	{r7, lr}
 c0026a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GTZC_IRQn 0 */

  /* USER CODE END GTZC_IRQn 0 */
  HAL_GTZC_IRQHandler();
 c0026a2:	f003 fd81 	bl	c0061a8 <HAL_GTZC_IRQHandler>
  /* USER CODE BEGIN GTZC_IRQn 1 */

  /* USER CODE END GTZC_IRQn 1 */
}
 c0026a6:	bf00      	nop
 c0026a8:	bd80      	pop	{r7, pc}
	...

0c0026ac <TIM3_IRQHandler>:
  * @brief This function handles TIM3 global interrupt.
  */

#include "cfa_engine.h"
void TIM3_IRQHandler(void)
{
 c0026ac:	b580      	push	{r7, lr}
 c0026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	CFA_time_interrupt_handler();
 c0026b0:	f7ff f802 	bl	c0016b8 <CFA_time_interrupt_handler>

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 c0026b4:	4802      	ldr	r0, [pc, #8]	; (c0026c0 <TIM3_IRQHandler+0x14>)
 c0026b6:	f005 fd25 	bl	c008104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 c0026ba:	bf00      	nop
 c0026bc:	bd80      	pop	{r7, pc}
 c0026be:	bf00      	nop
 c0026c0:	30002340 	.word	0x30002340

0c0026c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 c0026c4:	b580      	push	{r7, lr}
 c0026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 c0026c8:	4802      	ldr	r0, [pc, #8]	; (c0026d4 <TIM4_IRQHandler+0x10>)
 c0026ca:	f005 fd1b 	bl	c008104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 c0026ce:	bf00      	nop
 c0026d0:	bd80      	pop	{r7, pc}
 c0026d2:	bf00      	nop
 c0026d4:	3000238c 	.word	0x3000238c

0c0026d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 c0026d8:	b480      	push	{r7}
 c0026da:	af00      	add	r7, sp, #0
	return 1;
 c0026dc:	2301      	movs	r3, #1
}
 c0026de:	4618      	mov	r0, r3
 c0026e0:	46bd      	mov	sp, r7
 c0026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0026e6:	4770      	bx	lr

0c0026e8 <_kill>:

int _kill(int pid, int sig)
{
 c0026e8:	b580      	push	{r7, lr}
 c0026ea:	b082      	sub	sp, #8
 c0026ec:	af00      	add	r7, sp, #0
 c0026ee:	6078      	str	r0, [r7, #4]
 c0026f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 c0026f2:	f007 f823 	bl	c00973c <__errno>
 c0026f6:	4603      	mov	r3, r0
 c0026f8:	2216      	movs	r2, #22
 c0026fa:	601a      	str	r2, [r3, #0]
	return -1;
 c0026fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 c002700:	4618      	mov	r0, r3
 c002702:	3708      	adds	r7, #8
 c002704:	46bd      	mov	sp, r7
 c002706:	bd80      	pop	{r7, pc}

0c002708 <_exit>:

void _exit (int status)
{
 c002708:	b580      	push	{r7, lr}
 c00270a:	b082      	sub	sp, #8
 c00270c:	af00      	add	r7, sp, #0
 c00270e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 c002710:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 c002714:	6878      	ldr	r0, [r7, #4]
 c002716:	f7ff ffe7 	bl	c0026e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 c00271a:	e7fe      	b.n	c00271a <_exit+0x12>

0c00271c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 c00271c:	b580      	push	{r7, lr}
 c00271e:	b086      	sub	sp, #24
 c002720:	af00      	add	r7, sp, #0
 c002722:	60f8      	str	r0, [r7, #12]
 c002724:	60b9      	str	r1, [r7, #8]
 c002726:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 c002728:	2300      	movs	r3, #0
 c00272a:	617b      	str	r3, [r7, #20]
 c00272c:	e00a      	b.n	c002744 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 c00272e:	e000      	b.n	c002732 <_read+0x16>
 c002730:	bf00      	nop
 c002732:	4601      	mov	r1, r0
 c002734:	68bb      	ldr	r3, [r7, #8]
 c002736:	1c5a      	adds	r2, r3, #1
 c002738:	60ba      	str	r2, [r7, #8]
 c00273a:	b2ca      	uxtb	r2, r1
 c00273c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 c00273e:	697b      	ldr	r3, [r7, #20]
 c002740:	3301      	adds	r3, #1
 c002742:	617b      	str	r3, [r7, #20]
 c002744:	697a      	ldr	r2, [r7, #20]
 c002746:	687b      	ldr	r3, [r7, #4]
 c002748:	429a      	cmp	r2, r3
 c00274a:	dbf0      	blt.n	c00272e <_read+0x12>
	}

return len;
 c00274c:	687b      	ldr	r3, [r7, #4]
}
 c00274e:	4618      	mov	r0, r3
 c002750:	3718      	adds	r7, #24
 c002752:	46bd      	mov	sp, r7
 c002754:	bd80      	pop	{r7, pc}

0c002756 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 c002756:	b580      	push	{r7, lr}
 c002758:	b086      	sub	sp, #24
 c00275a:	af00      	add	r7, sp, #0
 c00275c:	60f8      	str	r0, [r7, #12]
 c00275e:	60b9      	str	r1, [r7, #8]
 c002760:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 c002762:	2300      	movs	r3, #0
 c002764:	617b      	str	r3, [r7, #20]
 c002766:	e009      	b.n	c00277c <_write+0x26>
	{
		__io_putchar(*ptr++);
 c002768:	68bb      	ldr	r3, [r7, #8]
 c00276a:	1c5a      	adds	r2, r3, #1
 c00276c:	60ba      	str	r2, [r7, #8]
 c00276e:	781b      	ldrb	r3, [r3, #0]
 c002770:	4618      	mov	r0, r3
 c002772:	e000      	b.n	c002776 <_write+0x20>
 c002774:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 c002776:	697b      	ldr	r3, [r7, #20]
 c002778:	3301      	adds	r3, #1
 c00277a:	617b      	str	r3, [r7, #20]
 c00277c:	697a      	ldr	r2, [r7, #20]
 c00277e:	687b      	ldr	r3, [r7, #4]
 c002780:	429a      	cmp	r2, r3
 c002782:	dbf1      	blt.n	c002768 <_write+0x12>
	}
	return len;
 c002784:	687b      	ldr	r3, [r7, #4]
}
 c002786:	4618      	mov	r0, r3
 c002788:	3718      	adds	r7, #24
 c00278a:	46bd      	mov	sp, r7
 c00278c:	bd80      	pop	{r7, pc}

0c00278e <_close>:

int _close(int file)
{
 c00278e:	b480      	push	{r7}
 c002790:	b083      	sub	sp, #12
 c002792:	af00      	add	r7, sp, #0
 c002794:	6078      	str	r0, [r7, #4]
	return -1;
 c002796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 c00279a:	4618      	mov	r0, r3
 c00279c:	370c      	adds	r7, #12
 c00279e:	46bd      	mov	sp, r7
 c0027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0027a4:	4770      	bx	lr

0c0027a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 c0027a6:	b480      	push	{r7}
 c0027a8:	b083      	sub	sp, #12
 c0027aa:	af00      	add	r7, sp, #0
 c0027ac:	6078      	str	r0, [r7, #4]
 c0027ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 c0027b0:	683b      	ldr	r3, [r7, #0]
 c0027b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 c0027b6:	605a      	str	r2, [r3, #4]
	return 0;
 c0027b8:	2300      	movs	r3, #0
}
 c0027ba:	4618      	mov	r0, r3
 c0027bc:	370c      	adds	r7, #12
 c0027be:	46bd      	mov	sp, r7
 c0027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0027c4:	4770      	bx	lr

0c0027c6 <_isatty>:

int _isatty(int file)
{
 c0027c6:	b480      	push	{r7}
 c0027c8:	b083      	sub	sp, #12
 c0027ca:	af00      	add	r7, sp, #0
 c0027cc:	6078      	str	r0, [r7, #4]
	return 1;
 c0027ce:	2301      	movs	r3, #1
}
 c0027d0:	4618      	mov	r0, r3
 c0027d2:	370c      	adds	r7, #12
 c0027d4:	46bd      	mov	sp, r7
 c0027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0027da:	4770      	bx	lr

0c0027dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 c0027dc:	b480      	push	{r7}
 c0027de:	b085      	sub	sp, #20
 c0027e0:	af00      	add	r7, sp, #0
 c0027e2:	60f8      	str	r0, [r7, #12]
 c0027e4:	60b9      	str	r1, [r7, #8]
 c0027e6:	607a      	str	r2, [r7, #4]
	return 0;
 c0027e8:	2300      	movs	r3, #0
}
 c0027ea:	4618      	mov	r0, r3
 c0027ec:	3714      	adds	r7, #20
 c0027ee:	46bd      	mov	sp, r7
 c0027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0027f4:	4770      	bx	lr
	...

0c0027f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 c0027f8:	b580      	push	{r7, lr}
 c0027fa:	b086      	sub	sp, #24
 c0027fc:	af00      	add	r7, sp, #0
 c0027fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 c002800:	4a14      	ldr	r2, [pc, #80]	; (c002854 <_sbrk+0x5c>)
 c002802:	4b15      	ldr	r3, [pc, #84]	; (c002858 <_sbrk+0x60>)
 c002804:	1ad3      	subs	r3, r2, r3
 c002806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 c002808:	697b      	ldr	r3, [r7, #20]
 c00280a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 c00280c:	4b13      	ldr	r3, [pc, #76]	; (c00285c <_sbrk+0x64>)
 c00280e:	681b      	ldr	r3, [r3, #0]
 c002810:	2b00      	cmp	r3, #0
 c002812:	d102      	bne.n	c00281a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 c002814:	4b11      	ldr	r3, [pc, #68]	; (c00285c <_sbrk+0x64>)
 c002816:	4a12      	ldr	r2, [pc, #72]	; (c002860 <_sbrk+0x68>)
 c002818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 c00281a:	4b10      	ldr	r3, [pc, #64]	; (c00285c <_sbrk+0x64>)
 c00281c:	681a      	ldr	r2, [r3, #0]
 c00281e:	687b      	ldr	r3, [r7, #4]
 c002820:	4413      	add	r3, r2
 c002822:	693a      	ldr	r2, [r7, #16]
 c002824:	429a      	cmp	r2, r3
 c002826:	d207      	bcs.n	c002838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 c002828:	f006 ff88 	bl	c00973c <__errno>
 c00282c:	4603      	mov	r3, r0
 c00282e:	220c      	movs	r2, #12
 c002830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 c002832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002836:	e009      	b.n	c00284c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 c002838:	4b08      	ldr	r3, [pc, #32]	; (c00285c <_sbrk+0x64>)
 c00283a:	681b      	ldr	r3, [r3, #0]
 c00283c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 c00283e:	4b07      	ldr	r3, [pc, #28]	; (c00285c <_sbrk+0x64>)
 c002840:	681a      	ldr	r2, [r3, #0]
 c002842:	687b      	ldr	r3, [r7, #4]
 c002844:	4413      	add	r3, r2
 c002846:	4a05      	ldr	r2, [pc, #20]	; (c00285c <_sbrk+0x64>)
 c002848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 c00284a:	68fb      	ldr	r3, [r7, #12]
}
 c00284c:	4618      	mov	r0, r3
 c00284e:	3718      	adds	r7, #24
 c002850:	46bd      	mov	sp, r7
 c002852:	bd80      	pop	{r7, pc}
 c002854:	30018000 	.word	0x30018000
 c002858:	00000400 	.word	0x00000400
 c00285c:	3000233c 	.word	0x3000233c
 c002860:	30002480 	.word	0x30002480

0c002864 <TZ_SAU_Setup>:
{
 c002864:	b480      	push	{r7}
 c002866:	af00      	add	r7, sp, #0
    SAU_INIT_REGION(0);
 c002868:	4b2f      	ldr	r3, [pc, #188]	; (c002928 <TZ_SAU_Setup+0xc4>)
 c00286a:	2200      	movs	r2, #0
 c00286c:	609a      	str	r2, [r3, #8]
 c00286e:	4b2e      	ldr	r3, [pc, #184]	; (c002928 <TZ_SAU_Setup+0xc4>)
 c002870:	4a2e      	ldr	r2, [pc, #184]	; (c00292c <TZ_SAU_Setup+0xc8>)
 c002872:	60da      	str	r2, [r3, #12]
 c002874:	4b2c      	ldr	r3, [pc, #176]	; (c002928 <TZ_SAU_Setup+0xc4>)
 c002876:	4a2e      	ldr	r2, [pc, #184]	; (c002930 <TZ_SAU_Setup+0xcc>)
 c002878:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(1);
 c00287a:	4b2b      	ldr	r3, [pc, #172]	; (c002928 <TZ_SAU_Setup+0xc4>)
 c00287c:	2201      	movs	r2, #1
 c00287e:	609a      	str	r2, [r3, #8]
 c002880:	4b29      	ldr	r3, [pc, #164]	; (c002928 <TZ_SAU_Setup+0xc4>)
 c002882:	4a2c      	ldr	r2, [pc, #176]	; (c002934 <TZ_SAU_Setup+0xd0>)
 c002884:	60da      	str	r2, [r3, #12]
 c002886:	4b28      	ldr	r3, [pc, #160]	; (c002928 <TZ_SAU_Setup+0xc4>)
 c002888:	4a2b      	ldr	r2, [pc, #172]	; (c002938 <TZ_SAU_Setup+0xd4>)
 c00288a:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(2);
 c00288c:	4b26      	ldr	r3, [pc, #152]	; (c002928 <TZ_SAU_Setup+0xc4>)
 c00288e:	2202      	movs	r2, #2
 c002890:	609a      	str	r2, [r3, #8]
 c002892:	4b25      	ldr	r3, [pc, #148]	; (c002928 <TZ_SAU_Setup+0xc4>)
 c002894:	4a29      	ldr	r2, [pc, #164]	; (c00293c <TZ_SAU_Setup+0xd8>)
 c002896:	60da      	str	r2, [r3, #12]
 c002898:	4b23      	ldr	r3, [pc, #140]	; (c002928 <TZ_SAU_Setup+0xc4>)
 c00289a:	4a29      	ldr	r2, [pc, #164]	; (c002940 <TZ_SAU_Setup+0xdc>)
 c00289c:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(3);
 c00289e:	4b22      	ldr	r3, [pc, #136]	; (c002928 <TZ_SAU_Setup+0xc4>)
 c0028a0:	2203      	movs	r2, #3
 c0028a2:	609a      	str	r2, [r3, #8]
 c0028a4:	4b20      	ldr	r3, [pc, #128]	; (c002928 <TZ_SAU_Setup+0xc4>)
 c0028a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c0028aa:	60da      	str	r2, [r3, #12]
 c0028ac:	4b1e      	ldr	r3, [pc, #120]	; (c002928 <TZ_SAU_Setup+0xc4>)
 c0028ae:	4a25      	ldr	r2, [pc, #148]	; (c002944 <TZ_SAU_Setup+0xe0>)
 c0028b0:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(4);
 c0028b2:	4b1d      	ldr	r3, [pc, #116]	; (c002928 <TZ_SAU_Setup+0xc4>)
 c0028b4:	2204      	movs	r2, #4
 c0028b6:	609a      	str	r2, [r3, #8]
 c0028b8:	4b1b      	ldr	r3, [pc, #108]	; (c002928 <TZ_SAU_Setup+0xc4>)
 c0028ba:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c0028be:	60da      	str	r2, [r3, #12]
 c0028c0:	4b19      	ldr	r3, [pc, #100]	; (c002928 <TZ_SAU_Setup+0xc4>)
 c0028c2:	4a21      	ldr	r2, [pc, #132]	; (c002948 <TZ_SAU_Setup+0xe4>)
 c0028c4:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(5);
 c0028c6:	4b18      	ldr	r3, [pc, #96]	; (c002928 <TZ_SAU_Setup+0xc4>)
 c0028c8:	2205      	movs	r2, #5
 c0028ca:	609a      	str	r2, [r3, #8]
 c0028cc:	4b16      	ldr	r3, [pc, #88]	; (c002928 <TZ_SAU_Setup+0xc4>)
 c0028ce:	4a1f      	ldr	r2, [pc, #124]	; (c00294c <TZ_SAU_Setup+0xe8>)
 c0028d0:	60da      	str	r2, [r3, #12]
 c0028d2:	4b15      	ldr	r3, [pc, #84]	; (c002928 <TZ_SAU_Setup+0xc4>)
 c0028d4:	4a1e      	ldr	r2, [pc, #120]	; (c002950 <TZ_SAU_Setup+0xec>)
 c0028d6:	611a      	str	r2, [r3, #16]
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c0028d8:	4b13      	ldr	r3, [pc, #76]	; (c002928 <TZ_SAU_Setup+0xc4>)
 c0028da:	2201      	movs	r2, #1
 c0028dc:	601a      	str	r2, [r3, #0]
    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c0028de:	4b1d      	ldr	r3, [pc, #116]	; (c002954 <TZ_SAU_Setup+0xf0>)
 c0028e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0028e4:	4a1b      	ldr	r2, [pc, #108]	; (c002954 <TZ_SAU_Setup+0xf0>)
 c0028e6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c0028ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0028ee:	4b1a      	ldr	r3, [pc, #104]	; (c002958 <TZ_SAU_Setup+0xf4>)
 c0028f0:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c0028f2:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0028f6:	4a18      	ldr	r2, [pc, #96]	; (c002958 <TZ_SAU_Setup+0xf4>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c0028f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0028fc:	6053      	str	r3, [r2, #4]
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c0028fe:	4b17      	ldr	r3, [pc, #92]	; (c00295c <TZ_SAU_Setup+0xf8>)
 c002900:	2200      	movs	r2, #0
 c002902:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c002906:	4b15      	ldr	r3, [pc, #84]	; (c00295c <TZ_SAU_Setup+0xf8>)
 c002908:	2200      	movs	r2, #0
 c00290a:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c00290e:	4b13      	ldr	r3, [pc, #76]	; (c00295c <TZ_SAU_Setup+0xf8>)
 c002910:	2200      	movs	r2, #0
 c002912:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c002916:	4b11      	ldr	r3, [pc, #68]	; (c00295c <TZ_SAU_Setup+0xf8>)
 c002918:	2200      	movs	r2, #0
 c00291a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
}
 c00291e:	bf00      	nop
 c002920:	46bd      	mov	sp, r7
 c002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002926:	4770      	bx	lr
 c002928:	e000edd0 	.word	0xe000edd0
 c00292c:	0c03e000 	.word	0x0c03e000
 c002930:	0c03ffe3 	.word	0x0c03ffe3
 c002934:	08040000 	.word	0x08040000
 c002938:	0807ffe1 	.word	0x0807ffe1
 c00293c:	20018000 	.word	0x20018000
 c002940:	2003ffe1 	.word	0x2003ffe1
 c002944:	4fffffe1 	.word	0x4fffffe1
 c002948:	9fffffe1 	.word	0x9fffffe1
 c00294c:	0bf90000 	.word	0x0bf90000
 c002950:	0bfa8fe1 	.word	0x0bfa8fe1
 c002954:	e000ed00 	.word	0xe000ed00
 c002958:	e000ef30 	.word	0xe000ef30
 c00295c:	e000e100 	.word	0xe000e100

0c002960 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c002960:	b580      	push	{r7, lr}
 c002962:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c002964:	f7ff ff7e 	bl	c002864 <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c002968:	4b08      	ldr	r3, [pc, #32]	; (c00298c <SystemInit+0x2c>)
 c00296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00296e:	4a07      	ldr	r2, [pc, #28]	; (c00298c <SystemInit+0x2c>)
 c002970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c002974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c002978:	4b05      	ldr	r3, [pc, #20]	; (c002990 <SystemInit+0x30>)
 c00297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00297e:	4a04      	ldr	r2, [pc, #16]	; (c002990 <SystemInit+0x30>)
 c002980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c002984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c002988:	bf00      	nop
 c00298a:	bd80      	pop	{r7, pc}
 c00298c:	e000ed00 	.word	0xe000ed00
 c002990:	e002ed00 	.word	0xe002ed00

0c002994 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c002994:	b480      	push	{r7}
 c002996:	b087      	sub	sp, #28
 c002998:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c00299a:	4b4f      	ldr	r3, [pc, #316]	; (c002ad8 <SystemCoreClockUpdate+0x144>)
 c00299c:	681b      	ldr	r3, [r3, #0]
 c00299e:	f003 0308 	and.w	r3, r3, #8
 c0029a2:	2b00      	cmp	r3, #0
 c0029a4:	d107      	bne.n	c0029b6 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c0029a6:	4b4c      	ldr	r3, [pc, #304]	; (c002ad8 <SystemCoreClockUpdate+0x144>)
 c0029a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0029ac:	0a1b      	lsrs	r3, r3, #8
 c0029ae:	f003 030f 	and.w	r3, r3, #15
 c0029b2:	617b      	str	r3, [r7, #20]
 c0029b4:	e005      	b.n	c0029c2 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c0029b6:	4b48      	ldr	r3, [pc, #288]	; (c002ad8 <SystemCoreClockUpdate+0x144>)
 c0029b8:	681b      	ldr	r3, [r3, #0]
 c0029ba:	091b      	lsrs	r3, r3, #4
 c0029bc:	f003 030f 	and.w	r3, r3, #15
 c0029c0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c0029c2:	4a46      	ldr	r2, [pc, #280]	; (c002adc <SystemCoreClockUpdate+0x148>)
 c0029c4:	697b      	ldr	r3, [r7, #20]
 c0029c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0029ca:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c0029cc:	4b42      	ldr	r3, [pc, #264]	; (c002ad8 <SystemCoreClockUpdate+0x144>)
 c0029ce:	689b      	ldr	r3, [r3, #8]
 c0029d0:	f003 030c 	and.w	r3, r3, #12
 c0029d4:	2b0c      	cmp	r3, #12
 c0029d6:	d866      	bhi.n	c002aa6 <SystemCoreClockUpdate+0x112>
 c0029d8:	a201      	add	r2, pc, #4	; (adr r2, c0029e0 <SystemCoreClockUpdate+0x4c>)
 c0029da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0029de:	bf00      	nop
 c0029e0:	0c002a15 	.word	0x0c002a15
 c0029e4:	0c002aa7 	.word	0x0c002aa7
 c0029e8:	0c002aa7 	.word	0x0c002aa7
 c0029ec:	0c002aa7 	.word	0x0c002aa7
 c0029f0:	0c002a1d 	.word	0x0c002a1d
 c0029f4:	0c002aa7 	.word	0x0c002aa7
 c0029f8:	0c002aa7 	.word	0x0c002aa7
 c0029fc:	0c002aa7 	.word	0x0c002aa7
 c002a00:	0c002a25 	.word	0x0c002a25
 c002a04:	0c002aa7 	.word	0x0c002aa7
 c002a08:	0c002aa7 	.word	0x0c002aa7
 c002a0c:	0c002aa7 	.word	0x0c002aa7
 c002a10:	0c002a2d 	.word	0x0c002a2d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c002a14:	4a32      	ldr	r2, [pc, #200]	; (c002ae0 <SystemCoreClockUpdate+0x14c>)
 c002a16:	697b      	ldr	r3, [r7, #20]
 c002a18:	6013      	str	r3, [r2, #0]
      break;
 c002a1a:	e048      	b.n	c002aae <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c002a1c:	4b30      	ldr	r3, [pc, #192]	; (c002ae0 <SystemCoreClockUpdate+0x14c>)
 c002a1e:	4a31      	ldr	r2, [pc, #196]	; (c002ae4 <SystemCoreClockUpdate+0x150>)
 c002a20:	601a      	str	r2, [r3, #0]
      break;
 c002a22:	e044      	b.n	c002aae <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c002a24:	4b2e      	ldr	r3, [pc, #184]	; (c002ae0 <SystemCoreClockUpdate+0x14c>)
 c002a26:	4a2f      	ldr	r2, [pc, #188]	; (c002ae4 <SystemCoreClockUpdate+0x150>)
 c002a28:	601a      	str	r2, [r3, #0]
      break;
 c002a2a:	e040      	b.n	c002aae <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c002a2c:	4b2a      	ldr	r3, [pc, #168]	; (c002ad8 <SystemCoreClockUpdate+0x144>)
 c002a2e:	68db      	ldr	r3, [r3, #12]
 c002a30:	f003 0303 	and.w	r3, r3, #3
 c002a34:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c002a36:	4b28      	ldr	r3, [pc, #160]	; (c002ad8 <SystemCoreClockUpdate+0x144>)
 c002a38:	68db      	ldr	r3, [r3, #12]
 c002a3a:	091b      	lsrs	r3, r3, #4
 c002a3c:	f003 030f 	and.w	r3, r3, #15
 c002a40:	3301      	adds	r3, #1
 c002a42:	60bb      	str	r3, [r7, #8]
 c002a44:	68fb      	ldr	r3, [r7, #12]
 c002a46:	2b02      	cmp	r3, #2
 c002a48:	d003      	beq.n	c002a52 <SystemCoreClockUpdate+0xbe>
 c002a4a:	68fb      	ldr	r3, [r7, #12]
 c002a4c:	2b03      	cmp	r3, #3
 c002a4e:	d006      	beq.n	c002a5e <SystemCoreClockUpdate+0xca>
 c002a50:	e00b      	b.n	c002a6a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c002a52:	4a24      	ldr	r2, [pc, #144]	; (c002ae4 <SystemCoreClockUpdate+0x150>)
 c002a54:	68bb      	ldr	r3, [r7, #8]
 c002a56:	fbb2 f3f3 	udiv	r3, r2, r3
 c002a5a:	613b      	str	r3, [r7, #16]
          break;
 c002a5c:	e00b      	b.n	c002a76 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c002a5e:	4a21      	ldr	r2, [pc, #132]	; (c002ae4 <SystemCoreClockUpdate+0x150>)
 c002a60:	68bb      	ldr	r3, [r7, #8]
 c002a62:	fbb2 f3f3 	udiv	r3, r2, r3
 c002a66:	613b      	str	r3, [r7, #16]
          break;
 c002a68:	e005      	b.n	c002a76 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c002a6a:	697a      	ldr	r2, [r7, #20]
 c002a6c:	68bb      	ldr	r3, [r7, #8]
 c002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 c002a72:	613b      	str	r3, [r7, #16]
          break;
 c002a74:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c002a76:	4b18      	ldr	r3, [pc, #96]	; (c002ad8 <SystemCoreClockUpdate+0x144>)
 c002a78:	68db      	ldr	r3, [r3, #12]
 c002a7a:	0a1b      	lsrs	r3, r3, #8
 c002a7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c002a80:	693b      	ldr	r3, [r7, #16]
 c002a82:	fb02 f303 	mul.w	r3, r2, r3
 c002a86:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c002a88:	4b13      	ldr	r3, [pc, #76]	; (c002ad8 <SystemCoreClockUpdate+0x144>)
 c002a8a:	68db      	ldr	r3, [r3, #12]
 c002a8c:	0e5b      	lsrs	r3, r3, #25
 c002a8e:	f003 0303 	and.w	r3, r3, #3
 c002a92:	3301      	adds	r3, #1
 c002a94:	005b      	lsls	r3, r3, #1
 c002a96:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c002a98:	693a      	ldr	r2, [r7, #16]
 c002a9a:	687b      	ldr	r3, [r7, #4]
 c002a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 c002aa0:	4a0f      	ldr	r2, [pc, #60]	; (c002ae0 <SystemCoreClockUpdate+0x14c>)
 c002aa2:	6013      	str	r3, [r2, #0]
      break;
 c002aa4:	e003      	b.n	c002aae <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c002aa6:	4a0e      	ldr	r2, [pc, #56]	; (c002ae0 <SystemCoreClockUpdate+0x14c>)
 c002aa8:	697b      	ldr	r3, [r7, #20]
 c002aaa:	6013      	str	r3, [r2, #0]
      break;
 c002aac:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c002aae:	4b0a      	ldr	r3, [pc, #40]	; (c002ad8 <SystemCoreClockUpdate+0x144>)
 c002ab0:	689b      	ldr	r3, [r3, #8]
 c002ab2:	091b      	lsrs	r3, r3, #4
 c002ab4:	f003 030f 	and.w	r3, r3, #15
 c002ab8:	4a0b      	ldr	r2, [pc, #44]	; (c002ae8 <SystemCoreClockUpdate+0x154>)
 c002aba:	5cd3      	ldrb	r3, [r2, r3]
 c002abc:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c002abe:	4b08      	ldr	r3, [pc, #32]	; (c002ae0 <SystemCoreClockUpdate+0x14c>)
 c002ac0:	681a      	ldr	r2, [r3, #0]
 c002ac2:	683b      	ldr	r3, [r7, #0]
 c002ac4:	fa22 f303 	lsr.w	r3, r2, r3
 c002ac8:	4a05      	ldr	r2, [pc, #20]	; (c002ae0 <SystemCoreClockUpdate+0x14c>)
 c002aca:	6013      	str	r3, [r2, #0]
}
 c002acc:	bf00      	nop
 c002ace:	371c      	adds	r7, #28
 c002ad0:	46bd      	mov	sp, r7
 c002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002ad6:	4770      	bx	lr
 c002ad8:	50021000 	.word	0x50021000
 c002adc:	0c00a8a8 	.word	0x0c00a8a8
 c002ae0:	30000064 	.word	0x30000064
 c002ae4:	00f42400 	.word	0x00f42400
 c002ae8:	0c00a890 	.word	0x0c00a890

0c002aec <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c002aec:	b580      	push	{r7, lr}
 c002aee:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c002af0:	f7ff ff50 	bl	c002994 <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c002af4:	4b1c      	ldr	r3, [pc, #112]	; (c002b68 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c002af6:	681b      	ldr	r3, [r3, #0]
}
 c002af8:	4618      	mov	r0, r3
 c002afa:	46bd      	mov	sp, r7
 c002afc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c002b00:	4671      	mov	r1, lr
 c002b02:	4672      	mov	r2, lr
 c002b04:	4673      	mov	r3, lr
 c002b06:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c002b0a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c002b0e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c002b12:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c002b16:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c002b1a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c002b1e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c002b22:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c002b26:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c002b2a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c002b2e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c002b32:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c002b36:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c002b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002b3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c002b42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c002b46:	f38e 8c00 	msr	CPSR_fs, lr
 c002b4a:	b410      	push	{r4}
 c002b4c:	eef1 ca10 	vmrs	ip, fpscr
 c002b50:	f64f 7460 	movw	r4, #65376	; 0xff60
 c002b54:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c002b58:	ea0c 0c04 	and.w	ip, ip, r4
 c002b5c:	eee1 ca10 	vmsr	fpscr, ip
 c002b60:	bc10      	pop	{r4}
 c002b62:	46f4      	mov	ip, lr
 c002b64:	4774      	bxns	lr
 c002b66:	bf00      	nop
 c002b68:	30000064 	.word	0x30000064

0c002b6c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 c002b6c:	b580      	push	{r7, lr}
 c002b6e:	b088      	sub	sp, #32
 c002b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 c002b72:	f107 0310 	add.w	r3, r7, #16
 c002b76:	2200      	movs	r2, #0
 c002b78:	601a      	str	r2, [r3, #0]
 c002b7a:	605a      	str	r2, [r3, #4]
 c002b7c:	609a      	str	r2, [r3, #8]
 c002b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 c002b80:	1d3b      	adds	r3, r7, #4
 c002b82:	2200      	movs	r2, #0
 c002b84:	601a      	str	r2, [r3, #0]
 c002b86:	605a      	str	r2, [r3, #4]
 c002b88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 c002b8a:	4b1d      	ldr	r3, [pc, #116]	; (c002c00 <MX_TIM3_Init+0x94>)
 c002b8c:	4a1d      	ldr	r2, [pc, #116]	; (c002c04 <MX_TIM3_Init+0x98>)
 c002b8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 c002b90:	4b1b      	ldr	r3, [pc, #108]	; (c002c00 <MX_TIM3_Init+0x94>)
 c002b92:	2200      	movs	r2, #0
 c002b94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 c002b96:	4b1a      	ldr	r3, [pc, #104]	; (c002c00 <MX_TIM3_Init+0x94>)
 c002b98:	2200      	movs	r2, #0
 c002b9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 c002b9c:	4b18      	ldr	r3, [pc, #96]	; (c002c00 <MX_TIM3_Init+0x94>)
 c002b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 c002ba2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 c002ba4:	4b16      	ldr	r3, [pc, #88]	; (c002c00 <MX_TIM3_Init+0x94>)
 c002ba6:	2200      	movs	r2, #0
 c002ba8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 c002baa:	4b15      	ldr	r3, [pc, #84]	; (c002c00 <MX_TIM3_Init+0x94>)
 c002bac:	2200      	movs	r2, #0
 c002bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 c002bb0:	4813      	ldr	r0, [pc, #76]	; (c002c00 <MX_TIM3_Init+0x94>)
 c002bb2:	f005 f94f 	bl	c007e54 <HAL_TIM_Base_Init>
 c002bb6:	4603      	mov	r3, r0
 c002bb8:	2b00      	cmp	r3, #0
 c002bba:	d001      	beq.n	c002bc0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 c002bbc:	f7ff fa5c 	bl	c002078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 c002bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c002bc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 c002bc6:	f107 0310 	add.w	r3, r7, #16
 c002bca:	4619      	mov	r1, r3
 c002bcc:	480c      	ldr	r0, [pc, #48]	; (c002c00 <MX_TIM3_Init+0x94>)
 c002bce:	f005 fbb8 	bl	c008342 <HAL_TIM_ConfigClockSource>
 c002bd2:	4603      	mov	r3, r0
 c002bd4:	2b00      	cmp	r3, #0
 c002bd6:	d001      	beq.n	c002bdc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 c002bd8:	f7ff fa4e 	bl	c002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 c002bdc:	2300      	movs	r3, #0
 c002bde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 c002be0:	2300      	movs	r3, #0
 c002be2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 c002be4:	1d3b      	adds	r3, r7, #4
 c002be6:	4619      	mov	r1, r3
 c002be8:	4805      	ldr	r0, [pc, #20]	; (c002c00 <MX_TIM3_Init+0x94>)
 c002bea:	f005 fdd9 	bl	c0087a0 <HAL_TIMEx_MasterConfigSynchronization>
 c002bee:	4603      	mov	r3, r0
 c002bf0:	2b00      	cmp	r3, #0
 c002bf2:	d001      	beq.n	c002bf8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 c002bf4:	f7ff fa40 	bl	c002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 c002bf8:	bf00      	nop
 c002bfa:	3720      	adds	r7, #32
 c002bfc:	46bd      	mov	sp, r7
 c002bfe:	bd80      	pop	{r7, pc}
 c002c00:	30002340 	.word	0x30002340
 c002c04:	50000400 	.word	0x50000400

0c002c08 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 c002c08:	b580      	push	{r7, lr}
 c002c0a:	b088      	sub	sp, #32
 c002c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 c002c0e:	f107 0310 	add.w	r3, r7, #16
 c002c12:	2200      	movs	r2, #0
 c002c14:	601a      	str	r2, [r3, #0]
 c002c16:	605a      	str	r2, [r3, #4]
 c002c18:	609a      	str	r2, [r3, #8]
 c002c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 c002c1c:	1d3b      	adds	r3, r7, #4
 c002c1e:	2200      	movs	r2, #0
 c002c20:	601a      	str	r2, [r3, #0]
 c002c22:	605a      	str	r2, [r3, #4]
 c002c24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 c002c26:	4b1d      	ldr	r3, [pc, #116]	; (c002c9c <MX_TIM4_Init+0x94>)
 c002c28:	4a1d      	ldr	r2, [pc, #116]	; (c002ca0 <MX_TIM4_Init+0x98>)
 c002c2a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 c002c2c:	4b1b      	ldr	r3, [pc, #108]	; (c002c9c <MX_TIM4_Init+0x94>)
 c002c2e:	2200      	movs	r2, #0
 c002c30:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 c002c32:	4b1a      	ldr	r3, [pc, #104]	; (c002c9c <MX_TIM4_Init+0x94>)
 c002c34:	2200      	movs	r2, #0
 c002c36:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 c002c38:	4b18      	ldr	r3, [pc, #96]	; (c002c9c <MX_TIM4_Init+0x94>)
 c002c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 c002c3e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 c002c40:	4b16      	ldr	r3, [pc, #88]	; (c002c9c <MX_TIM4_Init+0x94>)
 c002c42:	2200      	movs	r2, #0
 c002c44:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 c002c46:	4b15      	ldr	r3, [pc, #84]	; (c002c9c <MX_TIM4_Init+0x94>)
 c002c48:	2200      	movs	r2, #0
 c002c4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 c002c4c:	4813      	ldr	r0, [pc, #76]	; (c002c9c <MX_TIM4_Init+0x94>)
 c002c4e:	f005 f901 	bl	c007e54 <HAL_TIM_Base_Init>
 c002c52:	4603      	mov	r3, r0
 c002c54:	2b00      	cmp	r3, #0
 c002c56:	d001      	beq.n	c002c5c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 c002c58:	f7ff fa0e 	bl	c002078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 c002c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c002c60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 c002c62:	f107 0310 	add.w	r3, r7, #16
 c002c66:	4619      	mov	r1, r3
 c002c68:	480c      	ldr	r0, [pc, #48]	; (c002c9c <MX_TIM4_Init+0x94>)
 c002c6a:	f005 fb6a 	bl	c008342 <HAL_TIM_ConfigClockSource>
 c002c6e:	4603      	mov	r3, r0
 c002c70:	2b00      	cmp	r3, #0
 c002c72:	d001      	beq.n	c002c78 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 c002c74:	f7ff fa00 	bl	c002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 c002c78:	2300      	movs	r3, #0
 c002c7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 c002c7c:	2300      	movs	r3, #0
 c002c7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 c002c80:	1d3b      	adds	r3, r7, #4
 c002c82:	4619      	mov	r1, r3
 c002c84:	4805      	ldr	r0, [pc, #20]	; (c002c9c <MX_TIM4_Init+0x94>)
 c002c86:	f005 fd8b 	bl	c0087a0 <HAL_TIMEx_MasterConfigSynchronization>
 c002c8a:	4603      	mov	r3, r0
 c002c8c:	2b00      	cmp	r3, #0
 c002c8e:	d001      	beq.n	c002c94 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 c002c90:	f7ff f9f2 	bl	c002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 c002c94:	bf00      	nop
 c002c96:	3720      	adds	r7, #32
 c002c98:	46bd      	mov	sp, r7
 c002c9a:	bd80      	pop	{r7, pc}
 c002c9c:	3000238c 	.word	0x3000238c
 c002ca0:	50000800 	.word	0x50000800

0c002ca4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 c002ca4:	b580      	push	{r7, lr}
 c002ca6:	b084      	sub	sp, #16
 c002ca8:	af00      	add	r7, sp, #0
 c002caa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 c002cac:	687b      	ldr	r3, [r7, #4]
 c002cae:	681b      	ldr	r3, [r3, #0]
 c002cb0:	4a1a      	ldr	r2, [pc, #104]	; (c002d1c <HAL_TIM_Base_MspInit+0x78>)
 c002cb2:	4293      	cmp	r3, r2
 c002cb4:	d114      	bne.n	c002ce0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 c002cb6:	4b1a      	ldr	r3, [pc, #104]	; (c002d20 <HAL_TIM_Base_MspInit+0x7c>)
 c002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002cba:	4a19      	ldr	r2, [pc, #100]	; (c002d20 <HAL_TIM_Base_MspInit+0x7c>)
 c002cbc:	f043 0302 	orr.w	r3, r3, #2
 c002cc0:	6593      	str	r3, [r2, #88]	; 0x58
 c002cc2:	4b17      	ldr	r3, [pc, #92]	; (c002d20 <HAL_TIM_Base_MspInit+0x7c>)
 c002cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002cc6:	f003 0302 	and.w	r3, r3, #2
 c002cca:	60fb      	str	r3, [r7, #12]
 c002ccc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 c002cce:	2200      	movs	r2, #0
 c002cd0:	2100      	movs	r1, #0
 c002cd2:	202e      	movs	r0, #46	; 0x2e
 c002cd4:	f002 fc9f 	bl	c005616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 c002cd8:	202e      	movs	r0, #46	; 0x2e
 c002cda:	f002 fcb6 	bl	c00564a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 c002cde:	e018      	b.n	c002d12 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 c002ce0:	687b      	ldr	r3, [r7, #4]
 c002ce2:	681b      	ldr	r3, [r3, #0]
 c002ce4:	4a0f      	ldr	r2, [pc, #60]	; (c002d24 <HAL_TIM_Base_MspInit+0x80>)
 c002ce6:	4293      	cmp	r3, r2
 c002ce8:	d113      	bne.n	c002d12 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 c002cea:	4b0d      	ldr	r3, [pc, #52]	; (c002d20 <HAL_TIM_Base_MspInit+0x7c>)
 c002cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002cee:	4a0c      	ldr	r2, [pc, #48]	; (c002d20 <HAL_TIM_Base_MspInit+0x7c>)
 c002cf0:	f043 0304 	orr.w	r3, r3, #4
 c002cf4:	6593      	str	r3, [r2, #88]	; 0x58
 c002cf6:	4b0a      	ldr	r3, [pc, #40]	; (c002d20 <HAL_TIM_Base_MspInit+0x7c>)
 c002cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002cfa:	f003 0304 	and.w	r3, r3, #4
 c002cfe:	60bb      	str	r3, [r7, #8]
 c002d00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 c002d02:	2200      	movs	r2, #0
 c002d04:	2100      	movs	r1, #0
 c002d06:	202f      	movs	r0, #47	; 0x2f
 c002d08:	f002 fc85 	bl	c005616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 c002d0c:	202f      	movs	r0, #47	; 0x2f
 c002d0e:	f002 fc9c 	bl	c00564a <HAL_NVIC_EnableIRQ>
}
 c002d12:	bf00      	nop
 c002d14:	3710      	adds	r7, #16
 c002d16:	46bd      	mov	sp, r7
 c002d18:	bd80      	pop	{r7, pc}
 c002d1a:	bf00      	nop
 c002d1c:	50000400 	.word	0x50000400
 c002d20:	50021000 	.word	0x50021000
 c002d24:	50000800 	.word	0x50000800

0c002d28 <default_RNG>:

#include <stdlib.h>
#include <time.h>

static int default_RNG(uint8_t *dest, unsigned size)
{
 c002d28:	b580      	push	{r7, lr}
 c002d2a:	b084      	sub	sp, #16
 c002d2c:	af00      	add	r7, sp, #0
 c002d2e:	6078      	str	r0, [r7, #4]
 c002d30:	6039      	str	r1, [r7, #0]
	unsigned int i;
	for(i=0; i<size; i++){
 c002d32:	2300      	movs	r3, #0
 c002d34:	60fb      	str	r3, [r7, #12]
 c002d36:	e00a      	b.n	c002d4e <default_RNG+0x26>
		dest[i] = (uint8_t)(rand());
 c002d38:	f006 fd40 	bl	c0097bc <rand>
 c002d3c:	4601      	mov	r1, r0
 c002d3e:	687a      	ldr	r2, [r7, #4]
 c002d40:	68fb      	ldr	r3, [r7, #12]
 c002d42:	4413      	add	r3, r2
 c002d44:	b2ca      	uxtb	r2, r1
 c002d46:	701a      	strb	r2, [r3, #0]
	for(i=0; i<size; i++){
 c002d48:	68fb      	ldr	r3, [r7, #12]
 c002d4a:	3301      	adds	r3, #1
 c002d4c:	60fb      	str	r3, [r7, #12]
 c002d4e:	68fa      	ldr	r2, [r7, #12]
 c002d50:	683b      	ldr	r3, [r7, #0]
 c002d52:	429a      	cmp	r2, r3
 c002d54:	d3f0      	bcc.n	c002d38 <default_RNG+0x10>
	}
	return 1;
 c002d56:	2301      	movs	r3, #1
}
 c002d58:	4618      	mov	r0, r3
 c002d5a:	3710      	adds	r7, #16
 c002d5c:	46bd      	mov	sp, r7
 c002d5e:	bd80      	pop	{r7, pc}

0c002d60 <uECC_vli_add>:
#if (uECC_OPTIMIZATION_LEVEL >= 2)

uECC_VLI_API uECC_word_t uECC_vli_add(uECC_word_t *result,
                                      const uECC_word_t *left,
                                      const uECC_word_t *right,
                                      wordcount_t num_words) {
 c002d60:	b4f0      	push	{r4, r5, r6, r7}
 c002d62:	b088      	sub	sp, #32
 c002d64:	af00      	add	r7, sp, #0
 c002d66:	60f8      	str	r0, [r7, #12]
 c002d68:	60b9      	str	r1, [r7, #8]
 c002d6a:	607a      	str	r2, [r7, #4]
 c002d6c:	70fb      	strb	r3, [r7, #3]
#if (uECC_MAX_WORDS != uECC_MIN_WORDS)
  #if (uECC_PLATFORM == uECC_arm_thumb) || (uECC_PLATFORM == uECC_arm_thumb2)
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
 c002d6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002d72:	f1c3 0308 	rsb	r3, r3, #8
 c002d76:	00db      	lsls	r3, r3, #3
 c002d78:	3301      	adds	r3, #1
 c002d7a:	61fb      	str	r3, [r7, #28]
#endif
    uint32_t carry;
    uint32_t left_word;
    uint32_t right_word;
    
    __asm__ volatile (
 c002d7c:	68f8      	ldr	r0, [r7, #12]
 c002d7e:	68b9      	ldr	r1, [r7, #8]
 c002d80:	687a      	ldr	r2, [r7, #4]
 c002d82:	69fb      	ldr	r3, [r7, #28]
 c002d84:	2600      	movs	r6, #0
 c002d86:	a505      	add	r5, pc, #20	; (adr r5, c002d9c <uECC_vli_add+0x3c>)
 c002d88:	f3af 8000 	nop.w
 c002d8c:	f3af 8000 	nop.w
 c002d90:	195b      	adds	r3, r3, r5
 c002d92:	c920      	ldmia	r1!, {r5}
 c002d94:	ca10      	ldmia	r2!, {r4}
 c002d96:	192d      	adds	r5, r5, r4
 c002d98:	c020      	stmia	r0!, {r5}
 c002d9a:	4718      	bx	r3
 c002d9c:	c920      	ldmia	r1!, {r5}
 c002d9e:	ca10      	ldmia	r2!, {r4}
 c002da0:	4165      	adcs	r5, r4
 c002da2:	c020      	stmia	r0!, {r5}
 c002da4:	c920      	ldmia	r1!, {r5}
 c002da6:	ca10      	ldmia	r2!, {r4}
 c002da8:	4165      	adcs	r5, r4
 c002daa:	c020      	stmia	r0!, {r5}
 c002dac:	c920      	ldmia	r1!, {r5}
 c002dae:	ca10      	ldmia	r2!, {r4}
 c002db0:	4165      	adcs	r5, r4
 c002db2:	c020      	stmia	r0!, {r5}
 c002db4:	c920      	ldmia	r1!, {r5}
 c002db6:	ca10      	ldmia	r2!, {r4}
 c002db8:	4165      	adcs	r5, r4
 c002dba:	c020      	stmia	r0!, {r5}
 c002dbc:	c920      	ldmia	r1!, {r5}
 c002dbe:	ca10      	ldmia	r2!, {r4}
 c002dc0:	4165      	adcs	r5, r4
 c002dc2:	c020      	stmia	r0!, {r5}
 c002dc4:	c920      	ldmia	r1!, {r5}
 c002dc6:	ca10      	ldmia	r2!, {r4}
 c002dc8:	4165      	adcs	r5, r4
 c002dca:	c020      	stmia	r0!, {r5}
 c002dcc:	c920      	ldmia	r1!, {r5}
 c002dce:	ca10      	ldmia	r2!, {r4}
 c002dd0:	4165      	adcs	r5, r4
 c002dd2:	c020      	stmia	r0!, {r5}
 c002dd4:	4176      	adcs	r6, r6
 c002dd6:	60f8      	str	r0, [r7, #12]
 c002dd8:	60b9      	str	r1, [r7, #8]
 c002dda:	607a      	str	r2, [r7, #4]
 c002ddc:	61fb      	str	r3, [r7, #28]
 c002dde:	61be      	str	r6, [r7, #24]
 c002de0:	617d      	str	r5, [r7, #20]
 c002de2:	613c      	str	r4, [r7, #16]
          [carry] REG_WRITE_LO (carry), [left] REG_WRITE_LO (left_word),
          [right] REG_WRITE_LO (right_word)
        :
        : "cc", "memory"
    );
    return carry;
 c002de4:	69bb      	ldr	r3, [r7, #24]
}
 c002de6:	4618      	mov	r0, r3
 c002de8:	3720      	adds	r7, #32
 c002dea:	46bd      	mov	sp, r7
 c002dec:	bcf0      	pop	{r4, r5, r6, r7}
 c002dee:	4770      	bx	lr

0c002df0 <uECC_vli_sub>:
#define asm_add 1

uECC_VLI_API uECC_word_t uECC_vli_sub(uECC_word_t *result,
                                      const uECC_word_t *left,
                                      const uECC_word_t *right,
                                      wordcount_t num_words) {
 c002df0:	b4f0      	push	{r4, r5, r6, r7}
 c002df2:	b088      	sub	sp, #32
 c002df4:	af00      	add	r7, sp, #0
 c002df6:	60f8      	str	r0, [r7, #12]
 c002df8:	60b9      	str	r1, [r7, #8]
 c002dfa:	607a      	str	r2, [r7, #4]
 c002dfc:	70fb      	strb	r3, [r7, #3]
#if (uECC_MAX_WORDS != uECC_MIN_WORDS)
  #if (uECC_PLATFORM == uECC_arm_thumb) || (uECC_PLATFORM == uECC_arm_thumb2)
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
 c002dfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002e02:	f1c3 0308 	rsb	r3, r3, #8
 c002e06:	00db      	lsls	r3, r3, #3
 c002e08:	3301      	adds	r3, #1
 c002e0a:	61fb      	str	r3, [r7, #28]
#endif
    uint32_t carry;
    uint32_t left_word;
    uint32_t right_word;
    
    __asm__ volatile (
 c002e0c:	68f8      	ldr	r0, [r7, #12]
 c002e0e:	68b9      	ldr	r1, [r7, #8]
 c002e10:	687a      	ldr	r2, [r7, #4]
 c002e12:	69fb      	ldr	r3, [r7, #28]
 c002e14:	2600      	movs	r6, #0
 c002e16:	a505      	add	r5, pc, #20	; (adr r5, c002e2c <uECC_vli_sub+0x3c>)
 c002e18:	f3af 8000 	nop.w
 c002e1c:	f3af 8000 	nop.w
 c002e20:	195b      	adds	r3, r3, r5
 c002e22:	c920      	ldmia	r1!, {r5}
 c002e24:	ca10      	ldmia	r2!, {r4}
 c002e26:	1b2d      	subs	r5, r5, r4
 c002e28:	c020      	stmia	r0!, {r5}
 c002e2a:	4718      	bx	r3
 c002e2c:	c920      	ldmia	r1!, {r5}
 c002e2e:	ca10      	ldmia	r2!, {r4}
 c002e30:	41a5      	sbcs	r5, r4
 c002e32:	c020      	stmia	r0!, {r5}
 c002e34:	c920      	ldmia	r1!, {r5}
 c002e36:	ca10      	ldmia	r2!, {r4}
 c002e38:	41a5      	sbcs	r5, r4
 c002e3a:	c020      	stmia	r0!, {r5}
 c002e3c:	c920      	ldmia	r1!, {r5}
 c002e3e:	ca10      	ldmia	r2!, {r4}
 c002e40:	41a5      	sbcs	r5, r4
 c002e42:	c020      	stmia	r0!, {r5}
 c002e44:	c920      	ldmia	r1!, {r5}
 c002e46:	ca10      	ldmia	r2!, {r4}
 c002e48:	41a5      	sbcs	r5, r4
 c002e4a:	c020      	stmia	r0!, {r5}
 c002e4c:	c920      	ldmia	r1!, {r5}
 c002e4e:	ca10      	ldmia	r2!, {r4}
 c002e50:	41a5      	sbcs	r5, r4
 c002e52:	c020      	stmia	r0!, {r5}
 c002e54:	c920      	ldmia	r1!, {r5}
 c002e56:	ca10      	ldmia	r2!, {r4}
 c002e58:	41a5      	sbcs	r5, r4
 c002e5a:	c020      	stmia	r0!, {r5}
 c002e5c:	c920      	ldmia	r1!, {r5}
 c002e5e:	ca10      	ldmia	r2!, {r4}
 c002e60:	41a5      	sbcs	r5, r4
 c002e62:	c020      	stmia	r0!, {r5}
 c002e64:	4176      	adcs	r6, r6
 c002e66:	60f8      	str	r0, [r7, #12]
 c002e68:	60b9      	str	r1, [r7, #8]
 c002e6a:	607a      	str	r2, [r7, #4]
 c002e6c:	61fb      	str	r3, [r7, #28]
 c002e6e:	61be      	str	r6, [r7, #24]
 c002e70:	617d      	str	r5, [r7, #20]
 c002e72:	613c      	str	r4, [r7, #16]
          [carry] REG_WRITE_LO (carry), [left] REG_WRITE_LO (left_word),
          [right] REG_WRITE_LO (right_word)
        :
        : "cc", "memory"
    );
    return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
 c002e74:	69bb      	ldr	r3, [r7, #24]
 c002e76:	2b00      	cmp	r3, #0
 c002e78:	bf0c      	ite	eq
 c002e7a:	2301      	moveq	r3, #1
 c002e7c:	2300      	movne	r3, #0
 c002e7e:	b2db      	uxtb	r3, r3
                      (for some reason...) */
}
 c002e80:	4618      	mov	r0, r3
 c002e82:	3720      	adds	r7, #32
 c002e84:	46bd      	mov	sp, r7
 c002e86:	bcf0      	pop	{r4, r5, r6, r7}
 c002e88:	4770      	bx	lr
 c002e8a:	bf00      	nop

0c002e8c <uECC_vli_mult>:

#if !asm_mult
uECC_VLI_API void uECC_vli_mult(uECC_word_t *result,
                                const uECC_word_t *left,
                                const uECC_word_t *right,
                                wordcount_t num_words) {
 c002e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c002e90:	b08d      	sub	sp, #52	; 0x34
 c002e92:	af00      	add	r7, sp, #0
 c002e94:	60f8      	str	r0, [r7, #12]
 c002e96:	60b9      	str	r1, [r7, #8]
 c002e98:	607a      	str	r2, [r7, #4]
 c002e9a:	70fb      	strb	r3, [r7, #3]
#if (uECC_PLATFORM != uECC_arm_thumb)
    uint32_t c0 = 0;
 c002e9c:	2300      	movs	r3, #0
 c002e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t c1 = 0;
 c002ea0:	2300      	movs	r3, #0
 c002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t c2 = 0;
 c002ea4:	2300      	movs	r3, #0
 c002ea6:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t k = 0;
 c002ea8:	2300      	movs	r3, #0
 c002eaa:	623b      	str	r3, [r7, #32]
        "str %[c0], [%[result], %[k]] \n\t" /* result[num_words * 2 - 1] = c0 */
        RESUME_SYNTAX
        : [c0] "+r" (c0), [c1] "+r" (c1), [c2] "+r" (c2),
          [k] "+r" (k), [i] "=&r" (i), [t0] "=&r" (t0), [t1] "=&r" (t1)
        : [result] "r" (result), [left] "r" (left), [right] "r" (right),
          [last_word] "r" ((num_words - 1) * 4)
 c002eac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002eb0:	3b01      	subs	r3, #1
 c002eb2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
    __asm__ volatile (
 c002eb6:	68fc      	ldr	r4, [r7, #12]
 c002eb8:	68bd      	ldr	r5, [r7, #8]
 c002eba:	687e      	ldr	r6, [r7, #4]
 c002ebc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 c002ebe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 c002ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c002ec2:	6a3b      	ldr	r3, [r7, #32]
 c002ec4:	f05f 0e00 	movs.w	lr, #0
 c002ec8:	e003      	b.n	c002ed2 <uECC_vli_mult+0x46>
 c002eca:	ea5f 0e03 	movs.w	lr, r3
 c002ece:	ebbe 0e0c 	subs.w	lr, lr, ip
 c002ed2:	ebb3 080e 	subs.w	r8, r3, lr
 c002ed6:	f856 9008 	ldr.w	r9, [r6, r8]
 c002eda:	f855 800e 	ldr.w	r8, [r5, lr]
 c002ede:	fba8 8909 	umull	r8, r9, r8, r9
 c002ee2:	eb10 0008 	adds.w	r0, r0, r8
 c002ee6:	eb51 0109 	adcs.w	r1, r1, r9
 c002eea:	f152 0200 	adcs.w	r2, r2, #0
 c002eee:	f11e 0e04 	adds.w	lr, lr, #4
 c002ef2:	45e6      	cmp	lr, ip
 c002ef4:	dc01      	bgt.n	c002efa <uECC_vli_mult+0x6e>
 c002ef6:	459e      	cmp	lr, r3
 c002ef8:	ddeb      	ble.n	c002ed2 <uECC_vli_mult+0x46>
 c002efa:	50e0      	str	r0, [r4, r3]
 c002efc:	4608      	mov	r0, r1
 c002efe:	4611      	mov	r1, r2
 c002f00:	2200      	movs	r2, #0
 c002f02:	3304      	adds	r3, #4
 c002f04:	4563      	cmp	r3, ip
 c002f06:	dddd      	ble.n	c002ec4 <uECC_vli_mult+0x38>
 c002f08:	ebb3 0f4c 	cmp.w	r3, ip, lsl #1
 c002f0c:	dddd      	ble.n	c002eca <uECC_vli_mult+0x3e>
 c002f0e:	50e0      	str	r0, [r4, r3]
 c002f10:	464c      	mov	r4, r9
 c002f12:	4645      	mov	r5, r8
 c002f14:	4676      	mov	r6, lr
 c002f16:	62f8      	str	r0, [r7, #44]	; 0x2c
 c002f18:	62b9      	str	r1, [r7, #40]	; 0x28
 c002f1a:	627a      	str	r2, [r7, #36]	; 0x24
 c002f1c:	623b      	str	r3, [r7, #32]
 c002f1e:	61fe      	str	r6, [r7, #28]
 c002f20:	61bd      	str	r5, [r7, #24]
 c002f22:	617c      	str	r4, [r7, #20]
          [r5] "=&l" (r5), [r6] "=&l" (r6), [r7] "=&l" (r7)
        : [r0] "l" (result), [r1] "l" (left), [r2] "l" (right)
        : "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
    );
#endif
}
 c002f24:	bf00      	nop
 c002f26:	3734      	adds	r7, #52	; 0x34
 c002f28:	46bd      	mov	sp, r7
 c002f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0c002f2e <uECC_vli_clear>:
int uECC_curve_public_key_size(uECC_Curve curve) {
    return 2 * curve->num_bytes;
}

#if !asm_clear
uECC_VLI_API void uECC_vli_clear(uECC_word_t *vli, wordcount_t num_words) {
 c002f2e:	b480      	push	{r7}
 c002f30:	b085      	sub	sp, #20
 c002f32:	af00      	add	r7, sp, #0
 c002f34:	6078      	str	r0, [r7, #4]
 c002f36:	460b      	mov	r3, r1
 c002f38:	70fb      	strb	r3, [r7, #3]
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
 c002f3a:	2300      	movs	r3, #0
 c002f3c:	73fb      	strb	r3, [r7, #15]
 c002f3e:	e00a      	b.n	c002f56 <uECC_vli_clear+0x28>
        vli[i] = 0;
 c002f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c002f44:	009b      	lsls	r3, r3, #2
 c002f46:	687a      	ldr	r2, [r7, #4]
 c002f48:	4413      	add	r3, r2
 c002f4a:	2200      	movs	r2, #0
 c002f4c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 c002f4e:	7bfb      	ldrb	r3, [r7, #15]
 c002f50:	3301      	adds	r3, #1
 c002f52:	b2db      	uxtb	r3, r3
 c002f54:	73fb      	strb	r3, [r7, #15]
 c002f56:	f997 200f 	ldrsb.w	r2, [r7, #15]
 c002f5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002f5e:	429a      	cmp	r2, r3
 c002f60:	dbee      	blt.n	c002f40 <uECC_vli_clear+0x12>
    }
}
 c002f62:	bf00      	nop
 c002f64:	bf00      	nop
 c002f66:	3714      	adds	r7, #20
 c002f68:	46bd      	mov	sp, r7
 c002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002f6e:	4770      	bx	lr

0c002f70 <uECC_vli_isZero>:
#endif /* !asm_clear */

/* Constant-time comparison to zero - secure way to compare long integers */
/* Returns 1 if vli == 0, 0 otherwise. */
uECC_VLI_API uECC_word_t uECC_vli_isZero(const uECC_word_t *vli, wordcount_t num_words) {
 c002f70:	b480      	push	{r7}
 c002f72:	b085      	sub	sp, #20
 c002f74:	af00      	add	r7, sp, #0
 c002f76:	6078      	str	r0, [r7, #4]
 c002f78:	460b      	mov	r3, r1
 c002f7a:	70fb      	strb	r3, [r7, #3]
    uECC_word_t bits = 0;
 c002f7c:	2300      	movs	r3, #0
 c002f7e:	60fb      	str	r3, [r7, #12]
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
 c002f80:	2300      	movs	r3, #0
 c002f82:	72fb      	strb	r3, [r7, #11]
 c002f84:	e00c      	b.n	c002fa0 <uECC_vli_isZero+0x30>
        bits |= vli[i];
 c002f86:	f997 300b 	ldrsb.w	r3, [r7, #11]
 c002f8a:	009b      	lsls	r3, r3, #2
 c002f8c:	687a      	ldr	r2, [r7, #4]
 c002f8e:	4413      	add	r3, r2
 c002f90:	681b      	ldr	r3, [r3, #0]
 c002f92:	68fa      	ldr	r2, [r7, #12]
 c002f94:	4313      	orrs	r3, r2
 c002f96:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < num_words; ++i) {
 c002f98:	7afb      	ldrb	r3, [r7, #11]
 c002f9a:	3301      	adds	r3, #1
 c002f9c:	b2db      	uxtb	r3, r3
 c002f9e:	72fb      	strb	r3, [r7, #11]
 c002fa0:	f997 200b 	ldrsb.w	r2, [r7, #11]
 c002fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c002fa8:	429a      	cmp	r2, r3
 c002faa:	dbec      	blt.n	c002f86 <uECC_vli_isZero+0x16>
    }
    return (bits == 0);
 c002fac:	68fb      	ldr	r3, [r7, #12]
 c002fae:	2b00      	cmp	r3, #0
 c002fb0:	bf0c      	ite	eq
 c002fb2:	2301      	moveq	r3, #1
 c002fb4:	2300      	movne	r3, #0
 c002fb6:	b2db      	uxtb	r3, r3
}
 c002fb8:	4618      	mov	r0, r3
 c002fba:	3714      	adds	r7, #20
 c002fbc:	46bd      	mov	sp, r7
 c002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002fc2:	4770      	bx	lr

0c002fc4 <uECC_vli_testBit>:

/* Returns nonzero if bit 'bit' of vli is set. */
uECC_VLI_API uECC_word_t uECC_vli_testBit(const uECC_word_t *vli, bitcount_t bit) {
 c002fc4:	b480      	push	{r7}
 c002fc6:	b083      	sub	sp, #12
 c002fc8:	af00      	add	r7, sp, #0
 c002fca:	6078      	str	r0, [r7, #4]
 c002fcc:	460b      	mov	r3, r1
 c002fce:	807b      	strh	r3, [r7, #2]
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
 c002fd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 c002fd4:	115b      	asrs	r3, r3, #5
 c002fd6:	b21b      	sxth	r3, r3
 c002fd8:	009b      	lsls	r3, r3, #2
 c002fda:	687a      	ldr	r2, [r7, #4]
 c002fdc:	4413      	add	r3, r2
 c002fde:	681a      	ldr	r2, [r3, #0]
 c002fe0:	887b      	ldrh	r3, [r7, #2]
 c002fe2:	f003 031f 	and.w	r3, r3, #31
 c002fe6:	2101      	movs	r1, #1
 c002fe8:	fa01 f303 	lsl.w	r3, r1, r3
 c002fec:	4013      	ands	r3, r2
}
 c002fee:	4618      	mov	r0, r3
 c002ff0:	370c      	adds	r7, #12
 c002ff2:	46bd      	mov	sp, r7
 c002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002ff8:	4770      	bx	lr

0c002ffa <vli_numDigits>:

/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const uECC_word_t *vli, const wordcount_t max_words) {
 c002ffa:	b480      	push	{r7}
 c002ffc:	b085      	sub	sp, #20
 c002ffe:	af00      	add	r7, sp, #0
 c003000:	6078      	str	r0, [r7, #4]
 c003002:	460b      	mov	r3, r1
 c003004:	70fb      	strb	r3, [r7, #3]
    wordcount_t i;
    /* Search from the end until we find a non-zero digit.
       We do it in reverse because we expect that most digits will be nonzero. */
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 c003006:	78fb      	ldrb	r3, [r7, #3]
 c003008:	3b01      	subs	r3, #1
 c00300a:	b2db      	uxtb	r3, r3
 c00300c:	73fb      	strb	r3, [r7, #15]
 c00300e:	e003      	b.n	c003018 <vli_numDigits+0x1e>
 c003010:	7bfb      	ldrb	r3, [r7, #15]
 c003012:	3b01      	subs	r3, #1
 c003014:	b2db      	uxtb	r3, r3
 c003016:	73fb      	strb	r3, [r7, #15]
 c003018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c00301c:	2b00      	cmp	r3, #0
 c00301e:	db07      	blt.n	c003030 <vli_numDigits+0x36>
 c003020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c003024:	009b      	lsls	r3, r3, #2
 c003026:	687a      	ldr	r2, [r7, #4]
 c003028:	4413      	add	r3, r2
 c00302a:	681b      	ldr	r3, [r3, #0]
 c00302c:	2b00      	cmp	r3, #0
 c00302e:	d0ef      	beq.n	c003010 <vli_numDigits+0x16>
    }

    return (i + 1);
 c003030:	7bfb      	ldrb	r3, [r7, #15]
 c003032:	3301      	adds	r3, #1
 c003034:	b2db      	uxtb	r3, r3
 c003036:	b25b      	sxtb	r3, r3
}
 c003038:	4618      	mov	r0, r3
 c00303a:	3714      	adds	r7, #20
 c00303c:	46bd      	mov	sp, r7
 c00303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003042:	4770      	bx	lr

0c003044 <uECC_vli_numBits>:

/* Counts the number of bits required to represent vli. */
uECC_VLI_API bitcount_t uECC_vli_numBits(const uECC_word_t *vli, const wordcount_t max_words) {
 c003044:	b580      	push	{r7, lr}
 c003046:	b086      	sub	sp, #24
 c003048:	af00      	add	r7, sp, #0
 c00304a:	6078      	str	r0, [r7, #4]
 c00304c:	460b      	mov	r3, r1
 c00304e:	70fb      	strb	r3, [r7, #3]
    uECC_word_t i;
    uECC_word_t digit;

    wordcount_t num_digits = vli_numDigits(vli, max_words);
 c003050:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003054:	4619      	mov	r1, r3
 c003056:	6878      	ldr	r0, [r7, #4]
 c003058:	f7ff ffcf 	bl	c002ffa <vli_numDigits>
 c00305c:	4603      	mov	r3, r0
 c00305e:	73fb      	strb	r3, [r7, #15]
    if (num_digits == 0) {
 c003060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c003064:	2b00      	cmp	r3, #0
 c003066:	d101      	bne.n	c00306c <uECC_vli_numBits+0x28>
        return 0;
 c003068:	2300      	movs	r3, #0
 c00306a:	e021      	b.n	c0030b0 <uECC_vli_numBits+0x6c>
    }

    digit = vli[num_digits - 1];
 c00306c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c003070:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c003074:	3b01      	subs	r3, #1
 c003076:	009b      	lsls	r3, r3, #2
 c003078:	687a      	ldr	r2, [r7, #4]
 c00307a:	4413      	add	r3, r2
 c00307c:	681b      	ldr	r3, [r3, #0]
 c00307e:	613b      	str	r3, [r7, #16]
    for (i = 0; digit; ++i) {
 c003080:	2300      	movs	r3, #0
 c003082:	617b      	str	r3, [r7, #20]
 c003084:	e005      	b.n	c003092 <uECC_vli_numBits+0x4e>
        digit >>= 1;
 c003086:	693b      	ldr	r3, [r7, #16]
 c003088:	085b      	lsrs	r3, r3, #1
 c00308a:	613b      	str	r3, [r7, #16]
    for (i = 0; digit; ++i) {
 c00308c:	697b      	ldr	r3, [r7, #20]
 c00308e:	3301      	adds	r3, #1
 c003090:	617b      	str	r3, [r7, #20]
 c003092:	693b      	ldr	r3, [r7, #16]
 c003094:	2b00      	cmp	r3, #0
 c003096:	d1f6      	bne.n	c003086 <uECC_vli_numBits+0x42>
    }

    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
 c003098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c00309c:	b29b      	uxth	r3, r3
 c00309e:	3b01      	subs	r3, #1
 c0030a0:	b29b      	uxth	r3, r3
 c0030a2:	015b      	lsls	r3, r3, #5
 c0030a4:	b29a      	uxth	r2, r3
 c0030a6:	697b      	ldr	r3, [r7, #20]
 c0030a8:	b29b      	uxth	r3, r3
 c0030aa:	4413      	add	r3, r2
 c0030ac:	b29b      	uxth	r3, r3
 c0030ae:	b21b      	sxth	r3, r3
}
 c0030b0:	4618      	mov	r0, r3
 c0030b2:	3718      	adds	r7, #24
 c0030b4:	46bd      	mov	sp, r7
 c0030b6:	bd80      	pop	{r7, pc}

0c0030b8 <uECC_vli_set>:

/* Sets dest = src. */
#if !asm_set
uECC_VLI_API void uECC_vli_set(uECC_word_t *dest, const uECC_word_t *src, wordcount_t num_words) {
 c0030b8:	b480      	push	{r7}
 c0030ba:	b087      	sub	sp, #28
 c0030bc:	af00      	add	r7, sp, #0
 c0030be:	60f8      	str	r0, [r7, #12]
 c0030c0:	60b9      	str	r1, [r7, #8]
 c0030c2:	4613      	mov	r3, r2
 c0030c4:	71fb      	strb	r3, [r7, #7]
    wordcount_t i;
    for (i = 0; i < num_words; ++i) {
 c0030c6:	2300      	movs	r3, #0
 c0030c8:	75fb      	strb	r3, [r7, #23]
 c0030ca:	e00f      	b.n	c0030ec <uECC_vli_set+0x34>
        dest[i] = src[i];
 c0030cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c0030d0:	009b      	lsls	r3, r3, #2
 c0030d2:	68ba      	ldr	r2, [r7, #8]
 c0030d4:	441a      	add	r2, r3
 c0030d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c0030da:	009b      	lsls	r3, r3, #2
 c0030dc:	68f9      	ldr	r1, [r7, #12]
 c0030de:	440b      	add	r3, r1
 c0030e0:	6812      	ldr	r2, [r2, #0]
 c0030e2:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 c0030e4:	7dfb      	ldrb	r3, [r7, #23]
 c0030e6:	3301      	adds	r3, #1
 c0030e8:	b2db      	uxtb	r3, r3
 c0030ea:	75fb      	strb	r3, [r7, #23]
 c0030ec:	f997 2017 	ldrsb.w	r2, [r7, #23]
 c0030f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0030f4:	429a      	cmp	r2, r3
 c0030f6:	dbe9      	blt.n	c0030cc <uECC_vli_set+0x14>
    }
}
 c0030f8:	bf00      	nop
 c0030fa:	bf00      	nop
 c0030fc:	371c      	adds	r7, #28
 c0030fe:	46bd      	mov	sp, r7
 c003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003104:	4770      	bx	lr

0c003106 <uECC_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t uECC_vli_cmp_unsafe(const uECC_word_t *left,
                                       const uECC_word_t *right,
                                       wordcount_t num_words) {
 c003106:	b480      	push	{r7}
 c003108:	b087      	sub	sp, #28
 c00310a:	af00      	add	r7, sp, #0
 c00310c:	60f8      	str	r0, [r7, #12]
 c00310e:	60b9      	str	r1, [r7, #8]
 c003110:	4613      	mov	r3, r2
 c003112:	71fb      	strb	r3, [r7, #7]
    wordcount_t i;
    for (i = num_words - 1; i >= 0; --i) {
 c003114:	79fb      	ldrb	r3, [r7, #7]
 c003116:	3b01      	subs	r3, #1
 c003118:	b2db      	uxtb	r3, r3
 c00311a:	75fb      	strb	r3, [r7, #23]
 c00311c:	e024      	b.n	c003168 <uECC_vli_cmp_unsafe+0x62>
        if (left[i] > right[i]) {
 c00311e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c003122:	009b      	lsls	r3, r3, #2
 c003124:	68fa      	ldr	r2, [r7, #12]
 c003126:	4413      	add	r3, r2
 c003128:	681a      	ldr	r2, [r3, #0]
 c00312a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c00312e:	009b      	lsls	r3, r3, #2
 c003130:	68b9      	ldr	r1, [r7, #8]
 c003132:	440b      	add	r3, r1
 c003134:	681b      	ldr	r3, [r3, #0]
 c003136:	429a      	cmp	r2, r3
 c003138:	d901      	bls.n	c00313e <uECC_vli_cmp_unsafe+0x38>
            return 1;
 c00313a:	2301      	movs	r3, #1
 c00313c:	e019      	b.n	c003172 <uECC_vli_cmp_unsafe+0x6c>
        } else if (left[i] < right[i]) {
 c00313e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c003142:	009b      	lsls	r3, r3, #2
 c003144:	68fa      	ldr	r2, [r7, #12]
 c003146:	4413      	add	r3, r2
 c003148:	681a      	ldr	r2, [r3, #0]
 c00314a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c00314e:	009b      	lsls	r3, r3, #2
 c003150:	68b9      	ldr	r1, [r7, #8]
 c003152:	440b      	add	r3, r1
 c003154:	681b      	ldr	r3, [r3, #0]
 c003156:	429a      	cmp	r2, r3
 c003158:	d202      	bcs.n	c003160 <uECC_vli_cmp_unsafe+0x5a>
            return -1;
 c00315a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00315e:	e008      	b.n	c003172 <uECC_vli_cmp_unsafe+0x6c>
    for (i = num_words - 1; i >= 0; --i) {
 c003160:	7dfb      	ldrb	r3, [r7, #23]
 c003162:	3b01      	subs	r3, #1
 c003164:	b2db      	uxtb	r3, r3
 c003166:	75fb      	strb	r3, [r7, #23]
 c003168:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c00316c:	2b00      	cmp	r3, #0
 c00316e:	dad6      	bge.n	c00311e <uECC_vli_cmp_unsafe+0x18>
        }
    }
    return 0;
 c003170:	2300      	movs	r3, #0
}
 c003172:	4618      	mov	r0, r3
 c003174:	371c      	adds	r7, #28
 c003176:	46bd      	mov	sp, r7
 c003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00317c:	4770      	bx	lr

0c00317e <uECC_vli_equal>:

/* Constant-time comparison function - secure way to compare long integers */
/* Returns one if left == right, zero otherwise. */
uECC_VLI_API uECC_word_t uECC_vli_equal(const uECC_word_t *left,
                                        const uECC_word_t *right,
                                        wordcount_t num_words) {
 c00317e:	b480      	push	{r7}
 c003180:	b087      	sub	sp, #28
 c003182:	af00      	add	r7, sp, #0
 c003184:	60f8      	str	r0, [r7, #12]
 c003186:	60b9      	str	r1, [r7, #8]
 c003188:	4613      	mov	r3, r2
 c00318a:	71fb      	strb	r3, [r7, #7]
    uECC_word_t diff = 0;
 c00318c:	2300      	movs	r3, #0
 c00318e:	617b      	str	r3, [r7, #20]
    wordcount_t i;
    for (i = num_words - 1; i >= 0; --i) {
 c003190:	79fb      	ldrb	r3, [r7, #7]
 c003192:	3b01      	subs	r3, #1
 c003194:	b2db      	uxtb	r3, r3
 c003196:	74fb      	strb	r3, [r7, #19]
 c003198:	e013      	b.n	c0031c2 <uECC_vli_equal+0x44>
        diff |= (left[i] ^ right[i]);
 c00319a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 c00319e:	009b      	lsls	r3, r3, #2
 c0031a0:	68fa      	ldr	r2, [r7, #12]
 c0031a2:	4413      	add	r3, r2
 c0031a4:	681a      	ldr	r2, [r3, #0]
 c0031a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 c0031aa:	009b      	lsls	r3, r3, #2
 c0031ac:	68b9      	ldr	r1, [r7, #8]
 c0031ae:	440b      	add	r3, r1
 c0031b0:	681b      	ldr	r3, [r3, #0]
 c0031b2:	4053      	eors	r3, r2
 c0031b4:	697a      	ldr	r2, [r7, #20]
 c0031b6:	4313      	orrs	r3, r2
 c0031b8:	617b      	str	r3, [r7, #20]
    for (i = num_words - 1; i >= 0; --i) {
 c0031ba:	7cfb      	ldrb	r3, [r7, #19]
 c0031bc:	3b01      	subs	r3, #1
 c0031be:	b2db      	uxtb	r3, r3
 c0031c0:	74fb      	strb	r3, [r7, #19]
 c0031c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 c0031c6:	2b00      	cmp	r3, #0
 c0031c8:	dae7      	bge.n	c00319a <uECC_vli_equal+0x1c>
    }
    return (diff == 0);
 c0031ca:	697b      	ldr	r3, [r7, #20]
 c0031cc:	2b00      	cmp	r3, #0
 c0031ce:	bf0c      	ite	eq
 c0031d0:	2301      	moveq	r3, #1
 c0031d2:	2300      	movne	r3, #0
 c0031d4:	b2db      	uxtb	r3, r3
}
 c0031d6:	4618      	mov	r0, r3
 c0031d8:	371c      	adds	r7, #28
 c0031da:	46bd      	mov	sp, r7
 c0031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0031e0:	4770      	bx	lr

0c0031e2 <uECC_vli_cmp>:
                                      wordcount_t num_words);

/* Returns sign of left - right, in constant time. */
uECC_VLI_API cmpresult_t uECC_vli_cmp(const uECC_word_t *left,
                                      const uECC_word_t *right,
                                      wordcount_t num_words) {
 c0031e2:	b580      	push	{r7, lr}
 c0031e4:	b08e      	sub	sp, #56	; 0x38
 c0031e6:	af00      	add	r7, sp, #0
 c0031e8:	60f8      	str	r0, [r7, #12]
 c0031ea:	60b9      	str	r1, [r7, #8]
 c0031ec:	4613      	mov	r3, r2
 c0031ee:	71fb      	strb	r3, [r7, #7]
    uECC_word_t tmp[uECC_MAX_WORDS];
    uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
 c0031f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0031f4:	f107 0010 	add.w	r0, r7, #16
 c0031f8:	68ba      	ldr	r2, [r7, #8]
 c0031fa:	68f9      	ldr	r1, [r7, #12]
 c0031fc:	f7ff fdf8 	bl	c002df0 <uECC_vli_sub>
 c003200:	4603      	mov	r3, r0
 c003202:	2b00      	cmp	r3, #0
 c003204:	bf14      	ite	ne
 c003206:	2301      	movne	r3, #1
 c003208:	2300      	moveq	r3, #0
 c00320a:	b2db      	uxtb	r3, r3
 c00320c:	637b      	str	r3, [r7, #52]	; 0x34
    uECC_word_t equal = uECC_vli_isZero(tmp, num_words);
 c00320e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 c003212:	f107 0310 	add.w	r3, r7, #16
 c003216:	4611      	mov	r1, r2
 c003218:	4618      	mov	r0, r3
 c00321a:	f7ff fea9 	bl	c002f70 <uECC_vli_isZero>
 c00321e:	6338      	str	r0, [r7, #48]	; 0x30
    return (!equal - 2 * neg);
 c003220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c003222:	2b00      	cmp	r3, #0
 c003224:	bf0c      	ite	eq
 c003226:	2301      	moveq	r3, #1
 c003228:	2300      	movne	r3, #0
 c00322a:	b2db      	uxtb	r3, r3
 c00322c:	461a      	mov	r2, r3
 c00322e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c003230:	b2db      	uxtb	r3, r3
 c003232:	005b      	lsls	r3, r3, #1
 c003234:	b2db      	uxtb	r3, r3
 c003236:	1ad3      	subs	r3, r2, r3
 c003238:	b2db      	uxtb	r3, r3
 c00323a:	b25b      	sxtb	r3, r3
}
 c00323c:	4618      	mov	r0, r3
 c00323e:	3738      	adds	r7, #56	; 0x38
 c003240:	46bd      	mov	sp, r7
 c003242:	bd80      	pop	{r7, pc}

0c003244 <uECC_vli_rshift1>:

/* Computes vli = vli >> 1. */
#if !asm_rshift1
uECC_VLI_API void uECC_vli_rshift1(uECC_word_t *vli, wordcount_t num_words) {
 c003244:	b480      	push	{r7}
 c003246:	b087      	sub	sp, #28
 c003248:	af00      	add	r7, sp, #0
 c00324a:	6078      	str	r0, [r7, #4]
 c00324c:	460b      	mov	r3, r1
 c00324e:	70fb      	strb	r3, [r7, #3]
    uECC_word_t *end = vli;
 c003250:	687b      	ldr	r3, [r7, #4]
 c003252:	613b      	str	r3, [r7, #16]
    uECC_word_t carry = 0;
 c003254:	2300      	movs	r3, #0
 c003256:	617b      	str	r3, [r7, #20]

    vli += num_words;
 c003258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c00325c:	009b      	lsls	r3, r3, #2
 c00325e:	687a      	ldr	r2, [r7, #4]
 c003260:	4413      	add	r3, r2
 c003262:	607b      	str	r3, [r7, #4]
    while (vli-- > end) {
 c003264:	e00b      	b.n	c00327e <uECC_vli_rshift1+0x3a>
        uECC_word_t temp = *vli;
 c003266:	687b      	ldr	r3, [r7, #4]
 c003268:	681b      	ldr	r3, [r3, #0]
 c00326a:	60fb      	str	r3, [r7, #12]
        *vli = (temp >> 1) | carry;
 c00326c:	68fb      	ldr	r3, [r7, #12]
 c00326e:	085a      	lsrs	r2, r3, #1
 c003270:	697b      	ldr	r3, [r7, #20]
 c003272:	431a      	orrs	r2, r3
 c003274:	687b      	ldr	r3, [r7, #4]
 c003276:	601a      	str	r2, [r3, #0]
        carry = temp << (uECC_WORD_BITS - 1);
 c003278:	68fb      	ldr	r3, [r7, #12]
 c00327a:	07db      	lsls	r3, r3, #31
 c00327c:	617b      	str	r3, [r7, #20]
    while (vli-- > end) {
 c00327e:	687b      	ldr	r3, [r7, #4]
 c003280:	1f1a      	subs	r2, r3, #4
 c003282:	607a      	str	r2, [r7, #4]
 c003284:	693a      	ldr	r2, [r7, #16]
 c003286:	429a      	cmp	r2, r3
 c003288:	d3ed      	bcc.n	c003266 <uECC_vli_rshift1+0x22>
    }
}
 c00328a:	bf00      	nop
 c00328c:	bf00      	nop
 c00328e:	371c      	adds	r7, #28
 c003290:	46bd      	mov	sp, r7
 c003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003296:	4770      	bx	lr

0c003298 <uECC_vli_modAdd>:
   Assumes that left < mod and right < mod, and that result does not overlap mod. */
uECC_VLI_API void uECC_vli_modAdd(uECC_word_t *result,
                                  const uECC_word_t *left,
                                  const uECC_word_t *right,
                                  const uECC_word_t *mod,
                                  wordcount_t num_words) {
 c003298:	b580      	push	{r7, lr}
 c00329a:	b086      	sub	sp, #24
 c00329c:	af00      	add	r7, sp, #0
 c00329e:	60f8      	str	r0, [r7, #12]
 c0032a0:	60b9      	str	r1, [r7, #8]
 c0032a2:	607a      	str	r2, [r7, #4]
 c0032a4:	603b      	str	r3, [r7, #0]
    uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
 c0032a6:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c0032aa:	687a      	ldr	r2, [r7, #4]
 c0032ac:	68b9      	ldr	r1, [r7, #8]
 c0032ae:	68f8      	ldr	r0, [r7, #12]
 c0032b0:	f7ff fd56 	bl	c002d60 <uECC_vli_add>
 c0032b4:	6178      	str	r0, [r7, #20]
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
 c0032b6:	697b      	ldr	r3, [r7, #20]
 c0032b8:	2b00      	cmp	r3, #0
 c0032ba:	d109      	bne.n	c0032d0 <uECC_vli_modAdd+0x38>
 c0032bc:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c0032c0:	461a      	mov	r2, r3
 c0032c2:	68f9      	ldr	r1, [r7, #12]
 c0032c4:	6838      	ldr	r0, [r7, #0]
 c0032c6:	f7ff ff1e 	bl	c003106 <uECC_vli_cmp_unsafe>
 c0032ca:	4603      	mov	r3, r0
 c0032cc:	2b01      	cmp	r3, #1
 c0032ce:	d006      	beq.n	c0032de <uECC_vli_modAdd+0x46>
        /* result > mod (result = mod + remainder), so subtract mod to get remainder. */
        uECC_vli_sub(result, result, mod, num_words);
 c0032d0:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c0032d4:	683a      	ldr	r2, [r7, #0]
 c0032d6:	68f9      	ldr	r1, [r7, #12]
 c0032d8:	68f8      	ldr	r0, [r7, #12]
 c0032da:	f7ff fd89 	bl	c002df0 <uECC_vli_sub>
    }
}
 c0032de:	bf00      	nop
 c0032e0:	3718      	adds	r7, #24
 c0032e2:	46bd      	mov	sp, r7
 c0032e4:	bd80      	pop	{r7, pc}

0c0032e6 <uECC_vli_modSub>:
   Assumes that left < mod and right < mod, and that result does not overlap mod. */
uECC_VLI_API void uECC_vli_modSub(uECC_word_t *result,
                                  const uECC_word_t *left,
                                  const uECC_word_t *right,
                                  const uECC_word_t *mod,
                                  wordcount_t num_words) {
 c0032e6:	b580      	push	{r7, lr}
 c0032e8:	b086      	sub	sp, #24
 c0032ea:	af00      	add	r7, sp, #0
 c0032ec:	60f8      	str	r0, [r7, #12]
 c0032ee:	60b9      	str	r1, [r7, #8]
 c0032f0:	607a      	str	r2, [r7, #4]
 c0032f2:	603b      	str	r3, [r7, #0]
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
 c0032f4:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c0032f8:	687a      	ldr	r2, [r7, #4]
 c0032fa:	68b9      	ldr	r1, [r7, #8]
 c0032fc:	68f8      	ldr	r0, [r7, #12]
 c0032fe:	f7ff fd77 	bl	c002df0 <uECC_vli_sub>
 c003302:	6178      	str	r0, [r7, #20]
    if (l_borrow) {
 c003304:	697b      	ldr	r3, [r7, #20]
 c003306:	2b00      	cmp	r3, #0
 c003308:	d006      	beq.n	c003318 <uECC_vli_modSub+0x32>
        /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
           we can get the correct result from result + mod (with overflow). */
        uECC_vli_add(result, result, mod, num_words);
 c00330a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 c00330e:	683a      	ldr	r2, [r7, #0]
 c003310:	68f9      	ldr	r1, [r7, #12]
 c003312:	68f8      	ldr	r0, [r7, #12]
 c003314:	f7ff fd24 	bl	c002d60 <uECC_vli_add>
    }
}
 c003318:	bf00      	nop
 c00331a:	3718      	adds	r7, #24
 c00331c:	46bd      	mov	sp, r7
 c00331e:	bd80      	pop	{r7, pc}

0c003320 <uECC_vli_mmod>:
/* Computes result = product % mod, where product is 2N words long. */
/* Currently only designed to work for curve_p or curve_n. */
uECC_VLI_API void uECC_vli_mmod(uECC_word_t *result,
                                uECC_word_t *product,
                                const uECC_word_t *mod,
                                wordcount_t num_words) {
 c003320:	b590      	push	{r4, r7, lr}
 c003322:	b0ad      	sub	sp, #180	; 0xb4
 c003324:	af00      	add	r7, sp, #0
 c003326:	60f8      	str	r0, [r7, #12]
 c003328:	60b9      	str	r1, [r7, #8]
 c00332a:	607a      	str	r2, [r7, #4]
 c00332c:	70fb      	strb	r3, [r7, #3]
    uECC_word_t mod_multiple[2 * uECC_MAX_WORDS];
    uECC_word_t tmp[2 * uECC_MAX_WORDS];
    uECC_word_t *v[2] = {tmp, product};
 c00332e:	f107 0318 	add.w	r3, r7, #24
 c003332:	613b      	str	r3, [r7, #16]
 c003334:	68bb      	ldr	r3, [r7, #8]
 c003336:	617b      	str	r3, [r7, #20]
    uECC_word_t index;

    /* Shift mod so its highest set bit is at the maximum position. */
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
 c003338:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c00333c:	b29b      	uxth	r3, r3
 c00333e:	019b      	lsls	r3, r3, #6
 c003340:	b29c      	uxth	r4, r3
 c003342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003346:	4619      	mov	r1, r3
 c003348:	6878      	ldr	r0, [r7, #4]
 c00334a:	f7ff fe7b 	bl	c003044 <uECC_vli_numBits>
 c00334e:	4603      	mov	r3, r0
 c003350:	b29b      	uxth	r3, r3
 c003352:	1ae3      	subs	r3, r4, r3
 c003354:	b29b      	uxth	r3, r3
 c003356:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
    wordcount_t word_shift = shift / uECC_WORD_BITS;
 c00335a:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 c00335e:	2b00      	cmp	r3, #0
 c003360:	da00      	bge.n	c003364 <uECC_vli_mmod+0x44>
 c003362:	331f      	adds	r3, #31
 c003364:	115b      	asrs	r3, r3, #5
 c003366:	b21b      	sxth	r3, r3
 c003368:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
    wordcount_t bit_shift = shift % uECC_WORD_BITS;
 c00336c:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 c003370:	425a      	negs	r2, r3
 c003372:	f003 031f 	and.w	r3, r3, #31
 c003376:	f002 021f 	and.w	r2, r2, #31
 c00337a:	bf58      	it	pl
 c00337c:	4253      	negpl	r3, r2
 c00337e:	b21b      	sxth	r3, r3
 c003380:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
    uECC_word_t carry = 0;
 c003384:	2300      	movs	r3, #0
 c003386:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    uECC_vli_clear(mod_multiple, word_shift);
 c00338a:	f997 209e 	ldrsb.w	r2, [r7, #158]	; 0x9e
 c00338e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 c003392:	4611      	mov	r1, r2
 c003394:	4618      	mov	r0, r3
 c003396:	f7ff fdca 	bl	c002f2e <uECC_vli_clear>
    if (bit_shift > 0) {
 c00339a:	f997 309d 	ldrsb.w	r3, [r7, #157]	; 0x9d
 c00339e:	2b00      	cmp	r3, #0
 c0033a0:	dd34      	ble.n	c00340c <uECC_vli_mmod+0xec>
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
 c0033a2:	2300      	movs	r3, #0
 c0033a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c0033a8:	e029      	b.n	c0033fe <uECC_vli_mmod+0xde>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
 c0033aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c0033ae:	009b      	lsls	r3, r3, #2
 c0033b0:	687a      	ldr	r2, [r7, #4]
 c0033b2:	4413      	add	r3, r2
 c0033b4:	681a      	ldr	r2, [r3, #0]
 c0033b6:	f997 309d 	ldrsb.w	r3, [r7, #157]	; 0x9d
 c0033ba:	fa02 f103 	lsl.w	r1, r2, r3
 c0033be:	f997 209e 	ldrsb.w	r2, [r7, #158]	; 0x9e
 c0033c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c0033c6:	4413      	add	r3, r2
 c0033c8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 c0033cc:	430a      	orrs	r2, r1
 c0033ce:	009b      	lsls	r3, r3, #2
 c0033d0:	33b0      	adds	r3, #176	; 0xb0
 c0033d2:	443b      	add	r3, r7
 c0033d4:	f843 2c58 	str.w	r2, [r3, #-88]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
 c0033d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c0033dc:	009b      	lsls	r3, r3, #2
 c0033de:	687a      	ldr	r2, [r7, #4]
 c0033e0:	4413      	add	r3, r2
 c0033e2:	681a      	ldr	r2, [r3, #0]
 c0033e4:	f997 309d 	ldrsb.w	r3, [r7, #157]	; 0x9d
 c0033e8:	f1c3 0320 	rsb	r3, r3, #32
 c0033ec:	fa22 f303 	lsr.w	r3, r2, r3
 c0033f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
 c0033f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c0033f8:	3301      	adds	r3, #1
 c0033fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c0033fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003402:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 c003406:	429a      	cmp	r2, r3
 c003408:	d3cf      	bcc.n	c0033aa <uECC_vli_mmod+0x8a>
 c00340a:	e00b      	b.n	c003424 <uECC_vli_mmod+0x104>
        }
    } else {
        uECC_vli_set(mod_multiple + word_shift, mod, num_words);
 c00340c:	f997 309e 	ldrsb.w	r3, [r7, #158]	; 0x9e
 c003410:	009b      	lsls	r3, r3, #2
 c003412:	f107 0258 	add.w	r2, r7, #88	; 0x58
 c003416:	4413      	add	r3, r2
 c003418:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c00341c:	6879      	ldr	r1, [r7, #4]
 c00341e:	4618      	mov	r0, r3
 c003420:	f7ff fe4a 	bl	c0030b8 <uECC_vli_set>
    }

    for (index = 1; shift >= 0; --shift) {
 c003424:	2301      	movs	r3, #1
 c003426:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c00342a:	e09f      	b.n	c00356c <uECC_vli_mmod+0x24c>
        uECC_word_t borrow = 0;
 c00342c:	2300      	movs	r3, #0
 c00342e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        wordcount_t i;
        for (i = 0; i < num_words * 2; ++i) {
 c003432:	2300      	movs	r3, #0
 c003434:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 c003438:	e053      	b.n	c0034e2 <uECC_vli_mmod+0x1c2>
            uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 c00343a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c00343e:	009b      	lsls	r3, r3, #2
 c003440:	33b0      	adds	r3, #176	; 0xb0
 c003442:	443b      	add	r3, r7
 c003444:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 c003448:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 c00344c:	009b      	lsls	r3, r3, #2
 c00344e:	4413      	add	r3, r2
 c003450:	681a      	ldr	r2, [r3, #0]
 c003452:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 c003456:	009b      	lsls	r3, r3, #2
 c003458:	33b0      	adds	r3, #176	; 0xb0
 c00345a:	443b      	add	r3, r7
 c00345c:	f853 3c58 	ldr.w	r3, [r3, #-88]
 c003460:	1ad2      	subs	r2, r2, r3
 c003462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 c003466:	1ad3      	subs	r3, r2, r3
 c003468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            if (diff != v[index][i]) {
 c00346c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c003470:	009b      	lsls	r3, r3, #2
 c003472:	33b0      	adds	r3, #176	; 0xb0
 c003474:	443b      	add	r3, r7
 c003476:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 c00347a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 c00347e:	009b      	lsls	r3, r3, #2
 c003480:	4413      	add	r3, r2
 c003482:	681b      	ldr	r3, [r3, #0]
 c003484:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 c003488:	429a      	cmp	r2, r3
 c00348a:	d014      	beq.n	c0034b6 <uECC_vli_mmod+0x196>
                borrow = (diff > v[index][i]);
 c00348c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c003490:	009b      	lsls	r3, r3, #2
 c003492:	33b0      	adds	r3, #176	; 0xb0
 c003494:	443b      	add	r3, r7
 c003496:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 c00349a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 c00349e:	009b      	lsls	r3, r3, #2
 c0034a0:	4413      	add	r3, r2
 c0034a2:	681b      	ldr	r3, [r3, #0]
 c0034a4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 c0034a8:	429a      	cmp	r2, r3
 c0034aa:	bf8c      	ite	hi
 c0034ac:	2301      	movhi	r3, #1
 c0034ae:	2300      	movls	r3, #0
 c0034b0:	b2db      	uxtb	r3, r3
 c0034b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            }
            v[1 - index][i] = diff;
 c0034b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c0034ba:	f1c3 0301 	rsb	r3, r3, #1
 c0034be:	009b      	lsls	r3, r3, #2
 c0034c0:	33b0      	adds	r3, #176	; 0xb0
 c0034c2:	443b      	add	r3, r7
 c0034c4:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 c0034c8:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 c0034cc:	009b      	lsls	r3, r3, #2
 c0034ce:	4413      	add	r3, r2
 c0034d0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 c0034d4:	601a      	str	r2, [r3, #0]
        for (i = 0; i < num_words * 2; ++i) {
 c0034d6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 c0034da:	3301      	adds	r3, #1
 c0034dc:	b2db      	uxtb	r3, r3
 c0034de:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 c0034e2:	f997 209f 	ldrsb.w	r2, [r7, #159]	; 0x9f
 c0034e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0034ea:	005b      	lsls	r3, r3, #1
 c0034ec:	429a      	cmp	r2, r3
 c0034ee:	dba4      	blt.n	c00343a <uECC_vli_mmod+0x11a>
        }
        index = !(index ^ borrow); /* Swap the index if there was no borrow */
 c0034f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 c0034f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 c0034f8:	429a      	cmp	r2, r3
 c0034fa:	bf0c      	ite	eq
 c0034fc:	2301      	moveq	r3, #1
 c0034fe:	2300      	movne	r3, #0
 c003500:	b2db      	uxtb	r3, r3
 c003502:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        uECC_vli_rshift1(mod_multiple, num_words);
 c003506:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c00350a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 c00350e:	4611      	mov	r1, r2
 c003510:	4618      	mov	r0, r3
 c003512:	f7ff fe97 	bl	c003244 <uECC_vli_rshift1>
        mod_multiple[num_words - 1] |= mod_multiple[num_words] << (uECC_WORD_BITS - 1);
 c003516:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c00351a:	3b01      	subs	r3, #1
 c00351c:	009b      	lsls	r3, r3, #2
 c00351e:	33b0      	adds	r3, #176	; 0xb0
 c003520:	443b      	add	r3, r7
 c003522:	f853 1c58 	ldr.w	r1, [r3, #-88]
 c003526:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c00352a:	009b      	lsls	r3, r3, #2
 c00352c:	33b0      	adds	r3, #176	; 0xb0
 c00352e:	443b      	add	r3, r7
 c003530:	f853 3c58 	ldr.w	r3, [r3, #-88]
 c003534:	07da      	lsls	r2, r3, #31
 c003536:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c00353a:	3b01      	subs	r3, #1
 c00353c:	430a      	orrs	r2, r1
 c00353e:	009b      	lsls	r3, r3, #2
 c003540:	33b0      	adds	r3, #176	; 0xb0
 c003542:	443b      	add	r3, r7
 c003544:	f843 2c58 	str.w	r2, [r3, #-88]
        uECC_vli_rshift1(mod_multiple + num_words, num_words);
 c003548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c00354c:	009b      	lsls	r3, r3, #2
 c00354e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 c003552:	4413      	add	r3, r2
 c003554:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003558:	4611      	mov	r1, r2
 c00355a:	4618      	mov	r0, r3
 c00355c:	f7ff fe72 	bl	c003244 <uECC_vli_rshift1>
    for (index = 1; shift >= 0; --shift) {
 c003560:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 c003564:	3b01      	subs	r3, #1
 c003566:	b29b      	uxth	r3, r3
 c003568:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 c00356c:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 c003570:	2b00      	cmp	r3, #0
 c003572:	f6bf af5b 	bge.w	c00342c <uECC_vli_mmod+0x10c>
    }
    uECC_vli_set(result, v[index], num_words);
 c003576:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c00357a:	009b      	lsls	r3, r3, #2
 c00357c:	33b0      	adds	r3, #176	; 0xb0
 c00357e:	443b      	add	r3, r7
 c003580:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 c003584:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003588:	4619      	mov	r1, r3
 c00358a:	68f8      	ldr	r0, [r7, #12]
 c00358c:	f7ff fd94 	bl	c0030b8 <uECC_vli_set>
}
 c003590:	bf00      	nop
 c003592:	37b4      	adds	r7, #180	; 0xb4
 c003594:	46bd      	mov	sp, r7
 c003596:	bd90      	pop	{r4, r7, pc}

0c003598 <uECC_vli_modMult>:
/* Computes result = (left * right) % mod. */
uECC_VLI_API void uECC_vli_modMult(uECC_word_t *result,
                                   const uECC_word_t *left,
                                   const uECC_word_t *right,
                                   const uECC_word_t *mod,
                                   wordcount_t num_words) {
 c003598:	b580      	push	{r7, lr}
 c00359a:	b094      	sub	sp, #80	; 0x50
 c00359c:	af00      	add	r7, sp, #0
 c00359e:	60f8      	str	r0, [r7, #12]
 c0035a0:	60b9      	str	r1, [r7, #8]
 c0035a2:	607a      	str	r2, [r7, #4]
 c0035a4:	603b      	str	r3, [r7, #0]
    uECC_word_t product[2 * uECC_MAX_WORDS];
    uECC_vli_mult(product, left, right, num_words);
 c0035a6:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 c0035aa:	f107 0010 	add.w	r0, r7, #16
 c0035ae:	687a      	ldr	r2, [r7, #4]
 c0035b0:	68b9      	ldr	r1, [r7, #8]
 c0035b2:	f7ff fc6b 	bl	c002e8c <uECC_vli_mult>
    uECC_vli_mmod(result, product, mod, num_words);
 c0035b6:	f997 3058 	ldrsb.w	r3, [r7, #88]	; 0x58
 c0035ba:	f107 0110 	add.w	r1, r7, #16
 c0035be:	683a      	ldr	r2, [r7, #0]
 c0035c0:	68f8      	ldr	r0, [r7, #12]
 c0035c2:	f7ff fead 	bl	c003320 <uECC_vli_mmod>
}
 c0035c6:	bf00      	nop
 c0035c8:	3750      	adds	r7, #80	; 0x50
 c0035ca:	46bd      	mov	sp, r7
 c0035cc:	bd80      	pop	{r7, pc}

0c0035ce <uECC_vli_modMult_fast>:

uECC_VLI_API void uECC_vli_modMult_fast(uECC_word_t *result,
                                        const uECC_word_t *left,
                                        const uECC_word_t *right,
                                        uECC_Curve curve) {
 c0035ce:	b580      	push	{r7, lr}
 c0035d0:	b094      	sub	sp, #80	; 0x50
 c0035d2:	af00      	add	r7, sp, #0
 c0035d4:	60f8      	str	r0, [r7, #12]
 c0035d6:	60b9      	str	r1, [r7, #8]
 c0035d8:	607a      	str	r2, [r7, #4]
 c0035da:	603b      	str	r3, [r7, #0]
    uECC_word_t product[2 * uECC_MAX_WORDS];
    uECC_vli_mult(product, left, right, curve->num_words);
 c0035dc:	683b      	ldr	r3, [r7, #0]
 c0035de:	f993 3000 	ldrsb.w	r3, [r3]
 c0035e2:	f107 0010 	add.w	r0, r7, #16
 c0035e6:	687a      	ldr	r2, [r7, #4]
 c0035e8:	68b9      	ldr	r1, [r7, #8]
 c0035ea:	f7ff fc4f 	bl	c002e8c <uECC_vli_mult>
#if (uECC_OPTIMIZATION_LEVEL > 0)
    curve->mmod_fast(result, product);
 c0035ee:	683b      	ldr	r3, [r7, #0]
 c0035f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 c0035f4:	f107 0210 	add.w	r2, r7, #16
 c0035f8:	4611      	mov	r1, r2
 c0035fa:	68f8      	ldr	r0, [r7, #12]
 c0035fc:	4798      	blx	r3
#else
    uECC_vli_mmod(result, product, curve->p, curve->num_words);
#endif
}
 c0035fe:	bf00      	nop
 c003600:	3750      	adds	r7, #80	; 0x50
 c003602:	46bd      	mov	sp, r7
 c003604:	bd80      	pop	{r7, pc}

0c003606 <uECC_vli_modSquare_fast>:
}
#endif /* uECC_ENABLE_VLI_API */

uECC_VLI_API void uECC_vli_modSquare_fast(uECC_word_t *result,
                                          const uECC_word_t *left,
                                          uECC_Curve curve) {
 c003606:	b580      	push	{r7, lr}
 c003608:	b084      	sub	sp, #16
 c00360a:	af00      	add	r7, sp, #0
 c00360c:	60f8      	str	r0, [r7, #12]
 c00360e:	60b9      	str	r1, [r7, #8]
 c003610:	607a      	str	r2, [r7, #4]
    uECC_vli_modMult_fast(result, left, left, curve);
 c003612:	687b      	ldr	r3, [r7, #4]
 c003614:	68ba      	ldr	r2, [r7, #8]
 c003616:	68b9      	ldr	r1, [r7, #8]
 c003618:	68f8      	ldr	r0, [r7, #12]
 c00361a:	f7ff ffd8 	bl	c0035ce <uECC_vli_modMult_fast>
}
 c00361e:	bf00      	nop
 c003620:	3710      	adds	r7, #16
 c003622:	46bd      	mov	sp, r7
 c003624:	bd80      	pop	{r7, pc}

0c003626 <vli_modInv_update>:
#endif /* uECC_SQUARE_FUNC */

#define EVEN(vli) (!(vli[0] & 1))
static void vli_modInv_update(uECC_word_t *uv,
                              const uECC_word_t *mod,
                              wordcount_t num_words) {
 c003626:	b580      	push	{r7, lr}
 c003628:	b086      	sub	sp, #24
 c00362a:	af00      	add	r7, sp, #0
 c00362c:	60f8      	str	r0, [r7, #12]
 c00362e:	60b9      	str	r1, [r7, #8]
 c003630:	4613      	mov	r3, r2
 c003632:	71fb      	strb	r3, [r7, #7]
    uECC_word_t carry = 0;
 c003634:	2300      	movs	r3, #0
 c003636:	617b      	str	r3, [r7, #20]
    if (!EVEN(uv)) {
 c003638:	68fb      	ldr	r3, [r7, #12]
 c00363a:	681b      	ldr	r3, [r3, #0]
 c00363c:	f003 0301 	and.w	r3, r3, #1
 c003640:	2b00      	cmp	r3, #0
 c003642:	d007      	beq.n	c003654 <vli_modInv_update+0x2e>
        carry = uECC_vli_add(uv, uv, mod, num_words);
 c003644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c003648:	68ba      	ldr	r2, [r7, #8]
 c00364a:	68f9      	ldr	r1, [r7, #12]
 c00364c:	68f8      	ldr	r0, [r7, #12]
 c00364e:	f7ff fb87 	bl	c002d60 <uECC_vli_add>
 c003652:	6178      	str	r0, [r7, #20]
    }
    uECC_vli_rshift1(uv, num_words);
 c003654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c003658:	4619      	mov	r1, r3
 c00365a:	68f8      	ldr	r0, [r7, #12]
 c00365c:	f7ff fdf2 	bl	c003244 <uECC_vli_rshift1>
    if (carry) {
 c003660:	697b      	ldr	r3, [r7, #20]
 c003662:	2b00      	cmp	r3, #0
 c003664:	d013      	beq.n	c00368e <vli_modInv_update+0x68>
        uv[num_words - 1] |= HIGH_BIT_SET;
 c003666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00366a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c00366e:	3b01      	subs	r3, #1
 c003670:	009b      	lsls	r3, r3, #2
 c003672:	68fa      	ldr	r2, [r7, #12]
 c003674:	4413      	add	r3, r2
 c003676:	681a      	ldr	r2, [r3, #0]
 c003678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00367c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c003680:	3b01      	subs	r3, #1
 c003682:	009b      	lsls	r3, r3, #2
 c003684:	68f9      	ldr	r1, [r7, #12]
 c003686:	440b      	add	r3, r1
 c003688:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 c00368c:	601a      	str	r2, [r3, #0]
    }
}
 c00368e:	bf00      	nop
 c003690:	3718      	adds	r7, #24
 c003692:	46bd      	mov	sp, r7
 c003694:	bd80      	pop	{r7, pc}

0c003696 <uECC_vli_modInv>:
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide" */
uECC_VLI_API void uECC_vli_modInv(uECC_word_t *result,
                                  const uECC_word_t *input,
                                  const uECC_word_t *mod,
                                  wordcount_t num_words) {
 c003696:	b580      	push	{r7, lr}
 c003698:	b0a6      	sub	sp, #152	; 0x98
 c00369a:	af00      	add	r7, sp, #0
 c00369c:	60f8      	str	r0, [r7, #12]
 c00369e:	60b9      	str	r1, [r7, #8]
 c0036a0:	607a      	str	r2, [r7, #4]
 c0036a2:	70fb      	strb	r3, [r7, #3]
    uECC_word_t a[uECC_MAX_WORDS], b[uECC_MAX_WORDS], u[uECC_MAX_WORDS], v[uECC_MAX_WORDS];
    cmpresult_t cmpResult;

    if (uECC_vli_isZero(input, num_words)) {
 c0036a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0036a8:	4619      	mov	r1, r3
 c0036aa:	68b8      	ldr	r0, [r7, #8]
 c0036ac:	f7ff fc60 	bl	c002f70 <uECC_vli_isZero>
 c0036b0:	4603      	mov	r3, r0
 c0036b2:	2b00      	cmp	r3, #0
 c0036b4:	d006      	beq.n	c0036c4 <uECC_vli_modInv+0x2e>
        uECC_vli_clear(result, num_words);
 c0036b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0036ba:	4619      	mov	r1, r3
 c0036bc:	68f8      	ldr	r0, [r7, #12]
 c0036be:	f7ff fc36 	bl	c002f2e <uECC_vli_clear>
 c0036c2:	e0de      	b.n	c003882 <uECC_vli_modInv+0x1ec>
        return;
    }

    uECC_vli_set(a, input, num_words);
 c0036c4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0036c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 c0036cc:	68b9      	ldr	r1, [r7, #8]
 c0036ce:	4618      	mov	r0, r3
 c0036d0:	f7ff fcf2 	bl	c0030b8 <uECC_vli_set>
    uECC_vli_set(b, mod, num_words);
 c0036d4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0036d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 c0036dc:	6879      	ldr	r1, [r7, #4]
 c0036de:	4618      	mov	r0, r3
 c0036e0:	f7ff fcea 	bl	c0030b8 <uECC_vli_set>
    uECC_vli_clear(u, num_words);
 c0036e4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0036e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c0036ec:	4611      	mov	r1, r2
 c0036ee:	4618      	mov	r0, r3
 c0036f0:	f7ff fc1d 	bl	c002f2e <uECC_vli_clear>
    u[0] = 1;
 c0036f4:	2301      	movs	r3, #1
 c0036f6:	637b      	str	r3, [r7, #52]	; 0x34
    uECC_vli_clear(v, num_words);
 c0036f8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0036fc:	f107 0314 	add.w	r3, r7, #20
 c003700:	4611      	mov	r1, r2
 c003702:	4618      	mov	r0, r3
 c003704:	f7ff fc13 	bl	c002f2e <uECC_vli_clear>
    while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 c003708:	e0a2      	b.n	c003850 <uECC_vli_modInv+0x1ba>
        if (EVEN(a)) {
 c00370a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c00370c:	f003 0301 	and.w	r3, r3, #1
 c003710:	2b00      	cmp	r3, #0
 c003712:	d110      	bne.n	c003736 <uECC_vli_modInv+0xa0>
            uECC_vli_rshift1(a, num_words);
 c003714:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003718:	f107 0374 	add.w	r3, r7, #116	; 0x74
 c00371c:	4611      	mov	r1, r2
 c00371e:	4618      	mov	r0, r3
 c003720:	f7ff fd90 	bl	c003244 <uECC_vli_rshift1>
            vli_modInv_update(u, mod, num_words);
 c003724:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003728:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c00372c:	6879      	ldr	r1, [r7, #4]
 c00372e:	4618      	mov	r0, r3
 c003730:	f7ff ff79 	bl	c003626 <vli_modInv_update>
 c003734:	e08c      	b.n	c003850 <uECC_vli_modInv+0x1ba>
        } else if (EVEN(b)) {
 c003736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c003738:	f003 0301 	and.w	r3, r3, #1
 c00373c:	2b00      	cmp	r3, #0
 c00373e:	d110      	bne.n	c003762 <uECC_vli_modInv+0xcc>
            uECC_vli_rshift1(b, num_words);
 c003740:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003744:	f107 0354 	add.w	r3, r7, #84	; 0x54
 c003748:	4611      	mov	r1, r2
 c00374a:	4618      	mov	r0, r3
 c00374c:	f7ff fd7a 	bl	c003244 <uECC_vli_rshift1>
            vli_modInv_update(v, mod, num_words);
 c003750:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003754:	f107 0314 	add.w	r3, r7, #20
 c003758:	6879      	ldr	r1, [r7, #4]
 c00375a:	4618      	mov	r0, r3
 c00375c:	f7ff ff63 	bl	c003626 <vli_modInv_update>
 c003760:	e076      	b.n	c003850 <uECC_vli_modInv+0x1ba>
        } else if (cmpResult > 0) {
 c003762:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 c003766:	2b00      	cmp	r3, #0
 c003768:	dd39      	ble.n	c0037de <uECC_vli_modInv+0x148>
            uECC_vli_sub(a, a, b, num_words);
 c00376a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c00376e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 c003772:	f107 0174 	add.w	r1, r7, #116	; 0x74
 c003776:	f107 0074 	add.w	r0, r7, #116	; 0x74
 c00377a:	f7ff fb39 	bl	c002df0 <uECC_vli_sub>
            uECC_vli_rshift1(a, num_words);
 c00377e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003782:	f107 0374 	add.w	r3, r7, #116	; 0x74
 c003786:	4611      	mov	r1, r2
 c003788:	4618      	mov	r0, r3
 c00378a:	f7ff fd5b 	bl	c003244 <uECC_vli_rshift1>
            if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
 c00378e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003792:	f107 0114 	add.w	r1, r7, #20
 c003796:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c00379a:	4618      	mov	r0, r3
 c00379c:	f7ff fcb3 	bl	c003106 <uECC_vli_cmp_unsafe>
 c0037a0:	4603      	mov	r3, r0
 c0037a2:	2b00      	cmp	r3, #0
 c0037a4:	da08      	bge.n	c0037b8 <uECC_vli_modInv+0x122>
                uECC_vli_add(u, u, mod, num_words);
 c0037a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0037aa:	f107 0134 	add.w	r1, r7, #52	; 0x34
 c0037ae:	f107 0034 	add.w	r0, r7, #52	; 0x34
 c0037b2:	687a      	ldr	r2, [r7, #4]
 c0037b4:	f7ff fad4 	bl	c002d60 <uECC_vli_add>
            }
            uECC_vli_sub(u, u, v, num_words);
 c0037b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0037bc:	f107 0214 	add.w	r2, r7, #20
 c0037c0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 c0037c4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 c0037c8:	f7ff fb12 	bl	c002df0 <uECC_vli_sub>
            vli_modInv_update(u, mod, num_words);
 c0037cc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0037d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c0037d4:	6879      	ldr	r1, [r7, #4]
 c0037d6:	4618      	mov	r0, r3
 c0037d8:	f7ff ff25 	bl	c003626 <vli_modInv_update>
 c0037dc:	e038      	b.n	c003850 <uECC_vli_modInv+0x1ba>
        } else {
            uECC_vli_sub(b, b, a, num_words);
 c0037de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c0037e2:	f107 0274 	add.w	r2, r7, #116	; 0x74
 c0037e6:	f107 0154 	add.w	r1, r7, #84	; 0x54
 c0037ea:	f107 0054 	add.w	r0, r7, #84	; 0x54
 c0037ee:	f7ff faff 	bl	c002df0 <uECC_vli_sub>
            uECC_vli_rshift1(b, num_words);
 c0037f2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c0037f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 c0037fa:	4611      	mov	r1, r2
 c0037fc:	4618      	mov	r0, r3
 c0037fe:	f7ff fd21 	bl	c003244 <uECC_vli_rshift1>
            if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
 c003802:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003806:	f107 0134 	add.w	r1, r7, #52	; 0x34
 c00380a:	f107 0314 	add.w	r3, r7, #20
 c00380e:	4618      	mov	r0, r3
 c003810:	f7ff fc79 	bl	c003106 <uECC_vli_cmp_unsafe>
 c003814:	4603      	mov	r3, r0
 c003816:	2b00      	cmp	r3, #0
 c003818:	da08      	bge.n	c00382c <uECC_vli_modInv+0x196>
                uECC_vli_add(v, v, mod, num_words);
 c00381a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c00381e:	f107 0114 	add.w	r1, r7, #20
 c003822:	f107 0014 	add.w	r0, r7, #20
 c003826:	687a      	ldr	r2, [r7, #4]
 c003828:	f7ff fa9a 	bl	c002d60 <uECC_vli_add>
            }
            uECC_vli_sub(v, v, u, num_words);
 c00382c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 c003830:	f107 0234 	add.w	r2, r7, #52	; 0x34
 c003834:	f107 0114 	add.w	r1, r7, #20
 c003838:	f107 0014 	add.w	r0, r7, #20
 c00383c:	f7ff fad8 	bl	c002df0 <uECC_vli_sub>
            vli_modInv_update(v, mod, num_words);
 c003840:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003844:	f107 0314 	add.w	r3, r7, #20
 c003848:	6879      	ldr	r1, [r7, #4]
 c00384a:	4618      	mov	r0, r3
 c00384c:	f7ff feeb 	bl	c003626 <vli_modInv_update>
    while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
 c003850:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003854:	f107 0154 	add.w	r1, r7, #84	; 0x54
 c003858:	f107 0374 	add.w	r3, r7, #116	; 0x74
 c00385c:	4618      	mov	r0, r3
 c00385e:	f7ff fc52 	bl	c003106 <uECC_vli_cmp_unsafe>
 c003862:	4603      	mov	r3, r0
 c003864:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 c003868:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 c00386c:	2b00      	cmp	r3, #0
 c00386e:	f47f af4c 	bne.w	c00370a <uECC_vli_modInv+0x74>
        }
    }
    uECC_vli_set(result, u, num_words);
 c003872:	f997 2003 	ldrsb.w	r2, [r7, #3]
 c003876:	f107 0334 	add.w	r3, r7, #52	; 0x34
 c00387a:	4619      	mov	r1, r3
 c00387c:	68f8      	ldr	r0, [r7, #12]
 c00387e:	f7ff fc1b 	bl	c0030b8 <uECC_vli_set>
}
 c003882:	3798      	adds	r7, #152	; 0x98
 c003884:	46bd      	mov	sp, r7
 c003886:	bd80      	pop	{r7, pc}

0c003888 <double_jacobian_default>:
#if uECC_SUPPORTS_secp160r1 || uECC_SUPPORTS_secp192r1 || \
    uECC_SUPPORTS_secp224r1 || uECC_SUPPORTS_secp256r1
static void double_jacobian_default(uECC_word_t * X1,
                                    uECC_word_t * Y1,
                                    uECC_word_t * Z1,
                                    uECC_Curve curve) {
 c003888:	b580      	push	{r7, lr}
 c00388a:	b098      	sub	sp, #96	; 0x60
 c00388c:	af02      	add	r7, sp, #8
 c00388e:	60f8      	str	r0, [r7, #12]
 c003890:	60b9      	str	r1, [r7, #8]
 c003892:	607a      	str	r2, [r7, #4]
 c003894:	603b      	str	r3, [r7, #0]
    /* t1 = X, t2 = Y, t3 = Z */
    uECC_word_t t4[uECC_MAX_WORDS];
    uECC_word_t t5[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
 c003896:	683b      	ldr	r3, [r7, #0]
 c003898:	781b      	ldrb	r3, [r3, #0]
 c00389a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    if (uECC_vli_isZero(Z1, num_words)) {
 c00389e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0038a2:	4619      	mov	r1, r3
 c0038a4:	6878      	ldr	r0, [r7, #4]
 c0038a6:	f7ff fb63 	bl	c002f70 <uECC_vli_isZero>
 c0038aa:	4603      	mov	r3, r0
 c0038ac:	2b00      	cmp	r3, #0
 c0038ae:	f040 80e6 	bne.w	c003a7e <double_jacobian_default+0x1f6>
        return;
    }

    uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 c0038b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 c0038b6:	683a      	ldr	r2, [r7, #0]
 c0038b8:	68b9      	ldr	r1, [r7, #8]
 c0038ba:	4618      	mov	r0, r3
 c0038bc:	f7ff fea3 	bl	c003606 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 c0038c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c0038c4:	f107 0010 	add.w	r0, r7, #16
 c0038c8:	683b      	ldr	r3, [r7, #0]
 c0038ca:	68f9      	ldr	r1, [r7, #12]
 c0038cc:	f7ff fe7f 	bl	c0035ce <uECC_vli_modMult_fast>
    uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 c0038d0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c0038d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 c0038d8:	683a      	ldr	r2, [r7, #0]
 c0038da:	4618      	mov	r0, r3
 c0038dc:	f7ff fe93 	bl	c003606 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 c0038e0:	683b      	ldr	r3, [r7, #0]
 c0038e2:	687a      	ldr	r2, [r7, #4]
 c0038e4:	68b9      	ldr	r1, [r7, #8]
 c0038e6:	68b8      	ldr	r0, [r7, #8]
 c0038e8:	f7ff fe71 	bl	c0035ce <uECC_vli_modMult_fast>
    uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 c0038ec:	683a      	ldr	r2, [r7, #0]
 c0038ee:	6879      	ldr	r1, [r7, #4]
 c0038f0:	6878      	ldr	r0, [r7, #4]
 c0038f2:	f7ff fe88 	bl	c003606 <uECC_vli_modSquare_fast>

    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 c0038f6:	683b      	ldr	r3, [r7, #0]
 c0038f8:	1d1a      	adds	r2, r3, #4
 c0038fa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0038fe:	9300      	str	r3, [sp, #0]
 c003900:	4613      	mov	r3, r2
 c003902:	687a      	ldr	r2, [r7, #4]
 c003904:	68f9      	ldr	r1, [r7, #12]
 c003906:	68f8      	ldr	r0, [r7, #12]
 c003908:	f7ff fcc6 	bl	c003298 <uECC_vli_modAdd>
    uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 c00390c:	683b      	ldr	r3, [r7, #0]
 c00390e:	1d1a      	adds	r2, r3, #4
 c003910:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003914:	9300      	str	r3, [sp, #0]
 c003916:	4613      	mov	r3, r2
 c003918:	687a      	ldr	r2, [r7, #4]
 c00391a:	6879      	ldr	r1, [r7, #4]
 c00391c:	6878      	ldr	r0, [r7, #4]
 c00391e:	f7ff fcbb 	bl	c003298 <uECC_vli_modAdd>
    uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 c003922:	683b      	ldr	r3, [r7, #0]
 c003924:	1d1a      	adds	r2, r3, #4
 c003926:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c00392a:	9300      	str	r3, [sp, #0]
 c00392c:	4613      	mov	r3, r2
 c00392e:	687a      	ldr	r2, [r7, #4]
 c003930:	68f9      	ldr	r1, [r7, #12]
 c003932:	6878      	ldr	r0, [r7, #4]
 c003934:	f7ff fcd7 	bl	c0032e6 <uECC_vli_modSub>
    uECC_vli_modMult_fast(X1, X1, Z1, curve);                /* t1 = x1^2 - z1^4 */
 c003938:	683b      	ldr	r3, [r7, #0]
 c00393a:	687a      	ldr	r2, [r7, #4]
 c00393c:	68f9      	ldr	r1, [r7, #12]
 c00393e:	68f8      	ldr	r0, [r7, #12]
 c003940:	f7ff fe45 	bl	c0035ce <uECC_vli_modMult_fast>

    uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
 c003944:	683b      	ldr	r3, [r7, #0]
 c003946:	1d1a      	adds	r2, r3, #4
 c003948:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c00394c:	9300      	str	r3, [sp, #0]
 c00394e:	4613      	mov	r3, r2
 c003950:	68fa      	ldr	r2, [r7, #12]
 c003952:	68f9      	ldr	r1, [r7, #12]
 c003954:	6878      	ldr	r0, [r7, #4]
 c003956:	f7ff fc9f 	bl	c003298 <uECC_vli_modAdd>
    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
 c00395a:	683b      	ldr	r3, [r7, #0]
 c00395c:	1d1a      	adds	r2, r3, #4
 c00395e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003962:	9300      	str	r3, [sp, #0]
 c003964:	4613      	mov	r3, r2
 c003966:	687a      	ldr	r2, [r7, #4]
 c003968:	68f9      	ldr	r1, [r7, #12]
 c00396a:	68f8      	ldr	r0, [r7, #12]
 c00396c:	f7ff fc94 	bl	c003298 <uECC_vli_modAdd>
    if (uECC_vli_testBit(X1, 0)) {
 c003970:	2100      	movs	r1, #0
 c003972:	68f8      	ldr	r0, [r7, #12]
 c003974:	f7ff fb26 	bl	c002fc4 <uECC_vli_testBit>
 c003978:	4603      	mov	r3, r0
 c00397a:	2b00      	cmp	r3, #0
 c00397c:	d024      	beq.n	c0039c8 <double_jacobian_default+0x140>
        uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
 c00397e:	683b      	ldr	r3, [r7, #0]
 c003980:	1d1a      	adds	r2, r3, #4
 c003982:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003986:	68f9      	ldr	r1, [r7, #12]
 c003988:	68f8      	ldr	r0, [r7, #12]
 c00398a:	f7ff f9e9 	bl	c002d60 <uECC_vli_add>
 c00398e:	6538      	str	r0, [r7, #80]	; 0x50
        uECC_vli_rshift1(X1, num_words);
 c003990:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003994:	4619      	mov	r1, r3
 c003996:	68f8      	ldr	r0, [r7, #12]
 c003998:	f7ff fc54 	bl	c003244 <uECC_vli_rshift1>
        X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
 c00399c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0039a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c0039a4:	3b01      	subs	r3, #1
 c0039a6:	009b      	lsls	r3, r3, #2
 c0039a8:	68fa      	ldr	r2, [r7, #12]
 c0039aa:	4413      	add	r3, r2
 c0039ac:	6819      	ldr	r1, [r3, #0]
 c0039ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c0039b0:	07da      	lsls	r2, r3, #31
 c0039b2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0039b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c0039ba:	3b01      	subs	r3, #1
 c0039bc:	009b      	lsls	r3, r3, #2
 c0039be:	68f8      	ldr	r0, [r7, #12]
 c0039c0:	4403      	add	r3, r0
 c0039c2:	430a      	orrs	r2, r1
 c0039c4:	601a      	str	r2, [r3, #0]
 c0039c6:	e005      	b.n	c0039d4 <double_jacobian_default+0x14c>
    } else {
        uECC_vli_rshift1(X1, num_words);
 c0039c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0039cc:	4619      	mov	r1, r3
 c0039ce:	68f8      	ldr	r0, [r7, #12]
 c0039d0:	f7ff fc38 	bl	c003244 <uECC_vli_rshift1>
    }
    /* t1 = 3/2*(x1^2 - z1^4) = B */

    uECC_vli_modSquare_fast(Z1, X1, curve);                  /* t3 = B^2 */
 c0039d4:	683a      	ldr	r2, [r7, #0]
 c0039d6:	68f9      	ldr	r1, [r7, #12]
 c0039d8:	6878      	ldr	r0, [r7, #4]
 c0039da:	f7ff fe14 	bl	c003606 <uECC_vli_modSquare_fast>
    uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 c0039de:	683b      	ldr	r3, [r7, #0]
 c0039e0:	1d19      	adds	r1, r3, #4
 c0039e2:	f107 0210 	add.w	r2, r7, #16
 c0039e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c0039ea:	9300      	str	r3, [sp, #0]
 c0039ec:	460b      	mov	r3, r1
 c0039ee:	6879      	ldr	r1, [r7, #4]
 c0039f0:	6878      	ldr	r0, [r7, #4]
 c0039f2:	f7ff fc78 	bl	c0032e6 <uECC_vli_modSub>
    uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 c0039f6:	683b      	ldr	r3, [r7, #0]
 c0039f8:	1d19      	adds	r1, r3, #4
 c0039fa:	f107 0210 	add.w	r2, r7, #16
 c0039fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003a02:	9300      	str	r3, [sp, #0]
 c003a04:	460b      	mov	r3, r1
 c003a06:	6879      	ldr	r1, [r7, #4]
 c003a08:	6878      	ldr	r0, [r7, #4]
 c003a0a:	f7ff fc6c 	bl	c0032e6 <uECC_vli_modSub>
    uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 c003a0e:	683b      	ldr	r3, [r7, #0]
 c003a10:	1d1a      	adds	r2, r3, #4
 c003a12:	f107 0110 	add.w	r1, r7, #16
 c003a16:	f107 0010 	add.w	r0, r7, #16
 c003a1a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003a1e:	9300      	str	r3, [sp, #0]
 c003a20:	4613      	mov	r3, r2
 c003a22:	687a      	ldr	r2, [r7, #4]
 c003a24:	f7ff fc5f 	bl	c0032e6 <uECC_vli_modSub>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = B * (A - x3) */
 c003a28:	f107 0210 	add.w	r2, r7, #16
 c003a2c:	683b      	ldr	r3, [r7, #0]
 c003a2e:	68f9      	ldr	r1, [r7, #12]
 c003a30:	68f8      	ldr	r0, [r7, #12]
 c003a32:	f7ff fdcc 	bl	c0035ce <uECC_vli_modMult_fast>
    uECC_vli_modSub(t4, X1, t4, curve->p, num_words); /* t4 = B * (A - x3) - y1^4 = y3 */
 c003a36:	683b      	ldr	r3, [r7, #0]
 c003a38:	1d19      	adds	r1, r3, #4
 c003a3a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c003a3e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 c003a42:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003a46:	9300      	str	r3, [sp, #0]
 c003a48:	460b      	mov	r3, r1
 c003a4a:	68f9      	ldr	r1, [r7, #12]
 c003a4c:	f7ff fc4b 	bl	c0032e6 <uECC_vli_modSub>

    uECC_vli_set(X1, Z1, num_words);
 c003a50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003a54:	461a      	mov	r2, r3
 c003a56:	6879      	ldr	r1, [r7, #4]
 c003a58:	68f8      	ldr	r0, [r7, #12]
 c003a5a:	f7ff fb2d 	bl	c0030b8 <uECC_vli_set>
    uECC_vli_set(Z1, Y1, num_words);
 c003a5e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 c003a62:	461a      	mov	r2, r3
 c003a64:	68b9      	ldr	r1, [r7, #8]
 c003a66:	6878      	ldr	r0, [r7, #4]
 c003a68:	f7ff fb26 	bl	c0030b8 <uECC_vli_set>
    uECC_vli_set(Y1, t4, num_words);
 c003a6c:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 c003a70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 c003a74:	4619      	mov	r1, r3
 c003a76:	68b8      	ldr	r0, [r7, #8]
 c003a78:	f7ff fb1e 	bl	c0030b8 <uECC_vli_set>
 c003a7c:	e000      	b.n	c003a80 <double_jacobian_default+0x1f8>
        return;
 c003a7e:	bf00      	nop
}
 c003a80:	3758      	adds	r7, #88	; 0x58
 c003a82:	46bd      	mov	sp, r7
 c003a84:	bd80      	pop	{r7, pc}

0c003a86 <x_side_default>:

/* Computes result = x^3 + ax + b. result must not overlap x. */
static void x_side_default(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve) {
 c003a86:	b580      	push	{r7, lr}
 c003a88:	b090      	sub	sp, #64	; 0x40
 c003a8a:	af02      	add	r7, sp, #8
 c003a8c:	60f8      	str	r0, [r7, #12]
 c003a8e:	60b9      	str	r1, [r7, #8]
 c003a90:	607a      	str	r2, [r7, #4]
    uECC_word_t _3[uECC_MAX_WORDS] = {3}; /* -a = 3 */
 c003a92:	f107 0314 	add.w	r3, r7, #20
 c003a96:	2220      	movs	r2, #32
 c003a98:	2100      	movs	r1, #0
 c003a9a:	4618      	mov	r0, r3
 c003a9c:	f005 fe85 	bl	c0097aa <memset>
 c003aa0:	2303      	movs	r3, #3
 c003aa2:	617b      	str	r3, [r7, #20]
    wordcount_t num_words = curve->num_words;
 c003aa4:	687b      	ldr	r3, [r7, #4]
 c003aa6:	781b      	ldrb	r3, [r3, #0]
 c003aa8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    uECC_vli_modSquare_fast(result, x, curve);                             /* r = x^2 */
 c003aac:	687a      	ldr	r2, [r7, #4]
 c003aae:	68b9      	ldr	r1, [r7, #8]
 c003ab0:	68f8      	ldr	r0, [r7, #12]
 c003ab2:	f7ff fda8 	bl	c003606 <uECC_vli_modSquare_fast>
    uECC_vli_modSub(result, result, _3, curve->p, num_words);       /* r = x^2 - 3 */
 c003ab6:	687b      	ldr	r3, [r7, #4]
 c003ab8:	1d19      	adds	r1, r3, #4
 c003aba:	f107 0214 	add.w	r2, r7, #20
 c003abe:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003ac2:	9300      	str	r3, [sp, #0]
 c003ac4:	460b      	mov	r3, r1
 c003ac6:	68f9      	ldr	r1, [r7, #12]
 c003ac8:	68f8      	ldr	r0, [r7, #12]
 c003aca:	f7ff fc0c 	bl	c0032e6 <uECC_vli_modSub>
    uECC_vli_modMult_fast(result, result, x, curve);                       /* r = x^3 - 3x */
 c003ace:	687b      	ldr	r3, [r7, #4]
 c003ad0:	68ba      	ldr	r2, [r7, #8]
 c003ad2:	68f9      	ldr	r1, [r7, #12]
 c003ad4:	68f8      	ldr	r0, [r7, #12]
 c003ad6:	f7ff fd7a 	bl	c0035ce <uECC_vli_modMult_fast>
    uECC_vli_modAdd(result, result, curve->b, curve->p, num_words); /* r = x^3 - 3x + b */
 c003ada:	687b      	ldr	r3, [r7, #4]
 c003adc:	f103 0284 	add.w	r2, r3, #132	; 0x84
 c003ae0:	687b      	ldr	r3, [r7, #4]
 c003ae2:	1d19      	adds	r1, r3, #4
 c003ae4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003ae8:	9300      	str	r3, [sp, #0]
 c003aea:	460b      	mov	r3, r1
 c003aec:	68f9      	ldr	r1, [r7, #12]
 c003aee:	68f8      	ldr	r0, [r7, #12]
 c003af0:	f7ff fbd2 	bl	c003298 <uECC_vli_modAdd>
}
 c003af4:	bf00      	nop
 c003af6:	3738      	adds	r7, #56	; 0x38
 c003af8:	46bd      	mov	sp, r7
 c003afa:	bd80      	pop	{r7, pc}

0c003afc <mod_sqrt_default>:

#if uECC_SUPPORT_COMPRESSED_POINT
#if uECC_SUPPORTS_secp160r1 || uECC_SUPPORTS_secp192r1 || \
    uECC_SUPPORTS_secp256r1 || uECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
 c003afc:	b580      	push	{r7, lr}
 c003afe:	b094      	sub	sp, #80	; 0x50
 c003b00:	af00      	add	r7, sp, #0
 c003b02:	6078      	str	r0, [r7, #4]
 c003b04:	6039      	str	r1, [r7, #0]
    bitcount_t i;
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
 c003b06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c003b0a:	2220      	movs	r2, #32
 c003b0c:	2100      	movs	r1, #0
 c003b0e:	4618      	mov	r0, r3
 c003b10:	f005 fe4b 	bl	c0097aa <memset>
 c003b14:	2301      	movs	r3, #1
 c003b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
 c003b18:	f107 030c 	add.w	r3, r7, #12
 c003b1c:	2220      	movs	r2, #32
 c003b1e:	2100      	movs	r1, #0
 c003b20:	4618      	mov	r0, r3
 c003b22:	f005 fe42 	bl	c0097aa <memset>
 c003b26:	2301      	movs	r3, #1
 c003b28:	60fb      	str	r3, [r7, #12]
    wordcount_t num_words = curve->num_words;
 c003b2a:	683b      	ldr	r3, [r7, #0]
 c003b2c:	781b      	ldrb	r3, [r3, #0]
 c003b2e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    
    /* When curve->p == 3 (mod 4), we can compute
       sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 c003b32:	683b      	ldr	r3, [r7, #0]
 c003b34:	1d19      	adds	r1, r3, #4
 c003b36:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 c003b3a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 c003b3e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 c003b42:	f7ff f90d 	bl	c002d60 <uECC_vli_add>
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 c003b46:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 c003b4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c003b4e:	4611      	mov	r1, r2
 c003b50:	4618      	mov	r0, r3
 c003b52:	f7ff fa77 	bl	c003044 <uECC_vli_numBits>
 c003b56:	4603      	mov	r3, r0
 c003b58:	b29b      	uxth	r3, r3
 c003b5a:	3b01      	subs	r3, #1
 c003b5c:	b29b      	uxth	r3, r3
 c003b5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 c003b62:	e020      	b.n	c003ba6 <mod_sqrt_default+0xaa>
        uECC_vli_modSquare_fast(l_result, l_result, curve);
 c003b64:	f107 010c 	add.w	r1, r7, #12
 c003b68:	f107 030c 	add.w	r3, r7, #12
 c003b6c:	683a      	ldr	r2, [r7, #0]
 c003b6e:	4618      	mov	r0, r3
 c003b70:	f7ff fd49 	bl	c003606 <uECC_vli_modSquare_fast>
        if (uECC_vli_testBit(p1, i)) {
 c003b74:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 c003b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c003b7c:	4611      	mov	r1, r2
 c003b7e:	4618      	mov	r0, r3
 c003b80:	f7ff fa20 	bl	c002fc4 <uECC_vli_testBit>
 c003b84:	4603      	mov	r3, r0
 c003b86:	2b00      	cmp	r3, #0
 c003b88:	d007      	beq.n	c003b9a <mod_sqrt_default+0x9e>
            uECC_vli_modMult_fast(l_result, l_result, a, curve);
 c003b8a:	f107 010c 	add.w	r1, r7, #12
 c003b8e:	f107 000c 	add.w	r0, r7, #12
 c003b92:	683b      	ldr	r3, [r7, #0]
 c003b94:	687a      	ldr	r2, [r7, #4]
 c003b96:	f7ff fd1a 	bl	c0035ce <uECC_vli_modMult_fast>
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 c003b9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 c003b9e:	3b01      	subs	r3, #1
 c003ba0:	b29b      	uxth	r3, r3
 c003ba2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 c003ba6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 c003baa:	2b01      	cmp	r3, #1
 c003bac:	dcda      	bgt.n	c003b64 <mod_sqrt_default+0x68>
        }
    }
    uECC_vli_set(a, l_result, num_words);
 c003bae:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 c003bb2:	f107 030c 	add.w	r3, r7, #12
 c003bb6:	4619      	mov	r1, r3
 c003bb8:	6878      	ldr	r0, [r7, #4]
 c003bba:	f7ff fa7d 	bl	c0030b8 <uECC_vli_set>
}
 c003bbe:	bf00      	nop
 c003bc0:	3750      	adds	r7, #80	; 0x50
 c003bc2:	46bd      	mov	sp, r7
 c003bc4:	bd80      	pop	{r7, pc}
	...

0c003bc8 <uECC_secp256r1>:
#if (uECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp256r1
#endif
};

uECC_Curve uECC_secp256r1(void) { return &curve_secp256r1; }
 c003bc8:	b480      	push	{r7}
 c003bca:	af00      	add	r7, sp, #0
 c003bcc:	4b02      	ldr	r3, [pc, #8]	; (c003bd8 <uECC_secp256r1+0x10>)
 c003bce:	4618      	mov	r0, r3
 c003bd0:	46bd      	mov	sp, r7
 c003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003bd6:	4770      	bx	lr
 c003bd8:	0c00a8e8 	.word	0x0c00a8e8

0c003bdc <vli_mmod_fast_secp256r1>:
            carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
        }
    }
}
#elif uECC_WORD_SIZE == 4
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 c003bdc:	b580      	push	{r7, lr}
 c003bde:	b08c      	sub	sp, #48	; 0x30
 c003be0:	af00      	add	r7, sp, #0
 c003be2:	6078      	str	r0, [r7, #4]
 c003be4:	6039      	str	r1, [r7, #0]
    uint32_t tmp[num_words_secp256r1];
    int carry;
    
    /* t */
    uECC_vli_set(result, product, num_words_secp256r1);
 c003be6:	2208      	movs	r2, #8
 c003be8:	6839      	ldr	r1, [r7, #0]
 c003bea:	6878      	ldr	r0, [r7, #4]
 c003bec:	f7ff fa64 	bl	c0030b8 <uECC_vli_set>
    
    /* s1 */
    tmp[0] = tmp[1] = tmp[2] = 0;
 c003bf0:	2300      	movs	r3, #0
 c003bf2:	617b      	str	r3, [r7, #20]
 c003bf4:	697b      	ldr	r3, [r7, #20]
 c003bf6:	613b      	str	r3, [r7, #16]
 c003bf8:	693b      	ldr	r3, [r7, #16]
 c003bfa:	60fb      	str	r3, [r7, #12]
    tmp[3] = product[11];
 c003bfc:	683b      	ldr	r3, [r7, #0]
 c003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003c00:	61bb      	str	r3, [r7, #24]
    tmp[4] = product[12];
 c003c02:	683b      	ldr	r3, [r7, #0]
 c003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c003c06:	61fb      	str	r3, [r7, #28]
    tmp[5] = product[13];
 c003c08:	683b      	ldr	r3, [r7, #0]
 c003c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003c0c:	623b      	str	r3, [r7, #32]
    tmp[6] = product[14];
 c003c0e:	683b      	ldr	r3, [r7, #0]
 c003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003c12:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[15];
 c003c14:	683b      	ldr	r3, [r7, #0]
 c003c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003c18:	62bb      	str	r3, [r7, #40]	; 0x28
    carry = uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 c003c1a:	f107 020c 	add.w	r2, r7, #12
 c003c1e:	f107 010c 	add.w	r1, r7, #12
 c003c22:	f107 000c 	add.w	r0, r7, #12
 c003c26:	2308      	movs	r3, #8
 c003c28:	f7ff f89a 	bl	c002d60 <uECC_vli_add>
 c003c2c:	4603      	mov	r3, r0
 c003c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 c003c30:	f107 020c 	add.w	r2, r7, #12
 c003c34:	2308      	movs	r3, #8
 c003c36:	6879      	ldr	r1, [r7, #4]
 c003c38:	6878      	ldr	r0, [r7, #4]
 c003c3a:	f7ff f891 	bl	c002d60 <uECC_vli_add>
 c003c3e:	4602      	mov	r2, r0
 c003c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003c42:	4413      	add	r3, r2
 c003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* s2 */
    tmp[3] = product[12];
 c003c46:	683b      	ldr	r3, [r7, #0]
 c003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c003c4a:	61bb      	str	r3, [r7, #24]
    tmp[4] = product[13];
 c003c4c:	683b      	ldr	r3, [r7, #0]
 c003c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003c50:	61fb      	str	r3, [r7, #28]
    tmp[5] = product[14];
 c003c52:	683b      	ldr	r3, [r7, #0]
 c003c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003c56:	623b      	str	r3, [r7, #32]
    tmp[6] = product[15];
 c003c58:	683b      	ldr	r3, [r7, #0]
 c003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003c5c:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = 0;
 c003c5e:	2300      	movs	r3, #0
 c003c60:	62bb      	str	r3, [r7, #40]	; 0x28
    carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 c003c62:	f107 020c 	add.w	r2, r7, #12
 c003c66:	f107 010c 	add.w	r1, r7, #12
 c003c6a:	f107 000c 	add.w	r0, r7, #12
 c003c6e:	2308      	movs	r3, #8
 c003c70:	f7ff f876 	bl	c002d60 <uECC_vli_add>
 c003c74:	4602      	mov	r2, r0
 c003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003c78:	4413      	add	r3, r2
 c003c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 c003c7c:	f107 020c 	add.w	r2, r7, #12
 c003c80:	2308      	movs	r3, #8
 c003c82:	6879      	ldr	r1, [r7, #4]
 c003c84:	6878      	ldr	r0, [r7, #4]
 c003c86:	f7ff f86b 	bl	c002d60 <uECC_vli_add>
 c003c8a:	4602      	mov	r2, r0
 c003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003c8e:	4413      	add	r3, r2
 c003c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* s3 */
    tmp[0] = product[8];
 c003c92:	683b      	ldr	r3, [r7, #0]
 c003c94:	6a1b      	ldr	r3, [r3, #32]
 c003c96:	60fb      	str	r3, [r7, #12]
    tmp[1] = product[9];
 c003c98:	683b      	ldr	r3, [r7, #0]
 c003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003c9c:	613b      	str	r3, [r7, #16]
    tmp[2] = product[10];
 c003c9e:	683b      	ldr	r3, [r7, #0]
 c003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003ca2:	617b      	str	r3, [r7, #20]
    tmp[3] = tmp[4] = tmp[5] = 0;
 c003ca4:	2300      	movs	r3, #0
 c003ca6:	623b      	str	r3, [r7, #32]
 c003ca8:	6a3b      	ldr	r3, [r7, #32]
 c003caa:	61fb      	str	r3, [r7, #28]
 c003cac:	69fb      	ldr	r3, [r7, #28]
 c003cae:	61bb      	str	r3, [r7, #24]
    tmp[6] = product[14];
 c003cb0:	683b      	ldr	r3, [r7, #0]
 c003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003cb4:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[15];
 c003cb6:	683b      	ldr	r3, [r7, #0]
 c003cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003cba:	62bb      	str	r3, [r7, #40]	; 0x28
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 c003cbc:	f107 020c 	add.w	r2, r7, #12
 c003cc0:	2308      	movs	r3, #8
 c003cc2:	6879      	ldr	r1, [r7, #4]
 c003cc4:	6878      	ldr	r0, [r7, #4]
 c003cc6:	f7ff f84b 	bl	c002d60 <uECC_vli_add>
 c003cca:	4602      	mov	r2, r0
 c003ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003cce:	4413      	add	r3, r2
 c003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* s4 */
    tmp[0] = product[9];
 c003cd2:	683b      	ldr	r3, [r7, #0]
 c003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003cd6:	60fb      	str	r3, [r7, #12]
    tmp[1] = product[10];
 c003cd8:	683b      	ldr	r3, [r7, #0]
 c003cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003cdc:	613b      	str	r3, [r7, #16]
    tmp[2] = product[11];
 c003cde:	683b      	ldr	r3, [r7, #0]
 c003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003ce2:	617b      	str	r3, [r7, #20]
    tmp[3] = product[13];
 c003ce4:	683b      	ldr	r3, [r7, #0]
 c003ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003ce8:	61bb      	str	r3, [r7, #24]
    tmp[4] = product[14];
 c003cea:	683b      	ldr	r3, [r7, #0]
 c003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003cee:	61fb      	str	r3, [r7, #28]
    tmp[5] = product[15];
 c003cf0:	683b      	ldr	r3, [r7, #0]
 c003cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003cf4:	623b      	str	r3, [r7, #32]
    tmp[6] = product[13];
 c003cf6:	683b      	ldr	r3, [r7, #0]
 c003cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003cfa:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[8];
 c003cfc:	683b      	ldr	r3, [r7, #0]
 c003cfe:	6a1b      	ldr	r3, [r3, #32]
 c003d00:	62bb      	str	r3, [r7, #40]	; 0x28
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
 c003d02:	f107 020c 	add.w	r2, r7, #12
 c003d06:	2308      	movs	r3, #8
 c003d08:	6879      	ldr	r1, [r7, #4]
 c003d0a:	6878      	ldr	r0, [r7, #4]
 c003d0c:	f7ff f828 	bl	c002d60 <uECC_vli_add>
 c003d10:	4602      	mov	r2, r0
 c003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003d14:	4413      	add	r3, r2
 c003d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* d1 */
    tmp[0] = product[11];
 c003d18:	683b      	ldr	r3, [r7, #0]
 c003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003d1c:	60fb      	str	r3, [r7, #12]
    tmp[1] = product[12];
 c003d1e:	683b      	ldr	r3, [r7, #0]
 c003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c003d22:	613b      	str	r3, [r7, #16]
    tmp[2] = product[13];
 c003d24:	683b      	ldr	r3, [r7, #0]
 c003d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003d28:	617b      	str	r3, [r7, #20]
    tmp[3] = tmp[4] = tmp[5] = 0;
 c003d2a:	2300      	movs	r3, #0
 c003d2c:	623b      	str	r3, [r7, #32]
 c003d2e:	6a3b      	ldr	r3, [r7, #32]
 c003d30:	61fb      	str	r3, [r7, #28]
 c003d32:	69fb      	ldr	r3, [r7, #28]
 c003d34:	61bb      	str	r3, [r7, #24]
    tmp[6] = product[8];
 c003d36:	683b      	ldr	r3, [r7, #0]
 c003d38:	6a1b      	ldr	r3, [r3, #32]
 c003d3a:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[10];
 c003d3c:	683b      	ldr	r3, [r7, #0]
 c003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003d40:	62bb      	str	r3, [r7, #40]	; 0x28
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 c003d42:	f107 020c 	add.w	r2, r7, #12
 c003d46:	2308      	movs	r3, #8
 c003d48:	6879      	ldr	r1, [r7, #4]
 c003d4a:	6878      	ldr	r0, [r7, #4]
 c003d4c:	f7ff f850 	bl	c002df0 <uECC_vli_sub>
 c003d50:	4602      	mov	r2, r0
 c003d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003d54:	1a9b      	subs	r3, r3, r2
 c003d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* d2 */
    tmp[0] = product[12];
 c003d58:	683b      	ldr	r3, [r7, #0]
 c003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c003d5c:	60fb      	str	r3, [r7, #12]
    tmp[1] = product[13];
 c003d5e:	683b      	ldr	r3, [r7, #0]
 c003d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003d62:	613b      	str	r3, [r7, #16]
    tmp[2] = product[14];
 c003d64:	683b      	ldr	r3, [r7, #0]
 c003d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003d68:	617b      	str	r3, [r7, #20]
    tmp[3] = product[15];
 c003d6a:	683b      	ldr	r3, [r7, #0]
 c003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003d6e:	61bb      	str	r3, [r7, #24]
    tmp[4] = tmp[5] = 0;
 c003d70:	2300      	movs	r3, #0
 c003d72:	623b      	str	r3, [r7, #32]
 c003d74:	6a3b      	ldr	r3, [r7, #32]
 c003d76:	61fb      	str	r3, [r7, #28]
    tmp[6] = product[9];
 c003d78:	683b      	ldr	r3, [r7, #0]
 c003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003d7c:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[11];
 c003d7e:	683b      	ldr	r3, [r7, #0]
 c003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003d82:	62bb      	str	r3, [r7, #40]	; 0x28
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 c003d84:	f107 020c 	add.w	r2, r7, #12
 c003d88:	2308      	movs	r3, #8
 c003d8a:	6879      	ldr	r1, [r7, #4]
 c003d8c:	6878      	ldr	r0, [r7, #4]
 c003d8e:	f7ff f82f 	bl	c002df0 <uECC_vli_sub>
 c003d92:	4602      	mov	r2, r0
 c003d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003d96:	1a9b      	subs	r3, r3, r2
 c003d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* d3 */
    tmp[0] = product[13];
 c003d9a:	683b      	ldr	r3, [r7, #0]
 c003d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003d9e:	60fb      	str	r3, [r7, #12]
    tmp[1] = product[14];
 c003da0:	683b      	ldr	r3, [r7, #0]
 c003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003da4:	613b      	str	r3, [r7, #16]
    tmp[2] = product[15];
 c003da6:	683b      	ldr	r3, [r7, #0]
 c003da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003daa:	617b      	str	r3, [r7, #20]
    tmp[3] = product[8];
 c003dac:	683b      	ldr	r3, [r7, #0]
 c003dae:	6a1b      	ldr	r3, [r3, #32]
 c003db0:	61bb      	str	r3, [r7, #24]
    tmp[4] = product[9];
 c003db2:	683b      	ldr	r3, [r7, #0]
 c003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003db6:	61fb      	str	r3, [r7, #28]
    tmp[5] = product[10];
 c003db8:	683b      	ldr	r3, [r7, #0]
 c003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003dbc:	623b      	str	r3, [r7, #32]
    tmp[6] = 0;
 c003dbe:	2300      	movs	r3, #0
 c003dc0:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[12];
 c003dc2:	683b      	ldr	r3, [r7, #0]
 c003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c003dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 c003dc8:	f107 020c 	add.w	r2, r7, #12
 c003dcc:	2308      	movs	r3, #8
 c003dce:	6879      	ldr	r1, [r7, #4]
 c003dd0:	6878      	ldr	r0, [r7, #4]
 c003dd2:	f7ff f80d 	bl	c002df0 <uECC_vli_sub>
 c003dd6:	4602      	mov	r2, r0
 c003dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003dda:	1a9b      	subs	r3, r3, r2
 c003ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* d4 */
    tmp[0] = product[14];
 c003dde:	683b      	ldr	r3, [r7, #0]
 c003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003de2:	60fb      	str	r3, [r7, #12]
    tmp[1] = product[15];
 c003de4:	683b      	ldr	r3, [r7, #0]
 c003de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003de8:	613b      	str	r3, [r7, #16]
    tmp[2] = 0;
 c003dea:	2300      	movs	r3, #0
 c003dec:	617b      	str	r3, [r7, #20]
    tmp[3] = product[9];
 c003dee:	683b      	ldr	r3, [r7, #0]
 c003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003df2:	61bb      	str	r3, [r7, #24]
    tmp[4] = product[10];
 c003df4:	683b      	ldr	r3, [r7, #0]
 c003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003df8:	61fb      	str	r3, [r7, #28]
    tmp[5] = product[11];
 c003dfa:	683b      	ldr	r3, [r7, #0]
 c003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003dfe:	623b      	str	r3, [r7, #32]
    tmp[6] = 0;
 c003e00:	2300      	movs	r3, #0
 c003e02:	627b      	str	r3, [r7, #36]	; 0x24
    tmp[7] = product[13];
 c003e04:	683b      	ldr	r3, [r7, #0]
 c003e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003e08:	62bb      	str	r3, [r7, #40]	; 0x28
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
 c003e0a:	f107 020c 	add.w	r2, r7, #12
 c003e0e:	2308      	movs	r3, #8
 c003e10:	6879      	ldr	r1, [r7, #4]
 c003e12:	6878      	ldr	r0, [r7, #4]
 c003e14:	f7fe ffec 	bl	c002df0 <uECC_vli_sub>
 c003e18:	4602      	mov	r2, r0
 c003e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003e1c:	1a9b      	subs	r3, r3, r2
 c003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (carry < 0) {
 c003e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003e22:	2b00      	cmp	r3, #0
 c003e24:	da17      	bge.n	c003e56 <vli_mmod_fast_secp256r1+0x27a>
        do {
            carry += uECC_vli_add(result, result, curve_secp256r1.p, num_words_secp256r1);
 c003e26:	2308      	movs	r3, #8
 c003e28:	4a12      	ldr	r2, [pc, #72]	; (c003e74 <vli_mmod_fast_secp256r1+0x298>)
 c003e2a:	6879      	ldr	r1, [r7, #4]
 c003e2c:	6878      	ldr	r0, [r7, #4]
 c003e2e:	f7fe ff97 	bl	c002d60 <uECC_vli_add>
 c003e32:	4602      	mov	r2, r0
 c003e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003e36:	4413      	add	r3, r2
 c003e38:	62fb      	str	r3, [r7, #44]	; 0x2c
        } while (carry < 0);
 c003e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003e3c:	2b00      	cmp	r3, #0
 c003e3e:	dbf2      	blt.n	c003e26 <vli_mmod_fast_secp256r1+0x24a>
    } else {
        while (carry || uECC_vli_cmp_unsafe(curve_secp256r1.p, result, num_words_secp256r1) != 1) {
            carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
        }
    }
}
 c003e40:	e014      	b.n	c003e6c <vli_mmod_fast_secp256r1+0x290>
            carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
 c003e42:	2308      	movs	r3, #8
 c003e44:	4a0b      	ldr	r2, [pc, #44]	; (c003e74 <vli_mmod_fast_secp256r1+0x298>)
 c003e46:	6879      	ldr	r1, [r7, #4]
 c003e48:	6878      	ldr	r0, [r7, #4]
 c003e4a:	f7fe ffd1 	bl	c002df0 <uECC_vli_sub>
 c003e4e:	4602      	mov	r2, r0
 c003e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003e52:	1a9b      	subs	r3, r3, r2
 c003e54:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (carry || uECC_vli_cmp_unsafe(curve_secp256r1.p, result, num_words_secp256r1) != 1) {
 c003e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c003e58:	2b00      	cmp	r3, #0
 c003e5a:	d1f2      	bne.n	c003e42 <vli_mmod_fast_secp256r1+0x266>
 c003e5c:	2208      	movs	r2, #8
 c003e5e:	6879      	ldr	r1, [r7, #4]
 c003e60:	4804      	ldr	r0, [pc, #16]	; (c003e74 <vli_mmod_fast_secp256r1+0x298>)
 c003e62:	f7ff f950 	bl	c003106 <uECC_vli_cmp_unsafe>
 c003e66:	4603      	mov	r3, r0
 c003e68:	2b01      	cmp	r3, #1
 c003e6a:	d1ea      	bne.n	c003e42 <vli_mmod_fast_secp256r1+0x266>
}
 c003e6c:	bf00      	nop
 c003e6e:	3730      	adds	r7, #48	; 0x30
 c003e70:	46bd      	mov	sp, r7
 c003e72:	bd80      	pop	{r7, pc}
 c003e74:	0c00a8ec 	.word	0x0c00a8ec

0c003e78 <apply_z>:

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(uECC_word_t * X1,
                    uECC_word_t * Y1,
                    const uECC_word_t * const Z,
                    uECC_Curve curve) {
 c003e78:	b580      	push	{r7, lr}
 c003e7a:	b08c      	sub	sp, #48	; 0x30
 c003e7c:	af00      	add	r7, sp, #0
 c003e7e:	60f8      	str	r0, [r7, #12]
 c003e80:	60b9      	str	r1, [r7, #8]
 c003e82:	607a      	str	r2, [r7, #4]
 c003e84:	603b      	str	r3, [r7, #0]
    uECC_word_t t1[uECC_MAX_WORDS];

    uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 c003e86:	f107 0310 	add.w	r3, r7, #16
 c003e8a:	683a      	ldr	r2, [r7, #0]
 c003e8c:	6879      	ldr	r1, [r7, #4]
 c003e8e:	4618      	mov	r0, r3
 c003e90:	f7ff fbb9 	bl	c003606 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 c003e94:	f107 0210 	add.w	r2, r7, #16
 c003e98:	683b      	ldr	r3, [r7, #0]
 c003e9a:	68f9      	ldr	r1, [r7, #12]
 c003e9c:	68f8      	ldr	r0, [r7, #12]
 c003e9e:	f7ff fb96 	bl	c0035ce <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 c003ea2:	f107 0110 	add.w	r1, r7, #16
 c003ea6:	f107 0010 	add.w	r0, r7, #16
 c003eaa:	683b      	ldr	r3, [r7, #0]
 c003eac:	687a      	ldr	r2, [r7, #4]
 c003eae:	f7ff fb8e 	bl	c0035ce <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 c003eb2:	f107 0210 	add.w	r2, r7, #16
 c003eb6:	683b      	ldr	r3, [r7, #0]
 c003eb8:	68b9      	ldr	r1, [r7, #8]
 c003eba:	68b8      	ldr	r0, [r7, #8]
 c003ebc:	f7ff fb87 	bl	c0035ce <uECC_vli_modMult_fast>
}
 c003ec0:	bf00      	nop
 c003ec2:	3730      	adds	r7, #48	; 0x30
 c003ec4:	46bd      	mov	sp, r7
 c003ec6:	bd80      	pop	{r7, pc}

0c003ec8 <XYcZ_initial_double>:
static void XYcZ_initial_double(uECC_word_t * X1,
                                uECC_word_t * Y1,
                                uECC_word_t * X2,
                                uECC_word_t * Y2,
                                const uECC_word_t * const initial_Z,
                                uECC_Curve curve) {
 c003ec8:	b590      	push	{r4, r7, lr}
 c003eca:	b08f      	sub	sp, #60	; 0x3c
 c003ecc:	af00      	add	r7, sp, #0
 c003ece:	60f8      	str	r0, [r7, #12]
 c003ed0:	60b9      	str	r1, [r7, #8]
 c003ed2:	607a      	str	r2, [r7, #4]
 c003ed4:	603b      	str	r3, [r7, #0]
    uECC_word_t z[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
 c003ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c003ed8:	781b      	ldrb	r3, [r3, #0]
 c003eda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (initial_Z) {
 c003ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c003ee0:	2b00      	cmp	r3, #0
 c003ee2:	d008      	beq.n	c003ef6 <XYcZ_initial_double+0x2e>
        uECC_vli_set(z, initial_Z, num_words);
 c003ee4:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 c003ee8:	f107 0314 	add.w	r3, r7, #20
 c003eec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 c003eee:	4618      	mov	r0, r3
 c003ef0:	f7ff f8e2 	bl	c0030b8 <uECC_vli_set>
 c003ef4:	e009      	b.n	c003f0a <XYcZ_initial_double+0x42>
    } else {
        uECC_vli_clear(z, num_words);
 c003ef6:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 c003efa:	f107 0314 	add.w	r3, r7, #20
 c003efe:	4611      	mov	r1, r2
 c003f00:	4618      	mov	r0, r3
 c003f02:	f7ff f814 	bl	c002f2e <uECC_vli_clear>
        z[0] = 1;
 c003f06:	2301      	movs	r3, #1
 c003f08:	617b      	str	r3, [r7, #20]
    }

    uECC_vli_set(X2, X1, num_words);
 c003f0a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003f0e:	461a      	mov	r2, r3
 c003f10:	68f9      	ldr	r1, [r7, #12]
 c003f12:	6878      	ldr	r0, [r7, #4]
 c003f14:	f7ff f8d0 	bl	c0030b8 <uECC_vli_set>
    uECC_vli_set(Y2, Y1, num_words);
 c003f18:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003f1c:	461a      	mov	r2, r3
 c003f1e:	68b9      	ldr	r1, [r7, #8]
 c003f20:	6838      	ldr	r0, [r7, #0]
 c003f22:	f7ff f8c9 	bl	c0030b8 <uECC_vli_set>

    apply_z(X1, Y1, z, curve);
 c003f26:	f107 0214 	add.w	r2, r7, #20
 c003f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c003f2c:	68b9      	ldr	r1, [r7, #8]
 c003f2e:	68f8      	ldr	r0, [r7, #12]
 c003f30:	f7ff ffa2 	bl	c003e78 <apply_z>
    curve->double_jacobian(X1, Y1, z, curve);
 c003f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c003f36:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
 c003f3a:	f107 0214 	add.w	r2, r7, #20
 c003f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c003f40:	68b9      	ldr	r1, [r7, #8]
 c003f42:	68f8      	ldr	r0, [r7, #12]
 c003f44:	47a0      	blx	r4
    apply_z(X2, Y2, z, curve);
 c003f46:	f107 0214 	add.w	r2, r7, #20
 c003f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c003f4c:	6839      	ldr	r1, [r7, #0]
 c003f4e:	6878      	ldr	r0, [r7, #4]
 c003f50:	f7ff ff92 	bl	c003e78 <apply_z>
}
 c003f54:	bf00      	nop
 c003f56:	373c      	adds	r7, #60	; 0x3c
 c003f58:	46bd      	mov	sp, r7
 c003f5a:	bd90      	pop	{r4, r7, pc}

0c003f5c <XYcZ_add>:
*/
static void XYcZ_add(uECC_word_t * X1,
                     uECC_word_t * Y1,
                     uECC_word_t * X2,
                     uECC_word_t * Y2,
                     uECC_Curve curve) {
 c003f5c:	b580      	push	{r7, lr}
 c003f5e:	b090      	sub	sp, #64	; 0x40
 c003f60:	af02      	add	r7, sp, #8
 c003f62:	60f8      	str	r0, [r7, #12]
 c003f64:	60b9      	str	r1, [r7, #8]
 c003f66:	607a      	str	r2, [r7, #4]
 c003f68:	603b      	str	r3, [r7, #0]
    /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
    uECC_word_t t5[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
 c003f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003f6c:	781b      	ldrb	r3, [r3, #0]
 c003f6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 c003f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003f74:	1d1a      	adds	r2, r3, #4
 c003f76:	f107 0014 	add.w	r0, r7, #20
 c003f7a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003f7e:	9300      	str	r3, [sp, #0]
 c003f80:	4613      	mov	r3, r2
 c003f82:	68fa      	ldr	r2, [r7, #12]
 c003f84:	6879      	ldr	r1, [r7, #4]
 c003f86:	f7ff f9ae 	bl	c0032e6 <uECC_vli_modSub>
    uECC_vli_modSquare_fast(t5, t5, curve);                  /* t5 = (x2 - x1)^2 = A */
 c003f8a:	f107 0114 	add.w	r1, r7, #20
 c003f8e:	f107 0314 	add.w	r3, r7, #20
 c003f92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 c003f94:	4618      	mov	r0, r3
 c003f96:	f7ff fb36 	bl	c003606 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = x1*A = B */
 c003f9a:	f107 0214 	add.w	r2, r7, #20
 c003f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003fa0:	68f9      	ldr	r1, [r7, #12]
 c003fa2:	68f8      	ldr	r0, [r7, #12]
 c003fa4:	f7ff fb13 	bl	c0035ce <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(X2, X2, t5, curve);                /* t3 = x2*A = C */
 c003fa8:	f107 0214 	add.w	r2, r7, #20
 c003fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003fae:	6879      	ldr	r1, [r7, #4]
 c003fb0:	6878      	ldr	r0, [r7, #4]
 c003fb2:	f7ff fb0c 	bl	c0035ce <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 c003fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003fb8:	1d1a      	adds	r2, r3, #4
 c003fba:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003fbe:	9300      	str	r3, [sp, #0]
 c003fc0:	4613      	mov	r3, r2
 c003fc2:	68ba      	ldr	r2, [r7, #8]
 c003fc4:	6839      	ldr	r1, [r7, #0]
 c003fc6:	6838      	ldr	r0, [r7, #0]
 c003fc8:	f7ff f98d 	bl	c0032e6 <uECC_vli_modSub>
    uECC_vli_modSquare_fast(t5, Y2, curve);                  /* t5 = (y2 - y1)^2 = D */
 c003fcc:	f107 0314 	add.w	r3, r7, #20
 c003fd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 c003fd2:	6839      	ldr	r1, [r7, #0]
 c003fd4:	4618      	mov	r0, r3
 c003fd6:	f7ff fb16 	bl	c003606 <uECC_vli_modSquare_fast>

    uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 c003fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003fdc:	1d1a      	adds	r2, r3, #4
 c003fde:	f107 0114 	add.w	r1, r7, #20
 c003fe2:	f107 0014 	add.w	r0, r7, #20
 c003fe6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c003fea:	9300      	str	r3, [sp, #0]
 c003fec:	4613      	mov	r3, r2
 c003fee:	68fa      	ldr	r2, [r7, #12]
 c003ff0:	f7ff f979 	bl	c0032e6 <uECC_vli_modSub>
    uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 c003ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c003ff6:	1d1a      	adds	r2, r3, #4
 c003ff8:	f107 0114 	add.w	r1, r7, #20
 c003ffc:	f107 0014 	add.w	r0, r7, #20
 c004000:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c004004:	9300      	str	r3, [sp, #0]
 c004006:	4613      	mov	r3, r2
 c004008:	687a      	ldr	r2, [r7, #4]
 c00400a:	f7ff f96c 	bl	c0032e6 <uECC_vli_modSub>
    uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 c00400e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004010:	1d1a      	adds	r2, r3, #4
 c004012:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c004016:	9300      	str	r3, [sp, #0]
 c004018:	4613      	mov	r3, r2
 c00401a:	68fa      	ldr	r2, [r7, #12]
 c00401c:	6879      	ldr	r1, [r7, #4]
 c00401e:	6878      	ldr	r0, [r7, #4]
 c004020:	f7ff f961 	bl	c0032e6 <uECC_vli_modSub>
    uECC_vli_modMult_fast(Y1, Y1, X2, curve);                /* t2 = y1*(C - B) */
 c004024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004026:	687a      	ldr	r2, [r7, #4]
 c004028:	68b9      	ldr	r1, [r7, #8]
 c00402a:	68b8      	ldr	r0, [r7, #8]
 c00402c:	f7ff facf 	bl	c0035ce <uECC_vli_modMult_fast>
    uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 c004030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004032:	1d19      	adds	r1, r3, #4
 c004034:	f107 0214 	add.w	r2, r7, #20
 c004038:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c00403c:	9300      	str	r3, [sp, #0]
 c00403e:	460b      	mov	r3, r1
 c004040:	68f9      	ldr	r1, [r7, #12]
 c004042:	6878      	ldr	r0, [r7, #4]
 c004044:	f7ff f94f 	bl	c0032e6 <uECC_vli_modSub>
    uECC_vli_modMult_fast(Y2, Y2, X2, curve);                /* t4 = (y2 - y1)*(B - x3) */
 c004048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c00404a:	687a      	ldr	r2, [r7, #4]
 c00404c:	6839      	ldr	r1, [r7, #0]
 c00404e:	6838      	ldr	r0, [r7, #0]
 c004050:	f7ff fabd 	bl	c0035ce <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 c004054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004056:	1d1a      	adds	r2, r3, #4
 c004058:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 c00405c:	9300      	str	r3, [sp, #0]
 c00405e:	4613      	mov	r3, r2
 c004060:	68ba      	ldr	r2, [r7, #8]
 c004062:	6839      	ldr	r1, [r7, #0]
 c004064:	6838      	ldr	r0, [r7, #0]
 c004066:	f7ff f93e 	bl	c0032e6 <uECC_vli_modSub>

    uECC_vli_set(X2, t5, num_words);
 c00406a:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 c00406e:	f107 0314 	add.w	r3, r7, #20
 c004072:	4619      	mov	r1, r3
 c004074:	6878      	ldr	r0, [r7, #4]
 c004076:	f7ff f81f 	bl	c0030b8 <uECC_vli_set>
}
 c00407a:	bf00      	nop
 c00407c:	3738      	adds	r7, #56	; 0x38
 c00407e:	46bd      	mov	sp, r7
 c004080:	bd80      	pop	{r7, pc}

0c004082 <XYcZ_addC>:
*/
static void XYcZ_addC(uECC_word_t * X1,
                      uECC_word_t * Y1,
                      uECC_word_t * X2,
                      uECC_word_t * Y2,
                      uECC_Curve curve) {
 c004082:	b590      	push	{r4, r7, lr}
 c004084:	b0a1      	sub	sp, #132	; 0x84
 c004086:	af02      	add	r7, sp, #8
 c004088:	60f8      	str	r0, [r7, #12]
 c00408a:	60b9      	str	r1, [r7, #8]
 c00408c:	607a      	str	r2, [r7, #4]
 c00408e:	603b      	str	r3, [r7, #0]
    /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
    uECC_word_t t5[uECC_MAX_WORDS];
    uECC_word_t t6[uECC_MAX_WORDS];
    uECC_word_t t7[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
 c004090:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c004094:	781b      	ldrb	r3, [r3, #0]
 c004096:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 c00409a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c00409e:	1d1a      	adds	r2, r3, #4
 c0040a0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 c0040a4:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c0040a8:	9300      	str	r3, [sp, #0]
 c0040aa:	4613      	mov	r3, r2
 c0040ac:	68fa      	ldr	r2, [r7, #12]
 c0040ae:	6879      	ldr	r1, [r7, #4]
 c0040b0:	f7ff f919 	bl	c0032e6 <uECC_vli_modSub>
    uECC_vli_modSquare_fast(t5, t5, curve);                  /* t5 = (x2 - x1)^2 = A */
 c0040b4:	f107 0154 	add.w	r1, r7, #84	; 0x54
 c0040b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 c0040bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 c0040c0:	4618      	mov	r0, r3
 c0040c2:	f7ff faa0 	bl	c003606 <uECC_vli_modSquare_fast>
    uECC_vli_modMult_fast(X1, X1, t5, curve);                /* t1 = x1*A = B */
 c0040c6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 c0040ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c0040ce:	68f9      	ldr	r1, [r7, #12]
 c0040d0:	68f8      	ldr	r0, [r7, #12]
 c0040d2:	f7ff fa7c 	bl	c0035ce <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(X2, X2, t5, curve);                /* t3 = x2*A = C */
 c0040d6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 c0040da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c0040de:	6879      	ldr	r1, [r7, #4]
 c0040e0:	6878      	ldr	r0, [r7, #4]
 c0040e2:	f7ff fa74 	bl	c0035ce <uECC_vli_modMult_fast>
    uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 c0040e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c0040ea:	1d1a      	adds	r2, r3, #4
 c0040ec:	f107 0054 	add.w	r0, r7, #84	; 0x54
 c0040f0:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c0040f4:	9300      	str	r3, [sp, #0]
 c0040f6:	4613      	mov	r3, r2
 c0040f8:	68ba      	ldr	r2, [r7, #8]
 c0040fa:	6839      	ldr	r1, [r7, #0]
 c0040fc:	f7ff f8cc 	bl	c003298 <uECC_vli_modAdd>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 c004100:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c004104:	1d1a      	adds	r2, r3, #4
 c004106:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c00410a:	9300      	str	r3, [sp, #0]
 c00410c:	4613      	mov	r3, r2
 c00410e:	68ba      	ldr	r2, [r7, #8]
 c004110:	6839      	ldr	r1, [r7, #0]
 c004112:	6838      	ldr	r0, [r7, #0]
 c004114:	f7ff f8e7 	bl	c0032e6 <uECC_vli_modSub>

    uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 c004118:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c00411c:	1d1a      	adds	r2, r3, #4
 c00411e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 c004122:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c004126:	9300      	str	r3, [sp, #0]
 c004128:	4613      	mov	r3, r2
 c00412a:	68fa      	ldr	r2, [r7, #12]
 c00412c:	6879      	ldr	r1, [r7, #4]
 c00412e:	f7ff f8da 	bl	c0032e6 <uECC_vli_modSub>
    uECC_vli_modMult_fast(Y1, Y1, t6, curve);                /* t2 = y1 * (C - B) = E */
 c004132:	f107 0234 	add.w	r2, r7, #52	; 0x34
 c004136:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c00413a:	68b9      	ldr	r1, [r7, #8]
 c00413c:	68b8      	ldr	r0, [r7, #8]
 c00413e:	f7ff fa46 	bl	c0035ce <uECC_vli_modMult_fast>
    uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 c004142:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c004146:	1d1a      	adds	r2, r3, #4
 c004148:	f107 0034 	add.w	r0, r7, #52	; 0x34
 c00414c:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c004150:	9300      	str	r3, [sp, #0]
 c004152:	4613      	mov	r3, r2
 c004154:	687a      	ldr	r2, [r7, #4]
 c004156:	68f9      	ldr	r1, [r7, #12]
 c004158:	f7ff f89e 	bl	c003298 <uECC_vli_modAdd>
    uECC_vli_modSquare_fast(X2, Y2, curve);                  /* t3 = (y2 - y1)^2 = D */
 c00415c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 c004160:	6839      	ldr	r1, [r7, #0]
 c004162:	6878      	ldr	r0, [r7, #4]
 c004164:	f7ff fa4f 	bl	c003606 <uECC_vli_modSquare_fast>
    uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
 c004168:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c00416c:	1d19      	adds	r1, r3, #4
 c00416e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 c004172:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c004176:	9300      	str	r3, [sp, #0]
 c004178:	460b      	mov	r3, r1
 c00417a:	6879      	ldr	r1, [r7, #4]
 c00417c:	6878      	ldr	r0, [r7, #4]
 c00417e:	f7ff f8b2 	bl	c0032e6 <uECC_vli_modSub>

    uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 c004182:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c004186:	1d1a      	adds	r2, r3, #4
 c004188:	f107 0014 	add.w	r0, r7, #20
 c00418c:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c004190:	9300      	str	r3, [sp, #0]
 c004192:	4613      	mov	r3, r2
 c004194:	687a      	ldr	r2, [r7, #4]
 c004196:	68f9      	ldr	r1, [r7, #12]
 c004198:	f7ff f8a5 	bl	c0032e6 <uECC_vli_modSub>
    uECC_vli_modMult_fast(Y2, Y2, t7, curve);                /* t4 = (y2 - y1)*(B - x3) */
 c00419c:	f107 0214 	add.w	r2, r7, #20
 c0041a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c0041a4:	6839      	ldr	r1, [r7, #0]
 c0041a6:	6838      	ldr	r0, [r7, #0]
 c0041a8:	f7ff fa11 	bl	c0035ce <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = (y2 - y1)*(B - x3) - E = y3 */
 c0041ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c0041b0:	1d1a      	adds	r2, r3, #4
 c0041b2:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c0041b6:	9300      	str	r3, [sp, #0]
 c0041b8:	4613      	mov	r3, r2
 c0041ba:	68ba      	ldr	r2, [r7, #8]
 c0041bc:	6839      	ldr	r1, [r7, #0]
 c0041be:	6838      	ldr	r0, [r7, #0]
 c0041c0:	f7ff f891 	bl	c0032e6 <uECC_vli_modSub>

    uECC_vli_modSquare_fast(t7, t5, curve);                  /* t7 = (y2 + y1)^2 = F */
 c0041c4:	f107 0154 	add.w	r1, r7, #84	; 0x54
 c0041c8:	f107 0314 	add.w	r3, r7, #20
 c0041cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 c0041d0:	4618      	mov	r0, r3
 c0041d2:	f7ff fa18 	bl	c003606 <uECC_vli_modSquare_fast>
    uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
 c0041d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c0041da:	1d1c      	adds	r4, r3, #4
 c0041dc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 c0041e0:	f107 0114 	add.w	r1, r7, #20
 c0041e4:	f107 0014 	add.w	r0, r7, #20
 c0041e8:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c0041ec:	9300      	str	r3, [sp, #0]
 c0041ee:	4623      	mov	r3, r4
 c0041f0:	f7ff f879 	bl	c0032e6 <uECC_vli_modSub>
    uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 c0041f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c0041f8:	1d1a      	adds	r2, r3, #4
 c0041fa:	f107 0114 	add.w	r1, r7, #20
 c0041fe:	f107 0034 	add.w	r0, r7, #52	; 0x34
 c004202:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c004206:	9300      	str	r3, [sp, #0]
 c004208:	4613      	mov	r3, r2
 c00420a:	68fa      	ldr	r2, [r7, #12]
 c00420c:	f7ff f86b 	bl	c0032e6 <uECC_vli_modSub>
    uECC_vli_modMult_fast(t6, t6, t5, curve);                /* t6 = (y2+y1)*(x3' - B) */
 c004210:	f107 0254 	add.w	r2, r7, #84	; 0x54
 c004214:	f107 0134 	add.w	r1, r7, #52	; 0x34
 c004218:	f107 0034 	add.w	r0, r7, #52	; 0x34
 c00421c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c004220:	f7ff f9d5 	bl	c0035ce <uECC_vli_modMult_fast>
    uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words); /* t2 = (y2+y1)*(x3' - B) - E = y3' */
 c004224:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 c004228:	1d1a      	adds	r2, r3, #4
 c00422a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 c00422e:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 c004232:	9300      	str	r3, [sp, #0]
 c004234:	4613      	mov	r3, r2
 c004236:	68ba      	ldr	r2, [r7, #8]
 c004238:	68b8      	ldr	r0, [r7, #8]
 c00423a:	f7ff f854 	bl	c0032e6 <uECC_vli_modSub>

    uECC_vli_set(X1, t7, num_words);
 c00423e:	f997 2077 	ldrsb.w	r2, [r7, #119]	; 0x77
 c004242:	f107 0314 	add.w	r3, r7, #20
 c004246:	4619      	mov	r1, r3
 c004248:	68f8      	ldr	r0, [r7, #12]
 c00424a:	f7fe ff35 	bl	c0030b8 <uECC_vli_set>
}
 c00424e:	bf00      	nop
 c004250:	377c      	adds	r7, #124	; 0x7c
 c004252:	46bd      	mov	sp, r7
 c004254:	bd90      	pop	{r4, r7, pc}

0c004256 <EccPoint_mult>:
static void EccPoint_mult(uECC_word_t * result,
                          const uECC_word_t * point,
                          const uECC_word_t * scalar,
                          const uECC_word_t * initial_Z,
                          bitcount_t num_bits,
                          uECC_Curve curve) {
 c004256:	b590      	push	{r4, r7, lr}
 c004258:	b0b1      	sub	sp, #196	; 0xc4
 c00425a:	af02      	add	r7, sp, #8
 c00425c:	60f8      	str	r0, [r7, #12]
 c00425e:	60b9      	str	r1, [r7, #8]
 c004260:	607a      	str	r2, [r7, #4]
 c004262:	603b      	str	r3, [r7, #0]
    uECC_word_t Rx[2][uECC_MAX_WORDS];
    uECC_word_t Ry[2][uECC_MAX_WORDS];
    uECC_word_t z[uECC_MAX_WORDS];
    bitcount_t i;
    uECC_word_t nb;
    wordcount_t num_words = curve->num_words;
 c004264:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c004268:	781b      	ldrb	r3, [r3, #0]
 c00426a:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5

    uECC_vli_set(Rx[1], point, num_words);
 c00426e:	f997 20b5 	ldrsb.w	r2, [r7, #181]	; 0xb5
 c004272:	f107 0370 	add.w	r3, r7, #112	; 0x70
 c004276:	3320      	adds	r3, #32
 c004278:	68b9      	ldr	r1, [r7, #8]
 c00427a:	4618      	mov	r0, r3
 c00427c:	f7fe ff1c 	bl	c0030b8 <uECC_vli_set>
    uECC_vli_set(Ry[1], point + num_words, num_words);
 c004280:	f997 30b5 	ldrsb.w	r3, [r7, #181]	; 0xb5
 c004284:	009b      	lsls	r3, r3, #2
 c004286:	68ba      	ldr	r2, [r7, #8]
 c004288:	18d1      	adds	r1, r2, r3
 c00428a:	f997 20b5 	ldrsb.w	r2, [r7, #181]	; 0xb5
 c00428e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 c004292:	3320      	adds	r3, #32
 c004294:	4618      	mov	r0, r3
 c004296:	f7fe ff0f 	bl	c0030b8 <uECC_vli_set>

    XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
 c00429a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 c00429e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c0042a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 c0042a6:	f103 0120 	add.w	r1, r3, #32
 c0042aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 c0042ae:	f103 0020 	add.w	r0, r3, #32
 c0042b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c0042b6:	9301      	str	r3, [sp, #4]
 c0042b8:	683b      	ldr	r3, [r7, #0]
 c0042ba:	9300      	str	r3, [sp, #0]
 c0042bc:	4623      	mov	r3, r4
 c0042be:	f7ff fe03 	bl	c003ec8 <XYcZ_initial_double>

    for (i = num_bits - 2; i > 0; --i) {
 c0042c2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 c0042c6:	3b02      	subs	r3, #2
 c0042c8:	b29b      	uxth	r3, r3
 c0042ca:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 c0042ce:	e059      	b.n	c004384 <EccPoint_mult+0x12e>
        nb = !uECC_vli_testBit(scalar, i);
 c0042d0:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 c0042d4:	4619      	mov	r1, r3
 c0042d6:	6878      	ldr	r0, [r7, #4]
 c0042d8:	f7fe fe74 	bl	c002fc4 <uECC_vli_testBit>
 c0042dc:	4603      	mov	r3, r0
 c0042de:	2b00      	cmp	r3, #0
 c0042e0:	bf0c      	ite	eq
 c0042e2:	2301      	moveq	r3, #1
 c0042e4:	2300      	movne	r3, #0
 c0042e6:	b2db      	uxtb	r3, r3
 c0042e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 c0042ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c0042f0:	f1c3 0301 	rsb	r3, r3, #1
 c0042f4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c0042f8:	015b      	lsls	r3, r3, #5
 c0042fa:	18d0      	adds	r0, r2, r3
 c0042fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c004300:	f1c3 0301 	rsb	r3, r3, #1
 c004304:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c004308:	015b      	lsls	r3, r3, #5
 c00430a:	18d1      	adds	r1, r2, r3
 c00430c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c004310:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c004314:	015b      	lsls	r3, r3, #5
 c004316:	18d4      	adds	r4, r2, r3
 c004318:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c00431c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c004320:	015b      	lsls	r3, r3, #5
 c004322:	441a      	add	r2, r3
 c004324:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c004328:	9300      	str	r3, [sp, #0]
 c00432a:	4613      	mov	r3, r2
 c00432c:	4622      	mov	r2, r4
 c00432e:	f7ff fea8 	bl	c004082 <XYcZ_addC>
        XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 c004332:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c004336:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c00433a:	015b      	lsls	r3, r3, #5
 c00433c:	18d0      	adds	r0, r2, r3
 c00433e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c004342:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c004346:	015b      	lsls	r3, r3, #5
 c004348:	18d1      	adds	r1, r2, r3
 c00434a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c00434e:	f1c3 0301 	rsb	r3, r3, #1
 c004352:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c004356:	015b      	lsls	r3, r3, #5
 c004358:	18d4      	adds	r4, r2, r3
 c00435a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c00435e:	f1c3 0301 	rsb	r3, r3, #1
 c004362:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c004366:	015b      	lsls	r3, r3, #5
 c004368:	441a      	add	r2, r3
 c00436a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c00436e:	9300      	str	r3, [sp, #0]
 c004370:	4613      	mov	r3, r2
 c004372:	4622      	mov	r2, r4
 c004374:	f7ff fdf2 	bl	c003f5c <XYcZ_add>
    for (i = num_bits - 2; i > 0; --i) {
 c004378:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 c00437c:	3b01      	subs	r3, #1
 c00437e:	b29b      	uxth	r3, r3
 c004380:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 c004384:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 c004388:	2b00      	cmp	r3, #0
 c00438a:	dca1      	bgt.n	c0042d0 <EccPoint_mult+0x7a>
    }

    nb = !uECC_vli_testBit(scalar, 0);
 c00438c:	2100      	movs	r1, #0
 c00438e:	6878      	ldr	r0, [r7, #4]
 c004390:	f7fe fe18 	bl	c002fc4 <uECC_vli_testBit>
 c004394:	4603      	mov	r3, r0
 c004396:	2b00      	cmp	r3, #0
 c004398:	bf0c      	ite	eq
 c00439a:	2301      	moveq	r3, #1
 c00439c:	2300      	movne	r3, #0
 c00439e:	b2db      	uxtb	r3, r3
 c0043a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 c0043a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c0043a8:	f1c3 0301 	rsb	r3, r3, #1
 c0043ac:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c0043b0:	015b      	lsls	r3, r3, #5
 c0043b2:	18d0      	adds	r0, r2, r3
 c0043b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c0043b8:	f1c3 0301 	rsb	r3, r3, #1
 c0043bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c0043c0:	015b      	lsls	r3, r3, #5
 c0043c2:	18d1      	adds	r1, r2, r3
 c0043c4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c0043c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c0043cc:	015b      	lsls	r3, r3, #5
 c0043ce:	18d4      	adds	r4, r2, r3
 c0043d0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c0043d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c0043d8:	015b      	lsls	r3, r3, #5
 c0043da:	441a      	add	r2, r3
 c0043dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c0043e0:	9300      	str	r3, [sp, #0]
 c0043e2:	4613      	mov	r3, r2
 c0043e4:	4622      	mov	r2, r4
 c0043e6:	f7ff fe4c 	bl	c004082 <XYcZ_addC>

    /* Find final 1/Z value. */
    uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 c0043ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c0043ee:	1d1c      	adds	r4, r3, #4
 c0043f0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c0043f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 c0043f8:	f103 0120 	add.w	r1, r3, #32
 c0043fc:	f107 0010 	add.w	r0, r7, #16
 c004400:	f997 30b5 	ldrsb.w	r3, [r7, #181]	; 0xb5
 c004404:	9300      	str	r3, [sp, #0]
 c004406:	4623      	mov	r3, r4
 c004408:	f7fe ff6d 	bl	c0032e6 <uECC_vli_modSub>
    uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve);               /* Yb * (X1 - X0) */
 c00440c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c004410:	f1c3 0301 	rsb	r3, r3, #1
 c004414:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c004418:	015b      	lsls	r3, r3, #5
 c00441a:	441a      	add	r2, r3
 c00441c:	f107 0110 	add.w	r1, r7, #16
 c004420:	f107 0010 	add.w	r0, r7, #16
 c004424:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c004428:	f7ff f8d1 	bl	c0035ce <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(z, z, point, curve);                    /* xP * Yb * (X1 - X0) */
 c00442c:	f107 0110 	add.w	r1, r7, #16
 c004430:	f107 0010 	add.w	r0, r7, #16
 c004434:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c004438:	68ba      	ldr	r2, [r7, #8]
 c00443a:	f7ff f8c8 	bl	c0035ce <uECC_vli_modMult_fast>
    uECC_vli_modInv(z, z, curve->p, num_words);            /* 1 / (xP * Yb * (X1 - X0)) */
 c00443e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c004442:	1d1a      	adds	r2, r3, #4
 c004444:	f997 30b5 	ldrsb.w	r3, [r7, #181]	; 0xb5
 c004448:	f107 0110 	add.w	r1, r7, #16
 c00444c:	f107 0010 	add.w	r0, r7, #16
 c004450:	f7ff f921 	bl	c003696 <uECC_vli_modInv>
    /* yP / (xP * Yb * (X1 - X0)) */
    uECC_vli_modMult_fast(z, z, point + num_words, curve);
 c004454:	f997 30b5 	ldrsb.w	r3, [r7, #181]	; 0xb5
 c004458:	009b      	lsls	r3, r3, #2
 c00445a:	68ba      	ldr	r2, [r7, #8]
 c00445c:	441a      	add	r2, r3
 c00445e:	f107 0110 	add.w	r1, r7, #16
 c004462:	f107 0010 	add.w	r0, r7, #16
 c004466:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c00446a:	f7ff f8b0 	bl	c0035ce <uECC_vli_modMult_fast>
    uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve); /* Xb * yP / (xP * Yb * (X1 - X0)) */
 c00446e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c004472:	f1c3 0301 	rsb	r3, r3, #1
 c004476:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c00447a:	015b      	lsls	r3, r3, #5
 c00447c:	441a      	add	r2, r3
 c00447e:	f107 0110 	add.w	r1, r7, #16
 c004482:	f107 0010 	add.w	r0, r7, #16
 c004486:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c00448a:	f7ff f8a0 	bl	c0035ce <uECC_vli_modMult_fast>
    /* End 1/Z calculation */

    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 c00448e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c004492:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c004496:	015b      	lsls	r3, r3, #5
 c004498:	18d0      	adds	r0, r2, r3
 c00449a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c00449e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c0044a2:	015b      	lsls	r3, r3, #5
 c0044a4:	18d1      	adds	r1, r2, r3
 c0044a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c0044aa:	f1c3 0301 	rsb	r3, r3, #1
 c0044ae:	f107 0270 	add.w	r2, r7, #112	; 0x70
 c0044b2:	015b      	lsls	r3, r3, #5
 c0044b4:	18d4      	adds	r4, r2, r3
 c0044b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c0044ba:	f1c3 0301 	rsb	r3, r3, #1
 c0044be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 c0044c2:	015b      	lsls	r3, r3, #5
 c0044c4:	441a      	add	r2, r3
 c0044c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c0044ca:	9300      	str	r3, [sp, #0]
 c0044cc:	4613      	mov	r3, r2
 c0044ce:	4622      	mov	r2, r4
 c0044d0:	f7ff fd44 	bl	c003f5c <XYcZ_add>
    apply_z(Rx[0], Ry[0], z, curve);
 c0044d4:	f107 0210 	add.w	r2, r7, #16
 c0044d8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c0044dc:	f107 0070 	add.w	r0, r7, #112	; 0x70
 c0044e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 c0044e4:	f7ff fcc8 	bl	c003e78 <apply_z>

    uECC_vli_set(result, Rx[0], num_words);
 c0044e8:	f997 20b5 	ldrsb.w	r2, [r7, #181]	; 0xb5
 c0044ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 c0044f0:	4619      	mov	r1, r3
 c0044f2:	68f8      	ldr	r0, [r7, #12]
 c0044f4:	f7fe fde0 	bl	c0030b8 <uECC_vli_set>
    uECC_vli_set(result + num_words, Ry[0], num_words);
 c0044f8:	f997 30b5 	ldrsb.w	r3, [r7, #181]	; 0xb5
 c0044fc:	009b      	lsls	r3, r3, #2
 c0044fe:	68fa      	ldr	r2, [r7, #12]
 c004500:	4413      	add	r3, r2
 c004502:	f997 20b5 	ldrsb.w	r2, [r7, #181]	; 0xb5
 c004506:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c00450a:	4618      	mov	r0, r3
 c00450c:	f7fe fdd4 	bl	c0030b8 <uECC_vli_set>
}
 c004510:	bf00      	nop
 c004512:	37bc      	adds	r7, #188	; 0xbc
 c004514:	46bd      	mov	sp, r7
 c004516:	bd90      	pop	{r4, r7, pc}

0c004518 <regularize_k>:

static uECC_word_t regularize_k(const uECC_word_t * const k,
                                uECC_word_t *k0,
                                uECC_word_t *k1,
                                uECC_Curve curve) {
 c004518:	b580      	push	{r7, lr}
 c00451a:	b086      	sub	sp, #24
 c00451c:	af00      	add	r7, sp, #0
 c00451e:	60f8      	str	r0, [r7, #12]
 c004520:	60b9      	str	r1, [r7, #8]
 c004522:	607a      	str	r2, [r7, #4]
 c004524:	603b      	str	r3, [r7, #0]
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 c004526:	683b      	ldr	r3, [r7, #0]
 c004528:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c00452c:	331f      	adds	r3, #31
 c00452e:	2b00      	cmp	r3, #0
 c004530:	da00      	bge.n	c004534 <regularize_k+0x1c>
 c004532:	331f      	adds	r3, #31
 c004534:	115b      	asrs	r3, r3, #5
 c004536:	75fb      	strb	r3, [r7, #23]
    bitcount_t num_n_bits = curve->num_n_bits;
 c004538:	683b      	ldr	r3, [r7, #0]
 c00453a:	885b      	ldrh	r3, [r3, #2]
 c00453c:	82bb      	strh	r3, [r7, #20]
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 c00453e:	683b      	ldr	r3, [r7, #0]
 c004540:	f103 0224 	add.w	r2, r3, #36	; 0x24
 c004544:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c004548:	68f9      	ldr	r1, [r7, #12]
 c00454a:	68b8      	ldr	r0, [r7, #8]
 c00454c:	f7fe fc08 	bl	c002d60 <uECC_vli_add>
 c004550:	4603      	mov	r3, r0
 c004552:	2b00      	cmp	r3, #0
 c004554:	d10f      	bne.n	c004576 <regularize_k+0x5e>
        (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
 c004556:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 c00455a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c00455e:	015b      	lsls	r3, r3, #5
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 c004560:	429a      	cmp	r2, r3
 c004562:	da0a      	bge.n	c00457a <regularize_k+0x62>
         uECC_vli_testBit(k0, num_n_bits));
 c004564:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 c004568:	4619      	mov	r1, r3
 c00456a:	68b8      	ldr	r0, [r7, #8]
 c00456c:	f7fe fd2a 	bl	c002fc4 <uECC_vli_testBit>
 c004570:	4603      	mov	r3, r0
        (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
 c004572:	2b00      	cmp	r3, #0
 c004574:	d001      	beq.n	c00457a <regularize_k+0x62>
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
 c004576:	2301      	movs	r3, #1
 c004578:	e000      	b.n	c00457c <regularize_k+0x64>
 c00457a:	2300      	movs	r3, #0
 c00457c:	613b      	str	r3, [r7, #16]
    uECC_vli_add(k1, k0, curve->n, num_n_words);
 c00457e:	683b      	ldr	r3, [r7, #0]
 c004580:	f103 0224 	add.w	r2, r3, #36	; 0x24
 c004584:	f997 3017 	ldrsb.w	r3, [r7, #23]
 c004588:	68b9      	ldr	r1, [r7, #8]
 c00458a:	6878      	ldr	r0, [r7, #4]
 c00458c:	f7fe fbe8 	bl	c002d60 <uECC_vli_add>
    return carry;
 c004590:	693b      	ldr	r3, [r7, #16]
}
 c004592:	4618      	mov	r0, r3
 c004594:	3718      	adds	r7, #24
 c004596:	46bd      	mov	sp, r7
 c004598:	bd80      	pop	{r7, pc}
	...

0c00459c <uECC_generate_random_int>:

/* Generates a random integer in the range 0 < random < top.
   Both random and top have num_words words. */
uECC_VLI_API int uECC_generate_random_int(uECC_word_t *random,
                                          const uECC_word_t *top,
                                          wordcount_t num_words) {
 c00459c:	b580      	push	{r7, lr}
 c00459e:	b088      	sub	sp, #32
 c0045a0:	af00      	add	r7, sp, #0
 c0045a2:	60f8      	str	r0, [r7, #12]
 c0045a4:	60b9      	str	r1, [r7, #8]
 c0045a6:	4613      	mov	r3, r2
 c0045a8:	71fb      	strb	r3, [r7, #7]
    uECC_word_t mask = (uECC_word_t)-1;
 c0045aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0045ae:	61bb      	str	r3, [r7, #24]
    uECC_word_t tries;
    bitcount_t num_bits = uECC_vli_numBits(top, num_words);
 c0045b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0045b4:	4619      	mov	r1, r3
 c0045b6:	68b8      	ldr	r0, [r7, #8]
 c0045b8:	f7fe fd44 	bl	c003044 <uECC_vli_numBits>
 c0045bc:	4603      	mov	r3, r0
 c0045be:	82fb      	strh	r3, [r7, #22]

    if (!g_rng_function) {
 c0045c0:	4b2a      	ldr	r3, [pc, #168]	; (c00466c <uECC_generate_random_int+0xd0>)
 c0045c2:	681b      	ldr	r3, [r3, #0]
 c0045c4:	2b00      	cmp	r3, #0
 c0045c6:	d101      	bne.n	c0045cc <uECC_generate_random_int+0x30>
        return 0;
 c0045c8:	2300      	movs	r3, #0
 c0045ca:	e04b      	b.n	c004664 <uECC_generate_random_int+0xc8>
    }

    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 c0045cc:	2300      	movs	r3, #0
 c0045ce:	61fb      	str	r3, [r7, #28]
 c0045d0:	e044      	b.n	c00465c <uECC_generate_random_int+0xc0>
        if (!g_rng_function((uint8_t *)random, num_words * uECC_WORD_SIZE)) {
 c0045d2:	4b26      	ldr	r3, [pc, #152]	; (c00466c <uECC_generate_random_int+0xd0>)
 c0045d4:	681b      	ldr	r3, [r3, #0]
 c0045d6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 c0045da:	0092      	lsls	r2, r2, #2
 c0045dc:	4611      	mov	r1, r2
 c0045de:	68f8      	ldr	r0, [r7, #12]
 c0045e0:	4798      	blx	r3
 c0045e2:	4603      	mov	r3, r0
 c0045e4:	2b00      	cmp	r3, #0
 c0045e6:	d101      	bne.n	c0045ec <uECC_generate_random_int+0x50>
            return 0;
 c0045e8:	2300      	movs	r3, #0
 c0045ea:	e03b      	b.n	c004664 <uECC_generate_random_int+0xc8>
        }
        random[num_words - 1] &= mask >> ((bitcount_t)(num_words * uECC_WORD_SIZE * 8 - num_bits));
 c0045ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0045f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c0045f4:	3b01      	subs	r3, #1
 c0045f6:	009b      	lsls	r3, r3, #2
 c0045f8:	68fa      	ldr	r2, [r7, #12]
 c0045fa:	4413      	add	r3, r2
 c0045fc:	6819      	ldr	r1, [r3, #0]
 c0045fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c004602:	b29b      	uxth	r3, r3
 c004604:	015b      	lsls	r3, r3, #5
 c004606:	b29a      	uxth	r2, r3
 c004608:	8afb      	ldrh	r3, [r7, #22]
 c00460a:	1ad3      	subs	r3, r2, r3
 c00460c:	b29b      	uxth	r3, r3
 c00460e:	b21b      	sxth	r3, r3
 c004610:	461a      	mov	r2, r3
 c004612:	69bb      	ldr	r3, [r7, #24]
 c004614:	fa23 f202 	lsr.w	r2, r3, r2
 c004618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00461c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c004620:	3b01      	subs	r3, #1
 c004622:	009b      	lsls	r3, r3, #2
 c004624:	68f8      	ldr	r0, [r7, #12]
 c004626:	4403      	add	r3, r0
 c004628:	400a      	ands	r2, r1
 c00462a:	601a      	str	r2, [r3, #0]
        if (!uECC_vli_isZero(random, num_words) &&
 c00462c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c004630:	4619      	mov	r1, r3
 c004632:	68f8      	ldr	r0, [r7, #12]
 c004634:	f7fe fc9c 	bl	c002f70 <uECC_vli_isZero>
 c004638:	4603      	mov	r3, r0
 c00463a:	2b00      	cmp	r3, #0
 c00463c:	d10b      	bne.n	c004656 <uECC_generate_random_int+0xba>
                uECC_vli_cmp(top, random, num_words) == 1) {
 c00463e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c004642:	461a      	mov	r2, r3
 c004644:	68f9      	ldr	r1, [r7, #12]
 c004646:	68b8      	ldr	r0, [r7, #8]
 c004648:	f7fe fdcb 	bl	c0031e2 <uECC_vli_cmp>
 c00464c:	4603      	mov	r3, r0
        if (!uECC_vli_isZero(random, num_words) &&
 c00464e:	2b01      	cmp	r3, #1
 c004650:	d101      	bne.n	c004656 <uECC_generate_random_int+0xba>
            return 1;
 c004652:	2301      	movs	r3, #1
 c004654:	e006      	b.n	c004664 <uECC_generate_random_int+0xc8>
    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 c004656:	69fb      	ldr	r3, [r7, #28]
 c004658:	3301      	adds	r3, #1
 c00465a:	61fb      	str	r3, [r7, #28]
 c00465c:	69fb      	ldr	r3, [r7, #28]
 c00465e:	2b3f      	cmp	r3, #63	; 0x3f
 c004660:	d9b7      	bls.n	c0045d2 <uECC_generate_random_int+0x36>
        }
    }
    return 0;
 c004662:	2300      	movs	r3, #0
}
 c004664:	4618      	mov	r0, r3
 c004666:	3720      	adds	r7, #32
 c004668:	46bd      	mov	sp, r7
 c00466a:	bd80      	pop	{r7, pc}
 c00466c:	30000068 	.word	0x30000068

0c004670 <uECC_vli_nativeToBytes>:

#else

uECC_VLI_API void uECC_vli_nativeToBytes(uint8_t *bytes,
                                         int num_bytes,
                                         const uECC_word_t *native) {
 c004670:	b480      	push	{r7}
 c004672:	b087      	sub	sp, #28
 c004674:	af00      	add	r7, sp, #0
 c004676:	60f8      	str	r0, [r7, #12]
 c004678:	60b9      	str	r1, [r7, #8]
 c00467a:	607a      	str	r2, [r7, #4]
    int i;
    for (i = 0; i < num_bytes; ++i) {
 c00467c:	2300      	movs	r3, #0
 c00467e:	617b      	str	r3, [r7, #20]
 c004680:	e018      	b.n	c0046b4 <uECC_vli_nativeToBytes+0x44>
        unsigned b = num_bytes - 1 - i;
 c004682:	68bb      	ldr	r3, [r7, #8]
 c004684:	1e5a      	subs	r2, r3, #1
 c004686:	697b      	ldr	r3, [r7, #20]
 c004688:	1ad3      	subs	r3, r2, r3
 c00468a:	613b      	str	r3, [r7, #16]
        bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
 c00468c:	693b      	ldr	r3, [r7, #16]
 c00468e:	f023 0303 	bic.w	r3, r3, #3
 c004692:	687a      	ldr	r2, [r7, #4]
 c004694:	4413      	add	r3, r2
 c004696:	681a      	ldr	r2, [r3, #0]
 c004698:	693b      	ldr	r3, [r7, #16]
 c00469a:	f003 0303 	and.w	r3, r3, #3
 c00469e:	00db      	lsls	r3, r3, #3
 c0046a0:	fa22 f103 	lsr.w	r1, r2, r3
 c0046a4:	697b      	ldr	r3, [r7, #20]
 c0046a6:	68fa      	ldr	r2, [r7, #12]
 c0046a8:	4413      	add	r3, r2
 c0046aa:	b2ca      	uxtb	r2, r1
 c0046ac:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_bytes; ++i) {
 c0046ae:	697b      	ldr	r3, [r7, #20]
 c0046b0:	3301      	adds	r3, #1
 c0046b2:	617b      	str	r3, [r7, #20]
 c0046b4:	697a      	ldr	r2, [r7, #20]
 c0046b6:	68bb      	ldr	r3, [r7, #8]
 c0046b8:	429a      	cmp	r2, r3
 c0046ba:	dbe2      	blt.n	c004682 <uECC_vli_nativeToBytes+0x12>
    }
}
 c0046bc:	bf00      	nop
 c0046be:	bf00      	nop
 c0046c0:	371c      	adds	r7, #28
 c0046c2:	46bd      	mov	sp, r7
 c0046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0046c8:	4770      	bx	lr

0c0046ca <uECC_vli_bytesToNative>:

uECC_VLI_API void uECC_vli_bytesToNative(uECC_word_t *native,
                                         const uint8_t *bytes,
                                         int num_bytes) {
 c0046ca:	b580      	push	{r7, lr}
 c0046cc:	b086      	sub	sp, #24
 c0046ce:	af00      	add	r7, sp, #0
 c0046d0:	60f8      	str	r0, [r7, #12]
 c0046d2:	60b9      	str	r1, [r7, #8]
 c0046d4:	607a      	str	r2, [r7, #4]
    int i;
    uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
 c0046d6:	687b      	ldr	r3, [r7, #4]
 c0046d8:	3303      	adds	r3, #3
 c0046da:	2b00      	cmp	r3, #0
 c0046dc:	da00      	bge.n	c0046e0 <uECC_vli_bytesToNative+0x16>
 c0046de:	3303      	adds	r3, #3
 c0046e0:	109b      	asrs	r3, r3, #2
 c0046e2:	b25b      	sxtb	r3, r3
 c0046e4:	4619      	mov	r1, r3
 c0046e6:	68f8      	ldr	r0, [r7, #12]
 c0046e8:	f7fe fc21 	bl	c002f2e <uECC_vli_clear>
    for (i = 0; i < num_bytes; ++i) {
 c0046ec:	2300      	movs	r3, #0
 c0046ee:	617b      	str	r3, [r7, #20]
 c0046f0:	e01e      	b.n	c004730 <uECC_vli_bytesToNative+0x66>
        unsigned b = num_bytes - 1 - i;
 c0046f2:	687b      	ldr	r3, [r7, #4]
 c0046f4:	1e5a      	subs	r2, r3, #1
 c0046f6:	697b      	ldr	r3, [r7, #20]
 c0046f8:	1ad3      	subs	r3, r2, r3
 c0046fa:	613b      	str	r3, [r7, #16]
        native[b / uECC_WORD_SIZE] |=
 c0046fc:	693b      	ldr	r3, [r7, #16]
 c0046fe:	f023 0303 	bic.w	r3, r3, #3
 c004702:	68fa      	ldr	r2, [r7, #12]
 c004704:	4413      	add	r3, r2
 c004706:	6819      	ldr	r1, [r3, #0]
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
 c004708:	697b      	ldr	r3, [r7, #20]
 c00470a:	68ba      	ldr	r2, [r7, #8]
 c00470c:	4413      	add	r3, r2
 c00470e:	781b      	ldrb	r3, [r3, #0]
 c004710:	461a      	mov	r2, r3
 c004712:	693b      	ldr	r3, [r7, #16]
 c004714:	f003 0303 	and.w	r3, r3, #3
 c004718:	00db      	lsls	r3, r3, #3
 c00471a:	409a      	lsls	r2, r3
        native[b / uECC_WORD_SIZE] |=
 c00471c:	693b      	ldr	r3, [r7, #16]
 c00471e:	f023 0303 	bic.w	r3, r3, #3
 c004722:	68f8      	ldr	r0, [r7, #12]
 c004724:	4403      	add	r3, r0
 c004726:	430a      	orrs	r2, r1
 c004728:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_bytes; ++i) {
 c00472a:	697b      	ldr	r3, [r7, #20]
 c00472c:	3301      	adds	r3, #1
 c00472e:	617b      	str	r3, [r7, #20]
 c004730:	697a      	ldr	r2, [r7, #20]
 c004732:	687b      	ldr	r3, [r7, #4]
 c004734:	429a      	cmp	r2, r3
 c004736:	dbdc      	blt.n	c0046f2 <uECC_vli_bytesToNative+0x28>
    }
}
 c004738:	bf00      	nop
 c00473a:	bf00      	nop
 c00473c:	3718      	adds	r7, #24
 c00473e:	46bd      	mov	sp, r7
 c004740:	bd80      	pop	{r7, pc}

0c004742 <bits2int>:
/* -------- ECDSA code -------- */

static void bits2int(uECC_word_t *native,
                     const uint8_t *bits,
                     unsigned bits_size,
                     uECC_Curve curve) {
 c004742:	b580      	push	{r7, lr}
 c004744:	b08a      	sub	sp, #40	; 0x28
 c004746:	af00      	add	r7, sp, #0
 c004748:	60f8      	str	r0, [r7, #12]
 c00474a:	60b9      	str	r1, [r7, #8]
 c00474c:	607a      	str	r2, [r7, #4]
 c00474e:	603b      	str	r3, [r7, #0]
    unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
 c004750:	683b      	ldr	r3, [r7, #0]
 c004752:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c004756:	3307      	adds	r3, #7
 c004758:	2b00      	cmp	r3, #0
 c00475a:	da00      	bge.n	c00475e <bits2int+0x1c>
 c00475c:	3307      	adds	r3, #7
 c00475e:	10db      	asrs	r3, r3, #3
 c004760:	61fb      	str	r3, [r7, #28]
    unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 c004762:	683b      	ldr	r3, [r7, #0]
 c004764:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c004768:	331f      	adds	r3, #31
 c00476a:	2b00      	cmp	r3, #0
 c00476c:	da00      	bge.n	c004770 <bits2int+0x2e>
 c00476e:	331f      	adds	r3, #31
 c004770:	115b      	asrs	r3, r3, #5
 c004772:	61bb      	str	r3, [r7, #24]
    int shift;
    uECC_word_t carry;
    uECC_word_t *ptr;

    if (bits_size > num_n_bytes) {
 c004774:	687a      	ldr	r2, [r7, #4]
 c004776:	69fb      	ldr	r3, [r7, #28]
 c004778:	429a      	cmp	r2, r3
 c00477a:	d901      	bls.n	c004780 <bits2int+0x3e>
        bits_size = num_n_bytes;
 c00477c:	69fb      	ldr	r3, [r7, #28]
 c00477e:	607b      	str	r3, [r7, #4]
    }

    uECC_vli_clear(native, num_n_words);
 c004780:	69bb      	ldr	r3, [r7, #24]
 c004782:	b25b      	sxtb	r3, r3
 c004784:	4619      	mov	r1, r3
 c004786:	68f8      	ldr	r0, [r7, #12]
 c004788:	f7fe fbd1 	bl	c002f2e <uECC_vli_clear>
#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) native, bits, bits_size);
#else
    uECC_vli_bytesToNative(native, bits, bits_size);
 c00478c:	687b      	ldr	r3, [r7, #4]
 c00478e:	461a      	mov	r2, r3
 c004790:	68b9      	ldr	r1, [r7, #8]
 c004792:	68f8      	ldr	r0, [r7, #12]
 c004794:	f7ff ff99 	bl	c0046ca <uECC_vli_bytesToNative>
#endif
    if (bits_size * 8 <= (unsigned)curve->num_n_bits) {
 c004798:	687b      	ldr	r3, [r7, #4]
 c00479a:	00db      	lsls	r3, r3, #3
 c00479c:	683a      	ldr	r2, [r7, #0]
 c00479e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 c0047a2:	4293      	cmp	r3, r2
 c0047a4:	d93a      	bls.n	c00481c <bits2int+0xda>
        return;
    }
    shift = bits_size * 8 - curve->num_n_bits;
 c0047a6:	687b      	ldr	r3, [r7, #4]
 c0047a8:	00db      	lsls	r3, r3, #3
 c0047aa:	683a      	ldr	r2, [r7, #0]
 c0047ac:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 c0047b0:	1a9b      	subs	r3, r3, r2
 c0047b2:	617b      	str	r3, [r7, #20]
    carry = 0;
 c0047b4:	2300      	movs	r3, #0
 c0047b6:	627b      	str	r3, [r7, #36]	; 0x24
    ptr = native + num_n_words;
 c0047b8:	69bb      	ldr	r3, [r7, #24]
 c0047ba:	009b      	lsls	r3, r3, #2
 c0047bc:	68fa      	ldr	r2, [r7, #12]
 c0047be:	4413      	add	r3, r2
 c0047c0:	623b      	str	r3, [r7, #32]
    while (ptr-- > native) {
 c0047c2:	e010      	b.n	c0047e6 <bits2int+0xa4>
        uECC_word_t temp = *ptr;
 c0047c4:	6a3b      	ldr	r3, [r7, #32]
 c0047c6:	681b      	ldr	r3, [r3, #0]
 c0047c8:	613b      	str	r3, [r7, #16]
        *ptr = (temp >> shift) | carry;
 c0047ca:	693a      	ldr	r2, [r7, #16]
 c0047cc:	697b      	ldr	r3, [r7, #20]
 c0047ce:	40da      	lsrs	r2, r3
 c0047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0047d2:	431a      	orrs	r2, r3
 c0047d4:	6a3b      	ldr	r3, [r7, #32]
 c0047d6:	601a      	str	r2, [r3, #0]
        carry = temp << (uECC_WORD_BITS - shift);
 c0047d8:	697b      	ldr	r3, [r7, #20]
 c0047da:	f1c3 0320 	rsb	r3, r3, #32
 c0047de:	693a      	ldr	r2, [r7, #16]
 c0047e0:	fa02 f303 	lsl.w	r3, r2, r3
 c0047e4:	627b      	str	r3, [r7, #36]	; 0x24
    while (ptr-- > native) {
 c0047e6:	6a3b      	ldr	r3, [r7, #32]
 c0047e8:	1f1a      	subs	r2, r3, #4
 c0047ea:	623a      	str	r2, [r7, #32]
 c0047ec:	68fa      	ldr	r2, [r7, #12]
 c0047ee:	429a      	cmp	r2, r3
 c0047f0:	d3e8      	bcc.n	c0047c4 <bits2int+0x82>
    }

    /* Reduce mod curve_n */
    if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {
 c0047f2:	683b      	ldr	r3, [r7, #0]
 c0047f4:	3324      	adds	r3, #36	; 0x24
 c0047f6:	69ba      	ldr	r2, [r7, #24]
 c0047f8:	b252      	sxtb	r2, r2
 c0047fa:	68f9      	ldr	r1, [r7, #12]
 c0047fc:	4618      	mov	r0, r3
 c0047fe:	f7fe fc82 	bl	c003106 <uECC_vli_cmp_unsafe>
 c004802:	4603      	mov	r3, r0
 c004804:	2b01      	cmp	r3, #1
 c004806:	d00a      	beq.n	c00481e <bits2int+0xdc>
        uECC_vli_sub(native, native, curve->n, num_n_words);
 c004808:	683b      	ldr	r3, [r7, #0]
 c00480a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 c00480e:	69bb      	ldr	r3, [r7, #24]
 c004810:	b25b      	sxtb	r3, r3
 c004812:	68f9      	ldr	r1, [r7, #12]
 c004814:	68f8      	ldr	r0, [r7, #12]
 c004816:	f7fe faeb 	bl	c002df0 <uECC_vli_sub>
 c00481a:	e000      	b.n	c00481e <bits2int+0xdc>
        return;
 c00481c:	bf00      	nop
    }
}
 c00481e:	3728      	adds	r7, #40	; 0x28
 c004820:	46bd      	mov	sp, r7
 c004822:	bd80      	pop	{r7, pc}

0c004824 <uECC_sign_with_k_internal>:
static int uECC_sign_with_k_internal(const uint8_t *private_key,
                            const uint8_t *message_hash,
                            unsigned hash_size,
                            uECC_word_t *k,
                            uint8_t *signature,
                            uECC_Curve curve) {
 c004824:	b590      	push	{r4, r7, lr}
 c004826:	b0ad      	sub	sp, #180	; 0xb4
 c004828:	af02      	add	r7, sp, #8
 c00482a:	60f8      	str	r0, [r7, #12]
 c00482c:	60b9      	str	r1, [r7, #8]
 c00482e:	607a      	str	r2, [r7, #4]
 c004830:	603b      	str	r3, [r7, #0]

    uECC_word_t tmp[uECC_MAX_WORDS];

    uECC_word_t s[uECC_MAX_WORDS];

    uECC_word_t *k2[2] = {tmp, s};
 c004832:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 c004836:	657b      	str	r3, [r7, #84]	; 0x54
 c004838:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 c00483c:	65bb      	str	r3, [r7, #88]	; 0x58

    uECC_word_t *initial_Z = 0;
 c00483e:	2300      	movs	r3, #0
 c004840:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    uECC_word_t *p = (uECC_word_t *)signature;
#else
    uECC_word_t p[uECC_MAX_WORDS * 2];
#endif
    uECC_word_t carry;
    wordcount_t num_words = curve->num_words;
 c004844:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004848:	781b      	ldrb	r3, [r3, #0]
 c00484a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 c00484e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004852:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c004856:	331f      	adds	r3, #31
 c004858:	2b00      	cmp	r3, #0
 c00485a:	da00      	bge.n	c00485e <uECC_sign_with_k_internal+0x3a>
 c00485c:	331f      	adds	r3, #31
 c00485e:	115b      	asrs	r3, r3, #5
 c004860:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    bitcount_t num_n_bits = curve->num_n_bits;
 c004864:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004868:	885b      	ldrh	r3, [r3, #2]
 c00486a:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

    /* Make sure 0 < k < curve_n */
    if (uECC_vli_isZero(k, num_words) || uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
 c00486e:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 c004872:	4619      	mov	r1, r3
 c004874:	6838      	ldr	r0, [r7, #0]
 c004876:	f7fe fb7b 	bl	c002f70 <uECC_vli_isZero>
 c00487a:	4603      	mov	r3, r0
 c00487c:	2b00      	cmp	r3, #0
 c00487e:	d10b      	bne.n	c004898 <uECC_sign_with_k_internal+0x74>
 c004880:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004884:	3324      	adds	r3, #36	; 0x24
 c004886:	f997 20a2 	ldrsb.w	r2, [r7, #162]	; 0xa2
 c00488a:	6839      	ldr	r1, [r7, #0]
 c00488c:	4618      	mov	r0, r3
 c00488e:	f7fe fca8 	bl	c0031e2 <uECC_vli_cmp>
 c004892:	4603      	mov	r3, r0
 c004894:	2b01      	cmp	r3, #1
 c004896:	d001      	beq.n	c00489c <uECC_sign_with_k_internal+0x78>
        return 0;
 c004898:	2300      	movs	r3, #0
 c00489a:	e128      	b.n	c004aee <uECC_sign_with_k_internal+0x2ca>
    }

    carry = regularize_k(k, tmp, s, curve);
 c00489c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 c0048a0:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 c0048a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c0048a8:	6838      	ldr	r0, [r7, #0]
 c0048aa:	f7ff fe35 	bl	c004518 <regularize_k>
 c0048ae:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
    /* If an RNG function was specified, try to get a random initial Z value to improve
       protection against side-channel attacks. */
    if (g_rng_function) {
 c0048b2:	4b91      	ldr	r3, [pc, #580]	; (c004af8 <uECC_sign_with_k_internal+0x2d4>)
 c0048b4:	681b      	ldr	r3, [r3, #0]
 c0048b6:	2b00      	cmp	r3, #0
 c0048b8:	d01c      	beq.n	c0048f4 <uECC_sign_with_k_internal+0xd0>
        if (!uECC_generate_random_int(k2[carry], curve->p, num_words)) {
 c0048ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 c0048be:	009b      	lsls	r3, r3, #2
 c0048c0:	33a8      	adds	r3, #168	; 0xa8
 c0048c2:	443b      	add	r3, r7
 c0048c4:	f853 0c54 	ldr.w	r0, [r3, #-84]
 c0048c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c0048cc:	3304      	adds	r3, #4
 c0048ce:	f997 20a3 	ldrsb.w	r2, [r7, #163]	; 0xa3
 c0048d2:	4619      	mov	r1, r3
 c0048d4:	f7ff fe62 	bl	c00459c <uECC_generate_random_int>
 c0048d8:	4603      	mov	r3, r0
 c0048da:	2b00      	cmp	r3, #0
 c0048dc:	d101      	bne.n	c0048e2 <uECC_sign_with_k_internal+0xbe>
            return 0;
 c0048de:	2300      	movs	r3, #0
 c0048e0:	e105      	b.n	c004aee <uECC_sign_with_k_internal+0x2ca>
        }
        initial_Z = k2[carry];
 c0048e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 c0048e6:	009b      	lsls	r3, r3, #2
 c0048e8:	33a8      	adds	r3, #168	; 0xa8
 c0048ea:	443b      	add	r3, r7
 c0048ec:	f853 3c54 	ldr.w	r3, [r3, #-84]
 c0048f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    }
    EccPoint_mult(p, curve->G, k2[!carry], initial_Z, num_n_bits + 1, curve);
 c0048f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c0048f8:	f103 0144 	add.w	r1, r3, #68	; 0x44
 c0048fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 c004900:	2b00      	cmp	r3, #0
 c004902:	bf0c      	ite	eq
 c004904:	2301      	moveq	r3, #1
 c004906:	2300      	movne	r3, #0
 c004908:	b2db      	uxtb	r3, r3
 c00490a:	009b      	lsls	r3, r3, #2
 c00490c:	33a8      	adds	r3, #168	; 0xa8
 c00490e:	443b      	add	r3, r7
 c004910:	f853 4c54 	ldr.w	r4, [r3, #-84]
 c004914:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 c004918:	3301      	adds	r3, #1
 c00491a:	b29b      	uxth	r3, r3
 c00491c:	b21b      	sxth	r3, r3
 c00491e:	f107 0014 	add.w	r0, r7, #20
 c004922:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 c004926:	9201      	str	r2, [sp, #4]
 c004928:	9300      	str	r3, [sp, #0]
 c00492a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 c00492e:	4622      	mov	r2, r4
 c004930:	f7ff fc91 	bl	c004256 <EccPoint_mult>
    if (uECC_vli_isZero(p, num_words)) {
 c004934:	f997 20a3 	ldrsb.w	r2, [r7, #163]	; 0xa3
 c004938:	f107 0314 	add.w	r3, r7, #20
 c00493c:	4611      	mov	r1, r2
 c00493e:	4618      	mov	r0, r3
 c004940:	f7fe fb16 	bl	c002f70 <uECC_vli_isZero>
 c004944:	4603      	mov	r3, r0
 c004946:	2b00      	cmp	r3, #0
 c004948:	d001      	beq.n	c00494e <uECC_sign_with_k_internal+0x12a>
        return 0;
 c00494a:	2300      	movs	r3, #0
 c00494c:	e0cf      	b.n	c004aee <uECC_sign_with_k_internal+0x2ca>
    }

    /* If an RNG function was specified, get a random number
       to prevent side channel analysis of k. */
    if (!g_rng_function) {
 c00494e:	4b6a      	ldr	r3, [pc, #424]	; (c004af8 <uECC_sign_with_k_internal+0x2d4>)
 c004950:	681b      	ldr	r3, [r3, #0]
 c004952:	2b00      	cmp	r3, #0
 c004954:	d10a      	bne.n	c00496c <uECC_sign_with_k_internal+0x148>
        uECC_vli_clear(tmp, num_n_words);
 c004956:	f997 20a2 	ldrsb.w	r2, [r7, #162]	; 0xa2
 c00495a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 c00495e:	4611      	mov	r1, r2
 c004960:	4618      	mov	r0, r3
 c004962:	f7fe fae4 	bl	c002f2e <uECC_vli_clear>
        tmp[0] = 1;
 c004966:	2301      	movs	r3, #1
 c004968:	67fb      	str	r3, [r7, #124]	; 0x7c
 c00496a:	e00f      	b.n	c00498c <uECC_sign_with_k_internal+0x168>
    } else if (!uECC_generate_random_int(tmp, curve->n, num_n_words)) {
 c00496c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004970:	f103 0124 	add.w	r1, r3, #36	; 0x24
 c004974:	f997 20a2 	ldrsb.w	r2, [r7, #162]	; 0xa2
 c004978:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 c00497c:	4618      	mov	r0, r3
 c00497e:	f7ff fe0d 	bl	c00459c <uECC_generate_random_int>
 c004982:	4603      	mov	r3, r0
 c004984:	2b00      	cmp	r3, #0
 c004986:	d101      	bne.n	c00498c <uECC_sign_with_k_internal+0x168>
        return 0;
 c004988:	2300      	movs	r3, #0
 c00498a:	e0b0      	b.n	c004aee <uECC_sign_with_k_internal+0x2ca>
    }

    /* Prevent side channel analysis of uECC_vli_modInv() to determine
       bits of k / the private key by premultiplying by a random number */
    uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
 c00498c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004990:	f103 0124 	add.w	r1, r3, #36	; 0x24
 c004994:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 c004998:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 c00499c:	9300      	str	r3, [sp, #0]
 c00499e:	460b      	mov	r3, r1
 c0049a0:	6839      	ldr	r1, [r7, #0]
 c0049a2:	6838      	ldr	r0, [r7, #0]
 c0049a4:	f7fe fdf8 	bl	c003598 <uECC_vli_modMult>
    uECC_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
 c0049a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c0049ac:	f103 0224 	add.w	r2, r3, #36	; 0x24
 c0049b0:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 c0049b4:	6839      	ldr	r1, [r7, #0]
 c0049b6:	6838      	ldr	r0, [r7, #0]
 c0049b8:	f7fe fe6d 	bl	c003696 <uECC_vli_modInv>
    uECC_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
 c0049bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c0049c0:	f103 0124 	add.w	r1, r3, #36	; 0x24
 c0049c4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 c0049c8:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 c0049cc:	9300      	str	r3, [sp, #0]
 c0049ce:	460b      	mov	r3, r1
 c0049d0:	6839      	ldr	r1, [r7, #0]
 c0049d2:	6838      	ldr	r0, [r7, #0]
 c0049d4:	f7fe fde0 	bl	c003598 <uECC_vli_modMult>

#if uECC_VLI_NATIVE_LITTLE_ENDIAN == 0
    uECC_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
 c0049d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c0049dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c0049e0:	4619      	mov	r1, r3
 c0049e2:	f107 0314 	add.w	r3, r7, #20
 c0049e6:	461a      	mov	r2, r3
 c0049e8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 c0049ec:	f7ff fe40 	bl	c004670 <uECC_vli_nativeToBytes>
#endif

#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
#else
    uECC_vli_bytesToNative(tmp, private_key, BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
 c0049f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c0049f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c0049f8:	3307      	adds	r3, #7
 c0049fa:	2b00      	cmp	r3, #0
 c0049fc:	da00      	bge.n	c004a00 <uECC_sign_with_k_internal+0x1dc>
 c0049fe:	3307      	adds	r3, #7
 c004a00:	10db      	asrs	r3, r3, #3
 c004a02:	461a      	mov	r2, r3
 c004a04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 c004a08:	68f9      	ldr	r1, [r7, #12]
 c004a0a:	4618      	mov	r0, r3
 c004a0c:	f7ff fe5d 	bl	c0046ca <uECC_vli_bytesToNative>
#endif

    s[num_n_words - 1] = 0;
 c004a10:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 c004a14:	3b01      	subs	r3, #1
 c004a16:	009b      	lsls	r3, r3, #2
 c004a18:	33a8      	adds	r3, #168	; 0xa8
 c004a1a:	443b      	add	r3, r7
 c004a1c:	2200      	movs	r2, #0
 c004a1e:	f843 2c4c 	str.w	r2, [r3, #-76]
    uECC_vli_set(s, p, num_words);
 c004a22:	f997 20a3 	ldrsb.w	r2, [r7, #163]	; 0xa3
 c004a26:	f107 0114 	add.w	r1, r7, #20
 c004a2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 c004a2e:	4618      	mov	r0, r3
 c004a30:	f7fe fb42 	bl	c0030b8 <uECC_vli_set>
    uECC_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
 c004a34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004a38:	f103 0424 	add.w	r4, r3, #36	; 0x24
 c004a3c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 c004a40:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 c004a44:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 c004a48:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 c004a4c:	9300      	str	r3, [sp, #0]
 c004a4e:	4623      	mov	r3, r4
 c004a50:	f7fe fda2 	bl	c003598 <uECC_vli_modMult>

    bits2int(tmp, message_hash, hash_size, curve);
 c004a54:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 c004a58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004a5c:	687a      	ldr	r2, [r7, #4]
 c004a5e:	68b9      	ldr	r1, [r7, #8]
 c004a60:	f7ff fe6f 	bl	c004742 <bits2int>
    uECC_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
 c004a64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004a68:	f103 0424 	add.w	r4, r3, #36	; 0x24
 c004a6c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 c004a70:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 c004a74:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 c004a78:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 c004a7c:	9300      	str	r3, [sp, #0]
 c004a7e:	4623      	mov	r3, r4
 c004a80:	f7fe fc0a 	bl	c003298 <uECC_vli_modAdd>
    uECC_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
 c004a84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004a88:	f103 0224 	add.w	r2, r3, #36	; 0x24
 c004a8c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 c004a90:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 c004a94:	f997 30a2 	ldrsb.w	r3, [r7, #162]	; 0xa2
 c004a98:	9300      	str	r3, [sp, #0]
 c004a9a:	4613      	mov	r3, r2
 c004a9c:	683a      	ldr	r2, [r7, #0]
 c004a9e:	f7fe fd7b 	bl	c003598 <uECC_vli_modMult>
    if (uECC_vli_numBits(s, num_n_words) > (bitcount_t)curve->num_bytes * 8) {
 c004aa2:	f997 20a2 	ldrsb.w	r2, [r7, #162]	; 0xa2
 c004aa6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 c004aaa:	4611      	mov	r1, r2
 c004aac:	4618      	mov	r0, r3
 c004aae:	f7fe fac9 	bl	c003044 <uECC_vli_numBits>
 c004ab2:	4603      	mov	r3, r0
 c004ab4:	461a      	mov	r2, r3
 c004ab6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004aba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c004abe:	00db      	lsls	r3, r3, #3
 c004ac0:	429a      	cmp	r2, r3
 c004ac2:	dd01      	ble.n	c004ac8 <uECC_sign_with_k_internal+0x2a4>
        return 0;
 c004ac4:	2300      	movs	r3, #0
 c004ac6:	e012      	b.n	c004aee <uECC_sign_with_k_internal+0x2ca>
    }
#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) signature + curve->num_bytes, (uint8_t *) s, curve->num_bytes);
#else
    uECC_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
 c004ac8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004acc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c004ad0:	461a      	mov	r2, r3
 c004ad2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c004ad6:	1898      	adds	r0, r3, r2
 c004ad8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c004adc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c004ae0:	4619      	mov	r1, r3
 c004ae2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 c004ae6:	461a      	mov	r2, r3
 c004ae8:	f7ff fdc2 	bl	c004670 <uECC_vli_nativeToBytes>
#endif
    return 1;
 c004aec:	2301      	movs	r3, #1
}
 c004aee:	4618      	mov	r0, r3
 c004af0:	37ac      	adds	r7, #172	; 0xac
 c004af2:	46bd      	mov	sp, r7
 c004af4:	bd90      	pop	{r4, r7, pc}
 c004af6:	bf00      	nop
 c004af8:	30000068 	.word	0x30000068

0c004afc <uECC_sign>:

int uECC_sign(const uint8_t *private_key,
              const uint8_t *message_hash,
              unsigned hash_size,
              uint8_t *signature,
              uECC_Curve curve) {
 c004afc:	b580      	push	{r7, lr}
 c004afe:	b090      	sub	sp, #64	; 0x40
 c004b00:	af02      	add	r7, sp, #8
 c004b02:	60f8      	str	r0, [r7, #12]
 c004b04:	60b9      	str	r1, [r7, #8]
 c004b06:	607a      	str	r2, [r7, #4]
 c004b08:	603b      	str	r3, [r7, #0]
    uECC_word_t k[uECC_MAX_WORDS];
    uECC_word_t tries;

    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 c004b0a:	2300      	movs	r3, #0
 c004b0c:	637b      	str	r3, [r7, #52]	; 0x34
 c004b0e:	e029      	b.n	c004b64 <uECC_sign+0x68>
        if (!uECC_generate_random_int(k, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
 c004b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004b12:	f103 0124 	add.w	r1, r3, #36	; 0x24
 c004b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004b18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c004b1c:	331f      	adds	r3, #31
 c004b1e:	2b00      	cmp	r3, #0
 c004b20:	da00      	bge.n	c004b24 <uECC_sign+0x28>
 c004b22:	331f      	adds	r3, #31
 c004b24:	115b      	asrs	r3, r3, #5
 c004b26:	b25a      	sxtb	r2, r3
 c004b28:	f107 0314 	add.w	r3, r7, #20
 c004b2c:	4618      	mov	r0, r3
 c004b2e:	f7ff fd35 	bl	c00459c <uECC_generate_random_int>
 c004b32:	4603      	mov	r3, r0
 c004b34:	2b00      	cmp	r3, #0
 c004b36:	d101      	bne.n	c004b3c <uECC_sign+0x40>
            return 0;
 c004b38:	2300      	movs	r3, #0
 c004b3a:	e017      	b.n	c004b6c <uECC_sign+0x70>
        }

        if (uECC_sign_with_k_internal(private_key, message_hash, hash_size, k, signature, curve)) {
 c004b3c:	f107 0214 	add.w	r2, r7, #20
 c004b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c004b42:	9301      	str	r3, [sp, #4]
 c004b44:	683b      	ldr	r3, [r7, #0]
 c004b46:	9300      	str	r3, [sp, #0]
 c004b48:	4613      	mov	r3, r2
 c004b4a:	687a      	ldr	r2, [r7, #4]
 c004b4c:	68b9      	ldr	r1, [r7, #8]
 c004b4e:	68f8      	ldr	r0, [r7, #12]
 c004b50:	f7ff fe68 	bl	c004824 <uECC_sign_with_k_internal>
 c004b54:	4603      	mov	r3, r0
 c004b56:	2b00      	cmp	r3, #0
 c004b58:	d001      	beq.n	c004b5e <uECC_sign+0x62>
            return 1;
 c004b5a:	2301      	movs	r3, #1
 c004b5c:	e006      	b.n	c004b6c <uECC_sign+0x70>
    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
 c004b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c004b60:	3301      	adds	r3, #1
 c004b62:	637b      	str	r3, [r7, #52]	; 0x34
 c004b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c004b66:	2b3f      	cmp	r3, #63	; 0x3f
 c004b68:	d9d2      	bls.n	c004b10 <uECC_sign+0x14>
        }
    }
    return 0;
 c004b6a:	2300      	movs	r3, #0
}
 c004b6c:	4618      	mov	r0, r3
 c004b6e:	3738      	adds	r7, #56	; 0x38
 c004b70:	46bd      	mov	sp, r7
 c004b72:	bd80      	pop	{r7, pc}

0c004b74 <smax>:
        update_V(hash_context, K, V);
    }
    return 0;
}

static bitcount_t smax(bitcount_t a, bitcount_t b) {
 c004b74:	b480      	push	{r7}
 c004b76:	b083      	sub	sp, #12
 c004b78:	af00      	add	r7, sp, #0
 c004b7a:	4603      	mov	r3, r0
 c004b7c:	460a      	mov	r2, r1
 c004b7e:	80fb      	strh	r3, [r7, #6]
 c004b80:	4613      	mov	r3, r2
 c004b82:	80bb      	strh	r3, [r7, #4]
    return (a > b ? a : b);
 c004b84:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 c004b88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 c004b8c:	4293      	cmp	r3, r2
 c004b8e:	bfb8      	it	lt
 c004b90:	4613      	movlt	r3, r2
 c004b92:	b21b      	sxth	r3, r3
}
 c004b94:	4618      	mov	r0, r3
 c004b96:	370c      	adds	r7, #12
 c004b98:	46bd      	mov	sp, r7
 c004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004b9e:	4770      	bx	lr

0c004ba0 <uECC_verify>:

int uECC_verify(const uint8_t *public_key,
                const uint8_t *message_hash,
                unsigned hash_size,
                const uint8_t *signature,
                uECC_Curve curve) {
 c004ba0:	b590      	push	{r4, r7, lr}
 c004ba2:	b0ff      	sub	sp, #508	; 0x1fc
 c004ba4:	af02      	add	r7, sp, #8
 c004ba6:	f507 74f8 	add.w	r4, r7, #496	; 0x1f0
 c004baa:	f5a4 74f2 	sub.w	r4, r4, #484	; 0x1e4
 c004bae:	6020      	str	r0, [r4, #0]
 c004bb0:	f507 70f8 	add.w	r0, r7, #496	; 0x1f0
 c004bb4:	f5a0 70f4 	sub.w	r0, r0, #488	; 0x1e8
 c004bb8:	6001      	str	r1, [r0, #0]
 c004bba:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 c004bbe:	f5a1 71f6 	sub.w	r1, r1, #492	; 0x1ec
 c004bc2:	600a      	str	r2, [r1, #0]
 c004bc4:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 c004bc8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 c004bcc:	6013      	str	r3, [r2, #0]
    uECC_word_t *_public = (uECC_word_t *)public_key;
#else
    uECC_word_t _public[uECC_MAX_WORDS * 2];
#endif
    uECC_word_t r[uECC_MAX_WORDS], s[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
 c004bce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004bd2:	781b      	ldrb	r3, [r3, #0]
 c004bd4:	f887 31ed 	strb.w	r3, [r7, #493]	; 0x1ed
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 c004bd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004bdc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 c004be0:	331f      	adds	r3, #31
 c004be2:	2b00      	cmp	r3, #0
 c004be4:	da00      	bge.n	c004be8 <uECC_verify+0x48>
 c004be6:	331f      	adds	r3, #31
 c004be8:	115b      	asrs	r3, r3, #5
 c004bea:	f887 31ec 	strb.w	r3, [r7, #492]	; 0x1ec

    rx[num_n_words - 1] = 0;
 c004bee:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004bf2:	3b01      	subs	r3, #1
 c004bf4:	009b      	lsls	r3, r3, #2
 c004bf6:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 c004bfa:	443b      	add	r3, r7
 c004bfc:	2200      	movs	r2, #0
 c004bfe:	f843 2cd0 	str.w	r2, [r3, #-208]
    r[num_n_words - 1] = 0;
 c004c02:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004c06:	1e5a      	subs	r2, r3, #1
 c004c08:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004c0c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 c004c10:	2100      	movs	r1, #0
 c004c12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    s[num_n_words - 1] = 0;
 c004c16:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004c1a:	1e5a      	subs	r2, r3, #1
 c004c1c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004c20:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 c004c24:	2100      	movs	r1, #0
 c004c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) r, signature, curve->num_bytes);
    bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
#else
    uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
 c004c2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004c2e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c004c32:	461a      	mov	r2, r3
 c004c34:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004c38:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 c004c3c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 c004c40:	6819      	ldr	r1, [r3, #0]
 c004c42:	f7ff fd42 	bl	c0046ca <uECC_vli_bytesToNative>
    uECC_vli_bytesToNative(
        _public + num_words, public_key + curve->num_bytes, curve->num_bytes);
 c004c46:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004c4a:	009b      	lsls	r3, r3, #2
    uECC_vli_bytesToNative(
 c004c4c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 c004c50:	18d0      	adds	r0, r2, r3
        _public + num_words, public_key + curve->num_bytes, curve->num_bytes);
 c004c52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004c56:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c004c5a:	461a      	mov	r2, r3
    uECC_vli_bytesToNative(
 c004c5c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004c60:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 c004c64:	681b      	ldr	r3, [r3, #0]
 c004c66:	1899      	adds	r1, r3, r2
        _public + num_words, public_key + curve->num_bytes, curve->num_bytes);
 c004c68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004c6c:	f993 3001 	ldrsb.w	r3, [r3, #1]
    uECC_vli_bytesToNative(
 c004c70:	461a      	mov	r2, r3
 c004c72:	f7ff fd2a 	bl	c0046ca <uECC_vli_bytesToNative>
    uECC_vli_bytesToNative(r, signature, curve->num_bytes);
 c004c76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004c7a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c004c7e:	461a      	mov	r2, r3
 c004c80:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004c84:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 c004c88:	f107 0030 	add.w	r0, r7, #48	; 0x30
 c004c8c:	6819      	ldr	r1, [r3, #0]
 c004c8e:	f7ff fd1c 	bl	c0046ca <uECC_vli_bytesToNative>
    uECC_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 c004c92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004c96:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c004c9a:	461a      	mov	r2, r3
 c004c9c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004ca0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 c004ca4:	681b      	ldr	r3, [r3, #0]
 c004ca6:	1899      	adds	r1, r3, r2
 c004ca8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004cac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 c004cb0:	461a      	mov	r2, r3
 c004cb2:	f107 0310 	add.w	r3, r7, #16
 c004cb6:	4618      	mov	r0, r3
 c004cb8:	f7ff fd07 	bl	c0046ca <uECC_vli_bytesToNative>
#endif

    /* r, s must not be 0. */
    if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
 c004cbc:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004cc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 c004cc4:	4611      	mov	r1, r2
 c004cc6:	4618      	mov	r0, r3
 c004cc8:	f7fe f952 	bl	c002f70 <uECC_vli_isZero>
 c004ccc:	4603      	mov	r3, r0
 c004cce:	2b00      	cmp	r3, #0
 c004cd0:	d10a      	bne.n	c004ce8 <uECC_verify+0x148>
 c004cd2:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004cd6:	f107 0310 	add.w	r3, r7, #16
 c004cda:	4611      	mov	r1, r2
 c004cdc:	4618      	mov	r0, r3
 c004cde:	f7fe f947 	bl	c002f70 <uECC_vli_isZero>
 c004ce2:	4603      	mov	r3, r0
 c004ce4:	2b00      	cmp	r3, #0
 c004ce6:	d001      	beq.n	c004cec <uECC_verify+0x14c>
        return 0;
 c004ce8:	2300      	movs	r3, #0
 c004cea:	e220      	b.n	c00512e <uECC_verify+0x58e>
    }

    /* r, s must be < n. */
    if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 c004cec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004cf0:	3324      	adds	r3, #36	; 0x24
 c004cf2:	f997 21ec 	ldrsb.w	r2, [r7, #492]	; 0x1ec
 c004cf6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c004cfa:	4618      	mov	r0, r3
 c004cfc:	f7fe fa03 	bl	c003106 <uECC_vli_cmp_unsafe>
 c004d00:	4603      	mov	r3, r0
 c004d02:	2b01      	cmp	r3, #1
 c004d04:	d10c      	bne.n	c004d20 <uECC_verify+0x180>
            uECC_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 c004d06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004d0a:	3324      	adds	r3, #36	; 0x24
 c004d0c:	f997 21ec 	ldrsb.w	r2, [r7, #492]	; 0x1ec
 c004d10:	f107 0110 	add.w	r1, r7, #16
 c004d14:	4618      	mov	r0, r3
 c004d16:	f7fe f9f6 	bl	c003106 <uECC_vli_cmp_unsafe>
 c004d1a:	4603      	mov	r3, r0
    if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 c004d1c:	2b01      	cmp	r3, #1
 c004d1e:	d001      	beq.n	c004d24 <uECC_verify+0x184>
        return 0;
 c004d20:	2300      	movs	r3, #0
 c004d22:	e204      	b.n	c00512e <uECC_verify+0x58e>
    }

    /* Calculate u1 and u2. */
    uECC_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 c004d24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004d28:	f103 0224 	add.w	r2, r3, #36	; 0x24
 c004d2c:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004d30:	f107 0110 	add.w	r1, r7, #16
 c004d34:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 c004d38:	f7fe fcad 	bl	c003696 <uECC_vli_modInv>
    u1[num_n_words - 1] = 0;
 c004d3c:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004d40:	3b01      	subs	r3, #1
 c004d42:	009b      	lsls	r3, r3, #2
 c004d44:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 c004d48:	443b      	add	r3, r7
 c004d4a:	2200      	movs	r2, #0
 c004d4c:	f843 2c30 	str.w	r2, [r3, #-48]
    bits2int(u1, message_hash, hash_size, curve);
 c004d50:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004d54:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 c004d58:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004d5c:	f5a3 71f4 	sub.w	r1, r3, #488	; 0x1e8
 c004d60:	f507 70e0 	add.w	r0, r7, #448	; 0x1c0
 c004d64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004d68:	6812      	ldr	r2, [r2, #0]
 c004d6a:	6809      	ldr	r1, [r1, #0]
 c004d6c:	f7ff fce9 	bl	c004742 <bits2int>
    uECC_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 c004d70:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004d74:	f103 0424 	add.w	r4, r3, #36	; 0x24
 c004d78:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c004d7c:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 c004d80:	f507 70e0 	add.w	r0, r7, #448	; 0x1c0
 c004d84:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004d88:	9300      	str	r3, [sp, #0]
 c004d8a:	4623      	mov	r3, r4
 c004d8c:	f7fe fc04 	bl	c003598 <uECC_vli_modMult>
    uECC_vli_modMult(u2, r, z, curve->n, num_n_words); /* u2 = r/s */
 c004d90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004d94:	f103 0424 	add.w	r4, r3, #36	; 0x24
 c004d98:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c004d9c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c004da0:	f507 70d0 	add.w	r0, r7, #416	; 0x1a0
 c004da4:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c004da8:	9300      	str	r3, [sp, #0]
 c004daa:	4623      	mov	r3, r4
 c004dac:	f7fe fbf4 	bl	c003598 <uECC_vli_modMult>

    /* Calculate sum = G + Q. */
    uECC_vli_set(sum, _public, num_words);
 c004db0:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004db4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 c004db8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 c004dbc:	4618      	mov	r0, r3
 c004dbe:	f7fe f97b 	bl	c0030b8 <uECC_vli_set>
    uECC_vli_set(sum + num_words, _public + num_words, num_words);
 c004dc2:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004dc6:	009b      	lsls	r3, r3, #2
 c004dc8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 c004dcc:	18d0      	adds	r0, r2, r3
 c004dce:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004dd2:	009b      	lsls	r3, r3, #2
 c004dd4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 c004dd8:	4413      	add	r3, r2
 c004dda:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004dde:	4619      	mov	r1, r3
 c004de0:	f7fe f96a 	bl	c0030b8 <uECC_vli_set>
    uECC_vli_set(tx, curve->G, num_words);
 c004de4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004de8:	f103 0144 	add.w	r1, r3, #68	; 0x44
 c004dec:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004df0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 c004df4:	4618      	mov	r0, r3
 c004df6:	f7fe f95f 	bl	c0030b8 <uECC_vli_set>
    uECC_vli_set(ty, curve->G + num_words, num_words);
 c004dfa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004dfe:	f103 0244 	add.w	r2, r3, #68	; 0x44
 c004e02:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004e06:	009b      	lsls	r3, r3, #2
 c004e08:	18d1      	adds	r1, r2, r3
 c004e0a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004e0e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 c004e12:	4618      	mov	r0, r3
 c004e14:	f7fe f950 	bl	c0030b8 <uECC_vli_set>
    uECC_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 c004e18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004e1c:	1d1c      	adds	r4, r3, #4
 c004e1e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 c004e22:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 c004e26:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 c004e2a:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004e2e:	9300      	str	r3, [sp, #0]
 c004e30:	4623      	mov	r3, r4
 c004e32:	f7fe fa58 	bl	c0032e6 <uECC_vli_modSub>
    XYcZ_add(tx, ty, sum, sum + num_words, curve);
 c004e36:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004e3a:	009b      	lsls	r3, r3, #2
 c004e3c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 c004e40:	18d4      	adds	r4, r2, r3
 c004e42:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 c004e46:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 c004e4a:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 c004e4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004e52:	9300      	str	r3, [sp, #0]
 c004e54:	4623      	mov	r3, r4
 c004e56:	f7ff f881 	bl	c003f5c <XYcZ_add>
    uECC_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 c004e5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004e5e:	1d1a      	adds	r2, r3, #4
 c004e60:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004e64:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 c004e68:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 c004e6c:	f7fe fc13 	bl	c003696 <uECC_vli_modInv>
    apply_z(sum, sum + num_words, z, curve);
 c004e70:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004e74:	009b      	lsls	r3, r3, #2
 c004e76:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 c004e7a:	18d1      	adds	r1, r2, r3
 c004e7c:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c004e80:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 c004e84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004e88:	f7fe fff6 	bl	c003e78 <apply_z>

    /* Use Shamir's trick to calculate u1*G + u2*Q */
    points[0] = 0;
 c004e8c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004e90:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c004e94:	2200      	movs	r2, #0
 c004e96:	601a      	str	r2, [r3, #0]
    points[1] = curve->G;
 c004e98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004e9c:	f103 0244 	add.w	r2, r3, #68	; 0x44
 c004ea0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004ea4:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c004ea8:	605a      	str	r2, [r3, #4]
    points[2] = _public;
 c004eaa:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004eae:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c004eb2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 c004eb6:	609a      	str	r2, [r3, #8]
    points[3] = sum;
 c004eb8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004ebc:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c004ec0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 c004ec4:	60da      	str	r2, [r3, #12]
    num_bits = smax(uECC_vli_numBits(u1, num_n_words),
 c004ec6:	f997 21ec 	ldrsb.w	r2, [r7, #492]	; 0x1ec
 c004eca:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 c004ece:	4611      	mov	r1, r2
 c004ed0:	4618      	mov	r0, r3
 c004ed2:	f7fe f8b7 	bl	c003044 <uECC_vli_numBits>
 c004ed6:	4603      	mov	r3, r0
 c004ed8:	461c      	mov	r4, r3
 c004eda:	f997 21ec 	ldrsb.w	r2, [r7, #492]	; 0x1ec
 c004ede:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 c004ee2:	4611      	mov	r1, r2
 c004ee4:	4618      	mov	r0, r3
 c004ee6:	f7fe f8ad 	bl	c003044 <uECC_vli_numBits>
 c004eea:	4603      	mov	r3, r0
 c004eec:	4619      	mov	r1, r3
 c004eee:	4620      	mov	r0, r4
 c004ef0:	f7ff fe40 	bl	c004b74 <smax>
 c004ef4:	4603      	mov	r3, r0
 c004ef6:	f8a7 31ea 	strh.w	r3, [r7, #490]	; 0x1ea
                    uECC_vli_numBits(u2, num_n_words));

    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 c004efa:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
 c004efe:	3b01      	subs	r3, #1
 c004f00:	b29b      	uxth	r3, r3
 c004f02:	b21a      	sxth	r2, r3
 c004f04:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 c004f08:	4611      	mov	r1, r2
 c004f0a:	4618      	mov	r0, r3
 c004f0c:	f7fe f85a 	bl	c002fc4 <uECC_vli_testBit>
 c004f10:	4603      	mov	r3, r0
 c004f12:	2b00      	cmp	r3, #0
 c004f14:	bf14      	ite	ne
 c004f16:	2301      	movne	r3, #1
 c004f18:	2300      	moveq	r3, #0
 c004f1a:	b2db      	uxtb	r3, r3
 c004f1c:	461c      	mov	r4, r3
                   ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
 c004f1e:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
 c004f22:	3b01      	subs	r3, #1
 c004f24:	b29b      	uxth	r3, r3
 c004f26:	b21a      	sxth	r2, r3
 c004f28:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 c004f2c:	4611      	mov	r1, r2
 c004f2e:	4618      	mov	r0, r3
 c004f30:	f7fe f848 	bl	c002fc4 <uECC_vli_testBit>
 c004f34:	4603      	mov	r3, r0
 c004f36:	2b00      	cmp	r3, #0
 c004f38:	d001      	beq.n	c004f3e <uECC_verify+0x39e>
 c004f3a:	2302      	movs	r3, #2
 c004f3c:	e000      	b.n	c004f40 <uECC_verify+0x3a0>
 c004f3e:	2300      	movs	r3, #0
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
 c004f40:	ea43 0204 	orr.w	r2, r3, r4
 c004f44:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c004f48:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c004f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c004f50:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    uECC_vli_set(rx, point, num_words);
 c004f54:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004f58:	f507 7390 	add.w	r3, r7, #288	; 0x120
 c004f5c:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 c004f60:	4618      	mov	r0, r3
 c004f62:	f7fe f8a9 	bl	c0030b8 <uECC_vli_set>
    uECC_vli_set(ry, point + num_words, num_words);
 c004f66:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c004f6a:	009b      	lsls	r3, r3, #2
 c004f6c:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 c004f70:	18d1      	adds	r1, r2, r3
 c004f72:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004f76:	f507 7380 	add.w	r3, r7, #256	; 0x100
 c004f7a:	4618      	mov	r0, r3
 c004f7c:	f7fe f89c 	bl	c0030b8 <uECC_vli_set>
    uECC_vli_clear(z, num_words);
 c004f80:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c004f84:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 c004f88:	4611      	mov	r1, r2
 c004f8a:	4618      	mov	r0, r3
 c004f8c:	f7fd ffcf 	bl	c002f2e <uECC_vli_clear>
    z[0] = 1;
 c004f90:	2301      	movs	r3, #1
 c004f92:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

    for (i = num_bits - 2; i >= 0; --i) {
 c004f96:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
 c004f9a:	3b02      	subs	r3, #2
 c004f9c:	b29b      	uxth	r3, r3
 c004f9e:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
 c004fa2:	e087      	b.n	c0050b4 <uECC_verify+0x514>
        uECC_word_t index;
        curve->double_jacobian(rx, ry, z, curve);
 c004fa4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004fa8:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
 c004fac:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c004fb0:	f507 7180 	add.w	r1, r7, #256	; 0x100
 c004fb4:	f507 7090 	add.w	r0, r7, #288	; 0x120
 c004fb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c004fbc:	47a0      	blx	r4

        index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
 c004fbe:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	; 0x1ee
 c004fc2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 c004fc6:	4611      	mov	r1, r2
 c004fc8:	4618      	mov	r0, r3
 c004fca:	f7fd fffb 	bl	c002fc4 <uECC_vli_testBit>
 c004fce:	4603      	mov	r3, r0
 c004fd0:	2b00      	cmp	r3, #0
 c004fd2:	bf14      	ite	ne
 c004fd4:	2301      	movne	r3, #1
 c004fd6:	2300      	moveq	r3, #0
 c004fd8:	b2db      	uxtb	r3, r3
 c004fda:	461c      	mov	r4, r3
 c004fdc:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	; 0x1ee
 c004fe0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 c004fe4:	4611      	mov	r1, r2
 c004fe6:	4618      	mov	r0, r3
 c004fe8:	f7fd ffec 	bl	c002fc4 <uECC_vli_testBit>
 c004fec:	4603      	mov	r3, r0
 c004fee:	2b00      	cmp	r3, #0
 c004ff0:	d001      	beq.n	c004ff6 <uECC_verify+0x456>
 c004ff2:	2302      	movs	r3, #2
 c004ff4:	e000      	b.n	c004ff8 <uECC_verify+0x458>
 c004ff6:	2300      	movs	r3, #0
 c004ff8:	4323      	orrs	r3, r4
 c004ffa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        point = points[index];
 c004ffe:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 c005002:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 c005006:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 c00500a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c00500e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
        if (point) {
 c005012:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 c005016:	2b00      	cmp	r3, #0
 c005018:	d046      	beq.n	c0050a8 <uECC_verify+0x508>
            uECC_vli_set(tx, point, num_words);
 c00501a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c00501e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 c005022:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 c005026:	4618      	mov	r0, r3
 c005028:	f7fe f846 	bl	c0030b8 <uECC_vli_set>
            uECC_vli_set(ty, point + num_words, num_words);
 c00502c:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c005030:	009b      	lsls	r3, r3, #2
 c005032:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 c005036:	18d1      	adds	r1, r2, r3
 c005038:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c00503c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 c005040:	4618      	mov	r0, r3
 c005042:	f7fe f839 	bl	c0030b8 <uECC_vli_set>
            apply_z(tx, ty, z, curve);
 c005046:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c00504a:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 c00504e:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 c005052:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c005056:	f7fe ff0f 	bl	c003e78 <apply_z>
            uECC_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 c00505a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00505e:	1d1c      	adds	r4, r3, #4
 c005060:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 c005064:	f507 7190 	add.w	r1, r7, #288	; 0x120
 c005068:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 c00506c:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c005070:	9300      	str	r3, [sp, #0]
 c005072:	4623      	mov	r3, r4
 c005074:	f7fe f937 	bl	c0032e6 <uECC_vli_modSub>
            XYcZ_add(tx, ty, rx, ry, curve);
 c005078:	f507 7480 	add.w	r4, r7, #256	; 0x100
 c00507c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 c005080:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 c005084:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 c005088:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c00508c:	9300      	str	r3, [sp, #0]
 c00508e:	4623      	mov	r3, r4
 c005090:	f7fe ff64 	bl	c003f5c <XYcZ_add>
            uECC_vli_modMult_fast(z, z, tz, curve);
 c005094:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 c005098:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 c00509c:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 c0050a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0050a4:	f7fe fa93 	bl	c0035ce <uECC_vli_modMult_fast>
    for (i = num_bits - 2; i >= 0; --i) {
 c0050a8:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 c0050ac:	3b01      	subs	r3, #1
 c0050ae:	b29b      	uxth	r3, r3
 c0050b0:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
 c0050b4:	f9b7 31ee 	ldrsh.w	r3, [r7, #494]	; 0x1ee
 c0050b8:	2b00      	cmp	r3, #0
 c0050ba:	f6bf af73 	bge.w	c004fa4 <uECC_verify+0x404>
        }
    }

    uECC_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 c0050be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0050c2:	1d1a      	adds	r2, r3, #4
 c0050c4:	f997 31ed 	ldrsb.w	r3, [r7, #493]	; 0x1ed
 c0050c8:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 c0050cc:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 c0050d0:	f7fe fae1 	bl	c003696 <uECC_vli_modInv>
    apply_z(rx, ry, z, curve);
 c0050d4:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 c0050d8:	f507 7180 	add.w	r1, r7, #256	; 0x100
 c0050dc:	f507 7090 	add.w	r0, r7, #288	; 0x120
 c0050e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0050e4:	f7fe fec8 	bl	c003e78 <apply_z>

    /* v = x1 (mod n) */
    if (uECC_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 c0050e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c0050ec:	3324      	adds	r3, #36	; 0x24
 c0050ee:	f997 21ec 	ldrsb.w	r2, [r7, #492]	; 0x1ec
 c0050f2:	f507 7190 	add.w	r1, r7, #288	; 0x120
 c0050f6:	4618      	mov	r0, r3
 c0050f8:	f7fe f805 	bl	c003106 <uECC_vli_cmp_unsafe>
 c0050fc:	4603      	mov	r3, r0
 c0050fe:	2b01      	cmp	r3, #1
 c005100:	d00b      	beq.n	c00511a <uECC_verify+0x57a>
        uECC_vli_sub(rx, rx, curve->n, num_n_words);
 c005102:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 c005106:	f103 0224 	add.w	r2, r3, #36	; 0x24
 c00510a:	f997 31ec 	ldrsb.w	r3, [r7, #492]	; 0x1ec
 c00510e:	f507 7190 	add.w	r1, r7, #288	; 0x120
 c005112:	f507 7090 	add.w	r0, r7, #288	; 0x120
 c005116:	f7fd fe6b 	bl	c002df0 <uECC_vli_sub>
    }

    /* Accept only if v == r. */
    return (int)(uECC_vli_equal(rx, r, num_words));
 c00511a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	; 0x1ed
 c00511e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 c005122:	f507 7390 	add.w	r3, r7, #288	; 0x120
 c005126:	4618      	mov	r0, r3
 c005128:	f7fe f829 	bl	c00317e <uECC_vli_equal>
 c00512c:	4603      	mov	r3, r0
}
 c00512e:	4618      	mov	r0, r3
 c005130:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 c005134:	46bd      	mov	sp, r7
 c005136:	bd90      	pop	{r4, r7, pc}

0c005138 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 c005138:	b580      	push	{r7, lr}
 c00513a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 c00513c:	4b22      	ldr	r3, [pc, #136]	; (c0051c8 <MX_LPUART1_UART_Init+0x90>)
 c00513e:	4a23      	ldr	r2, [pc, #140]	; (c0051cc <MX_LPUART1_UART_Init+0x94>)
 c005140:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 921600;
 c005142:	4b21      	ldr	r3, [pc, #132]	; (c0051c8 <MX_LPUART1_UART_Init+0x90>)
 c005144:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 c005148:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 c00514a:	4b1f      	ldr	r3, [pc, #124]	; (c0051c8 <MX_LPUART1_UART_Init+0x90>)
 c00514c:	2200      	movs	r2, #0
 c00514e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 c005150:	4b1d      	ldr	r3, [pc, #116]	; (c0051c8 <MX_LPUART1_UART_Init+0x90>)
 c005152:	2200      	movs	r2, #0
 c005154:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 c005156:	4b1c      	ldr	r3, [pc, #112]	; (c0051c8 <MX_LPUART1_UART_Init+0x90>)
 c005158:	2200      	movs	r2, #0
 c00515a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 c00515c:	4b1a      	ldr	r3, [pc, #104]	; (c0051c8 <MX_LPUART1_UART_Init+0x90>)
 c00515e:	220c      	movs	r2, #12
 c005160:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 c005162:	4b19      	ldr	r3, [pc, #100]	; (c0051c8 <MX_LPUART1_UART_Init+0x90>)
 c005164:	2200      	movs	r2, #0
 c005166:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c005168:	4b17      	ldr	r3, [pc, #92]	; (c0051c8 <MX_LPUART1_UART_Init+0x90>)
 c00516a:	2200      	movs	r2, #0
 c00516c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c00516e:	4b16      	ldr	r3, [pc, #88]	; (c0051c8 <MX_LPUART1_UART_Init+0x90>)
 c005170:	2200      	movs	r2, #0
 c005172:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c005174:	4b14      	ldr	r3, [pc, #80]	; (c0051c8 <MX_LPUART1_UART_Init+0x90>)
 c005176:	2200      	movs	r2, #0
 c005178:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 c00517a:	4b13      	ldr	r3, [pc, #76]	; (c0051c8 <MX_LPUART1_UART_Init+0x90>)
 c00517c:	2200      	movs	r2, #0
 c00517e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 c005180:	4811      	ldr	r0, [pc, #68]	; (c0051c8 <MX_LPUART1_UART_Init+0x90>)
 c005182:	f003 fbb3 	bl	c0088ec <HAL_UART_Init>
 c005186:	4603      	mov	r3, r0
 c005188:	2b00      	cmp	r3, #0
 c00518a:	d001      	beq.n	c005190 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 c00518c:	f7fc ff74 	bl	c002078 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c005190:	2100      	movs	r1, #0
 c005192:	480d      	ldr	r0, [pc, #52]	; (c0051c8 <MX_LPUART1_UART_Init+0x90>)
 c005194:	f004 fa08 	bl	c0095a8 <HAL_UARTEx_SetTxFifoThreshold>
 c005198:	4603      	mov	r3, r0
 c00519a:	2b00      	cmp	r3, #0
 c00519c:	d001      	beq.n	c0051a2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 c00519e:	f7fc ff6b 	bl	c002078 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c0051a2:	2100      	movs	r1, #0
 c0051a4:	4808      	ldr	r0, [pc, #32]	; (c0051c8 <MX_LPUART1_UART_Init+0x90>)
 c0051a6:	f004 fa3d 	bl	c009624 <HAL_UARTEx_SetRxFifoThreshold>
 c0051aa:	4603      	mov	r3, r0
 c0051ac:	2b00      	cmp	r3, #0
 c0051ae:	d001      	beq.n	c0051b4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 c0051b0:	f7fc ff62 	bl	c002078 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 c0051b4:	4804      	ldr	r0, [pc, #16]	; (c0051c8 <MX_LPUART1_UART_Init+0x90>)
 c0051b6:	f004 f9be 	bl	c009536 <HAL_UARTEx_DisableFifoMode>
 c0051ba:	4603      	mov	r3, r0
 c0051bc:	2b00      	cmp	r3, #0
 c0051be:	d001      	beq.n	c0051c4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 c0051c0:	f7fc ff5a 	bl	c002078 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 c0051c4:	bf00      	nop
 c0051c6:	bd80      	pop	{r7, pc}
 c0051c8:	300023d8 	.word	0x300023d8
 c0051cc:	50008000 	.word	0x50008000

0c0051d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 c0051d0:	b580      	push	{r7, lr}
 c0051d2:	b0ae      	sub	sp, #184	; 0xb8
 c0051d4:	af00      	add	r7, sp, #0
 c0051d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c0051d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c0051dc:	2200      	movs	r2, #0
 c0051de:	601a      	str	r2, [r3, #0]
 c0051e0:	605a      	str	r2, [r3, #4]
 c0051e2:	609a      	str	r2, [r3, #8]
 c0051e4:	60da      	str	r2, [r3, #12]
 c0051e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c0051e8:	f107 0310 	add.w	r3, r7, #16
 c0051ec:	2294      	movs	r2, #148	; 0x94
 c0051ee:	2100      	movs	r1, #0
 c0051f0:	4618      	mov	r0, r3
 c0051f2:	f004 fada 	bl	c0097aa <memset>
  if(uartHandle->Instance==LPUART1)
 c0051f6:	687b      	ldr	r3, [r7, #4]
 c0051f8:	681b      	ldr	r3, [r3, #0]
 c0051fa:	4a22      	ldr	r2, [pc, #136]	; (c005284 <HAL_UART_MspInit+0xb4>)
 c0051fc:	4293      	cmp	r3, r2
 c0051fe:	d13d      	bne.n	c00527c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 c005200:	2320      	movs	r3, #32
 c005202:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 c005204:	2300      	movs	r3, #0
 c005206:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c005208:	f107 0310 	add.w	r3, r7, #16
 c00520c:	4618      	mov	r0, r3
 c00520e:	f002 f90b 	bl	c007428 <HAL_RCCEx_PeriphCLKConfig>
 c005212:	4603      	mov	r3, r0
 c005214:	2b00      	cmp	r3, #0
 c005216:	d001      	beq.n	c00521c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 c005218:	f7fc ff2e 	bl	c002078 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 c00521c:	4b1a      	ldr	r3, [pc, #104]	; (c005288 <HAL_UART_MspInit+0xb8>)
 c00521e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c005220:	4a19      	ldr	r2, [pc, #100]	; (c005288 <HAL_UART_MspInit+0xb8>)
 c005222:	f043 0301 	orr.w	r3, r3, #1
 c005226:	65d3      	str	r3, [r2, #92]	; 0x5c
 c005228:	4b17      	ldr	r3, [pc, #92]	; (c005288 <HAL_UART_MspInit+0xb8>)
 c00522a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c00522c:	f003 0301 	and.w	r3, r3, #1
 c005230:	60fb      	str	r3, [r7, #12]
 c005232:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 c005234:	4b14      	ldr	r3, [pc, #80]	; (c005288 <HAL_UART_MspInit+0xb8>)
 c005236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c005238:	4a13      	ldr	r2, [pc, #76]	; (c005288 <HAL_UART_MspInit+0xb8>)
 c00523a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c00523e:	64d3      	str	r3, [r2, #76]	; 0x4c
 c005240:	4b11      	ldr	r3, [pc, #68]	; (c005288 <HAL_UART_MspInit+0xb8>)
 c005242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c005244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c005248:	60bb      	str	r3, [r7, #8]
 c00524a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 c00524c:	f001 f8ea 	bl	c006424 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 c005250:	f44f 73c0 	mov.w	r3, #384	; 0x180
 c005254:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c005258:	2302      	movs	r3, #2
 c00525a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c00525e:	2300      	movs	r3, #0
 c005260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c005264:	2300      	movs	r3, #0
 c005266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 c00526a:	2308      	movs	r3, #8
 c00526c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 c005270:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c005274:	4619      	mov	r1, r3
 c005276:	4805      	ldr	r0, [pc, #20]	; (c00528c <HAL_UART_MspInit+0xbc>)
 c005278:	f000 fc70 	bl	c005b5c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 c00527c:	bf00      	nop
 c00527e:	37b8      	adds	r7, #184	; 0xb8
 c005280:	46bd      	mov	sp, r7
 c005282:	bd80      	pop	{r7, pc}
 c005284:	50008000 	.word	0x50008000
 c005288:	50021000 	.word	0x50021000
 c00528c:	52021800 	.word	0x52021800

0c005290 <SecureUartTx>:
}

/* USER CODE BEGIN 1 */

void SecureUartTx(uint8_t* data, uint16_t len)
{
 c005290:	b580      	push	{r7, lr}
 c005292:	b082      	sub	sp, #8
 c005294:	af00      	add	r7, sp, #0
 c005296:	6078      	str	r0, [r7, #4]
 c005298:	460b      	mov	r3, r1
 c00529a:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&hlpuart1, data, len, HAL_MAX_DELAY);
 c00529c:	887a      	ldrh	r2, [r7, #2]
 c00529e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0052a2:	6879      	ldr	r1, [r7, #4]
 c0052a4:	4803      	ldr	r0, [pc, #12]	; (c0052b4 <SecureUartTx+0x24>)
 c0052a6:	f003 fb71 	bl	c00898c <HAL_UART_Transmit>
}
 c0052aa:	bf00      	nop
 c0052ac:	3708      	adds	r7, #8
 c0052ae:	46bd      	mov	sp, r7
 c0052b0:	bd80      	pop	{r7, pc}
 c0052b2:	bf00      	nop
 c0052b4:	300023d8 	.word	0x300023d8

0c0052b8 <SecureUartRx>:

void SecureUartRx(uint8_t* data, uint16_t len)
{
 c0052b8:	b580      	push	{r7, lr}
 c0052ba:	b082      	sub	sp, #8
 c0052bc:	af00      	add	r7, sp, #0
 c0052be:	6078      	str	r0, [r7, #4]
 c0052c0:	460b      	mov	r3, r1
 c0052c2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&hlpuart1, data, len, HAL_MAX_DELAY);
 c0052c4:	887a      	ldrh	r2, [r7, #2]
 c0052c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c0052ca:	6879      	ldr	r1, [r7, #4]
 c0052cc:	4803      	ldr	r0, [pc, #12]	; (c0052dc <SecureUartRx+0x24>)
 c0052ce:	f003 fbf3 	bl	c008ab8 <HAL_UART_Receive>

}
 c0052d2:	bf00      	nop
 c0052d4:	3708      	adds	r7, #8
 c0052d6:	46bd      	mov	sp, r7
 c0052d8:	bd80      	pop	{r7, pc}
 c0052da:	bf00      	nop
 c0052dc:	300023d8 	.word	0x300023d8

0c0052e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c0052e0:	f8df d034 	ldr.w	sp, [pc, #52]	; c005318 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c0052e4:	f7fd fb3c 	bl	c002960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c0052e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c0052ea:	e003      	b.n	c0052f4 <LoopCopyDataInit>

0c0052ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c0052ec:	4b0b      	ldr	r3, [pc, #44]	; (c00531c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c0052ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c0052f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c0052f2:	3104      	adds	r1, #4

0c0052f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c0052f4:	480a      	ldr	r0, [pc, #40]	; (c005320 <LoopForever+0xa>)
	ldr	r3, =_edata
 c0052f6:	4b0b      	ldr	r3, [pc, #44]	; (c005324 <LoopForever+0xe>)
	adds	r2, r0, r1
 c0052f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c0052fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c0052fc:	d3f6      	bcc.n	c0052ec <CopyDataInit>
	ldr	r2, =_sbss
 c0052fe:	4a0a      	ldr	r2, [pc, #40]	; (c005328 <LoopForever+0x12>)
	b	LoopFillZerobss
 c005300:	e002      	b.n	c005308 <LoopFillZerobss>

0c005302 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c005302:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c005304:	f842 3b04 	str.w	r3, [r2], #4

0c005308 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c005308:	4b08      	ldr	r3, [pc, #32]	; (c00532c <LoopForever+0x16>)
	cmp	r2, r3
 c00530a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c00530c:	d3f9      	bcc.n	c005302 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c00530e:	f004 fa1b 	bl	c009748 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c005312:	f7fc fdef 	bl	c001ef4 <main>

0c005316 <LoopForever>:

LoopForever:
    b LoopForever
 c005316:	e7fe      	b.n	c005316 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c005318:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c00531c:	0c00ab1c 	.word	0x0c00ab1c
	ldr	r0, =_sdata
 c005320:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c005324:	300000f4 	.word	0x300000f4
	ldr	r2, =_sbss
 c005328:	300000f4 	.word	0x300000f4
	ldr	r3, = _ebss
 c00532c:	3000247c 	.word	0x3000247c

0c005330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c005330:	e7fe      	b.n	c005330 <ADC1_2_IRQHandler>

0c005332 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c005332:	b580      	push	{r7, lr}
 c005334:	b082      	sub	sp, #8
 c005336:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c005338:	2300      	movs	r3, #0
 c00533a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c00533c:	2004      	movs	r0, #4
 c00533e:	f000 f95f 	bl	c005600 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c005342:	f7fd fb27 	bl	c002994 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c005346:	2007      	movs	r0, #7
 c005348:	f000 f80e 	bl	c005368 <HAL_InitTick>
 c00534c:	4603      	mov	r3, r0
 c00534e:	2b00      	cmp	r3, #0
 c005350:	d002      	beq.n	c005358 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c005352:	2301      	movs	r3, #1
 c005354:	71fb      	strb	r3, [r7, #7]
 c005356:	e001      	b.n	c00535c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c005358:	f7fd f90c 	bl	c002574 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c00535c:	79fb      	ldrb	r3, [r7, #7]
}
 c00535e:	4618      	mov	r0, r3
 c005360:	3708      	adds	r7, #8
 c005362:	46bd      	mov	sp, r7
 c005364:	bd80      	pop	{r7, pc}
	...

0c005368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c005368:	b580      	push	{r7, lr}
 c00536a:	b084      	sub	sp, #16
 c00536c:	af00      	add	r7, sp, #0
 c00536e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c005370:	2300      	movs	r3, #0
 c005372:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c005374:	4b17      	ldr	r3, [pc, #92]	; (c0053d4 <HAL_InitTick+0x6c>)
 c005376:	781b      	ldrb	r3, [r3, #0]
 c005378:	2b00      	cmp	r3, #0
 c00537a:	d023      	beq.n	c0053c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c00537c:	4b16      	ldr	r3, [pc, #88]	; (c0053d8 <HAL_InitTick+0x70>)
 c00537e:	681a      	ldr	r2, [r3, #0]
 c005380:	4b14      	ldr	r3, [pc, #80]	; (c0053d4 <HAL_InitTick+0x6c>)
 c005382:	781b      	ldrb	r3, [r3, #0]
 c005384:	4619      	mov	r1, r3
 c005386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c00538a:	fbb3 f3f1 	udiv	r3, r3, r1
 c00538e:	fbb2 f3f3 	udiv	r3, r2, r3
 c005392:	4618      	mov	r0, r3
 c005394:	f000 f967 	bl	c005666 <HAL_SYSTICK_Config>
 c005398:	4603      	mov	r3, r0
 c00539a:	2b00      	cmp	r3, #0
 c00539c:	d10f      	bne.n	c0053be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c00539e:	687b      	ldr	r3, [r7, #4]
 c0053a0:	2b07      	cmp	r3, #7
 c0053a2:	d809      	bhi.n	c0053b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c0053a4:	2200      	movs	r2, #0
 c0053a6:	6879      	ldr	r1, [r7, #4]
 c0053a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c0053ac:	f000 f933 	bl	c005616 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c0053b0:	4a0a      	ldr	r2, [pc, #40]	; (c0053dc <HAL_InitTick+0x74>)
 c0053b2:	687b      	ldr	r3, [r7, #4]
 c0053b4:	6013      	str	r3, [r2, #0]
 c0053b6:	e007      	b.n	c0053c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c0053b8:	2301      	movs	r3, #1
 c0053ba:	73fb      	strb	r3, [r7, #15]
 c0053bc:	e004      	b.n	c0053c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c0053be:	2301      	movs	r3, #1
 c0053c0:	73fb      	strb	r3, [r7, #15]
 c0053c2:	e001      	b.n	c0053c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c0053c4:	2301      	movs	r3, #1
 c0053c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c0053c8:	7bfb      	ldrb	r3, [r7, #15]
}
 c0053ca:	4618      	mov	r0, r3
 c0053cc:	3710      	adds	r7, #16
 c0053ce:	46bd      	mov	sp, r7
 c0053d0:	bd80      	pop	{r7, pc}
 c0053d2:	bf00      	nop
 c0053d4:	30000070 	.word	0x30000070
 c0053d8:	30000064 	.word	0x30000064
 c0053dc:	3000006c 	.word	0x3000006c

0c0053e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c0053e0:	b480      	push	{r7}
 c0053e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c0053e4:	4b06      	ldr	r3, [pc, #24]	; (c005400 <HAL_IncTick+0x20>)
 c0053e6:	781b      	ldrb	r3, [r3, #0]
 c0053e8:	461a      	mov	r2, r3
 c0053ea:	4b06      	ldr	r3, [pc, #24]	; (c005404 <HAL_IncTick+0x24>)
 c0053ec:	681b      	ldr	r3, [r3, #0]
 c0053ee:	4413      	add	r3, r2
 c0053f0:	4a04      	ldr	r2, [pc, #16]	; (c005404 <HAL_IncTick+0x24>)
 c0053f2:	6013      	str	r3, [r2, #0]
}
 c0053f4:	bf00      	nop
 c0053f6:	46bd      	mov	sp, r7
 c0053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0053fc:	4770      	bx	lr
 c0053fe:	bf00      	nop
 c005400:	30000070 	.word	0x30000070
 c005404:	30002468 	.word	0x30002468

0c005408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c005408:	b480      	push	{r7}
 c00540a:	af00      	add	r7, sp, #0
  return uwTick;
 c00540c:	4b03      	ldr	r3, [pc, #12]	; (c00541c <HAL_GetTick+0x14>)
 c00540e:	681b      	ldr	r3, [r3, #0]
}
 c005410:	4618      	mov	r0, r3
 c005412:	46bd      	mov	sp, r7
 c005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005418:	4770      	bx	lr
 c00541a:	bf00      	nop
 c00541c:	30002468 	.word	0x30002468

0c005420 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 c005420:	b480      	push	{r7}
 c005422:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 c005424:	4b05      	ldr	r3, [pc, #20]	; (c00543c <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 c005426:	685b      	ldr	r3, [r3, #4]
 c005428:	4a04      	ldr	r2, [pc, #16]	; (c00543c <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 c00542a:	f043 0302 	orr.w	r3, r3, #2
 c00542e:	6053      	str	r3, [r2, #4]
}
 c005430:	bf00      	nop
 c005432:	46bd      	mov	sp, r7
 c005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005438:	4770      	bx	lr
 c00543a:	bf00      	nop
 c00543c:	e0044000 	.word	0xe0044000

0c005440 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 c005440:	b480      	push	{r7}
 c005442:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 c005444:	4b05      	ldr	r3, [pc, #20]	; (c00545c <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 c005446:	685b      	ldr	r3, [r3, #4]
 c005448:	4a04      	ldr	r2, [pc, #16]	; (c00545c <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 c00544a:	f043 0304 	orr.w	r3, r3, #4
 c00544e:	6053      	str	r3, [r2, #4]
}
 c005450:	bf00      	nop
 c005452:	46bd      	mov	sp, r7
 c005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005458:	4770      	bx	lr
 c00545a:	bf00      	nop
 c00545c:	e0044000 	.word	0xe0044000

0c005460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c005460:	b480      	push	{r7}
 c005462:	b085      	sub	sp, #20
 c005464:	af00      	add	r7, sp, #0
 c005466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c005468:	687b      	ldr	r3, [r7, #4]
 c00546a:	f003 0307 	and.w	r3, r3, #7
 c00546e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c005470:	4b0c      	ldr	r3, [pc, #48]	; (c0054a4 <__NVIC_SetPriorityGrouping+0x44>)
 c005472:	68db      	ldr	r3, [r3, #12]
 c005474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c005476:	68ba      	ldr	r2, [r7, #8]
 c005478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c00547c:	4013      	ands	r3, r2
 c00547e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c005480:	68fb      	ldr	r3, [r7, #12]
 c005482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c005484:	68bb      	ldr	r3, [r7, #8]
 c005486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c005488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c00548c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c005490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c005492:	4a04      	ldr	r2, [pc, #16]	; (c0054a4 <__NVIC_SetPriorityGrouping+0x44>)
 c005494:	68bb      	ldr	r3, [r7, #8]
 c005496:	60d3      	str	r3, [r2, #12]
}
 c005498:	bf00      	nop
 c00549a:	3714      	adds	r7, #20
 c00549c:	46bd      	mov	sp, r7
 c00549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0054a2:	4770      	bx	lr
 c0054a4:	e000ed00 	.word	0xe000ed00

0c0054a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c0054a8:	b480      	push	{r7}
 c0054aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c0054ac:	4b04      	ldr	r3, [pc, #16]	; (c0054c0 <__NVIC_GetPriorityGrouping+0x18>)
 c0054ae:	68db      	ldr	r3, [r3, #12]
 c0054b0:	0a1b      	lsrs	r3, r3, #8
 c0054b2:	f003 0307 	and.w	r3, r3, #7
}
 c0054b6:	4618      	mov	r0, r3
 c0054b8:	46bd      	mov	sp, r7
 c0054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0054be:	4770      	bx	lr
 c0054c0:	e000ed00 	.word	0xe000ed00

0c0054c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c0054c4:	b480      	push	{r7}
 c0054c6:	b083      	sub	sp, #12
 c0054c8:	af00      	add	r7, sp, #0
 c0054ca:	4603      	mov	r3, r0
 c0054cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c0054ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0054d2:	2b00      	cmp	r3, #0
 c0054d4:	db0b      	blt.n	c0054ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c0054d6:	79fb      	ldrb	r3, [r7, #7]
 c0054d8:	f003 021f 	and.w	r2, r3, #31
 c0054dc:	4907      	ldr	r1, [pc, #28]	; (c0054fc <__NVIC_EnableIRQ+0x38>)
 c0054de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0054e2:	095b      	lsrs	r3, r3, #5
 c0054e4:	2001      	movs	r0, #1
 c0054e6:	fa00 f202 	lsl.w	r2, r0, r2
 c0054ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c0054ee:	bf00      	nop
 c0054f0:	370c      	adds	r7, #12
 c0054f2:	46bd      	mov	sp, r7
 c0054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0054f8:	4770      	bx	lr
 c0054fa:	bf00      	nop
 c0054fc:	e000e100 	.word	0xe000e100

0c005500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c005500:	b480      	push	{r7}
 c005502:	b083      	sub	sp, #12
 c005504:	af00      	add	r7, sp, #0
 c005506:	4603      	mov	r3, r0
 c005508:	6039      	str	r1, [r7, #0]
 c00550a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c00550c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c005510:	2b00      	cmp	r3, #0
 c005512:	db0a      	blt.n	c00552a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c005514:	683b      	ldr	r3, [r7, #0]
 c005516:	b2da      	uxtb	r2, r3
 c005518:	490c      	ldr	r1, [pc, #48]	; (c00554c <__NVIC_SetPriority+0x4c>)
 c00551a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00551e:	0152      	lsls	r2, r2, #5
 c005520:	b2d2      	uxtb	r2, r2
 c005522:	440b      	add	r3, r1
 c005524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c005528:	e00a      	b.n	c005540 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c00552a:	683b      	ldr	r3, [r7, #0]
 c00552c:	b2da      	uxtb	r2, r3
 c00552e:	4908      	ldr	r1, [pc, #32]	; (c005550 <__NVIC_SetPriority+0x50>)
 c005530:	79fb      	ldrb	r3, [r7, #7]
 c005532:	f003 030f 	and.w	r3, r3, #15
 c005536:	3b04      	subs	r3, #4
 c005538:	0152      	lsls	r2, r2, #5
 c00553a:	b2d2      	uxtb	r2, r2
 c00553c:	440b      	add	r3, r1
 c00553e:	761a      	strb	r2, [r3, #24]
}
 c005540:	bf00      	nop
 c005542:	370c      	adds	r7, #12
 c005544:	46bd      	mov	sp, r7
 c005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00554a:	4770      	bx	lr
 c00554c:	e000e100 	.word	0xe000e100
 c005550:	e000ed00 	.word	0xe000ed00

0c005554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c005554:	b480      	push	{r7}
 c005556:	b089      	sub	sp, #36	; 0x24
 c005558:	af00      	add	r7, sp, #0
 c00555a:	60f8      	str	r0, [r7, #12]
 c00555c:	60b9      	str	r1, [r7, #8]
 c00555e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c005560:	68fb      	ldr	r3, [r7, #12]
 c005562:	f003 0307 	and.w	r3, r3, #7
 c005566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c005568:	69fb      	ldr	r3, [r7, #28]
 c00556a:	f1c3 0307 	rsb	r3, r3, #7
 c00556e:	2b03      	cmp	r3, #3
 c005570:	bf28      	it	cs
 c005572:	2303      	movcs	r3, #3
 c005574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c005576:	69fb      	ldr	r3, [r7, #28]
 c005578:	3303      	adds	r3, #3
 c00557a:	2b06      	cmp	r3, #6
 c00557c:	d902      	bls.n	c005584 <NVIC_EncodePriority+0x30>
 c00557e:	69fb      	ldr	r3, [r7, #28]
 c005580:	3b04      	subs	r3, #4
 c005582:	e000      	b.n	c005586 <NVIC_EncodePriority+0x32>
 c005584:	2300      	movs	r3, #0
 c005586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c005588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c00558c:	69bb      	ldr	r3, [r7, #24]
 c00558e:	fa02 f303 	lsl.w	r3, r2, r3
 c005592:	43da      	mvns	r2, r3
 c005594:	68bb      	ldr	r3, [r7, #8]
 c005596:	401a      	ands	r2, r3
 c005598:	697b      	ldr	r3, [r7, #20]
 c00559a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c00559c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 c0055a0:	697b      	ldr	r3, [r7, #20]
 c0055a2:	fa01 f303 	lsl.w	r3, r1, r3
 c0055a6:	43d9      	mvns	r1, r3
 c0055a8:	687b      	ldr	r3, [r7, #4]
 c0055aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c0055ac:	4313      	orrs	r3, r2
         );
}
 c0055ae:	4618      	mov	r0, r3
 c0055b0:	3724      	adds	r7, #36	; 0x24
 c0055b2:	46bd      	mov	sp, r7
 c0055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0055b8:	4770      	bx	lr
	...

0c0055bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c0055bc:	b580      	push	{r7, lr}
 c0055be:	b082      	sub	sp, #8
 c0055c0:	af00      	add	r7, sp, #0
 c0055c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c0055c4:	687b      	ldr	r3, [r7, #4]
 c0055c6:	3b01      	subs	r3, #1
 c0055c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c0055cc:	d301      	bcc.n	c0055d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c0055ce:	2301      	movs	r3, #1
 c0055d0:	e00f      	b.n	c0055f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c0055d2:	4a0a      	ldr	r2, [pc, #40]	; (c0055fc <SysTick_Config+0x40>)
 c0055d4:	687b      	ldr	r3, [r7, #4]
 c0055d6:	3b01      	subs	r3, #1
 c0055d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c0055da:	2107      	movs	r1, #7
 c0055dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c0055e0:	f7ff ff8e 	bl	c005500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c0055e4:	4b05      	ldr	r3, [pc, #20]	; (c0055fc <SysTick_Config+0x40>)
 c0055e6:	2200      	movs	r2, #0
 c0055e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c0055ea:	4b04      	ldr	r3, [pc, #16]	; (c0055fc <SysTick_Config+0x40>)
 c0055ec:	2207      	movs	r2, #7
 c0055ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c0055f0:	2300      	movs	r3, #0
}
 c0055f2:	4618      	mov	r0, r3
 c0055f4:	3708      	adds	r7, #8
 c0055f6:	46bd      	mov	sp, r7
 c0055f8:	bd80      	pop	{r7, pc}
 c0055fa:	bf00      	nop
 c0055fc:	e000e010 	.word	0xe000e010

0c005600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c005600:	b580      	push	{r7, lr}
 c005602:	b082      	sub	sp, #8
 c005604:	af00      	add	r7, sp, #0
 c005606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c005608:	6878      	ldr	r0, [r7, #4]
 c00560a:	f7ff ff29 	bl	c005460 <__NVIC_SetPriorityGrouping>
}
 c00560e:	bf00      	nop
 c005610:	3708      	adds	r7, #8
 c005612:	46bd      	mov	sp, r7
 c005614:	bd80      	pop	{r7, pc}

0c005616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c005616:	b580      	push	{r7, lr}
 c005618:	b086      	sub	sp, #24
 c00561a:	af00      	add	r7, sp, #0
 c00561c:	4603      	mov	r3, r0
 c00561e:	60b9      	str	r1, [r7, #8]
 c005620:	607a      	str	r2, [r7, #4]
 c005622:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c005624:	f7ff ff40 	bl	c0054a8 <__NVIC_GetPriorityGrouping>
 c005628:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c00562a:	687a      	ldr	r2, [r7, #4]
 c00562c:	68b9      	ldr	r1, [r7, #8]
 c00562e:	6978      	ldr	r0, [r7, #20]
 c005630:	f7ff ff90 	bl	c005554 <NVIC_EncodePriority>
 c005634:	4602      	mov	r2, r0
 c005636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c00563a:	4611      	mov	r1, r2
 c00563c:	4618      	mov	r0, r3
 c00563e:	f7ff ff5f 	bl	c005500 <__NVIC_SetPriority>
}
 c005642:	bf00      	nop
 c005644:	3718      	adds	r7, #24
 c005646:	46bd      	mov	sp, r7
 c005648:	bd80      	pop	{r7, pc}

0c00564a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c00564a:	b580      	push	{r7, lr}
 c00564c:	b082      	sub	sp, #8
 c00564e:	af00      	add	r7, sp, #0
 c005650:	4603      	mov	r3, r0
 c005652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c005654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c005658:	4618      	mov	r0, r3
 c00565a:	f7ff ff33 	bl	c0054c4 <__NVIC_EnableIRQ>
}
 c00565e:	bf00      	nop
 c005660:	3708      	adds	r7, #8
 c005662:	46bd      	mov	sp, r7
 c005664:	bd80      	pop	{r7, pc}

0c005666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c005666:	b580      	push	{r7, lr}
 c005668:	b082      	sub	sp, #8
 c00566a:	af00      	add	r7, sp, #0
 c00566c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c00566e:	6878      	ldr	r0, [r7, #4]
 c005670:	f7ff ffa4 	bl	c0055bc <SysTick_Config>
 c005674:	4603      	mov	r3, r0
}
 c005676:	4618      	mov	r0, r3
 c005678:	3708      	adds	r7, #8
 c00567a:	46bd      	mov	sp, r7
 c00567c:	bd80      	pop	{r7, pc}
	...

0c005680 <HAL_FLASH_Program>:
 c005680:	b580      	push	{r7, lr}
 c005682:	b086      	sub	sp, #24
 c005684:	af00      	add	r7, sp, #0
 c005686:	60f8      	str	r0, [r7, #12]
 c005688:	60b9      	str	r1, [r7, #8]
 c00568a:	e9c7 2300 	strd	r2, r3, [r7]
 c00568e:	4b1e      	ldr	r3, [pc, #120]	; (c005708 <HAL_FLASH_Program+0x88>)
 c005690:	781b      	ldrb	r3, [r3, #0]
 c005692:	2b01      	cmp	r3, #1
 c005694:	d101      	bne.n	c00569a <HAL_FLASH_Program+0x1a>
 c005696:	2302      	movs	r3, #2
 c005698:	e032      	b.n	c005700 <HAL_FLASH_Program+0x80>
 c00569a:	4b1b      	ldr	r3, [pc, #108]	; (c005708 <HAL_FLASH_Program+0x88>)
 c00569c:	2201      	movs	r2, #1
 c00569e:	701a      	strb	r2, [r3, #0]
 c0056a0:	4b19      	ldr	r3, [pc, #100]	; (c005708 <HAL_FLASH_Program+0x88>)
 c0056a2:	2200      	movs	r2, #0
 c0056a4:	605a      	str	r2, [r3, #4]
 c0056a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 c0056aa:	f000 f893 	bl	c0057d4 <FLASH_WaitForLastOperation>
 c0056ae:	4603      	mov	r3, r0
 c0056b0:	75fb      	strb	r3, [r7, #23]
 c0056b2:	7dfb      	ldrb	r3, [r7, #23]
 c0056b4:	2b00      	cmp	r3, #0
 c0056b6:	d11f      	bne.n	c0056f8 <HAL_FLASH_Program+0x78>
 c0056b8:	4a13      	ldr	r2, [pc, #76]	; (c005708 <HAL_FLASH_Program+0x88>)
 c0056ba:	68fb      	ldr	r3, [r7, #12]
 c0056bc:	6093      	str	r3, [r2, #8]
 c0056be:	4b12      	ldr	r3, [pc, #72]	; (c005708 <HAL_FLASH_Program+0x88>)
 c0056c0:	689b      	ldr	r3, [r3, #8]
 c0056c2:	2b00      	cmp	r3, #0
 c0056c4:	db01      	blt.n	c0056ca <HAL_FLASH_Program+0x4a>
 c0056c6:	4b11      	ldr	r3, [pc, #68]	; (c00570c <HAL_FLASH_Program+0x8c>)
 c0056c8:	e000      	b.n	c0056cc <HAL_FLASH_Program+0x4c>
 c0056ca:	4b11      	ldr	r3, [pc, #68]	; (c005710 <HAL_FLASH_Program+0x90>)
 c0056cc:	613b      	str	r3, [r7, #16]
 c0056ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 c0056d2:	68b8      	ldr	r0, [r7, #8]
 c0056d4:	f000 f8de 	bl	c005894 <FLASH_Program_DoubleWord>
 c0056d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 c0056dc:	f000 f87a 	bl	c0057d4 <FLASH_WaitForLastOperation>
 c0056e0:	4603      	mov	r3, r0
 c0056e2:	75fb      	strb	r3, [r7, #23]
 c0056e4:	693b      	ldr	r3, [r7, #16]
 c0056e6:	681a      	ldr	r2, [r3, #0]
 c0056e8:	4b07      	ldr	r3, [pc, #28]	; (c005708 <HAL_FLASH_Program+0x88>)
 c0056ea:	689b      	ldr	r3, [r3, #8]
 c0056ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 c0056f0:	43db      	mvns	r3, r3
 c0056f2:	401a      	ands	r2, r3
 c0056f4:	693b      	ldr	r3, [r7, #16]
 c0056f6:	601a      	str	r2, [r3, #0]
 c0056f8:	4b03      	ldr	r3, [pc, #12]	; (c005708 <HAL_FLASH_Program+0x88>)
 c0056fa:	2200      	movs	r2, #0
 c0056fc:	701a      	strb	r2, [r3, #0]
 c0056fe:	7dfb      	ldrb	r3, [r7, #23]
 c005700:	4618      	mov	r0, r3
 c005702:	3718      	adds	r7, #24
 c005704:	46bd      	mov	sp, r7
 c005706:	bd80      	pop	{r7, pc}
 c005708:	30000074 	.word	0x30000074
 c00570c:	5002202c 	.word	0x5002202c
 c005710:	40022028 	.word	0x40022028

0c005714 <HAL_FLASH_Unlock>:
 c005714:	b480      	push	{r7}
 c005716:	b083      	sub	sp, #12
 c005718:	af00      	add	r7, sp, #0
 c00571a:	2300      	movs	r3, #0
 c00571c:	71fb      	strb	r3, [r7, #7]
 c00571e:	4b15      	ldr	r3, [pc, #84]	; (c005774 <HAL_FLASH_Unlock+0x60>)
 c005720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005722:	2b00      	cmp	r3, #0
 c005724:	da0b      	bge.n	c00573e <HAL_FLASH_Unlock+0x2a>
 c005726:	4b13      	ldr	r3, [pc, #76]	; (c005774 <HAL_FLASH_Unlock+0x60>)
 c005728:	4a13      	ldr	r2, [pc, #76]	; (c005778 <HAL_FLASH_Unlock+0x64>)
 c00572a:	609a      	str	r2, [r3, #8]
 c00572c:	4b11      	ldr	r3, [pc, #68]	; (c005774 <HAL_FLASH_Unlock+0x60>)
 c00572e:	4a13      	ldr	r2, [pc, #76]	; (c00577c <HAL_FLASH_Unlock+0x68>)
 c005730:	609a      	str	r2, [r3, #8]
 c005732:	4b10      	ldr	r3, [pc, #64]	; (c005774 <HAL_FLASH_Unlock+0x60>)
 c005734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005736:	2b00      	cmp	r3, #0
 c005738:	da01      	bge.n	c00573e <HAL_FLASH_Unlock+0x2a>
 c00573a:	2301      	movs	r3, #1
 c00573c:	71fb      	strb	r3, [r7, #7]
 c00573e:	79fb      	ldrb	r3, [r7, #7]
 c005740:	2b00      	cmp	r3, #0
 c005742:	d10f      	bne.n	c005764 <HAL_FLASH_Unlock+0x50>
 c005744:	4b0b      	ldr	r3, [pc, #44]	; (c005774 <HAL_FLASH_Unlock+0x60>)
 c005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c005748:	2b00      	cmp	r3, #0
 c00574a:	da0b      	bge.n	c005764 <HAL_FLASH_Unlock+0x50>
 c00574c:	4b09      	ldr	r3, [pc, #36]	; (c005774 <HAL_FLASH_Unlock+0x60>)
 c00574e:	4a0a      	ldr	r2, [pc, #40]	; (c005778 <HAL_FLASH_Unlock+0x64>)
 c005750:	60da      	str	r2, [r3, #12]
 c005752:	4b08      	ldr	r3, [pc, #32]	; (c005774 <HAL_FLASH_Unlock+0x60>)
 c005754:	4a09      	ldr	r2, [pc, #36]	; (c00577c <HAL_FLASH_Unlock+0x68>)
 c005756:	60da      	str	r2, [r3, #12]
 c005758:	4b06      	ldr	r3, [pc, #24]	; (c005774 <HAL_FLASH_Unlock+0x60>)
 c00575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c00575c:	2b00      	cmp	r3, #0
 c00575e:	da01      	bge.n	c005764 <HAL_FLASH_Unlock+0x50>
 c005760:	2301      	movs	r3, #1
 c005762:	71fb      	strb	r3, [r7, #7]
 c005764:	79fb      	ldrb	r3, [r7, #7]
 c005766:	4618      	mov	r0, r3
 c005768:	370c      	adds	r7, #12
 c00576a:	46bd      	mov	sp, r7
 c00576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005770:	4770      	bx	lr
 c005772:	bf00      	nop
 c005774:	50022000 	.word	0x50022000
 c005778:	45670123 	.word	0x45670123
 c00577c:	cdef89ab 	.word	0xcdef89ab

0c005780 <HAL_FLASH_Lock>:
 c005780:	b480      	push	{r7}
 c005782:	b083      	sub	sp, #12
 c005784:	af00      	add	r7, sp, #0
 c005786:	2301      	movs	r3, #1
 c005788:	71fb      	strb	r3, [r7, #7]
 c00578a:	4b11      	ldr	r3, [pc, #68]	; (c0057d0 <HAL_FLASH_Lock+0x50>)
 c00578c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00578e:	4a10      	ldr	r2, [pc, #64]	; (c0057d0 <HAL_FLASH_Lock+0x50>)
 c005790:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 c005794:	6293      	str	r3, [r2, #40]	; 0x28
 c005796:	4b0e      	ldr	r3, [pc, #56]	; (c0057d0 <HAL_FLASH_Lock+0x50>)
 c005798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00579a:	2b00      	cmp	r3, #0
 c00579c:	da01      	bge.n	c0057a2 <HAL_FLASH_Lock+0x22>
 c00579e:	2300      	movs	r3, #0
 c0057a0:	71fb      	strb	r3, [r7, #7]
 c0057a2:	79fb      	ldrb	r3, [r7, #7]
 c0057a4:	2b00      	cmp	r3, #0
 c0057a6:	d10b      	bne.n	c0057c0 <HAL_FLASH_Lock+0x40>
 c0057a8:	4b09      	ldr	r3, [pc, #36]	; (c0057d0 <HAL_FLASH_Lock+0x50>)
 c0057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0057ac:	4a08      	ldr	r2, [pc, #32]	; (c0057d0 <HAL_FLASH_Lock+0x50>)
 c0057ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 c0057b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 c0057b4:	4b06      	ldr	r3, [pc, #24]	; (c0057d0 <HAL_FLASH_Lock+0x50>)
 c0057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0057b8:	2b00      	cmp	r3, #0
 c0057ba:	da01      	bge.n	c0057c0 <HAL_FLASH_Lock+0x40>
 c0057bc:	2300      	movs	r3, #0
 c0057be:	71fb      	strb	r3, [r7, #7]
 c0057c0:	79fb      	ldrb	r3, [r7, #7]
 c0057c2:	4618      	mov	r0, r3
 c0057c4:	370c      	adds	r7, #12
 c0057c6:	46bd      	mov	sp, r7
 c0057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0057cc:	4770      	bx	lr
 c0057ce:	bf00      	nop
 c0057d0:	50022000 	.word	0x50022000

0c0057d4 <FLASH_WaitForLastOperation>:
 c0057d4:	b580      	push	{r7, lr}
 c0057d6:	b086      	sub	sp, #24
 c0057d8:	af00      	add	r7, sp, #0
 c0057da:	6078      	str	r0, [r7, #4]
 c0057dc:	f7ff fe14 	bl	c005408 <HAL_GetTick>
 c0057e0:	4602      	mov	r2, r0
 c0057e2:	687b      	ldr	r3, [r7, #4]
 c0057e4:	4413      	add	r3, r2
 c0057e6:	617b      	str	r3, [r7, #20]
 c0057e8:	e00b      	b.n	c005802 <FLASH_WaitForLastOperation+0x2e>
 c0057ea:	687b      	ldr	r3, [r7, #4]
 c0057ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 c0057f0:	d007      	beq.n	c005802 <FLASH_WaitForLastOperation+0x2e>
 c0057f2:	f7ff fe09 	bl	c005408 <HAL_GetTick>
 c0057f6:	4602      	mov	r2, r0
 c0057f8:	697b      	ldr	r3, [r7, #20]
 c0057fa:	4293      	cmp	r3, r2
 c0057fc:	d801      	bhi.n	c005802 <FLASH_WaitForLastOperation+0x2e>
 c0057fe:	2303      	movs	r3, #3
 c005800:	e03b      	b.n	c00587a <FLASH_WaitForLastOperation+0xa6>
 c005802:	4b20      	ldr	r3, [pc, #128]	; (c005884 <FLASH_WaitForLastOperation+0xb0>)
 c005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c00580a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c00580e:	d0ec      	beq.n	c0057ea <FLASH_WaitForLastOperation+0x16>
 c005810:	4b1d      	ldr	r3, [pc, #116]	; (c005888 <FLASH_WaitForLastOperation+0xb4>)
 c005812:	689b      	ldr	r3, [r3, #8]
 c005814:	2b00      	cmp	r3, #0
 c005816:	db01      	blt.n	c00581c <FLASH_WaitForLastOperation+0x48>
 c005818:	4b1c      	ldr	r3, [pc, #112]	; (c00588c <FLASH_WaitForLastOperation+0xb8>)
 c00581a:	e000      	b.n	c00581e <FLASH_WaitForLastOperation+0x4a>
 c00581c:	4b1c      	ldr	r3, [pc, #112]	; (c005890 <FLASH_WaitForLastOperation+0xbc>)
 c00581e:	613b      	str	r3, [r7, #16]
 c005820:	693b      	ldr	r3, [r7, #16]
 c005822:	681b      	ldr	r3, [r3, #0]
 c005824:	f003 03fa 	and.w	r3, r3, #250	; 0xfa
 c005828:	60fb      	str	r3, [r7, #12]
 c00582a:	4b16      	ldr	r3, [pc, #88]	; (c005884 <FLASH_WaitForLastOperation+0xb0>)
 c00582c:	6a1b      	ldr	r3, [r3, #32]
 c00582e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c005832:	68fa      	ldr	r2, [r7, #12]
 c005834:	4313      	orrs	r3, r2
 c005836:	60fb      	str	r3, [r7, #12]
 c005838:	68fb      	ldr	r3, [r7, #12]
 c00583a:	2b00      	cmp	r3, #0
 c00583c:	d013      	beq.n	c005866 <FLASH_WaitForLastOperation+0x92>
 c00583e:	4b12      	ldr	r3, [pc, #72]	; (c005888 <FLASH_WaitForLastOperation+0xb4>)
 c005840:	685a      	ldr	r2, [r3, #4]
 c005842:	68fb      	ldr	r3, [r7, #12]
 c005844:	4313      	orrs	r3, r2
 c005846:	4a10      	ldr	r2, [pc, #64]	; (c005888 <FLASH_WaitForLastOperation+0xb4>)
 c005848:	6053      	str	r3, [r2, #4]
 c00584a:	693b      	ldr	r3, [r7, #16]
 c00584c:	68fa      	ldr	r2, [r7, #12]
 c00584e:	601a      	str	r2, [r3, #0]
 c005850:	68fb      	ldr	r3, [r7, #12]
 c005852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c005856:	2b00      	cmp	r3, #0
 c005858:	d003      	beq.n	c005862 <FLASH_WaitForLastOperation+0x8e>
 c00585a:	4b0a      	ldr	r3, [pc, #40]	; (c005884 <FLASH_WaitForLastOperation+0xb0>)
 c00585c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 c005860:	621a      	str	r2, [r3, #32]
 c005862:	2301      	movs	r3, #1
 c005864:	e009      	b.n	c00587a <FLASH_WaitForLastOperation+0xa6>
 c005866:	693b      	ldr	r3, [r7, #16]
 c005868:	681b      	ldr	r3, [r3, #0]
 c00586a:	f003 0301 	and.w	r3, r3, #1
 c00586e:	2b00      	cmp	r3, #0
 c005870:	d002      	beq.n	c005878 <FLASH_WaitForLastOperation+0xa4>
 c005872:	693b      	ldr	r3, [r7, #16]
 c005874:	2201      	movs	r2, #1
 c005876:	601a      	str	r2, [r3, #0]
 c005878:	2300      	movs	r3, #0
 c00587a:	4618      	mov	r0, r3
 c00587c:	3718      	adds	r7, #24
 c00587e:	46bd      	mov	sp, r7
 c005880:	bd80      	pop	{r7, pc}
 c005882:	bf00      	nop
 c005884:	50022000 	.word	0x50022000
 c005888:	30000074 	.word	0x30000074
 c00588c:	50022024 	.word	0x50022024
 c005890:	40022020 	.word	0x40022020

0c005894 <FLASH_Program_DoubleWord>:
 c005894:	b480      	push	{r7}
 c005896:	b089      	sub	sp, #36	; 0x24
 c005898:	af00      	add	r7, sp, #0
 c00589a:	60f8      	str	r0, [r7, #12]
 c00589c:	e9c7 2300 	strd	r2, r3, [r7]
 c0058a0:	4b19      	ldr	r3, [pc, #100]	; (c005908 <FLASH_Program_DoubleWord+0x74>)
 c0058a2:	689b      	ldr	r3, [r3, #8]
 c0058a4:	2b00      	cmp	r3, #0
 c0058a6:	db01      	blt.n	c0058ac <FLASH_Program_DoubleWord+0x18>
 c0058a8:	4b18      	ldr	r3, [pc, #96]	; (c00590c <FLASH_Program_DoubleWord+0x78>)
 c0058aa:	e000      	b.n	c0058ae <FLASH_Program_DoubleWord+0x1a>
 c0058ac:	4b18      	ldr	r3, [pc, #96]	; (c005910 <FLASH_Program_DoubleWord+0x7c>)
 c0058ae:	61fb      	str	r3, [r7, #28]
 c0058b0:	f3ef 8310 	mrs	r3, PRIMASK
 c0058b4:	613b      	str	r3, [r7, #16]
 c0058b6:	693b      	ldr	r3, [r7, #16]
 c0058b8:	61bb      	str	r3, [r7, #24]
 c0058ba:	b672      	cpsid	i
 c0058bc:	bf00      	nop
 c0058be:	69fb      	ldr	r3, [r7, #28]
 c0058c0:	681b      	ldr	r3, [r3, #0]
 c0058c2:	f043 0201 	orr.w	r2, r3, #1
 c0058c6:	69fb      	ldr	r3, [r7, #28]
 c0058c8:	601a      	str	r2, [r3, #0]
 c0058ca:	68fb      	ldr	r3, [r7, #12]
 c0058cc:	683a      	ldr	r2, [r7, #0]
 c0058ce:	601a      	str	r2, [r3, #0]
 c0058d0:	f3bf 8f6f 	isb	sy
 c0058d4:	bf00      	nop
 c0058d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 c0058da:	f04f 0200 	mov.w	r2, #0
 c0058de:	f04f 0300 	mov.w	r3, #0
 c0058e2:	000a      	movs	r2, r1
 c0058e4:	2300      	movs	r3, #0
 c0058e6:	68f9      	ldr	r1, [r7, #12]
 c0058e8:	3104      	adds	r1, #4
 c0058ea:	4613      	mov	r3, r2
 c0058ec:	600b      	str	r3, [r1, #0]
 c0058ee:	69bb      	ldr	r3, [r7, #24]
 c0058f0:	617b      	str	r3, [r7, #20]
 c0058f2:	697b      	ldr	r3, [r7, #20]
 c0058f4:	f383 8810 	msr	PRIMASK, r3
 c0058f8:	bf00      	nop
 c0058fa:	bf00      	nop
 c0058fc:	3724      	adds	r7, #36	; 0x24
 c0058fe:	46bd      	mov	sp, r7
 c005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005904:	4770      	bx	lr
 c005906:	bf00      	nop
 c005908:	30000074 	.word	0x30000074
 c00590c:	5002202c 	.word	0x5002202c
 c005910:	40022028 	.word	0x40022028

0c005914 <HAL_FLASHEx_Erase>:
 c005914:	b580      	push	{r7, lr}
 c005916:	b086      	sub	sp, #24
 c005918:	af00      	add	r7, sp, #0
 c00591a:	6078      	str	r0, [r7, #4]
 c00591c:	6039      	str	r1, [r7, #0]
 c00591e:	4b36      	ldr	r3, [pc, #216]	; (c0059f8 <HAL_FLASHEx_Erase+0xe4>)
 c005920:	781b      	ldrb	r3, [r3, #0]
 c005922:	2b01      	cmp	r3, #1
 c005924:	d101      	bne.n	c00592a <HAL_FLASHEx_Erase+0x16>
 c005926:	2302      	movs	r3, #2
 c005928:	e062      	b.n	c0059f0 <HAL_FLASHEx_Erase+0xdc>
 c00592a:	4b33      	ldr	r3, [pc, #204]	; (c0059f8 <HAL_FLASHEx_Erase+0xe4>)
 c00592c:	2201      	movs	r2, #1
 c00592e:	701a      	strb	r2, [r3, #0]
 c005930:	4b31      	ldr	r3, [pc, #196]	; (c0059f8 <HAL_FLASHEx_Erase+0xe4>)
 c005932:	2200      	movs	r2, #0
 c005934:	605a      	str	r2, [r3, #4]
 c005936:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 c00593a:	f7ff ff4b 	bl	c0057d4 <FLASH_WaitForLastOperation>
 c00593e:	4603      	mov	r3, r0
 c005940:	75fb      	strb	r3, [r7, #23]
 c005942:	7dfb      	ldrb	r3, [r7, #23]
 c005944:	2b00      	cmp	r3, #0
 c005946:	d14f      	bne.n	c0059e8 <HAL_FLASHEx_Erase+0xd4>
 c005948:	687b      	ldr	r3, [r7, #4]
 c00594a:	681b      	ldr	r3, [r3, #0]
 c00594c:	4a2a      	ldr	r2, [pc, #168]	; (c0059f8 <HAL_FLASHEx_Erase+0xe4>)
 c00594e:	6093      	str	r3, [r2, #8]
 c005950:	4b29      	ldr	r3, [pc, #164]	; (c0059f8 <HAL_FLASHEx_Erase+0xe4>)
 c005952:	689b      	ldr	r3, [r3, #8]
 c005954:	2b00      	cmp	r3, #0
 c005956:	db01      	blt.n	c00595c <HAL_FLASHEx_Erase+0x48>
 c005958:	4b28      	ldr	r3, [pc, #160]	; (c0059fc <HAL_FLASHEx_Erase+0xe8>)
 c00595a:	e000      	b.n	c00595e <HAL_FLASHEx_Erase+0x4a>
 c00595c:	4b28      	ldr	r3, [pc, #160]	; (c005a00 <HAL_FLASHEx_Erase+0xec>)
 c00595e:	60fb      	str	r3, [r7, #12]
 c005960:	4b25      	ldr	r3, [pc, #148]	; (c0059f8 <HAL_FLASHEx_Erase+0xe4>)
 c005962:	689b      	ldr	r3, [r3, #8]
 c005964:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 c005968:	f248 0204 	movw	r2, #32772	; 0x8004
 c00596c:	4293      	cmp	r3, r2
 c00596e:	d10b      	bne.n	c005988 <HAL_FLASHEx_Erase+0x74>
 c005970:	687b      	ldr	r3, [r7, #4]
 c005972:	685b      	ldr	r3, [r3, #4]
 c005974:	4618      	mov	r0, r3
 c005976:	f000 f845 	bl	c005a04 <FLASH_MassErase>
 c00597a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 c00597e:	f7ff ff29 	bl	c0057d4 <FLASH_WaitForLastOperation>
 c005982:	4603      	mov	r3, r0
 c005984:	75fb      	strb	r3, [r7, #23]
 c005986:	e025      	b.n	c0059d4 <HAL_FLASHEx_Erase+0xc0>
 c005988:	683b      	ldr	r3, [r7, #0]
 c00598a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c00598e:	601a      	str	r2, [r3, #0]
 c005990:	687b      	ldr	r3, [r7, #4]
 c005992:	689b      	ldr	r3, [r3, #8]
 c005994:	613b      	str	r3, [r7, #16]
 c005996:	e015      	b.n	c0059c4 <HAL_FLASHEx_Erase+0xb0>
 c005998:	687b      	ldr	r3, [r7, #4]
 c00599a:	685b      	ldr	r3, [r3, #4]
 c00599c:	4619      	mov	r1, r3
 c00599e:	6938      	ldr	r0, [r7, #16]
 c0059a0:	f000 f882 	bl	c005aa8 <FLASH_PageErase>
 c0059a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 c0059a8:	f7ff ff14 	bl	c0057d4 <FLASH_WaitForLastOperation>
 c0059ac:	4603      	mov	r3, r0
 c0059ae:	75fb      	strb	r3, [r7, #23]
 c0059b0:	7dfb      	ldrb	r3, [r7, #23]
 c0059b2:	2b00      	cmp	r3, #0
 c0059b4:	d003      	beq.n	c0059be <HAL_FLASHEx_Erase+0xaa>
 c0059b6:	683b      	ldr	r3, [r7, #0]
 c0059b8:	693a      	ldr	r2, [r7, #16]
 c0059ba:	601a      	str	r2, [r3, #0]
 c0059bc:	e00a      	b.n	c0059d4 <HAL_FLASHEx_Erase+0xc0>
 c0059be:	693b      	ldr	r3, [r7, #16]
 c0059c0:	3301      	adds	r3, #1
 c0059c2:	613b      	str	r3, [r7, #16]
 c0059c4:	687b      	ldr	r3, [r7, #4]
 c0059c6:	689a      	ldr	r2, [r3, #8]
 c0059c8:	687b      	ldr	r3, [r7, #4]
 c0059ca:	68db      	ldr	r3, [r3, #12]
 c0059cc:	4413      	add	r3, r2
 c0059ce:	693a      	ldr	r2, [r7, #16]
 c0059d0:	429a      	cmp	r2, r3
 c0059d2:	d3e1      	bcc.n	c005998 <HAL_FLASHEx_Erase+0x84>
 c0059d4:	68fb      	ldr	r3, [r7, #12]
 c0059d6:	681a      	ldr	r2, [r3, #0]
 c0059d8:	4b07      	ldr	r3, [pc, #28]	; (c0059f8 <HAL_FLASHEx_Erase+0xe4>)
 c0059da:	689b      	ldr	r3, [r3, #8]
 c0059dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 c0059e0:	43db      	mvns	r3, r3
 c0059e2:	401a      	ands	r2, r3
 c0059e4:	68fb      	ldr	r3, [r7, #12]
 c0059e6:	601a      	str	r2, [r3, #0]
 c0059e8:	4b03      	ldr	r3, [pc, #12]	; (c0059f8 <HAL_FLASHEx_Erase+0xe4>)
 c0059ea:	2200      	movs	r2, #0
 c0059ec:	701a      	strb	r2, [r3, #0]
 c0059ee:	7dfb      	ldrb	r3, [r7, #23]
 c0059f0:	4618      	mov	r0, r3
 c0059f2:	3718      	adds	r7, #24
 c0059f4:	46bd      	mov	sp, r7
 c0059f6:	bd80      	pop	{r7, pc}
 c0059f8:	30000074 	.word	0x30000074
 c0059fc:	5002202c 	.word	0x5002202c
 c005a00:	40022028 	.word	0x40022028

0c005a04 <FLASH_MassErase>:
 c005a04:	b480      	push	{r7}
 c005a06:	b087      	sub	sp, #28
 c005a08:	af00      	add	r7, sp, #0
 c005a0a:	6078      	str	r0, [r7, #4]
 c005a0c:	f3ef 8310 	mrs	r3, PRIMASK
 c005a10:	60fb      	str	r3, [r7, #12]
 c005a12:	68fb      	ldr	r3, [r7, #12]
 c005a14:	617b      	str	r3, [r7, #20]
 c005a16:	b672      	cpsid	i
 c005a18:	bf00      	nop
 c005a1a:	4b1f      	ldr	r3, [pc, #124]	; (c005a98 <FLASH_MassErase+0x94>)
 c005a1c:	689b      	ldr	r3, [r3, #8]
 c005a1e:	2b00      	cmp	r3, #0
 c005a20:	db01      	blt.n	c005a26 <FLASH_MassErase+0x22>
 c005a22:	4b1e      	ldr	r3, [pc, #120]	; (c005a9c <FLASH_MassErase+0x98>)
 c005a24:	e000      	b.n	c005a28 <FLASH_MassErase+0x24>
 c005a26:	4b1e      	ldr	r3, [pc, #120]	; (c005aa0 <FLASH_MassErase+0x9c>)
 c005a28:	613b      	str	r3, [r7, #16]
 c005a2a:	4b1e      	ldr	r3, [pc, #120]	; (c005aa4 <FLASH_MassErase+0xa0>)
 c005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c005a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c005a32:	2b00      	cmp	r3, #0
 c005a34:	d016      	beq.n	c005a64 <FLASH_MassErase+0x60>
 c005a36:	687b      	ldr	r3, [r7, #4]
 c005a38:	f003 0301 	and.w	r3, r3, #1
 c005a3c:	2b00      	cmp	r3, #0
 c005a3e:	d005      	beq.n	c005a4c <FLASH_MassErase+0x48>
 c005a40:	693b      	ldr	r3, [r7, #16]
 c005a42:	681b      	ldr	r3, [r3, #0]
 c005a44:	f043 0204 	orr.w	r2, r3, #4
 c005a48:	693b      	ldr	r3, [r7, #16]
 c005a4a:	601a      	str	r2, [r3, #0]
 c005a4c:	687b      	ldr	r3, [r7, #4]
 c005a4e:	f003 0302 	and.w	r3, r3, #2
 c005a52:	2b00      	cmp	r3, #0
 c005a54:	d00e      	beq.n	c005a74 <FLASH_MassErase+0x70>
 c005a56:	693b      	ldr	r3, [r7, #16]
 c005a58:	681b      	ldr	r3, [r3, #0]
 c005a5a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 c005a5e:	693b      	ldr	r3, [r7, #16]
 c005a60:	601a      	str	r2, [r3, #0]
 c005a62:	e007      	b.n	c005a74 <FLASH_MassErase+0x70>
 c005a64:	693b      	ldr	r3, [r7, #16]
 c005a66:	681b      	ldr	r3, [r3, #0]
 c005a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 c005a6c:	f043 0304 	orr.w	r3, r3, #4
 c005a70:	693a      	ldr	r2, [r7, #16]
 c005a72:	6013      	str	r3, [r2, #0]
 c005a74:	693b      	ldr	r3, [r7, #16]
 c005a76:	681b      	ldr	r3, [r3, #0]
 c005a78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 c005a7c:	693b      	ldr	r3, [r7, #16]
 c005a7e:	601a      	str	r2, [r3, #0]
 c005a80:	697b      	ldr	r3, [r7, #20]
 c005a82:	60bb      	str	r3, [r7, #8]
 c005a84:	68bb      	ldr	r3, [r7, #8]
 c005a86:	f383 8810 	msr	PRIMASK, r3
 c005a8a:	bf00      	nop
 c005a8c:	bf00      	nop
 c005a8e:	371c      	adds	r7, #28
 c005a90:	46bd      	mov	sp, r7
 c005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005a96:	4770      	bx	lr
 c005a98:	30000074 	.word	0x30000074
 c005a9c:	5002202c 	.word	0x5002202c
 c005aa0:	40022028 	.word	0x40022028
 c005aa4:	50022000 	.word	0x50022000

0c005aa8 <FLASH_PageErase>:
 c005aa8:	b480      	push	{r7}
 c005aaa:	b087      	sub	sp, #28
 c005aac:	af00      	add	r7, sp, #0
 c005aae:	6078      	str	r0, [r7, #4]
 c005ab0:	6039      	str	r1, [r7, #0]
 c005ab2:	f3ef 8310 	mrs	r3, PRIMASK
 c005ab6:	60fb      	str	r3, [r7, #12]
 c005ab8:	68fb      	ldr	r3, [r7, #12]
 c005aba:	617b      	str	r3, [r7, #20]
 c005abc:	b672      	cpsid	i
 c005abe:	bf00      	nop
 c005ac0:	4b22      	ldr	r3, [pc, #136]	; (c005b4c <FLASH_PageErase+0xa4>)
 c005ac2:	689b      	ldr	r3, [r3, #8]
 c005ac4:	2b00      	cmp	r3, #0
 c005ac6:	db01      	blt.n	c005acc <FLASH_PageErase+0x24>
 c005ac8:	4b21      	ldr	r3, [pc, #132]	; (c005b50 <FLASH_PageErase+0xa8>)
 c005aca:	e000      	b.n	c005ace <FLASH_PageErase+0x26>
 c005acc:	4b21      	ldr	r3, [pc, #132]	; (c005b54 <FLASH_PageErase+0xac>)
 c005ace:	613b      	str	r3, [r7, #16]
 c005ad0:	4b21      	ldr	r3, [pc, #132]	; (c005b58 <FLASH_PageErase+0xb0>)
 c005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c005ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c005ad8:	2b00      	cmp	r3, #0
 c005ada:	d106      	bne.n	c005aea <FLASH_PageErase+0x42>
 c005adc:	693b      	ldr	r3, [r7, #16]
 c005ade:	681b      	ldr	r3, [r3, #0]
 c005ae0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 c005ae4:	693b      	ldr	r3, [r7, #16]
 c005ae6:	601a      	str	r2, [r3, #0]
 c005ae8:	e011      	b.n	c005b0e <FLASH_PageErase+0x66>
 c005aea:	683b      	ldr	r3, [r7, #0]
 c005aec:	f003 0301 	and.w	r3, r3, #1
 c005af0:	2b00      	cmp	r3, #0
 c005af2:	d006      	beq.n	c005b02 <FLASH_PageErase+0x5a>
 c005af4:	693b      	ldr	r3, [r7, #16]
 c005af6:	681b      	ldr	r3, [r3, #0]
 c005af8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 c005afc:	693b      	ldr	r3, [r7, #16]
 c005afe:	601a      	str	r2, [r3, #0]
 c005b00:	e005      	b.n	c005b0e <FLASH_PageErase+0x66>
 c005b02:	693b      	ldr	r3, [r7, #16]
 c005b04:	681b      	ldr	r3, [r3, #0]
 c005b06:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 c005b0a:	693b      	ldr	r3, [r7, #16]
 c005b0c:	601a      	str	r2, [r3, #0]
 c005b0e:	693b      	ldr	r3, [r7, #16]
 c005b10:	681b      	ldr	r3, [r3, #0]
 c005b12:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 c005b16:	f023 0302 	bic.w	r3, r3, #2
 c005b1a:	687a      	ldr	r2, [r7, #4]
 c005b1c:	00d2      	lsls	r2, r2, #3
 c005b1e:	4313      	orrs	r3, r2
 c005b20:	f043 0202 	orr.w	r2, r3, #2
 c005b24:	693b      	ldr	r3, [r7, #16]
 c005b26:	601a      	str	r2, [r3, #0]
 c005b28:	693b      	ldr	r3, [r7, #16]
 c005b2a:	681b      	ldr	r3, [r3, #0]
 c005b2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 c005b30:	693b      	ldr	r3, [r7, #16]
 c005b32:	601a      	str	r2, [r3, #0]
 c005b34:	697b      	ldr	r3, [r7, #20]
 c005b36:	60bb      	str	r3, [r7, #8]
 c005b38:	68bb      	ldr	r3, [r7, #8]
 c005b3a:	f383 8810 	msr	PRIMASK, r3
 c005b3e:	bf00      	nop
 c005b40:	bf00      	nop
 c005b42:	371c      	adds	r7, #28
 c005b44:	46bd      	mov	sp, r7
 c005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005b4a:	4770      	bx	lr
 c005b4c:	30000074 	.word	0x30000074
 c005b50:	5002202c 	.word	0x5002202c
 c005b54:	40022028 	.word	0x40022028
 c005b58:	50022000 	.word	0x50022000

0c005b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c005b5c:	b480      	push	{r7}
 c005b5e:	b087      	sub	sp, #28
 c005b60:	af00      	add	r7, sp, #0
 c005b62:	6078      	str	r0, [r7, #4]
 c005b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c005b66:	2300      	movs	r3, #0
 c005b68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c005b6a:	e158      	b.n	c005e1e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c005b6c:	683b      	ldr	r3, [r7, #0]
 c005b6e:	681a      	ldr	r2, [r3, #0]
 c005b70:	2101      	movs	r1, #1
 c005b72:	697b      	ldr	r3, [r7, #20]
 c005b74:	fa01 f303 	lsl.w	r3, r1, r3
 c005b78:	4013      	ands	r3, r2
 c005b7a:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 c005b7c:	68fb      	ldr	r3, [r7, #12]
 c005b7e:	2b00      	cmp	r3, #0
 c005b80:	f000 814a 	beq.w	c005e18 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c005b84:	683b      	ldr	r3, [r7, #0]
 c005b86:	685b      	ldr	r3, [r3, #4]
 c005b88:	2b01      	cmp	r3, #1
 c005b8a:	d00b      	beq.n	c005ba4 <HAL_GPIO_Init+0x48>
 c005b8c:	683b      	ldr	r3, [r7, #0]
 c005b8e:	685b      	ldr	r3, [r3, #4]
 c005b90:	2b02      	cmp	r3, #2
 c005b92:	d007      	beq.n	c005ba4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c005b94:	683b      	ldr	r3, [r7, #0]
 c005b96:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c005b98:	2b11      	cmp	r3, #17
 c005b9a:	d003      	beq.n	c005ba4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c005b9c:	683b      	ldr	r3, [r7, #0]
 c005b9e:	685b      	ldr	r3, [r3, #4]
 c005ba0:	2b12      	cmp	r3, #18
 c005ba2:	d130      	bne.n	c005c06 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c005ba4:	687b      	ldr	r3, [r7, #4]
 c005ba6:	689b      	ldr	r3, [r3, #8]
 c005ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c005baa:	697b      	ldr	r3, [r7, #20]
 c005bac:	005b      	lsls	r3, r3, #1
 c005bae:	2203      	movs	r2, #3
 c005bb0:	fa02 f303 	lsl.w	r3, r2, r3
 c005bb4:	43db      	mvns	r3, r3
 c005bb6:	693a      	ldr	r2, [r7, #16]
 c005bb8:	4013      	ands	r3, r2
 c005bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c005bbc:	683b      	ldr	r3, [r7, #0]
 c005bbe:	68da      	ldr	r2, [r3, #12]
 c005bc0:	697b      	ldr	r3, [r7, #20]
 c005bc2:	005b      	lsls	r3, r3, #1
 c005bc4:	fa02 f303 	lsl.w	r3, r2, r3
 c005bc8:	693a      	ldr	r2, [r7, #16]
 c005bca:	4313      	orrs	r3, r2
 c005bcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c005bce:	687b      	ldr	r3, [r7, #4]
 c005bd0:	693a      	ldr	r2, [r7, #16]
 c005bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c005bd4:	687b      	ldr	r3, [r7, #4]
 c005bd6:	685b      	ldr	r3, [r3, #4]
 c005bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c005bda:	2201      	movs	r2, #1
 c005bdc:	697b      	ldr	r3, [r7, #20]
 c005bde:	fa02 f303 	lsl.w	r3, r2, r3
 c005be2:	43db      	mvns	r3, r3
 c005be4:	693a      	ldr	r2, [r7, #16]
 c005be6:	4013      	ands	r3, r2
 c005be8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 c005bea:	683b      	ldr	r3, [r7, #0]
 c005bec:	685b      	ldr	r3, [r3, #4]
 c005bee:	091b      	lsrs	r3, r3, #4
 c005bf0:	f003 0201 	and.w	r2, r3, #1
 c005bf4:	697b      	ldr	r3, [r7, #20]
 c005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 c005bfa:	693a      	ldr	r2, [r7, #16]
 c005bfc:	4313      	orrs	r3, r2
 c005bfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c005c00:	687b      	ldr	r3, [r7, #4]
 c005c02:	693a      	ldr	r2, [r7, #16]
 c005c04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 c005c06:	687b      	ldr	r3, [r7, #4]
 c005c08:	68db      	ldr	r3, [r3, #12]
 c005c0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c005c0c:	697b      	ldr	r3, [r7, #20]
 c005c0e:	005b      	lsls	r3, r3, #1
 c005c10:	2203      	movs	r2, #3
 c005c12:	fa02 f303 	lsl.w	r3, r2, r3
 c005c16:	43db      	mvns	r3, r3
 c005c18:	693a      	ldr	r2, [r7, #16]
 c005c1a:	4013      	ands	r3, r2
 c005c1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c005c1e:	683b      	ldr	r3, [r7, #0]
 c005c20:	689a      	ldr	r2, [r3, #8]
 c005c22:	697b      	ldr	r3, [r7, #20]
 c005c24:	005b      	lsls	r3, r3, #1
 c005c26:	fa02 f303 	lsl.w	r3, r2, r3
 c005c2a:	693a      	ldr	r2, [r7, #16]
 c005c2c:	4313      	orrs	r3, r2
 c005c2e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 c005c30:	687b      	ldr	r3, [r7, #4]
 c005c32:	693a      	ldr	r2, [r7, #16]
 c005c34:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c005c36:	683b      	ldr	r3, [r7, #0]
 c005c38:	685b      	ldr	r3, [r3, #4]
 c005c3a:	2b02      	cmp	r3, #2
 c005c3c:	d003      	beq.n	c005c46 <HAL_GPIO_Init+0xea>
 c005c3e:	683b      	ldr	r3, [r7, #0]
 c005c40:	685b      	ldr	r3, [r3, #4]
 c005c42:	2b12      	cmp	r3, #18
 c005c44:	d123      	bne.n	c005c8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c005c46:	697b      	ldr	r3, [r7, #20]
 c005c48:	08da      	lsrs	r2, r3, #3
 c005c4a:	687b      	ldr	r3, [r7, #4]
 c005c4c:	3208      	adds	r2, #8
 c005c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c005c52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c005c54:	697b      	ldr	r3, [r7, #20]
 c005c56:	f003 0307 	and.w	r3, r3, #7
 c005c5a:	009b      	lsls	r3, r3, #2
 c005c5c:	220f      	movs	r2, #15
 c005c5e:	fa02 f303 	lsl.w	r3, r2, r3
 c005c62:	43db      	mvns	r3, r3
 c005c64:	693a      	ldr	r2, [r7, #16]
 c005c66:	4013      	ands	r3, r2
 c005c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c005c6a:	683b      	ldr	r3, [r7, #0]
 c005c6c:	691a      	ldr	r2, [r3, #16]
 c005c6e:	697b      	ldr	r3, [r7, #20]
 c005c70:	f003 0307 	and.w	r3, r3, #7
 c005c74:	009b      	lsls	r3, r3, #2
 c005c76:	fa02 f303 	lsl.w	r3, r2, r3
 c005c7a:	693a      	ldr	r2, [r7, #16]
 c005c7c:	4313      	orrs	r3, r2
 c005c7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c005c80:	697b      	ldr	r3, [r7, #20]
 c005c82:	08da      	lsrs	r2, r3, #3
 c005c84:	687b      	ldr	r3, [r7, #4]
 c005c86:	3208      	adds	r2, #8
 c005c88:	6939      	ldr	r1, [r7, #16]
 c005c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c005c8e:	687b      	ldr	r3, [r7, #4]
 c005c90:	681b      	ldr	r3, [r3, #0]
 c005c92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c005c94:	697b      	ldr	r3, [r7, #20]
 c005c96:	005b      	lsls	r3, r3, #1
 c005c98:	2203      	movs	r2, #3
 c005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 c005c9e:	43db      	mvns	r3, r3
 c005ca0:	693a      	ldr	r2, [r7, #16]
 c005ca2:	4013      	ands	r3, r2
 c005ca4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c005ca6:	683b      	ldr	r3, [r7, #0]
 c005ca8:	685b      	ldr	r3, [r3, #4]
 c005caa:	f003 0203 	and.w	r2, r3, #3
 c005cae:	697b      	ldr	r3, [r7, #20]
 c005cb0:	005b      	lsls	r3, r3, #1
 c005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 c005cb6:	693a      	ldr	r2, [r7, #16]
 c005cb8:	4313      	orrs	r3, r2
 c005cba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c005cbc:	687b      	ldr	r3, [r7, #4]
 c005cbe:	693a      	ldr	r2, [r7, #16]
 c005cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c005cc2:	683b      	ldr	r3, [r7, #0]
 c005cc4:	685b      	ldr	r3, [r3, #4]
 c005cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c005cca:	2b00      	cmp	r3, #0
 c005ccc:	f000 80a4 	beq.w	c005e18 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c005cd0:	4a5a      	ldr	r2, [pc, #360]	; (c005e3c <HAL_GPIO_Init+0x2e0>)
 c005cd2:	697b      	ldr	r3, [r7, #20]
 c005cd4:	089b      	lsrs	r3, r3, #2
 c005cd6:	3318      	adds	r3, #24
 c005cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005cdc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c005cde:	697b      	ldr	r3, [r7, #20]
 c005ce0:	f003 0303 	and.w	r3, r3, #3
 c005ce4:	00db      	lsls	r3, r3, #3
 c005ce6:	220f      	movs	r2, #15
 c005ce8:	fa02 f303 	lsl.w	r3, r2, r3
 c005cec:	43db      	mvns	r3, r3
 c005cee:	693a      	ldr	r2, [r7, #16]
 c005cf0:	4013      	ands	r3, r2
 c005cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c005cf4:	687b      	ldr	r3, [r7, #4]
 c005cf6:	4a52      	ldr	r2, [pc, #328]	; (c005e40 <HAL_GPIO_Init+0x2e4>)
 c005cf8:	4293      	cmp	r3, r2
 c005cfa:	d025      	beq.n	c005d48 <HAL_GPIO_Init+0x1ec>
 c005cfc:	687b      	ldr	r3, [r7, #4]
 c005cfe:	4a51      	ldr	r2, [pc, #324]	; (c005e44 <HAL_GPIO_Init+0x2e8>)
 c005d00:	4293      	cmp	r3, r2
 c005d02:	d01f      	beq.n	c005d44 <HAL_GPIO_Init+0x1e8>
 c005d04:	687b      	ldr	r3, [r7, #4]
 c005d06:	4a50      	ldr	r2, [pc, #320]	; (c005e48 <HAL_GPIO_Init+0x2ec>)
 c005d08:	4293      	cmp	r3, r2
 c005d0a:	d019      	beq.n	c005d40 <HAL_GPIO_Init+0x1e4>
 c005d0c:	687b      	ldr	r3, [r7, #4]
 c005d0e:	4a4f      	ldr	r2, [pc, #316]	; (c005e4c <HAL_GPIO_Init+0x2f0>)
 c005d10:	4293      	cmp	r3, r2
 c005d12:	d013      	beq.n	c005d3c <HAL_GPIO_Init+0x1e0>
 c005d14:	687b      	ldr	r3, [r7, #4]
 c005d16:	4a4e      	ldr	r2, [pc, #312]	; (c005e50 <HAL_GPIO_Init+0x2f4>)
 c005d18:	4293      	cmp	r3, r2
 c005d1a:	d00d      	beq.n	c005d38 <HAL_GPIO_Init+0x1dc>
 c005d1c:	687b      	ldr	r3, [r7, #4]
 c005d1e:	4a4d      	ldr	r2, [pc, #308]	; (c005e54 <HAL_GPIO_Init+0x2f8>)
 c005d20:	4293      	cmp	r3, r2
 c005d22:	d007      	beq.n	c005d34 <HAL_GPIO_Init+0x1d8>
 c005d24:	687b      	ldr	r3, [r7, #4]
 c005d26:	4a4c      	ldr	r2, [pc, #304]	; (c005e58 <HAL_GPIO_Init+0x2fc>)
 c005d28:	4293      	cmp	r3, r2
 c005d2a:	d101      	bne.n	c005d30 <HAL_GPIO_Init+0x1d4>
 c005d2c:	2306      	movs	r3, #6
 c005d2e:	e00c      	b.n	c005d4a <HAL_GPIO_Init+0x1ee>
 c005d30:	2307      	movs	r3, #7
 c005d32:	e00a      	b.n	c005d4a <HAL_GPIO_Init+0x1ee>
 c005d34:	2305      	movs	r3, #5
 c005d36:	e008      	b.n	c005d4a <HAL_GPIO_Init+0x1ee>
 c005d38:	2304      	movs	r3, #4
 c005d3a:	e006      	b.n	c005d4a <HAL_GPIO_Init+0x1ee>
 c005d3c:	2303      	movs	r3, #3
 c005d3e:	e004      	b.n	c005d4a <HAL_GPIO_Init+0x1ee>
 c005d40:	2302      	movs	r3, #2
 c005d42:	e002      	b.n	c005d4a <HAL_GPIO_Init+0x1ee>
 c005d44:	2301      	movs	r3, #1
 c005d46:	e000      	b.n	c005d4a <HAL_GPIO_Init+0x1ee>
 c005d48:	2300      	movs	r3, #0
 c005d4a:	697a      	ldr	r2, [r7, #20]
 c005d4c:	f002 0203 	and.w	r2, r2, #3
 c005d50:	00d2      	lsls	r2, r2, #3
 c005d52:	4093      	lsls	r3, r2
 c005d54:	693a      	ldr	r2, [r7, #16]
 c005d56:	4313      	orrs	r3, r2
 c005d58:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c005d5a:	4938      	ldr	r1, [pc, #224]	; (c005e3c <HAL_GPIO_Init+0x2e0>)
 c005d5c:	697b      	ldr	r3, [r7, #20]
 c005d5e:	089b      	lsrs	r3, r3, #2
 c005d60:	3318      	adds	r3, #24
 c005d62:	693a      	ldr	r2, [r7, #16]
 c005d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 c005d68:	4b34      	ldr	r3, [pc, #208]	; (c005e3c <HAL_GPIO_Init+0x2e0>)
 c005d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c005d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c005d70:	68fb      	ldr	r3, [r7, #12]
 c005d72:	43db      	mvns	r3, r3
 c005d74:	693a      	ldr	r2, [r7, #16]
 c005d76:	4013      	ands	r3, r2
 c005d78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c005d7a:	683b      	ldr	r3, [r7, #0]
 c005d7c:	685b      	ldr	r3, [r3, #4]
 c005d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c005d82:	2b00      	cmp	r3, #0
 c005d84:	d003      	beq.n	c005d8e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 c005d86:	693a      	ldr	r2, [r7, #16]
 c005d88:	68fb      	ldr	r3, [r7, #12]
 c005d8a:	4313      	orrs	r3, r2
 c005d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c005d8e:	4a2b      	ldr	r2, [pc, #172]	; (c005e3c <HAL_GPIO_Init+0x2e0>)
 c005d90:	693b      	ldr	r3, [r7, #16]
 c005d92:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 c005d96:	4b29      	ldr	r3, [pc, #164]	; (c005e3c <HAL_GPIO_Init+0x2e0>)
 c005d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c005d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c005d9e:	68fb      	ldr	r3, [r7, #12]
 c005da0:	43db      	mvns	r3, r3
 c005da2:	693a      	ldr	r2, [r7, #16]
 c005da4:	4013      	ands	r3, r2
 c005da6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c005da8:	683b      	ldr	r3, [r7, #0]
 c005daa:	685b      	ldr	r3, [r3, #4]
 c005dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c005db0:	2b00      	cmp	r3, #0
 c005db2:	d003      	beq.n	c005dbc <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 c005db4:	693a      	ldr	r2, [r7, #16]
 c005db6:	68fb      	ldr	r3, [r7, #12]
 c005db8:	4313      	orrs	r3, r2
 c005dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c005dbc:	4a1f      	ldr	r2, [pc, #124]	; (c005e3c <HAL_GPIO_Init+0x2e0>)
 c005dbe:	693b      	ldr	r3, [r7, #16]
 c005dc0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c005dc4:	4b1d      	ldr	r3, [pc, #116]	; (c005e3c <HAL_GPIO_Init+0x2e0>)
 c005dc6:	681b      	ldr	r3, [r3, #0]
 c005dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c005dca:	68fb      	ldr	r3, [r7, #12]
 c005dcc:	43db      	mvns	r3, r3
 c005dce:	693a      	ldr	r2, [r7, #16]
 c005dd0:	4013      	ands	r3, r2
 c005dd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c005dd4:	683b      	ldr	r3, [r7, #0]
 c005dd6:	685b      	ldr	r3, [r3, #4]
 c005dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c005ddc:	2b00      	cmp	r3, #0
 c005dde:	d003      	beq.n	c005de8 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 c005de0:	693a      	ldr	r2, [r7, #16]
 c005de2:	68fb      	ldr	r3, [r7, #12]
 c005de4:	4313      	orrs	r3, r2
 c005de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c005de8:	4a14      	ldr	r2, [pc, #80]	; (c005e3c <HAL_GPIO_Init+0x2e0>)
 c005dea:	693b      	ldr	r3, [r7, #16]
 c005dec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c005dee:	4b13      	ldr	r3, [pc, #76]	; (c005e3c <HAL_GPIO_Init+0x2e0>)
 c005df0:	685b      	ldr	r3, [r3, #4]
 c005df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c005df4:	68fb      	ldr	r3, [r7, #12]
 c005df6:	43db      	mvns	r3, r3
 c005df8:	693a      	ldr	r2, [r7, #16]
 c005dfa:	4013      	ands	r3, r2
 c005dfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c005dfe:	683b      	ldr	r3, [r7, #0]
 c005e00:	685b      	ldr	r3, [r3, #4]
 c005e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c005e06:	2b00      	cmp	r3, #0
 c005e08:	d003      	beq.n	c005e12 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 c005e0a:	693a      	ldr	r2, [r7, #16]
 c005e0c:	68fb      	ldr	r3, [r7, #12]
 c005e0e:	4313      	orrs	r3, r2
 c005e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c005e12:	4a0a      	ldr	r2, [pc, #40]	; (c005e3c <HAL_GPIO_Init+0x2e0>)
 c005e14:	693b      	ldr	r3, [r7, #16]
 c005e16:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 c005e18:	697b      	ldr	r3, [r7, #20]
 c005e1a:	3301      	adds	r3, #1
 c005e1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c005e1e:	683b      	ldr	r3, [r7, #0]
 c005e20:	681a      	ldr	r2, [r3, #0]
 c005e22:	697b      	ldr	r3, [r7, #20]
 c005e24:	fa22 f303 	lsr.w	r3, r2, r3
 c005e28:	2b00      	cmp	r3, #0
 c005e2a:	f47f ae9f 	bne.w	c005b6c <HAL_GPIO_Init+0x10>
  }
}
 c005e2e:	bf00      	nop
 c005e30:	bf00      	nop
 c005e32:	371c      	adds	r7, #28
 c005e34:	46bd      	mov	sp, r7
 c005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005e3a:	4770      	bx	lr
 c005e3c:	5002f400 	.word	0x5002f400
 c005e40:	52020000 	.word	0x52020000
 c005e44:	52020400 	.word	0x52020400
 c005e48:	52020800 	.word	0x52020800
 c005e4c:	52020c00 	.word	0x52020c00
 c005e50:	52021000 	.word	0x52021000
 c005e54:	52021400 	.word	0x52021400
 c005e58:	52021800 	.word	0x52021800

0c005e5c <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c005e5c:	b480      	push	{r7}
 c005e5e:	b085      	sub	sp, #20
 c005e60:	af00      	add	r7, sp, #0
 c005e62:	6078      	str	r0, [r7, #4]
 c005e64:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c005e66:	683b      	ldr	r3, [r7, #0]
 c005e68:	f5b3 7f41 	cmp.w	r3, #772	; 0x304
 c005e6c:	d216      	bcs.n	c005e9c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c005e6e:	687b      	ldr	r3, [r7, #4]
 c005e70:	0f1b      	lsrs	r3, r3, #28
 c005e72:	015a      	lsls	r2, r3, #5
 c005e74:	687b      	ldr	r3, [r7, #4]
 c005e76:	f003 031f 	and.w	r3, r3, #31
 c005e7a:	4413      	add	r3, r2
 c005e7c:	2b32      	cmp	r3, #50	; 0x32
 c005e7e:	d80d      	bhi.n	c005e9c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c005e80:	687b      	ldr	r3, [r7, #4]
 c005e82:	f003 0320 	and.w	r3, r3, #32
 c005e86:	2b00      	cmp	r3, #0
 c005e88:	d00a      	beq.n	c005ea0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
 c005e8a:	687b      	ldr	r3, [r7, #4]
 c005e8c:	0f1b      	lsrs	r3, r3, #28
 c005e8e:	015a      	lsls	r2, r3, #5
 c005e90:	687b      	ldr	r3, [r7, #4]
 c005e92:	f003 031f 	and.w	r3, r3, #31
 c005e96:	4413      	add	r3, r2
 c005e98:	2b00      	cmp	r3, #0
 c005e9a:	d001      	beq.n	c005ea0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
  {
    return HAL_ERROR;
 c005e9c:	2301      	movs	r3, #1
 c005e9e:	e0a4      	b.n	c005fea <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18e>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c005ea0:	687b      	ldr	r3, [r7, #4]
 c005ea2:	f003 0320 	and.w	r3, r3, #32
 c005ea6:	2b00      	cmp	r3, #0
 c005ea8:	d04a      	beq.n	c005f40 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xe4>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c005eaa:	683a      	ldr	r2, [r7, #0]
 c005eac:	f240 1301 	movw	r3, #257	; 0x101
 c005eb0:	4013      	ands	r3, r2
 c005eb2:	f240 1201 	movw	r2, #257	; 0x101
 c005eb6:	4293      	cmp	r3, r2
 c005eb8:	d10c      	bne.n	c005ed4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x78>
    {
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c005eba:	4b4f      	ldr	r3, [pc, #316]	; (c005ff8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005ebc:	691b      	ldr	r3, [r3, #16]
 c005ebe:	4b4e      	ldr	r3, [pc, #312]	; (c005ff8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c005ec4:	611a      	str	r2, [r3, #16]
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c005ec6:	4b4c      	ldr	r3, [pc, #304]	; (c005ff8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005ec8:	695a      	ldr	r2, [r3, #20]
 c005eca:	494b      	ldr	r1, [pc, #300]	; (c005ff8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005ecc:	4b4b      	ldr	r3, [pc, #300]	; (c005ffc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a0>)
 c005ece:	4313      	orrs	r3, r2
 c005ed0:	614b      	str	r3, [r1, #20]
 c005ed2:	e00f      	b.n	c005ef4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c005ed4:	683b      	ldr	r3, [r7, #0]
 c005ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c005eda:	2b00      	cmp	r3, #0
 c005edc:	d00a      	beq.n	c005ef4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
    {
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c005ede:	4b46      	ldr	r3, [pc, #280]	; (c005ff8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005ee0:	691b      	ldr	r3, [r3, #16]
 c005ee2:	4b45      	ldr	r3, [pc, #276]	; (c005ff8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005ee4:	2200      	movs	r2, #0
 c005ee6:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c005ee8:	4b43      	ldr	r3, [pc, #268]	; (c005ff8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005eea:	695a      	ldr	r2, [r3, #20]
 c005eec:	4942      	ldr	r1, [pc, #264]	; (c005ff8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005eee:	4b44      	ldr	r3, [pc, #272]	; (c006000 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c005ef0:	4013      	ands	r3, r2
 c005ef2:	614b      	str	r3, [r1, #20]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c005ef4:	683a      	ldr	r2, [r7, #0]
 c005ef6:	f240 2302 	movw	r3, #514	; 0x202
 c005efa:	4013      	ands	r3, r2
 c005efc:	f240 2202 	movw	r2, #514	; 0x202
 c005f00:	4293      	cmp	r3, r2
 c005f02:	d10c      	bne.n	c005f1e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xc2>
    {
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c005f04:	4b3c      	ldr	r3, [pc, #240]	; (c005ff8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005f06:	6a1b      	ldr	r3, [r3, #32]
 c005f08:	4b3b      	ldr	r3, [pc, #236]	; (c005ff8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c005f0e:	621a      	str	r2, [r3, #32]
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c005f10:	4b39      	ldr	r3, [pc, #228]	; (c005ff8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c005f14:	4938      	ldr	r1, [pc, #224]	; (c005ff8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005f16:	4b39      	ldr	r3, [pc, #228]	; (c005ffc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a0>)
 c005f18:	4313      	orrs	r3, r2
 c005f1a:	624b      	str	r3, [r1, #36]	; 0x24
 c005f1c:	e064      	b.n	c005fe8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c005f1e:	683b      	ldr	r3, [r7, #0]
 c005f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c005f24:	2b00      	cmp	r3, #0
 c005f26:	d05f      	beq.n	c005fe8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    {
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c005f28:	4b33      	ldr	r3, [pc, #204]	; (c005ff8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005f2a:	6a1b      	ldr	r3, [r3, #32]
 c005f2c:	4b32      	ldr	r3, [pc, #200]	; (c005ff8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005f2e:	2200      	movs	r2, #0
 c005f30:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c005f32:	4b31      	ldr	r3, [pc, #196]	; (c005ff8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c005f36:	4930      	ldr	r1, [pc, #192]	; (c005ff8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c005f38:	4b31      	ldr	r3, [pc, #196]	; (c006000 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c005f3a:	4013      	ands	r3, r2
 c005f3c:	624b      	str	r3, [r1, #36]	; 0x24
 c005f3e:	e053      	b.n	c005fe8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
  {
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c005f40:	687b      	ldr	r3, [r7, #4]
 c005f42:	0f1a      	lsrs	r2, r3, #28
 c005f44:	4b2f      	ldr	r3, [pc, #188]	; (c006004 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a8>)
 c005f46:	4413      	add	r3, r2
 c005f48:	009b      	lsls	r3, r3, #2
 c005f4a:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c005f4c:	683a      	ldr	r2, [r7, #0]
 c005f4e:	f240 1301 	movw	r3, #257	; 0x101
 c005f52:	4013      	ands	r3, r2
 c005f54:	f240 1201 	movw	r2, #257	; 0x101
 c005f58:	4293      	cmp	r3, r2
 c005f5a:	d10a      	bne.n	c005f72 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x116>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c005f5c:	68fb      	ldr	r3, [r7, #12]
 c005f5e:	6819      	ldr	r1, [r3, #0]
 c005f60:	687b      	ldr	r3, [r7, #4]
 c005f62:	f003 031f 	and.w	r3, r3, #31
 c005f66:	2201      	movs	r2, #1
 c005f68:	409a      	lsls	r2, r3
 c005f6a:	68fb      	ldr	r3, [r7, #12]
 c005f6c:	430a      	orrs	r2, r1
 c005f6e:	601a      	str	r2, [r3, #0]
 c005f70:	e010      	b.n	c005f94 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x138>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c005f72:	683b      	ldr	r3, [r7, #0]
 c005f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c005f78:	2b00      	cmp	r3, #0
 c005f7a:	d00b      	beq.n	c005f94 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x138>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c005f7c:	68fb      	ldr	r3, [r7, #12]
 c005f7e:	6819      	ldr	r1, [r3, #0]
 c005f80:	687b      	ldr	r3, [r7, #4]
 c005f82:	f003 031f 	and.w	r3, r3, #31
 c005f86:	2201      	movs	r2, #1
 c005f88:	fa02 f303 	lsl.w	r3, r2, r3
 c005f8c:	43da      	mvns	r2, r3
 c005f8e:	68fb      	ldr	r3, [r7, #12]
 c005f90:	400a      	ands	r2, r1
 c005f92:	601a      	str	r2, [r3, #0]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(GTZC_TZSC->PRIVCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c005f94:	687b      	ldr	r3, [r7, #4]
 c005f96:	0f1a      	lsrs	r2, r3, #28
 c005f98:	4b1b      	ldr	r3, [pc, #108]	; (c006008 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1ac>)
 c005f9a:	4413      	add	r3, r2
 c005f9c:	009b      	lsls	r3, r3, #2
 c005f9e:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c005fa0:	683a      	ldr	r2, [r7, #0]
 c005fa2:	f240 2302 	movw	r3, #514	; 0x202
 c005fa6:	4013      	ands	r3, r2
 c005fa8:	f240 2202 	movw	r2, #514	; 0x202
 c005fac:	4293      	cmp	r3, r2
 c005fae:	d10a      	bne.n	c005fc6 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x16a>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c005fb0:	68fb      	ldr	r3, [r7, #12]
 c005fb2:	6819      	ldr	r1, [r3, #0]
 c005fb4:	687b      	ldr	r3, [r7, #4]
 c005fb6:	f003 031f 	and.w	r3, r3, #31
 c005fba:	2201      	movs	r2, #1
 c005fbc:	409a      	lsls	r2, r3
 c005fbe:	68fb      	ldr	r3, [r7, #12]
 c005fc0:	430a      	orrs	r2, r1
 c005fc2:	601a      	str	r2, [r3, #0]
 c005fc4:	e010      	b.n	c005fe8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c005fc6:	683b      	ldr	r3, [r7, #0]
 c005fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c005fcc:	2b00      	cmp	r3, #0
 c005fce:	d00b      	beq.n	c005fe8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c005fd0:	68fb      	ldr	r3, [r7, #12]
 c005fd2:	6819      	ldr	r1, [r3, #0]
 c005fd4:	687b      	ldr	r3, [r7, #4]
 c005fd6:	f003 031f 	and.w	r3, r3, #31
 c005fda:	2201      	movs	r2, #1
 c005fdc:	fa02 f303 	lsl.w	r3, r2, r3
 c005fe0:	43da      	mvns	r2, r3
 c005fe2:	68fb      	ldr	r3, [r7, #12]
 c005fe4:	400a      	ands	r2, r1
 c005fe6:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c005fe8:	2300      	movs	r3, #0
}
 c005fea:	4618      	mov	r0, r3
 c005fec:	3714      	adds	r7, #20
 c005fee:	46bd      	mov	sp, r7
 c005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005ff4:	4770      	bx	lr
 c005ff6:	bf00      	nop
 c005ff8:	50032400 	.word	0x50032400
 c005ffc:	00076fff 	.word	0x00076fff
 c006000:	fff89000 	.word	0xfff89000
 c006004:	1400c904 	.word	0x1400c904
 c006008:	1400c908 	.word	0x1400c908

0c00600c <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c00600c:	b480      	push	{r7}
 c00600e:	b089      	sub	sp, #36	; 0x24
 c006010:	af00      	add	r7, sp, #0
 c006012:	6078      	str	r0, [r7, #4]
 c006014:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c006016:	687b      	ldr	r3, [r7, #4]
 c006018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c00601c:	d00b      	beq.n	c006036 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c00601e:	687b      	ldr	r3, [r7, #4]
 c006020:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c006024:	d007      	beq.n	c006036 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c006026:	687b      	ldr	r3, [r7, #4]
 c006028:	4a36      	ldr	r2, [pc, #216]	; (c006104 <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c00602a:	4293      	cmp	r3, r2
 c00602c:	d003      	beq.n	c006036 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c00602e:	687b      	ldr	r3, [r7, #4]
 c006030:	4a35      	ldr	r2, [pc, #212]	; (c006108 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c006032:	4293      	cmp	r3, r2
 c006034:	d111      	bne.n	c00605a <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c006036:	683b      	ldr	r3, [r7, #0]
 c006038:	681b      	ldr	r3, [r3, #0]
 c00603a:	2b00      	cmp	r3, #0
 c00603c:	d004      	beq.n	c006048 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c00603e:	683b      	ldr	r3, [r7, #0]
 c006040:	681b      	ldr	r3, [r3, #0]
 c006042:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c006046:	d108      	bne.n	c00605a <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c006048:	683b      	ldr	r3, [r7, #0]
 c00604a:	685b      	ldr	r3, [r3, #4]
 c00604c:	2b00      	cmp	r3, #0
 c00604e:	d006      	beq.n	c00605e <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c006050:	683b      	ldr	r3, [r7, #0]
 c006052:	685b      	ldr	r3, [r3, #4]
 c006054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c006058:	d001      	beq.n	c00605e <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c00605a:	2301      	movs	r3, #1
 c00605c:	e04b      	b.n	c0060f6 <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c00605e:	683b      	ldr	r3, [r7, #0]
 c006060:	685b      	ldr	r3, [r3, #4]
 c006062:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c006064:	683b      	ldr	r3, [r7, #0]
 c006066:	681b      	ldr	r3, [r3, #0]
 c006068:	693a      	ldr	r2, [r7, #16]
 c00606a:	4313      	orrs	r3, r2
 c00606c:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c00606e:	687b      	ldr	r3, [r7, #4]
 c006070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c006074:	d003      	beq.n	c00607e <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c006076:	687b      	ldr	r3, [r7, #4]
 c006078:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c00607c:	d105      	bne.n	c00608a <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c00607e:	4b23      	ldr	r3, [pc, #140]	; (c00610c <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c006080:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c006082:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c006086:	61bb      	str	r3, [r7, #24]
 c006088:	e004      	b.n	c006094 <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c00608a:	4b21      	ldr	r3, [pc, #132]	; (c006110 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c00608c:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c00608e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c006092:	61bb      	str	r3, [r7, #24]
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c006094:	69fb      	ldr	r3, [r7, #28]
 c006096:	681b      	ldr	r3, [r3, #0]
 c006098:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c00609c:	693b      	ldr	r3, [r7, #16]
 c00609e:	431a      	orrs	r2, r3
 c0060a0:	69fb      	ldr	r3, [r7, #28]
 c0060a2:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);
  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c0060a4:	69bb      	ldr	r3, [r7, #24]
 c0060a6:	0b5b      	lsrs	r3, r3, #13
 c0060a8:	2201      	movs	r2, #1
 c0060aa:	fa02 f303 	lsl.w	r3, r2, r3
 c0060ae:	3b01      	subs	r3, #1
 c0060b0:	60fb      	str	r3, [r7, #12]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c0060b2:	69fb      	ldr	r3, [r7, #28]
 c0060b4:	691a      	ldr	r2, [r3, #16]
 c0060b6:	68fb      	ldr	r3, [r7, #12]
 c0060b8:	43db      	mvns	r3, r3
 c0060ba:	401a      	ands	r2, r3
 c0060bc:	683b      	ldr	r3, [r7, #0]
 c0060be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c0060c0:	431a      	orrs	r2, r3
 c0060c2:	69fb      	ldr	r3, [r7, #28]
 c0060c4:	611a      	str	r2, [r3, #16]

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c0060c6:	69bb      	ldr	r3, [r7, #24]
 c0060c8:	0b5b      	lsrs	r3, r3, #13
 c0060ca:	60bb      	str	r3, [r7, #8]
  for (i = 0U; i < size_in_superblocks; i++)
 c0060cc:	2300      	movs	r3, #0
 c0060ce:	617b      	str	r3, [r7, #20]
 c0060d0:	e00c      	b.n	c0060ec <HAL_GTZC_MPCBB_ConfigMem+0xe0>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c0060d2:	683b      	ldr	r3, [r7, #0]
 c0060d4:	697a      	ldr	r2, [r7, #20]
 c0060d6:	3202      	adds	r2, #2
 c0060d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c0060dc:	69fb      	ldr	r3, [r7, #28]
 c0060de:	697a      	ldr	r2, [r7, #20]
 c0060e0:	3240      	adds	r2, #64	; 0x40
 c0060e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c0060e6:	697b      	ldr	r3, [r7, #20]
 c0060e8:	3301      	adds	r3, #1
 c0060ea:	617b      	str	r3, [r7, #20]
 c0060ec:	697a      	ldr	r2, [r7, #20]
 c0060ee:	68bb      	ldr	r3, [r7, #8]
 c0060f0:	429a      	cmp	r2, r3
 c0060f2:	d3ee      	bcc.n	c0060d2 <HAL_GTZC_MPCBB_ConfigMem+0xc6>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  return HAL_OK;
 c0060f4:	2300      	movs	r3, #0
}
 c0060f6:	4618      	mov	r0, r3
 c0060f8:	3724      	adds	r7, #36	; 0x24
 c0060fa:	46bd      	mov	sp, r7
 c0060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006100:	4770      	bx	lr
 c006102:	bf00      	nop
 c006104:	20030000 	.word	0x20030000
 c006108:	30030000 	.word	0x30030000
 c00610c:	50032c00 	.word	0x50032c00
 c006110:	50033000 	.word	0x50033000

0c006114 <HAL_GTZC_TZIC_EnableIT>:
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId.
  *         Use GTZC_PERIPH_ALL to select all peripherals.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZIC_EnableIT(uint32_t PeriphId)
{
 c006114:	b480      	push	{r7}
 c006116:	b085      	sub	sp, #20
 c006118:	af00      	add	r7, sp, #0
 c00611a:	6078      	str	r0, [r7, #4]
  uint32_t register_address;

  /* check entry parameters */
  if ((HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZIC_PERIPH_NUMBER)
 c00611c:	687b      	ldr	r3, [r7, #4]
 c00611e:	0f1b      	lsrs	r3, r3, #28
 c006120:	015a      	lsls	r2, r3, #5
 c006122:	687b      	ldr	r3, [r7, #4]
 c006124:	f003 031f 	and.w	r3, r3, #31
 c006128:	4413      	add	r3, r2
 c00612a:	2b47      	cmp	r3, #71	; 0x47
 c00612c:	d80d      	bhi.n	c00614a <HAL_GTZC_TZIC_EnableIT+0x36>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c00612e:	687b      	ldr	r3, [r7, #4]
 c006130:	f003 0320 	and.w	r3, r3, #32
 c006134:	2b00      	cmp	r3, #0
 c006136:	d00a      	beq.n	c00614e <HAL_GTZC_TZIC_EnableIT+0x3a>
 c006138:	687b      	ldr	r3, [r7, #4]
 c00613a:	0f1b      	lsrs	r3, r3, #28
 c00613c:	015a      	lsls	r2, r3, #5
 c00613e:	687b      	ldr	r3, [r7, #4]
 c006140:	f003 031f 	and.w	r3, r3, #31
 c006144:	4413      	add	r3, r2
 c006146:	2b00      	cmp	r3, #0
 c006148:	d001      	beq.n	c00614e <HAL_GTZC_TZIC_EnableIT+0x3a>
  {
    return HAL_ERROR;
 c00614a:	2301      	movs	r3, #1
 c00614c:	e022      	b.n	c006194 <HAL_GTZC_TZIC_EnableIT+0x80>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c00614e:	687b      	ldr	r3, [r7, #4]
 c006150:	f003 0320 	and.w	r3, r3, #32
 c006154:	2b00      	cmp	r3, #0
 c006156:	d00a      	beq.n	c00616e <HAL_GTZC_TZIC_EnableIT+0x5a>
  {
    /* same configuration is applied to all peripherals */
    WRITE_REG(GTZC_TZIC->IER1, TZIC_IER1_ALL);
 c006158:	4b11      	ldr	r3, [pc, #68]	; (c0061a0 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c00615a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c00615e:	601a      	str	r2, [r3, #0]
    WRITE_REG(GTZC_TZIC->IER2, TZIC_IER2_ALL);
 c006160:	4b0f      	ldr	r3, [pc, #60]	; (c0061a0 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c006162:	4a10      	ldr	r2, [pc, #64]	; (c0061a4 <HAL_GTZC_TZIC_EnableIT+0x90>)
 c006164:	605a      	str	r2, [r3, #4]
    WRITE_REG(GTZC_TZIC->IER3, TZIC_IER3_ALL);
 c006166:	4b0e      	ldr	r3, [pc, #56]	; (c0061a0 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c006168:	22ff      	movs	r2, #255	; 0xff
 c00616a:	609a      	str	r2, [r3, #8]
 c00616c:	e011      	b.n	c006192 <HAL_GTZC_TZIC_EnableIT+0x7e>
  }
  else
  {
    /* common case where only one peripheral is configured */
    register_address = (uint32_t) &(GTZC_TZIC->IER1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c00616e:	687b      	ldr	r3, [r7, #4]
 c006170:	0f1b      	lsrs	r3, r3, #28
 c006172:	f103 53a0 	add.w	r3, r3, #335544320	; 0x14000000
 c006176:	f503 434a 	add.w	r3, r3, #51712	; 0xca00
 c00617a:	009b      	lsls	r3, r3, #2
 c00617c:	60fb      	str	r3, [r7, #12]
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c00617e:	68fb      	ldr	r3, [r7, #12]
 c006180:	6819      	ldr	r1, [r3, #0]
 c006182:	687b      	ldr	r3, [r7, #4]
 c006184:	f003 031f 	and.w	r3, r3, #31
 c006188:	2201      	movs	r2, #1
 c00618a:	409a      	lsls	r2, r3
 c00618c:	68fb      	ldr	r3, [r7, #12]
 c00618e:	430a      	orrs	r2, r1
 c006190:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 c006192:	2300      	movs	r3, #0
}
 c006194:	4618      	mov	r0, r3
 c006196:	3714      	adds	r7, #20
 c006198:	46bd      	mov	sp, r7
 c00619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00619e:	4770      	bx	lr
 c0061a0:	50032800 	.word	0x50032800
 c0061a4:	3fff6fff 	.word	0x3fff6fff

0c0061a8 <HAL_GTZC_IRQHandler>:
/**
  * @brief  This function handles GTZC interrupt request.
  * @retval None.
  */
void HAL_GTZC_IRQHandler(void)
{
 c0061a8:	b580      	push	{r7, lr}
 c0061aa:	b084      	sub	sp, #16
 c0061ac:	af00      	add	r7, sp, #0
  uint32_t flag;
  uint32_t ier_itsources;
  uint32_t sr_flags;

  /* Get current IT Flags and IT sources value on 1st register */
  ier_itsources = READ_REG(GTZC_TZIC->IER1);
 c0061ae:	4b3f      	ldr	r3, [pc, #252]	; (c0062ac <HAL_GTZC_IRQHandler+0x104>)
 c0061b0:	681b      	ldr	r3, [r3, #0]
 c0061b2:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR1);
 c0061b4:	4b3d      	ldr	r3, [pc, #244]	; (c0062ac <HAL_GTZC_IRQHandler+0x104>)
 c0061b6:	691b      	ldr	r3, [r3, #16]
 c0061b8:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c0061ba:	68ba      	ldr	r2, [r7, #8]
 c0061bc:	687b      	ldr	r3, [r7, #4]
 c0061be:	4013      	ands	r3, r2
 c0061c0:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c0061c2:	683b      	ldr	r3, [r7, #0]
 c0061c4:	2b00      	cmp	r3, #0
 c0061c6:	d019      	beq.n	c0061fc <HAL_GTZC_IRQHandler+0x54>
  {
    WRITE_REG(GTZC_TZIC->FCR1, flag);
 c0061c8:	4a38      	ldr	r2, [pc, #224]	; (c0062ac <HAL_GTZC_IRQHandler+0x104>)
 c0061ca:	683b      	ldr	r3, [r7, #0]
 c0061cc:	6213      	str	r3, [r2, #32]

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c0061ce:	2300      	movs	r3, #0
 c0061d0:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0061d2:	e00d      	b.n	c0061f0 <HAL_GTZC_IRQHandler+0x48>
    {
      if ((flag & (1UL << position)) != 0U)
 c0061d4:	683a      	ldr	r2, [r7, #0]
 c0061d6:	68fb      	ldr	r3, [r7, #12]
 c0061d8:	fa22 f303 	lsr.w	r3, r2, r3
 c0061dc:	f003 0301 	and.w	r3, r3, #1
 c0061e0:	2b00      	cmp	r3, #0
 c0061e2:	d002      	beq.n	c0061ea <HAL_GTZC_IRQHandler+0x42>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG1 | position);
 c0061e4:	68f8      	ldr	r0, [r7, #12]
 c0061e6:	f000 f863 	bl	c0062b0 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c0061ea:	68fb      	ldr	r3, [r7, #12]
 c0061ec:	3301      	adds	r3, #1
 c0061ee:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0061f0:	683a      	ldr	r2, [r7, #0]
 c0061f2:	68fb      	ldr	r3, [r7, #12]
 c0061f4:	fa22 f303 	lsr.w	r3, r2, r3
 c0061f8:	2b00      	cmp	r3, #0
 c0061fa:	d1eb      	bne.n	c0061d4 <HAL_GTZC_IRQHandler+0x2c>
    }
  }

  /* Get current IT Flags and IT sources value on 2nd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER2);
 c0061fc:	4b2b      	ldr	r3, [pc, #172]	; (c0062ac <HAL_GTZC_IRQHandler+0x104>)
 c0061fe:	685b      	ldr	r3, [r3, #4]
 c006200:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR2);
 c006202:	4b2a      	ldr	r3, [pc, #168]	; (c0062ac <HAL_GTZC_IRQHandler+0x104>)
 c006204:	695b      	ldr	r3, [r3, #20]
 c006206:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c006208:	68ba      	ldr	r2, [r7, #8]
 c00620a:	687b      	ldr	r3, [r7, #4]
 c00620c:	4013      	ands	r3, r2
 c00620e:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c006210:	683b      	ldr	r3, [r7, #0]
 c006212:	2b00      	cmp	r3, #0
 c006214:	d01c      	beq.n	c006250 <HAL_GTZC_IRQHandler+0xa8>
  {
    WRITE_REG(GTZC_TZIC->FCR2, flag);
 c006216:	4a25      	ldr	r2, [pc, #148]	; (c0062ac <HAL_GTZC_IRQHandler+0x104>)
 c006218:	683b      	ldr	r3, [r7, #0]
 c00621a:	6253      	str	r3, [r2, #36]	; 0x24

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c00621c:	2300      	movs	r3, #0
 c00621e:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c006220:	e010      	b.n	c006244 <HAL_GTZC_IRQHandler+0x9c>
    {
      if ((flag & (1UL << position)) != 0U)
 c006222:	683a      	ldr	r2, [r7, #0]
 c006224:	68fb      	ldr	r3, [r7, #12]
 c006226:	fa22 f303 	lsr.w	r3, r2, r3
 c00622a:	f003 0301 	and.w	r3, r3, #1
 c00622e:	2b00      	cmp	r3, #0
 c006230:	d005      	beq.n	c00623e <HAL_GTZC_IRQHandler+0x96>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG2 | position);
 c006232:	68fb      	ldr	r3, [r7, #12]
 c006234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c006238:	4618      	mov	r0, r3
 c00623a:	f000 f839 	bl	c0062b0 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c00623e:	68fb      	ldr	r3, [r7, #12]
 c006240:	3301      	adds	r3, #1
 c006242:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c006244:	683a      	ldr	r2, [r7, #0]
 c006246:	68fb      	ldr	r3, [r7, #12]
 c006248:	fa22 f303 	lsr.w	r3, r2, r3
 c00624c:	2b00      	cmp	r3, #0
 c00624e:	d1e8      	bne.n	c006222 <HAL_GTZC_IRQHandler+0x7a>
    }
  }

  /* Get current IT Flags and IT sources value on 3rd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER3);
 c006250:	4b16      	ldr	r3, [pc, #88]	; (c0062ac <HAL_GTZC_IRQHandler+0x104>)
 c006252:	689b      	ldr	r3, [r3, #8]
 c006254:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR3);
 c006256:	4b15      	ldr	r3, [pc, #84]	; (c0062ac <HAL_GTZC_IRQHandler+0x104>)
 c006258:	699b      	ldr	r3, [r3, #24]
 c00625a:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c00625c:	68ba      	ldr	r2, [r7, #8]
 c00625e:	687b      	ldr	r3, [r7, #4]
 c006260:	4013      	ands	r3, r2
 c006262:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c006264:	683b      	ldr	r3, [r7, #0]
 c006266:	2b00      	cmp	r3, #0
 c006268:	d01c      	beq.n	c0062a4 <HAL_GTZC_IRQHandler+0xfc>
  {
    WRITE_REG(GTZC_TZIC->FCR3, flag);
 c00626a:	4a10      	ldr	r2, [pc, #64]	; (c0062ac <HAL_GTZC_IRQHandler+0x104>)
 c00626c:	683b      	ldr	r3, [r7, #0]
 c00626e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c006270:	2300      	movs	r3, #0
 c006272:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c006274:	e010      	b.n	c006298 <HAL_GTZC_IRQHandler+0xf0>
    {
      if ((flag & (1UL << position)) != 0U)
 c006276:	683a      	ldr	r2, [r7, #0]
 c006278:	68fb      	ldr	r3, [r7, #12]
 c00627a:	fa22 f303 	lsr.w	r3, r2, r3
 c00627e:	f003 0301 	and.w	r3, r3, #1
 c006282:	2b00      	cmp	r3, #0
 c006284:	d005      	beq.n	c006292 <HAL_GTZC_IRQHandler+0xea>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG3 | position);
 c006286:	68fb      	ldr	r3, [r7, #12]
 c006288:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 c00628c:	4618      	mov	r0, r3
 c00628e:	f000 f80f 	bl	c0062b0 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c006292:	68fb      	ldr	r3, [r7, #12]
 c006294:	3301      	adds	r3, #1
 c006296:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c006298:	683a      	ldr	r2, [r7, #0]
 c00629a:	68fb      	ldr	r3, [r7, #12]
 c00629c:	fa22 f303 	lsr.w	r3, r2, r3
 c0062a0:	2b00      	cmp	r3, #0
 c0062a2:	d1e8      	bne.n	c006276 <HAL_GTZC_IRQHandler+0xce>
    }
  }
}
 c0062a4:	bf00      	nop
 c0062a6:	3710      	adds	r7, #16
 c0062a8:	46bd      	mov	sp, r7
 c0062aa:	bd80      	pop	{r7, pc}
 c0062ac:	50032800 	.word	0x50032800

0c0062b0 <HAL_GTZC_TZIC_Callback>:
  * @param  PeriphId Peripheral identifier triggering the illegal access.
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId
  * @retval None.
  */
__weak void HAL_GTZC_TZIC_Callback(uint32_t PeriphId)
{
 c0062b0:	b480      	push	{r7}
 c0062b2:	b083      	sub	sp, #12
 c0062b4:	af00      	add	r7, sp, #0
 c0062b6:	6078      	str	r0, [r7, #4]
  UNUSED(PeriphId);

  /* NOTE: This function should not be modified. When the callback is needed,
   * the HAL_GTZC_TZIC_Callback is to be implemented in the user file
   */
}
 c0062b8:	bf00      	nop
 c0062ba:	370c      	adds	r7, #12
 c0062bc:	46bd      	mov	sp, r7
 c0062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0062c2:	4770      	bx	lr

0c0062c4 <HAL_PWR_ConfigAttributes>:
  *            @arg @ref PWR_SEC          Secure-only access
  *            @arg @ref PWR_NSEC         Secure/Non-secure access
  * @retval None
  */
void HAL_PWR_ConfigAttributes(uint32_t Item, uint32_t Attributes)
{
 c0062c4:	b480      	push	{r7}
 c0062c6:	b083      	sub	sp, #12
 c0062c8:	af00      	add	r7, sp, #0
 c0062ca:	6078      	str	r0, [r7, #4]
 c0062cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_PWR_ITEMS_ATTRIBUTES(Item));
  assert_param(IS_PWR_ATTRIBUTES(Attributes));

  /* Privilege/non-privilege attribute */
  if ((Attributes & PWR_PRIV) == PWR_PRIV)
 c0062ce:	683a      	ldr	r2, [r7, #0]
 c0062d0:	f240 2302 	movw	r3, #514	; 0x202
 c0062d4:	4013      	ands	r3, r2
 c0062d6:	f240 2202 	movw	r2, #514	; 0x202
 c0062da:	4293      	cmp	r3, r2
 c0062dc:	d108      	bne.n	c0062f0 <HAL_PWR_ConfigAttributes+0x2c>
  {
    SET_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_PRIV);
 c0062de:	4b1b      	ldr	r3, [pc, #108]	; (c00634c <HAL_PWR_ConfigAttributes+0x88>)
 c0062e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0062e4:	4a19      	ldr	r2, [pc, #100]	; (c00634c <HAL_PWR_ConfigAttributes+0x88>)
 c0062e6:	f043 0301 	orr.w	r3, r3, #1
 c0062ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 c0062ee:	e00c      	b.n	c00630a <HAL_PWR_ConfigAttributes+0x46>
  }
  else if ((Attributes & PWR_NPRIV) == PWR_NPRIV)
 c0062f0:	683b      	ldr	r3, [r7, #0]
 c0062f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c0062f6:	2b00      	cmp	r3, #0
 c0062f8:	d007      	beq.n	c00630a <HAL_PWR_ConfigAttributes+0x46>
  {
    CLEAR_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_PRIV);
 c0062fa:	4b14      	ldr	r3, [pc, #80]	; (c00634c <HAL_PWR_ConfigAttributes+0x88>)
 c0062fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c006300:	4a12      	ldr	r2, [pc, #72]	; (c00634c <HAL_PWR_ConfigAttributes+0x88>)
 c006302:	f023 0301 	bic.w	r3, r3, #1
 c006306:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80


#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)

  /* Secure/non-secure attribute */
  if ((Attributes & PWR_SEC) == PWR_SEC)
 c00630a:	683a      	ldr	r2, [r7, #0]
 c00630c:	f240 1301 	movw	r3, #257	; 0x101
 c006310:	4013      	ands	r3, r2
 c006312:	f240 1201 	movw	r2, #257	; 0x101
 c006316:	4293      	cmp	r3, r2
 c006318:	d106      	bne.n	c006328 <HAL_PWR_ConfigAttributes+0x64>
  {
    SET_BIT(PWR_S->SECCFGR, Item);
 c00631a:	4b0c      	ldr	r3, [pc, #48]	; (c00634c <HAL_PWR_ConfigAttributes+0x88>)
 c00631c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 c00631e:	490b      	ldr	r1, [pc, #44]	; (c00634c <HAL_PWR_ConfigAttributes+0x88>)
 c006320:	687b      	ldr	r3, [r7, #4]
 c006322:	4313      	orrs	r3, r2
 c006324:	678b      	str	r3, [r1, #120]	; 0x78
  {
    /* do nothing */
  }

#endif /* __ARM_FEATURE_CMSE */
}
 c006326:	e00b      	b.n	c006340 <HAL_PWR_ConfigAttributes+0x7c>
  else if ((Attributes & PWR_NSEC) == PWR_NSEC)
 c006328:	683b      	ldr	r3, [r7, #0]
 c00632a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00632e:	2b00      	cmp	r3, #0
 c006330:	d006      	beq.n	c006340 <HAL_PWR_ConfigAttributes+0x7c>
    CLEAR_BIT(PWR_S->SECCFGR, Item);
 c006332:	4b06      	ldr	r3, [pc, #24]	; (c00634c <HAL_PWR_ConfigAttributes+0x88>)
 c006334:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 c006336:	687b      	ldr	r3, [r7, #4]
 c006338:	43db      	mvns	r3, r3
 c00633a:	4904      	ldr	r1, [pc, #16]	; (c00634c <HAL_PWR_ConfigAttributes+0x88>)
 c00633c:	4013      	ands	r3, r2
 c00633e:	678b      	str	r3, [r1, #120]	; 0x78
}
 c006340:	bf00      	nop
 c006342:	370c      	adds	r7, #12
 c006344:	46bd      	mov	sp, r7
 c006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00634a:	4770      	bx	lr
 c00634c:	50007000 	.word	0x50007000

0c006350 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c006350:	b480      	push	{r7}
 c006352:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 c006354:	4b04      	ldr	r3, [pc, #16]	; (c006368 <HAL_PWREx_GetVoltageRange+0x18>)
 c006356:	681b      	ldr	r3, [r3, #0]
 c006358:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 c00635c:	4618      	mov	r0, r3
 c00635e:	46bd      	mov	sp, r7
 c006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006364:	4770      	bx	lr
 c006366:	bf00      	nop
 c006368:	50007000 	.word	0x50007000

0c00636c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c00636c:	b580      	push	{r7, lr}
 c00636e:	b084      	sub	sp, #16
 c006370:	af00      	add	r7, sp, #0
 c006372:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c006374:	4b27      	ldr	r3, [pc, #156]	; (c006414 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c006376:	681b      	ldr	r3, [r3, #0]
 c006378:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 c00637c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 c00637e:	f000 f871 	bl	c006464 <HAL_PWREx_SMPS_GetEffectiveMode>
 c006382:	4603      	mov	r3, r0
 c006384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c006388:	d101      	bne.n	c00638e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 c00638a:	2301      	movs	r3, #1
 c00638c:	e03e      	b.n	c00640c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c00638e:	4b21      	ldr	r3, [pc, #132]	; (c006414 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c006390:	68db      	ldr	r3, [r3, #12]
 c006392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c006396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c00639a:	d101      	bne.n	c0063a0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 c00639c:	2301      	movs	r3, #1
 c00639e:	e035      	b.n	c00640c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c0063a0:	68ba      	ldr	r2, [r7, #8]
 c0063a2:	687b      	ldr	r3, [r7, #4]
 c0063a4:	429a      	cmp	r2, r3
 c0063a6:	d101      	bne.n	c0063ac <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 c0063a8:	2300      	movs	r3, #0
 c0063aa:	e02f      	b.n	c00640c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c0063ac:	4b19      	ldr	r3, [pc, #100]	; (c006414 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0063ae:	681b      	ldr	r3, [r3, #0]
 c0063b0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 c0063b4:	4917      	ldr	r1, [pc, #92]	; (c006414 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0063b6:	687b      	ldr	r3, [r7, #4]
 c0063b8:	4313      	orrs	r3, r2
 c0063ba:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c0063bc:	4b16      	ldr	r3, [pc, #88]	; (c006418 <HAL_PWREx_ControlVoltageScaling+0xac>)
 c0063be:	681b      	ldr	r3, [r3, #0]
 c0063c0:	095b      	lsrs	r3, r3, #5
 c0063c2:	4a16      	ldr	r2, [pc, #88]	; (c00641c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 c0063c4:	fba2 2303 	umull	r2, r3, r2, r3
 c0063c8:	09db      	lsrs	r3, r3, #7
 c0063ca:	2232      	movs	r2, #50	; 0x32
 c0063cc:	fb02 f303 	mul.w	r3, r2, r3
 c0063d0:	4a13      	ldr	r2, [pc, #76]	; (c006420 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 c0063d2:	fba2 2303 	umull	r2, r3, r2, r3
 c0063d6:	08db      	lsrs	r3, r3, #3
 c0063d8:	3301      	adds	r3, #1
 c0063da:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c0063dc:	e002      	b.n	c0063e4 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 c0063de:	68fb      	ldr	r3, [r7, #12]
 c0063e0:	3b01      	subs	r3, #1
 c0063e2:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c0063e4:	4b0b      	ldr	r3, [pc, #44]	; (c006414 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0063e6:	695b      	ldr	r3, [r3, #20]
 c0063e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0063ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0063f0:	d102      	bne.n	c0063f8 <HAL_PWREx_ControlVoltageScaling+0x8c>
 c0063f2:	68fb      	ldr	r3, [r7, #12]
 c0063f4:	2b00      	cmp	r3, #0
 c0063f6:	d1f2      	bne.n	c0063de <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c0063f8:	4b06      	ldr	r3, [pc, #24]	; (c006414 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0063fa:	695b      	ldr	r3, [r3, #20]
 c0063fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c006400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c006404:	d101      	bne.n	c00640a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 c006406:	2303      	movs	r3, #3
 c006408:	e000      	b.n	c00640c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 c00640a:	2300      	movs	r3, #0
}
 c00640c:	4618      	mov	r0, r3
 c00640e:	3710      	adds	r7, #16
 c006410:	46bd      	mov	sp, r7
 c006412:	bd80      	pop	{r7, pc}
 c006414:	50007000 	.word	0x50007000
 c006418:	30000064 	.word	0x30000064
 c00641c:	0a7c5ac5 	.word	0x0a7c5ac5
 c006420:	cccccccd 	.word	0xcccccccd

0c006424 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 c006424:	b480      	push	{r7}
 c006426:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 c006428:	4b05      	ldr	r3, [pc, #20]	; (c006440 <HAL_PWREx_EnableVddIO2+0x1c>)
 c00642a:	685b      	ldr	r3, [r3, #4]
 c00642c:	4a04      	ldr	r2, [pc, #16]	; (c006440 <HAL_PWREx_EnableVddIO2+0x1c>)
 c00642e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 c006432:	6053      	str	r3, [r2, #4]
}
 c006434:	bf00      	nop
 c006436:	46bd      	mov	sp, r7
 c006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00643c:	4770      	bx	lr
 c00643e:	bf00      	nop
 c006440:	50007000 	.word	0x50007000

0c006444 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c006444:	b480      	push	{r7}
 c006446:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c006448:	4b05      	ldr	r3, [pc, #20]	; (c006460 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c00644a:	689b      	ldr	r3, [r3, #8]
 c00644c:	4a04      	ldr	r2, [pc, #16]	; (c006460 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c00644e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c006452:	6093      	str	r3, [r2, #8]
}
 c006454:	bf00      	nop
 c006456:	46bd      	mov	sp, r7
 c006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00645c:	4770      	bx	lr
 c00645e:	bf00      	nop
 c006460:	50007000 	.word	0x50007000

0c006464 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 c006464:	b480      	push	{r7}
 c006466:	b083      	sub	sp, #12
 c006468:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c00646a:	4b0f      	ldr	r3, [pc, #60]	; (c0064a8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 c00646c:	691b      	ldr	r3, [r3, #16]
 c00646e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 c006470:	683b      	ldr	r3, [r7, #0]
 c006472:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c006476:	2b00      	cmp	r3, #0
 c006478:	d003      	beq.n	c006482 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 c00647a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c00647e:	607b      	str	r3, [r7, #4]
 c006480:	e00a      	b.n	c006498 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c006482:	683b      	ldr	r3, [r7, #0]
 c006484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c006488:	2b00      	cmp	r3, #0
 c00648a:	d103      	bne.n	c006494 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 c00648c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c006490:	607b      	str	r3, [r7, #4]
 c006492:	e001      	b.n	c006498 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 c006494:	2300      	movs	r3, #0
 c006496:	607b      	str	r3, [r7, #4]
  }

  return mode;
 c006498:	687b      	ldr	r3, [r7, #4]
}
 c00649a:	4618      	mov	r0, r3
 c00649c:	370c      	adds	r7, #12
 c00649e:	46bd      	mov	sp, r7
 c0064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0064a4:	4770      	bx	lr
 c0064a6:	bf00      	nop
 c0064a8:	50007000 	.word	0x50007000

0c0064ac <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 c0064ac:	b580      	push	{r7, lr}
 c0064ae:	b088      	sub	sp, #32
 c0064b0:	af00      	add	r7, sp, #0
 c0064b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 c0064b4:	687b      	ldr	r3, [r7, #4]
 c0064b6:	2b00      	cmp	r3, #0
 c0064b8:	d102      	bne.n	c0064c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c0064ba:	2301      	movs	r3, #1
 c0064bc:	f000 bcd0 	b.w	c006e60 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0064c0:	4b99      	ldr	r3, [pc, #612]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c0064c2:	689b      	ldr	r3, [r3, #8]
 c0064c4:	f003 030c 	and.w	r3, r3, #12
 c0064c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c0064ca:	4b97      	ldr	r3, [pc, #604]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c0064cc:	68db      	ldr	r3, [r3, #12]
 c0064ce:	f003 0303 	and.w	r3, r3, #3
 c0064d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c0064d4:	687b      	ldr	r3, [r7, #4]
 c0064d6:	681b      	ldr	r3, [r3, #0]
 c0064d8:	f003 0310 	and.w	r3, r3, #16
 c0064dc:	2b00      	cmp	r3, #0
 c0064de:	f000 80e9 	beq.w	c0066b4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c0064e2:	69bb      	ldr	r3, [r7, #24]
 c0064e4:	2b00      	cmp	r3, #0
 c0064e6:	d006      	beq.n	c0064f6 <HAL_RCC_OscConfig+0x4a>
 c0064e8:	69bb      	ldr	r3, [r7, #24]
 c0064ea:	2b0c      	cmp	r3, #12
 c0064ec:	f040 8083 	bne.w	c0065f6 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c0064f0:	697b      	ldr	r3, [r7, #20]
 c0064f2:	2b01      	cmp	r3, #1
 c0064f4:	d17f      	bne.n	c0065f6 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c0064f6:	4b8c      	ldr	r3, [pc, #560]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c0064f8:	681b      	ldr	r3, [r3, #0]
 c0064fa:	f003 0302 	and.w	r3, r3, #2
 c0064fe:	2b00      	cmp	r3, #0
 c006500:	d006      	beq.n	c006510 <HAL_RCC_OscConfig+0x64>
 c006502:	687b      	ldr	r3, [r7, #4]
 c006504:	69db      	ldr	r3, [r3, #28]
 c006506:	2b00      	cmp	r3, #0
 c006508:	d102      	bne.n	c006510 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 c00650a:	2301      	movs	r3, #1
 c00650c:	f000 bca8 	b.w	c006e60 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c006510:	687b      	ldr	r3, [r7, #4]
 c006512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c006514:	4b84      	ldr	r3, [pc, #528]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c006516:	681b      	ldr	r3, [r3, #0]
 c006518:	f003 0308 	and.w	r3, r3, #8
 c00651c:	2b00      	cmp	r3, #0
 c00651e:	d004      	beq.n	c00652a <HAL_RCC_OscConfig+0x7e>
 c006520:	4b81      	ldr	r3, [pc, #516]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c006522:	681b      	ldr	r3, [r3, #0]
 c006524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c006528:	e005      	b.n	c006536 <HAL_RCC_OscConfig+0x8a>
 c00652a:	4b7f      	ldr	r3, [pc, #508]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c00652c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c006530:	091b      	lsrs	r3, r3, #4
 c006532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c006536:	4293      	cmp	r3, r2
 c006538:	d224      	bcs.n	c006584 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c00653a:	687b      	ldr	r3, [r7, #4]
 c00653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00653e:	4618      	mov	r0, r3
 c006540:	f000 fe96 	bl	c007270 <RCC_SetFlashLatencyFromMSIRange>
 c006544:	4603      	mov	r3, r0
 c006546:	2b00      	cmp	r3, #0
 c006548:	d002      	beq.n	c006550 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 c00654a:	2301      	movs	r3, #1
 c00654c:	f000 bc88 	b.w	c006e60 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c006550:	4b75      	ldr	r3, [pc, #468]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c006552:	681b      	ldr	r3, [r3, #0]
 c006554:	4a74      	ldr	r2, [pc, #464]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c006556:	f043 0308 	orr.w	r3, r3, #8
 c00655a:	6013      	str	r3, [r2, #0]
 c00655c:	4b72      	ldr	r3, [pc, #456]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c00655e:	681b      	ldr	r3, [r3, #0]
 c006560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c006564:	687b      	ldr	r3, [r7, #4]
 c006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c006568:	496f      	ldr	r1, [pc, #444]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c00656a:	4313      	orrs	r3, r2
 c00656c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c00656e:	4b6e      	ldr	r3, [pc, #440]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c006570:	685b      	ldr	r3, [r3, #4]
 c006572:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c006576:	687b      	ldr	r3, [r7, #4]
 c006578:	6a1b      	ldr	r3, [r3, #32]
 c00657a:	021b      	lsls	r3, r3, #8
 c00657c:	496a      	ldr	r1, [pc, #424]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c00657e:	4313      	orrs	r3, r2
 c006580:	604b      	str	r3, [r1, #4]
 c006582:	e026      	b.n	c0065d2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c006584:	4b68      	ldr	r3, [pc, #416]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c006586:	681b      	ldr	r3, [r3, #0]
 c006588:	4a67      	ldr	r2, [pc, #412]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c00658a:	f043 0308 	orr.w	r3, r3, #8
 c00658e:	6013      	str	r3, [r2, #0]
 c006590:	4b65      	ldr	r3, [pc, #404]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c006592:	681b      	ldr	r3, [r3, #0]
 c006594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c006598:	687b      	ldr	r3, [r7, #4]
 c00659a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00659c:	4962      	ldr	r1, [pc, #392]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c00659e:	4313      	orrs	r3, r2
 c0065a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c0065a2:	4b61      	ldr	r3, [pc, #388]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c0065a4:	685b      	ldr	r3, [r3, #4]
 c0065a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c0065aa:	687b      	ldr	r3, [r7, #4]
 c0065ac:	6a1b      	ldr	r3, [r3, #32]
 c0065ae:	021b      	lsls	r3, r3, #8
 c0065b0:	495d      	ldr	r1, [pc, #372]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c0065b2:	4313      	orrs	r3, r2
 c0065b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0065b6:	69bb      	ldr	r3, [r7, #24]
 c0065b8:	2b00      	cmp	r3, #0
 c0065ba:	d10a      	bne.n	c0065d2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c0065bc:	687b      	ldr	r3, [r7, #4]
 c0065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0065c0:	4618      	mov	r0, r3
 c0065c2:	f000 fe55 	bl	c007270 <RCC_SetFlashLatencyFromMSIRange>
 c0065c6:	4603      	mov	r3, r0
 c0065c8:	2b00      	cmp	r3, #0
 c0065ca:	d002      	beq.n	c0065d2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 c0065cc:	2301      	movs	r3, #1
 c0065ce:	f000 bc47 	b.w	c006e60 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c0065d2:	f000 fe11 	bl	c0071f8 <HAL_RCC_GetHCLKFreq>
 c0065d6:	4603      	mov	r3, r0
 c0065d8:	4a54      	ldr	r2, [pc, #336]	; (c00672c <HAL_RCC_OscConfig+0x280>)
 c0065da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c0065dc:	4b54      	ldr	r3, [pc, #336]	; (c006730 <HAL_RCC_OscConfig+0x284>)
 c0065de:	681b      	ldr	r3, [r3, #0]
 c0065e0:	4618      	mov	r0, r3
 c0065e2:	f7fe fec1 	bl	c005368 <HAL_InitTick>
 c0065e6:	4603      	mov	r3, r0
 c0065e8:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 c0065ea:	7bfb      	ldrb	r3, [r7, #15]
 c0065ec:	2b00      	cmp	r3, #0
 c0065ee:	d060      	beq.n	c0066b2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 c0065f0:	7bfb      	ldrb	r3, [r7, #15]
 c0065f2:	f000 bc35 	b.w	c006e60 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c0065f6:	687b      	ldr	r3, [r7, #4]
 c0065f8:	69db      	ldr	r3, [r3, #28]
 c0065fa:	2b00      	cmp	r3, #0
 c0065fc:	d039      	beq.n	c006672 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 c0065fe:	4b4a      	ldr	r3, [pc, #296]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c006600:	681b      	ldr	r3, [r3, #0]
 c006602:	4a49      	ldr	r2, [pc, #292]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c006604:	f043 0301 	orr.w	r3, r3, #1
 c006608:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c00660a:	f7fe fefd 	bl	c005408 <HAL_GetTick>
 c00660e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c006610:	e00f      	b.n	c006632 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c006612:	f7fe fef9 	bl	c005408 <HAL_GetTick>
 c006616:	4602      	mov	r2, r0
 c006618:	693b      	ldr	r3, [r7, #16]
 c00661a:	1ad3      	subs	r3, r2, r3
 c00661c:	2b02      	cmp	r3, #2
 c00661e:	d908      	bls.n	c006632 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c006620:	4b41      	ldr	r3, [pc, #260]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c006622:	681b      	ldr	r3, [r3, #0]
 c006624:	f003 0302 	and.w	r3, r3, #2
 c006628:	2b00      	cmp	r3, #0
 c00662a:	d102      	bne.n	c006632 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 c00662c:	2303      	movs	r3, #3
 c00662e:	f000 bc17 	b.w	c006e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c006632:	4b3d      	ldr	r3, [pc, #244]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c006634:	681b      	ldr	r3, [r3, #0]
 c006636:	f003 0302 	and.w	r3, r3, #2
 c00663a:	2b00      	cmp	r3, #0
 c00663c:	d0e9      	beq.n	c006612 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c00663e:	4b3a      	ldr	r3, [pc, #232]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c006640:	681b      	ldr	r3, [r3, #0]
 c006642:	4a39      	ldr	r2, [pc, #228]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c006644:	f043 0308 	orr.w	r3, r3, #8
 c006648:	6013      	str	r3, [r2, #0]
 c00664a:	4b37      	ldr	r3, [pc, #220]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c00664c:	681b      	ldr	r3, [r3, #0]
 c00664e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c006652:	687b      	ldr	r3, [r7, #4]
 c006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c006656:	4934      	ldr	r1, [pc, #208]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c006658:	4313      	orrs	r3, r2
 c00665a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c00665c:	4b32      	ldr	r3, [pc, #200]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c00665e:	685b      	ldr	r3, [r3, #4]
 c006660:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c006664:	687b      	ldr	r3, [r7, #4]
 c006666:	6a1b      	ldr	r3, [r3, #32]
 c006668:	021b      	lsls	r3, r3, #8
 c00666a:	492f      	ldr	r1, [pc, #188]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c00666c:	4313      	orrs	r3, r2
 c00666e:	604b      	str	r3, [r1, #4]
 c006670:	e020      	b.n	c0066b4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 c006672:	4b2d      	ldr	r3, [pc, #180]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c006674:	681b      	ldr	r3, [r3, #0]
 c006676:	4a2c      	ldr	r2, [pc, #176]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c006678:	f023 0301 	bic.w	r3, r3, #1
 c00667c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c00667e:	f7fe fec3 	bl	c005408 <HAL_GetTick>
 c006682:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c006684:	e00e      	b.n	c0066a4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c006686:	f7fe febf 	bl	c005408 <HAL_GetTick>
 c00668a:	4602      	mov	r2, r0
 c00668c:	693b      	ldr	r3, [r7, #16]
 c00668e:	1ad3      	subs	r3, r2, r3
 c006690:	2b02      	cmp	r3, #2
 c006692:	d907      	bls.n	c0066a4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c006694:	4b24      	ldr	r3, [pc, #144]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c006696:	681b      	ldr	r3, [r3, #0]
 c006698:	f003 0302 	and.w	r3, r3, #2
 c00669c:	2b00      	cmp	r3, #0
 c00669e:	d001      	beq.n	c0066a4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 c0066a0:	2303      	movs	r3, #3
 c0066a2:	e3dd      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c0066a4:	4b20      	ldr	r3, [pc, #128]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c0066a6:	681b      	ldr	r3, [r3, #0]
 c0066a8:	f003 0302 	and.w	r3, r3, #2
 c0066ac:	2b00      	cmp	r3, #0
 c0066ae:	d1ea      	bne.n	c006686 <HAL_RCC_OscConfig+0x1da>
 c0066b0:	e000      	b.n	c0066b4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c0066b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c0066b4:	687b      	ldr	r3, [r7, #4]
 c0066b6:	681b      	ldr	r3, [r3, #0]
 c0066b8:	f003 0301 	and.w	r3, r3, #1
 c0066bc:	2b00      	cmp	r3, #0
 c0066be:	d07e      	beq.n	c0067be <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c0066c0:	69bb      	ldr	r3, [r7, #24]
 c0066c2:	2b08      	cmp	r3, #8
 c0066c4:	d005      	beq.n	c0066d2 <HAL_RCC_OscConfig+0x226>
 c0066c6:	69bb      	ldr	r3, [r7, #24]
 c0066c8:	2b0c      	cmp	r3, #12
 c0066ca:	d10e      	bne.n	c0066ea <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c0066cc:	697b      	ldr	r3, [r7, #20]
 c0066ce:	2b03      	cmp	r3, #3
 c0066d0:	d10b      	bne.n	c0066ea <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c0066d2:	4b15      	ldr	r3, [pc, #84]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c0066d4:	681b      	ldr	r3, [r3, #0]
 c0066d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0066da:	2b00      	cmp	r3, #0
 c0066dc:	d06e      	beq.n	c0067bc <HAL_RCC_OscConfig+0x310>
 c0066de:	687b      	ldr	r3, [r7, #4]
 c0066e0:	685b      	ldr	r3, [r3, #4]
 c0066e2:	2b00      	cmp	r3, #0
 c0066e4:	d16a      	bne.n	c0067bc <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 c0066e6:	2301      	movs	r3, #1
 c0066e8:	e3ba      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c0066ea:	687b      	ldr	r3, [r7, #4]
 c0066ec:	685b      	ldr	r3, [r3, #4]
 c0066ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c0066f2:	d106      	bne.n	c006702 <HAL_RCC_OscConfig+0x256>
 c0066f4:	4b0c      	ldr	r3, [pc, #48]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c0066f6:	681b      	ldr	r3, [r3, #0]
 c0066f8:	4a0b      	ldr	r2, [pc, #44]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c0066fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0066fe:	6013      	str	r3, [r2, #0]
 c006700:	e024      	b.n	c00674c <HAL_RCC_OscConfig+0x2a0>
 c006702:	687b      	ldr	r3, [r7, #4]
 c006704:	685b      	ldr	r3, [r3, #4]
 c006706:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c00670a:	d113      	bne.n	c006734 <HAL_RCC_OscConfig+0x288>
 c00670c:	4b06      	ldr	r3, [pc, #24]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c00670e:	681b      	ldr	r3, [r3, #0]
 c006710:	4a05      	ldr	r2, [pc, #20]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c006712:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c006716:	6013      	str	r3, [r2, #0]
 c006718:	4b03      	ldr	r3, [pc, #12]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c00671a:	681b      	ldr	r3, [r3, #0]
 c00671c:	4a02      	ldr	r2, [pc, #8]	; (c006728 <HAL_RCC_OscConfig+0x27c>)
 c00671e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c006722:	6013      	str	r3, [r2, #0]
 c006724:	e012      	b.n	c00674c <HAL_RCC_OscConfig+0x2a0>
 c006726:	bf00      	nop
 c006728:	50021000 	.word	0x50021000
 c00672c:	30000064 	.word	0x30000064
 c006730:	3000006c 	.word	0x3000006c
 c006734:	4b8b      	ldr	r3, [pc, #556]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c006736:	681b      	ldr	r3, [r3, #0]
 c006738:	4a8a      	ldr	r2, [pc, #552]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c00673a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c00673e:	6013      	str	r3, [r2, #0]
 c006740:	4b88      	ldr	r3, [pc, #544]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c006742:	681b      	ldr	r3, [r3, #0]
 c006744:	4a87      	ldr	r2, [pc, #540]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c006746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c00674a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c00674c:	687b      	ldr	r3, [r7, #4]
 c00674e:	685b      	ldr	r3, [r3, #4]
 c006750:	2b00      	cmp	r3, #0
 c006752:	d019      	beq.n	c006788 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c006754:	f7fe fe58 	bl	c005408 <HAL_GetTick>
 c006758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00675a:	e00e      	b.n	c00677a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c00675c:	f7fe fe54 	bl	c005408 <HAL_GetTick>
 c006760:	4602      	mov	r2, r0
 c006762:	693b      	ldr	r3, [r7, #16]
 c006764:	1ad3      	subs	r3, r2, r3
 c006766:	2b64      	cmp	r3, #100	; 0x64
 c006768:	d907      	bls.n	c00677a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00676a:	4b7e      	ldr	r3, [pc, #504]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c00676c:	681b      	ldr	r3, [r3, #0]
 c00676e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c006772:	2b00      	cmp	r3, #0
 c006774:	d101      	bne.n	c00677a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 c006776:	2303      	movs	r3, #3
 c006778:	e372      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00677a:	4b7a      	ldr	r3, [pc, #488]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c00677c:	681b      	ldr	r3, [r3, #0]
 c00677e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c006782:	2b00      	cmp	r3, #0
 c006784:	d0ea      	beq.n	c00675c <HAL_RCC_OscConfig+0x2b0>
 c006786:	e01a      	b.n	c0067be <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c006788:	f7fe fe3e 	bl	c005408 <HAL_GetTick>
 c00678c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c00678e:	e00e      	b.n	c0067ae <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c006790:	f7fe fe3a 	bl	c005408 <HAL_GetTick>
 c006794:	4602      	mov	r2, r0
 c006796:	693b      	ldr	r3, [r7, #16]
 c006798:	1ad3      	subs	r3, r2, r3
 c00679a:	2b64      	cmp	r3, #100	; 0x64
 c00679c:	d907      	bls.n	c0067ae <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c00679e:	4b71      	ldr	r3, [pc, #452]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c0067a0:	681b      	ldr	r3, [r3, #0]
 c0067a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0067a6:	2b00      	cmp	r3, #0
 c0067a8:	d001      	beq.n	c0067ae <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 c0067aa:	2303      	movs	r3, #3
 c0067ac:	e358      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0067ae:	4b6d      	ldr	r3, [pc, #436]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c0067b0:	681b      	ldr	r3, [r3, #0]
 c0067b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0067b6:	2b00      	cmp	r3, #0
 c0067b8:	d1ea      	bne.n	c006790 <HAL_RCC_OscConfig+0x2e4>
 c0067ba:	e000      	b.n	c0067be <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c0067bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c0067be:	687b      	ldr	r3, [r7, #4]
 c0067c0:	681b      	ldr	r3, [r3, #0]
 c0067c2:	f003 0302 	and.w	r3, r3, #2
 c0067c6:	2b00      	cmp	r3, #0
 c0067c8:	d06c      	beq.n	c0068a4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c0067ca:	69bb      	ldr	r3, [r7, #24]
 c0067cc:	2b04      	cmp	r3, #4
 c0067ce:	d005      	beq.n	c0067dc <HAL_RCC_OscConfig+0x330>
 c0067d0:	69bb      	ldr	r3, [r7, #24]
 c0067d2:	2b0c      	cmp	r3, #12
 c0067d4:	d119      	bne.n	c00680a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c0067d6:	697b      	ldr	r3, [r7, #20]
 c0067d8:	2b02      	cmp	r3, #2
 c0067da:	d116      	bne.n	c00680a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c0067dc:	4b61      	ldr	r3, [pc, #388]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c0067de:	681b      	ldr	r3, [r3, #0]
 c0067e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0067e4:	2b00      	cmp	r3, #0
 c0067e6:	d005      	beq.n	c0067f4 <HAL_RCC_OscConfig+0x348>
 c0067e8:	687b      	ldr	r3, [r7, #4]
 c0067ea:	68db      	ldr	r3, [r3, #12]
 c0067ec:	2b00      	cmp	r3, #0
 c0067ee:	d101      	bne.n	c0067f4 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 c0067f0:	2301      	movs	r3, #1
 c0067f2:	e335      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c0067f4:	4b5b      	ldr	r3, [pc, #364]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c0067f6:	685b      	ldr	r3, [r3, #4]
 c0067f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c0067fc:	687b      	ldr	r3, [r7, #4]
 c0067fe:	691b      	ldr	r3, [r3, #16]
 c006800:	061b      	lsls	r3, r3, #24
 c006802:	4958      	ldr	r1, [pc, #352]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c006804:	4313      	orrs	r3, r2
 c006806:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c006808:	e04c      	b.n	c0068a4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c00680a:	687b      	ldr	r3, [r7, #4]
 c00680c:	68db      	ldr	r3, [r3, #12]
 c00680e:	2b00      	cmp	r3, #0
 c006810:	d029      	beq.n	c006866 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 c006812:	4b54      	ldr	r3, [pc, #336]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c006814:	681b      	ldr	r3, [r3, #0]
 c006816:	4a53      	ldr	r2, [pc, #332]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c006818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c00681c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00681e:	f7fe fdf3 	bl	c005408 <HAL_GetTick>
 c006822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c006824:	e00e      	b.n	c006844 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c006826:	f7fe fdef 	bl	c005408 <HAL_GetTick>
 c00682a:	4602      	mov	r2, r0
 c00682c:	693b      	ldr	r3, [r7, #16]
 c00682e:	1ad3      	subs	r3, r2, r3
 c006830:	2b02      	cmp	r3, #2
 c006832:	d907      	bls.n	c006844 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c006834:	4b4b      	ldr	r3, [pc, #300]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c006836:	681b      	ldr	r3, [r3, #0]
 c006838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00683c:	2b00      	cmp	r3, #0
 c00683e:	d101      	bne.n	c006844 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 c006840:	2303      	movs	r3, #3
 c006842:	e30d      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c006844:	4b47      	ldr	r3, [pc, #284]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c006846:	681b      	ldr	r3, [r3, #0]
 c006848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00684c:	2b00      	cmp	r3, #0
 c00684e:	d0ea      	beq.n	c006826 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c006850:	4b44      	ldr	r3, [pc, #272]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c006852:	685b      	ldr	r3, [r3, #4]
 c006854:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c006858:	687b      	ldr	r3, [r7, #4]
 c00685a:	691b      	ldr	r3, [r3, #16]
 c00685c:	061b      	lsls	r3, r3, #24
 c00685e:	4941      	ldr	r1, [pc, #260]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c006860:	4313      	orrs	r3, r2
 c006862:	604b      	str	r3, [r1, #4]
 c006864:	e01e      	b.n	c0068a4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c006866:	4b3f      	ldr	r3, [pc, #252]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c006868:	681b      	ldr	r3, [r3, #0]
 c00686a:	4a3e      	ldr	r2, [pc, #248]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c00686c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c006870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c006872:	f7fe fdc9 	bl	c005408 <HAL_GetTick>
 c006876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c006878:	e00e      	b.n	c006898 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c00687a:	f7fe fdc5 	bl	c005408 <HAL_GetTick>
 c00687e:	4602      	mov	r2, r0
 c006880:	693b      	ldr	r3, [r7, #16]
 c006882:	1ad3      	subs	r3, r2, r3
 c006884:	2b02      	cmp	r3, #2
 c006886:	d907      	bls.n	c006898 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c006888:	4b36      	ldr	r3, [pc, #216]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c00688a:	681b      	ldr	r3, [r3, #0]
 c00688c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c006890:	2b00      	cmp	r3, #0
 c006892:	d001      	beq.n	c006898 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 c006894:	2303      	movs	r3, #3
 c006896:	e2e3      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c006898:	4b32      	ldr	r3, [pc, #200]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c00689a:	681b      	ldr	r3, [r3, #0]
 c00689c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0068a0:	2b00      	cmp	r3, #0
 c0068a2:	d1ea      	bne.n	c00687a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c0068a4:	687b      	ldr	r3, [r7, #4]
 c0068a6:	681b      	ldr	r3, [r3, #0]
 c0068a8:	f003 0308 	and.w	r3, r3, #8
 c0068ac:	2b00      	cmp	r3, #0
 c0068ae:	d062      	beq.n	c006976 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c0068b0:	687b      	ldr	r3, [r7, #4]
 c0068b2:	695b      	ldr	r3, [r3, #20]
 c0068b4:	2b00      	cmp	r3, #0
 c0068b6:	d038      	beq.n	c00692a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c0068b8:	687b      	ldr	r3, [r7, #4]
 c0068ba:	699b      	ldr	r3, [r3, #24]
 c0068bc:	2b00      	cmp	r3, #0
 c0068be:	d108      	bne.n	c0068d2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c0068c0:	4b28      	ldr	r3, [pc, #160]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c0068c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0068c6:	4a27      	ldr	r2, [pc, #156]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c0068c8:	f023 0310 	bic.w	r3, r3, #16
 c0068cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 c0068d0:	e007      	b.n	c0068e2 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c0068d2:	4b24      	ldr	r3, [pc, #144]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c0068d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0068d8:	4a22      	ldr	r2, [pc, #136]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c0068da:	f043 0310 	orr.w	r3, r3, #16
 c0068de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c0068e2:	4b20      	ldr	r3, [pc, #128]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c0068e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0068e8:	4a1e      	ldr	r2, [pc, #120]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c0068ea:	f043 0301 	orr.w	r3, r3, #1
 c0068ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0068f2:	f7fe fd89 	bl	c005408 <HAL_GetTick>
 c0068f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c0068f8:	e00f      	b.n	c00691a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c0068fa:	f7fe fd85 	bl	c005408 <HAL_GetTick>
 c0068fe:	4602      	mov	r2, r0
 c006900:	693b      	ldr	r3, [r7, #16]
 c006902:	1ad3      	subs	r3, r2, r3
 c006904:	2b07      	cmp	r3, #7
 c006906:	d908      	bls.n	c00691a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c006908:	4b16      	ldr	r3, [pc, #88]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c00690a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00690e:	f003 0302 	and.w	r3, r3, #2
 c006912:	2b00      	cmp	r3, #0
 c006914:	d101      	bne.n	c00691a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 c006916:	2303      	movs	r3, #3
 c006918:	e2a2      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c00691a:	4b12      	ldr	r3, [pc, #72]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c00691c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c006920:	f003 0302 	and.w	r3, r3, #2
 c006924:	2b00      	cmp	r3, #0
 c006926:	d0e8      	beq.n	c0068fa <HAL_RCC_OscConfig+0x44e>
 c006928:	e025      	b.n	c006976 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c00692a:	4b0e      	ldr	r3, [pc, #56]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c00692c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c006930:	4a0c      	ldr	r2, [pc, #48]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c006932:	f023 0301 	bic.w	r3, r3, #1
 c006936:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00693a:	f7fe fd65 	bl	c005408 <HAL_GetTick>
 c00693e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c006940:	e012      	b.n	c006968 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c006942:	f7fe fd61 	bl	c005408 <HAL_GetTick>
 c006946:	4602      	mov	r2, r0
 c006948:	693b      	ldr	r3, [r7, #16]
 c00694a:	1ad3      	subs	r3, r2, r3
 c00694c:	2b07      	cmp	r3, #7
 c00694e:	d90b      	bls.n	c006968 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c006950:	4b04      	ldr	r3, [pc, #16]	; (c006964 <HAL_RCC_OscConfig+0x4b8>)
 c006952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c006956:	f003 0302 	and.w	r3, r3, #2
 c00695a:	2b00      	cmp	r3, #0
 c00695c:	d004      	beq.n	c006968 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 c00695e:	2303      	movs	r3, #3
 c006960:	e27e      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
 c006962:	bf00      	nop
 c006964:	50021000 	.word	0x50021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c006968:	4ba8      	ldr	r3, [pc, #672]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c00696a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00696e:	f003 0302 	and.w	r3, r3, #2
 c006972:	2b00      	cmp	r3, #0
 c006974:	d1e5      	bne.n	c006942 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c006976:	687b      	ldr	r3, [r7, #4]
 c006978:	681b      	ldr	r3, [r3, #0]
 c00697a:	f003 0304 	and.w	r3, r3, #4
 c00697e:	2b00      	cmp	r3, #0
 c006980:	f000 812d 	beq.w	c006bde <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 c006984:	2300      	movs	r3, #0
 c006986:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c006988:	4ba0      	ldr	r3, [pc, #640]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c00698a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00698c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c006990:	2b00      	cmp	r3, #0
 c006992:	d10d      	bne.n	c0069b0 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c006994:	4b9d      	ldr	r3, [pc, #628]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006998:	4a9c      	ldr	r2, [pc, #624]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c00699a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c00699e:	6593      	str	r3, [r2, #88]	; 0x58
 c0069a0:	4b9a      	ldr	r3, [pc, #616]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c0069a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0069a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0069a8:	60bb      	str	r3, [r7, #8]
 c0069aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 c0069ac:	2301      	movs	r3, #1
 c0069ae:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c0069b0:	4b97      	ldr	r3, [pc, #604]	; (c006c10 <HAL_RCC_OscConfig+0x764>)
 c0069b2:	681b      	ldr	r3, [r3, #0]
 c0069b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0069b8:	2b00      	cmp	r3, #0
 c0069ba:	d11e      	bne.n	c0069fa <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c0069bc:	4b94      	ldr	r3, [pc, #592]	; (c006c10 <HAL_RCC_OscConfig+0x764>)
 c0069be:	681b      	ldr	r3, [r3, #0]
 c0069c0:	4a93      	ldr	r2, [pc, #588]	; (c006c10 <HAL_RCC_OscConfig+0x764>)
 c0069c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c0069c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c0069c8:	f7fe fd1e 	bl	c005408 <HAL_GetTick>
 c0069cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c0069ce:	e00e      	b.n	c0069ee <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c0069d0:	f7fe fd1a 	bl	c005408 <HAL_GetTick>
 c0069d4:	4602      	mov	r2, r0
 c0069d6:	693b      	ldr	r3, [r7, #16]
 c0069d8:	1ad3      	subs	r3, r2, r3
 c0069da:	2b02      	cmp	r3, #2
 c0069dc:	d907      	bls.n	c0069ee <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c0069de:	4b8c      	ldr	r3, [pc, #560]	; (c006c10 <HAL_RCC_OscConfig+0x764>)
 c0069e0:	681b      	ldr	r3, [r3, #0]
 c0069e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0069e6:	2b00      	cmp	r3, #0
 c0069e8:	d101      	bne.n	c0069ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 c0069ea:	2303      	movs	r3, #3
 c0069ec:	e238      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c0069ee:	4b88      	ldr	r3, [pc, #544]	; (c006c10 <HAL_RCC_OscConfig+0x764>)
 c0069f0:	681b      	ldr	r3, [r3, #0]
 c0069f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0069f6:	2b00      	cmp	r3, #0
 c0069f8:	d0ea      	beq.n	c0069d0 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c0069fa:	687b      	ldr	r3, [r7, #4]
 c0069fc:	689b      	ldr	r3, [r3, #8]
 c0069fe:	f003 0301 	and.w	r3, r3, #1
 c006a02:	2b00      	cmp	r3, #0
 c006a04:	d01f      	beq.n	c006a46 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c006a06:	687b      	ldr	r3, [r7, #4]
 c006a08:	689b      	ldr	r3, [r3, #8]
 c006a0a:	f003 0304 	and.w	r3, r3, #4
 c006a0e:	2b00      	cmp	r3, #0
 c006a10:	d010      	beq.n	c006a34 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c006a12:	4b7e      	ldr	r3, [pc, #504]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006a18:	4a7c      	ldr	r2, [pc, #496]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006a1a:	f043 0304 	orr.w	r3, r3, #4
 c006a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c006a22:	4b7a      	ldr	r3, [pc, #488]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006a28:	4a78      	ldr	r2, [pc, #480]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006a2a:	f043 0301 	orr.w	r3, r3, #1
 c006a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c006a32:	e018      	b.n	c006a66 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c006a34:	4b75      	ldr	r3, [pc, #468]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006a3a:	4a74      	ldr	r2, [pc, #464]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006a3c:	f043 0301 	orr.w	r3, r3, #1
 c006a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c006a44:	e00f      	b.n	c006a66 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c006a46:	4b71      	ldr	r3, [pc, #452]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006a4c:	4a6f      	ldr	r2, [pc, #444]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006a4e:	f023 0301 	bic.w	r3, r3, #1
 c006a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c006a56:	4b6d      	ldr	r3, [pc, #436]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006a5c:	4a6b      	ldr	r2, [pc, #428]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006a5e:	f023 0304 	bic.w	r3, r3, #4
 c006a62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c006a66:	687b      	ldr	r3, [r7, #4]
 c006a68:	689b      	ldr	r3, [r3, #8]
 c006a6a:	2b00      	cmp	r3, #0
 c006a6c:	d068      	beq.n	c006b40 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006a6e:	f7fe fccb 	bl	c005408 <HAL_GetTick>
 c006a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c006a74:	e011      	b.n	c006a9a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c006a76:	f7fe fcc7 	bl	c005408 <HAL_GetTick>
 c006a7a:	4602      	mov	r2, r0
 c006a7c:	693b      	ldr	r3, [r7, #16]
 c006a7e:	1ad3      	subs	r3, r2, r3
 c006a80:	f241 3288 	movw	r2, #5000	; 0x1388
 c006a84:	4293      	cmp	r3, r2
 c006a86:	d908      	bls.n	c006a9a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c006a88:	4b60      	ldr	r3, [pc, #384]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006a8e:	f003 0302 	and.w	r3, r3, #2
 c006a92:	2b00      	cmp	r3, #0
 c006a94:	d101      	bne.n	c006a9a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 c006a96:	2303      	movs	r3, #3
 c006a98:	e1e2      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c006a9a:	4b5c      	ldr	r3, [pc, #368]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006aa0:	f003 0302 	and.w	r3, r3, #2
 c006aa4:	2b00      	cmp	r3, #0
 c006aa6:	d0e6      	beq.n	c006a76 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c006aa8:	687b      	ldr	r3, [r7, #4]
 c006aaa:	689b      	ldr	r3, [r3, #8]
 c006aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c006ab0:	2b00      	cmp	r3, #0
 c006ab2:	d022      	beq.n	c006afa <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c006ab4:	4b55      	ldr	r3, [pc, #340]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006aba:	4a54      	ldr	r2, [pc, #336]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c006ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c006ac4:	e011      	b.n	c006aea <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c006ac6:	f7fe fc9f 	bl	c005408 <HAL_GetTick>
 c006aca:	4602      	mov	r2, r0
 c006acc:	693b      	ldr	r3, [r7, #16]
 c006ace:	1ad3      	subs	r3, r2, r3
 c006ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 c006ad4:	4293      	cmp	r3, r2
 c006ad6:	d908      	bls.n	c006aea <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c006ad8:	4b4c      	ldr	r3, [pc, #304]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c006ae2:	2b00      	cmp	r3, #0
 c006ae4:	d101      	bne.n	c006aea <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 c006ae6:	2303      	movs	r3, #3
 c006ae8:	e1ba      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c006aea:	4b48      	ldr	r3, [pc, #288]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c006af4:	2b00      	cmp	r3, #0
 c006af6:	d0e6      	beq.n	c006ac6 <HAL_RCC_OscConfig+0x61a>
 c006af8:	e068      	b.n	c006bcc <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c006afa:	4b44      	ldr	r3, [pc, #272]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006b00:	4a42      	ldr	r2, [pc, #264]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c006b06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006b0a:	e011      	b.n	c006b30 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c006b0c:	f7fe fc7c 	bl	c005408 <HAL_GetTick>
 c006b10:	4602      	mov	r2, r0
 c006b12:	693b      	ldr	r3, [r7, #16]
 c006b14:	1ad3      	subs	r3, r2, r3
 c006b16:	f241 3288 	movw	r2, #5000	; 0x1388
 c006b1a:	4293      	cmp	r3, r2
 c006b1c:	d908      	bls.n	c006b30 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006b1e:	4b3b      	ldr	r3, [pc, #236]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c006b28:	2b00      	cmp	r3, #0
 c006b2a:	d001      	beq.n	c006b30 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 c006b2c:	2303      	movs	r3, #3
 c006b2e:	e197      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006b30:	4b36      	ldr	r3, [pc, #216]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c006b3a:	2b00      	cmp	r3, #0
 c006b3c:	d1e6      	bne.n	c006b0c <HAL_RCC_OscConfig+0x660>
 c006b3e:	e045      	b.n	c006bcc <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006b40:	f7fe fc62 	bl	c005408 <HAL_GetTick>
 c006b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c006b46:	e011      	b.n	c006b6c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c006b48:	f7fe fc5e 	bl	c005408 <HAL_GetTick>
 c006b4c:	4602      	mov	r2, r0
 c006b4e:	693b      	ldr	r3, [r7, #16]
 c006b50:	1ad3      	subs	r3, r2, r3
 c006b52:	f241 3288 	movw	r2, #5000	; 0x1388
 c006b56:	4293      	cmp	r3, r2
 c006b58:	d908      	bls.n	c006b6c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c006b5a:	4b2c      	ldr	r3, [pc, #176]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006b60:	f003 0302 	and.w	r3, r3, #2
 c006b64:	2b00      	cmp	r3, #0
 c006b66:	d001      	beq.n	c006b6c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 c006b68:	2303      	movs	r3, #3
 c006b6a:	e179      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c006b6c:	4b27      	ldr	r3, [pc, #156]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006b72:	f003 0302 	and.w	r3, r3, #2
 c006b76:	2b00      	cmp	r3, #0
 c006b78:	d1e6      	bne.n	c006b48 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c006b7a:	4b24      	ldr	r3, [pc, #144]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c006b84:	2b00      	cmp	r3, #0
 c006b86:	d021      	beq.n	c006bcc <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c006b88:	4b20      	ldr	r3, [pc, #128]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006b8e:	4a1f      	ldr	r2, [pc, #124]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006b90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c006b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006b98:	e011      	b.n	c006bbe <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c006b9a:	f7fe fc35 	bl	c005408 <HAL_GetTick>
 c006b9e:	4602      	mov	r2, r0
 c006ba0:	693b      	ldr	r3, [r7, #16]
 c006ba2:	1ad3      	subs	r3, r2, r3
 c006ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 c006ba8:	4293      	cmp	r3, r2
 c006baa:	d908      	bls.n	c006bbe <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006bac:	4b17      	ldr	r3, [pc, #92]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c006bb6:	2b00      	cmp	r3, #0
 c006bb8:	d001      	beq.n	c006bbe <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 c006bba:	2303      	movs	r3, #3
 c006bbc:	e150      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c006bbe:	4b13      	ldr	r3, [pc, #76]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c006bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c006bc8:	2b00      	cmp	r3, #0
 c006bca:	d1e6      	bne.n	c006b9a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c006bcc:	7ffb      	ldrb	r3, [r7, #31]
 c006bce:	2b01      	cmp	r3, #1
 c006bd0:	d105      	bne.n	c006bde <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c006bd2:	4b0e      	ldr	r3, [pc, #56]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006bd6:	4a0d      	ldr	r2, [pc, #52]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c006bdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c006bde:	687b      	ldr	r3, [r7, #4]
 c006be0:	681b      	ldr	r3, [r3, #0]
 c006be2:	f003 0320 	and.w	r3, r3, #32
 c006be6:	2b00      	cmp	r3, #0
 c006be8:	d04f      	beq.n	c006c8a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c006bea:	687b      	ldr	r3, [r7, #4]
 c006bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006bee:	2b00      	cmp	r3, #0
 c006bf0:	d028      	beq.n	c006c44 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c006bf2:	4b06      	ldr	r3, [pc, #24]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c006bf8:	4a04      	ldr	r2, [pc, #16]	; (c006c0c <HAL_RCC_OscConfig+0x760>)
 c006bfa:	f043 0301 	orr.w	r3, r3, #1
 c006bfe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006c02:	f7fe fc01 	bl	c005408 <HAL_GetTick>
 c006c06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c006c08:	e014      	b.n	c006c34 <HAL_RCC_OscConfig+0x788>
 c006c0a:	bf00      	nop
 c006c0c:	50021000 	.word	0x50021000
 c006c10:	50007000 	.word	0x50007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c006c14:	f7fe fbf8 	bl	c005408 <HAL_GetTick>
 c006c18:	4602      	mov	r2, r0
 c006c1a:	693b      	ldr	r3, [r7, #16]
 c006c1c:	1ad3      	subs	r3, r2, r3
 c006c1e:	2b02      	cmp	r3, #2
 c006c20:	d908      	bls.n	c006c34 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c006c22:	4b91      	ldr	r3, [pc, #580]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006c24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c006c28:	f003 0302 	and.w	r3, r3, #2
 c006c2c:	2b00      	cmp	r3, #0
 c006c2e:	d101      	bne.n	c006c34 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 c006c30:	2303      	movs	r3, #3
 c006c32:	e115      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c006c34:	4b8c      	ldr	r3, [pc, #560]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c006c3a:	f003 0302 	and.w	r3, r3, #2
 c006c3e:	2b00      	cmp	r3, #0
 c006c40:	d0e8      	beq.n	c006c14 <HAL_RCC_OscConfig+0x768>
 c006c42:	e022      	b.n	c006c8a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c006c44:	4b88      	ldr	r3, [pc, #544]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006c46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c006c4a:	4a87      	ldr	r2, [pc, #540]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006c4c:	f023 0301 	bic.w	r3, r3, #1
 c006c50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c006c54:	f7fe fbd8 	bl	c005408 <HAL_GetTick>
 c006c58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c006c5a:	e00f      	b.n	c006c7c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c006c5c:	f7fe fbd4 	bl	c005408 <HAL_GetTick>
 c006c60:	4602      	mov	r2, r0
 c006c62:	693b      	ldr	r3, [r7, #16]
 c006c64:	1ad3      	subs	r3, r2, r3
 c006c66:	2b02      	cmp	r3, #2
 c006c68:	d908      	bls.n	c006c7c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c006c6a:	4b7f      	ldr	r3, [pc, #508]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006c6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c006c70:	f003 0302 	and.w	r3, r3, #2
 c006c74:	2b00      	cmp	r3, #0
 c006c76:	d001      	beq.n	c006c7c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 c006c78:	2303      	movs	r3, #3
 c006c7a:	e0f1      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c006c7c:	4b7a      	ldr	r3, [pc, #488]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c006c82:	f003 0302 	and.w	r3, r3, #2
 c006c86:	2b00      	cmp	r3, #0
 c006c88:	d1e8      	bne.n	c006c5c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c006c8a:	687b      	ldr	r3, [r7, #4]
 c006c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c006c8e:	2b00      	cmp	r3, #0
 c006c90:	f000 80e5 	beq.w	c006e5e <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c006c94:	4b74      	ldr	r3, [pc, #464]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006c96:	689b      	ldr	r3, [r3, #8]
 c006c98:	f003 030c 	and.w	r3, r3, #12
 c006c9c:	2b0c      	cmp	r3, #12
 c006c9e:	f000 809f 	beq.w	c006de0 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c006ca2:	687b      	ldr	r3, [r7, #4]
 c006ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c006ca6:	2b02      	cmp	r3, #2
 c006ca8:	d166      	bne.n	c006d78 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c006caa:	4b6f      	ldr	r3, [pc, #444]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006cac:	681b      	ldr	r3, [r3, #0]
 c006cae:	4a6e      	ldr	r2, [pc, #440]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006cb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c006cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c006cb6:	f7fe fba7 	bl	c005408 <HAL_GetTick>
 c006cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006cbc:	e00e      	b.n	c006cdc <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c006cbe:	f7fe fba3 	bl	c005408 <HAL_GetTick>
 c006cc2:	4602      	mov	r2, r0
 c006cc4:	693b      	ldr	r3, [r7, #16]
 c006cc6:	1ad3      	subs	r3, r2, r3
 c006cc8:	2b02      	cmp	r3, #2
 c006cca:	d907      	bls.n	c006cdc <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006ccc:	4b66      	ldr	r3, [pc, #408]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006cce:	681b      	ldr	r3, [r3, #0]
 c006cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c006cd4:	2b00      	cmp	r3, #0
 c006cd6:	d001      	beq.n	c006cdc <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 c006cd8:	2303      	movs	r3, #3
 c006cda:	e0c1      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006cdc:	4b62      	ldr	r3, [pc, #392]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006cde:	681b      	ldr	r3, [r3, #0]
 c006ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c006ce4:	2b00      	cmp	r3, #0
 c006ce6:	d1ea      	bne.n	c006cbe <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c006ce8:	4b5f      	ldr	r3, [pc, #380]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006cea:	68da      	ldr	r2, [r3, #12]
 c006cec:	4b5f      	ldr	r3, [pc, #380]	; (c006e6c <HAL_RCC_OscConfig+0x9c0>)
 c006cee:	4013      	ands	r3, r2
 c006cf0:	687a      	ldr	r2, [r7, #4]
 c006cf2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 c006cf4:	687a      	ldr	r2, [r7, #4]
 c006cf6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 c006cf8:	3a01      	subs	r2, #1
 c006cfa:	0112      	lsls	r2, r2, #4
 c006cfc:	4311      	orrs	r1, r2
 c006cfe:	687a      	ldr	r2, [r7, #4]
 c006d00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 c006d02:	0212      	lsls	r2, r2, #8
 c006d04:	4311      	orrs	r1, r2
 c006d06:	687a      	ldr	r2, [r7, #4]
 c006d08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c006d0a:	0852      	lsrs	r2, r2, #1
 c006d0c:	3a01      	subs	r2, #1
 c006d0e:	0552      	lsls	r2, r2, #21
 c006d10:	4311      	orrs	r1, r2
 c006d12:	687a      	ldr	r2, [r7, #4]
 c006d14:	6c52      	ldr	r2, [r2, #68]	; 0x44
 c006d16:	0852      	lsrs	r2, r2, #1
 c006d18:	3a01      	subs	r2, #1
 c006d1a:	0652      	lsls	r2, r2, #25
 c006d1c:	4311      	orrs	r1, r2
 c006d1e:	687a      	ldr	r2, [r7, #4]
 c006d20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 c006d22:	06d2      	lsls	r2, r2, #27
 c006d24:	430a      	orrs	r2, r1
 c006d26:	4950      	ldr	r1, [pc, #320]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006d28:	4313      	orrs	r3, r2
 c006d2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 c006d2c:	4b4e      	ldr	r3, [pc, #312]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006d2e:	681b      	ldr	r3, [r3, #0]
 c006d30:	4a4d      	ldr	r2, [pc, #308]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c006d36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c006d38:	4b4b      	ldr	r3, [pc, #300]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006d3a:	68db      	ldr	r3, [r3, #12]
 c006d3c:	4a4a      	ldr	r2, [pc, #296]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c006d42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c006d44:	f7fe fb60 	bl	c005408 <HAL_GetTick>
 c006d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c006d4a:	e00e      	b.n	c006d6a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c006d4c:	f7fe fb5c 	bl	c005408 <HAL_GetTick>
 c006d50:	4602      	mov	r2, r0
 c006d52:	693b      	ldr	r3, [r7, #16]
 c006d54:	1ad3      	subs	r3, r2, r3
 c006d56:	2b02      	cmp	r3, #2
 c006d58:	d907      	bls.n	c006d6a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c006d5a:	4b43      	ldr	r3, [pc, #268]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006d5c:	681b      	ldr	r3, [r3, #0]
 c006d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c006d62:	2b00      	cmp	r3, #0
 c006d64:	d101      	bne.n	c006d6a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 c006d66:	2303      	movs	r3, #3
 c006d68:	e07a      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c006d6a:	4b3f      	ldr	r3, [pc, #252]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006d6c:	681b      	ldr	r3, [r3, #0]
 c006d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c006d72:	2b00      	cmp	r3, #0
 c006d74:	d0ea      	beq.n	c006d4c <HAL_RCC_OscConfig+0x8a0>
 c006d76:	e072      	b.n	c006e5e <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c006d78:	4b3b      	ldr	r3, [pc, #236]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006d7a:	681b      	ldr	r3, [r3, #0]
 c006d7c:	4a3a      	ldr	r2, [pc, #232]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c006d82:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 c006d84:	4b38      	ldr	r3, [pc, #224]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006d86:	681b      	ldr	r3, [r3, #0]
 c006d88:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 c006d8c:	2b00      	cmp	r3, #0
 c006d8e:	d105      	bne.n	c006d9c <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 c006d90:	4b35      	ldr	r3, [pc, #212]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006d92:	68db      	ldr	r3, [r3, #12]
 c006d94:	4a34      	ldr	r2, [pc, #208]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006d96:	f023 0303 	bic.w	r3, r3, #3
 c006d9a:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c006d9c:	4b32      	ldr	r3, [pc, #200]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006d9e:	68db      	ldr	r3, [r3, #12]
 c006da0:	4a31      	ldr	r2, [pc, #196]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006da2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 c006da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c006daa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c006dac:	f7fe fb2c 	bl	c005408 <HAL_GetTick>
 c006db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006db2:	e00e      	b.n	c006dd2 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c006db4:	f7fe fb28 	bl	c005408 <HAL_GetTick>
 c006db8:	4602      	mov	r2, r0
 c006dba:	693b      	ldr	r3, [r7, #16]
 c006dbc:	1ad3      	subs	r3, r2, r3
 c006dbe:	2b02      	cmp	r3, #2
 c006dc0:	d907      	bls.n	c006dd2 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006dc2:	4b29      	ldr	r3, [pc, #164]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006dc4:	681b      	ldr	r3, [r3, #0]
 c006dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c006dca:	2b00      	cmp	r3, #0
 c006dcc:	d001      	beq.n	c006dd2 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 c006dce:	2303      	movs	r3, #3
 c006dd0:	e046      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c006dd2:	4b25      	ldr	r3, [pc, #148]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006dd4:	681b      	ldr	r3, [r3, #0]
 c006dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c006dda:	2b00      	cmp	r3, #0
 c006ddc:	d1ea      	bne.n	c006db4 <HAL_RCC_OscConfig+0x908>
 c006dde:	e03e      	b.n	c006e5e <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c006de0:	687b      	ldr	r3, [r7, #4]
 c006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c006de4:	2b01      	cmp	r3, #1
 c006de6:	d101      	bne.n	c006dec <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 c006de8:	2301      	movs	r3, #1
 c006dea:	e039      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 c006dec:	4b1e      	ldr	r3, [pc, #120]	; (c006e68 <HAL_RCC_OscConfig+0x9bc>)
 c006dee:	68db      	ldr	r3, [r3, #12]
 c006df0:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c006df2:	697b      	ldr	r3, [r7, #20]
 c006df4:	f003 0203 	and.w	r2, r3, #3
 c006df8:	687b      	ldr	r3, [r7, #4]
 c006dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c006dfc:	429a      	cmp	r2, r3
 c006dfe:	d12c      	bne.n	c006e5a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c006e00:	697b      	ldr	r3, [r7, #20]
 c006e02:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c006e06:	687b      	ldr	r3, [r7, #4]
 c006e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c006e0a:	3b01      	subs	r3, #1
 c006e0c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c006e0e:	429a      	cmp	r2, r3
 c006e10:	d123      	bne.n	c006e5a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c006e12:	697b      	ldr	r3, [r7, #20]
 c006e14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 c006e18:	687b      	ldr	r3, [r7, #4]
 c006e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c006e1c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c006e1e:	429a      	cmp	r2, r3
 c006e20:	d11b      	bne.n	c006e5a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c006e22:	697b      	ldr	r3, [r7, #20]
 c006e24:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 c006e28:	687b      	ldr	r3, [r7, #4]
 c006e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c006e2c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c006e2e:	429a      	cmp	r2, r3
 c006e30:	d113      	bne.n	c006e5a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c006e32:	697b      	ldr	r3, [r7, #20]
 c006e34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 c006e38:	687b      	ldr	r3, [r7, #4]
 c006e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c006e3c:	085b      	lsrs	r3, r3, #1
 c006e3e:	3b01      	subs	r3, #1
 c006e40:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c006e42:	429a      	cmp	r2, r3
 c006e44:	d109      	bne.n	c006e5a <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c006e46:	697b      	ldr	r3, [r7, #20]
 c006e48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 c006e4c:	687b      	ldr	r3, [r7, #4]
 c006e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c006e50:	085b      	lsrs	r3, r3, #1
 c006e52:	3b01      	subs	r3, #1
 c006e54:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c006e56:	429a      	cmp	r2, r3
 c006e58:	d001      	beq.n	c006e5e <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 c006e5a:	2301      	movs	r3, #1
 c006e5c:	e000      	b.n	c006e60 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 c006e5e:	2300      	movs	r3, #0
}
 c006e60:	4618      	mov	r0, r3
 c006e62:	3720      	adds	r7, #32
 c006e64:	46bd      	mov	sp, r7
 c006e66:	bd80      	pop	{r7, pc}
 c006e68:	50021000 	.word	0x50021000
 c006e6c:	019f800c 	.word	0x019f800c

0c006e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 c006e70:	b580      	push	{r7, lr}
 c006e72:	b086      	sub	sp, #24
 c006e74:	af00      	add	r7, sp, #0
 c006e76:	6078      	str	r0, [r7, #4]
 c006e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c006e7a:	2300      	movs	r3, #0
 c006e7c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 c006e7e:	687b      	ldr	r3, [r7, #4]
 c006e80:	2b00      	cmp	r3, #0
 c006e82:	d101      	bne.n	c006e88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 c006e84:	2301      	movs	r3, #1
 c006e86:	e10d      	b.n	c0070a4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c006e88:	4b88      	ldr	r3, [pc, #544]	; (c0070ac <HAL_RCC_ClockConfig+0x23c>)
 c006e8a:	681b      	ldr	r3, [r3, #0]
 c006e8c:	f003 030f 	and.w	r3, r3, #15
 c006e90:	683a      	ldr	r2, [r7, #0]
 c006e92:	429a      	cmp	r2, r3
 c006e94:	d910      	bls.n	c006eb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c006e96:	4b85      	ldr	r3, [pc, #532]	; (c0070ac <HAL_RCC_ClockConfig+0x23c>)
 c006e98:	681b      	ldr	r3, [r3, #0]
 c006e9a:	f023 020f 	bic.w	r2, r3, #15
 c006e9e:	4983      	ldr	r1, [pc, #524]	; (c0070ac <HAL_RCC_ClockConfig+0x23c>)
 c006ea0:	683b      	ldr	r3, [r7, #0]
 c006ea2:	4313      	orrs	r3, r2
 c006ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c006ea6:	4b81      	ldr	r3, [pc, #516]	; (c0070ac <HAL_RCC_ClockConfig+0x23c>)
 c006ea8:	681b      	ldr	r3, [r3, #0]
 c006eaa:	f003 030f 	and.w	r3, r3, #15
 c006eae:	683a      	ldr	r2, [r7, #0]
 c006eb0:	429a      	cmp	r2, r3
 c006eb2:	d001      	beq.n	c006eb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 c006eb4:	2301      	movs	r3, #1
 c006eb6:	e0f5      	b.n	c0070a4 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c006eb8:	687b      	ldr	r3, [r7, #4]
 c006eba:	681b      	ldr	r3, [r3, #0]
 c006ebc:	f003 0301 	and.w	r3, r3, #1
 c006ec0:	2b00      	cmp	r3, #0
 c006ec2:	f000 8094 	beq.w	c006fee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c006ec6:	687b      	ldr	r3, [r7, #4]
 c006ec8:	685b      	ldr	r3, [r3, #4]
 c006eca:	2b03      	cmp	r3, #3
 c006ecc:	d134      	bne.n	c006f38 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c006ece:	4b78      	ldr	r3, [pc, #480]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c006ed0:	681b      	ldr	r3, [r3, #0]
 c006ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c006ed6:	2b00      	cmp	r3, #0
 c006ed8:	d101      	bne.n	c006ede <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 c006eda:	2301      	movs	r3, #1
 c006edc:	e0e2      	b.n	c0070a4 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 c006ede:	f000 fa2b 	bl	c007338 <RCC_GetSysClockFreqFromPLLSource>
 c006ee2:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 c006ee4:	693b      	ldr	r3, [r7, #16]
 c006ee6:	4a73      	ldr	r2, [pc, #460]	; (c0070b4 <HAL_RCC_ClockConfig+0x244>)
 c006ee8:	4293      	cmp	r3, r2
 c006eea:	d956      	bls.n	c006f9a <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c006eec:	4b70      	ldr	r3, [pc, #448]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c006eee:	689b      	ldr	r3, [r3, #8]
 c006ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c006ef4:	2b00      	cmp	r3, #0
 c006ef6:	d10a      	bne.n	c006f0e <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c006ef8:	4b6d      	ldr	r3, [pc, #436]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c006efa:	689b      	ldr	r3, [r3, #8]
 c006efc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c006f00:	4a6b      	ldr	r2, [pc, #428]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c006f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c006f06:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c006f08:	2380      	movs	r3, #128	; 0x80
 c006f0a:	617b      	str	r3, [r7, #20]
 c006f0c:	e045      	b.n	c006f9a <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c006f0e:	687b      	ldr	r3, [r7, #4]
 c006f10:	681b      	ldr	r3, [r3, #0]
 c006f12:	f003 0302 	and.w	r3, r3, #2
 c006f16:	2b00      	cmp	r3, #0
 c006f18:	d03f      	beq.n	c006f9a <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 c006f1a:	687b      	ldr	r3, [r7, #4]
 c006f1c:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c006f1e:	2b00      	cmp	r3, #0
 c006f20:	d13b      	bne.n	c006f9a <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c006f22:	4b63      	ldr	r3, [pc, #396]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c006f24:	689b      	ldr	r3, [r3, #8]
 c006f26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c006f2a:	4a61      	ldr	r2, [pc, #388]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c006f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c006f30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c006f32:	2380      	movs	r3, #128	; 0x80
 c006f34:	617b      	str	r3, [r7, #20]
 c006f36:	e030      	b.n	c006f9a <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c006f38:	687b      	ldr	r3, [r7, #4]
 c006f3a:	685b      	ldr	r3, [r3, #4]
 c006f3c:	2b02      	cmp	r3, #2
 c006f3e:	d107      	bne.n	c006f50 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c006f40:	4b5b      	ldr	r3, [pc, #364]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c006f42:	681b      	ldr	r3, [r3, #0]
 c006f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c006f48:	2b00      	cmp	r3, #0
 c006f4a:	d115      	bne.n	c006f78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c006f4c:	2301      	movs	r3, #1
 c006f4e:	e0a9      	b.n	c0070a4 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c006f50:	687b      	ldr	r3, [r7, #4]
 c006f52:	685b      	ldr	r3, [r3, #4]
 c006f54:	2b00      	cmp	r3, #0
 c006f56:	d107      	bne.n	c006f68 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c006f58:	4b55      	ldr	r3, [pc, #340]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c006f5a:	681b      	ldr	r3, [r3, #0]
 c006f5c:	f003 0302 	and.w	r3, r3, #2
 c006f60:	2b00      	cmp	r3, #0
 c006f62:	d109      	bne.n	c006f78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c006f64:	2301      	movs	r3, #1
 c006f66:	e09d      	b.n	c0070a4 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c006f68:	4b51      	ldr	r3, [pc, #324]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c006f6a:	681b      	ldr	r3, [r3, #0]
 c006f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c006f70:	2b00      	cmp	r3, #0
 c006f72:	d101      	bne.n	c006f78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c006f74:	2301      	movs	r3, #1
 c006f76:	e095      	b.n	c0070a4 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 c006f78:	f000 f8a2 	bl	c0070c0 <HAL_RCC_GetSysClockFreq>
 c006f7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 c006f7e:	693b      	ldr	r3, [r7, #16]
 c006f80:	4a4c      	ldr	r2, [pc, #304]	; (c0070b4 <HAL_RCC_ClockConfig+0x244>)
 c006f82:	4293      	cmp	r3, r2
 c006f84:	d909      	bls.n	c006f9a <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c006f86:	4b4a      	ldr	r3, [pc, #296]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c006f88:	689b      	ldr	r3, [r3, #8]
 c006f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c006f8e:	4a48      	ldr	r2, [pc, #288]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c006f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c006f94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 c006f96:	2380      	movs	r3, #128	; 0x80
 c006f98:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c006f9a:	4b45      	ldr	r3, [pc, #276]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c006f9c:	689b      	ldr	r3, [r3, #8]
 c006f9e:	f023 0203 	bic.w	r2, r3, #3
 c006fa2:	687b      	ldr	r3, [r7, #4]
 c006fa4:	685b      	ldr	r3, [r3, #4]
 c006fa6:	4942      	ldr	r1, [pc, #264]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c006fa8:	4313      	orrs	r3, r2
 c006faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c006fac:	f7fe fa2c 	bl	c005408 <HAL_GetTick>
 c006fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c006fb2:	e013      	b.n	c006fdc <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c006fb4:	f7fe fa28 	bl	c005408 <HAL_GetTick>
 c006fb8:	4602      	mov	r2, r0
 c006fba:	68fb      	ldr	r3, [r7, #12]
 c006fbc:	1ad3      	subs	r3, r2, r3
 c006fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 c006fc2:	4293      	cmp	r3, r2
 c006fc4:	d90a      	bls.n	c006fdc <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c006fc6:	4b3a      	ldr	r3, [pc, #232]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c006fc8:	689b      	ldr	r3, [r3, #8]
 c006fca:	f003 020c 	and.w	r2, r3, #12
 c006fce:	687b      	ldr	r3, [r7, #4]
 c006fd0:	685b      	ldr	r3, [r3, #4]
 c006fd2:	009b      	lsls	r3, r3, #2
 c006fd4:	429a      	cmp	r2, r3
 c006fd6:	d001      	beq.n	c006fdc <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 c006fd8:	2303      	movs	r3, #3
 c006fda:	e063      	b.n	c0070a4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c006fdc:	4b34      	ldr	r3, [pc, #208]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c006fde:	689b      	ldr	r3, [r3, #8]
 c006fe0:	f003 020c 	and.w	r2, r3, #12
 c006fe4:	687b      	ldr	r3, [r7, #4]
 c006fe6:	685b      	ldr	r3, [r3, #4]
 c006fe8:	009b      	lsls	r3, r3, #2
 c006fea:	429a      	cmp	r2, r3
 c006fec:	d1e2      	bne.n	c006fb4 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c006fee:	687b      	ldr	r3, [r7, #4]
 c006ff0:	681b      	ldr	r3, [r3, #0]
 c006ff2:	f003 0302 	and.w	r3, r3, #2
 c006ff6:	2b00      	cmp	r3, #0
 c006ff8:	d009      	beq.n	c00700e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c006ffa:	4b2d      	ldr	r3, [pc, #180]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c006ffc:	689b      	ldr	r3, [r3, #8]
 c006ffe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c007002:	687b      	ldr	r3, [r7, #4]
 c007004:	689b      	ldr	r3, [r3, #8]
 c007006:	492a      	ldr	r1, [pc, #168]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c007008:	4313      	orrs	r3, r2
 c00700a:	608b      	str	r3, [r1, #8]
 c00700c:	e008      	b.n	c007020 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 c00700e:	697b      	ldr	r3, [r7, #20]
 c007010:	2b80      	cmp	r3, #128	; 0x80
 c007012:	d105      	bne.n	c007020 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c007014:	4b26      	ldr	r3, [pc, #152]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c007016:	689b      	ldr	r3, [r3, #8]
 c007018:	4a25      	ldr	r2, [pc, #148]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c00701a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c00701e:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c007020:	4b22      	ldr	r3, [pc, #136]	; (c0070ac <HAL_RCC_ClockConfig+0x23c>)
 c007022:	681b      	ldr	r3, [r3, #0]
 c007024:	f003 030f 	and.w	r3, r3, #15
 c007028:	683a      	ldr	r2, [r7, #0]
 c00702a:	429a      	cmp	r2, r3
 c00702c:	d210      	bcs.n	c007050 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c00702e:	4b1f      	ldr	r3, [pc, #124]	; (c0070ac <HAL_RCC_ClockConfig+0x23c>)
 c007030:	681b      	ldr	r3, [r3, #0]
 c007032:	f023 020f 	bic.w	r2, r3, #15
 c007036:	491d      	ldr	r1, [pc, #116]	; (c0070ac <HAL_RCC_ClockConfig+0x23c>)
 c007038:	683b      	ldr	r3, [r7, #0]
 c00703a:	4313      	orrs	r3, r2
 c00703c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c00703e:	4b1b      	ldr	r3, [pc, #108]	; (c0070ac <HAL_RCC_ClockConfig+0x23c>)
 c007040:	681b      	ldr	r3, [r3, #0]
 c007042:	f003 030f 	and.w	r3, r3, #15
 c007046:	683a      	ldr	r2, [r7, #0]
 c007048:	429a      	cmp	r2, r3
 c00704a:	d001      	beq.n	c007050 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 c00704c:	2301      	movs	r3, #1
 c00704e:	e029      	b.n	c0070a4 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c007050:	687b      	ldr	r3, [r7, #4]
 c007052:	681b      	ldr	r3, [r3, #0]
 c007054:	f003 0304 	and.w	r3, r3, #4
 c007058:	2b00      	cmp	r3, #0
 c00705a:	d008      	beq.n	c00706e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c00705c:	4b14      	ldr	r3, [pc, #80]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c00705e:	689b      	ldr	r3, [r3, #8]
 c007060:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c007064:	687b      	ldr	r3, [r7, #4]
 c007066:	68db      	ldr	r3, [r3, #12]
 c007068:	4911      	ldr	r1, [pc, #68]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c00706a:	4313      	orrs	r3, r2
 c00706c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c00706e:	687b      	ldr	r3, [r7, #4]
 c007070:	681b      	ldr	r3, [r3, #0]
 c007072:	f003 0308 	and.w	r3, r3, #8
 c007076:	2b00      	cmp	r3, #0
 c007078:	d009      	beq.n	c00708e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c00707a:	4b0d      	ldr	r3, [pc, #52]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c00707c:	689b      	ldr	r3, [r3, #8]
 c00707e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 c007082:	687b      	ldr	r3, [r7, #4]
 c007084:	691b      	ldr	r3, [r3, #16]
 c007086:	00db      	lsls	r3, r3, #3
 c007088:	4909      	ldr	r1, [pc, #36]	; (c0070b0 <HAL_RCC_ClockConfig+0x240>)
 c00708a:	4313      	orrs	r3, r2
 c00708c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c00708e:	f000 f8b3 	bl	c0071f8 <HAL_RCC_GetHCLKFreq>
 c007092:	4603      	mov	r3, r0
 c007094:	4a08      	ldr	r2, [pc, #32]	; (c0070b8 <HAL_RCC_ClockConfig+0x248>)
 c007096:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 c007098:	4b08      	ldr	r3, [pc, #32]	; (c0070bc <HAL_RCC_ClockConfig+0x24c>)
 c00709a:	681b      	ldr	r3, [r3, #0]
 c00709c:	4618      	mov	r0, r3
 c00709e:	f7fe f963 	bl	c005368 <HAL_InitTick>
 c0070a2:	4603      	mov	r3, r0
}
 c0070a4:	4618      	mov	r0, r3
 c0070a6:	3718      	adds	r7, #24
 c0070a8:	46bd      	mov	sp, r7
 c0070aa:	bd80      	pop	{r7, pc}
 c0070ac:	50022000 	.word	0x50022000
 c0070b0:	50021000 	.word	0x50021000
 c0070b4:	04c4b400 	.word	0x04c4b400
 c0070b8:	30000064 	.word	0x30000064
 c0070bc:	3000006c 	.word	0x3000006c

0c0070c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c0070c0:	b480      	push	{r7}
 c0070c2:	b089      	sub	sp, #36	; 0x24
 c0070c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c0070c6:	2300      	movs	r3, #0
 c0070c8:	61fb      	str	r3, [r7, #28]
 c0070ca:	2300      	movs	r3, #0
 c0070cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0070ce:	4b47      	ldr	r3, [pc, #284]	; (c0071ec <HAL_RCC_GetSysClockFreq+0x12c>)
 c0070d0:	689b      	ldr	r3, [r3, #8]
 c0070d2:	f003 030c 	and.w	r3, r3, #12
 c0070d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c0070d8:	4b44      	ldr	r3, [pc, #272]	; (c0071ec <HAL_RCC_GetSysClockFreq+0x12c>)
 c0070da:	68db      	ldr	r3, [r3, #12]
 c0070dc:	f003 0303 	and.w	r3, r3, #3
 c0070e0:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c0070e2:	693b      	ldr	r3, [r7, #16]
 c0070e4:	2b00      	cmp	r3, #0
 c0070e6:	d005      	beq.n	c0070f4 <HAL_RCC_GetSysClockFreq+0x34>
 c0070e8:	693b      	ldr	r3, [r7, #16]
 c0070ea:	2b0c      	cmp	r3, #12
 c0070ec:	d121      	bne.n	c007132 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c0070ee:	68fb      	ldr	r3, [r7, #12]
 c0070f0:	2b01      	cmp	r3, #1
 c0070f2:	d11e      	bne.n	c007132 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c0070f4:	4b3d      	ldr	r3, [pc, #244]	; (c0071ec <HAL_RCC_GetSysClockFreq+0x12c>)
 c0070f6:	681b      	ldr	r3, [r3, #0]
 c0070f8:	f003 0308 	and.w	r3, r3, #8
 c0070fc:	2b00      	cmp	r3, #0
 c0070fe:	d107      	bne.n	c007110 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c007100:	4b3a      	ldr	r3, [pc, #232]	; (c0071ec <HAL_RCC_GetSysClockFreq+0x12c>)
 c007102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c007106:	0a1b      	lsrs	r3, r3, #8
 c007108:	f003 030f 	and.w	r3, r3, #15
 c00710c:	61fb      	str	r3, [r7, #28]
 c00710e:	e005      	b.n	c00711c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c007110:	4b36      	ldr	r3, [pc, #216]	; (c0071ec <HAL_RCC_GetSysClockFreq+0x12c>)
 c007112:	681b      	ldr	r3, [r3, #0]
 c007114:	091b      	lsrs	r3, r3, #4
 c007116:	f003 030f 	and.w	r3, r3, #15
 c00711a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c00711c:	4a34      	ldr	r2, [pc, #208]	; (c0071f0 <HAL_RCC_GetSysClockFreq+0x130>)
 c00711e:	69fb      	ldr	r3, [r7, #28]
 c007120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c007124:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c007126:	693b      	ldr	r3, [r7, #16]
 c007128:	2b00      	cmp	r3, #0
 c00712a:	d10d      	bne.n	c007148 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c00712c:	69fb      	ldr	r3, [r7, #28]
 c00712e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c007130:	e00a      	b.n	c007148 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c007132:	693b      	ldr	r3, [r7, #16]
 c007134:	2b04      	cmp	r3, #4
 c007136:	d102      	bne.n	c00713e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c007138:	4b2e      	ldr	r3, [pc, #184]	; (c0071f4 <HAL_RCC_GetSysClockFreq+0x134>)
 c00713a:	61bb      	str	r3, [r7, #24]
 c00713c:	e004      	b.n	c007148 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c00713e:	693b      	ldr	r3, [r7, #16]
 c007140:	2b08      	cmp	r3, #8
 c007142:	d101      	bne.n	c007148 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c007144:	4b2b      	ldr	r3, [pc, #172]	; (c0071f4 <HAL_RCC_GetSysClockFreq+0x134>)
 c007146:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c007148:	693b      	ldr	r3, [r7, #16]
 c00714a:	2b0c      	cmp	r3, #12
 c00714c:	d146      	bne.n	c0071dc <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c00714e:	4b27      	ldr	r3, [pc, #156]	; (c0071ec <HAL_RCC_GetSysClockFreq+0x12c>)
 c007150:	68db      	ldr	r3, [r3, #12]
 c007152:	f003 0303 	and.w	r3, r3, #3
 c007156:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c007158:	4b24      	ldr	r3, [pc, #144]	; (c0071ec <HAL_RCC_GetSysClockFreq+0x12c>)
 c00715a:	68db      	ldr	r3, [r3, #12]
 c00715c:	091b      	lsrs	r3, r3, #4
 c00715e:	f003 030f 	and.w	r3, r3, #15
 c007162:	3301      	adds	r3, #1
 c007164:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 c007166:	68bb      	ldr	r3, [r7, #8]
 c007168:	2b02      	cmp	r3, #2
 c00716a:	d003      	beq.n	c007174 <HAL_RCC_GetSysClockFreq+0xb4>
 c00716c:	68bb      	ldr	r3, [r7, #8]
 c00716e:	2b03      	cmp	r3, #3
 c007170:	d00d      	beq.n	c00718e <HAL_RCC_GetSysClockFreq+0xce>
 c007172:	e019      	b.n	c0071a8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c007174:	4a1f      	ldr	r2, [pc, #124]	; (c0071f4 <HAL_RCC_GetSysClockFreq+0x134>)
 c007176:	687b      	ldr	r3, [r7, #4]
 c007178:	fbb2 f3f3 	udiv	r3, r2, r3
 c00717c:	4a1b      	ldr	r2, [pc, #108]	; (c0071ec <HAL_RCC_GetSysClockFreq+0x12c>)
 c00717e:	68d2      	ldr	r2, [r2, #12]
 c007180:	0a12      	lsrs	r2, r2, #8
 c007182:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c007186:	fb02 f303 	mul.w	r3, r2, r3
 c00718a:	617b      	str	r3, [r7, #20]
        break;
 c00718c:	e019      	b.n	c0071c2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00718e:	4a19      	ldr	r2, [pc, #100]	; (c0071f4 <HAL_RCC_GetSysClockFreq+0x134>)
 c007190:	687b      	ldr	r3, [r7, #4]
 c007192:	fbb2 f3f3 	udiv	r3, r2, r3
 c007196:	4a15      	ldr	r2, [pc, #84]	; (c0071ec <HAL_RCC_GetSysClockFreq+0x12c>)
 c007198:	68d2      	ldr	r2, [r2, #12]
 c00719a:	0a12      	lsrs	r2, r2, #8
 c00719c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0071a0:	fb02 f303 	mul.w	r3, r2, r3
 c0071a4:	617b      	str	r3, [r7, #20]
        break;
 c0071a6:	e00c      	b.n	c0071c2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0071a8:	69fa      	ldr	r2, [r7, #28]
 c0071aa:	687b      	ldr	r3, [r7, #4]
 c0071ac:	fbb2 f3f3 	udiv	r3, r2, r3
 c0071b0:	4a0e      	ldr	r2, [pc, #56]	; (c0071ec <HAL_RCC_GetSysClockFreq+0x12c>)
 c0071b2:	68d2      	ldr	r2, [r2, #12]
 c0071b4:	0a12      	lsrs	r2, r2, #8
 c0071b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0071ba:	fb02 f303 	mul.w	r3, r2, r3
 c0071be:	617b      	str	r3, [r7, #20]
        break;
 c0071c0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c0071c2:	4b0a      	ldr	r3, [pc, #40]	; (c0071ec <HAL_RCC_GetSysClockFreq+0x12c>)
 c0071c4:	68db      	ldr	r3, [r3, #12]
 c0071c6:	0e5b      	lsrs	r3, r3, #25
 c0071c8:	f003 0303 	and.w	r3, r3, #3
 c0071cc:	3301      	adds	r3, #1
 c0071ce:	005b      	lsls	r3, r3, #1
 c0071d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 c0071d2:	697a      	ldr	r2, [r7, #20]
 c0071d4:	683b      	ldr	r3, [r7, #0]
 c0071d6:	fbb2 f3f3 	udiv	r3, r2, r3
 c0071da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 c0071dc:	69bb      	ldr	r3, [r7, #24]
}
 c0071de:	4618      	mov	r0, r3
 c0071e0:	3724      	adds	r7, #36	; 0x24
 c0071e2:	46bd      	mov	sp, r7
 c0071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0071e8:	4770      	bx	lr
 c0071ea:	bf00      	nop
 c0071ec:	50021000 	.word	0x50021000
 c0071f0:	0c00a8a8 	.word	0x0c00a8a8
 c0071f4:	00f42400 	.word	0x00f42400

0c0071f8 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c0071f8:	b580      	push	{r7, lr}
 c0071fa:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c0071fc:	f7ff ff60 	bl	c0070c0 <HAL_RCC_GetSysClockFreq>
 c007200:	4602      	mov	r2, r0
 c007202:	4b05      	ldr	r3, [pc, #20]	; (c007218 <HAL_RCC_GetHCLKFreq+0x20>)
 c007204:	689b      	ldr	r3, [r3, #8]
 c007206:	091b      	lsrs	r3, r3, #4
 c007208:	f003 030f 	and.w	r3, r3, #15
 c00720c:	4903      	ldr	r1, [pc, #12]	; (c00721c <HAL_RCC_GetHCLKFreq+0x24>)
 c00720e:	5ccb      	ldrb	r3, [r1, r3]
 c007210:	fa22 f303 	lsr.w	r3, r2, r3
}
 c007214:	4618      	mov	r0, r3
 c007216:	bd80      	pop	{r7, pc}
 c007218:	50021000 	.word	0x50021000
 c00721c:	0c00a890 	.word	0x0c00a890

0c007220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c007220:	b580      	push	{r7, lr}
 c007222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c007224:	f7ff ffe8 	bl	c0071f8 <HAL_RCC_GetHCLKFreq>
 c007228:	4602      	mov	r2, r0
 c00722a:	4b05      	ldr	r3, [pc, #20]	; (c007240 <HAL_RCC_GetPCLK1Freq+0x20>)
 c00722c:	689b      	ldr	r3, [r3, #8]
 c00722e:	0a1b      	lsrs	r3, r3, #8
 c007230:	f003 0307 	and.w	r3, r3, #7
 c007234:	4903      	ldr	r1, [pc, #12]	; (c007244 <HAL_RCC_GetPCLK1Freq+0x24>)
 c007236:	5ccb      	ldrb	r3, [r1, r3]
 c007238:	fa22 f303 	lsr.w	r3, r2, r3
}
 c00723c:	4618      	mov	r0, r3
 c00723e:	bd80      	pop	{r7, pc}
 c007240:	50021000 	.word	0x50021000
 c007244:	0c00a8a0 	.word	0x0c00a8a0

0c007248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c007248:	b580      	push	{r7, lr}
 c00724a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c00724c:	f7ff ffd4 	bl	c0071f8 <HAL_RCC_GetHCLKFreq>
 c007250:	4602      	mov	r2, r0
 c007252:	4b05      	ldr	r3, [pc, #20]	; (c007268 <HAL_RCC_GetPCLK2Freq+0x20>)
 c007254:	689b      	ldr	r3, [r3, #8]
 c007256:	0adb      	lsrs	r3, r3, #11
 c007258:	f003 0307 	and.w	r3, r3, #7
 c00725c:	4903      	ldr	r1, [pc, #12]	; (c00726c <HAL_RCC_GetPCLK2Freq+0x24>)
 c00725e:	5ccb      	ldrb	r3, [r1, r3]
 c007260:	fa22 f303 	lsr.w	r3, r2, r3
}
 c007264:	4618      	mov	r0, r3
 c007266:	bd80      	pop	{r7, pc}
 c007268:	50021000 	.word	0x50021000
 c00726c:	0c00a8a0 	.word	0x0c00a8a0

0c007270 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c007270:	b580      	push	{r7, lr}
 c007272:	b086      	sub	sp, #24
 c007274:	af00      	add	r7, sp, #0
 c007276:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 c007278:	2300      	movs	r3, #0
 c00727a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c00727c:	4b2c      	ldr	r3, [pc, #176]	; (c007330 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c00727e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c007280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c007284:	2b00      	cmp	r3, #0
 c007286:	d003      	beq.n	c007290 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c007288:	f7ff f862 	bl	c006350 <HAL_PWREx_GetVoltageRange>
 c00728c:	6138      	str	r0, [r7, #16]
 c00728e:	e014      	b.n	c0072ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c007290:	4b27      	ldr	r3, [pc, #156]	; (c007330 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c007292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c007294:	4a26      	ldr	r2, [pc, #152]	; (c007330 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c007296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c00729a:	6593      	str	r3, [r2, #88]	; 0x58
 c00729c:	4b24      	ldr	r3, [pc, #144]	; (c007330 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c00729e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0072a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0072a4:	60fb      	str	r3, [r7, #12]
 c0072a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c0072a8:	f7ff f852 	bl	c006350 <HAL_PWREx_GetVoltageRange>
 c0072ac:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 c0072ae:	4b20      	ldr	r3, [pc, #128]	; (c007330 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0072b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0072b2:	4a1f      	ldr	r2, [pc, #124]	; (c007330 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0072b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c0072b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c0072ba:	693b      	ldr	r3, [r7, #16]
 c0072bc:	2b00      	cmp	r3, #0
 c0072be:	d003      	beq.n	c0072c8 <RCC_SetFlashLatencyFromMSIRange+0x58>
 c0072c0:	693b      	ldr	r3, [r7, #16]
 c0072c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0072c6:	d10b      	bne.n	c0072e0 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 c0072c8:	687b      	ldr	r3, [r7, #4]
 c0072ca:	2b80      	cmp	r3, #128	; 0x80
 c0072cc:	d919      	bls.n	c007302 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 c0072ce:	687b      	ldr	r3, [r7, #4]
 c0072d0:	2ba0      	cmp	r3, #160	; 0xa0
 c0072d2:	d902      	bls.n	c0072da <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c0072d4:	2302      	movs	r3, #2
 c0072d6:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c0072d8:	e013      	b.n	c007302 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c0072da:	2301      	movs	r3, #1
 c0072dc:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c0072de:	e010      	b.n	c007302 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c0072e0:	687b      	ldr	r3, [r7, #4]
 c0072e2:	2b80      	cmp	r3, #128	; 0x80
 c0072e4:	d902      	bls.n	c0072ec <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 c0072e6:	2303      	movs	r3, #3
 c0072e8:	617b      	str	r3, [r7, #20]
 c0072ea:	e00a      	b.n	c007302 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c0072ec:	687b      	ldr	r3, [r7, #4]
 c0072ee:	2b80      	cmp	r3, #128	; 0x80
 c0072f0:	d102      	bne.n	c0072f8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c0072f2:	2302      	movs	r3, #2
 c0072f4:	617b      	str	r3, [r7, #20]
 c0072f6:	e004      	b.n	c007302 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 c0072f8:	687b      	ldr	r3, [r7, #4]
 c0072fa:	2b70      	cmp	r3, #112	; 0x70
 c0072fc:	d101      	bne.n	c007302 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c0072fe:	2301      	movs	r3, #1
 c007300:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c007302:	4b0c      	ldr	r3, [pc, #48]	; (c007334 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c007304:	681b      	ldr	r3, [r3, #0]
 c007306:	f023 020f 	bic.w	r2, r3, #15
 c00730a:	490a      	ldr	r1, [pc, #40]	; (c007334 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c00730c:	697b      	ldr	r3, [r7, #20]
 c00730e:	4313      	orrs	r3, r2
 c007310:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c007312:	4b08      	ldr	r3, [pc, #32]	; (c007334 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c007314:	681b      	ldr	r3, [r3, #0]
 c007316:	f003 030f 	and.w	r3, r3, #15
 c00731a:	697a      	ldr	r2, [r7, #20]
 c00731c:	429a      	cmp	r2, r3
 c00731e:	d001      	beq.n	c007324 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 c007320:	2301      	movs	r3, #1
 c007322:	e000      	b.n	c007326 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 c007324:	2300      	movs	r3, #0
}
 c007326:	4618      	mov	r0, r3
 c007328:	3718      	adds	r7, #24
 c00732a:	46bd      	mov	sp, r7
 c00732c:	bd80      	pop	{r7, pc}
 c00732e:	bf00      	nop
 c007330:	50021000 	.word	0x50021000
 c007334:	50022000 	.word	0x50022000

0c007338 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 c007338:	b480      	push	{r7}
 c00733a:	b087      	sub	sp, #28
 c00733c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 c00733e:	2300      	movs	r3, #0
 c007340:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 c007342:	4b36      	ldr	r3, [pc, #216]	; (c00741c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c007344:	68db      	ldr	r3, [r3, #12]
 c007346:	f003 0303 	and.w	r3, r3, #3
 c00734a:	2b01      	cmp	r3, #1
 c00734c:	d118      	bne.n	c007380 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c00734e:	4b33      	ldr	r3, [pc, #204]	; (c00741c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c007350:	681b      	ldr	r3, [r3, #0]
 c007352:	f003 0308 	and.w	r3, r3, #8
 c007356:	2b00      	cmp	r3, #0
 c007358:	d107      	bne.n	c00736a <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c00735a:	4b30      	ldr	r3, [pc, #192]	; (c00741c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c00735c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c007360:	0a1b      	lsrs	r3, r3, #8
 c007362:	f003 030f 	and.w	r3, r3, #15
 c007366:	617b      	str	r3, [r7, #20]
 c007368:	e005      	b.n	c007376 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c00736a:	4b2c      	ldr	r3, [pc, #176]	; (c00741c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c00736c:	681b      	ldr	r3, [r3, #0]
 c00736e:	091b      	lsrs	r3, r3, #4
 c007370:	f003 030f 	and.w	r3, r3, #15
 c007374:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c007376:	4a2a      	ldr	r2, [pc, #168]	; (c007420 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 c007378:	697b      	ldr	r3, [r7, #20]
 c00737a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00737e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c007380:	4b26      	ldr	r3, [pc, #152]	; (c00741c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c007382:	68db      	ldr	r3, [r3, #12]
 c007384:	f003 0303 	and.w	r3, r3, #3
 c007388:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c00738a:	4b24      	ldr	r3, [pc, #144]	; (c00741c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c00738c:	68db      	ldr	r3, [r3, #12]
 c00738e:	091b      	lsrs	r3, r3, #4
 c007390:	f003 030f 	and.w	r3, r3, #15
 c007394:	3301      	adds	r3, #1
 c007396:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 c007398:	68fb      	ldr	r3, [r7, #12]
 c00739a:	2b02      	cmp	r3, #2
 c00739c:	d003      	beq.n	c0073a6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 c00739e:	68fb      	ldr	r3, [r7, #12]
 c0073a0:	2b03      	cmp	r3, #3
 c0073a2:	d00d      	beq.n	c0073c0 <RCC_GetSysClockFreqFromPLLSource+0x88>
 c0073a4:	e019      	b.n	c0073da <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0073a6:	4a1f      	ldr	r2, [pc, #124]	; (c007424 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 c0073a8:	68bb      	ldr	r3, [r7, #8]
 c0073aa:	fbb2 f3f3 	udiv	r3, r2, r3
 c0073ae:	4a1b      	ldr	r2, [pc, #108]	; (c00741c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0073b0:	68d2      	ldr	r2, [r2, #12]
 c0073b2:	0a12      	lsrs	r2, r2, #8
 c0073b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0073b8:	fb02 f303 	mul.w	r3, r2, r3
 c0073bc:	613b      	str	r3, [r7, #16]
      break;
 c0073be:	e019      	b.n	c0073f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0073c0:	4a18      	ldr	r2, [pc, #96]	; (c007424 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 c0073c2:	68bb      	ldr	r3, [r7, #8]
 c0073c4:	fbb2 f3f3 	udiv	r3, r2, r3
 c0073c8:	4a14      	ldr	r2, [pc, #80]	; (c00741c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0073ca:	68d2      	ldr	r2, [r2, #12]
 c0073cc:	0a12      	lsrs	r2, r2, #8
 c0073ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0073d2:	fb02 f303 	mul.w	r3, r2, r3
 c0073d6:	613b      	str	r3, [r7, #16]
      break;
 c0073d8:	e00c      	b.n	c0073f4 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0073da:	697a      	ldr	r2, [r7, #20]
 c0073dc:	68bb      	ldr	r3, [r7, #8]
 c0073de:	fbb2 f3f3 	udiv	r3, r2, r3
 c0073e2:	4a0e      	ldr	r2, [pc, #56]	; (c00741c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0073e4:	68d2      	ldr	r2, [r2, #12]
 c0073e6:	0a12      	lsrs	r2, r2, #8
 c0073e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0073ec:	fb02 f303 	mul.w	r3, r2, r3
 c0073f0:	613b      	str	r3, [r7, #16]
      break;
 c0073f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c0073f4:	4b09      	ldr	r3, [pc, #36]	; (c00741c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0073f6:	68db      	ldr	r3, [r3, #12]
 c0073f8:	0e5b      	lsrs	r3, r3, #25
 c0073fa:	f003 0303 	and.w	r3, r3, #3
 c0073fe:	3301      	adds	r3, #1
 c007400:	005b      	lsls	r3, r3, #1
 c007402:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 c007404:	693a      	ldr	r2, [r7, #16]
 c007406:	687b      	ldr	r3, [r7, #4]
 c007408:	fbb2 f3f3 	udiv	r3, r2, r3
 c00740c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 c00740e:	683b      	ldr	r3, [r7, #0]
}
 c007410:	4618      	mov	r0, r3
 c007412:	371c      	adds	r7, #28
 c007414:	46bd      	mov	sp, r7
 c007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00741a:	4770      	bx	lr
 c00741c:	50021000 	.word	0x50021000
 c007420:	0c00a8a8 	.word	0x0c00a8a8
 c007424:	00f42400 	.word	0x00f42400

0c007428 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 c007428:	b580      	push	{r7, lr}
 c00742a:	b088      	sub	sp, #32
 c00742c:	af00      	add	r7, sp, #0
 c00742e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c007430:	2300      	movs	r3, #0
 c007432:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c007434:	2300      	movs	r3, #0
 c007436:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c007438:	687b      	ldr	r3, [r7, #4]
 c00743a:	681b      	ldr	r3, [r3, #0]
 c00743c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c007440:	2b00      	cmp	r3, #0
 c007442:	d040      	beq.n	c0074c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 c007444:	687b      	ldr	r3, [r7, #4]
 c007446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c007448:	2b80      	cmp	r3, #128	; 0x80
 c00744a:	d02a      	beq.n	c0074a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c00744c:	2b80      	cmp	r3, #128	; 0x80
 c00744e:	d825      	bhi.n	c00749c <HAL_RCCEx_PeriphCLKConfig+0x74>
 c007450:	2b60      	cmp	r3, #96	; 0x60
 c007452:	d026      	beq.n	c0074a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c007454:	2b60      	cmp	r3, #96	; 0x60
 c007456:	d821      	bhi.n	c00749c <HAL_RCCEx_PeriphCLKConfig+0x74>
 c007458:	2b40      	cmp	r3, #64	; 0x40
 c00745a:	d006      	beq.n	c00746a <HAL_RCCEx_PeriphCLKConfig+0x42>
 c00745c:	2b40      	cmp	r3, #64	; 0x40
 c00745e:	d81d      	bhi.n	c00749c <HAL_RCCEx_PeriphCLKConfig+0x74>
 c007460:	2b00      	cmp	r3, #0
 c007462:	d009      	beq.n	c007478 <HAL_RCCEx_PeriphCLKConfig+0x50>
 c007464:	2b20      	cmp	r3, #32
 c007466:	d010      	beq.n	c00748a <HAL_RCCEx_PeriphCLKConfig+0x62>
 c007468:	e018      	b.n	c00749c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c00746a:	4b8f      	ldr	r3, [pc, #572]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00746c:	68db      	ldr	r3, [r3, #12]
 c00746e:	4a8e      	ldr	r2, [pc, #568]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c007474:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c007476:	e015      	b.n	c0074a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c007478:	687b      	ldr	r3, [r7, #4]
 c00747a:	3304      	adds	r3, #4
 c00747c:	2100      	movs	r1, #0
 c00747e:	4618      	mov	r0, r3
 c007480:	f000 fb56 	bl	c007b30 <RCCEx_PLLSAI1_Config>
 c007484:	4603      	mov	r3, r0
 c007486:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c007488:	e00c      	b.n	c0074a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c00748a:	687b      	ldr	r3, [r7, #4]
 c00748c:	3320      	adds	r3, #32
 c00748e:	2100      	movs	r1, #0
 c007490:	4618      	mov	r0, r3
 c007492:	f000 fc33 	bl	c007cfc <RCCEx_PLLSAI2_Config>
 c007496:	4603      	mov	r3, r0
 c007498:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c00749a:	e003      	b.n	c0074a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c00749c:	2301      	movs	r3, #1
 c00749e:	77fb      	strb	r3, [r7, #31]
        break;
 c0074a0:	e000      	b.n	c0074a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 c0074a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0074a4:	7ffb      	ldrb	r3, [r7, #31]
 c0074a6:	2b00      	cmp	r3, #0
 c0074a8:	d10b      	bne.n	c0074c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c0074aa:	4b7f      	ldr	r3, [pc, #508]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0074ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0074b0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 c0074b4:	687b      	ldr	r3, [r7, #4]
 c0074b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c0074b8:	497b      	ldr	r1, [pc, #492]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0074ba:	4313      	orrs	r3, r2
 c0074bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c0074c0:	e001      	b.n	c0074c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0074c2:	7ffb      	ldrb	r3, [r7, #31]
 c0074c4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c0074c6:	687b      	ldr	r3, [r7, #4]
 c0074c8:	681b      	ldr	r3, [r3, #0]
 c0074ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c0074ce:	2b00      	cmp	r3, #0
 c0074d0:	d047      	beq.n	c007562 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 c0074d2:	687b      	ldr	r3, [r7, #4]
 c0074d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c0074d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0074da:	d030      	beq.n	c00753e <HAL_RCCEx_PeriphCLKConfig+0x116>
 c0074dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0074e0:	d82a      	bhi.n	c007538 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c0074e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c0074e6:	d02a      	beq.n	c00753e <HAL_RCCEx_PeriphCLKConfig+0x116>
 c0074e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c0074ec:	d824      	bhi.n	c007538 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c0074ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0074f2:	d008      	beq.n	c007506 <HAL_RCCEx_PeriphCLKConfig+0xde>
 c0074f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0074f8:	d81e      	bhi.n	c007538 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c0074fa:	2b00      	cmp	r3, #0
 c0074fc:	d00a      	beq.n	c007514 <HAL_RCCEx_PeriphCLKConfig+0xec>
 c0074fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c007502:	d010      	beq.n	c007526 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 c007504:	e018      	b.n	c007538 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c007506:	4b68      	ldr	r3, [pc, #416]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007508:	68db      	ldr	r3, [r3, #12]
 c00750a:	4a67      	ldr	r2, [pc, #412]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00750c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c007510:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c007512:	e015      	b.n	c007540 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c007514:	687b      	ldr	r3, [r7, #4]
 c007516:	3304      	adds	r3, #4
 c007518:	2100      	movs	r1, #0
 c00751a:	4618      	mov	r0, r3
 c00751c:	f000 fb08 	bl	c007b30 <RCCEx_PLLSAI1_Config>
 c007520:	4603      	mov	r3, r0
 c007522:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c007524:	e00c      	b.n	c007540 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c007526:	687b      	ldr	r3, [r7, #4]
 c007528:	3320      	adds	r3, #32
 c00752a:	2100      	movs	r1, #0
 c00752c:	4618      	mov	r0, r3
 c00752e:	f000 fbe5 	bl	c007cfc <RCCEx_PLLSAI2_Config>
 c007532:	4603      	mov	r3, r0
 c007534:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c007536:	e003      	b.n	c007540 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c007538:	2301      	movs	r3, #1
 c00753a:	77fb      	strb	r3, [r7, #31]
        break;
 c00753c:	e000      	b.n	c007540 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 c00753e:	bf00      	nop
    }

    if (ret == HAL_OK)
 c007540:	7ffb      	ldrb	r3, [r7, #31]
 c007542:	2b00      	cmp	r3, #0
 c007544:	d10b      	bne.n	c00755e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 c007546:	4b58      	ldr	r3, [pc, #352]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007548:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c00754c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c007550:	687b      	ldr	r3, [r7, #4]
 c007552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c007554:	4954      	ldr	r1, [pc, #336]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007556:	4313      	orrs	r3, r2
 c007558:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c00755c:	e001      	b.n	c007562 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00755e:	7ffb      	ldrb	r3, [r7, #31]
 c007560:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c007562:	687b      	ldr	r3, [r7, #4]
 c007564:	681b      	ldr	r3, [r3, #0]
 c007566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00756a:	2b00      	cmp	r3, #0
 c00756c:	f000 80ab 	beq.w	c0076c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 c007570:	2300      	movs	r3, #0
 c007572:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c007574:	4b4c      	ldr	r3, [pc, #304]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c007578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00757c:	2b00      	cmp	r3, #0
 c00757e:	d10d      	bne.n	c00759c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c007580:	4b49      	ldr	r3, [pc, #292]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c007584:	4a48      	ldr	r2, [pc, #288]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c00758a:	6593      	str	r3, [r2, #88]	; 0x58
 c00758c:	4b46      	ldr	r3, [pc, #280]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00758e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c007590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c007594:	60fb      	str	r3, [r7, #12]
 c007596:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 c007598:	2301      	movs	r3, #1
 c00759a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c00759c:	4b43      	ldr	r3, [pc, #268]	; (c0076ac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c00759e:	681b      	ldr	r3, [r3, #0]
 c0075a0:	4a42      	ldr	r2, [pc, #264]	; (c0076ac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c0075a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c0075a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c0075a8:	f7fd ff2e 	bl	c005408 <HAL_GetTick>
 c0075ac:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c0075ae:	e00f      	b.n	c0075d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c0075b0:	f7fd ff2a 	bl	c005408 <HAL_GetTick>
 c0075b4:	4602      	mov	r2, r0
 c0075b6:	693b      	ldr	r3, [r7, #16]
 c0075b8:	1ad3      	subs	r3, r2, r3
 c0075ba:	2b02      	cmp	r3, #2
 c0075bc:	d908      	bls.n	c0075d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c0075be:	4b3b      	ldr	r3, [pc, #236]	; (c0076ac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c0075c0:	681b      	ldr	r3, [r3, #0]
 c0075c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0075c6:	2b00      	cmp	r3, #0
 c0075c8:	d109      	bne.n	c0075de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 c0075ca:	2303      	movs	r3, #3
 c0075cc:	77fb      	strb	r3, [r7, #31]
        }
        break;
 c0075ce:	e006      	b.n	c0075de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c0075d0:	4b36      	ldr	r3, [pc, #216]	; (c0076ac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c0075d2:	681b      	ldr	r3, [r3, #0]
 c0075d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0075d8:	2b00      	cmp	r3, #0
 c0075da:	d0e9      	beq.n	c0075b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 c0075dc:	e000      	b.n	c0075e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 c0075de:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 c0075e0:	7ffb      	ldrb	r3, [r7, #31]
 c0075e2:	2b00      	cmp	r3, #0
 c0075e4:	d164      	bne.n	c0076b0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c0075e6:	4b30      	ldr	r3, [pc, #192]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0075e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0075ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c0075f0:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 c0075f2:	69bb      	ldr	r3, [r7, #24]
 c0075f4:	2b00      	cmp	r3, #0
 c0075f6:	d01f      	beq.n	c007638 <HAL_RCCEx_PeriphCLKConfig+0x210>
 c0075f8:	687b      	ldr	r3, [r7, #4]
 c0075fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0075fe:	69ba      	ldr	r2, [r7, #24]
 c007600:	429a      	cmp	r2, r3
 c007602:	d019      	beq.n	c007638 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c007604:	4b28      	ldr	r3, [pc, #160]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00760a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c00760e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c007610:	4b25      	ldr	r3, [pc, #148]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c007616:	4a24      	ldr	r2, [pc, #144]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c00761c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 c007620:	4b21      	ldr	r3, [pc, #132]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c007626:	4a20      	ldr	r2, [pc, #128]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c00762c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c007630:	4a1d      	ldr	r2, [pc, #116]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007632:	69bb      	ldr	r3, [r7, #24]
 c007634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c007638:	69bb      	ldr	r3, [r7, #24]
 c00763a:	f003 0301 	and.w	r3, r3, #1
 c00763e:	2b00      	cmp	r3, #0
 c007640:	d01f      	beq.n	c007682 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c007642:	f7fd fee1 	bl	c005408 <HAL_GetTick>
 c007646:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c007648:	e012      	b.n	c007670 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00764a:	f7fd fedd 	bl	c005408 <HAL_GetTick>
 c00764e:	4602      	mov	r2, r0
 c007650:	693b      	ldr	r3, [r7, #16]
 c007652:	1ad3      	subs	r3, r2, r3
 c007654:	f241 3288 	movw	r2, #5000	; 0x1388
 c007658:	4293      	cmp	r3, r2
 c00765a:	d909      	bls.n	c007670 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00765c:	4b12      	ldr	r3, [pc, #72]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00765e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c007662:	f003 0302 	and.w	r3, r3, #2
 c007666:	2b00      	cmp	r3, #0
 c007668:	d10a      	bne.n	c007680 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 c00766a:	2303      	movs	r3, #3
 c00766c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 c00766e:	e007      	b.n	c007680 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c007670:	4b0d      	ldr	r3, [pc, #52]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c007672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c007676:	f003 0302 	and.w	r3, r3, #2
 c00767a:	2b00      	cmp	r3, #0
 c00767c:	d0e5      	beq.n	c00764a <HAL_RCCEx_PeriphCLKConfig+0x222>
 c00767e:	e000      	b.n	c007682 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 c007680:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 c007682:	7ffb      	ldrb	r3, [r7, #31]
 c007684:	2b00      	cmp	r3, #0
 c007686:	d10c      	bne.n	c0076a2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 c007688:	4b07      	ldr	r3, [pc, #28]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00768a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00768e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c007692:	687b      	ldr	r3, [r7, #4]
 c007694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c007698:	4903      	ldr	r1, [pc, #12]	; (c0076a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00769a:	4313      	orrs	r3, r2
 c00769c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 c0076a0:	e008      	b.n	c0076b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c0076a2:	7ffb      	ldrb	r3, [r7, #31]
 c0076a4:	77bb      	strb	r3, [r7, #30]
 c0076a6:	e005      	b.n	c0076b4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 c0076a8:	50021000 	.word	0x50021000
 c0076ac:	50007000 	.word	0x50007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0076b0:	7ffb      	ldrb	r3, [r7, #31]
 c0076b2:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c0076b4:	7dfb      	ldrb	r3, [r7, #23]
 c0076b6:	2b01      	cmp	r3, #1
 c0076b8:	d105      	bne.n	c0076c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c0076ba:	4b9c      	ldr	r3, [pc, #624]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0076bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0076be:	4a9b      	ldr	r2, [pc, #620]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0076c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c0076c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c0076c6:	687b      	ldr	r3, [r7, #4]
 c0076c8:	681b      	ldr	r3, [r3, #0]
 c0076ca:	f003 0301 	and.w	r3, r3, #1
 c0076ce:	2b00      	cmp	r3, #0
 c0076d0:	d00a      	beq.n	c0076e8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 c0076d2:	4b96      	ldr	r3, [pc, #600]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0076d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0076d8:	f023 0203 	bic.w	r2, r3, #3
 c0076dc:	687b      	ldr	r3, [r7, #4]
 c0076de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0076e0:	4992      	ldr	r1, [pc, #584]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0076e2:	4313      	orrs	r3, r2
 c0076e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c0076e8:	687b      	ldr	r3, [r7, #4]
 c0076ea:	681b      	ldr	r3, [r3, #0]
 c0076ec:	f003 0302 	and.w	r3, r3, #2
 c0076f0:	2b00      	cmp	r3, #0
 c0076f2:	d00a      	beq.n	c00770a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 c0076f4:	4b8d      	ldr	r3, [pc, #564]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0076f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0076fa:	f023 020c 	bic.w	r2, r3, #12
 c0076fe:	687b      	ldr	r3, [r7, #4]
 c007700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c007702:	498a      	ldr	r1, [pc, #552]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007704:	4313      	orrs	r3, r2
 c007706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c00770a:	687b      	ldr	r3, [r7, #4]
 c00770c:	681b      	ldr	r3, [r3, #0]
 c00770e:	f003 0304 	and.w	r3, r3, #4
 c007712:	2b00      	cmp	r3, #0
 c007714:	d00a      	beq.n	c00772c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 c007716:	4b85      	ldr	r3, [pc, #532]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00771c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 c007720:	687b      	ldr	r3, [r7, #4]
 c007722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c007724:	4981      	ldr	r1, [pc, #516]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007726:	4313      	orrs	r3, r2
 c007728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c00772c:	687b      	ldr	r3, [r7, #4]
 c00772e:	681b      	ldr	r3, [r3, #0]
 c007730:	f003 0308 	and.w	r3, r3, #8
 c007734:	2b00      	cmp	r3, #0
 c007736:	d00a      	beq.n	c00774e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 c007738:	4b7c      	ldr	r3, [pc, #496]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00773a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00773e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 c007742:	687b      	ldr	r3, [r7, #4]
 c007744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c007746:	4979      	ldr	r1, [pc, #484]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007748:	4313      	orrs	r3, r2
 c00774a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c00774e:	687b      	ldr	r3, [r7, #4]
 c007750:	681b      	ldr	r3, [r3, #0]
 c007752:	f003 0310 	and.w	r3, r3, #16
 c007756:	2b00      	cmp	r3, #0
 c007758:	d00a      	beq.n	c007770 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 c00775a:	4b74      	ldr	r3, [pc, #464]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00775c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c007764:	687b      	ldr	r3, [r7, #4]
 c007766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c007768:	4970      	ldr	r1, [pc, #448]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00776a:	4313      	orrs	r3, r2
 c00776c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c007770:	687b      	ldr	r3, [r7, #4]
 c007772:	681b      	ldr	r3, [r3, #0]
 c007774:	f003 0320 	and.w	r3, r3, #32
 c007778:	2b00      	cmp	r3, #0
 c00777a:	d00a      	beq.n	c007792 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 c00777c:	4b6b      	ldr	r3, [pc, #428]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00777e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007782:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 c007786:	687b      	ldr	r3, [r7, #4]
 c007788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c00778a:	4968      	ldr	r1, [pc, #416]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00778c:	4313      	orrs	r3, r2
 c00778e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c007792:	687b      	ldr	r3, [r7, #4]
 c007794:	681b      	ldr	r3, [r3, #0]
 c007796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c00779a:	2b00      	cmp	r3, #0
 c00779c:	d00a      	beq.n	c0077b4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 c00779e:	4b63      	ldr	r3, [pc, #396]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0077a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0077a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 c0077a8:	687b      	ldr	r3, [r7, #4]
 c0077aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0077ac:	495f      	ldr	r1, [pc, #380]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0077ae:	4313      	orrs	r3, r2
 c0077b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c0077b4:	687b      	ldr	r3, [r7, #4]
 c0077b6:	681b      	ldr	r3, [r3, #0]
 c0077b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0077bc:	2b00      	cmp	r3, #0
 c0077be:	d00a      	beq.n	c0077d6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 c0077c0:	4b5a      	ldr	r3, [pc, #360]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0077c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0077c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c0077ca:	687b      	ldr	r3, [r7, #4]
 c0077cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0077ce:	4957      	ldr	r1, [pc, #348]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0077d0:	4313      	orrs	r3, r2
 c0077d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 c0077d6:	687b      	ldr	r3, [r7, #4]
 c0077d8:	681b      	ldr	r3, [r3, #0]
 c0077da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c0077de:	2b00      	cmp	r3, #0
 c0077e0:	d00a      	beq.n	c0077f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 c0077e2:	4b52      	ldr	r3, [pc, #328]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0077e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0077e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 c0077ec:	687b      	ldr	r3, [r7, #4]
 c0077ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c0077f0:	494e      	ldr	r1, [pc, #312]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0077f2:	4313      	orrs	r3, r2
 c0077f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 c0077f8:	687b      	ldr	r3, [r7, #4]
 c0077fa:	681b      	ldr	r3, [r3, #0]
 c0077fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c007800:	2b00      	cmp	r3, #0
 c007802:	d031      	beq.n	c007868 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 c007804:	687b      	ldr	r3, [r7, #4]
 c007806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c007808:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c00780c:	d00e      	beq.n	c00782c <HAL_RCCEx_PeriphCLKConfig+0x404>
 c00780e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c007812:	d814      	bhi.n	c00783e <HAL_RCCEx_PeriphCLKConfig+0x416>
 c007814:	2b00      	cmp	r3, #0
 c007816:	d015      	beq.n	c007844 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c007818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c00781c:	d10f      	bne.n	c00783e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c00781e:	4b43      	ldr	r3, [pc, #268]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007820:	68db      	ldr	r3, [r3, #12]
 c007822:	4a42      	ldr	r2, [pc, #264]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007824:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c007828:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c00782a:	e00c      	b.n	c007846 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c00782c:	687b      	ldr	r3, [r7, #4]
 c00782e:	3304      	adds	r3, #4
 c007830:	2100      	movs	r1, #0
 c007832:	4618      	mov	r0, r3
 c007834:	f000 f97c 	bl	c007b30 <RCCEx_PLLSAI1_Config>
 c007838:	4603      	mov	r3, r0
 c00783a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c00783c:	e003      	b.n	c007846 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 c00783e:	2301      	movs	r3, #1
 c007840:	77fb      	strb	r3, [r7, #31]
        break;
 c007842:	e000      	b.n	c007846 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 c007844:	bf00      	nop
    }

    if (ret == HAL_OK)
 c007846:	7ffb      	ldrb	r3, [r7, #31]
 c007848:	2b00      	cmp	r3, #0
 c00784a:	d10b      	bne.n	c007864 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 c00784c:	4b37      	ldr	r3, [pc, #220]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00784e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007852:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 c007856:	687b      	ldr	r3, [r7, #4]
 c007858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c00785a:	4934      	ldr	r1, [pc, #208]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00785c:	4313      	orrs	r3, r2
 c00785e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c007862:	e001      	b.n	c007868 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c007864:	7ffb      	ldrb	r3, [r7, #31]
 c007866:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c007868:	687b      	ldr	r3, [r7, #4]
 c00786a:	681b      	ldr	r3, [r3, #0]
 c00786c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c007870:	2b00      	cmp	r3, #0
 c007872:	d00a      	beq.n	c00788a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 c007874:	4b2d      	ldr	r3, [pc, #180]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00787a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 c00787e:	687b      	ldr	r3, [r7, #4]
 c007880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c007882:	492a      	ldr	r1, [pc, #168]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007884:	4313      	orrs	r3, r2
 c007886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c00788a:	687b      	ldr	r3, [r7, #4]
 c00788c:	681b      	ldr	r3, [r3, #0]
 c00788e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c007892:	2b00      	cmp	r3, #0
 c007894:	d00a      	beq.n	c0078ac <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 c007896:	4b25      	ldr	r3, [pc, #148]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00789c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 c0078a0:	687b      	ldr	r3, [r7, #4]
 c0078a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c0078a4:	4921      	ldr	r1, [pc, #132]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0078a6:	4313      	orrs	r3, r2
 c0078a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c0078ac:	687b      	ldr	r3, [r7, #4]
 c0078ae:	681b      	ldr	r3, [r3, #0]
 c0078b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0078b4:	2b00      	cmp	r3, #0
 c0078b6:	d00a      	beq.n	c0078ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 c0078b8:	4b1c      	ldr	r3, [pc, #112]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0078ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0078be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 c0078c2:	687b      	ldr	r3, [r7, #4]
 c0078c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0078c6:	4919      	ldr	r1, [pc, #100]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0078c8:	4313      	orrs	r3, r2
 c0078ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c0078ce:	687b      	ldr	r3, [r7, #4]
 c0078d0:	681b      	ldr	r3, [r3, #0]
 c0078d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c0078d6:	2b00      	cmp	r3, #0
 c0078d8:	d00a      	beq.n	c0078f0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 c0078da:	4b14      	ldr	r3, [pc, #80]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0078dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0078e0:	f023 0203 	bic.w	r2, r3, #3
 c0078e4:	687b      	ldr	r3, [r7, #4]
 c0078e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0078e8:	4910      	ldr	r1, [pc, #64]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0078ea:	4313      	orrs	r3, r2
 c0078ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 c0078f0:	687b      	ldr	r3, [r7, #4]
 c0078f2:	681b      	ldr	r3, [r3, #0]
 c0078f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c0078f8:	2b00      	cmp	r3, #0
 c0078fa:	d02b      	beq.n	c007954 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c0078fc:	4b0b      	ldr	r3, [pc, #44]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0078fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007902:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c007906:	687b      	ldr	r3, [r7, #4]
 c007908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c00790a:	4908      	ldr	r1, [pc, #32]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00790c:	4313      	orrs	r3, r2
 c00790e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c007912:	687b      	ldr	r3, [r7, #4]
 c007914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c007916:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c00791a:	d109      	bne.n	c007930 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c00791c:	4b03      	ldr	r3, [pc, #12]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00791e:	68db      	ldr	r3, [r3, #12]
 c007920:	4a02      	ldr	r2, [pc, #8]	; (c00792c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c007922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c007926:	60d3      	str	r3, [r2, #12]
 c007928:	e014      	b.n	c007954 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 c00792a:	bf00      	nop
 c00792c:	50021000 	.word	0x50021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 c007930:	687b      	ldr	r3, [r7, #4]
 c007932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c007934:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c007938:	d10c      	bne.n	c007954 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c00793a:	687b      	ldr	r3, [r7, #4]
 c00793c:	3304      	adds	r3, #4
 c00793e:	2101      	movs	r1, #1
 c007940:	4618      	mov	r0, r3
 c007942:	f000 f8f5 	bl	c007b30 <RCCEx_PLLSAI1_Config>
 c007946:	4603      	mov	r3, r0
 c007948:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 c00794a:	7ffb      	ldrb	r3, [r7, #31]
 c00794c:	2b00      	cmp	r3, #0
 c00794e:	d001      	beq.n	c007954 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 c007950:	7ffb      	ldrb	r3, [r7, #31]
 c007952:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 c007954:	687b      	ldr	r3, [r7, #4]
 c007956:	681b      	ldr	r3, [r3, #0]
 c007958:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c00795c:	2b00      	cmp	r3, #0
 c00795e:	d04a      	beq.n	c0079f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c007960:	687b      	ldr	r3, [r7, #4]
 c007962:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c007964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c007968:	d108      	bne.n	c00797c <HAL_RCCEx_PeriphCLKConfig+0x554>
 c00796a:	4b70      	ldr	r3, [pc, #448]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00796c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c007970:	4a6e      	ldr	r2, [pc, #440]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c007976:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 c00797a:	e012      	b.n	c0079a2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 c00797c:	4b6b      	ldr	r3, [pc, #428]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00797e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007982:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c007986:	687b      	ldr	r3, [r7, #4]
 c007988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c00798a:	4968      	ldr	r1, [pc, #416]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00798c:	4313      	orrs	r3, r2
 c00798e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c007992:	4b66      	ldr	r3, [pc, #408]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007994:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c007998:	4a64      	ldr	r2, [pc, #400]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00799a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 c00799e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c0079a2:	687b      	ldr	r3, [r7, #4]
 c0079a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c0079a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c0079aa:	d10d      	bne.n	c0079c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c0079ac:	687b      	ldr	r3, [r7, #4]
 c0079ae:	3304      	adds	r3, #4
 c0079b0:	2101      	movs	r1, #1
 c0079b2:	4618      	mov	r0, r3
 c0079b4:	f000 f8bc 	bl	c007b30 <RCCEx_PLLSAI1_Config>
 c0079b8:	4603      	mov	r3, r0
 c0079ba:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c0079bc:	7ffb      	ldrb	r3, [r7, #31]
 c0079be:	2b00      	cmp	r3, #0
 c0079c0:	d019      	beq.n	c0079f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 c0079c2:	7ffb      	ldrb	r3, [r7, #31]
 c0079c4:	77bb      	strb	r3, [r7, #30]
 c0079c6:	e016      	b.n	c0079f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 c0079c8:	687b      	ldr	r3, [r7, #4]
 c0079ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c0079cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c0079d0:	d106      	bne.n	c0079e0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0079d2:	4b56      	ldr	r3, [pc, #344]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0079d4:	68db      	ldr	r3, [r3, #12]
 c0079d6:	4a55      	ldr	r2, [pc, #340]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0079d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0079dc:	60d3      	str	r3, [r2, #12]
 c0079de:	e00a      	b.n	c0079f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 c0079e0:	687b      	ldr	r3, [r7, #4]
 c0079e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c0079e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c0079e8:	d105      	bne.n	c0079f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c0079ea:	4b50      	ldr	r3, [pc, #320]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0079ec:	68db      	ldr	r3, [r3, #12]
 c0079ee:	4a4f      	ldr	r2, [pc, #316]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0079f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0079f4:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 c0079f6:	687b      	ldr	r3, [r7, #4]
 c0079f8:	681b      	ldr	r3, [r3, #0]
 c0079fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c0079fe:	2b00      	cmp	r3, #0
 c007a00:	d028      	beq.n	c007a54 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c007a02:	4b4a      	ldr	r3, [pc, #296]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007a08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c007a0c:	687b      	ldr	r3, [r7, #4]
 c007a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c007a10:	4946      	ldr	r1, [pc, #280]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007a12:	4313      	orrs	r3, r2
 c007a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c007a18:	687b      	ldr	r3, [r7, #4]
 c007a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c007a1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c007a20:	d106      	bne.n	c007a30 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c007a22:	4b42      	ldr	r3, [pc, #264]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007a24:	68db      	ldr	r3, [r3, #12]
 c007a26:	4a41      	ldr	r2, [pc, #260]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007a28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c007a2c:	60d3      	str	r3, [r2, #12]
 c007a2e:	e011      	b.n	c007a54 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 c007a30:	687b      	ldr	r3, [r7, #4]
 c007a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c007a34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c007a38:	d10c      	bne.n	c007a54 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c007a3a:	687b      	ldr	r3, [r7, #4]
 c007a3c:	3304      	adds	r3, #4
 c007a3e:	2101      	movs	r1, #1
 c007a40:	4618      	mov	r0, r3
 c007a42:	f000 f875 	bl	c007b30 <RCCEx_PLLSAI1_Config>
 c007a46:	4603      	mov	r3, r0
 c007a48:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c007a4a:	7ffb      	ldrb	r3, [r7, #31]
 c007a4c:	2b00      	cmp	r3, #0
 c007a4e:	d001      	beq.n	c007a54 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 c007a50:	7ffb      	ldrb	r3, [r7, #31]
 c007a52:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 c007a54:	687b      	ldr	r3, [r7, #4]
 c007a56:	681b      	ldr	r3, [r3, #0]
 c007a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c007a5c:	2b00      	cmp	r3, #0
 c007a5e:	d01e      	beq.n	c007a9e <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c007a60:	4b32      	ldr	r3, [pc, #200]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007a66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 c007a6a:	687b      	ldr	r3, [r7, #4]
 c007a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c007a70:	492e      	ldr	r1, [pc, #184]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007a72:	4313      	orrs	r3, r2
 c007a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c007a78:	687b      	ldr	r3, [r7, #4]
 c007a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c007a7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c007a82:	d10c      	bne.n	c007a9e <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 c007a84:	687b      	ldr	r3, [r7, #4]
 c007a86:	3304      	adds	r3, #4
 c007a88:	2102      	movs	r1, #2
 c007a8a:	4618      	mov	r0, r3
 c007a8c:	f000 f850 	bl	c007b30 <RCCEx_PLLSAI1_Config>
 c007a90:	4603      	mov	r3, r0
 c007a92:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c007a94:	7ffb      	ldrb	r3, [r7, #31]
 c007a96:	2b00      	cmp	r3, #0
 c007a98:	d001      	beq.n	c007a9e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 c007a9a:	7ffb      	ldrb	r3, [r7, #31]
 c007a9c:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 c007a9e:	687b      	ldr	r3, [r7, #4]
 c007aa0:	681b      	ldr	r3, [r3, #0]
 c007aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c007aa6:	2b00      	cmp	r3, #0
 c007aa8:	d00b      	beq.n	c007ac2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 c007aaa:	4b20      	ldr	r3, [pc, #128]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007aac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c007ab0:	f023 0204 	bic.w	r2, r3, #4
 c007ab4:	687b      	ldr	r3, [r7, #4]
 c007ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c007aba:	491c      	ldr	r1, [pc, #112]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007abc:	4313      	orrs	r3, r2
 c007abe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 c007ac2:	687b      	ldr	r3, [r7, #4]
 c007ac4:	681b      	ldr	r3, [r3, #0]
 c007ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c007aca:	2b00      	cmp	r3, #0
 c007acc:	d00b      	beq.n	c007ae6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 c007ace:	4b17      	ldr	r3, [pc, #92]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007ad0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c007ad4:	f023 0218 	bic.w	r2, r3, #24
 c007ad8:	687b      	ldr	r3, [r7, #4]
 c007ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007ade:	4913      	ldr	r1, [pc, #76]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007ae0:	4313      	orrs	r3, r2
 c007ae2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c007ae6:	687b      	ldr	r3, [r7, #4]
 c007ae8:	681b      	ldr	r3, [r3, #0]
 c007aea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c007aee:	2b00      	cmp	r3, #0
 c007af0:	d017      	beq.n	c007b22 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c007af2:	4b0e      	ldr	r3, [pc, #56]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007af4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c007af8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c007afc:	687b      	ldr	r3, [r7, #4]
 c007afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c007b02:	490a      	ldr	r1, [pc, #40]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007b04:	4313      	orrs	r3, r2
 c007b06:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c007b0a:	687b      	ldr	r3, [r7, #4]
 c007b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c007b10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c007b14:	d105      	bne.n	c007b22 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c007b16:	4b05      	ldr	r3, [pc, #20]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007b18:	68db      	ldr	r3, [r3, #12]
 c007b1a:	4a04      	ldr	r2, [pc, #16]	; (c007b2c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c007b1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c007b20:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 c007b22:	7fbb      	ldrb	r3, [r7, #30]
}
 c007b24:	4618      	mov	r0, r3
 c007b26:	3720      	adds	r7, #32
 c007b28:	46bd      	mov	sp, r7
 c007b2a:	bd80      	pop	{r7, pc}
 c007b2c:	50021000 	.word	0x50021000

0c007b30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 c007b30:	b580      	push	{r7, lr}
 c007b32:	b084      	sub	sp, #16
 c007b34:	af00      	add	r7, sp, #0
 c007b36:	6078      	str	r0, [r7, #4]
 c007b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c007b3a:	2300      	movs	r3, #0
 c007b3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 c007b3e:	687b      	ldr	r3, [r7, #4]
 c007b40:	681b      	ldr	r3, [r3, #0]
 c007b42:	2b03      	cmp	r3, #3
 c007b44:	d018      	beq.n	c007b78 <RCCEx_PLLSAI1_Config+0x48>
 c007b46:	2b03      	cmp	r3, #3
 c007b48:	d81f      	bhi.n	c007b8a <RCCEx_PLLSAI1_Config+0x5a>
 c007b4a:	2b01      	cmp	r3, #1
 c007b4c:	d002      	beq.n	c007b54 <RCCEx_PLLSAI1_Config+0x24>
 c007b4e:	2b02      	cmp	r3, #2
 c007b50:	d009      	beq.n	c007b66 <RCCEx_PLLSAI1_Config+0x36>
 c007b52:	e01a      	b.n	c007b8a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c007b54:	4b65      	ldr	r3, [pc, #404]	; (c007cec <RCCEx_PLLSAI1_Config+0x1bc>)
 c007b56:	681b      	ldr	r3, [r3, #0]
 c007b58:	f003 0302 	and.w	r3, r3, #2
 c007b5c:	2b00      	cmp	r3, #0
 c007b5e:	d117      	bne.n	c007b90 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 c007b60:	2301      	movs	r3, #1
 c007b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007b64:	e014      	b.n	c007b90 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c007b66:	4b61      	ldr	r3, [pc, #388]	; (c007cec <RCCEx_PLLSAI1_Config+0x1bc>)
 c007b68:	681b      	ldr	r3, [r3, #0]
 c007b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c007b6e:	2b00      	cmp	r3, #0
 c007b70:	d110      	bne.n	c007b94 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 c007b72:	2301      	movs	r3, #1
 c007b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007b76:	e00d      	b.n	c007b94 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c007b78:	4b5c      	ldr	r3, [pc, #368]	; (c007cec <RCCEx_PLLSAI1_Config+0x1bc>)
 c007b7a:	681b      	ldr	r3, [r3, #0]
 c007b7c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c007b80:	2b00      	cmp	r3, #0
 c007b82:	d109      	bne.n	c007b98 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 c007b84:	2301      	movs	r3, #1
 c007b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007b88:	e006      	b.n	c007b98 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 c007b8a:	2301      	movs	r3, #1
 c007b8c:	73fb      	strb	r3, [r7, #15]
      break;
 c007b8e:	e004      	b.n	c007b9a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c007b90:	bf00      	nop
 c007b92:	e002      	b.n	c007b9a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c007b94:	bf00      	nop
 c007b96:	e000      	b.n	c007b9a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c007b98:	bf00      	nop
  }

  if (status == HAL_OK)
 c007b9a:	7bfb      	ldrb	r3, [r7, #15]
 c007b9c:	2b00      	cmp	r3, #0
 c007b9e:	f040 809f 	bne.w	c007ce0 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 c007ba2:	4b52      	ldr	r3, [pc, #328]	; (c007cec <RCCEx_PLLSAI1_Config+0x1bc>)
 c007ba4:	681b      	ldr	r3, [r3, #0]
 c007ba6:	4a51      	ldr	r2, [pc, #324]	; (c007cec <RCCEx_PLLSAI1_Config+0x1bc>)
 c007ba8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c007bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c007bae:	f7fd fc2b 	bl	c005408 <HAL_GetTick>
 c007bb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c007bb4:	e00f      	b.n	c007bd6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c007bb6:	f7fd fc27 	bl	c005408 <HAL_GetTick>
 c007bba:	4602      	mov	r2, r0
 c007bbc:	68bb      	ldr	r3, [r7, #8]
 c007bbe:	1ad3      	subs	r3, r2, r3
 c007bc0:	2b02      	cmp	r3, #2
 c007bc2:	d908      	bls.n	c007bd6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c007bc4:	4b49      	ldr	r3, [pc, #292]	; (c007cec <RCCEx_PLLSAI1_Config+0x1bc>)
 c007bc6:	681b      	ldr	r3, [r3, #0]
 c007bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c007bcc:	2b00      	cmp	r3, #0
 c007bce:	d009      	beq.n	c007be4 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 c007bd0:	2303      	movs	r3, #3
 c007bd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c007bd4:	e006      	b.n	c007be4 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c007bd6:	4b45      	ldr	r3, [pc, #276]	; (c007cec <RCCEx_PLLSAI1_Config+0x1bc>)
 c007bd8:	681b      	ldr	r3, [r3, #0]
 c007bda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c007bde:	2b00      	cmp	r3, #0
 c007be0:	d1e9      	bne.n	c007bb6 <RCCEx_PLLSAI1_Config+0x86>
 c007be2:	e000      	b.n	c007be6 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 c007be4:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c007be6:	7bfb      	ldrb	r3, [r7, #15]
 c007be8:	2b00      	cmp	r3, #0
 c007bea:	d179      	bne.n	c007ce0 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c007bec:	683b      	ldr	r3, [r7, #0]
 c007bee:	2b00      	cmp	r3, #0
 c007bf0:	d116      	bne.n	c007c20 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c007bf2:	4b3e      	ldr	r3, [pc, #248]	; (c007cec <RCCEx_PLLSAI1_Config+0x1bc>)
 c007bf4:	691a      	ldr	r2, [r3, #16]
 c007bf6:	4b3e      	ldr	r3, [pc, #248]	; (c007cf0 <RCCEx_PLLSAI1_Config+0x1c0>)
 c007bf8:	4013      	ands	r3, r2
 c007bfa:	687a      	ldr	r2, [r7, #4]
 c007bfc:	6892      	ldr	r2, [r2, #8]
 c007bfe:	0211      	lsls	r1, r2, #8
 c007c00:	687a      	ldr	r2, [r7, #4]
 c007c02:	68d2      	ldr	r2, [r2, #12]
 c007c04:	06d2      	lsls	r2, r2, #27
 c007c06:	4311      	orrs	r1, r2
 c007c08:	687a      	ldr	r2, [r7, #4]
 c007c0a:	6852      	ldr	r2, [r2, #4]
 c007c0c:	3a01      	subs	r2, #1
 c007c0e:	0112      	lsls	r2, r2, #4
 c007c10:	4311      	orrs	r1, r2
 c007c12:	687a      	ldr	r2, [r7, #4]
 c007c14:	6812      	ldr	r2, [r2, #0]
 c007c16:	430a      	orrs	r2, r1
 c007c18:	4934      	ldr	r1, [pc, #208]	; (c007cec <RCCEx_PLLSAI1_Config+0x1bc>)
 c007c1a:	4313      	orrs	r3, r2
 c007c1c:	610b      	str	r3, [r1, #16]
 c007c1e:	e033      	b.n	c007c88 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 c007c20:	683b      	ldr	r3, [r7, #0]
 c007c22:	2b01      	cmp	r3, #1
 c007c24:	d118      	bne.n	c007c58 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c007c26:	4b31      	ldr	r3, [pc, #196]	; (c007cec <RCCEx_PLLSAI1_Config+0x1bc>)
 c007c28:	691a      	ldr	r2, [r3, #16]
 c007c2a:	4b32      	ldr	r3, [pc, #200]	; (c007cf4 <RCCEx_PLLSAI1_Config+0x1c4>)
 c007c2c:	4013      	ands	r3, r2
 c007c2e:	687a      	ldr	r2, [r7, #4]
 c007c30:	6892      	ldr	r2, [r2, #8]
 c007c32:	0211      	lsls	r1, r2, #8
 c007c34:	687a      	ldr	r2, [r7, #4]
 c007c36:	6912      	ldr	r2, [r2, #16]
 c007c38:	0852      	lsrs	r2, r2, #1
 c007c3a:	3a01      	subs	r2, #1
 c007c3c:	0552      	lsls	r2, r2, #21
 c007c3e:	4311      	orrs	r1, r2
 c007c40:	687a      	ldr	r2, [r7, #4]
 c007c42:	6852      	ldr	r2, [r2, #4]
 c007c44:	3a01      	subs	r2, #1
 c007c46:	0112      	lsls	r2, r2, #4
 c007c48:	4311      	orrs	r1, r2
 c007c4a:	687a      	ldr	r2, [r7, #4]
 c007c4c:	6812      	ldr	r2, [r2, #0]
 c007c4e:	430a      	orrs	r2, r1
 c007c50:	4926      	ldr	r1, [pc, #152]	; (c007cec <RCCEx_PLLSAI1_Config+0x1bc>)
 c007c52:	4313      	orrs	r3, r2
 c007c54:	610b      	str	r3, [r1, #16]
 c007c56:	e017      	b.n	c007c88 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c007c58:	4b24      	ldr	r3, [pc, #144]	; (c007cec <RCCEx_PLLSAI1_Config+0x1bc>)
 c007c5a:	691a      	ldr	r2, [r3, #16]
 c007c5c:	4b26      	ldr	r3, [pc, #152]	; (c007cf8 <RCCEx_PLLSAI1_Config+0x1c8>)
 c007c5e:	4013      	ands	r3, r2
 c007c60:	687a      	ldr	r2, [r7, #4]
 c007c62:	6892      	ldr	r2, [r2, #8]
 c007c64:	0211      	lsls	r1, r2, #8
 c007c66:	687a      	ldr	r2, [r7, #4]
 c007c68:	6952      	ldr	r2, [r2, #20]
 c007c6a:	0852      	lsrs	r2, r2, #1
 c007c6c:	3a01      	subs	r2, #1
 c007c6e:	0652      	lsls	r2, r2, #25
 c007c70:	4311      	orrs	r1, r2
 c007c72:	687a      	ldr	r2, [r7, #4]
 c007c74:	6852      	ldr	r2, [r2, #4]
 c007c76:	3a01      	subs	r2, #1
 c007c78:	0112      	lsls	r2, r2, #4
 c007c7a:	4311      	orrs	r1, r2
 c007c7c:	687a      	ldr	r2, [r7, #4]
 c007c7e:	6812      	ldr	r2, [r2, #0]
 c007c80:	430a      	orrs	r2, r1
 c007c82:	491a      	ldr	r1, [pc, #104]	; (c007cec <RCCEx_PLLSAI1_Config+0x1bc>)
 c007c84:	4313      	orrs	r3, r2
 c007c86:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 c007c88:	4b18      	ldr	r3, [pc, #96]	; (c007cec <RCCEx_PLLSAI1_Config+0x1bc>)
 c007c8a:	681b      	ldr	r3, [r3, #0]
 c007c8c:	4a17      	ldr	r2, [pc, #92]	; (c007cec <RCCEx_PLLSAI1_Config+0x1bc>)
 c007c8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c007c92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c007c94:	f7fd fbb8 	bl	c005408 <HAL_GetTick>
 c007c98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c007c9a:	e00f      	b.n	c007cbc <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c007c9c:	f7fd fbb4 	bl	c005408 <HAL_GetTick>
 c007ca0:	4602      	mov	r2, r0
 c007ca2:	68bb      	ldr	r3, [r7, #8]
 c007ca4:	1ad3      	subs	r3, r2, r3
 c007ca6:	2b02      	cmp	r3, #2
 c007ca8:	d908      	bls.n	c007cbc <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c007caa:	4b10      	ldr	r3, [pc, #64]	; (c007cec <RCCEx_PLLSAI1_Config+0x1bc>)
 c007cac:	681b      	ldr	r3, [r3, #0]
 c007cae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c007cb2:	2b00      	cmp	r3, #0
 c007cb4:	d109      	bne.n	c007cca <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 c007cb6:	2303      	movs	r3, #3
 c007cb8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c007cba:	e006      	b.n	c007cca <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c007cbc:	4b0b      	ldr	r3, [pc, #44]	; (c007cec <RCCEx_PLLSAI1_Config+0x1bc>)
 c007cbe:	681b      	ldr	r3, [r3, #0]
 c007cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c007cc4:	2b00      	cmp	r3, #0
 c007cc6:	d0e9      	beq.n	c007c9c <RCCEx_PLLSAI1_Config+0x16c>
 c007cc8:	e000      	b.n	c007ccc <RCCEx_PLLSAI1_Config+0x19c>
          break;
 c007cca:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c007ccc:	7bfb      	ldrb	r3, [r7, #15]
 c007cce:	2b00      	cmp	r3, #0
 c007cd0:	d106      	bne.n	c007ce0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 c007cd2:	4b06      	ldr	r3, [pc, #24]	; (c007cec <RCCEx_PLLSAI1_Config+0x1bc>)
 c007cd4:	691a      	ldr	r2, [r3, #16]
 c007cd6:	687b      	ldr	r3, [r7, #4]
 c007cd8:	699b      	ldr	r3, [r3, #24]
 c007cda:	4904      	ldr	r1, [pc, #16]	; (c007cec <RCCEx_PLLSAI1_Config+0x1bc>)
 c007cdc:	4313      	orrs	r3, r2
 c007cde:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 c007ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 c007ce2:	4618      	mov	r0, r3
 c007ce4:	3710      	adds	r7, #16
 c007ce6:	46bd      	mov	sp, r7
 c007ce8:	bd80      	pop	{r7, pc}
 c007cea:	bf00      	nop
 c007cec:	50021000 	.word	0x50021000
 c007cf0:	07ff800c 	.word	0x07ff800c
 c007cf4:	ff9f800c 	.word	0xff9f800c
 c007cf8:	f9ff800c 	.word	0xf9ff800c

0c007cfc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 c007cfc:	b580      	push	{r7, lr}
 c007cfe:	b084      	sub	sp, #16
 c007d00:	af00      	add	r7, sp, #0
 c007d02:	6078      	str	r0, [r7, #4]
 c007d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c007d06:	2300      	movs	r3, #0
 c007d08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 c007d0a:	687b      	ldr	r3, [r7, #4]
 c007d0c:	681b      	ldr	r3, [r3, #0]
 c007d0e:	2b03      	cmp	r3, #3
 c007d10:	d018      	beq.n	c007d44 <RCCEx_PLLSAI2_Config+0x48>
 c007d12:	2b03      	cmp	r3, #3
 c007d14:	d81f      	bhi.n	c007d56 <RCCEx_PLLSAI2_Config+0x5a>
 c007d16:	2b01      	cmp	r3, #1
 c007d18:	d002      	beq.n	c007d20 <RCCEx_PLLSAI2_Config+0x24>
 c007d1a:	2b02      	cmp	r3, #2
 c007d1c:	d009      	beq.n	c007d32 <RCCEx_PLLSAI2_Config+0x36>
 c007d1e:	e01a      	b.n	c007d56 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c007d20:	4b4a      	ldr	r3, [pc, #296]	; (c007e4c <RCCEx_PLLSAI2_Config+0x150>)
 c007d22:	681b      	ldr	r3, [r3, #0]
 c007d24:	f003 0302 	and.w	r3, r3, #2
 c007d28:	2b00      	cmp	r3, #0
 c007d2a:	d117      	bne.n	c007d5c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 c007d2c:	2301      	movs	r3, #1
 c007d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007d30:	e014      	b.n	c007d5c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c007d32:	4b46      	ldr	r3, [pc, #280]	; (c007e4c <RCCEx_PLLSAI2_Config+0x150>)
 c007d34:	681b      	ldr	r3, [r3, #0]
 c007d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c007d3a:	2b00      	cmp	r3, #0
 c007d3c:	d110      	bne.n	c007d60 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 c007d3e:	2301      	movs	r3, #1
 c007d40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007d42:	e00d      	b.n	c007d60 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c007d44:	4b41      	ldr	r3, [pc, #260]	; (c007e4c <RCCEx_PLLSAI2_Config+0x150>)
 c007d46:	681b      	ldr	r3, [r3, #0]
 c007d48:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c007d4c:	2b00      	cmp	r3, #0
 c007d4e:	d109      	bne.n	c007d64 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 c007d50:	2301      	movs	r3, #1
 c007d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c007d54:	e006      	b.n	c007d64 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 c007d56:	2301      	movs	r3, #1
 c007d58:	73fb      	strb	r3, [r7, #15]
      break;
 c007d5a:	e004      	b.n	c007d66 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c007d5c:	bf00      	nop
 c007d5e:	e002      	b.n	c007d66 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c007d60:	bf00      	nop
 c007d62:	e000      	b.n	c007d66 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c007d64:	bf00      	nop
  }

  if (status == HAL_OK)
 c007d66:	7bfb      	ldrb	r3, [r7, #15]
 c007d68:	2b00      	cmp	r3, #0
 c007d6a:	d169      	bne.n	c007e40 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 c007d6c:	4b37      	ldr	r3, [pc, #220]	; (c007e4c <RCCEx_PLLSAI2_Config+0x150>)
 c007d6e:	681b      	ldr	r3, [r3, #0]
 c007d70:	4a36      	ldr	r2, [pc, #216]	; (c007e4c <RCCEx_PLLSAI2_Config+0x150>)
 c007d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c007d76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c007d78:	f7fd fb46 	bl	c005408 <HAL_GetTick>
 c007d7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c007d7e:	e00f      	b.n	c007da0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c007d80:	f7fd fb42 	bl	c005408 <HAL_GetTick>
 c007d84:	4602      	mov	r2, r0
 c007d86:	68bb      	ldr	r3, [r7, #8]
 c007d88:	1ad3      	subs	r3, r2, r3
 c007d8a:	2b02      	cmp	r3, #2
 c007d8c:	d908      	bls.n	c007da0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c007d8e:	4b2f      	ldr	r3, [pc, #188]	; (c007e4c <RCCEx_PLLSAI2_Config+0x150>)
 c007d90:	681b      	ldr	r3, [r3, #0]
 c007d92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c007d96:	2b00      	cmp	r3, #0
 c007d98:	d009      	beq.n	c007dae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 c007d9a:	2303      	movs	r3, #3
 c007d9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c007d9e:	e006      	b.n	c007dae <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c007da0:	4b2a      	ldr	r3, [pc, #168]	; (c007e4c <RCCEx_PLLSAI2_Config+0x150>)
 c007da2:	681b      	ldr	r3, [r3, #0]
 c007da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c007da8:	2b00      	cmp	r3, #0
 c007daa:	d1e9      	bne.n	c007d80 <RCCEx_PLLSAI2_Config+0x84>
 c007dac:	e000      	b.n	c007db0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 c007dae:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c007db0:	7bfb      	ldrb	r3, [r7, #15]
 c007db2:	2b00      	cmp	r3, #0
 c007db4:	d144      	bne.n	c007e40 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c007db6:	683b      	ldr	r3, [r7, #0]
 c007db8:	2b00      	cmp	r3, #0
 c007dba:	d115      	bne.n	c007de8 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 c007dbc:	4b23      	ldr	r3, [pc, #140]	; (c007e4c <RCCEx_PLLSAI2_Config+0x150>)
 c007dbe:	695a      	ldr	r2, [r3, #20]
 c007dc0:	4b23      	ldr	r3, [pc, #140]	; (c007e50 <RCCEx_PLLSAI2_Config+0x154>)
 c007dc2:	4013      	ands	r3, r2
 c007dc4:	687a      	ldr	r2, [r7, #4]
 c007dc6:	6892      	ldr	r2, [r2, #8]
 c007dc8:	0211      	lsls	r1, r2, #8
 c007dca:	687a      	ldr	r2, [r7, #4]
 c007dcc:	68d2      	ldr	r2, [r2, #12]
 c007dce:	06d2      	lsls	r2, r2, #27
 c007dd0:	4311      	orrs	r1, r2
 c007dd2:	687a      	ldr	r2, [r7, #4]
 c007dd4:	6852      	ldr	r2, [r2, #4]
 c007dd6:	3a01      	subs	r2, #1
 c007dd8:	0112      	lsls	r2, r2, #4
 c007dda:	4311      	orrs	r1, r2
 c007ddc:	687a      	ldr	r2, [r7, #4]
 c007dde:	6812      	ldr	r2, [r2, #0]
 c007de0:	430a      	orrs	r2, r1
 c007de2:	491a      	ldr	r1, [pc, #104]	; (c007e4c <RCCEx_PLLSAI2_Config+0x150>)
 c007de4:	4313      	orrs	r3, r2
 c007de6:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 c007de8:	4b18      	ldr	r3, [pc, #96]	; (c007e4c <RCCEx_PLLSAI2_Config+0x150>)
 c007dea:	681b      	ldr	r3, [r3, #0]
 c007dec:	4a17      	ldr	r2, [pc, #92]	; (c007e4c <RCCEx_PLLSAI2_Config+0x150>)
 c007dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c007df2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c007df4:	f7fd fb08 	bl	c005408 <HAL_GetTick>
 c007df8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c007dfa:	e00f      	b.n	c007e1c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c007dfc:	f7fd fb04 	bl	c005408 <HAL_GetTick>
 c007e00:	4602      	mov	r2, r0
 c007e02:	68bb      	ldr	r3, [r7, #8]
 c007e04:	1ad3      	subs	r3, r2, r3
 c007e06:	2b02      	cmp	r3, #2
 c007e08:	d908      	bls.n	c007e1c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c007e0a:	4b10      	ldr	r3, [pc, #64]	; (c007e4c <RCCEx_PLLSAI2_Config+0x150>)
 c007e0c:	681b      	ldr	r3, [r3, #0]
 c007e0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c007e12:	2b00      	cmp	r3, #0
 c007e14:	d109      	bne.n	c007e2a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 c007e16:	2303      	movs	r3, #3
 c007e18:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c007e1a:	e006      	b.n	c007e2a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c007e1c:	4b0b      	ldr	r3, [pc, #44]	; (c007e4c <RCCEx_PLLSAI2_Config+0x150>)
 c007e1e:	681b      	ldr	r3, [r3, #0]
 c007e20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c007e24:	2b00      	cmp	r3, #0
 c007e26:	d0e9      	beq.n	c007dfc <RCCEx_PLLSAI2_Config+0x100>
 c007e28:	e000      	b.n	c007e2c <RCCEx_PLLSAI2_Config+0x130>
          break;
 c007e2a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c007e2c:	7bfb      	ldrb	r3, [r7, #15]
 c007e2e:	2b00      	cmp	r3, #0
 c007e30:	d106      	bne.n	c007e40 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 c007e32:	4b06      	ldr	r3, [pc, #24]	; (c007e4c <RCCEx_PLLSAI2_Config+0x150>)
 c007e34:	695a      	ldr	r2, [r3, #20]
 c007e36:	687b      	ldr	r3, [r7, #4]
 c007e38:	691b      	ldr	r3, [r3, #16]
 c007e3a:	4904      	ldr	r1, [pc, #16]	; (c007e4c <RCCEx_PLLSAI2_Config+0x150>)
 c007e3c:	4313      	orrs	r3, r2
 c007e3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 c007e40:	7bfb      	ldrb	r3, [r7, #15]
}
 c007e42:	4618      	mov	r0, r3
 c007e44:	3710      	adds	r7, #16
 c007e46:	46bd      	mov	sp, r7
 c007e48:	bd80      	pop	{r7, pc}
 c007e4a:	bf00      	nop
 c007e4c:	50021000 	.word	0x50021000
 c007e50:	07ff800c 	.word	0x07ff800c

0c007e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 c007e54:	b580      	push	{r7, lr}
 c007e56:	b082      	sub	sp, #8
 c007e58:	af00      	add	r7, sp, #0
 c007e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 c007e5c:	687b      	ldr	r3, [r7, #4]
 c007e5e:	2b00      	cmp	r3, #0
 c007e60:	d101      	bne.n	c007e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 c007e62:	2301      	movs	r3, #1
 c007e64:	e049      	b.n	c007efa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 c007e66:	687b      	ldr	r3, [r7, #4]
 c007e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 c007e6c:	b2db      	uxtb	r3, r3
 c007e6e:	2b00      	cmp	r3, #0
 c007e70:	d106      	bne.n	c007e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 c007e72:	687b      	ldr	r3, [r7, #4]
 c007e74:	2200      	movs	r2, #0
 c007e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 c007e7a:	6878      	ldr	r0, [r7, #4]
 c007e7c:	f7fa ff12 	bl	c002ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 c007e80:	687b      	ldr	r3, [r7, #4]
 c007e82:	2202      	movs	r2, #2
 c007e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 c007e88:	687b      	ldr	r3, [r7, #4]
 c007e8a:	681a      	ldr	r2, [r3, #0]
 c007e8c:	687b      	ldr	r3, [r7, #4]
 c007e8e:	3304      	adds	r3, #4
 c007e90:	4619      	mov	r1, r3
 c007e92:	4610      	mov	r0, r2
 c007e94:	f000 fb4e 	bl	c008534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 c007e98:	687b      	ldr	r3, [r7, #4]
 c007e9a:	2201      	movs	r2, #1
 c007e9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 c007ea0:	687b      	ldr	r3, [r7, #4]
 c007ea2:	2201      	movs	r2, #1
 c007ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 c007ea8:	687b      	ldr	r3, [r7, #4]
 c007eaa:	2201      	movs	r2, #1
 c007eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 c007eb0:	687b      	ldr	r3, [r7, #4]
 c007eb2:	2201      	movs	r2, #1
 c007eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 c007eb8:	687b      	ldr	r3, [r7, #4]
 c007eba:	2201      	movs	r2, #1
 c007ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 c007ec0:	687b      	ldr	r3, [r7, #4]
 c007ec2:	2201      	movs	r2, #1
 c007ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 c007ec8:	687b      	ldr	r3, [r7, #4]
 c007eca:	2201      	movs	r2, #1
 c007ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 c007ed0:	687b      	ldr	r3, [r7, #4]
 c007ed2:	2201      	movs	r2, #1
 c007ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 c007ed8:	687b      	ldr	r3, [r7, #4]
 c007eda:	2201      	movs	r2, #1
 c007edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 c007ee0:	687b      	ldr	r3, [r7, #4]
 c007ee2:	2201      	movs	r2, #1
 c007ee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 c007ee8:	687b      	ldr	r3, [r7, #4]
 c007eea:	2201      	movs	r2, #1
 c007eec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 c007ef0:	687b      	ldr	r3, [r7, #4]
 c007ef2:	2201      	movs	r2, #1
 c007ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 c007ef8:	2300      	movs	r3, #0
}
 c007efa:	4618      	mov	r0, r3
 c007efc:	3708      	adds	r7, #8
 c007efe:	46bd      	mov	sp, r7
 c007f00:	bd80      	pop	{r7, pc}
	...

0c007f04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 c007f04:	b480      	push	{r7}
 c007f06:	b085      	sub	sp, #20
 c007f08:	af00      	add	r7, sp, #0
 c007f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 c007f0c:	687b      	ldr	r3, [r7, #4]
 c007f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 c007f12:	b2db      	uxtb	r3, r3
 c007f14:	2b01      	cmp	r3, #1
 c007f16:	d001      	beq.n	c007f1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 c007f18:	2301      	movs	r3, #1
 c007f1a:	e047      	b.n	c007fac <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 c007f1c:	687b      	ldr	r3, [r7, #4]
 c007f1e:	2202      	movs	r2, #2
 c007f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 c007f24:	687b      	ldr	r3, [r7, #4]
 c007f26:	681b      	ldr	r3, [r3, #0]
 c007f28:	4a23      	ldr	r2, [pc, #140]	; (c007fb8 <HAL_TIM_Base_Start+0xb4>)
 c007f2a:	4293      	cmp	r3, r2
 c007f2c:	d01d      	beq.n	c007f6a <HAL_TIM_Base_Start+0x66>
 c007f2e:	687b      	ldr	r3, [r7, #4]
 c007f30:	681b      	ldr	r3, [r3, #0]
 c007f32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c007f36:	d018      	beq.n	c007f6a <HAL_TIM_Base_Start+0x66>
 c007f38:	687b      	ldr	r3, [r7, #4]
 c007f3a:	681b      	ldr	r3, [r3, #0]
 c007f3c:	4a1f      	ldr	r2, [pc, #124]	; (c007fbc <HAL_TIM_Base_Start+0xb8>)
 c007f3e:	4293      	cmp	r3, r2
 c007f40:	d013      	beq.n	c007f6a <HAL_TIM_Base_Start+0x66>
 c007f42:	687b      	ldr	r3, [r7, #4]
 c007f44:	681b      	ldr	r3, [r3, #0]
 c007f46:	4a1e      	ldr	r2, [pc, #120]	; (c007fc0 <HAL_TIM_Base_Start+0xbc>)
 c007f48:	4293      	cmp	r3, r2
 c007f4a:	d00e      	beq.n	c007f6a <HAL_TIM_Base_Start+0x66>
 c007f4c:	687b      	ldr	r3, [r7, #4]
 c007f4e:	681b      	ldr	r3, [r3, #0]
 c007f50:	4a1c      	ldr	r2, [pc, #112]	; (c007fc4 <HAL_TIM_Base_Start+0xc0>)
 c007f52:	4293      	cmp	r3, r2
 c007f54:	d009      	beq.n	c007f6a <HAL_TIM_Base_Start+0x66>
 c007f56:	687b      	ldr	r3, [r7, #4]
 c007f58:	681b      	ldr	r3, [r3, #0]
 c007f5a:	4a1b      	ldr	r2, [pc, #108]	; (c007fc8 <HAL_TIM_Base_Start+0xc4>)
 c007f5c:	4293      	cmp	r3, r2
 c007f5e:	d004      	beq.n	c007f6a <HAL_TIM_Base_Start+0x66>
 c007f60:	687b      	ldr	r3, [r7, #4]
 c007f62:	681b      	ldr	r3, [r3, #0]
 c007f64:	4a19      	ldr	r2, [pc, #100]	; (c007fcc <HAL_TIM_Base_Start+0xc8>)
 c007f66:	4293      	cmp	r3, r2
 c007f68:	d115      	bne.n	c007f96 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 c007f6a:	687b      	ldr	r3, [r7, #4]
 c007f6c:	681b      	ldr	r3, [r3, #0]
 c007f6e:	689a      	ldr	r2, [r3, #8]
 c007f70:	4b17      	ldr	r3, [pc, #92]	; (c007fd0 <HAL_TIM_Base_Start+0xcc>)
 c007f72:	4013      	ands	r3, r2
 c007f74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 c007f76:	68fb      	ldr	r3, [r7, #12]
 c007f78:	2b06      	cmp	r3, #6
 c007f7a:	d015      	beq.n	c007fa8 <HAL_TIM_Base_Start+0xa4>
 c007f7c:	68fb      	ldr	r3, [r7, #12]
 c007f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c007f82:	d011      	beq.n	c007fa8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 c007f84:	687b      	ldr	r3, [r7, #4]
 c007f86:	681b      	ldr	r3, [r3, #0]
 c007f88:	681a      	ldr	r2, [r3, #0]
 c007f8a:	687b      	ldr	r3, [r7, #4]
 c007f8c:	681b      	ldr	r3, [r3, #0]
 c007f8e:	f042 0201 	orr.w	r2, r2, #1
 c007f92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 c007f94:	e008      	b.n	c007fa8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 c007f96:	687b      	ldr	r3, [r7, #4]
 c007f98:	681b      	ldr	r3, [r3, #0]
 c007f9a:	681a      	ldr	r2, [r3, #0]
 c007f9c:	687b      	ldr	r3, [r7, #4]
 c007f9e:	681b      	ldr	r3, [r3, #0]
 c007fa0:	f042 0201 	orr.w	r2, r2, #1
 c007fa4:	601a      	str	r2, [r3, #0]
 c007fa6:	e000      	b.n	c007faa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 c007fa8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 c007faa:	2300      	movs	r3, #0
}
 c007fac:	4618      	mov	r0, r3
 c007fae:	3714      	adds	r7, #20
 c007fb0:	46bd      	mov	sp, r7
 c007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007fb6:	4770      	bx	lr
 c007fb8:	50012c00 	.word	0x50012c00
 c007fbc:	50000400 	.word	0x50000400
 c007fc0:	50000800 	.word	0x50000800
 c007fc4:	50000c00 	.word	0x50000c00
 c007fc8:	50013400 	.word	0x50013400
 c007fcc:	50014000 	.word	0x50014000
 c007fd0:	00010007 	.word	0x00010007

0c007fd4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 c007fd4:	b480      	push	{r7}
 c007fd6:	b083      	sub	sp, #12
 c007fd8:	af00      	add	r7, sp, #0
 c007fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 c007fdc:	687b      	ldr	r3, [r7, #4]
 c007fde:	681b      	ldr	r3, [r3, #0]
 c007fe0:	6a1a      	ldr	r2, [r3, #32]
 c007fe2:	f241 1311 	movw	r3, #4369	; 0x1111
 c007fe6:	4013      	ands	r3, r2
 c007fe8:	2b00      	cmp	r3, #0
 c007fea:	d10f      	bne.n	c00800c <HAL_TIM_Base_Stop+0x38>
 c007fec:	687b      	ldr	r3, [r7, #4]
 c007fee:	681b      	ldr	r3, [r3, #0]
 c007ff0:	6a1a      	ldr	r2, [r3, #32]
 c007ff2:	f240 4344 	movw	r3, #1092	; 0x444
 c007ff6:	4013      	ands	r3, r2
 c007ff8:	2b00      	cmp	r3, #0
 c007ffa:	d107      	bne.n	c00800c <HAL_TIM_Base_Stop+0x38>
 c007ffc:	687b      	ldr	r3, [r7, #4]
 c007ffe:	681b      	ldr	r3, [r3, #0]
 c008000:	681a      	ldr	r2, [r3, #0]
 c008002:	687b      	ldr	r3, [r7, #4]
 c008004:	681b      	ldr	r3, [r3, #0]
 c008006:	f022 0201 	bic.w	r2, r2, #1
 c00800a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 c00800c:	687b      	ldr	r3, [r7, #4]
 c00800e:	2201      	movs	r2, #1
 c008010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 c008014:	2300      	movs	r3, #0
}
 c008016:	4618      	mov	r0, r3
 c008018:	370c      	adds	r7, #12
 c00801a:	46bd      	mov	sp, r7
 c00801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008020:	4770      	bx	lr
	...

0c008024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 c008024:	b480      	push	{r7}
 c008026:	b085      	sub	sp, #20
 c008028:	af00      	add	r7, sp, #0
 c00802a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 c00802c:	687b      	ldr	r3, [r7, #4]
 c00802e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 c008032:	b2db      	uxtb	r3, r3
 c008034:	2b01      	cmp	r3, #1
 c008036:	d001      	beq.n	c00803c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 c008038:	2301      	movs	r3, #1
 c00803a:	e04f      	b.n	c0080dc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 c00803c:	687b      	ldr	r3, [r7, #4]
 c00803e:	2202      	movs	r2, #2
 c008040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 c008044:	687b      	ldr	r3, [r7, #4]
 c008046:	681b      	ldr	r3, [r3, #0]
 c008048:	68da      	ldr	r2, [r3, #12]
 c00804a:	687b      	ldr	r3, [r7, #4]
 c00804c:	681b      	ldr	r3, [r3, #0]
 c00804e:	f042 0201 	orr.w	r2, r2, #1
 c008052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 c008054:	687b      	ldr	r3, [r7, #4]
 c008056:	681b      	ldr	r3, [r3, #0]
 c008058:	4a23      	ldr	r2, [pc, #140]	; (c0080e8 <HAL_TIM_Base_Start_IT+0xc4>)
 c00805a:	4293      	cmp	r3, r2
 c00805c:	d01d      	beq.n	c00809a <HAL_TIM_Base_Start_IT+0x76>
 c00805e:	687b      	ldr	r3, [r7, #4]
 c008060:	681b      	ldr	r3, [r3, #0]
 c008062:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c008066:	d018      	beq.n	c00809a <HAL_TIM_Base_Start_IT+0x76>
 c008068:	687b      	ldr	r3, [r7, #4]
 c00806a:	681b      	ldr	r3, [r3, #0]
 c00806c:	4a1f      	ldr	r2, [pc, #124]	; (c0080ec <HAL_TIM_Base_Start_IT+0xc8>)
 c00806e:	4293      	cmp	r3, r2
 c008070:	d013      	beq.n	c00809a <HAL_TIM_Base_Start_IT+0x76>
 c008072:	687b      	ldr	r3, [r7, #4]
 c008074:	681b      	ldr	r3, [r3, #0]
 c008076:	4a1e      	ldr	r2, [pc, #120]	; (c0080f0 <HAL_TIM_Base_Start_IT+0xcc>)
 c008078:	4293      	cmp	r3, r2
 c00807a:	d00e      	beq.n	c00809a <HAL_TIM_Base_Start_IT+0x76>
 c00807c:	687b      	ldr	r3, [r7, #4]
 c00807e:	681b      	ldr	r3, [r3, #0]
 c008080:	4a1c      	ldr	r2, [pc, #112]	; (c0080f4 <HAL_TIM_Base_Start_IT+0xd0>)
 c008082:	4293      	cmp	r3, r2
 c008084:	d009      	beq.n	c00809a <HAL_TIM_Base_Start_IT+0x76>
 c008086:	687b      	ldr	r3, [r7, #4]
 c008088:	681b      	ldr	r3, [r3, #0]
 c00808a:	4a1b      	ldr	r2, [pc, #108]	; (c0080f8 <HAL_TIM_Base_Start_IT+0xd4>)
 c00808c:	4293      	cmp	r3, r2
 c00808e:	d004      	beq.n	c00809a <HAL_TIM_Base_Start_IT+0x76>
 c008090:	687b      	ldr	r3, [r7, #4]
 c008092:	681b      	ldr	r3, [r3, #0]
 c008094:	4a19      	ldr	r2, [pc, #100]	; (c0080fc <HAL_TIM_Base_Start_IT+0xd8>)
 c008096:	4293      	cmp	r3, r2
 c008098:	d115      	bne.n	c0080c6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 c00809a:	687b      	ldr	r3, [r7, #4]
 c00809c:	681b      	ldr	r3, [r3, #0]
 c00809e:	689a      	ldr	r2, [r3, #8]
 c0080a0:	4b17      	ldr	r3, [pc, #92]	; (c008100 <HAL_TIM_Base_Start_IT+0xdc>)
 c0080a2:	4013      	ands	r3, r2
 c0080a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 c0080a6:	68fb      	ldr	r3, [r7, #12]
 c0080a8:	2b06      	cmp	r3, #6
 c0080aa:	d015      	beq.n	c0080d8 <HAL_TIM_Base_Start_IT+0xb4>
 c0080ac:	68fb      	ldr	r3, [r7, #12]
 c0080ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c0080b2:	d011      	beq.n	c0080d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 c0080b4:	687b      	ldr	r3, [r7, #4]
 c0080b6:	681b      	ldr	r3, [r3, #0]
 c0080b8:	681a      	ldr	r2, [r3, #0]
 c0080ba:	687b      	ldr	r3, [r7, #4]
 c0080bc:	681b      	ldr	r3, [r3, #0]
 c0080be:	f042 0201 	orr.w	r2, r2, #1
 c0080c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 c0080c4:	e008      	b.n	c0080d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 c0080c6:	687b      	ldr	r3, [r7, #4]
 c0080c8:	681b      	ldr	r3, [r3, #0]
 c0080ca:	681a      	ldr	r2, [r3, #0]
 c0080cc:	687b      	ldr	r3, [r7, #4]
 c0080ce:	681b      	ldr	r3, [r3, #0]
 c0080d0:	f042 0201 	orr.w	r2, r2, #1
 c0080d4:	601a      	str	r2, [r3, #0]
 c0080d6:	e000      	b.n	c0080da <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 c0080d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 c0080da:	2300      	movs	r3, #0
}
 c0080dc:	4618      	mov	r0, r3
 c0080de:	3714      	adds	r7, #20
 c0080e0:	46bd      	mov	sp, r7
 c0080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0080e6:	4770      	bx	lr
 c0080e8:	50012c00 	.word	0x50012c00
 c0080ec:	50000400 	.word	0x50000400
 c0080f0:	50000800 	.word	0x50000800
 c0080f4:	50000c00 	.word	0x50000c00
 c0080f8:	50013400 	.word	0x50013400
 c0080fc:	50014000 	.word	0x50014000
 c008100:	00010007 	.word	0x00010007

0c008104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 c008104:	b580      	push	{r7, lr}
 c008106:	b082      	sub	sp, #8
 c008108:	af00      	add	r7, sp, #0
 c00810a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 c00810c:	687b      	ldr	r3, [r7, #4]
 c00810e:	681b      	ldr	r3, [r3, #0]
 c008110:	691b      	ldr	r3, [r3, #16]
 c008112:	f003 0302 	and.w	r3, r3, #2
 c008116:	2b02      	cmp	r3, #2
 c008118:	d122      	bne.n	c008160 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 c00811a:	687b      	ldr	r3, [r7, #4]
 c00811c:	681b      	ldr	r3, [r3, #0]
 c00811e:	68db      	ldr	r3, [r3, #12]
 c008120:	f003 0302 	and.w	r3, r3, #2
 c008124:	2b02      	cmp	r3, #2
 c008126:	d11b      	bne.n	c008160 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 c008128:	687b      	ldr	r3, [r7, #4]
 c00812a:	681b      	ldr	r3, [r3, #0]
 c00812c:	f06f 0202 	mvn.w	r2, #2
 c008130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 c008132:	687b      	ldr	r3, [r7, #4]
 c008134:	2201      	movs	r2, #1
 c008136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 c008138:	687b      	ldr	r3, [r7, #4]
 c00813a:	681b      	ldr	r3, [r3, #0]
 c00813c:	699b      	ldr	r3, [r3, #24]
 c00813e:	f003 0303 	and.w	r3, r3, #3
 c008142:	2b00      	cmp	r3, #0
 c008144:	d003      	beq.n	c00814e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 c008146:	6878      	ldr	r0, [r7, #4]
 c008148:	f000 f9d5 	bl	c0084f6 <HAL_TIM_IC_CaptureCallback>
 c00814c:	e005      	b.n	c00815a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 c00814e:	6878      	ldr	r0, [r7, #4]
 c008150:	f000 f9c7 	bl	c0084e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 c008154:	6878      	ldr	r0, [r7, #4]
 c008156:	f000 f9d8 	bl	c00850a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c00815a:	687b      	ldr	r3, [r7, #4]
 c00815c:	2200      	movs	r2, #0
 c00815e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 c008160:	687b      	ldr	r3, [r7, #4]
 c008162:	681b      	ldr	r3, [r3, #0]
 c008164:	691b      	ldr	r3, [r3, #16]
 c008166:	f003 0304 	and.w	r3, r3, #4
 c00816a:	2b04      	cmp	r3, #4
 c00816c:	d122      	bne.n	c0081b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 c00816e:	687b      	ldr	r3, [r7, #4]
 c008170:	681b      	ldr	r3, [r3, #0]
 c008172:	68db      	ldr	r3, [r3, #12]
 c008174:	f003 0304 	and.w	r3, r3, #4
 c008178:	2b04      	cmp	r3, #4
 c00817a:	d11b      	bne.n	c0081b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 c00817c:	687b      	ldr	r3, [r7, #4]
 c00817e:	681b      	ldr	r3, [r3, #0]
 c008180:	f06f 0204 	mvn.w	r2, #4
 c008184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 c008186:	687b      	ldr	r3, [r7, #4]
 c008188:	2202      	movs	r2, #2
 c00818a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 c00818c:	687b      	ldr	r3, [r7, #4]
 c00818e:	681b      	ldr	r3, [r3, #0]
 c008190:	699b      	ldr	r3, [r3, #24]
 c008192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c008196:	2b00      	cmp	r3, #0
 c008198:	d003      	beq.n	c0081a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 c00819a:	6878      	ldr	r0, [r7, #4]
 c00819c:	f000 f9ab 	bl	c0084f6 <HAL_TIM_IC_CaptureCallback>
 c0081a0:	e005      	b.n	c0081ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 c0081a2:	6878      	ldr	r0, [r7, #4]
 c0081a4:	f000 f99d 	bl	c0084e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 c0081a8:	6878      	ldr	r0, [r7, #4]
 c0081aa:	f000 f9ae 	bl	c00850a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c0081ae:	687b      	ldr	r3, [r7, #4]
 c0081b0:	2200      	movs	r2, #0
 c0081b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 c0081b4:	687b      	ldr	r3, [r7, #4]
 c0081b6:	681b      	ldr	r3, [r3, #0]
 c0081b8:	691b      	ldr	r3, [r3, #16]
 c0081ba:	f003 0308 	and.w	r3, r3, #8
 c0081be:	2b08      	cmp	r3, #8
 c0081c0:	d122      	bne.n	c008208 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 c0081c2:	687b      	ldr	r3, [r7, #4]
 c0081c4:	681b      	ldr	r3, [r3, #0]
 c0081c6:	68db      	ldr	r3, [r3, #12]
 c0081c8:	f003 0308 	and.w	r3, r3, #8
 c0081cc:	2b08      	cmp	r3, #8
 c0081ce:	d11b      	bne.n	c008208 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 c0081d0:	687b      	ldr	r3, [r7, #4]
 c0081d2:	681b      	ldr	r3, [r3, #0]
 c0081d4:	f06f 0208 	mvn.w	r2, #8
 c0081d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 c0081da:	687b      	ldr	r3, [r7, #4]
 c0081dc:	2204      	movs	r2, #4
 c0081de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 c0081e0:	687b      	ldr	r3, [r7, #4]
 c0081e2:	681b      	ldr	r3, [r3, #0]
 c0081e4:	69db      	ldr	r3, [r3, #28]
 c0081e6:	f003 0303 	and.w	r3, r3, #3
 c0081ea:	2b00      	cmp	r3, #0
 c0081ec:	d003      	beq.n	c0081f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 c0081ee:	6878      	ldr	r0, [r7, #4]
 c0081f0:	f000 f981 	bl	c0084f6 <HAL_TIM_IC_CaptureCallback>
 c0081f4:	e005      	b.n	c008202 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 c0081f6:	6878      	ldr	r0, [r7, #4]
 c0081f8:	f000 f973 	bl	c0084e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 c0081fc:	6878      	ldr	r0, [r7, #4]
 c0081fe:	f000 f984 	bl	c00850a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c008202:	687b      	ldr	r3, [r7, #4]
 c008204:	2200      	movs	r2, #0
 c008206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 c008208:	687b      	ldr	r3, [r7, #4]
 c00820a:	681b      	ldr	r3, [r3, #0]
 c00820c:	691b      	ldr	r3, [r3, #16]
 c00820e:	f003 0310 	and.w	r3, r3, #16
 c008212:	2b10      	cmp	r3, #16
 c008214:	d122      	bne.n	c00825c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 c008216:	687b      	ldr	r3, [r7, #4]
 c008218:	681b      	ldr	r3, [r3, #0]
 c00821a:	68db      	ldr	r3, [r3, #12]
 c00821c:	f003 0310 	and.w	r3, r3, #16
 c008220:	2b10      	cmp	r3, #16
 c008222:	d11b      	bne.n	c00825c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 c008224:	687b      	ldr	r3, [r7, #4]
 c008226:	681b      	ldr	r3, [r3, #0]
 c008228:	f06f 0210 	mvn.w	r2, #16
 c00822c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 c00822e:	687b      	ldr	r3, [r7, #4]
 c008230:	2208      	movs	r2, #8
 c008232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 c008234:	687b      	ldr	r3, [r7, #4]
 c008236:	681b      	ldr	r3, [r3, #0]
 c008238:	69db      	ldr	r3, [r3, #28]
 c00823a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c00823e:	2b00      	cmp	r3, #0
 c008240:	d003      	beq.n	c00824a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 c008242:	6878      	ldr	r0, [r7, #4]
 c008244:	f000 f957 	bl	c0084f6 <HAL_TIM_IC_CaptureCallback>
 c008248:	e005      	b.n	c008256 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 c00824a:	6878      	ldr	r0, [r7, #4]
 c00824c:	f000 f949 	bl	c0084e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 c008250:	6878      	ldr	r0, [r7, #4]
 c008252:	f000 f95a 	bl	c00850a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c008256:	687b      	ldr	r3, [r7, #4]
 c008258:	2200      	movs	r2, #0
 c00825a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 c00825c:	687b      	ldr	r3, [r7, #4]
 c00825e:	681b      	ldr	r3, [r3, #0]
 c008260:	691b      	ldr	r3, [r3, #16]
 c008262:	f003 0301 	and.w	r3, r3, #1
 c008266:	2b01      	cmp	r3, #1
 c008268:	d10e      	bne.n	c008288 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 c00826a:	687b      	ldr	r3, [r7, #4]
 c00826c:	681b      	ldr	r3, [r3, #0]
 c00826e:	68db      	ldr	r3, [r3, #12]
 c008270:	f003 0301 	and.w	r3, r3, #1
 c008274:	2b01      	cmp	r3, #1
 c008276:	d107      	bne.n	c008288 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 c008278:	687b      	ldr	r3, [r7, #4]
 c00827a:	681b      	ldr	r3, [r3, #0]
 c00827c:	f06f 0201 	mvn.w	r2, #1
 c008280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 c008282:	6878      	ldr	r0, [r7, #4]
 c008284:	f000 f923 	bl	c0084ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 c008288:	687b      	ldr	r3, [r7, #4]
 c00828a:	681b      	ldr	r3, [r3, #0]
 c00828c:	691b      	ldr	r3, [r3, #16]
 c00828e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c008292:	2b80      	cmp	r3, #128	; 0x80
 c008294:	d10e      	bne.n	c0082b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 c008296:	687b      	ldr	r3, [r7, #4]
 c008298:	681b      	ldr	r3, [r3, #0]
 c00829a:	68db      	ldr	r3, [r3, #12]
 c00829c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0082a0:	2b80      	cmp	r3, #128	; 0x80
 c0082a2:	d107      	bne.n	c0082b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 c0082a4:	687b      	ldr	r3, [r7, #4]
 c0082a6:	681b      	ldr	r3, [r3, #0]
 c0082a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 c0082ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 c0082ae:	6878      	ldr	r0, [r7, #4]
 c0082b0:	f000 fb08 	bl	c0088c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 c0082b4:	687b      	ldr	r3, [r7, #4]
 c0082b6:	681b      	ldr	r3, [r3, #0]
 c0082b8:	691b      	ldr	r3, [r3, #16]
 c0082ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0082be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c0082c2:	d10e      	bne.n	c0082e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 c0082c4:	687b      	ldr	r3, [r7, #4]
 c0082c6:	681b      	ldr	r3, [r3, #0]
 c0082c8:	68db      	ldr	r3, [r3, #12]
 c0082ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0082ce:	2b80      	cmp	r3, #128	; 0x80
 c0082d0:	d107      	bne.n	c0082e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 c0082d2:	687b      	ldr	r3, [r7, #4]
 c0082d4:	681b      	ldr	r3, [r3, #0]
 c0082d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 c0082da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 c0082dc:	6878      	ldr	r0, [r7, #4]
 c0082de:	f000 fafb 	bl	c0088d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 c0082e2:	687b      	ldr	r3, [r7, #4]
 c0082e4:	681b      	ldr	r3, [r3, #0]
 c0082e6:	691b      	ldr	r3, [r3, #16]
 c0082e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0082ec:	2b40      	cmp	r3, #64	; 0x40
 c0082ee:	d10e      	bne.n	c00830e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 c0082f0:	687b      	ldr	r3, [r7, #4]
 c0082f2:	681b      	ldr	r3, [r3, #0]
 c0082f4:	68db      	ldr	r3, [r3, #12]
 c0082f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0082fa:	2b40      	cmp	r3, #64	; 0x40
 c0082fc:	d107      	bne.n	c00830e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 c0082fe:	687b      	ldr	r3, [r7, #4]
 c008300:	681b      	ldr	r3, [r3, #0]
 c008302:	f06f 0240 	mvn.w	r2, #64	; 0x40
 c008306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 c008308:	6878      	ldr	r0, [r7, #4]
 c00830a:	f000 f908 	bl	c00851e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 c00830e:	687b      	ldr	r3, [r7, #4]
 c008310:	681b      	ldr	r3, [r3, #0]
 c008312:	691b      	ldr	r3, [r3, #16]
 c008314:	f003 0320 	and.w	r3, r3, #32
 c008318:	2b20      	cmp	r3, #32
 c00831a:	d10e      	bne.n	c00833a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 c00831c:	687b      	ldr	r3, [r7, #4]
 c00831e:	681b      	ldr	r3, [r3, #0]
 c008320:	68db      	ldr	r3, [r3, #12]
 c008322:	f003 0320 	and.w	r3, r3, #32
 c008326:	2b20      	cmp	r3, #32
 c008328:	d107      	bne.n	c00833a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 c00832a:	687b      	ldr	r3, [r7, #4]
 c00832c:	681b      	ldr	r3, [r3, #0]
 c00832e:	f06f 0220 	mvn.w	r2, #32
 c008332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 c008334:	6878      	ldr	r0, [r7, #4]
 c008336:	f000 fabb 	bl	c0088b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 c00833a:	bf00      	nop
 c00833c:	3708      	adds	r7, #8
 c00833e:	46bd      	mov	sp, r7
 c008340:	bd80      	pop	{r7, pc}

0c008342 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 c008342:	b580      	push	{r7, lr}
 c008344:	b084      	sub	sp, #16
 c008346:	af00      	add	r7, sp, #0
 c008348:	6078      	str	r0, [r7, #4]
 c00834a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 c00834c:	687b      	ldr	r3, [r7, #4]
 c00834e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 c008352:	2b01      	cmp	r3, #1
 c008354:	d101      	bne.n	c00835a <HAL_TIM_ConfigClockSource+0x18>
 c008356:	2302      	movs	r3, #2
 c008358:	e0b5      	b.n	c0084c6 <HAL_TIM_ConfigClockSource+0x184>
 c00835a:	687b      	ldr	r3, [r7, #4]
 c00835c:	2201      	movs	r2, #1
 c00835e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 c008362:	687b      	ldr	r3, [r7, #4]
 c008364:	2202      	movs	r2, #2
 c008366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 c00836a:	687b      	ldr	r3, [r7, #4]
 c00836c:	681b      	ldr	r3, [r3, #0]
 c00836e:	689b      	ldr	r3, [r3, #8]
 c008370:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 c008372:	68fb      	ldr	r3, [r7, #12]
 c008374:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 c008378:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 c00837c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 c00837e:	68fb      	ldr	r3, [r7, #12]
 c008380:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 c008384:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 c008386:	687b      	ldr	r3, [r7, #4]
 c008388:	681b      	ldr	r3, [r3, #0]
 c00838a:	68fa      	ldr	r2, [r7, #12]
 c00838c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 c00838e:	683b      	ldr	r3, [r7, #0]
 c008390:	681b      	ldr	r3, [r3, #0]
 c008392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c008396:	d03e      	beq.n	c008416 <HAL_TIM_ConfigClockSource+0xd4>
 c008398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c00839c:	f200 8087 	bhi.w	c0084ae <HAL_TIM_ConfigClockSource+0x16c>
 c0083a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c0083a4:	f000 8085 	beq.w	c0084b2 <HAL_TIM_ConfigClockSource+0x170>
 c0083a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c0083ac:	d87f      	bhi.n	c0084ae <HAL_TIM_ConfigClockSource+0x16c>
 c0083ae:	2b70      	cmp	r3, #112	; 0x70
 c0083b0:	d01a      	beq.n	c0083e8 <HAL_TIM_ConfigClockSource+0xa6>
 c0083b2:	2b70      	cmp	r3, #112	; 0x70
 c0083b4:	d87b      	bhi.n	c0084ae <HAL_TIM_ConfigClockSource+0x16c>
 c0083b6:	2b60      	cmp	r3, #96	; 0x60
 c0083b8:	d050      	beq.n	c00845c <HAL_TIM_ConfigClockSource+0x11a>
 c0083ba:	2b60      	cmp	r3, #96	; 0x60
 c0083bc:	d877      	bhi.n	c0084ae <HAL_TIM_ConfigClockSource+0x16c>
 c0083be:	2b50      	cmp	r3, #80	; 0x50
 c0083c0:	d03c      	beq.n	c00843c <HAL_TIM_ConfigClockSource+0xfa>
 c0083c2:	2b50      	cmp	r3, #80	; 0x50
 c0083c4:	d873      	bhi.n	c0084ae <HAL_TIM_ConfigClockSource+0x16c>
 c0083c6:	2b40      	cmp	r3, #64	; 0x40
 c0083c8:	d058      	beq.n	c00847c <HAL_TIM_ConfigClockSource+0x13a>
 c0083ca:	2b40      	cmp	r3, #64	; 0x40
 c0083cc:	d86f      	bhi.n	c0084ae <HAL_TIM_ConfigClockSource+0x16c>
 c0083ce:	2b30      	cmp	r3, #48	; 0x30
 c0083d0:	d064      	beq.n	c00849c <HAL_TIM_ConfigClockSource+0x15a>
 c0083d2:	2b30      	cmp	r3, #48	; 0x30
 c0083d4:	d86b      	bhi.n	c0084ae <HAL_TIM_ConfigClockSource+0x16c>
 c0083d6:	2b20      	cmp	r3, #32
 c0083d8:	d060      	beq.n	c00849c <HAL_TIM_ConfigClockSource+0x15a>
 c0083da:	2b20      	cmp	r3, #32
 c0083dc:	d867      	bhi.n	c0084ae <HAL_TIM_ConfigClockSource+0x16c>
 c0083de:	2b00      	cmp	r3, #0
 c0083e0:	d05c      	beq.n	c00849c <HAL_TIM_ConfigClockSource+0x15a>
 c0083e2:	2b10      	cmp	r3, #16
 c0083e4:	d05a      	beq.n	c00849c <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 c0083e6:	e062      	b.n	c0084ae <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 c0083e8:	687b      	ldr	r3, [r7, #4]
 c0083ea:	6818      	ldr	r0, [r3, #0]
 c0083ec:	683b      	ldr	r3, [r7, #0]
 c0083ee:	6899      	ldr	r1, [r3, #8]
 c0083f0:	683b      	ldr	r3, [r7, #0]
 c0083f2:	685a      	ldr	r2, [r3, #4]
 c0083f4:	683b      	ldr	r3, [r7, #0]
 c0083f6:	68db      	ldr	r3, [r3, #12]
 c0083f8:	f000 f9b2 	bl	c008760 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 c0083fc:	687b      	ldr	r3, [r7, #4]
 c0083fe:	681b      	ldr	r3, [r3, #0]
 c008400:	689b      	ldr	r3, [r3, #8]
 c008402:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 c008404:	68fb      	ldr	r3, [r7, #12]
 c008406:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 c00840a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 c00840c:	687b      	ldr	r3, [r7, #4]
 c00840e:	681b      	ldr	r3, [r3, #0]
 c008410:	68fa      	ldr	r2, [r7, #12]
 c008412:	609a      	str	r2, [r3, #8]
      break;
 c008414:	e04e      	b.n	c0084b4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 c008416:	687b      	ldr	r3, [r7, #4]
 c008418:	6818      	ldr	r0, [r3, #0]
 c00841a:	683b      	ldr	r3, [r7, #0]
 c00841c:	6899      	ldr	r1, [r3, #8]
 c00841e:	683b      	ldr	r3, [r7, #0]
 c008420:	685a      	ldr	r2, [r3, #4]
 c008422:	683b      	ldr	r3, [r7, #0]
 c008424:	68db      	ldr	r3, [r3, #12]
 c008426:	f000 f99b 	bl	c008760 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 c00842a:	687b      	ldr	r3, [r7, #4]
 c00842c:	681b      	ldr	r3, [r3, #0]
 c00842e:	689a      	ldr	r2, [r3, #8]
 c008430:	687b      	ldr	r3, [r7, #4]
 c008432:	681b      	ldr	r3, [r3, #0]
 c008434:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 c008438:	609a      	str	r2, [r3, #8]
      break;
 c00843a:	e03b      	b.n	c0084b4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 c00843c:	687b      	ldr	r3, [r7, #4]
 c00843e:	6818      	ldr	r0, [r3, #0]
 c008440:	683b      	ldr	r3, [r7, #0]
 c008442:	6859      	ldr	r1, [r3, #4]
 c008444:	683b      	ldr	r3, [r7, #0]
 c008446:	68db      	ldr	r3, [r3, #12]
 c008448:	461a      	mov	r2, r3
 c00844a:	f000 f90d 	bl	c008668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 c00844e:	687b      	ldr	r3, [r7, #4]
 c008450:	681b      	ldr	r3, [r3, #0]
 c008452:	2150      	movs	r1, #80	; 0x50
 c008454:	4618      	mov	r0, r3
 c008456:	f000 f966 	bl	c008726 <TIM_ITRx_SetConfig>
      break;
 c00845a:	e02b      	b.n	c0084b4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 c00845c:	687b      	ldr	r3, [r7, #4]
 c00845e:	6818      	ldr	r0, [r3, #0]
 c008460:	683b      	ldr	r3, [r7, #0]
 c008462:	6859      	ldr	r1, [r3, #4]
 c008464:	683b      	ldr	r3, [r7, #0]
 c008466:	68db      	ldr	r3, [r3, #12]
 c008468:	461a      	mov	r2, r3
 c00846a:	f000 f92c 	bl	c0086c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 c00846e:	687b      	ldr	r3, [r7, #4]
 c008470:	681b      	ldr	r3, [r3, #0]
 c008472:	2160      	movs	r1, #96	; 0x60
 c008474:	4618      	mov	r0, r3
 c008476:	f000 f956 	bl	c008726 <TIM_ITRx_SetConfig>
      break;
 c00847a:	e01b      	b.n	c0084b4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 c00847c:	687b      	ldr	r3, [r7, #4]
 c00847e:	6818      	ldr	r0, [r3, #0]
 c008480:	683b      	ldr	r3, [r7, #0]
 c008482:	6859      	ldr	r1, [r3, #4]
 c008484:	683b      	ldr	r3, [r7, #0]
 c008486:	68db      	ldr	r3, [r3, #12]
 c008488:	461a      	mov	r2, r3
 c00848a:	f000 f8ed 	bl	c008668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 c00848e:	687b      	ldr	r3, [r7, #4]
 c008490:	681b      	ldr	r3, [r3, #0]
 c008492:	2140      	movs	r1, #64	; 0x40
 c008494:	4618      	mov	r0, r3
 c008496:	f000 f946 	bl	c008726 <TIM_ITRx_SetConfig>
      break;
 c00849a:	e00b      	b.n	c0084b4 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 c00849c:	687b      	ldr	r3, [r7, #4]
 c00849e:	681a      	ldr	r2, [r3, #0]
 c0084a0:	683b      	ldr	r3, [r7, #0]
 c0084a2:	681b      	ldr	r3, [r3, #0]
 c0084a4:	4619      	mov	r1, r3
 c0084a6:	4610      	mov	r0, r2
 c0084a8:	f000 f93d 	bl	c008726 <TIM_ITRx_SetConfig>
        break;
 c0084ac:	e002      	b.n	c0084b4 <HAL_TIM_ConfigClockSource+0x172>
      break;
 c0084ae:	bf00      	nop
 c0084b0:	e000      	b.n	c0084b4 <HAL_TIM_ConfigClockSource+0x172>
      break;
 c0084b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 c0084b4:	687b      	ldr	r3, [r7, #4]
 c0084b6:	2201      	movs	r2, #1
 c0084b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 c0084bc:	687b      	ldr	r3, [r7, #4]
 c0084be:	2200      	movs	r2, #0
 c0084c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 c0084c4:	2300      	movs	r3, #0
}
 c0084c6:	4618      	mov	r0, r3
 c0084c8:	3710      	adds	r7, #16
 c0084ca:	46bd      	mov	sp, r7
 c0084cc:	bd80      	pop	{r7, pc}

0c0084ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 c0084ce:	b480      	push	{r7}
 c0084d0:	b083      	sub	sp, #12
 c0084d2:	af00      	add	r7, sp, #0
 c0084d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 c0084d6:	bf00      	nop
 c0084d8:	370c      	adds	r7, #12
 c0084da:	46bd      	mov	sp, r7
 c0084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0084e0:	4770      	bx	lr

0c0084e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 c0084e2:	b480      	push	{r7}
 c0084e4:	b083      	sub	sp, #12
 c0084e6:	af00      	add	r7, sp, #0
 c0084e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 c0084ea:	bf00      	nop
 c0084ec:	370c      	adds	r7, #12
 c0084ee:	46bd      	mov	sp, r7
 c0084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0084f4:	4770      	bx	lr

0c0084f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 c0084f6:	b480      	push	{r7}
 c0084f8:	b083      	sub	sp, #12
 c0084fa:	af00      	add	r7, sp, #0
 c0084fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 c0084fe:	bf00      	nop
 c008500:	370c      	adds	r7, #12
 c008502:	46bd      	mov	sp, r7
 c008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008508:	4770      	bx	lr

0c00850a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 c00850a:	b480      	push	{r7}
 c00850c:	b083      	sub	sp, #12
 c00850e:	af00      	add	r7, sp, #0
 c008510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 c008512:	bf00      	nop
 c008514:	370c      	adds	r7, #12
 c008516:	46bd      	mov	sp, r7
 c008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00851c:	4770      	bx	lr

0c00851e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 c00851e:	b480      	push	{r7}
 c008520:	b083      	sub	sp, #12
 c008522:	af00      	add	r7, sp, #0
 c008524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 c008526:	bf00      	nop
 c008528:	370c      	adds	r7, #12
 c00852a:	46bd      	mov	sp, r7
 c00852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008530:	4770      	bx	lr
	...

0c008534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 c008534:	b480      	push	{r7}
 c008536:	b085      	sub	sp, #20
 c008538:	af00      	add	r7, sp, #0
 c00853a:	6078      	str	r0, [r7, #4]
 c00853c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 c00853e:	687b      	ldr	r3, [r7, #4]
 c008540:	681b      	ldr	r3, [r3, #0]
 c008542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 c008544:	687b      	ldr	r3, [r7, #4]
 c008546:	4a40      	ldr	r2, [pc, #256]	; (c008648 <TIM_Base_SetConfig+0x114>)
 c008548:	4293      	cmp	r3, r2
 c00854a:	d013      	beq.n	c008574 <TIM_Base_SetConfig+0x40>
 c00854c:	687b      	ldr	r3, [r7, #4]
 c00854e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c008552:	d00f      	beq.n	c008574 <TIM_Base_SetConfig+0x40>
 c008554:	687b      	ldr	r3, [r7, #4]
 c008556:	4a3d      	ldr	r2, [pc, #244]	; (c00864c <TIM_Base_SetConfig+0x118>)
 c008558:	4293      	cmp	r3, r2
 c00855a:	d00b      	beq.n	c008574 <TIM_Base_SetConfig+0x40>
 c00855c:	687b      	ldr	r3, [r7, #4]
 c00855e:	4a3c      	ldr	r2, [pc, #240]	; (c008650 <TIM_Base_SetConfig+0x11c>)
 c008560:	4293      	cmp	r3, r2
 c008562:	d007      	beq.n	c008574 <TIM_Base_SetConfig+0x40>
 c008564:	687b      	ldr	r3, [r7, #4]
 c008566:	4a3b      	ldr	r2, [pc, #236]	; (c008654 <TIM_Base_SetConfig+0x120>)
 c008568:	4293      	cmp	r3, r2
 c00856a:	d003      	beq.n	c008574 <TIM_Base_SetConfig+0x40>
 c00856c:	687b      	ldr	r3, [r7, #4]
 c00856e:	4a3a      	ldr	r2, [pc, #232]	; (c008658 <TIM_Base_SetConfig+0x124>)
 c008570:	4293      	cmp	r3, r2
 c008572:	d108      	bne.n	c008586 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 c008574:	68fb      	ldr	r3, [r7, #12]
 c008576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 c00857a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 c00857c:	683b      	ldr	r3, [r7, #0]
 c00857e:	685b      	ldr	r3, [r3, #4]
 c008580:	68fa      	ldr	r2, [r7, #12]
 c008582:	4313      	orrs	r3, r2
 c008584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 c008586:	687b      	ldr	r3, [r7, #4]
 c008588:	4a2f      	ldr	r2, [pc, #188]	; (c008648 <TIM_Base_SetConfig+0x114>)
 c00858a:	4293      	cmp	r3, r2
 c00858c:	d01f      	beq.n	c0085ce <TIM_Base_SetConfig+0x9a>
 c00858e:	687b      	ldr	r3, [r7, #4]
 c008590:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c008594:	d01b      	beq.n	c0085ce <TIM_Base_SetConfig+0x9a>
 c008596:	687b      	ldr	r3, [r7, #4]
 c008598:	4a2c      	ldr	r2, [pc, #176]	; (c00864c <TIM_Base_SetConfig+0x118>)
 c00859a:	4293      	cmp	r3, r2
 c00859c:	d017      	beq.n	c0085ce <TIM_Base_SetConfig+0x9a>
 c00859e:	687b      	ldr	r3, [r7, #4]
 c0085a0:	4a2b      	ldr	r2, [pc, #172]	; (c008650 <TIM_Base_SetConfig+0x11c>)
 c0085a2:	4293      	cmp	r3, r2
 c0085a4:	d013      	beq.n	c0085ce <TIM_Base_SetConfig+0x9a>
 c0085a6:	687b      	ldr	r3, [r7, #4]
 c0085a8:	4a2a      	ldr	r2, [pc, #168]	; (c008654 <TIM_Base_SetConfig+0x120>)
 c0085aa:	4293      	cmp	r3, r2
 c0085ac:	d00f      	beq.n	c0085ce <TIM_Base_SetConfig+0x9a>
 c0085ae:	687b      	ldr	r3, [r7, #4]
 c0085b0:	4a29      	ldr	r2, [pc, #164]	; (c008658 <TIM_Base_SetConfig+0x124>)
 c0085b2:	4293      	cmp	r3, r2
 c0085b4:	d00b      	beq.n	c0085ce <TIM_Base_SetConfig+0x9a>
 c0085b6:	687b      	ldr	r3, [r7, #4]
 c0085b8:	4a28      	ldr	r2, [pc, #160]	; (c00865c <TIM_Base_SetConfig+0x128>)
 c0085ba:	4293      	cmp	r3, r2
 c0085bc:	d007      	beq.n	c0085ce <TIM_Base_SetConfig+0x9a>
 c0085be:	687b      	ldr	r3, [r7, #4]
 c0085c0:	4a27      	ldr	r2, [pc, #156]	; (c008660 <TIM_Base_SetConfig+0x12c>)
 c0085c2:	4293      	cmp	r3, r2
 c0085c4:	d003      	beq.n	c0085ce <TIM_Base_SetConfig+0x9a>
 c0085c6:	687b      	ldr	r3, [r7, #4]
 c0085c8:	4a26      	ldr	r2, [pc, #152]	; (c008664 <TIM_Base_SetConfig+0x130>)
 c0085ca:	4293      	cmp	r3, r2
 c0085cc:	d108      	bne.n	c0085e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 c0085ce:	68fb      	ldr	r3, [r7, #12]
 c0085d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c0085d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 c0085d6:	683b      	ldr	r3, [r7, #0]
 c0085d8:	68db      	ldr	r3, [r3, #12]
 c0085da:	68fa      	ldr	r2, [r7, #12]
 c0085dc:	4313      	orrs	r3, r2
 c0085de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 c0085e0:	68fb      	ldr	r3, [r7, #12]
 c0085e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 c0085e6:	683b      	ldr	r3, [r7, #0]
 c0085e8:	695b      	ldr	r3, [r3, #20]
 c0085ea:	4313      	orrs	r3, r2
 c0085ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 c0085ee:	687b      	ldr	r3, [r7, #4]
 c0085f0:	68fa      	ldr	r2, [r7, #12]
 c0085f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 c0085f4:	683b      	ldr	r3, [r7, #0]
 c0085f6:	689a      	ldr	r2, [r3, #8]
 c0085f8:	687b      	ldr	r3, [r7, #4]
 c0085fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 c0085fc:	683b      	ldr	r3, [r7, #0]
 c0085fe:	681a      	ldr	r2, [r3, #0]
 c008600:	687b      	ldr	r3, [r7, #4]
 c008602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 c008604:	687b      	ldr	r3, [r7, #4]
 c008606:	4a10      	ldr	r2, [pc, #64]	; (c008648 <TIM_Base_SetConfig+0x114>)
 c008608:	4293      	cmp	r3, r2
 c00860a:	d00f      	beq.n	c00862c <TIM_Base_SetConfig+0xf8>
 c00860c:	687b      	ldr	r3, [r7, #4]
 c00860e:	4a12      	ldr	r2, [pc, #72]	; (c008658 <TIM_Base_SetConfig+0x124>)
 c008610:	4293      	cmp	r3, r2
 c008612:	d00b      	beq.n	c00862c <TIM_Base_SetConfig+0xf8>
 c008614:	687b      	ldr	r3, [r7, #4]
 c008616:	4a11      	ldr	r2, [pc, #68]	; (c00865c <TIM_Base_SetConfig+0x128>)
 c008618:	4293      	cmp	r3, r2
 c00861a:	d007      	beq.n	c00862c <TIM_Base_SetConfig+0xf8>
 c00861c:	687b      	ldr	r3, [r7, #4]
 c00861e:	4a10      	ldr	r2, [pc, #64]	; (c008660 <TIM_Base_SetConfig+0x12c>)
 c008620:	4293      	cmp	r3, r2
 c008622:	d003      	beq.n	c00862c <TIM_Base_SetConfig+0xf8>
 c008624:	687b      	ldr	r3, [r7, #4]
 c008626:	4a0f      	ldr	r2, [pc, #60]	; (c008664 <TIM_Base_SetConfig+0x130>)
 c008628:	4293      	cmp	r3, r2
 c00862a:	d103      	bne.n	c008634 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 c00862c:	683b      	ldr	r3, [r7, #0]
 c00862e:	691a      	ldr	r2, [r3, #16]
 c008630:	687b      	ldr	r3, [r7, #4]
 c008632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 c008634:	687b      	ldr	r3, [r7, #4]
 c008636:	2201      	movs	r2, #1
 c008638:	615a      	str	r2, [r3, #20]
}
 c00863a:	bf00      	nop
 c00863c:	3714      	adds	r7, #20
 c00863e:	46bd      	mov	sp, r7
 c008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008644:	4770      	bx	lr
 c008646:	bf00      	nop
 c008648:	50012c00 	.word	0x50012c00
 c00864c:	50000400 	.word	0x50000400
 c008650:	50000800 	.word	0x50000800
 c008654:	50000c00 	.word	0x50000c00
 c008658:	50013400 	.word	0x50013400
 c00865c:	50014000 	.word	0x50014000
 c008660:	50014400 	.word	0x50014400
 c008664:	50014800 	.word	0x50014800

0c008668 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 c008668:	b480      	push	{r7}
 c00866a:	b087      	sub	sp, #28
 c00866c:	af00      	add	r7, sp, #0
 c00866e:	60f8      	str	r0, [r7, #12]
 c008670:	60b9      	str	r1, [r7, #8]
 c008672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 c008674:	68fb      	ldr	r3, [r7, #12]
 c008676:	6a1b      	ldr	r3, [r3, #32]
 c008678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 c00867a:	68fb      	ldr	r3, [r7, #12]
 c00867c:	6a1b      	ldr	r3, [r3, #32]
 c00867e:	f023 0201 	bic.w	r2, r3, #1
 c008682:	68fb      	ldr	r3, [r7, #12]
 c008684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 c008686:	68fb      	ldr	r3, [r7, #12]
 c008688:	699b      	ldr	r3, [r3, #24]
 c00868a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 c00868c:	693b      	ldr	r3, [r7, #16]
 c00868e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c008692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 c008694:	687b      	ldr	r3, [r7, #4]
 c008696:	011b      	lsls	r3, r3, #4
 c008698:	693a      	ldr	r2, [r7, #16]
 c00869a:	4313      	orrs	r3, r2
 c00869c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 c00869e:	697b      	ldr	r3, [r7, #20]
 c0086a0:	f023 030a 	bic.w	r3, r3, #10
 c0086a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 c0086a6:	697a      	ldr	r2, [r7, #20]
 c0086a8:	68bb      	ldr	r3, [r7, #8]
 c0086aa:	4313      	orrs	r3, r2
 c0086ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 c0086ae:	68fb      	ldr	r3, [r7, #12]
 c0086b0:	693a      	ldr	r2, [r7, #16]
 c0086b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 c0086b4:	68fb      	ldr	r3, [r7, #12]
 c0086b6:	697a      	ldr	r2, [r7, #20]
 c0086b8:	621a      	str	r2, [r3, #32]
}
 c0086ba:	bf00      	nop
 c0086bc:	371c      	adds	r7, #28
 c0086be:	46bd      	mov	sp, r7
 c0086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0086c4:	4770      	bx	lr

0c0086c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 c0086c6:	b480      	push	{r7}
 c0086c8:	b087      	sub	sp, #28
 c0086ca:	af00      	add	r7, sp, #0
 c0086cc:	60f8      	str	r0, [r7, #12]
 c0086ce:	60b9      	str	r1, [r7, #8]
 c0086d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 c0086d2:	68fb      	ldr	r3, [r7, #12]
 c0086d4:	6a1b      	ldr	r3, [r3, #32]
 c0086d6:	f023 0210 	bic.w	r2, r3, #16
 c0086da:	68fb      	ldr	r3, [r7, #12]
 c0086dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 c0086de:	68fb      	ldr	r3, [r7, #12]
 c0086e0:	699b      	ldr	r3, [r3, #24]
 c0086e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 c0086e4:	68fb      	ldr	r3, [r7, #12]
 c0086e6:	6a1b      	ldr	r3, [r3, #32]
 c0086e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 c0086ea:	697b      	ldr	r3, [r7, #20]
 c0086ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 c0086f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 c0086f2:	687b      	ldr	r3, [r7, #4]
 c0086f4:	031b      	lsls	r3, r3, #12
 c0086f6:	697a      	ldr	r2, [r7, #20]
 c0086f8:	4313      	orrs	r3, r2
 c0086fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 c0086fc:	693b      	ldr	r3, [r7, #16]
 c0086fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 c008702:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 c008704:	68bb      	ldr	r3, [r7, #8]
 c008706:	011b      	lsls	r3, r3, #4
 c008708:	693a      	ldr	r2, [r7, #16]
 c00870a:	4313      	orrs	r3, r2
 c00870c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 c00870e:	68fb      	ldr	r3, [r7, #12]
 c008710:	697a      	ldr	r2, [r7, #20]
 c008712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 c008714:	68fb      	ldr	r3, [r7, #12]
 c008716:	693a      	ldr	r2, [r7, #16]
 c008718:	621a      	str	r2, [r3, #32]
}
 c00871a:	bf00      	nop
 c00871c:	371c      	adds	r7, #28
 c00871e:	46bd      	mov	sp, r7
 c008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008724:	4770      	bx	lr

0c008726 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 c008726:	b480      	push	{r7}
 c008728:	b085      	sub	sp, #20
 c00872a:	af00      	add	r7, sp, #0
 c00872c:	6078      	str	r0, [r7, #4]
 c00872e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 c008730:	687b      	ldr	r3, [r7, #4]
 c008732:	689b      	ldr	r3, [r3, #8]
 c008734:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 c008736:	68fb      	ldr	r3, [r7, #12]
 c008738:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 c00873c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 c008740:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 c008742:	683a      	ldr	r2, [r7, #0]
 c008744:	68fb      	ldr	r3, [r7, #12]
 c008746:	4313      	orrs	r3, r2
 c008748:	f043 0307 	orr.w	r3, r3, #7
 c00874c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 c00874e:	687b      	ldr	r3, [r7, #4]
 c008750:	68fa      	ldr	r2, [r7, #12]
 c008752:	609a      	str	r2, [r3, #8]
}
 c008754:	bf00      	nop
 c008756:	3714      	adds	r7, #20
 c008758:	46bd      	mov	sp, r7
 c00875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00875e:	4770      	bx	lr

0c008760 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 c008760:	b480      	push	{r7}
 c008762:	b087      	sub	sp, #28
 c008764:	af00      	add	r7, sp, #0
 c008766:	60f8      	str	r0, [r7, #12]
 c008768:	60b9      	str	r1, [r7, #8]
 c00876a:	607a      	str	r2, [r7, #4]
 c00876c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 c00876e:	68fb      	ldr	r3, [r7, #12]
 c008770:	689b      	ldr	r3, [r3, #8]
 c008772:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 c008774:	697b      	ldr	r3, [r7, #20]
 c008776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 c00877a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 c00877c:	683b      	ldr	r3, [r7, #0]
 c00877e:	021a      	lsls	r2, r3, #8
 c008780:	687b      	ldr	r3, [r7, #4]
 c008782:	431a      	orrs	r2, r3
 c008784:	68bb      	ldr	r3, [r7, #8]
 c008786:	4313      	orrs	r3, r2
 c008788:	697a      	ldr	r2, [r7, #20]
 c00878a:	4313      	orrs	r3, r2
 c00878c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 c00878e:	68fb      	ldr	r3, [r7, #12]
 c008790:	697a      	ldr	r2, [r7, #20]
 c008792:	609a      	str	r2, [r3, #8]
}
 c008794:	bf00      	nop
 c008796:	371c      	adds	r7, #28
 c008798:	46bd      	mov	sp, r7
 c00879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00879e:	4770      	bx	lr

0c0087a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 c0087a0:	b480      	push	{r7}
 c0087a2:	b085      	sub	sp, #20
 c0087a4:	af00      	add	r7, sp, #0
 c0087a6:	6078      	str	r0, [r7, #4]
 c0087a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 c0087aa:	687b      	ldr	r3, [r7, #4]
 c0087ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 c0087b0:	2b01      	cmp	r3, #1
 c0087b2:	d101      	bne.n	c0087b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 c0087b4:	2302      	movs	r3, #2
 c0087b6:	e068      	b.n	c00888a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 c0087b8:	687b      	ldr	r3, [r7, #4]
 c0087ba:	2201      	movs	r2, #1
 c0087bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 c0087c0:	687b      	ldr	r3, [r7, #4]
 c0087c2:	2202      	movs	r2, #2
 c0087c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 c0087c8:	687b      	ldr	r3, [r7, #4]
 c0087ca:	681b      	ldr	r3, [r3, #0]
 c0087cc:	685b      	ldr	r3, [r3, #4]
 c0087ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 c0087d0:	687b      	ldr	r3, [r7, #4]
 c0087d2:	681b      	ldr	r3, [r3, #0]
 c0087d4:	689b      	ldr	r3, [r3, #8]
 c0087d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 c0087d8:	687b      	ldr	r3, [r7, #4]
 c0087da:	681b      	ldr	r3, [r3, #0]
 c0087dc:	4a2e      	ldr	r2, [pc, #184]	; (c008898 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 c0087de:	4293      	cmp	r3, r2
 c0087e0:	d004      	beq.n	c0087ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 c0087e2:	687b      	ldr	r3, [r7, #4]
 c0087e4:	681b      	ldr	r3, [r3, #0]
 c0087e6:	4a2d      	ldr	r2, [pc, #180]	; (c00889c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 c0087e8:	4293      	cmp	r3, r2
 c0087ea:	d108      	bne.n	c0087fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 c0087ec:	68fb      	ldr	r3, [r7, #12]
 c0087ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 c0087f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 c0087f4:	683b      	ldr	r3, [r7, #0]
 c0087f6:	685b      	ldr	r3, [r3, #4]
 c0087f8:	68fa      	ldr	r2, [r7, #12]
 c0087fa:	4313      	orrs	r3, r2
 c0087fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 c0087fe:	68fb      	ldr	r3, [r7, #12]
 c008800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 c008804:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 c008806:	683b      	ldr	r3, [r7, #0]
 c008808:	681b      	ldr	r3, [r3, #0]
 c00880a:	68fa      	ldr	r2, [r7, #12]
 c00880c:	4313      	orrs	r3, r2
 c00880e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 c008810:	687b      	ldr	r3, [r7, #4]
 c008812:	681b      	ldr	r3, [r3, #0]
 c008814:	68fa      	ldr	r2, [r7, #12]
 c008816:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 c008818:	687b      	ldr	r3, [r7, #4]
 c00881a:	681b      	ldr	r3, [r3, #0]
 c00881c:	4a1e      	ldr	r2, [pc, #120]	; (c008898 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 c00881e:	4293      	cmp	r3, r2
 c008820:	d01d      	beq.n	c00885e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c008822:	687b      	ldr	r3, [r7, #4]
 c008824:	681b      	ldr	r3, [r3, #0]
 c008826:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c00882a:	d018      	beq.n	c00885e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c00882c:	687b      	ldr	r3, [r7, #4]
 c00882e:	681b      	ldr	r3, [r3, #0]
 c008830:	4a1b      	ldr	r2, [pc, #108]	; (c0088a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 c008832:	4293      	cmp	r3, r2
 c008834:	d013      	beq.n	c00885e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c008836:	687b      	ldr	r3, [r7, #4]
 c008838:	681b      	ldr	r3, [r3, #0]
 c00883a:	4a1a      	ldr	r2, [pc, #104]	; (c0088a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 c00883c:	4293      	cmp	r3, r2
 c00883e:	d00e      	beq.n	c00885e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c008840:	687b      	ldr	r3, [r7, #4]
 c008842:	681b      	ldr	r3, [r3, #0]
 c008844:	4a18      	ldr	r2, [pc, #96]	; (c0088a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 c008846:	4293      	cmp	r3, r2
 c008848:	d009      	beq.n	c00885e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c00884a:	687b      	ldr	r3, [r7, #4]
 c00884c:	681b      	ldr	r3, [r3, #0]
 c00884e:	4a13      	ldr	r2, [pc, #76]	; (c00889c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 c008850:	4293      	cmp	r3, r2
 c008852:	d004      	beq.n	c00885e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c008854:	687b      	ldr	r3, [r7, #4]
 c008856:	681b      	ldr	r3, [r3, #0]
 c008858:	4a14      	ldr	r2, [pc, #80]	; (c0088ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 c00885a:	4293      	cmp	r3, r2
 c00885c:	d10c      	bne.n	c008878 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 c00885e:	68bb      	ldr	r3, [r7, #8]
 c008860:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c008864:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 c008866:	683b      	ldr	r3, [r7, #0]
 c008868:	689b      	ldr	r3, [r3, #8]
 c00886a:	68ba      	ldr	r2, [r7, #8]
 c00886c:	4313      	orrs	r3, r2
 c00886e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 c008870:	687b      	ldr	r3, [r7, #4]
 c008872:	681b      	ldr	r3, [r3, #0]
 c008874:	68ba      	ldr	r2, [r7, #8]
 c008876:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 c008878:	687b      	ldr	r3, [r7, #4]
 c00887a:	2201      	movs	r2, #1
 c00887c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 c008880:	687b      	ldr	r3, [r7, #4]
 c008882:	2200      	movs	r2, #0
 c008884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 c008888:	2300      	movs	r3, #0
}
 c00888a:	4618      	mov	r0, r3
 c00888c:	3714      	adds	r7, #20
 c00888e:	46bd      	mov	sp, r7
 c008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 c008894:	4770      	bx	lr
 c008896:	bf00      	nop
 c008898:	50012c00 	.word	0x50012c00
 c00889c:	50013400 	.word	0x50013400
 c0088a0:	50000400 	.word	0x50000400
 c0088a4:	50000800 	.word	0x50000800
 c0088a8:	50000c00 	.word	0x50000c00
 c0088ac:	50014000 	.word	0x50014000

0c0088b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 c0088b0:	b480      	push	{r7}
 c0088b2:	b083      	sub	sp, #12
 c0088b4:	af00      	add	r7, sp, #0
 c0088b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 c0088b8:	bf00      	nop
 c0088ba:	370c      	adds	r7, #12
 c0088bc:	46bd      	mov	sp, r7
 c0088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0088c2:	4770      	bx	lr

0c0088c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 c0088c4:	b480      	push	{r7}
 c0088c6:	b083      	sub	sp, #12
 c0088c8:	af00      	add	r7, sp, #0
 c0088ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 c0088cc:	bf00      	nop
 c0088ce:	370c      	adds	r7, #12
 c0088d0:	46bd      	mov	sp, r7
 c0088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0088d6:	4770      	bx	lr

0c0088d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 c0088d8:	b480      	push	{r7}
 c0088da:	b083      	sub	sp, #12
 c0088dc:	af00      	add	r7, sp, #0
 c0088de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 c0088e0:	bf00      	nop
 c0088e2:	370c      	adds	r7, #12
 c0088e4:	46bd      	mov	sp, r7
 c0088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0088ea:	4770      	bx	lr

0c0088ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 c0088ec:	b580      	push	{r7, lr}
 c0088ee:	b082      	sub	sp, #8
 c0088f0:	af00      	add	r7, sp, #0
 c0088f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 c0088f4:	687b      	ldr	r3, [r7, #4]
 c0088f6:	2b00      	cmp	r3, #0
 c0088f8:	d101      	bne.n	c0088fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 c0088fa:	2301      	movs	r3, #1
 c0088fc:	e042      	b.n	c008984 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 c0088fe:	687b      	ldr	r3, [r7, #4]
 c008900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c008904:	2b00      	cmp	r3, #0
 c008906:	d106      	bne.n	c008916 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 c008908:	687b      	ldr	r3, [r7, #4]
 c00890a:	2200      	movs	r2, #0
 c00890c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 c008910:	6878      	ldr	r0, [r7, #4]
 c008912:	f7fc fc5d 	bl	c0051d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 c008916:	687b      	ldr	r3, [r7, #4]
 c008918:	2224      	movs	r2, #36	; 0x24
 c00891a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 c00891e:	687b      	ldr	r3, [r7, #4]
 c008920:	681b      	ldr	r3, [r3, #0]
 c008922:	681a      	ldr	r2, [r3, #0]
 c008924:	687b      	ldr	r3, [r7, #4]
 c008926:	681b      	ldr	r3, [r3, #0]
 c008928:	f022 0201 	bic.w	r2, r2, #1
 c00892c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 c00892e:	6878      	ldr	r0, [r7, #4]
 c008930:	f000 f996 	bl	c008c60 <UART_SetConfig>
 c008934:	4603      	mov	r3, r0
 c008936:	2b01      	cmp	r3, #1
 c008938:	d101      	bne.n	c00893e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 c00893a:	2301      	movs	r3, #1
 c00893c:	e022      	b.n	c008984 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c00893e:	687b      	ldr	r3, [r7, #4]
 c008940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c008942:	2b00      	cmp	r3, #0
 c008944:	d002      	beq.n	c00894c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 c008946:	6878      	ldr	r0, [r7, #4]
 c008948:	f000 fc88 	bl	c00925c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c00894c:	687b      	ldr	r3, [r7, #4]
 c00894e:	681b      	ldr	r3, [r3, #0]
 c008950:	685a      	ldr	r2, [r3, #4]
 c008952:	687b      	ldr	r3, [r7, #4]
 c008954:	681b      	ldr	r3, [r3, #0]
 c008956:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 c00895a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c00895c:	687b      	ldr	r3, [r7, #4]
 c00895e:	681b      	ldr	r3, [r3, #0]
 c008960:	689a      	ldr	r2, [r3, #8]
 c008962:	687b      	ldr	r3, [r7, #4]
 c008964:	681b      	ldr	r3, [r3, #0]
 c008966:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 c00896a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 c00896c:	687b      	ldr	r3, [r7, #4]
 c00896e:	681b      	ldr	r3, [r3, #0]
 c008970:	681a      	ldr	r2, [r3, #0]
 c008972:	687b      	ldr	r3, [r7, #4]
 c008974:	681b      	ldr	r3, [r3, #0]
 c008976:	f042 0201 	orr.w	r2, r2, #1
 c00897a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 c00897c:	6878      	ldr	r0, [r7, #4]
 c00897e:	f000 fd0f 	bl	c0093a0 <UART_CheckIdleState>
 c008982:	4603      	mov	r3, r0
}
 c008984:	4618      	mov	r0, r3
 c008986:	3708      	adds	r7, #8
 c008988:	46bd      	mov	sp, r7
 c00898a:	bd80      	pop	{r7, pc}

0c00898c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c00898c:	b580      	push	{r7, lr}
 c00898e:	b08a      	sub	sp, #40	; 0x28
 c008990:	af02      	add	r7, sp, #8
 c008992:	60f8      	str	r0, [r7, #12]
 c008994:	60b9      	str	r1, [r7, #8]
 c008996:	603b      	str	r3, [r7, #0]
 c008998:	4613      	mov	r3, r2
 c00899a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 c00899c:	68fb      	ldr	r3, [r7, #12]
 c00899e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c0089a2:	2b20      	cmp	r3, #32
 c0089a4:	f040 8083 	bne.w	c008aae <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 c0089a8:	68bb      	ldr	r3, [r7, #8]
 c0089aa:	2b00      	cmp	r3, #0
 c0089ac:	d002      	beq.n	c0089b4 <HAL_UART_Transmit+0x28>
 c0089ae:	88fb      	ldrh	r3, [r7, #6]
 c0089b0:	2b00      	cmp	r3, #0
 c0089b2:	d101      	bne.n	c0089b8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 c0089b4:	2301      	movs	r3, #1
 c0089b6:	e07b      	b.n	c008ab0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 c0089b8:	68fb      	ldr	r3, [r7, #12]
 c0089ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c0089be:	2b01      	cmp	r3, #1
 c0089c0:	d101      	bne.n	c0089c6 <HAL_UART_Transmit+0x3a>
 c0089c2:	2302      	movs	r3, #2
 c0089c4:	e074      	b.n	c008ab0 <HAL_UART_Transmit+0x124>
 c0089c6:	68fb      	ldr	r3, [r7, #12]
 c0089c8:	2201      	movs	r2, #1
 c0089ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c0089ce:	68fb      	ldr	r3, [r7, #12]
 c0089d0:	2200      	movs	r2, #0
 c0089d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c0089d6:	68fb      	ldr	r3, [r7, #12]
 c0089d8:	2221      	movs	r2, #33	; 0x21
 c0089da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c0089de:	f7fc fd13 	bl	c005408 <HAL_GetTick>
 c0089e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 c0089e4:	68fb      	ldr	r3, [r7, #12]
 c0089e6:	88fa      	ldrh	r2, [r7, #6]
 c0089e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 c0089ec:	68fb      	ldr	r3, [r7, #12]
 c0089ee:	88fa      	ldrh	r2, [r7, #6]
 c0089f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c0089f4:	68fb      	ldr	r3, [r7, #12]
 c0089f6:	689b      	ldr	r3, [r3, #8]
 c0089f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c0089fc:	d108      	bne.n	c008a10 <HAL_UART_Transmit+0x84>
 c0089fe:	68fb      	ldr	r3, [r7, #12]
 c008a00:	691b      	ldr	r3, [r3, #16]
 c008a02:	2b00      	cmp	r3, #0
 c008a04:	d104      	bne.n	c008a10 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 c008a06:	2300      	movs	r3, #0
 c008a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 c008a0a:	68bb      	ldr	r3, [r7, #8]
 c008a0c:	61bb      	str	r3, [r7, #24]
 c008a0e:	e003      	b.n	c008a18 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 c008a10:	68bb      	ldr	r3, [r7, #8]
 c008a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c008a14:	2300      	movs	r3, #0
 c008a16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 c008a18:	68fb      	ldr	r3, [r7, #12]
 c008a1a:	2200      	movs	r2, #0
 c008a1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 c008a20:	e02c      	b.n	c008a7c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 c008a22:	683b      	ldr	r3, [r7, #0]
 c008a24:	9300      	str	r3, [sp, #0]
 c008a26:	697b      	ldr	r3, [r7, #20]
 c008a28:	2200      	movs	r2, #0
 c008a2a:	2180      	movs	r1, #128	; 0x80
 c008a2c:	68f8      	ldr	r0, [r7, #12]
 c008a2e:	f000 fd02 	bl	c009436 <UART_WaitOnFlagUntilTimeout>
 c008a32:	4603      	mov	r3, r0
 c008a34:	2b00      	cmp	r3, #0
 c008a36:	d001      	beq.n	c008a3c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 c008a38:	2303      	movs	r3, #3
 c008a3a:	e039      	b.n	c008ab0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 c008a3c:	69fb      	ldr	r3, [r7, #28]
 c008a3e:	2b00      	cmp	r3, #0
 c008a40:	d10b      	bne.n	c008a5a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 c008a42:	69bb      	ldr	r3, [r7, #24]
 c008a44:	881b      	ldrh	r3, [r3, #0]
 c008a46:	461a      	mov	r2, r3
 c008a48:	68fb      	ldr	r3, [r7, #12]
 c008a4a:	681b      	ldr	r3, [r3, #0]
 c008a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 c008a50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 c008a52:	69bb      	ldr	r3, [r7, #24]
 c008a54:	3302      	adds	r3, #2
 c008a56:	61bb      	str	r3, [r7, #24]
 c008a58:	e007      	b.n	c008a6a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 c008a5a:	69fb      	ldr	r3, [r7, #28]
 c008a5c:	781a      	ldrb	r2, [r3, #0]
 c008a5e:	68fb      	ldr	r3, [r7, #12]
 c008a60:	681b      	ldr	r3, [r3, #0]
 c008a62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 c008a64:	69fb      	ldr	r3, [r7, #28]
 c008a66:	3301      	adds	r3, #1
 c008a68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 c008a6a:	68fb      	ldr	r3, [r7, #12]
 c008a6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c008a70:	b29b      	uxth	r3, r3
 c008a72:	3b01      	subs	r3, #1
 c008a74:	b29a      	uxth	r2, r3
 c008a76:	68fb      	ldr	r3, [r7, #12]
 c008a78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 c008a7c:	68fb      	ldr	r3, [r7, #12]
 c008a7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c008a82:	b29b      	uxth	r3, r3
 c008a84:	2b00      	cmp	r3, #0
 c008a86:	d1cc      	bne.n	c008a22 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 c008a88:	683b      	ldr	r3, [r7, #0]
 c008a8a:	9300      	str	r3, [sp, #0]
 c008a8c:	697b      	ldr	r3, [r7, #20]
 c008a8e:	2200      	movs	r2, #0
 c008a90:	2140      	movs	r1, #64	; 0x40
 c008a92:	68f8      	ldr	r0, [r7, #12]
 c008a94:	f000 fccf 	bl	c009436 <UART_WaitOnFlagUntilTimeout>
 c008a98:	4603      	mov	r3, r0
 c008a9a:	2b00      	cmp	r3, #0
 c008a9c:	d001      	beq.n	c008aa2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 c008a9e:	2303      	movs	r3, #3
 c008aa0:	e006      	b.n	c008ab0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 c008aa2:	68fb      	ldr	r3, [r7, #12]
 c008aa4:	2220      	movs	r2, #32
 c008aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 c008aaa:	2300      	movs	r3, #0
 c008aac:	e000      	b.n	c008ab0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 c008aae:	2302      	movs	r3, #2
  }
}
 c008ab0:	4618      	mov	r0, r3
 c008ab2:	3720      	adds	r7, #32
 c008ab4:	46bd      	mov	sp, r7
 c008ab6:	bd80      	pop	{r7, pc}

0c008ab8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c008ab8:	b580      	push	{r7, lr}
 c008aba:	b08a      	sub	sp, #40	; 0x28
 c008abc:	af02      	add	r7, sp, #8
 c008abe:	60f8      	str	r0, [r7, #12]
 c008ac0:	60b9      	str	r1, [r7, #8]
 c008ac2:	603b      	str	r3, [r7, #0]
 c008ac4:	4613      	mov	r3, r2
 c008ac6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 c008ac8:	68fb      	ldr	r3, [r7, #12]
 c008aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c008ace:	2b20      	cmp	r3, #32
 c008ad0:	f040 80c0 	bne.w	c008c54 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 c008ad4:	68bb      	ldr	r3, [r7, #8]
 c008ad6:	2b00      	cmp	r3, #0
 c008ad8:	d002      	beq.n	c008ae0 <HAL_UART_Receive+0x28>
 c008ada:	88fb      	ldrh	r3, [r7, #6]
 c008adc:	2b00      	cmp	r3, #0
 c008ade:	d101      	bne.n	c008ae4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 c008ae0:	2301      	movs	r3, #1
 c008ae2:	e0b8      	b.n	c008c56 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 c008ae4:	68fb      	ldr	r3, [r7, #12]
 c008ae6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c008aea:	2b01      	cmp	r3, #1
 c008aec:	d101      	bne.n	c008af2 <HAL_UART_Receive+0x3a>
 c008aee:	2302      	movs	r3, #2
 c008af0:	e0b1      	b.n	c008c56 <HAL_UART_Receive+0x19e>
 c008af2:	68fb      	ldr	r3, [r7, #12]
 c008af4:	2201      	movs	r2, #1
 c008af6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c008afa:	68fb      	ldr	r3, [r7, #12]
 c008afc:	2200      	movs	r2, #0
 c008afe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 c008b02:	68fb      	ldr	r3, [r7, #12]
 c008b04:	2222      	movs	r2, #34	; 0x22
 c008b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c008b0a:	68fb      	ldr	r3, [r7, #12]
 c008b0c:	2200      	movs	r2, #0
 c008b0e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c008b10:	f7fc fc7a 	bl	c005408 <HAL_GetTick>
 c008b14:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 c008b16:	68fb      	ldr	r3, [r7, #12]
 c008b18:	88fa      	ldrh	r2, [r7, #6]
 c008b1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 c008b1e:	68fb      	ldr	r3, [r7, #12]
 c008b20:	88fa      	ldrh	r2, [r7, #6]
 c008b22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 c008b26:	68fb      	ldr	r3, [r7, #12]
 c008b28:	689b      	ldr	r3, [r3, #8]
 c008b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c008b2e:	d10e      	bne.n	c008b4e <HAL_UART_Receive+0x96>
 c008b30:	68fb      	ldr	r3, [r7, #12]
 c008b32:	691b      	ldr	r3, [r3, #16]
 c008b34:	2b00      	cmp	r3, #0
 c008b36:	d105      	bne.n	c008b44 <HAL_UART_Receive+0x8c>
 c008b38:	68fb      	ldr	r3, [r7, #12]
 c008b3a:	f240 12ff 	movw	r2, #511	; 0x1ff
 c008b3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c008b42:	e02d      	b.n	c008ba0 <HAL_UART_Receive+0xe8>
 c008b44:	68fb      	ldr	r3, [r7, #12]
 c008b46:	22ff      	movs	r2, #255	; 0xff
 c008b48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c008b4c:	e028      	b.n	c008ba0 <HAL_UART_Receive+0xe8>
 c008b4e:	68fb      	ldr	r3, [r7, #12]
 c008b50:	689b      	ldr	r3, [r3, #8]
 c008b52:	2b00      	cmp	r3, #0
 c008b54:	d10d      	bne.n	c008b72 <HAL_UART_Receive+0xba>
 c008b56:	68fb      	ldr	r3, [r7, #12]
 c008b58:	691b      	ldr	r3, [r3, #16]
 c008b5a:	2b00      	cmp	r3, #0
 c008b5c:	d104      	bne.n	c008b68 <HAL_UART_Receive+0xb0>
 c008b5e:	68fb      	ldr	r3, [r7, #12]
 c008b60:	22ff      	movs	r2, #255	; 0xff
 c008b62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c008b66:	e01b      	b.n	c008ba0 <HAL_UART_Receive+0xe8>
 c008b68:	68fb      	ldr	r3, [r7, #12]
 c008b6a:	227f      	movs	r2, #127	; 0x7f
 c008b6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c008b70:	e016      	b.n	c008ba0 <HAL_UART_Receive+0xe8>
 c008b72:	68fb      	ldr	r3, [r7, #12]
 c008b74:	689b      	ldr	r3, [r3, #8]
 c008b76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c008b7a:	d10d      	bne.n	c008b98 <HAL_UART_Receive+0xe0>
 c008b7c:	68fb      	ldr	r3, [r7, #12]
 c008b7e:	691b      	ldr	r3, [r3, #16]
 c008b80:	2b00      	cmp	r3, #0
 c008b82:	d104      	bne.n	c008b8e <HAL_UART_Receive+0xd6>
 c008b84:	68fb      	ldr	r3, [r7, #12]
 c008b86:	227f      	movs	r2, #127	; 0x7f
 c008b88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c008b8c:	e008      	b.n	c008ba0 <HAL_UART_Receive+0xe8>
 c008b8e:	68fb      	ldr	r3, [r7, #12]
 c008b90:	223f      	movs	r2, #63	; 0x3f
 c008b92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c008b96:	e003      	b.n	c008ba0 <HAL_UART_Receive+0xe8>
 c008b98:	68fb      	ldr	r3, [r7, #12]
 c008b9a:	2200      	movs	r2, #0
 c008b9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 c008ba0:	68fb      	ldr	r3, [r7, #12]
 c008ba2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 c008ba6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c008ba8:	68fb      	ldr	r3, [r7, #12]
 c008baa:	689b      	ldr	r3, [r3, #8]
 c008bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c008bb0:	d108      	bne.n	c008bc4 <HAL_UART_Receive+0x10c>
 c008bb2:	68fb      	ldr	r3, [r7, #12]
 c008bb4:	691b      	ldr	r3, [r3, #16]
 c008bb6:	2b00      	cmp	r3, #0
 c008bb8:	d104      	bne.n	c008bc4 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 c008bba:	2300      	movs	r3, #0
 c008bbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 c008bbe:	68bb      	ldr	r3, [r7, #8]
 c008bc0:	61bb      	str	r3, [r7, #24]
 c008bc2:	e003      	b.n	c008bcc <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 c008bc4:	68bb      	ldr	r3, [r7, #8]
 c008bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c008bc8:	2300      	movs	r3, #0
 c008bca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 c008bcc:	68fb      	ldr	r3, [r7, #12]
 c008bce:	2200      	movs	r2, #0
 c008bd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 c008bd4:	e032      	b.n	c008c3c <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 c008bd6:	683b      	ldr	r3, [r7, #0]
 c008bd8:	9300      	str	r3, [sp, #0]
 c008bda:	697b      	ldr	r3, [r7, #20]
 c008bdc:	2200      	movs	r2, #0
 c008bde:	2120      	movs	r1, #32
 c008be0:	68f8      	ldr	r0, [r7, #12]
 c008be2:	f000 fc28 	bl	c009436 <UART_WaitOnFlagUntilTimeout>
 c008be6:	4603      	mov	r3, r0
 c008be8:	2b00      	cmp	r3, #0
 c008bea:	d001      	beq.n	c008bf0 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 c008bec:	2303      	movs	r3, #3
 c008bee:	e032      	b.n	c008c56 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 c008bf0:	69fb      	ldr	r3, [r7, #28]
 c008bf2:	2b00      	cmp	r3, #0
 c008bf4:	d10c      	bne.n	c008c10 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 c008bf6:	68fb      	ldr	r3, [r7, #12]
 c008bf8:	681b      	ldr	r3, [r3, #0]
 c008bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c008bfc:	b29a      	uxth	r2, r3
 c008bfe:	8a7b      	ldrh	r3, [r7, #18]
 c008c00:	4013      	ands	r3, r2
 c008c02:	b29a      	uxth	r2, r3
 c008c04:	69bb      	ldr	r3, [r7, #24]
 c008c06:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 c008c08:	69bb      	ldr	r3, [r7, #24]
 c008c0a:	3302      	adds	r3, #2
 c008c0c:	61bb      	str	r3, [r7, #24]
 c008c0e:	e00c      	b.n	c008c2a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 c008c10:	68fb      	ldr	r3, [r7, #12]
 c008c12:	681b      	ldr	r3, [r3, #0]
 c008c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c008c16:	b2da      	uxtb	r2, r3
 c008c18:	8a7b      	ldrh	r3, [r7, #18]
 c008c1a:	b2db      	uxtb	r3, r3
 c008c1c:	4013      	ands	r3, r2
 c008c1e:	b2da      	uxtb	r2, r3
 c008c20:	69fb      	ldr	r3, [r7, #28]
 c008c22:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 c008c24:	69fb      	ldr	r3, [r7, #28]
 c008c26:	3301      	adds	r3, #1
 c008c28:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 c008c2a:	68fb      	ldr	r3, [r7, #12]
 c008c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 c008c30:	b29b      	uxth	r3, r3
 c008c32:	3b01      	subs	r3, #1
 c008c34:	b29a      	uxth	r2, r3
 c008c36:	68fb      	ldr	r3, [r7, #12]
 c008c38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 c008c3c:	68fb      	ldr	r3, [r7, #12]
 c008c3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 c008c42:	b29b      	uxth	r3, r3
 c008c44:	2b00      	cmp	r3, #0
 c008c46:	d1c6      	bne.n	c008bd6 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 c008c48:	68fb      	ldr	r3, [r7, #12]
 c008c4a:	2220      	movs	r2, #32
 c008c4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 c008c50:	2300      	movs	r3, #0
 c008c52:	e000      	b.n	c008c56 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 c008c54:	2302      	movs	r3, #2
  }
}
 c008c56:	4618      	mov	r0, r3
 c008c58:	3720      	adds	r7, #32
 c008c5a:	46bd      	mov	sp, r7
 c008c5c:	bd80      	pop	{r7, pc}
	...

0c008c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 c008c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c008c64:	b08c      	sub	sp, #48	; 0x30
 c008c66:	af00      	add	r7, sp, #0
 c008c68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 c008c6a:	2300      	movs	r3, #0
 c008c6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c008c70:	697b      	ldr	r3, [r7, #20]
 c008c72:	689a      	ldr	r2, [r3, #8]
 c008c74:	697b      	ldr	r3, [r7, #20]
 c008c76:	691b      	ldr	r3, [r3, #16]
 c008c78:	431a      	orrs	r2, r3
 c008c7a:	697b      	ldr	r3, [r7, #20]
 c008c7c:	695b      	ldr	r3, [r3, #20]
 c008c7e:	431a      	orrs	r2, r3
 c008c80:	697b      	ldr	r3, [r7, #20]
 c008c82:	69db      	ldr	r3, [r3, #28]
 c008c84:	4313      	orrs	r3, r2
 c008c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c008c88:	697b      	ldr	r3, [r7, #20]
 c008c8a:	681b      	ldr	r3, [r3, #0]
 c008c8c:	681a      	ldr	r2, [r3, #0]
 c008c8e:	4baa      	ldr	r3, [pc, #680]	; (c008f38 <UART_SetConfig+0x2d8>)
 c008c90:	4013      	ands	r3, r2
 c008c92:	697a      	ldr	r2, [r7, #20]
 c008c94:	6812      	ldr	r2, [r2, #0]
 c008c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c008c98:	430b      	orrs	r3, r1
 c008c9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c008c9c:	697b      	ldr	r3, [r7, #20]
 c008c9e:	681b      	ldr	r3, [r3, #0]
 c008ca0:	685b      	ldr	r3, [r3, #4]
 c008ca2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 c008ca6:	697b      	ldr	r3, [r7, #20]
 c008ca8:	68da      	ldr	r2, [r3, #12]
 c008caa:	697b      	ldr	r3, [r7, #20]
 c008cac:	681b      	ldr	r3, [r3, #0]
 c008cae:	430a      	orrs	r2, r1
 c008cb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c008cb2:	697b      	ldr	r3, [r7, #20]
 c008cb4:	699b      	ldr	r3, [r3, #24]
 c008cb6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c008cb8:	697b      	ldr	r3, [r7, #20]
 c008cba:	681b      	ldr	r3, [r3, #0]
 c008cbc:	4a9f      	ldr	r2, [pc, #636]	; (c008f3c <UART_SetConfig+0x2dc>)
 c008cbe:	4293      	cmp	r3, r2
 c008cc0:	d004      	beq.n	c008ccc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 c008cc2:	697b      	ldr	r3, [r7, #20]
 c008cc4:	6a1b      	ldr	r3, [r3, #32]
 c008cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c008cc8:	4313      	orrs	r3, r2
 c008cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c008ccc:	697b      	ldr	r3, [r7, #20]
 c008cce:	681b      	ldr	r3, [r3, #0]
 c008cd0:	689b      	ldr	r3, [r3, #8]
 c008cd2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 c008cd6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 c008cda:	697a      	ldr	r2, [r7, #20]
 c008cdc:	6812      	ldr	r2, [r2, #0]
 c008cde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c008ce0:	430b      	orrs	r3, r1
 c008ce2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c008ce4:	697b      	ldr	r3, [r7, #20]
 c008ce6:	681b      	ldr	r3, [r3, #0]
 c008ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c008cea:	f023 010f 	bic.w	r1, r3, #15
 c008cee:	697b      	ldr	r3, [r7, #20]
 c008cf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c008cf2:	697b      	ldr	r3, [r7, #20]
 c008cf4:	681b      	ldr	r3, [r3, #0]
 c008cf6:	430a      	orrs	r2, r1
 c008cf8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 c008cfa:	697b      	ldr	r3, [r7, #20]
 c008cfc:	681b      	ldr	r3, [r3, #0]
 c008cfe:	4a90      	ldr	r2, [pc, #576]	; (c008f40 <UART_SetConfig+0x2e0>)
 c008d00:	4293      	cmp	r3, r2
 c008d02:	d125      	bne.n	c008d50 <UART_SetConfig+0xf0>
 c008d04:	4b8f      	ldr	r3, [pc, #572]	; (c008f44 <UART_SetConfig+0x2e4>)
 c008d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c008d0a:	f003 0303 	and.w	r3, r3, #3
 c008d0e:	2b03      	cmp	r3, #3
 c008d10:	d81a      	bhi.n	c008d48 <UART_SetConfig+0xe8>
 c008d12:	a201      	add	r2, pc, #4	; (adr r2, c008d18 <UART_SetConfig+0xb8>)
 c008d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c008d18:	0c008d29 	.word	0x0c008d29
 c008d1c:	0c008d39 	.word	0x0c008d39
 c008d20:	0c008d31 	.word	0x0c008d31
 c008d24:	0c008d41 	.word	0x0c008d41
 c008d28:	2301      	movs	r3, #1
 c008d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008d2e:	e114      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008d30:	2302      	movs	r3, #2
 c008d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008d36:	e110      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008d38:	2304      	movs	r3, #4
 c008d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008d3e:	e10c      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008d40:	2308      	movs	r3, #8
 c008d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008d46:	e108      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008d48:	2310      	movs	r3, #16
 c008d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008d4e:	e104      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008d50:	697b      	ldr	r3, [r7, #20]
 c008d52:	681b      	ldr	r3, [r3, #0]
 c008d54:	4a7c      	ldr	r2, [pc, #496]	; (c008f48 <UART_SetConfig+0x2e8>)
 c008d56:	4293      	cmp	r3, r2
 c008d58:	d138      	bne.n	c008dcc <UART_SetConfig+0x16c>
 c008d5a:	4b7a      	ldr	r3, [pc, #488]	; (c008f44 <UART_SetConfig+0x2e4>)
 c008d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c008d60:	f003 030c 	and.w	r3, r3, #12
 c008d64:	2b0c      	cmp	r3, #12
 c008d66:	d82d      	bhi.n	c008dc4 <UART_SetConfig+0x164>
 c008d68:	a201      	add	r2, pc, #4	; (adr r2, c008d70 <UART_SetConfig+0x110>)
 c008d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c008d6e:	bf00      	nop
 c008d70:	0c008da5 	.word	0x0c008da5
 c008d74:	0c008dc5 	.word	0x0c008dc5
 c008d78:	0c008dc5 	.word	0x0c008dc5
 c008d7c:	0c008dc5 	.word	0x0c008dc5
 c008d80:	0c008db5 	.word	0x0c008db5
 c008d84:	0c008dc5 	.word	0x0c008dc5
 c008d88:	0c008dc5 	.word	0x0c008dc5
 c008d8c:	0c008dc5 	.word	0x0c008dc5
 c008d90:	0c008dad 	.word	0x0c008dad
 c008d94:	0c008dc5 	.word	0x0c008dc5
 c008d98:	0c008dc5 	.word	0x0c008dc5
 c008d9c:	0c008dc5 	.word	0x0c008dc5
 c008da0:	0c008dbd 	.word	0x0c008dbd
 c008da4:	2300      	movs	r3, #0
 c008da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008daa:	e0d6      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008dac:	2302      	movs	r3, #2
 c008dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008db2:	e0d2      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008db4:	2304      	movs	r3, #4
 c008db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008dba:	e0ce      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008dbc:	2308      	movs	r3, #8
 c008dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008dc2:	e0ca      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008dc4:	2310      	movs	r3, #16
 c008dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008dca:	e0c6      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008dcc:	697b      	ldr	r3, [r7, #20]
 c008dce:	681b      	ldr	r3, [r3, #0]
 c008dd0:	4a5e      	ldr	r2, [pc, #376]	; (c008f4c <UART_SetConfig+0x2ec>)
 c008dd2:	4293      	cmp	r3, r2
 c008dd4:	d125      	bne.n	c008e22 <UART_SetConfig+0x1c2>
 c008dd6:	4b5b      	ldr	r3, [pc, #364]	; (c008f44 <UART_SetConfig+0x2e4>)
 c008dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c008ddc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 c008de0:	2b30      	cmp	r3, #48	; 0x30
 c008de2:	d016      	beq.n	c008e12 <UART_SetConfig+0x1b2>
 c008de4:	2b30      	cmp	r3, #48	; 0x30
 c008de6:	d818      	bhi.n	c008e1a <UART_SetConfig+0x1ba>
 c008de8:	2b20      	cmp	r3, #32
 c008dea:	d00a      	beq.n	c008e02 <UART_SetConfig+0x1a2>
 c008dec:	2b20      	cmp	r3, #32
 c008dee:	d814      	bhi.n	c008e1a <UART_SetConfig+0x1ba>
 c008df0:	2b00      	cmp	r3, #0
 c008df2:	d002      	beq.n	c008dfa <UART_SetConfig+0x19a>
 c008df4:	2b10      	cmp	r3, #16
 c008df6:	d008      	beq.n	c008e0a <UART_SetConfig+0x1aa>
 c008df8:	e00f      	b.n	c008e1a <UART_SetConfig+0x1ba>
 c008dfa:	2300      	movs	r3, #0
 c008dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008e00:	e0ab      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008e02:	2302      	movs	r3, #2
 c008e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008e08:	e0a7      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008e0a:	2304      	movs	r3, #4
 c008e0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008e10:	e0a3      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008e12:	2308      	movs	r3, #8
 c008e14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008e18:	e09f      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008e1a:	2310      	movs	r3, #16
 c008e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008e20:	e09b      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008e22:	697b      	ldr	r3, [r7, #20]
 c008e24:	681b      	ldr	r3, [r3, #0]
 c008e26:	4a4a      	ldr	r2, [pc, #296]	; (c008f50 <UART_SetConfig+0x2f0>)
 c008e28:	4293      	cmp	r3, r2
 c008e2a:	d125      	bne.n	c008e78 <UART_SetConfig+0x218>
 c008e2c:	4b45      	ldr	r3, [pc, #276]	; (c008f44 <UART_SetConfig+0x2e4>)
 c008e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c008e32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 c008e36:	2bc0      	cmp	r3, #192	; 0xc0
 c008e38:	d016      	beq.n	c008e68 <UART_SetConfig+0x208>
 c008e3a:	2bc0      	cmp	r3, #192	; 0xc0
 c008e3c:	d818      	bhi.n	c008e70 <UART_SetConfig+0x210>
 c008e3e:	2b80      	cmp	r3, #128	; 0x80
 c008e40:	d00a      	beq.n	c008e58 <UART_SetConfig+0x1f8>
 c008e42:	2b80      	cmp	r3, #128	; 0x80
 c008e44:	d814      	bhi.n	c008e70 <UART_SetConfig+0x210>
 c008e46:	2b00      	cmp	r3, #0
 c008e48:	d002      	beq.n	c008e50 <UART_SetConfig+0x1f0>
 c008e4a:	2b40      	cmp	r3, #64	; 0x40
 c008e4c:	d008      	beq.n	c008e60 <UART_SetConfig+0x200>
 c008e4e:	e00f      	b.n	c008e70 <UART_SetConfig+0x210>
 c008e50:	2300      	movs	r3, #0
 c008e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008e56:	e080      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008e58:	2302      	movs	r3, #2
 c008e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008e5e:	e07c      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008e60:	2304      	movs	r3, #4
 c008e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008e66:	e078      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008e68:	2308      	movs	r3, #8
 c008e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008e6e:	e074      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008e70:	2310      	movs	r3, #16
 c008e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008e76:	e070      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008e78:	697b      	ldr	r3, [r7, #20]
 c008e7a:	681b      	ldr	r3, [r3, #0]
 c008e7c:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 c008e80:	d12a      	bne.n	c008ed8 <UART_SetConfig+0x278>
 c008e82:	4b30      	ldr	r3, [pc, #192]	; (c008f44 <UART_SetConfig+0x2e4>)
 c008e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c008e88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c008e8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c008e90:	d01a      	beq.n	c008ec8 <UART_SetConfig+0x268>
 c008e92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c008e96:	d81b      	bhi.n	c008ed0 <UART_SetConfig+0x270>
 c008e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c008e9c:	d00c      	beq.n	c008eb8 <UART_SetConfig+0x258>
 c008e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c008ea2:	d815      	bhi.n	c008ed0 <UART_SetConfig+0x270>
 c008ea4:	2b00      	cmp	r3, #0
 c008ea6:	d003      	beq.n	c008eb0 <UART_SetConfig+0x250>
 c008ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c008eac:	d008      	beq.n	c008ec0 <UART_SetConfig+0x260>
 c008eae:	e00f      	b.n	c008ed0 <UART_SetConfig+0x270>
 c008eb0:	2300      	movs	r3, #0
 c008eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008eb6:	e050      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008eb8:	2302      	movs	r3, #2
 c008eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008ebe:	e04c      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008ec0:	2304      	movs	r3, #4
 c008ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008ec6:	e048      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008ec8:	2308      	movs	r3, #8
 c008eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008ece:	e044      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008ed0:	2310      	movs	r3, #16
 c008ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008ed6:	e040      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008ed8:	697b      	ldr	r3, [r7, #20]
 c008eda:	681b      	ldr	r3, [r3, #0]
 c008edc:	4a17      	ldr	r2, [pc, #92]	; (c008f3c <UART_SetConfig+0x2dc>)
 c008ede:	4293      	cmp	r3, r2
 c008ee0:	d138      	bne.n	c008f54 <UART_SetConfig+0x2f4>
 c008ee2:	4b18      	ldr	r3, [pc, #96]	; (c008f44 <UART_SetConfig+0x2e4>)
 c008ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c008ee8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 c008eec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c008ef0:	d01a      	beq.n	c008f28 <UART_SetConfig+0x2c8>
 c008ef2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c008ef6:	d81b      	bhi.n	c008f30 <UART_SetConfig+0x2d0>
 c008ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c008efc:	d00c      	beq.n	c008f18 <UART_SetConfig+0x2b8>
 c008efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c008f02:	d815      	bhi.n	c008f30 <UART_SetConfig+0x2d0>
 c008f04:	2b00      	cmp	r3, #0
 c008f06:	d003      	beq.n	c008f10 <UART_SetConfig+0x2b0>
 c008f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c008f0c:	d008      	beq.n	c008f20 <UART_SetConfig+0x2c0>
 c008f0e:	e00f      	b.n	c008f30 <UART_SetConfig+0x2d0>
 c008f10:	2300      	movs	r3, #0
 c008f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008f16:	e020      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008f18:	2302      	movs	r3, #2
 c008f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008f1e:	e01c      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008f20:	2304      	movs	r3, #4
 c008f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008f26:	e018      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008f28:	2308      	movs	r3, #8
 c008f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008f2e:	e014      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008f30:	2310      	movs	r3, #16
 c008f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c008f36:	e010      	b.n	c008f5a <UART_SetConfig+0x2fa>
 c008f38:	cfff69f3 	.word	0xcfff69f3
 c008f3c:	50008000 	.word	0x50008000
 c008f40:	50013800 	.word	0x50013800
 c008f44:	50021000 	.word	0x50021000
 c008f48:	50004400 	.word	0x50004400
 c008f4c:	50004800 	.word	0x50004800
 c008f50:	50004c00 	.word	0x50004c00
 c008f54:	2310      	movs	r3, #16
 c008f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 c008f5a:	697b      	ldr	r3, [r7, #20]
 c008f5c:	681b      	ldr	r3, [r3, #0]
 c008f5e:	4ab0      	ldr	r2, [pc, #704]	; (c009220 <UART_SetConfig+0x5c0>)
 c008f60:	4293      	cmp	r3, r2
 c008f62:	f040 809b 	bne.w	c00909c <UART_SetConfig+0x43c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 c008f66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c008f6a:	2b08      	cmp	r3, #8
 c008f6c:	d827      	bhi.n	c008fbe <UART_SetConfig+0x35e>
 c008f6e:	a201      	add	r2, pc, #4	; (adr r2, c008f74 <UART_SetConfig+0x314>)
 c008f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c008f74:	0c008f99 	.word	0x0c008f99
 c008f78:	0c008fa1 	.word	0x0c008fa1
 c008f7c:	0c008fa9 	.word	0x0c008fa9
 c008f80:	0c008fbf 	.word	0x0c008fbf
 c008f84:	0c008faf 	.word	0x0c008faf
 c008f88:	0c008fbf 	.word	0x0c008fbf
 c008f8c:	0c008fbf 	.word	0x0c008fbf
 c008f90:	0c008fbf 	.word	0x0c008fbf
 c008f94:	0c008fb7 	.word	0x0c008fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c008f98:	f7fe f942 	bl	c007220 <HAL_RCC_GetPCLK1Freq>
 c008f9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c008f9e:	e014      	b.n	c008fca <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c008fa0:	f7fe f952 	bl	c007248 <HAL_RCC_GetPCLK2Freq>
 c008fa4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c008fa6:	e010      	b.n	c008fca <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c008fa8:	4b9e      	ldr	r3, [pc, #632]	; (c009224 <UART_SetConfig+0x5c4>)
 c008faa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c008fac:	e00d      	b.n	c008fca <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c008fae:	f7fe f887 	bl	c0070c0 <HAL_RCC_GetSysClockFreq>
 c008fb2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c008fb4:	e009      	b.n	c008fca <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c008fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c008fba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c008fbc:	e005      	b.n	c008fca <UART_SetConfig+0x36a>
      default:
        pclk = 0U;
 c008fbe:	2300      	movs	r3, #0
 c008fc0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c008fc2:	2301      	movs	r3, #1
 c008fc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c008fc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 c008fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c008fcc:	2b00      	cmp	r3, #0
 c008fce:	f000 8130 	beq.w	c009232 <UART_SetConfig+0x5d2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c008fd2:	697b      	ldr	r3, [r7, #20]
 c008fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c008fd6:	4a94      	ldr	r2, [pc, #592]	; (c009228 <UART_SetConfig+0x5c8>)
 c008fd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c008fdc:	461a      	mov	r2, r3
 c008fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c008fe0:	fbb3 f3f2 	udiv	r3, r3, r2
 c008fe4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
//      volatile uint32_t value1 = 3U * huart->Init.BaudRate;
//      volatile uint32_t value2 = 4096U * huart->Init.BaudRate;
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c008fe6:	697b      	ldr	r3, [r7, #20]
 c008fe8:	685a      	ldr	r2, [r3, #4]
 c008fea:	4613      	mov	r3, r2
 c008fec:	005b      	lsls	r3, r3, #1
 c008fee:	4413      	add	r3, r2
 c008ff0:	69ba      	ldr	r2, [r7, #24]
 c008ff2:	429a      	cmp	r2, r3
 c008ff4:	d305      	bcc.n	c009002 <UART_SetConfig+0x3a2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 c008ff6:	697b      	ldr	r3, [r7, #20]
 c008ff8:	685b      	ldr	r3, [r3, #4]
 c008ffa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c008ffc:	69ba      	ldr	r2, [r7, #24]
 c008ffe:	429a      	cmp	r2, r3
 c009000:	d903      	bls.n	c00900a <UART_SetConfig+0x3aa>
      {
        ret = HAL_ERROR;
 c009002:	2301      	movs	r3, #1
 c009004:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c009008:	e113      	b.n	c009232 <UART_SetConfig+0x5d2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c00900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00900c:	2200      	movs	r2, #0
 c00900e:	60bb      	str	r3, [r7, #8]
 c009010:	60fa      	str	r2, [r7, #12]
 c009012:	697b      	ldr	r3, [r7, #20]
 c009014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c009016:	4a84      	ldr	r2, [pc, #528]	; (c009228 <UART_SetConfig+0x5c8>)
 c009018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c00901c:	b29b      	uxth	r3, r3
 c00901e:	2200      	movs	r2, #0
 c009020:	603b      	str	r3, [r7, #0]
 c009022:	607a      	str	r2, [r7, #4]
 c009024:	e9d7 2300 	ldrd	r2, r3, [r7]
 c009028:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 c00902c:	f7f7 f940 	bl	c0002b0 <__aeabi_uldivmod>
 c009030:	4602      	mov	r2, r0
 c009032:	460b      	mov	r3, r1
 c009034:	4610      	mov	r0, r2
 c009036:	4619      	mov	r1, r3
 c009038:	f04f 0200 	mov.w	r2, #0
 c00903c:	f04f 0300 	mov.w	r3, #0
 c009040:	020b      	lsls	r3, r1, #8
 c009042:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 c009046:	0202      	lsls	r2, r0, #8
 c009048:	6979      	ldr	r1, [r7, #20]
 c00904a:	6849      	ldr	r1, [r1, #4]
 c00904c:	0849      	lsrs	r1, r1, #1
 c00904e:	2000      	movs	r0, #0
 c009050:	460c      	mov	r4, r1
 c009052:	4605      	mov	r5, r0
 c009054:	eb12 0804 	adds.w	r8, r2, r4
 c009058:	eb43 0905 	adc.w	r9, r3, r5
 c00905c:	697b      	ldr	r3, [r7, #20]
 c00905e:	685b      	ldr	r3, [r3, #4]
 c009060:	2200      	movs	r2, #0
 c009062:	469a      	mov	sl, r3
 c009064:	4693      	mov	fp, r2
 c009066:	4652      	mov	r2, sl
 c009068:	465b      	mov	r3, fp
 c00906a:	4640      	mov	r0, r8
 c00906c:	4649      	mov	r1, r9
 c00906e:	f7f7 f91f 	bl	c0002b0 <__aeabi_uldivmod>
 c009072:	4602      	mov	r2, r0
 c009074:	460b      	mov	r3, r1
 c009076:	4613      	mov	r3, r2
 c009078:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c00907a:	6a3b      	ldr	r3, [r7, #32]
 c00907c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c009080:	d308      	bcc.n	c009094 <UART_SetConfig+0x434>
 c009082:	6a3b      	ldr	r3, [r7, #32]
 c009084:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c009088:	d204      	bcs.n	c009094 <UART_SetConfig+0x434>
        {
          huart->Instance->BRR = usartdiv;
 c00908a:	697b      	ldr	r3, [r7, #20]
 c00908c:	681b      	ldr	r3, [r3, #0]
 c00908e:	6a3a      	ldr	r2, [r7, #32]
 c009090:	60da      	str	r2, [r3, #12]
 c009092:	e0ce      	b.n	c009232 <UART_SetConfig+0x5d2>
        }
        else
        {
          ret = HAL_ERROR;
 c009094:	2301      	movs	r3, #1
 c009096:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c00909a:	e0ca      	b.n	c009232 <UART_SetConfig+0x5d2>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c00909c:	697b      	ldr	r3, [r7, #20]
 c00909e:	69db      	ldr	r3, [r3, #28]
 c0090a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c0090a4:	d167      	bne.n	c009176 <UART_SetConfig+0x516>
  {
    switch (clocksource)
 c0090a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c0090aa:	2b08      	cmp	r3, #8
 c0090ac:	d827      	bhi.n	c0090fe <UART_SetConfig+0x49e>
 c0090ae:	a201      	add	r2, pc, #4	; (adr r2, c0090b4 <UART_SetConfig+0x454>)
 c0090b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0090b4:	0c0090d9 	.word	0x0c0090d9
 c0090b8:	0c0090e1 	.word	0x0c0090e1
 c0090bc:	0c0090e9 	.word	0x0c0090e9
 c0090c0:	0c0090ff 	.word	0x0c0090ff
 c0090c4:	0c0090ef 	.word	0x0c0090ef
 c0090c8:	0c0090ff 	.word	0x0c0090ff
 c0090cc:	0c0090ff 	.word	0x0c0090ff
 c0090d0:	0c0090ff 	.word	0x0c0090ff
 c0090d4:	0c0090f7 	.word	0x0c0090f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c0090d8:	f7fe f8a2 	bl	c007220 <HAL_RCC_GetPCLK1Freq>
 c0090dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0090de:	e014      	b.n	c00910a <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c0090e0:	f7fe f8b2 	bl	c007248 <HAL_RCC_GetPCLK2Freq>
 c0090e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0090e6:	e010      	b.n	c00910a <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c0090e8:	4b4e      	ldr	r3, [pc, #312]	; (c009224 <UART_SetConfig+0x5c4>)
 c0090ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c0090ec:	e00d      	b.n	c00910a <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c0090ee:	f7fd ffe7 	bl	c0070c0 <HAL_RCC_GetSysClockFreq>
 c0090f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0090f4:	e009      	b.n	c00910a <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c0090f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c0090fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c0090fc:	e005      	b.n	c00910a <UART_SetConfig+0x4aa>
      default:
        pclk = 0U;
 c0090fe:	2300      	movs	r3, #0
 c009100:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c009102:	2301      	movs	r3, #1
 c009104:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c009108:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 c00910a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00910c:	2b00      	cmp	r3, #0
 c00910e:	f000 8090 	beq.w	c009232 <UART_SetConfig+0x5d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c009112:	697b      	ldr	r3, [r7, #20]
 c009114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c009116:	4a44      	ldr	r2, [pc, #272]	; (c009228 <UART_SetConfig+0x5c8>)
 c009118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c00911c:	461a      	mov	r2, r3
 c00911e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c009120:	fbb3 f3f2 	udiv	r3, r3, r2
 c009124:	005a      	lsls	r2, r3, #1
 c009126:	697b      	ldr	r3, [r7, #20]
 c009128:	685b      	ldr	r3, [r3, #4]
 c00912a:	085b      	lsrs	r3, r3, #1
 c00912c:	441a      	add	r2, r3
 c00912e:	697b      	ldr	r3, [r7, #20]
 c009130:	685b      	ldr	r3, [r3, #4]
 c009132:	fbb2 f3f3 	udiv	r3, r2, r3
 c009136:	b29b      	uxth	r3, r3
 c009138:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c00913a:	6a3b      	ldr	r3, [r7, #32]
 c00913c:	2b0f      	cmp	r3, #15
 c00913e:	d916      	bls.n	c00916e <UART_SetConfig+0x50e>
 c009140:	6a3b      	ldr	r3, [r7, #32]
 c009142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c009146:	d212      	bcs.n	c00916e <UART_SetConfig+0x50e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c009148:	6a3b      	ldr	r3, [r7, #32]
 c00914a:	b29b      	uxth	r3, r3
 c00914c:	f023 030f 	bic.w	r3, r3, #15
 c009150:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c009152:	6a3b      	ldr	r3, [r7, #32]
 c009154:	085b      	lsrs	r3, r3, #1
 c009156:	b29b      	uxth	r3, r3
 c009158:	f003 0307 	and.w	r3, r3, #7
 c00915c:	b29a      	uxth	r2, r3
 c00915e:	8bfb      	ldrh	r3, [r7, #30]
 c009160:	4313      	orrs	r3, r2
 c009162:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 c009164:	697b      	ldr	r3, [r7, #20]
 c009166:	681b      	ldr	r3, [r3, #0]
 c009168:	8bfa      	ldrh	r2, [r7, #30]
 c00916a:	60da      	str	r2, [r3, #12]
 c00916c:	e061      	b.n	c009232 <UART_SetConfig+0x5d2>
      }
      else
      {
        ret = HAL_ERROR;
 c00916e:	2301      	movs	r3, #1
 c009170:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c009174:	e05d      	b.n	c009232 <UART_SetConfig+0x5d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 c009176:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c00917a:	2b08      	cmp	r3, #8
 c00917c:	d827      	bhi.n	c0091ce <UART_SetConfig+0x56e>
 c00917e:	a201      	add	r2, pc, #4	; (adr r2, c009184 <UART_SetConfig+0x524>)
 c009180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c009184:	0c0091a9 	.word	0x0c0091a9
 c009188:	0c0091b1 	.word	0x0c0091b1
 c00918c:	0c0091b9 	.word	0x0c0091b9
 c009190:	0c0091cf 	.word	0x0c0091cf
 c009194:	0c0091bf 	.word	0x0c0091bf
 c009198:	0c0091cf 	.word	0x0c0091cf
 c00919c:	0c0091cf 	.word	0x0c0091cf
 c0091a0:	0c0091cf 	.word	0x0c0091cf
 c0091a4:	0c0091c7 	.word	0x0c0091c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c0091a8:	f7fe f83a 	bl	c007220 <HAL_RCC_GetPCLK1Freq>
 c0091ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0091ae:	e014      	b.n	c0091da <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c0091b0:	f7fe f84a 	bl	c007248 <HAL_RCC_GetPCLK2Freq>
 c0091b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0091b6:	e010      	b.n	c0091da <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c0091b8:	4b1a      	ldr	r3, [pc, #104]	; (c009224 <UART_SetConfig+0x5c4>)
 c0091ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c0091bc:	e00d      	b.n	c0091da <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c0091be:	f7fd ff7f 	bl	c0070c0 <HAL_RCC_GetSysClockFreq>
 c0091c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0091c4:	e009      	b.n	c0091da <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c0091c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c0091ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c0091cc:	e005      	b.n	c0091da <UART_SetConfig+0x57a>
      default:
        pclk = 0U;
 c0091ce:	2300      	movs	r3, #0
 c0091d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c0091d2:	2301      	movs	r3, #1
 c0091d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c0091d8:	bf00      	nop
    }

    if (pclk != 0U)
 c0091da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0091dc:	2b00      	cmp	r3, #0
 c0091de:	d028      	beq.n	c009232 <UART_SetConfig+0x5d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c0091e0:	697b      	ldr	r3, [r7, #20]
 c0091e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0091e4:	4a10      	ldr	r2, [pc, #64]	; (c009228 <UART_SetConfig+0x5c8>)
 c0091e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c0091ea:	461a      	mov	r2, r3
 c0091ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0091ee:	fbb3 f2f2 	udiv	r2, r3, r2
 c0091f2:	697b      	ldr	r3, [r7, #20]
 c0091f4:	685b      	ldr	r3, [r3, #4]
 c0091f6:	085b      	lsrs	r3, r3, #1
 c0091f8:	441a      	add	r2, r3
 c0091fa:	697b      	ldr	r3, [r7, #20]
 c0091fc:	685b      	ldr	r3, [r3, #4]
 c0091fe:	fbb2 f3f3 	udiv	r3, r2, r3
 c009202:	b29b      	uxth	r3, r3
 c009204:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c009206:	6a3b      	ldr	r3, [r7, #32]
 c009208:	2b0f      	cmp	r3, #15
 c00920a:	d90f      	bls.n	c00922c <UART_SetConfig+0x5cc>
 c00920c:	6a3b      	ldr	r3, [r7, #32]
 c00920e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c009212:	d20b      	bcs.n	c00922c <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = usartdiv;
 c009214:	697b      	ldr	r3, [r7, #20]
 c009216:	681b      	ldr	r3, [r3, #0]
 c009218:	6a3a      	ldr	r2, [r7, #32]
 c00921a:	60da      	str	r2, [r3, #12]
 c00921c:	e009      	b.n	c009232 <UART_SetConfig+0x5d2>
 c00921e:	bf00      	nop
 c009220:	50008000 	.word	0x50008000
 c009224:	00f42400 	.word	0x00f42400
 c009228:	0c00a99c 	.word	0x0c00a99c
      }
      else
      {
        ret = HAL_ERROR;
 c00922c:	2301      	movs	r3, #1
 c00922e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 c009232:	697b      	ldr	r3, [r7, #20]
 c009234:	2201      	movs	r2, #1
 c009236:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 c00923a:	697b      	ldr	r3, [r7, #20]
 c00923c:	2201      	movs	r2, #1
 c00923e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 c009242:	697b      	ldr	r3, [r7, #20]
 c009244:	2200      	movs	r2, #0
 c009246:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 c009248:	697b      	ldr	r3, [r7, #20]
 c00924a:	2200      	movs	r2, #0
 c00924c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 c00924e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 c009252:	4618      	mov	r0, r3
 c009254:	3730      	adds	r7, #48	; 0x30
 c009256:	46bd      	mov	sp, r7
 c009258:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c00925c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 c00925c:	b480      	push	{r7}
 c00925e:	b083      	sub	sp, #12
 c009260:	af00      	add	r7, sp, #0
 c009262:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c009264:	687b      	ldr	r3, [r7, #4]
 c009266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c009268:	f003 0301 	and.w	r3, r3, #1
 c00926c:	2b00      	cmp	r3, #0
 c00926e:	d00a      	beq.n	c009286 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c009270:	687b      	ldr	r3, [r7, #4]
 c009272:	681b      	ldr	r3, [r3, #0]
 c009274:	685b      	ldr	r3, [r3, #4]
 c009276:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 c00927a:	687b      	ldr	r3, [r7, #4]
 c00927c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c00927e:	687b      	ldr	r3, [r7, #4]
 c009280:	681b      	ldr	r3, [r3, #0]
 c009282:	430a      	orrs	r2, r1
 c009284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c009286:	687b      	ldr	r3, [r7, #4]
 c009288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00928a:	f003 0302 	and.w	r3, r3, #2
 c00928e:	2b00      	cmp	r3, #0
 c009290:	d00a      	beq.n	c0092a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c009292:	687b      	ldr	r3, [r7, #4]
 c009294:	681b      	ldr	r3, [r3, #0]
 c009296:	685b      	ldr	r3, [r3, #4]
 c009298:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 c00929c:	687b      	ldr	r3, [r7, #4]
 c00929e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c0092a0:	687b      	ldr	r3, [r7, #4]
 c0092a2:	681b      	ldr	r3, [r3, #0]
 c0092a4:	430a      	orrs	r2, r1
 c0092a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c0092a8:	687b      	ldr	r3, [r7, #4]
 c0092aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0092ac:	f003 0304 	and.w	r3, r3, #4
 c0092b0:	2b00      	cmp	r3, #0
 c0092b2:	d00a      	beq.n	c0092ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c0092b4:	687b      	ldr	r3, [r7, #4]
 c0092b6:	681b      	ldr	r3, [r3, #0]
 c0092b8:	685b      	ldr	r3, [r3, #4]
 c0092ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 c0092be:	687b      	ldr	r3, [r7, #4]
 c0092c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c0092c2:	687b      	ldr	r3, [r7, #4]
 c0092c4:	681b      	ldr	r3, [r3, #0]
 c0092c6:	430a      	orrs	r2, r1
 c0092c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c0092ca:	687b      	ldr	r3, [r7, #4]
 c0092cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0092ce:	f003 0308 	and.w	r3, r3, #8
 c0092d2:	2b00      	cmp	r3, #0
 c0092d4:	d00a      	beq.n	c0092ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c0092d6:	687b      	ldr	r3, [r7, #4]
 c0092d8:	681b      	ldr	r3, [r3, #0]
 c0092da:	685b      	ldr	r3, [r3, #4]
 c0092dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 c0092e0:	687b      	ldr	r3, [r7, #4]
 c0092e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 c0092e4:	687b      	ldr	r3, [r7, #4]
 c0092e6:	681b      	ldr	r3, [r3, #0]
 c0092e8:	430a      	orrs	r2, r1
 c0092ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c0092ec:	687b      	ldr	r3, [r7, #4]
 c0092ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0092f0:	f003 0310 	and.w	r3, r3, #16
 c0092f4:	2b00      	cmp	r3, #0
 c0092f6:	d00a      	beq.n	c00930e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c0092f8:	687b      	ldr	r3, [r7, #4]
 c0092fa:	681b      	ldr	r3, [r3, #0]
 c0092fc:	689b      	ldr	r3, [r3, #8]
 c0092fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 c009302:	687b      	ldr	r3, [r7, #4]
 c009304:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 c009306:	687b      	ldr	r3, [r7, #4]
 c009308:	681b      	ldr	r3, [r3, #0]
 c00930a:	430a      	orrs	r2, r1
 c00930c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c00930e:	687b      	ldr	r3, [r7, #4]
 c009310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c009312:	f003 0320 	and.w	r3, r3, #32
 c009316:	2b00      	cmp	r3, #0
 c009318:	d00a      	beq.n	c009330 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c00931a:	687b      	ldr	r3, [r7, #4]
 c00931c:	681b      	ldr	r3, [r3, #0]
 c00931e:	689b      	ldr	r3, [r3, #8]
 c009320:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 c009324:	687b      	ldr	r3, [r7, #4]
 c009326:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 c009328:	687b      	ldr	r3, [r7, #4]
 c00932a:	681b      	ldr	r3, [r3, #0]
 c00932c:	430a      	orrs	r2, r1
 c00932e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c009330:	687b      	ldr	r3, [r7, #4]
 c009332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c009334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c009338:	2b00      	cmp	r3, #0
 c00933a:	d01a      	beq.n	c009372 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c00933c:	687b      	ldr	r3, [r7, #4]
 c00933e:	681b      	ldr	r3, [r3, #0]
 c009340:	685b      	ldr	r3, [r3, #4]
 c009342:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 c009346:	687b      	ldr	r3, [r7, #4]
 c009348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 c00934a:	687b      	ldr	r3, [r7, #4]
 c00934c:	681b      	ldr	r3, [r3, #0]
 c00934e:	430a      	orrs	r2, r1
 c009350:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c009352:	687b      	ldr	r3, [r7, #4]
 c009354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c009356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c00935a:	d10a      	bne.n	c009372 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c00935c:	687b      	ldr	r3, [r7, #4]
 c00935e:	681b      	ldr	r3, [r3, #0]
 c009360:	685b      	ldr	r3, [r3, #4]
 c009362:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 c009366:	687b      	ldr	r3, [r7, #4]
 c009368:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c00936a:	687b      	ldr	r3, [r7, #4]
 c00936c:	681b      	ldr	r3, [r3, #0]
 c00936e:	430a      	orrs	r2, r1
 c009370:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c009372:	687b      	ldr	r3, [r7, #4]
 c009374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c009376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c00937a:	2b00      	cmp	r3, #0
 c00937c:	d00a      	beq.n	c009394 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c00937e:	687b      	ldr	r3, [r7, #4]
 c009380:	681b      	ldr	r3, [r3, #0]
 c009382:	685b      	ldr	r3, [r3, #4]
 c009384:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 c009388:	687b      	ldr	r3, [r7, #4]
 c00938a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c00938c:	687b      	ldr	r3, [r7, #4]
 c00938e:	681b      	ldr	r3, [r3, #0]
 c009390:	430a      	orrs	r2, r1
 c009392:	605a      	str	r2, [r3, #4]
  }
}
 c009394:	bf00      	nop
 c009396:	370c      	adds	r7, #12
 c009398:	46bd      	mov	sp, r7
 c00939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00939e:	4770      	bx	lr

0c0093a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 c0093a0:	b580      	push	{r7, lr}
 c0093a2:	b086      	sub	sp, #24
 c0093a4:	af02      	add	r7, sp, #8
 c0093a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c0093a8:	687b      	ldr	r3, [r7, #4]
 c0093aa:	2200      	movs	r2, #0
 c0093ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 c0093b0:	f7fc f82a 	bl	c005408 <HAL_GetTick>
 c0093b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c0093b6:	687b      	ldr	r3, [r7, #4]
 c0093b8:	681b      	ldr	r3, [r3, #0]
 c0093ba:	681b      	ldr	r3, [r3, #0]
 c0093bc:	f003 0308 	and.w	r3, r3, #8
 c0093c0:	2b08      	cmp	r3, #8
 c0093c2:	d10e      	bne.n	c0093e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c0093c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c0093c8:	9300      	str	r3, [sp, #0]
 c0093ca:	68fb      	ldr	r3, [r7, #12]
 c0093cc:	2200      	movs	r2, #0
 c0093ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 c0093d2:	6878      	ldr	r0, [r7, #4]
 c0093d4:	f000 f82f 	bl	c009436 <UART_WaitOnFlagUntilTimeout>
 c0093d8:	4603      	mov	r3, r0
 c0093da:	2b00      	cmp	r3, #0
 c0093dc:	d001      	beq.n	c0093e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 c0093de:	2303      	movs	r3, #3
 c0093e0:	e025      	b.n	c00942e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c0093e2:	687b      	ldr	r3, [r7, #4]
 c0093e4:	681b      	ldr	r3, [r3, #0]
 c0093e6:	681b      	ldr	r3, [r3, #0]
 c0093e8:	f003 0304 	and.w	r3, r3, #4
 c0093ec:	2b04      	cmp	r3, #4
 c0093ee:	d10e      	bne.n	c00940e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c0093f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c0093f4:	9300      	str	r3, [sp, #0]
 c0093f6:	68fb      	ldr	r3, [r7, #12]
 c0093f8:	2200      	movs	r2, #0
 c0093fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 c0093fe:	6878      	ldr	r0, [r7, #4]
 c009400:	f000 f819 	bl	c009436 <UART_WaitOnFlagUntilTimeout>
 c009404:	4603      	mov	r3, r0
 c009406:	2b00      	cmp	r3, #0
 c009408:	d001      	beq.n	c00940e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 c00940a:	2303      	movs	r3, #3
 c00940c:	e00f      	b.n	c00942e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 c00940e:	687b      	ldr	r3, [r7, #4]
 c009410:	2220      	movs	r2, #32
 c009412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 c009416:	687b      	ldr	r3, [r7, #4]
 c009418:	2220      	movs	r2, #32
 c00941a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c00941e:	687b      	ldr	r3, [r7, #4]
 c009420:	2200      	movs	r2, #0
 c009422:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 c009424:	687b      	ldr	r3, [r7, #4]
 c009426:	2200      	movs	r2, #0
 c009428:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c00942c:	2300      	movs	r3, #0
}
 c00942e:	4618      	mov	r0, r3
 c009430:	3710      	adds	r7, #16
 c009432:	46bd      	mov	sp, r7
 c009434:	bd80      	pop	{r7, pc}

0c009436 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 c009436:	b580      	push	{r7, lr}
 c009438:	b084      	sub	sp, #16
 c00943a:	af00      	add	r7, sp, #0
 c00943c:	60f8      	str	r0, [r7, #12]
 c00943e:	60b9      	str	r1, [r7, #8]
 c009440:	603b      	str	r3, [r7, #0]
 c009442:	4613      	mov	r3, r2
 c009444:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c009446:	e062      	b.n	c00950e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c009448:	69bb      	ldr	r3, [r7, #24]
 c00944a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 c00944e:	d05e      	beq.n	c00950e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c009450:	f7fb ffda 	bl	c005408 <HAL_GetTick>
 c009454:	4602      	mov	r2, r0
 c009456:	683b      	ldr	r3, [r7, #0]
 c009458:	1ad3      	subs	r3, r2, r3
 c00945a:	69ba      	ldr	r2, [r7, #24]
 c00945c:	429a      	cmp	r2, r3
 c00945e:	d302      	bcc.n	c009466 <UART_WaitOnFlagUntilTimeout+0x30>
 c009460:	69bb      	ldr	r3, [r7, #24]
 c009462:	2b00      	cmp	r3, #0
 c009464:	d11d      	bne.n	c0094a2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c009466:	68fb      	ldr	r3, [r7, #12]
 c009468:	681b      	ldr	r3, [r3, #0]
 c00946a:	681a      	ldr	r2, [r3, #0]
 c00946c:	68fb      	ldr	r3, [r7, #12]
 c00946e:	681b      	ldr	r3, [r3, #0]
 c009470:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 c009474:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c009476:	68fb      	ldr	r3, [r7, #12]
 c009478:	681b      	ldr	r3, [r3, #0]
 c00947a:	689a      	ldr	r2, [r3, #8]
 c00947c:	68fb      	ldr	r3, [r7, #12]
 c00947e:	681b      	ldr	r3, [r3, #0]
 c009480:	f022 0201 	bic.w	r2, r2, #1
 c009484:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 c009486:	68fb      	ldr	r3, [r7, #12]
 c009488:	2220      	movs	r2, #32
 c00948a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 c00948e:	68fb      	ldr	r3, [r7, #12]
 c009490:	2220      	movs	r2, #32
 c009492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 c009496:	68fb      	ldr	r3, [r7, #12]
 c009498:	2200      	movs	r2, #0
 c00949a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 c00949e:	2303      	movs	r3, #3
 c0094a0:	e045      	b.n	c00952e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c0094a2:	68fb      	ldr	r3, [r7, #12]
 c0094a4:	681b      	ldr	r3, [r3, #0]
 c0094a6:	681b      	ldr	r3, [r3, #0]
 c0094a8:	f003 0304 	and.w	r3, r3, #4
 c0094ac:	2b00      	cmp	r3, #0
 c0094ae:	d02e      	beq.n	c00950e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c0094b0:	68fb      	ldr	r3, [r7, #12]
 c0094b2:	681b      	ldr	r3, [r3, #0]
 c0094b4:	69db      	ldr	r3, [r3, #28]
 c0094b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c0094ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c0094be:	d126      	bne.n	c00950e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c0094c0:	68fb      	ldr	r3, [r7, #12]
 c0094c2:	681b      	ldr	r3, [r3, #0]
 c0094c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c0094c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c0094ca:	68fb      	ldr	r3, [r7, #12]
 c0094cc:	681b      	ldr	r3, [r3, #0]
 c0094ce:	681a      	ldr	r2, [r3, #0]
 c0094d0:	68fb      	ldr	r3, [r7, #12]
 c0094d2:	681b      	ldr	r3, [r3, #0]
 c0094d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 c0094d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c0094da:	68fb      	ldr	r3, [r7, #12]
 c0094dc:	681b      	ldr	r3, [r3, #0]
 c0094de:	689a      	ldr	r2, [r3, #8]
 c0094e0:	68fb      	ldr	r3, [r7, #12]
 c0094e2:	681b      	ldr	r3, [r3, #0]
 c0094e4:	f022 0201 	bic.w	r2, r2, #1
 c0094e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 c0094ea:	68fb      	ldr	r3, [r7, #12]
 c0094ec:	2220      	movs	r2, #32
 c0094ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 c0094f2:	68fb      	ldr	r3, [r7, #12]
 c0094f4:	2220      	movs	r2, #32
 c0094f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c0094fa:	68fb      	ldr	r3, [r7, #12]
 c0094fc:	2220      	movs	r2, #32
 c0094fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c009502:	68fb      	ldr	r3, [r7, #12]
 c009504:	2200      	movs	r2, #0
 c009506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 c00950a:	2303      	movs	r3, #3
 c00950c:	e00f      	b.n	c00952e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c00950e:	68fb      	ldr	r3, [r7, #12]
 c009510:	681b      	ldr	r3, [r3, #0]
 c009512:	69da      	ldr	r2, [r3, #28]
 c009514:	68bb      	ldr	r3, [r7, #8]
 c009516:	4013      	ands	r3, r2
 c009518:	68ba      	ldr	r2, [r7, #8]
 c00951a:	429a      	cmp	r2, r3
 c00951c:	bf0c      	ite	eq
 c00951e:	2301      	moveq	r3, #1
 c009520:	2300      	movne	r3, #0
 c009522:	b2db      	uxtb	r3, r3
 c009524:	461a      	mov	r2, r3
 c009526:	79fb      	ldrb	r3, [r7, #7]
 c009528:	429a      	cmp	r2, r3
 c00952a:	d08d      	beq.n	c009448 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c00952c:	2300      	movs	r3, #0
}
 c00952e:	4618      	mov	r0, r3
 c009530:	3710      	adds	r7, #16
 c009532:	46bd      	mov	sp, r7
 c009534:	bd80      	pop	{r7, pc}

0c009536 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 c009536:	b480      	push	{r7}
 c009538:	b085      	sub	sp, #20
 c00953a:	af00      	add	r7, sp, #0
 c00953c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 c00953e:	687b      	ldr	r3, [r7, #4]
 c009540:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c009544:	2b01      	cmp	r3, #1
 c009546:	d101      	bne.n	c00954c <HAL_UARTEx_DisableFifoMode+0x16>
 c009548:	2302      	movs	r3, #2
 c00954a:	e027      	b.n	c00959c <HAL_UARTEx_DisableFifoMode+0x66>
 c00954c:	687b      	ldr	r3, [r7, #4]
 c00954e:	2201      	movs	r2, #1
 c009550:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c009554:	687b      	ldr	r3, [r7, #4]
 c009556:	2224      	movs	r2, #36	; 0x24
 c009558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c00955c:	687b      	ldr	r3, [r7, #4]
 c00955e:	681b      	ldr	r3, [r3, #0]
 c009560:	681b      	ldr	r3, [r3, #0]
 c009562:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c009564:	687b      	ldr	r3, [r7, #4]
 c009566:	681b      	ldr	r3, [r3, #0]
 c009568:	681a      	ldr	r2, [r3, #0]
 c00956a:	687b      	ldr	r3, [r7, #4]
 c00956c:	681b      	ldr	r3, [r3, #0]
 c00956e:	f022 0201 	bic.w	r2, r2, #1
 c009572:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 c009574:	68fb      	ldr	r3, [r7, #12]
 c009576:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 c00957a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c00957c:	687b      	ldr	r3, [r7, #4]
 c00957e:	2200      	movs	r2, #0
 c009580:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c009582:	687b      	ldr	r3, [r7, #4]
 c009584:	681b      	ldr	r3, [r3, #0]
 c009586:	68fa      	ldr	r2, [r7, #12]
 c009588:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c00958a:	687b      	ldr	r3, [r7, #4]
 c00958c:	2220      	movs	r2, #32
 c00958e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c009592:	687b      	ldr	r3, [r7, #4]
 c009594:	2200      	movs	r2, #0
 c009596:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c00959a:	2300      	movs	r3, #0
}
 c00959c:	4618      	mov	r0, r3
 c00959e:	3714      	adds	r7, #20
 c0095a0:	46bd      	mov	sp, r7
 c0095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0095a6:	4770      	bx	lr

0c0095a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c0095a8:	b580      	push	{r7, lr}
 c0095aa:	b084      	sub	sp, #16
 c0095ac:	af00      	add	r7, sp, #0
 c0095ae:	6078      	str	r0, [r7, #4]
 c0095b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c0095b2:	687b      	ldr	r3, [r7, #4]
 c0095b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c0095b8:	2b01      	cmp	r3, #1
 c0095ba:	d101      	bne.n	c0095c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 c0095bc:	2302      	movs	r3, #2
 c0095be:	e02d      	b.n	c00961c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 c0095c0:	687b      	ldr	r3, [r7, #4]
 c0095c2:	2201      	movs	r2, #1
 c0095c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c0095c8:	687b      	ldr	r3, [r7, #4]
 c0095ca:	2224      	movs	r2, #36	; 0x24
 c0095cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c0095d0:	687b      	ldr	r3, [r7, #4]
 c0095d2:	681b      	ldr	r3, [r3, #0]
 c0095d4:	681b      	ldr	r3, [r3, #0]
 c0095d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c0095d8:	687b      	ldr	r3, [r7, #4]
 c0095da:	681b      	ldr	r3, [r3, #0]
 c0095dc:	681a      	ldr	r2, [r3, #0]
 c0095de:	687b      	ldr	r3, [r7, #4]
 c0095e0:	681b      	ldr	r3, [r3, #0]
 c0095e2:	f022 0201 	bic.w	r2, r2, #1
 c0095e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 c0095e8:	687b      	ldr	r3, [r7, #4]
 c0095ea:	681b      	ldr	r3, [r3, #0]
 c0095ec:	689b      	ldr	r3, [r3, #8]
 c0095ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 c0095f2:	687b      	ldr	r3, [r7, #4]
 c0095f4:	681b      	ldr	r3, [r3, #0]
 c0095f6:	683a      	ldr	r2, [r7, #0]
 c0095f8:	430a      	orrs	r2, r1
 c0095fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c0095fc:	6878      	ldr	r0, [r7, #4]
 c0095fe:	f000 f84f 	bl	c0096a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c009602:	687b      	ldr	r3, [r7, #4]
 c009604:	681b      	ldr	r3, [r3, #0]
 c009606:	68fa      	ldr	r2, [r7, #12]
 c009608:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c00960a:	687b      	ldr	r3, [r7, #4]
 c00960c:	2220      	movs	r2, #32
 c00960e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c009612:	687b      	ldr	r3, [r7, #4]
 c009614:	2200      	movs	r2, #0
 c009616:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c00961a:	2300      	movs	r3, #0
}
 c00961c:	4618      	mov	r0, r3
 c00961e:	3710      	adds	r7, #16
 c009620:	46bd      	mov	sp, r7
 c009622:	bd80      	pop	{r7, pc}

0c009624 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c009624:	b580      	push	{r7, lr}
 c009626:	b084      	sub	sp, #16
 c009628:	af00      	add	r7, sp, #0
 c00962a:	6078      	str	r0, [r7, #4]
 c00962c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c00962e:	687b      	ldr	r3, [r7, #4]
 c009630:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c009634:	2b01      	cmp	r3, #1
 c009636:	d101      	bne.n	c00963c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 c009638:	2302      	movs	r3, #2
 c00963a:	e02d      	b.n	c009698 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 c00963c:	687b      	ldr	r3, [r7, #4]
 c00963e:	2201      	movs	r2, #1
 c009640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c009644:	687b      	ldr	r3, [r7, #4]
 c009646:	2224      	movs	r2, #36	; 0x24
 c009648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c00964c:	687b      	ldr	r3, [r7, #4]
 c00964e:	681b      	ldr	r3, [r3, #0]
 c009650:	681b      	ldr	r3, [r3, #0]
 c009652:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c009654:	687b      	ldr	r3, [r7, #4]
 c009656:	681b      	ldr	r3, [r3, #0]
 c009658:	681a      	ldr	r2, [r3, #0]
 c00965a:	687b      	ldr	r3, [r7, #4]
 c00965c:	681b      	ldr	r3, [r3, #0]
 c00965e:	f022 0201 	bic.w	r2, r2, #1
 c009662:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 c009664:	687b      	ldr	r3, [r7, #4]
 c009666:	681b      	ldr	r3, [r3, #0]
 c009668:	689b      	ldr	r3, [r3, #8]
 c00966a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 c00966e:	687b      	ldr	r3, [r7, #4]
 c009670:	681b      	ldr	r3, [r3, #0]
 c009672:	683a      	ldr	r2, [r7, #0]
 c009674:	430a      	orrs	r2, r1
 c009676:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c009678:	6878      	ldr	r0, [r7, #4]
 c00967a:	f000 f811 	bl	c0096a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00967e:	687b      	ldr	r3, [r7, #4]
 c009680:	681b      	ldr	r3, [r3, #0]
 c009682:	68fa      	ldr	r2, [r7, #12]
 c009684:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c009686:	687b      	ldr	r3, [r7, #4]
 c009688:	2220      	movs	r2, #32
 c00968a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00968e:	687b      	ldr	r3, [r7, #4]
 c009690:	2200      	movs	r2, #0
 c009692:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c009696:	2300      	movs	r3, #0
}
 c009698:	4618      	mov	r0, r3
 c00969a:	3710      	adds	r7, #16
 c00969c:	46bd      	mov	sp, r7
 c00969e:	bd80      	pop	{r7, pc}

0c0096a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 c0096a0:	b480      	push	{r7}
 c0096a2:	b085      	sub	sp, #20
 c0096a4:	af00      	add	r7, sp, #0
 c0096a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c0096a8:	687b      	ldr	r3, [r7, #4]
 c0096aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c0096ac:	2b00      	cmp	r3, #0
 c0096ae:	d108      	bne.n	c0096c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 c0096b0:	687b      	ldr	r3, [r7, #4]
 c0096b2:	2201      	movs	r2, #1
 c0096b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 c0096b8:	687b      	ldr	r3, [r7, #4]
 c0096ba:	2201      	movs	r2, #1
 c0096bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 c0096c0:	e031      	b.n	c009726 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 c0096c2:	2308      	movs	r3, #8
 c0096c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 c0096c6:	2308      	movs	r3, #8
 c0096c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c0096ca:	687b      	ldr	r3, [r7, #4]
 c0096cc:	681b      	ldr	r3, [r3, #0]
 c0096ce:	689b      	ldr	r3, [r3, #8]
 c0096d0:	0e5b      	lsrs	r3, r3, #25
 c0096d2:	b2db      	uxtb	r3, r3
 c0096d4:	f003 0307 	and.w	r3, r3, #7
 c0096d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c0096da:	687b      	ldr	r3, [r7, #4]
 c0096dc:	681b      	ldr	r3, [r3, #0]
 c0096de:	689b      	ldr	r3, [r3, #8]
 c0096e0:	0f5b      	lsrs	r3, r3, #29
 c0096e2:	b2db      	uxtb	r3, r3
 c0096e4:	f003 0307 	and.w	r3, r3, #7
 c0096e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c0096ea:	7bbb      	ldrb	r3, [r7, #14]
 c0096ec:	7b3a      	ldrb	r2, [r7, #12]
 c0096ee:	4911      	ldr	r1, [pc, #68]	; (c009734 <UARTEx_SetNbDataToProcess+0x94>)
 c0096f0:	5c8a      	ldrb	r2, [r1, r2]
 c0096f2:	fb02 f303 	mul.w	r3, r2, r3
 c0096f6:	7b3a      	ldrb	r2, [r7, #12]
 c0096f8:	490f      	ldr	r1, [pc, #60]	; (c009738 <UARTEx_SetNbDataToProcess+0x98>)
 c0096fa:	5c8a      	ldrb	r2, [r1, r2]
 c0096fc:	fb93 f3f2 	sdiv	r3, r3, r2
 c009700:	b29a      	uxth	r2, r3
 c009702:	687b      	ldr	r3, [r7, #4]
 c009704:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c009708:	7bfb      	ldrb	r3, [r7, #15]
 c00970a:	7b7a      	ldrb	r2, [r7, #13]
 c00970c:	4909      	ldr	r1, [pc, #36]	; (c009734 <UARTEx_SetNbDataToProcess+0x94>)
 c00970e:	5c8a      	ldrb	r2, [r1, r2]
 c009710:	fb02 f303 	mul.w	r3, r2, r3
 c009714:	7b7a      	ldrb	r2, [r7, #13]
 c009716:	4908      	ldr	r1, [pc, #32]	; (c009738 <UARTEx_SetNbDataToProcess+0x98>)
 c009718:	5c8a      	ldrb	r2, [r1, r2]
 c00971a:	fb93 f3f2 	sdiv	r3, r3, r2
 c00971e:	b29a      	uxth	r2, r3
 c009720:	687b      	ldr	r3, [r7, #4]
 c009722:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 c009726:	bf00      	nop
 c009728:	3714      	adds	r7, #20
 c00972a:	46bd      	mov	sp, r7
 c00972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c009730:	4770      	bx	lr
 c009732:	bf00      	nop
 c009734:	0c00a9b4 	.word	0x0c00a9b4
 c009738:	0c00a9bc 	.word	0x0c00a9bc

0c00973c <__errno>:
 c00973c:	4b01      	ldr	r3, [pc, #4]	; (c009744 <__errno+0x8>)
 c00973e:	6818      	ldr	r0, [r3, #0]
 c009740:	4770      	bx	lr
 c009742:	bf00      	nop
 c009744:	30000090 	.word	0x30000090

0c009748 <__libc_init_array>:
 c009748:	b570      	push	{r4, r5, r6, lr}
 c00974a:	4d0d      	ldr	r5, [pc, #52]	; (c009780 <__libc_init_array+0x38>)
 c00974c:	2600      	movs	r6, #0
 c00974e:	4c0d      	ldr	r4, [pc, #52]	; (c009784 <__libc_init_array+0x3c>)
 c009750:	1b64      	subs	r4, r4, r5
 c009752:	10a4      	asrs	r4, r4, #2
 c009754:	42a6      	cmp	r6, r4
 c009756:	d109      	bne.n	c00976c <__libc_init_array+0x24>
 c009758:	4d0b      	ldr	r5, [pc, #44]	; (c009788 <__libc_init_array+0x40>)
 c00975a:	2600      	movs	r6, #0
 c00975c:	4c0b      	ldr	r4, [pc, #44]	; (c00978c <__libc_init_array+0x44>)
 c00975e:	f001 f873 	bl	c00a848 <_init>
 c009762:	1b64      	subs	r4, r4, r5
 c009764:	10a4      	asrs	r4, r4, #2
 c009766:	42a6      	cmp	r6, r4
 c009768:	d105      	bne.n	c009776 <__libc_init_array+0x2e>
 c00976a:	bd70      	pop	{r4, r5, r6, pc}
 c00976c:	f855 3b04 	ldr.w	r3, [r5], #4
 c009770:	3601      	adds	r6, #1
 c009772:	4798      	blx	r3
 c009774:	e7ee      	b.n	c009754 <__libc_init_array+0xc>
 c009776:	f855 3b04 	ldr.w	r3, [r5], #4
 c00977a:	3601      	adds	r6, #1
 c00977c:	4798      	blx	r3
 c00977e:	e7f2      	b.n	c009766 <__libc_init_array+0x1e>
 c009780:	0c00ab14 	.word	0x0c00ab14
 c009784:	0c00ab14 	.word	0x0c00ab14
 c009788:	0c00ab14 	.word	0x0c00ab14
 c00978c:	0c00ab18 	.word	0x0c00ab18

0c009790 <memcpy>:
 c009790:	440a      	add	r2, r1
 c009792:	1e43      	subs	r3, r0, #1
 c009794:	4291      	cmp	r1, r2
 c009796:	d100      	bne.n	c00979a <memcpy+0xa>
 c009798:	4770      	bx	lr
 c00979a:	b510      	push	{r4, lr}
 c00979c:	f811 4b01 	ldrb.w	r4, [r1], #1
 c0097a0:	4291      	cmp	r1, r2
 c0097a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 c0097a6:	d1f9      	bne.n	c00979c <memcpy+0xc>
 c0097a8:	bd10      	pop	{r4, pc}

0c0097aa <memset>:
 c0097aa:	4402      	add	r2, r0
 c0097ac:	4603      	mov	r3, r0
 c0097ae:	4293      	cmp	r3, r2
 c0097b0:	d100      	bne.n	c0097b4 <memset+0xa>
 c0097b2:	4770      	bx	lr
 c0097b4:	f803 1b01 	strb.w	r1, [r3], #1
 c0097b8:	e7f9      	b.n	c0097ae <memset+0x4>
	...

0c0097bc <rand>:
 c0097bc:	4b16      	ldr	r3, [pc, #88]	; (c009818 <rand+0x5c>)
 c0097be:	b510      	push	{r4, lr}
 c0097c0:	681c      	ldr	r4, [r3, #0]
 c0097c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 c0097c4:	b9b3      	cbnz	r3, c0097f4 <rand+0x38>
 c0097c6:	2018      	movs	r0, #24
 c0097c8:	f000 f95e 	bl	c009a88 <malloc>
 c0097cc:	63a0      	str	r0, [r4, #56]	; 0x38
 c0097ce:	b928      	cbnz	r0, c0097dc <rand+0x20>
 c0097d0:	4602      	mov	r2, r0
 c0097d2:	4b12      	ldr	r3, [pc, #72]	; (c00981c <rand+0x60>)
 c0097d4:	214e      	movs	r1, #78	; 0x4e
 c0097d6:	4812      	ldr	r0, [pc, #72]	; (c009820 <rand+0x64>)
 c0097d8:	f000 f82e 	bl	c009838 <__assert_func>
 c0097dc:	4a11      	ldr	r2, [pc, #68]	; (c009824 <rand+0x68>)
 c0097de:	4b12      	ldr	r3, [pc, #72]	; (c009828 <rand+0x6c>)
 c0097e0:	e9c0 2300 	strd	r2, r3, [r0]
 c0097e4:	4b11      	ldr	r3, [pc, #68]	; (c00982c <rand+0x70>)
 c0097e6:	2201      	movs	r2, #1
 c0097e8:	6083      	str	r3, [r0, #8]
 c0097ea:	230b      	movs	r3, #11
 c0097ec:	8183      	strh	r3, [r0, #12]
 c0097ee:	2300      	movs	r3, #0
 c0097f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 c0097f4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 c0097f6:	4a0e      	ldr	r2, [pc, #56]	; (c009830 <rand+0x74>)
 c0097f8:	6920      	ldr	r0, [r4, #16]
 c0097fa:	6963      	ldr	r3, [r4, #20]
 c0097fc:	490d      	ldr	r1, [pc, #52]	; (c009834 <rand+0x78>)
 c0097fe:	4342      	muls	r2, r0
 c009800:	fb01 2203 	mla	r2, r1, r3, r2
 c009804:	fba0 0101 	umull	r0, r1, r0, r1
 c009808:	1c43      	adds	r3, r0, #1
 c00980a:	eb42 0001 	adc.w	r0, r2, r1
 c00980e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 c009812:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 c009816:	bd10      	pop	{r4, pc}
 c009818:	30000090 	.word	0x30000090
 c00981c:	0c00a9c8 	.word	0x0c00a9c8
 c009820:	0c00a9df 	.word	0x0c00a9df
 c009824:	abcd330e 	.word	0xabcd330e
 c009828:	e66d1234 	.word	0xe66d1234
 c00982c:	0005deec 	.word	0x0005deec
 c009830:	5851f42d 	.word	0x5851f42d
 c009834:	4c957f2d 	.word	0x4c957f2d

0c009838 <__assert_func>:
 c009838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 c00983a:	4614      	mov	r4, r2
 c00983c:	461a      	mov	r2, r3
 c00983e:	4b09      	ldr	r3, [pc, #36]	; (c009864 <__assert_func+0x2c>)
 c009840:	4605      	mov	r5, r0
 c009842:	681b      	ldr	r3, [r3, #0]
 c009844:	68d8      	ldr	r0, [r3, #12]
 c009846:	b14c      	cbz	r4, c00985c <__assert_func+0x24>
 c009848:	4b07      	ldr	r3, [pc, #28]	; (c009868 <__assert_func+0x30>)
 c00984a:	9100      	str	r1, [sp, #0]
 c00984c:	4907      	ldr	r1, [pc, #28]	; (c00986c <__assert_func+0x34>)
 c00984e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 c009852:	462b      	mov	r3, r5
 c009854:	f000 f8e4 	bl	c009a20 <fiprintf>
 c009858:	f000 fe14 	bl	c00a484 <abort>
 c00985c:	4b04      	ldr	r3, [pc, #16]	; (c009870 <__assert_func+0x38>)
 c00985e:	461c      	mov	r4, r3
 c009860:	e7f3      	b.n	c00984a <__assert_func+0x12>
 c009862:	bf00      	nop
 c009864:	30000090 	.word	0x30000090
 c009868:	0c00aa3a 	.word	0x0c00aa3a
 c00986c:	0c00aa47 	.word	0x0c00aa47
 c009870:	0c00aa75 	.word	0x0c00aa75

0c009874 <std>:
 c009874:	2300      	movs	r3, #0
 c009876:	b510      	push	{r4, lr}
 c009878:	4604      	mov	r4, r0
 c00987a:	6083      	str	r3, [r0, #8]
 c00987c:	8181      	strh	r1, [r0, #12]
 c00987e:	4619      	mov	r1, r3
 c009880:	6643      	str	r3, [r0, #100]	; 0x64
 c009882:	81c2      	strh	r2, [r0, #14]
 c009884:	2208      	movs	r2, #8
 c009886:	6183      	str	r3, [r0, #24]
 c009888:	e9c0 3300 	strd	r3, r3, [r0]
 c00988c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 c009890:	305c      	adds	r0, #92	; 0x5c
 c009892:	f7ff ff8a 	bl	c0097aa <memset>
 c009896:	4b05      	ldr	r3, [pc, #20]	; (c0098ac <std+0x38>)
 c009898:	6224      	str	r4, [r4, #32]
 c00989a:	6263      	str	r3, [r4, #36]	; 0x24
 c00989c:	4b04      	ldr	r3, [pc, #16]	; (c0098b0 <std+0x3c>)
 c00989e:	62a3      	str	r3, [r4, #40]	; 0x28
 c0098a0:	4b04      	ldr	r3, [pc, #16]	; (c0098b4 <std+0x40>)
 c0098a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 c0098a4:	4b04      	ldr	r3, [pc, #16]	; (c0098b8 <std+0x44>)
 c0098a6:	6323      	str	r3, [r4, #48]	; 0x30
 c0098a8:	bd10      	pop	{r4, pc}
 c0098aa:	bf00      	nop
 c0098ac:	0c00a259 	.word	0x0c00a259
 c0098b0:	0c00a27b 	.word	0x0c00a27b
 c0098b4:	0c00a2b3 	.word	0x0c00a2b3
 c0098b8:	0c00a2d7 	.word	0x0c00a2d7

0c0098bc <_cleanup_r>:
 c0098bc:	4901      	ldr	r1, [pc, #4]	; (c0098c4 <_cleanup_r+0x8>)
 c0098be:	f000 b8c1 	b.w	c009a44 <_fwalk_reent>
 c0098c2:	bf00      	nop
 c0098c4:	0c00a5bd 	.word	0x0c00a5bd

0c0098c8 <__sfmoreglue>:
 c0098c8:	b570      	push	{r4, r5, r6, lr}
 c0098ca:	2268      	movs	r2, #104	; 0x68
 c0098cc:	1e4d      	subs	r5, r1, #1
 c0098ce:	460e      	mov	r6, r1
 c0098d0:	4355      	muls	r5, r2
 c0098d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 c0098d6:	f000 f94b 	bl	c009b70 <_malloc_r>
 c0098da:	4604      	mov	r4, r0
 c0098dc:	b140      	cbz	r0, c0098f0 <__sfmoreglue+0x28>
 c0098de:	2100      	movs	r1, #0
 c0098e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 c0098e4:	e9c0 1600 	strd	r1, r6, [r0]
 c0098e8:	300c      	adds	r0, #12
 c0098ea:	60a0      	str	r0, [r4, #8]
 c0098ec:	f7ff ff5d 	bl	c0097aa <memset>
 c0098f0:	4620      	mov	r0, r4
 c0098f2:	bd70      	pop	{r4, r5, r6, pc}

0c0098f4 <__sfp_lock_acquire>:
 c0098f4:	4801      	ldr	r0, [pc, #4]	; (c0098fc <__sfp_lock_acquire+0x8>)
 c0098f6:	f000 b8c5 	b.w	c009a84 <__retarget_lock_acquire_recursive>
 c0098fa:	bf00      	nop
 c0098fc:	3000246d 	.word	0x3000246d

0c009900 <__sfp_lock_release>:
 c009900:	4801      	ldr	r0, [pc, #4]	; (c009908 <__sfp_lock_release+0x8>)
 c009902:	f000 b8c0 	b.w	c009a86 <__retarget_lock_release_recursive>
 c009906:	bf00      	nop
 c009908:	3000246d 	.word	0x3000246d

0c00990c <__sinit_lock_acquire>:
 c00990c:	4801      	ldr	r0, [pc, #4]	; (c009914 <__sinit_lock_acquire+0x8>)
 c00990e:	f000 b8b9 	b.w	c009a84 <__retarget_lock_acquire_recursive>
 c009912:	bf00      	nop
 c009914:	3000246e 	.word	0x3000246e

0c009918 <__sinit_lock_release>:
 c009918:	4801      	ldr	r0, [pc, #4]	; (c009920 <__sinit_lock_release+0x8>)
 c00991a:	f000 b8b4 	b.w	c009a86 <__retarget_lock_release_recursive>
 c00991e:	bf00      	nop
 c009920:	3000246e 	.word	0x3000246e

0c009924 <__sinit>:
 c009924:	b510      	push	{r4, lr}
 c009926:	4604      	mov	r4, r0
 c009928:	f7ff fff0 	bl	c00990c <__sinit_lock_acquire>
 c00992c:	69a3      	ldr	r3, [r4, #24]
 c00992e:	b11b      	cbz	r3, c009938 <__sinit+0x14>
 c009930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c009934:	f7ff bff0 	b.w	c009918 <__sinit_lock_release>
 c009938:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 c00993c:	6523      	str	r3, [r4, #80]	; 0x50
 c00993e:	4620      	mov	r0, r4
 c009940:	4b12      	ldr	r3, [pc, #72]	; (c00998c <__sinit+0x68>)
 c009942:	4a13      	ldr	r2, [pc, #76]	; (c009990 <__sinit+0x6c>)
 c009944:	681b      	ldr	r3, [r3, #0]
 c009946:	62a2      	str	r2, [r4, #40]	; 0x28
 c009948:	42a3      	cmp	r3, r4
 c00994a:	bf04      	itt	eq
 c00994c:	2301      	moveq	r3, #1
 c00994e:	61a3      	streq	r3, [r4, #24]
 c009950:	f000 f820 	bl	c009994 <__sfp>
 c009954:	6060      	str	r0, [r4, #4]
 c009956:	4620      	mov	r0, r4
 c009958:	f000 f81c 	bl	c009994 <__sfp>
 c00995c:	60a0      	str	r0, [r4, #8]
 c00995e:	4620      	mov	r0, r4
 c009960:	f000 f818 	bl	c009994 <__sfp>
 c009964:	2200      	movs	r2, #0
 c009966:	2104      	movs	r1, #4
 c009968:	60e0      	str	r0, [r4, #12]
 c00996a:	6860      	ldr	r0, [r4, #4]
 c00996c:	f7ff ff82 	bl	c009874 <std>
 c009970:	2201      	movs	r2, #1
 c009972:	2109      	movs	r1, #9
 c009974:	68a0      	ldr	r0, [r4, #8]
 c009976:	f7ff ff7d 	bl	c009874 <std>
 c00997a:	2202      	movs	r2, #2
 c00997c:	2112      	movs	r1, #18
 c00997e:	68e0      	ldr	r0, [r4, #12]
 c009980:	f7ff ff78 	bl	c009874 <std>
 c009984:	2301      	movs	r3, #1
 c009986:	61a3      	str	r3, [r4, #24]
 c009988:	e7d2      	b.n	c009930 <__sinit+0xc>
 c00998a:	bf00      	nop
 c00998c:	0c00a9c4 	.word	0x0c00a9c4
 c009990:	0c0098bd 	.word	0x0c0098bd

0c009994 <__sfp>:
 c009994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c009996:	4607      	mov	r7, r0
 c009998:	f7ff ffac 	bl	c0098f4 <__sfp_lock_acquire>
 c00999c:	4b1e      	ldr	r3, [pc, #120]	; (c009a18 <__sfp+0x84>)
 c00999e:	681e      	ldr	r6, [r3, #0]
 c0099a0:	69b3      	ldr	r3, [r6, #24]
 c0099a2:	b913      	cbnz	r3, c0099aa <__sfp+0x16>
 c0099a4:	4630      	mov	r0, r6
 c0099a6:	f7ff ffbd 	bl	c009924 <__sinit>
 c0099aa:	3648      	adds	r6, #72	; 0x48
 c0099ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 c0099b0:	3b01      	subs	r3, #1
 c0099b2:	d503      	bpl.n	c0099bc <__sfp+0x28>
 c0099b4:	6833      	ldr	r3, [r6, #0]
 c0099b6:	b30b      	cbz	r3, c0099fc <__sfp+0x68>
 c0099b8:	6836      	ldr	r6, [r6, #0]
 c0099ba:	e7f7      	b.n	c0099ac <__sfp+0x18>
 c0099bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 c0099c0:	b9d5      	cbnz	r5, c0099f8 <__sfp+0x64>
 c0099c2:	4b16      	ldr	r3, [pc, #88]	; (c009a1c <__sfp+0x88>)
 c0099c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 c0099c8:	6665      	str	r5, [r4, #100]	; 0x64
 c0099ca:	60e3      	str	r3, [r4, #12]
 c0099cc:	f000 f859 	bl	c009a82 <__retarget_lock_init_recursive>
 c0099d0:	f7ff ff96 	bl	c009900 <__sfp_lock_release>
 c0099d4:	2208      	movs	r2, #8
 c0099d6:	4629      	mov	r1, r5
 c0099d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 c0099dc:	6025      	str	r5, [r4, #0]
 c0099de:	61a5      	str	r5, [r4, #24]
 c0099e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 c0099e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 c0099e8:	f7ff fedf 	bl	c0097aa <memset>
 c0099ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 c0099f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 c0099f4:	4620      	mov	r0, r4
 c0099f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c0099f8:	3468      	adds	r4, #104	; 0x68
 c0099fa:	e7d9      	b.n	c0099b0 <__sfp+0x1c>
 c0099fc:	2104      	movs	r1, #4
 c0099fe:	4638      	mov	r0, r7
 c009a00:	f7ff ff62 	bl	c0098c8 <__sfmoreglue>
 c009a04:	4604      	mov	r4, r0
 c009a06:	6030      	str	r0, [r6, #0]
 c009a08:	2800      	cmp	r0, #0
 c009a0a:	d1d5      	bne.n	c0099b8 <__sfp+0x24>
 c009a0c:	f7ff ff78 	bl	c009900 <__sfp_lock_release>
 c009a10:	230c      	movs	r3, #12
 c009a12:	603b      	str	r3, [r7, #0]
 c009a14:	e7ee      	b.n	c0099f4 <__sfp+0x60>
 c009a16:	bf00      	nop
 c009a18:	0c00a9c4 	.word	0x0c00a9c4
 c009a1c:	ffff0001 	.word	0xffff0001

0c009a20 <fiprintf>:
 c009a20:	b40e      	push	{r1, r2, r3}
 c009a22:	b503      	push	{r0, r1, lr}
 c009a24:	ab03      	add	r3, sp, #12
 c009a26:	4601      	mov	r1, r0
 c009a28:	4805      	ldr	r0, [pc, #20]	; (c009a40 <fiprintf+0x20>)
 c009a2a:	f853 2b04 	ldr.w	r2, [r3], #4
 c009a2e:	6800      	ldr	r0, [r0, #0]
 c009a30:	9301      	str	r3, [sp, #4]
 c009a32:	f000 f93b 	bl	c009cac <_vfiprintf_r>
 c009a36:	b002      	add	sp, #8
 c009a38:	f85d eb04 	ldr.w	lr, [sp], #4
 c009a3c:	b003      	add	sp, #12
 c009a3e:	4770      	bx	lr
 c009a40:	30000090 	.word	0x30000090

0c009a44 <_fwalk_reent>:
 c009a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c009a48:	4606      	mov	r6, r0
 c009a4a:	4688      	mov	r8, r1
 c009a4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 c009a50:	2700      	movs	r7, #0
 c009a52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 c009a56:	f1b9 0901 	subs.w	r9, r9, #1
 c009a5a:	d505      	bpl.n	c009a68 <_fwalk_reent+0x24>
 c009a5c:	6824      	ldr	r4, [r4, #0]
 c009a5e:	2c00      	cmp	r4, #0
 c009a60:	d1f7      	bne.n	c009a52 <_fwalk_reent+0xe>
 c009a62:	4638      	mov	r0, r7
 c009a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c009a68:	89ab      	ldrh	r3, [r5, #12]
 c009a6a:	2b01      	cmp	r3, #1
 c009a6c:	d907      	bls.n	c009a7e <_fwalk_reent+0x3a>
 c009a6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 c009a72:	3301      	adds	r3, #1
 c009a74:	d003      	beq.n	c009a7e <_fwalk_reent+0x3a>
 c009a76:	4629      	mov	r1, r5
 c009a78:	4630      	mov	r0, r6
 c009a7a:	47c0      	blx	r8
 c009a7c:	4307      	orrs	r7, r0
 c009a7e:	3568      	adds	r5, #104	; 0x68
 c009a80:	e7e9      	b.n	c009a56 <_fwalk_reent+0x12>

0c009a82 <__retarget_lock_init_recursive>:
 c009a82:	4770      	bx	lr

0c009a84 <__retarget_lock_acquire_recursive>:
 c009a84:	4770      	bx	lr

0c009a86 <__retarget_lock_release_recursive>:
 c009a86:	4770      	bx	lr

0c009a88 <malloc>:
 c009a88:	4b02      	ldr	r3, [pc, #8]	; (c009a94 <malloc+0xc>)
 c009a8a:	4601      	mov	r1, r0
 c009a8c:	6818      	ldr	r0, [r3, #0]
 c009a8e:	f000 b86f 	b.w	c009b70 <_malloc_r>
 c009a92:	bf00      	nop
 c009a94:	30000090 	.word	0x30000090

0c009a98 <_free_r>:
 c009a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c009a9a:	2900      	cmp	r1, #0
 c009a9c:	d043      	beq.n	c009b26 <_free_r+0x8e>
 c009a9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c009aa2:	1f0c      	subs	r4, r1, #4
 c009aa4:	9001      	str	r0, [sp, #4]
 c009aa6:	2b00      	cmp	r3, #0
 c009aa8:	bfb8      	it	lt
 c009aaa:	18e4      	addlt	r4, r4, r3
 c009aac:	f000 fe48 	bl	c00a740 <__malloc_lock>
 c009ab0:	4a1e      	ldr	r2, [pc, #120]	; (c009b2c <_free_r+0x94>)
 c009ab2:	9801      	ldr	r0, [sp, #4]
 c009ab4:	6813      	ldr	r3, [r2, #0]
 c009ab6:	b933      	cbnz	r3, c009ac6 <_free_r+0x2e>
 c009ab8:	6063      	str	r3, [r4, #4]
 c009aba:	6014      	str	r4, [r2, #0]
 c009abc:	b003      	add	sp, #12
 c009abe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 c009ac2:	f000 be43 	b.w	c00a74c <__malloc_unlock>
 c009ac6:	42a3      	cmp	r3, r4
 c009ac8:	d908      	bls.n	c009adc <_free_r+0x44>
 c009aca:	6825      	ldr	r5, [r4, #0]
 c009acc:	1961      	adds	r1, r4, r5
 c009ace:	428b      	cmp	r3, r1
 c009ad0:	bf01      	itttt	eq
 c009ad2:	6819      	ldreq	r1, [r3, #0]
 c009ad4:	685b      	ldreq	r3, [r3, #4]
 c009ad6:	1949      	addeq	r1, r1, r5
 c009ad8:	6021      	streq	r1, [r4, #0]
 c009ada:	e7ed      	b.n	c009ab8 <_free_r+0x20>
 c009adc:	461a      	mov	r2, r3
 c009ade:	685b      	ldr	r3, [r3, #4]
 c009ae0:	b10b      	cbz	r3, c009ae6 <_free_r+0x4e>
 c009ae2:	42a3      	cmp	r3, r4
 c009ae4:	d9fa      	bls.n	c009adc <_free_r+0x44>
 c009ae6:	6811      	ldr	r1, [r2, #0]
 c009ae8:	1855      	adds	r5, r2, r1
 c009aea:	42a5      	cmp	r5, r4
 c009aec:	d10b      	bne.n	c009b06 <_free_r+0x6e>
 c009aee:	6824      	ldr	r4, [r4, #0]
 c009af0:	4421      	add	r1, r4
 c009af2:	1854      	adds	r4, r2, r1
 c009af4:	6011      	str	r1, [r2, #0]
 c009af6:	42a3      	cmp	r3, r4
 c009af8:	d1e0      	bne.n	c009abc <_free_r+0x24>
 c009afa:	681c      	ldr	r4, [r3, #0]
 c009afc:	685b      	ldr	r3, [r3, #4]
 c009afe:	4421      	add	r1, r4
 c009b00:	6053      	str	r3, [r2, #4]
 c009b02:	6011      	str	r1, [r2, #0]
 c009b04:	e7da      	b.n	c009abc <_free_r+0x24>
 c009b06:	d902      	bls.n	c009b0e <_free_r+0x76>
 c009b08:	230c      	movs	r3, #12
 c009b0a:	6003      	str	r3, [r0, #0]
 c009b0c:	e7d6      	b.n	c009abc <_free_r+0x24>
 c009b0e:	6825      	ldr	r5, [r4, #0]
 c009b10:	1961      	adds	r1, r4, r5
 c009b12:	428b      	cmp	r3, r1
 c009b14:	bf02      	ittt	eq
 c009b16:	6819      	ldreq	r1, [r3, #0]
 c009b18:	685b      	ldreq	r3, [r3, #4]
 c009b1a:	1949      	addeq	r1, r1, r5
 c009b1c:	6063      	str	r3, [r4, #4]
 c009b1e:	bf08      	it	eq
 c009b20:	6021      	streq	r1, [r4, #0]
 c009b22:	6054      	str	r4, [r2, #4]
 c009b24:	e7ca      	b.n	c009abc <_free_r+0x24>
 c009b26:	b003      	add	sp, #12
 c009b28:	bd30      	pop	{r4, r5, pc}
 c009b2a:	bf00      	nop
 c009b2c:	30002470 	.word	0x30002470

0c009b30 <sbrk_aligned>:
 c009b30:	b570      	push	{r4, r5, r6, lr}
 c009b32:	4e0e      	ldr	r6, [pc, #56]	; (c009b6c <sbrk_aligned+0x3c>)
 c009b34:	460c      	mov	r4, r1
 c009b36:	4605      	mov	r5, r0
 c009b38:	6831      	ldr	r1, [r6, #0]
 c009b3a:	b911      	cbnz	r1, c009b42 <sbrk_aligned+0x12>
 c009b3c:	f000 fb7c 	bl	c00a238 <_sbrk_r>
 c009b40:	6030      	str	r0, [r6, #0]
 c009b42:	4621      	mov	r1, r4
 c009b44:	4628      	mov	r0, r5
 c009b46:	f000 fb77 	bl	c00a238 <_sbrk_r>
 c009b4a:	1c43      	adds	r3, r0, #1
 c009b4c:	d00a      	beq.n	c009b64 <sbrk_aligned+0x34>
 c009b4e:	1cc4      	adds	r4, r0, #3
 c009b50:	f024 0403 	bic.w	r4, r4, #3
 c009b54:	42a0      	cmp	r0, r4
 c009b56:	d007      	beq.n	c009b68 <sbrk_aligned+0x38>
 c009b58:	1a21      	subs	r1, r4, r0
 c009b5a:	4628      	mov	r0, r5
 c009b5c:	f000 fb6c 	bl	c00a238 <_sbrk_r>
 c009b60:	3001      	adds	r0, #1
 c009b62:	d101      	bne.n	c009b68 <sbrk_aligned+0x38>
 c009b64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 c009b68:	4620      	mov	r0, r4
 c009b6a:	bd70      	pop	{r4, r5, r6, pc}
 c009b6c:	30002474 	.word	0x30002474

0c009b70 <_malloc_r>:
 c009b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c009b74:	1ccd      	adds	r5, r1, #3
 c009b76:	4607      	mov	r7, r0
 c009b78:	f025 0503 	bic.w	r5, r5, #3
 c009b7c:	3508      	adds	r5, #8
 c009b7e:	2d0c      	cmp	r5, #12
 c009b80:	bf38      	it	cc
 c009b82:	250c      	movcc	r5, #12
 c009b84:	2d00      	cmp	r5, #0
 c009b86:	db01      	blt.n	c009b8c <_malloc_r+0x1c>
 c009b88:	42a9      	cmp	r1, r5
 c009b8a:	d905      	bls.n	c009b98 <_malloc_r+0x28>
 c009b8c:	230c      	movs	r3, #12
 c009b8e:	2600      	movs	r6, #0
 c009b90:	603b      	str	r3, [r7, #0]
 c009b92:	4630      	mov	r0, r6
 c009b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c009b98:	4e2e      	ldr	r6, [pc, #184]	; (c009c54 <_malloc_r+0xe4>)
 c009b9a:	f000 fdd1 	bl	c00a740 <__malloc_lock>
 c009b9e:	6833      	ldr	r3, [r6, #0]
 c009ba0:	461c      	mov	r4, r3
 c009ba2:	bb34      	cbnz	r4, c009bf2 <_malloc_r+0x82>
 c009ba4:	4629      	mov	r1, r5
 c009ba6:	4638      	mov	r0, r7
 c009ba8:	f7ff ffc2 	bl	c009b30 <sbrk_aligned>
 c009bac:	1c43      	adds	r3, r0, #1
 c009bae:	4604      	mov	r4, r0
 c009bb0:	d14d      	bne.n	c009c4e <_malloc_r+0xde>
 c009bb2:	6834      	ldr	r4, [r6, #0]
 c009bb4:	4626      	mov	r6, r4
 c009bb6:	2e00      	cmp	r6, #0
 c009bb8:	d140      	bne.n	c009c3c <_malloc_r+0xcc>
 c009bba:	6823      	ldr	r3, [r4, #0]
 c009bbc:	4631      	mov	r1, r6
 c009bbe:	4638      	mov	r0, r7
 c009bc0:	eb04 0803 	add.w	r8, r4, r3
 c009bc4:	f000 fb38 	bl	c00a238 <_sbrk_r>
 c009bc8:	4580      	cmp	r8, r0
 c009bca:	d13a      	bne.n	c009c42 <_malloc_r+0xd2>
 c009bcc:	6821      	ldr	r1, [r4, #0]
 c009bce:	3503      	adds	r5, #3
 c009bd0:	4638      	mov	r0, r7
 c009bd2:	1a6d      	subs	r5, r5, r1
 c009bd4:	f025 0503 	bic.w	r5, r5, #3
 c009bd8:	3508      	adds	r5, #8
 c009bda:	2d0c      	cmp	r5, #12
 c009bdc:	bf38      	it	cc
 c009bde:	250c      	movcc	r5, #12
 c009be0:	4629      	mov	r1, r5
 c009be2:	f7ff ffa5 	bl	c009b30 <sbrk_aligned>
 c009be6:	3001      	adds	r0, #1
 c009be8:	d02b      	beq.n	c009c42 <_malloc_r+0xd2>
 c009bea:	6823      	ldr	r3, [r4, #0]
 c009bec:	442b      	add	r3, r5
 c009bee:	6023      	str	r3, [r4, #0]
 c009bf0:	e00e      	b.n	c009c10 <_malloc_r+0xa0>
 c009bf2:	6822      	ldr	r2, [r4, #0]
 c009bf4:	1b52      	subs	r2, r2, r5
 c009bf6:	d41e      	bmi.n	c009c36 <_malloc_r+0xc6>
 c009bf8:	2a0b      	cmp	r2, #11
 c009bfa:	d916      	bls.n	c009c2a <_malloc_r+0xba>
 c009bfc:	1961      	adds	r1, r4, r5
 c009bfe:	42a3      	cmp	r3, r4
 c009c00:	6025      	str	r5, [r4, #0]
 c009c02:	bf18      	it	ne
 c009c04:	6059      	strne	r1, [r3, #4]
 c009c06:	6863      	ldr	r3, [r4, #4]
 c009c08:	bf08      	it	eq
 c009c0a:	6031      	streq	r1, [r6, #0]
 c009c0c:	5162      	str	r2, [r4, r5]
 c009c0e:	604b      	str	r3, [r1, #4]
 c009c10:	f104 060b 	add.w	r6, r4, #11
 c009c14:	4638      	mov	r0, r7
 c009c16:	f000 fd99 	bl	c00a74c <__malloc_unlock>
 c009c1a:	1d23      	adds	r3, r4, #4
 c009c1c:	f026 0607 	bic.w	r6, r6, #7
 c009c20:	1af2      	subs	r2, r6, r3
 c009c22:	d0b6      	beq.n	c009b92 <_malloc_r+0x22>
 c009c24:	1b9b      	subs	r3, r3, r6
 c009c26:	50a3      	str	r3, [r4, r2]
 c009c28:	e7b3      	b.n	c009b92 <_malloc_r+0x22>
 c009c2a:	6862      	ldr	r2, [r4, #4]
 c009c2c:	42a3      	cmp	r3, r4
 c009c2e:	bf0c      	ite	eq
 c009c30:	6032      	streq	r2, [r6, #0]
 c009c32:	605a      	strne	r2, [r3, #4]
 c009c34:	e7ec      	b.n	c009c10 <_malloc_r+0xa0>
 c009c36:	4623      	mov	r3, r4
 c009c38:	6864      	ldr	r4, [r4, #4]
 c009c3a:	e7b2      	b.n	c009ba2 <_malloc_r+0x32>
 c009c3c:	4634      	mov	r4, r6
 c009c3e:	6876      	ldr	r6, [r6, #4]
 c009c40:	e7b9      	b.n	c009bb6 <_malloc_r+0x46>
 c009c42:	230c      	movs	r3, #12
 c009c44:	4638      	mov	r0, r7
 c009c46:	603b      	str	r3, [r7, #0]
 c009c48:	f000 fd80 	bl	c00a74c <__malloc_unlock>
 c009c4c:	e7a1      	b.n	c009b92 <_malloc_r+0x22>
 c009c4e:	6025      	str	r5, [r4, #0]
 c009c50:	e7de      	b.n	c009c10 <_malloc_r+0xa0>
 c009c52:	bf00      	nop
 c009c54:	30002470 	.word	0x30002470

0c009c58 <__sfputc_r>:
 c009c58:	6893      	ldr	r3, [r2, #8]
 c009c5a:	3b01      	subs	r3, #1
 c009c5c:	2b00      	cmp	r3, #0
 c009c5e:	6093      	str	r3, [r2, #8]
 c009c60:	b410      	push	{r4}
 c009c62:	da08      	bge.n	c009c76 <__sfputc_r+0x1e>
 c009c64:	6994      	ldr	r4, [r2, #24]
 c009c66:	42a3      	cmp	r3, r4
 c009c68:	db01      	blt.n	c009c6e <__sfputc_r+0x16>
 c009c6a:	290a      	cmp	r1, #10
 c009c6c:	d103      	bne.n	c009c76 <__sfputc_r+0x1e>
 c009c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 c009c72:	f000 bb35 	b.w	c00a2e0 <__swbuf_r>
 c009c76:	6813      	ldr	r3, [r2, #0]
 c009c78:	1c58      	adds	r0, r3, #1
 c009c7a:	6010      	str	r0, [r2, #0]
 c009c7c:	4608      	mov	r0, r1
 c009c7e:	7019      	strb	r1, [r3, #0]
 c009c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 c009c84:	4770      	bx	lr

0c009c86 <__sfputs_r>:
 c009c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c009c88:	4606      	mov	r6, r0
 c009c8a:	460f      	mov	r7, r1
 c009c8c:	4614      	mov	r4, r2
 c009c8e:	18d5      	adds	r5, r2, r3
 c009c90:	42ac      	cmp	r4, r5
 c009c92:	d101      	bne.n	c009c98 <__sfputs_r+0x12>
 c009c94:	2000      	movs	r0, #0
 c009c96:	e007      	b.n	c009ca8 <__sfputs_r+0x22>
 c009c98:	463a      	mov	r2, r7
 c009c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 c009c9e:	4630      	mov	r0, r6
 c009ca0:	f7ff ffda 	bl	c009c58 <__sfputc_r>
 c009ca4:	1c43      	adds	r3, r0, #1
 c009ca6:	d1f3      	bne.n	c009c90 <__sfputs_r+0xa>
 c009ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0c009cac <_vfiprintf_r>:
 c009cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c009cb0:	460d      	mov	r5, r1
 c009cb2:	b09d      	sub	sp, #116	; 0x74
 c009cb4:	4614      	mov	r4, r2
 c009cb6:	4698      	mov	r8, r3
 c009cb8:	4606      	mov	r6, r0
 c009cba:	b118      	cbz	r0, c009cc4 <_vfiprintf_r+0x18>
 c009cbc:	6983      	ldr	r3, [r0, #24]
 c009cbe:	b90b      	cbnz	r3, c009cc4 <_vfiprintf_r+0x18>
 c009cc0:	f7ff fe30 	bl	c009924 <__sinit>
 c009cc4:	4b89      	ldr	r3, [pc, #548]	; (c009eec <_vfiprintf_r+0x240>)
 c009cc6:	429d      	cmp	r5, r3
 c009cc8:	d11b      	bne.n	c009d02 <_vfiprintf_r+0x56>
 c009cca:	6875      	ldr	r5, [r6, #4]
 c009ccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c009cce:	07d9      	lsls	r1, r3, #31
 c009cd0:	d405      	bmi.n	c009cde <_vfiprintf_r+0x32>
 c009cd2:	89ab      	ldrh	r3, [r5, #12]
 c009cd4:	059a      	lsls	r2, r3, #22
 c009cd6:	d402      	bmi.n	c009cde <_vfiprintf_r+0x32>
 c009cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c009cda:	f7ff fed3 	bl	c009a84 <__retarget_lock_acquire_recursive>
 c009cde:	89ab      	ldrh	r3, [r5, #12]
 c009ce0:	071b      	lsls	r3, r3, #28
 c009ce2:	d501      	bpl.n	c009ce8 <_vfiprintf_r+0x3c>
 c009ce4:	692b      	ldr	r3, [r5, #16]
 c009ce6:	b9eb      	cbnz	r3, c009d24 <_vfiprintf_r+0x78>
 c009ce8:	4629      	mov	r1, r5
 c009cea:	4630      	mov	r0, r6
 c009cec:	f000 fb5c 	bl	c00a3a8 <__swsetup_r>
 c009cf0:	b1c0      	cbz	r0, c009d24 <_vfiprintf_r+0x78>
 c009cf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c009cf4:	07dc      	lsls	r4, r3, #31
 c009cf6:	d50e      	bpl.n	c009d16 <_vfiprintf_r+0x6a>
 c009cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c009cfc:	b01d      	add	sp, #116	; 0x74
 c009cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c009d02:	4b7b      	ldr	r3, [pc, #492]	; (c009ef0 <_vfiprintf_r+0x244>)
 c009d04:	429d      	cmp	r5, r3
 c009d06:	d101      	bne.n	c009d0c <_vfiprintf_r+0x60>
 c009d08:	68b5      	ldr	r5, [r6, #8]
 c009d0a:	e7df      	b.n	c009ccc <_vfiprintf_r+0x20>
 c009d0c:	4b79      	ldr	r3, [pc, #484]	; (c009ef4 <_vfiprintf_r+0x248>)
 c009d0e:	429d      	cmp	r5, r3
 c009d10:	bf08      	it	eq
 c009d12:	68f5      	ldreq	r5, [r6, #12]
 c009d14:	e7da      	b.n	c009ccc <_vfiprintf_r+0x20>
 c009d16:	89ab      	ldrh	r3, [r5, #12]
 c009d18:	0598      	lsls	r0, r3, #22
 c009d1a:	d4ed      	bmi.n	c009cf8 <_vfiprintf_r+0x4c>
 c009d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c009d1e:	f7ff feb2 	bl	c009a86 <__retarget_lock_release_recursive>
 c009d22:	e7e9      	b.n	c009cf8 <_vfiprintf_r+0x4c>
 c009d24:	2300      	movs	r3, #0
 c009d26:	f8cd 800c 	str.w	r8, [sp, #12]
 c009d2a:	f04f 0901 	mov.w	r9, #1
 c009d2e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; c009ef8 <_vfiprintf_r+0x24c>
 c009d32:	9309      	str	r3, [sp, #36]	; 0x24
 c009d34:	2320      	movs	r3, #32
 c009d36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 c009d3a:	2330      	movs	r3, #48	; 0x30
 c009d3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 c009d40:	4623      	mov	r3, r4
 c009d42:	469a      	mov	sl, r3
 c009d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 c009d48:	b10a      	cbz	r2, c009d4e <_vfiprintf_r+0xa2>
 c009d4a:	2a25      	cmp	r2, #37	; 0x25
 c009d4c:	d1f9      	bne.n	c009d42 <_vfiprintf_r+0x96>
 c009d4e:	ebba 0b04 	subs.w	fp, sl, r4
 c009d52:	d00b      	beq.n	c009d6c <_vfiprintf_r+0xc0>
 c009d54:	465b      	mov	r3, fp
 c009d56:	4622      	mov	r2, r4
 c009d58:	4629      	mov	r1, r5
 c009d5a:	4630      	mov	r0, r6
 c009d5c:	f7ff ff93 	bl	c009c86 <__sfputs_r>
 c009d60:	3001      	adds	r0, #1
 c009d62:	f000 80aa 	beq.w	c009eba <_vfiprintf_r+0x20e>
 c009d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c009d68:	445a      	add	r2, fp
 c009d6a:	9209      	str	r2, [sp, #36]	; 0x24
 c009d6c:	f89a 3000 	ldrb.w	r3, [sl]
 c009d70:	2b00      	cmp	r3, #0
 c009d72:	f000 80a2 	beq.w	c009eba <_vfiprintf_r+0x20e>
 c009d76:	2300      	movs	r3, #0
 c009d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c009d7c:	f10a 0a01 	add.w	sl, sl, #1
 c009d80:	9304      	str	r3, [sp, #16]
 c009d82:	9307      	str	r3, [sp, #28]
 c009d84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 c009d88:	931a      	str	r3, [sp, #104]	; 0x68
 c009d8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 c009d8e:	4654      	mov	r4, sl
 c009d90:	2205      	movs	r2, #5
 c009d92:	4859      	ldr	r0, [pc, #356]	; (c009ef8 <_vfiprintf_r+0x24c>)
 c009d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 c009d98:	f000 fcc4 	bl	c00a724 <memchr>
 c009d9c:	9a04      	ldr	r2, [sp, #16]
 c009d9e:	b9d8      	cbnz	r0, c009dd8 <_vfiprintf_r+0x12c>
 c009da0:	06d1      	lsls	r1, r2, #27
 c009da2:	bf44      	itt	mi
 c009da4:	2320      	movmi	r3, #32
 c009da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c009daa:	0713      	lsls	r3, r2, #28
 c009dac:	bf44      	itt	mi
 c009dae:	232b      	movmi	r3, #43	; 0x2b
 c009db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c009db4:	f89a 3000 	ldrb.w	r3, [sl]
 c009db8:	2b2a      	cmp	r3, #42	; 0x2a
 c009dba:	d015      	beq.n	c009de8 <_vfiprintf_r+0x13c>
 c009dbc:	9a07      	ldr	r2, [sp, #28]
 c009dbe:	4654      	mov	r4, sl
 c009dc0:	2000      	movs	r0, #0
 c009dc2:	f04f 0c0a 	mov.w	ip, #10
 c009dc6:	4621      	mov	r1, r4
 c009dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 c009dcc:	3b30      	subs	r3, #48	; 0x30
 c009dce:	2b09      	cmp	r3, #9
 c009dd0:	d94e      	bls.n	c009e70 <_vfiprintf_r+0x1c4>
 c009dd2:	b1b0      	cbz	r0, c009e02 <_vfiprintf_r+0x156>
 c009dd4:	9207      	str	r2, [sp, #28]
 c009dd6:	e014      	b.n	c009e02 <_vfiprintf_r+0x156>
 c009dd8:	eba0 0308 	sub.w	r3, r0, r8
 c009ddc:	46a2      	mov	sl, r4
 c009dde:	fa09 f303 	lsl.w	r3, r9, r3
 c009de2:	4313      	orrs	r3, r2
 c009de4:	9304      	str	r3, [sp, #16]
 c009de6:	e7d2      	b.n	c009d8e <_vfiprintf_r+0xe2>
 c009de8:	9b03      	ldr	r3, [sp, #12]
 c009dea:	1d19      	adds	r1, r3, #4
 c009dec:	681b      	ldr	r3, [r3, #0]
 c009dee:	2b00      	cmp	r3, #0
 c009df0:	9103      	str	r1, [sp, #12]
 c009df2:	bfbb      	ittet	lt
 c009df4:	425b      	neglt	r3, r3
 c009df6:	f042 0202 	orrlt.w	r2, r2, #2
 c009dfa:	9307      	strge	r3, [sp, #28]
 c009dfc:	9307      	strlt	r3, [sp, #28]
 c009dfe:	bfb8      	it	lt
 c009e00:	9204      	strlt	r2, [sp, #16]
 c009e02:	7823      	ldrb	r3, [r4, #0]
 c009e04:	2b2e      	cmp	r3, #46	; 0x2e
 c009e06:	d10c      	bne.n	c009e22 <_vfiprintf_r+0x176>
 c009e08:	7863      	ldrb	r3, [r4, #1]
 c009e0a:	2b2a      	cmp	r3, #42	; 0x2a
 c009e0c:	d135      	bne.n	c009e7a <_vfiprintf_r+0x1ce>
 c009e0e:	9b03      	ldr	r3, [sp, #12]
 c009e10:	3402      	adds	r4, #2
 c009e12:	1d1a      	adds	r2, r3, #4
 c009e14:	681b      	ldr	r3, [r3, #0]
 c009e16:	2b00      	cmp	r3, #0
 c009e18:	9203      	str	r2, [sp, #12]
 c009e1a:	bfb8      	it	lt
 c009e1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 c009e20:	9305      	str	r3, [sp, #20]
 c009e22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; c009f08 <_vfiprintf_r+0x25c>
 c009e26:	2203      	movs	r2, #3
 c009e28:	7821      	ldrb	r1, [r4, #0]
 c009e2a:	4650      	mov	r0, sl
 c009e2c:	f000 fc7a 	bl	c00a724 <memchr>
 c009e30:	b140      	cbz	r0, c009e44 <_vfiprintf_r+0x198>
 c009e32:	2340      	movs	r3, #64	; 0x40
 c009e34:	eba0 000a 	sub.w	r0, r0, sl
 c009e38:	3401      	adds	r4, #1
 c009e3a:	fa03 f000 	lsl.w	r0, r3, r0
 c009e3e:	9b04      	ldr	r3, [sp, #16]
 c009e40:	4303      	orrs	r3, r0
 c009e42:	9304      	str	r3, [sp, #16]
 c009e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 c009e48:	2206      	movs	r2, #6
 c009e4a:	482c      	ldr	r0, [pc, #176]	; (c009efc <_vfiprintf_r+0x250>)
 c009e4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 c009e50:	f000 fc68 	bl	c00a724 <memchr>
 c009e54:	2800      	cmp	r0, #0
 c009e56:	d03f      	beq.n	c009ed8 <_vfiprintf_r+0x22c>
 c009e58:	4b29      	ldr	r3, [pc, #164]	; (c009f00 <_vfiprintf_r+0x254>)
 c009e5a:	bb1b      	cbnz	r3, c009ea4 <_vfiprintf_r+0x1f8>
 c009e5c:	9b03      	ldr	r3, [sp, #12]
 c009e5e:	3307      	adds	r3, #7
 c009e60:	f023 0307 	bic.w	r3, r3, #7
 c009e64:	3308      	adds	r3, #8
 c009e66:	9303      	str	r3, [sp, #12]
 c009e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c009e6a:	443b      	add	r3, r7
 c009e6c:	9309      	str	r3, [sp, #36]	; 0x24
 c009e6e:	e767      	b.n	c009d40 <_vfiprintf_r+0x94>
 c009e70:	fb0c 3202 	mla	r2, ip, r2, r3
 c009e74:	460c      	mov	r4, r1
 c009e76:	2001      	movs	r0, #1
 c009e78:	e7a5      	b.n	c009dc6 <_vfiprintf_r+0x11a>
 c009e7a:	2300      	movs	r3, #0
 c009e7c:	3401      	adds	r4, #1
 c009e7e:	f04f 0c0a 	mov.w	ip, #10
 c009e82:	4619      	mov	r1, r3
 c009e84:	9305      	str	r3, [sp, #20]
 c009e86:	4620      	mov	r0, r4
 c009e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 c009e8c:	3a30      	subs	r2, #48	; 0x30
 c009e8e:	2a09      	cmp	r2, #9
 c009e90:	d903      	bls.n	c009e9a <_vfiprintf_r+0x1ee>
 c009e92:	2b00      	cmp	r3, #0
 c009e94:	d0c5      	beq.n	c009e22 <_vfiprintf_r+0x176>
 c009e96:	9105      	str	r1, [sp, #20]
 c009e98:	e7c3      	b.n	c009e22 <_vfiprintf_r+0x176>
 c009e9a:	fb0c 2101 	mla	r1, ip, r1, r2
 c009e9e:	4604      	mov	r4, r0
 c009ea0:	2301      	movs	r3, #1
 c009ea2:	e7f0      	b.n	c009e86 <_vfiprintf_r+0x1da>
 c009ea4:	ab03      	add	r3, sp, #12
 c009ea6:	462a      	mov	r2, r5
 c009ea8:	a904      	add	r1, sp, #16
 c009eaa:	4630      	mov	r0, r6
 c009eac:	9300      	str	r3, [sp, #0]
 c009eae:	4b15      	ldr	r3, [pc, #84]	; (c009f04 <_vfiprintf_r+0x258>)
 c009eb0:	e000      	b.n	c009eb4 <_vfiprintf_r+0x208>
 c009eb2:	bf00      	nop
 c009eb4:	4607      	mov	r7, r0
 c009eb6:	1c78      	adds	r0, r7, #1
 c009eb8:	d1d6      	bne.n	c009e68 <_vfiprintf_r+0x1bc>
 c009eba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c009ebc:	07d9      	lsls	r1, r3, #31
 c009ebe:	d405      	bmi.n	c009ecc <_vfiprintf_r+0x220>
 c009ec0:	89ab      	ldrh	r3, [r5, #12]
 c009ec2:	059a      	lsls	r2, r3, #22
 c009ec4:	d402      	bmi.n	c009ecc <_vfiprintf_r+0x220>
 c009ec6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c009ec8:	f7ff fddd 	bl	c009a86 <__retarget_lock_release_recursive>
 c009ecc:	89ab      	ldrh	r3, [r5, #12]
 c009ece:	065b      	lsls	r3, r3, #25
 c009ed0:	f53f af12 	bmi.w	c009cf8 <_vfiprintf_r+0x4c>
 c009ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 c009ed6:	e711      	b.n	c009cfc <_vfiprintf_r+0x50>
 c009ed8:	ab03      	add	r3, sp, #12
 c009eda:	462a      	mov	r2, r5
 c009edc:	a904      	add	r1, sp, #16
 c009ede:	4630      	mov	r0, r6
 c009ee0:	9300      	str	r3, [sp, #0]
 c009ee2:	4b08      	ldr	r3, [pc, #32]	; (c009f04 <_vfiprintf_r+0x258>)
 c009ee4:	f000 f882 	bl	c009fec <_printf_i>
 c009ee8:	e7e4      	b.n	c009eb4 <_vfiprintf_r+0x208>
 c009eea:	bf00      	nop
 c009eec:	0c00aa98 	.word	0x0c00aa98
 c009ef0:	0c00aab8 	.word	0x0c00aab8
 c009ef4:	0c00aa78 	.word	0x0c00aa78
 c009ef8:	0c00aad8 	.word	0x0c00aad8
 c009efc:	0c00aae2 	.word	0x0c00aae2
 c009f00:	00000000 	.word	0x00000000
 c009f04:	0c009c87 	.word	0x0c009c87
 c009f08:	0c00aade 	.word	0x0c00aade

0c009f0c <_printf_common>:
 c009f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c009f10:	4616      	mov	r6, r2
 c009f12:	4699      	mov	r9, r3
 c009f14:	688a      	ldr	r2, [r1, #8]
 c009f16:	4607      	mov	r7, r0
 c009f18:	690b      	ldr	r3, [r1, #16]
 c009f1a:	460c      	mov	r4, r1
 c009f1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 c009f20:	4293      	cmp	r3, r2
 c009f22:	bfb8      	it	lt
 c009f24:	4613      	movlt	r3, r2
 c009f26:	6033      	str	r3, [r6, #0]
 c009f28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 c009f2c:	b10a      	cbz	r2, c009f32 <_printf_common+0x26>
 c009f2e:	3301      	adds	r3, #1
 c009f30:	6033      	str	r3, [r6, #0]
 c009f32:	6823      	ldr	r3, [r4, #0]
 c009f34:	0699      	lsls	r1, r3, #26
 c009f36:	bf42      	ittt	mi
 c009f38:	6833      	ldrmi	r3, [r6, #0]
 c009f3a:	3302      	addmi	r3, #2
 c009f3c:	6033      	strmi	r3, [r6, #0]
 c009f3e:	6825      	ldr	r5, [r4, #0]
 c009f40:	f015 0506 	ands.w	r5, r5, #6
 c009f44:	d106      	bne.n	c009f54 <_printf_common+0x48>
 c009f46:	f104 0a19 	add.w	sl, r4, #25
 c009f4a:	68e3      	ldr	r3, [r4, #12]
 c009f4c:	6832      	ldr	r2, [r6, #0]
 c009f4e:	1a9b      	subs	r3, r3, r2
 c009f50:	42ab      	cmp	r3, r5
 c009f52:	dc29      	bgt.n	c009fa8 <_printf_common+0x9c>
 c009f54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 c009f58:	1e13      	subs	r3, r2, #0
 c009f5a:	6822      	ldr	r2, [r4, #0]
 c009f5c:	bf18      	it	ne
 c009f5e:	2301      	movne	r3, #1
 c009f60:	0692      	lsls	r2, r2, #26
 c009f62:	d42e      	bmi.n	c009fc2 <_printf_common+0xb6>
 c009f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 c009f68:	4649      	mov	r1, r9
 c009f6a:	4638      	mov	r0, r7
 c009f6c:	47c0      	blx	r8
 c009f6e:	3001      	adds	r0, #1
 c009f70:	d021      	beq.n	c009fb6 <_printf_common+0xaa>
 c009f72:	6823      	ldr	r3, [r4, #0]
 c009f74:	341a      	adds	r4, #26
 c009f76:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 c009f7a:	f003 0306 	and.w	r3, r3, #6
 c009f7e:	6832      	ldr	r2, [r6, #0]
 c009f80:	2600      	movs	r6, #0
 c009f82:	2b04      	cmp	r3, #4
 c009f84:	f854 3c12 	ldr.w	r3, [r4, #-18]
 c009f88:	bf08      	it	eq
 c009f8a:	1aad      	subeq	r5, r5, r2
 c009f8c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 c009f90:	bf14      	ite	ne
 c009f92:	2500      	movne	r5, #0
 c009f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 c009f98:	4293      	cmp	r3, r2
 c009f9a:	bfc4      	itt	gt
 c009f9c:	1a9b      	subgt	r3, r3, r2
 c009f9e:	18ed      	addgt	r5, r5, r3
 c009fa0:	42b5      	cmp	r5, r6
 c009fa2:	d11a      	bne.n	c009fda <_printf_common+0xce>
 c009fa4:	2000      	movs	r0, #0
 c009fa6:	e008      	b.n	c009fba <_printf_common+0xae>
 c009fa8:	2301      	movs	r3, #1
 c009faa:	4652      	mov	r2, sl
 c009fac:	4649      	mov	r1, r9
 c009fae:	4638      	mov	r0, r7
 c009fb0:	47c0      	blx	r8
 c009fb2:	3001      	adds	r0, #1
 c009fb4:	d103      	bne.n	c009fbe <_printf_common+0xb2>
 c009fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c009fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c009fbe:	3501      	adds	r5, #1
 c009fc0:	e7c3      	b.n	c009f4a <_printf_common+0x3e>
 c009fc2:	18e1      	adds	r1, r4, r3
 c009fc4:	1c5a      	adds	r2, r3, #1
 c009fc6:	2030      	movs	r0, #48	; 0x30
 c009fc8:	3302      	adds	r3, #2
 c009fca:	4422      	add	r2, r4
 c009fcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 c009fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 c009fd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 c009fd8:	e7c4      	b.n	c009f64 <_printf_common+0x58>
 c009fda:	2301      	movs	r3, #1
 c009fdc:	4622      	mov	r2, r4
 c009fde:	4649      	mov	r1, r9
 c009fe0:	4638      	mov	r0, r7
 c009fe2:	47c0      	blx	r8
 c009fe4:	3001      	adds	r0, #1
 c009fe6:	d0e6      	beq.n	c009fb6 <_printf_common+0xaa>
 c009fe8:	3601      	adds	r6, #1
 c009fea:	e7d9      	b.n	c009fa0 <_printf_common+0x94>

0c009fec <_printf_i>:
 c009fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c009ff0:	7e0f      	ldrb	r7, [r1, #24]
 c009ff2:	4691      	mov	r9, r2
 c009ff4:	4680      	mov	r8, r0
 c009ff6:	460c      	mov	r4, r1
 c009ff8:	2f78      	cmp	r7, #120	; 0x78
 c009ffa:	469a      	mov	sl, r3
 c009ffc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 c009ffe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 c00a002:	d807      	bhi.n	c00a014 <_printf_i+0x28>
 c00a004:	2f62      	cmp	r7, #98	; 0x62
 c00a006:	d80a      	bhi.n	c00a01e <_printf_i+0x32>
 c00a008:	2f00      	cmp	r7, #0
 c00a00a:	f000 80d8 	beq.w	c00a1be <_printf_i+0x1d2>
 c00a00e:	2f58      	cmp	r7, #88	; 0x58
 c00a010:	f000 80a3 	beq.w	c00a15a <_printf_i+0x16e>
 c00a014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c00a018:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 c00a01c:	e03a      	b.n	c00a094 <_printf_i+0xa8>
 c00a01e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 c00a022:	2b15      	cmp	r3, #21
 c00a024:	d8f6      	bhi.n	c00a014 <_printf_i+0x28>
 c00a026:	a101      	add	r1, pc, #4	; (adr r1, c00a02c <_printf_i+0x40>)
 c00a028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 c00a02c:	0c00a085 	.word	0x0c00a085
 c00a030:	0c00a099 	.word	0x0c00a099
 c00a034:	0c00a015 	.word	0x0c00a015
 c00a038:	0c00a015 	.word	0x0c00a015
 c00a03c:	0c00a015 	.word	0x0c00a015
 c00a040:	0c00a015 	.word	0x0c00a015
 c00a044:	0c00a099 	.word	0x0c00a099
 c00a048:	0c00a015 	.word	0x0c00a015
 c00a04c:	0c00a015 	.word	0x0c00a015
 c00a050:	0c00a015 	.word	0x0c00a015
 c00a054:	0c00a015 	.word	0x0c00a015
 c00a058:	0c00a1a5 	.word	0x0c00a1a5
 c00a05c:	0c00a0c9 	.word	0x0c00a0c9
 c00a060:	0c00a187 	.word	0x0c00a187
 c00a064:	0c00a015 	.word	0x0c00a015
 c00a068:	0c00a015 	.word	0x0c00a015
 c00a06c:	0c00a1c7 	.word	0x0c00a1c7
 c00a070:	0c00a015 	.word	0x0c00a015
 c00a074:	0c00a0c9 	.word	0x0c00a0c9
 c00a078:	0c00a015 	.word	0x0c00a015
 c00a07c:	0c00a015 	.word	0x0c00a015
 c00a080:	0c00a18f 	.word	0x0c00a18f
 c00a084:	682b      	ldr	r3, [r5, #0]
 c00a086:	1d1a      	adds	r2, r3, #4
 c00a088:	681b      	ldr	r3, [r3, #0]
 c00a08a:	602a      	str	r2, [r5, #0]
 c00a08c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c00a090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 c00a094:	2301      	movs	r3, #1
 c00a096:	e0a3      	b.n	c00a1e0 <_printf_i+0x1f4>
 c00a098:	6820      	ldr	r0, [r4, #0]
 c00a09a:	6829      	ldr	r1, [r5, #0]
 c00a09c:	0606      	lsls	r6, r0, #24
 c00a09e:	f101 0304 	add.w	r3, r1, #4
 c00a0a2:	d50a      	bpl.n	c00a0ba <_printf_i+0xce>
 c00a0a4:	680e      	ldr	r6, [r1, #0]
 c00a0a6:	602b      	str	r3, [r5, #0]
 c00a0a8:	2e00      	cmp	r6, #0
 c00a0aa:	da03      	bge.n	c00a0b4 <_printf_i+0xc8>
 c00a0ac:	232d      	movs	r3, #45	; 0x2d
 c00a0ae:	4276      	negs	r6, r6
 c00a0b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c00a0b4:	485e      	ldr	r0, [pc, #376]	; (c00a230 <_printf_i+0x244>)
 c00a0b6:	230a      	movs	r3, #10
 c00a0b8:	e019      	b.n	c00a0ee <_printf_i+0x102>
 c00a0ba:	680e      	ldr	r6, [r1, #0]
 c00a0bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 c00a0c0:	602b      	str	r3, [r5, #0]
 c00a0c2:	bf18      	it	ne
 c00a0c4:	b236      	sxthne	r6, r6
 c00a0c6:	e7ef      	b.n	c00a0a8 <_printf_i+0xbc>
 c00a0c8:	682b      	ldr	r3, [r5, #0]
 c00a0ca:	6820      	ldr	r0, [r4, #0]
 c00a0cc:	1d19      	adds	r1, r3, #4
 c00a0ce:	6029      	str	r1, [r5, #0]
 c00a0d0:	0601      	lsls	r1, r0, #24
 c00a0d2:	d501      	bpl.n	c00a0d8 <_printf_i+0xec>
 c00a0d4:	681e      	ldr	r6, [r3, #0]
 c00a0d6:	e002      	b.n	c00a0de <_printf_i+0xf2>
 c00a0d8:	0646      	lsls	r6, r0, #25
 c00a0da:	d5fb      	bpl.n	c00a0d4 <_printf_i+0xe8>
 c00a0dc:	881e      	ldrh	r6, [r3, #0]
 c00a0de:	2f6f      	cmp	r7, #111	; 0x6f
 c00a0e0:	4853      	ldr	r0, [pc, #332]	; (c00a230 <_printf_i+0x244>)
 c00a0e2:	bf0c      	ite	eq
 c00a0e4:	2308      	moveq	r3, #8
 c00a0e6:	230a      	movne	r3, #10
 c00a0e8:	2100      	movs	r1, #0
 c00a0ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 c00a0ee:	6865      	ldr	r5, [r4, #4]
 c00a0f0:	2d00      	cmp	r5, #0
 c00a0f2:	60a5      	str	r5, [r4, #8]
 c00a0f4:	bfa2      	ittt	ge
 c00a0f6:	6821      	ldrge	r1, [r4, #0]
 c00a0f8:	f021 0104 	bicge.w	r1, r1, #4
 c00a0fc:	6021      	strge	r1, [r4, #0]
 c00a0fe:	b90e      	cbnz	r6, c00a104 <_printf_i+0x118>
 c00a100:	2d00      	cmp	r5, #0
 c00a102:	d04d      	beq.n	c00a1a0 <_printf_i+0x1b4>
 c00a104:	4615      	mov	r5, r2
 c00a106:	fbb6 f1f3 	udiv	r1, r6, r3
 c00a10a:	fb03 6711 	mls	r7, r3, r1, r6
 c00a10e:	5dc7      	ldrb	r7, [r0, r7]
 c00a110:	f805 7d01 	strb.w	r7, [r5, #-1]!
 c00a114:	4637      	mov	r7, r6
 c00a116:	460e      	mov	r6, r1
 c00a118:	42bb      	cmp	r3, r7
 c00a11a:	d9f4      	bls.n	c00a106 <_printf_i+0x11a>
 c00a11c:	2b08      	cmp	r3, #8
 c00a11e:	d10b      	bne.n	c00a138 <_printf_i+0x14c>
 c00a120:	6823      	ldr	r3, [r4, #0]
 c00a122:	07de      	lsls	r6, r3, #31
 c00a124:	d508      	bpl.n	c00a138 <_printf_i+0x14c>
 c00a126:	6923      	ldr	r3, [r4, #16]
 c00a128:	6861      	ldr	r1, [r4, #4]
 c00a12a:	4299      	cmp	r1, r3
 c00a12c:	bfde      	ittt	le
 c00a12e:	2330      	movle	r3, #48	; 0x30
 c00a130:	f805 3c01 	strble.w	r3, [r5, #-1]
 c00a134:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 c00a138:	1b52      	subs	r2, r2, r5
 c00a13a:	6122      	str	r2, [r4, #16]
 c00a13c:	464b      	mov	r3, r9
 c00a13e:	aa03      	add	r2, sp, #12
 c00a140:	4621      	mov	r1, r4
 c00a142:	4640      	mov	r0, r8
 c00a144:	f8cd a000 	str.w	sl, [sp]
 c00a148:	f7ff fee0 	bl	c009f0c <_printf_common>
 c00a14c:	3001      	adds	r0, #1
 c00a14e:	d14c      	bne.n	c00a1ea <_printf_i+0x1fe>
 c00a150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c00a154:	b004      	add	sp, #16
 c00a156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c00a15a:	4835      	ldr	r0, [pc, #212]	; (c00a230 <_printf_i+0x244>)
 c00a15c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 c00a160:	6829      	ldr	r1, [r5, #0]
 c00a162:	6823      	ldr	r3, [r4, #0]
 c00a164:	f851 6b04 	ldr.w	r6, [r1], #4
 c00a168:	6029      	str	r1, [r5, #0]
 c00a16a:	061d      	lsls	r5, r3, #24
 c00a16c:	d514      	bpl.n	c00a198 <_printf_i+0x1ac>
 c00a16e:	07df      	lsls	r7, r3, #31
 c00a170:	bf44      	itt	mi
 c00a172:	f043 0320 	orrmi.w	r3, r3, #32
 c00a176:	6023      	strmi	r3, [r4, #0]
 c00a178:	b91e      	cbnz	r6, c00a182 <_printf_i+0x196>
 c00a17a:	6823      	ldr	r3, [r4, #0]
 c00a17c:	f023 0320 	bic.w	r3, r3, #32
 c00a180:	6023      	str	r3, [r4, #0]
 c00a182:	2310      	movs	r3, #16
 c00a184:	e7b0      	b.n	c00a0e8 <_printf_i+0xfc>
 c00a186:	6823      	ldr	r3, [r4, #0]
 c00a188:	f043 0320 	orr.w	r3, r3, #32
 c00a18c:	6023      	str	r3, [r4, #0]
 c00a18e:	2378      	movs	r3, #120	; 0x78
 c00a190:	4828      	ldr	r0, [pc, #160]	; (c00a234 <_printf_i+0x248>)
 c00a192:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 c00a196:	e7e3      	b.n	c00a160 <_printf_i+0x174>
 c00a198:	0659      	lsls	r1, r3, #25
 c00a19a:	bf48      	it	mi
 c00a19c:	b2b6      	uxthmi	r6, r6
 c00a19e:	e7e6      	b.n	c00a16e <_printf_i+0x182>
 c00a1a0:	4615      	mov	r5, r2
 c00a1a2:	e7bb      	b.n	c00a11c <_printf_i+0x130>
 c00a1a4:	682b      	ldr	r3, [r5, #0]
 c00a1a6:	6826      	ldr	r6, [r4, #0]
 c00a1a8:	1d18      	adds	r0, r3, #4
 c00a1aa:	6961      	ldr	r1, [r4, #20]
 c00a1ac:	6028      	str	r0, [r5, #0]
 c00a1ae:	0635      	lsls	r5, r6, #24
 c00a1b0:	681b      	ldr	r3, [r3, #0]
 c00a1b2:	d501      	bpl.n	c00a1b8 <_printf_i+0x1cc>
 c00a1b4:	6019      	str	r1, [r3, #0]
 c00a1b6:	e002      	b.n	c00a1be <_printf_i+0x1d2>
 c00a1b8:	0670      	lsls	r0, r6, #25
 c00a1ba:	d5fb      	bpl.n	c00a1b4 <_printf_i+0x1c8>
 c00a1bc:	8019      	strh	r1, [r3, #0]
 c00a1be:	2300      	movs	r3, #0
 c00a1c0:	4615      	mov	r5, r2
 c00a1c2:	6123      	str	r3, [r4, #16]
 c00a1c4:	e7ba      	b.n	c00a13c <_printf_i+0x150>
 c00a1c6:	682b      	ldr	r3, [r5, #0]
 c00a1c8:	2100      	movs	r1, #0
 c00a1ca:	1d1a      	adds	r2, r3, #4
 c00a1cc:	602a      	str	r2, [r5, #0]
 c00a1ce:	681d      	ldr	r5, [r3, #0]
 c00a1d0:	6862      	ldr	r2, [r4, #4]
 c00a1d2:	4628      	mov	r0, r5
 c00a1d4:	f000 faa6 	bl	c00a724 <memchr>
 c00a1d8:	b108      	cbz	r0, c00a1de <_printf_i+0x1f2>
 c00a1da:	1b40      	subs	r0, r0, r5
 c00a1dc:	6060      	str	r0, [r4, #4]
 c00a1de:	6863      	ldr	r3, [r4, #4]
 c00a1e0:	6123      	str	r3, [r4, #16]
 c00a1e2:	2300      	movs	r3, #0
 c00a1e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c00a1e8:	e7a8      	b.n	c00a13c <_printf_i+0x150>
 c00a1ea:	6923      	ldr	r3, [r4, #16]
 c00a1ec:	462a      	mov	r2, r5
 c00a1ee:	4649      	mov	r1, r9
 c00a1f0:	4640      	mov	r0, r8
 c00a1f2:	47d0      	blx	sl
 c00a1f4:	3001      	adds	r0, #1
 c00a1f6:	d0ab      	beq.n	c00a150 <_printf_i+0x164>
 c00a1f8:	6823      	ldr	r3, [r4, #0]
 c00a1fa:	079b      	lsls	r3, r3, #30
 c00a1fc:	d413      	bmi.n	c00a226 <_printf_i+0x23a>
 c00a1fe:	68e0      	ldr	r0, [r4, #12]
 c00a200:	9b03      	ldr	r3, [sp, #12]
 c00a202:	4298      	cmp	r0, r3
 c00a204:	bfb8      	it	lt
 c00a206:	4618      	movlt	r0, r3
 c00a208:	e7a4      	b.n	c00a154 <_printf_i+0x168>
 c00a20a:	2301      	movs	r3, #1
 c00a20c:	4632      	mov	r2, r6
 c00a20e:	4649      	mov	r1, r9
 c00a210:	4640      	mov	r0, r8
 c00a212:	47d0      	blx	sl
 c00a214:	3001      	adds	r0, #1
 c00a216:	d09b      	beq.n	c00a150 <_printf_i+0x164>
 c00a218:	3501      	adds	r5, #1
 c00a21a:	68e3      	ldr	r3, [r4, #12]
 c00a21c:	9903      	ldr	r1, [sp, #12]
 c00a21e:	1a5b      	subs	r3, r3, r1
 c00a220:	42ab      	cmp	r3, r5
 c00a222:	dcf2      	bgt.n	c00a20a <_printf_i+0x21e>
 c00a224:	e7eb      	b.n	c00a1fe <_printf_i+0x212>
 c00a226:	2500      	movs	r5, #0
 c00a228:	f104 0619 	add.w	r6, r4, #25
 c00a22c:	e7f5      	b.n	c00a21a <_printf_i+0x22e>
 c00a22e:	bf00      	nop
 c00a230:	0c00aae9 	.word	0x0c00aae9
 c00a234:	0c00aafa 	.word	0x0c00aafa

0c00a238 <_sbrk_r>:
 c00a238:	b538      	push	{r3, r4, r5, lr}
 c00a23a:	2300      	movs	r3, #0
 c00a23c:	4d05      	ldr	r5, [pc, #20]	; (c00a254 <_sbrk_r+0x1c>)
 c00a23e:	4604      	mov	r4, r0
 c00a240:	4608      	mov	r0, r1
 c00a242:	602b      	str	r3, [r5, #0]
 c00a244:	f7f8 fad8 	bl	c0027f8 <_sbrk>
 c00a248:	1c43      	adds	r3, r0, #1
 c00a24a:	d102      	bne.n	c00a252 <_sbrk_r+0x1a>
 c00a24c:	682b      	ldr	r3, [r5, #0]
 c00a24e:	b103      	cbz	r3, c00a252 <_sbrk_r+0x1a>
 c00a250:	6023      	str	r3, [r4, #0]
 c00a252:	bd38      	pop	{r3, r4, r5, pc}
 c00a254:	30002478 	.word	0x30002478

0c00a258 <__sread>:
 c00a258:	b510      	push	{r4, lr}
 c00a25a:	460c      	mov	r4, r1
 c00a25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c00a260:	f000 fa7a 	bl	c00a758 <_read_r>
 c00a264:	2800      	cmp	r0, #0
 c00a266:	bfab      	itete	ge
 c00a268:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 c00a26a:	89a3      	ldrhlt	r3, [r4, #12]
 c00a26c:	181b      	addge	r3, r3, r0
 c00a26e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 c00a272:	bfac      	ite	ge
 c00a274:	6563      	strge	r3, [r4, #84]	; 0x54
 c00a276:	81a3      	strhlt	r3, [r4, #12]
 c00a278:	bd10      	pop	{r4, pc}

0c00a27a <__swrite>:
 c00a27a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c00a27e:	461f      	mov	r7, r3
 c00a280:	898b      	ldrh	r3, [r1, #12]
 c00a282:	4605      	mov	r5, r0
 c00a284:	460c      	mov	r4, r1
 c00a286:	05db      	lsls	r3, r3, #23
 c00a288:	4616      	mov	r6, r2
 c00a28a:	d505      	bpl.n	c00a298 <__swrite+0x1e>
 c00a28c:	2302      	movs	r3, #2
 c00a28e:	2200      	movs	r2, #0
 c00a290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c00a294:	f000 f9ce 	bl	c00a634 <_lseek_r>
 c00a298:	89a3      	ldrh	r3, [r4, #12]
 c00a29a:	4632      	mov	r2, r6
 c00a29c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c00a2a0:	4628      	mov	r0, r5
 c00a2a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 c00a2a6:	81a3      	strh	r3, [r4, #12]
 c00a2a8:	463b      	mov	r3, r7
 c00a2aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 c00a2ae:	f000 b869 	b.w	c00a384 <_write_r>

0c00a2b2 <__sseek>:
 c00a2b2:	b510      	push	{r4, lr}
 c00a2b4:	460c      	mov	r4, r1
 c00a2b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c00a2ba:	f000 f9bb 	bl	c00a634 <_lseek_r>
 c00a2be:	1c43      	adds	r3, r0, #1
 c00a2c0:	89a3      	ldrh	r3, [r4, #12]
 c00a2c2:	bf15      	itete	ne
 c00a2c4:	6560      	strne	r0, [r4, #84]	; 0x54
 c00a2c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 c00a2ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 c00a2ce:	81a3      	strheq	r3, [r4, #12]
 c00a2d0:	bf18      	it	ne
 c00a2d2:	81a3      	strhne	r3, [r4, #12]
 c00a2d4:	bd10      	pop	{r4, pc}

0c00a2d6 <__sclose>:
 c00a2d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c00a2da:	f000 b8db 	b.w	c00a494 <_close_r>
	...

0c00a2e0 <__swbuf_r>:
 c00a2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00a2e2:	460e      	mov	r6, r1
 c00a2e4:	4614      	mov	r4, r2
 c00a2e6:	4605      	mov	r5, r0
 c00a2e8:	b118      	cbz	r0, c00a2f2 <__swbuf_r+0x12>
 c00a2ea:	6983      	ldr	r3, [r0, #24]
 c00a2ec:	b90b      	cbnz	r3, c00a2f2 <__swbuf_r+0x12>
 c00a2ee:	f7ff fb19 	bl	c009924 <__sinit>
 c00a2f2:	4b21      	ldr	r3, [pc, #132]	; (c00a378 <__swbuf_r+0x98>)
 c00a2f4:	429c      	cmp	r4, r3
 c00a2f6:	d12b      	bne.n	c00a350 <__swbuf_r+0x70>
 c00a2f8:	686c      	ldr	r4, [r5, #4]
 c00a2fa:	69a3      	ldr	r3, [r4, #24]
 c00a2fc:	60a3      	str	r3, [r4, #8]
 c00a2fe:	89a3      	ldrh	r3, [r4, #12]
 c00a300:	071a      	lsls	r2, r3, #28
 c00a302:	d52f      	bpl.n	c00a364 <__swbuf_r+0x84>
 c00a304:	6923      	ldr	r3, [r4, #16]
 c00a306:	b36b      	cbz	r3, c00a364 <__swbuf_r+0x84>
 c00a308:	6923      	ldr	r3, [r4, #16]
 c00a30a:	b2f6      	uxtb	r6, r6
 c00a30c:	6820      	ldr	r0, [r4, #0]
 c00a30e:	4637      	mov	r7, r6
 c00a310:	1ac0      	subs	r0, r0, r3
 c00a312:	6963      	ldr	r3, [r4, #20]
 c00a314:	4283      	cmp	r3, r0
 c00a316:	dc04      	bgt.n	c00a322 <__swbuf_r+0x42>
 c00a318:	4621      	mov	r1, r4
 c00a31a:	4628      	mov	r0, r5
 c00a31c:	f000 f94e 	bl	c00a5bc <_fflush_r>
 c00a320:	bb30      	cbnz	r0, c00a370 <__swbuf_r+0x90>
 c00a322:	68a3      	ldr	r3, [r4, #8]
 c00a324:	3001      	adds	r0, #1
 c00a326:	3b01      	subs	r3, #1
 c00a328:	60a3      	str	r3, [r4, #8]
 c00a32a:	6823      	ldr	r3, [r4, #0]
 c00a32c:	1c5a      	adds	r2, r3, #1
 c00a32e:	6022      	str	r2, [r4, #0]
 c00a330:	701e      	strb	r6, [r3, #0]
 c00a332:	6963      	ldr	r3, [r4, #20]
 c00a334:	4283      	cmp	r3, r0
 c00a336:	d004      	beq.n	c00a342 <__swbuf_r+0x62>
 c00a338:	89a3      	ldrh	r3, [r4, #12]
 c00a33a:	07db      	lsls	r3, r3, #31
 c00a33c:	d506      	bpl.n	c00a34c <__swbuf_r+0x6c>
 c00a33e:	2e0a      	cmp	r6, #10
 c00a340:	d104      	bne.n	c00a34c <__swbuf_r+0x6c>
 c00a342:	4621      	mov	r1, r4
 c00a344:	4628      	mov	r0, r5
 c00a346:	f000 f939 	bl	c00a5bc <_fflush_r>
 c00a34a:	b988      	cbnz	r0, c00a370 <__swbuf_r+0x90>
 c00a34c:	4638      	mov	r0, r7
 c00a34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c00a350:	4b0a      	ldr	r3, [pc, #40]	; (c00a37c <__swbuf_r+0x9c>)
 c00a352:	429c      	cmp	r4, r3
 c00a354:	d101      	bne.n	c00a35a <__swbuf_r+0x7a>
 c00a356:	68ac      	ldr	r4, [r5, #8]
 c00a358:	e7cf      	b.n	c00a2fa <__swbuf_r+0x1a>
 c00a35a:	4b09      	ldr	r3, [pc, #36]	; (c00a380 <__swbuf_r+0xa0>)
 c00a35c:	429c      	cmp	r4, r3
 c00a35e:	bf08      	it	eq
 c00a360:	68ec      	ldreq	r4, [r5, #12]
 c00a362:	e7ca      	b.n	c00a2fa <__swbuf_r+0x1a>
 c00a364:	4621      	mov	r1, r4
 c00a366:	4628      	mov	r0, r5
 c00a368:	f000 f81e 	bl	c00a3a8 <__swsetup_r>
 c00a36c:	2800      	cmp	r0, #0
 c00a36e:	d0cb      	beq.n	c00a308 <__swbuf_r+0x28>
 c00a370:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 c00a374:	e7ea      	b.n	c00a34c <__swbuf_r+0x6c>
 c00a376:	bf00      	nop
 c00a378:	0c00aa98 	.word	0x0c00aa98
 c00a37c:	0c00aab8 	.word	0x0c00aab8
 c00a380:	0c00aa78 	.word	0x0c00aa78

0c00a384 <_write_r>:
 c00a384:	b538      	push	{r3, r4, r5, lr}
 c00a386:	4604      	mov	r4, r0
 c00a388:	4d06      	ldr	r5, [pc, #24]	; (c00a3a4 <_write_r+0x20>)
 c00a38a:	4608      	mov	r0, r1
 c00a38c:	4611      	mov	r1, r2
 c00a38e:	2200      	movs	r2, #0
 c00a390:	602a      	str	r2, [r5, #0]
 c00a392:	461a      	mov	r2, r3
 c00a394:	f7f8 f9df 	bl	c002756 <_write>
 c00a398:	1c43      	adds	r3, r0, #1
 c00a39a:	d102      	bne.n	c00a3a2 <_write_r+0x1e>
 c00a39c:	682b      	ldr	r3, [r5, #0]
 c00a39e:	b103      	cbz	r3, c00a3a2 <_write_r+0x1e>
 c00a3a0:	6023      	str	r3, [r4, #0]
 c00a3a2:	bd38      	pop	{r3, r4, r5, pc}
 c00a3a4:	30002478 	.word	0x30002478

0c00a3a8 <__swsetup_r>:
 c00a3a8:	4b32      	ldr	r3, [pc, #200]	; (c00a474 <__swsetup_r+0xcc>)
 c00a3aa:	b570      	push	{r4, r5, r6, lr}
 c00a3ac:	681d      	ldr	r5, [r3, #0]
 c00a3ae:	4606      	mov	r6, r0
 c00a3b0:	460c      	mov	r4, r1
 c00a3b2:	b125      	cbz	r5, c00a3be <__swsetup_r+0x16>
 c00a3b4:	69ab      	ldr	r3, [r5, #24]
 c00a3b6:	b913      	cbnz	r3, c00a3be <__swsetup_r+0x16>
 c00a3b8:	4628      	mov	r0, r5
 c00a3ba:	f7ff fab3 	bl	c009924 <__sinit>
 c00a3be:	4b2e      	ldr	r3, [pc, #184]	; (c00a478 <__swsetup_r+0xd0>)
 c00a3c0:	429c      	cmp	r4, r3
 c00a3c2:	d10f      	bne.n	c00a3e4 <__swsetup_r+0x3c>
 c00a3c4:	686c      	ldr	r4, [r5, #4]
 c00a3c6:	89a3      	ldrh	r3, [r4, #12]
 c00a3c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c00a3cc:	0719      	lsls	r1, r3, #28
 c00a3ce:	d42c      	bmi.n	c00a42a <__swsetup_r+0x82>
 c00a3d0:	06dd      	lsls	r5, r3, #27
 c00a3d2:	d411      	bmi.n	c00a3f8 <__swsetup_r+0x50>
 c00a3d4:	2309      	movs	r3, #9
 c00a3d6:	6033      	str	r3, [r6, #0]
 c00a3d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 c00a3dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c00a3e0:	81a3      	strh	r3, [r4, #12]
 c00a3e2:	e03e      	b.n	c00a462 <__swsetup_r+0xba>
 c00a3e4:	4b25      	ldr	r3, [pc, #148]	; (c00a47c <__swsetup_r+0xd4>)
 c00a3e6:	429c      	cmp	r4, r3
 c00a3e8:	d101      	bne.n	c00a3ee <__swsetup_r+0x46>
 c00a3ea:	68ac      	ldr	r4, [r5, #8]
 c00a3ec:	e7eb      	b.n	c00a3c6 <__swsetup_r+0x1e>
 c00a3ee:	4b24      	ldr	r3, [pc, #144]	; (c00a480 <__swsetup_r+0xd8>)
 c00a3f0:	429c      	cmp	r4, r3
 c00a3f2:	bf08      	it	eq
 c00a3f4:	68ec      	ldreq	r4, [r5, #12]
 c00a3f6:	e7e6      	b.n	c00a3c6 <__swsetup_r+0x1e>
 c00a3f8:	0758      	lsls	r0, r3, #29
 c00a3fa:	d512      	bpl.n	c00a422 <__swsetup_r+0x7a>
 c00a3fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c00a3fe:	b141      	cbz	r1, c00a412 <__swsetup_r+0x6a>
 c00a400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c00a404:	4299      	cmp	r1, r3
 c00a406:	d002      	beq.n	c00a40e <__swsetup_r+0x66>
 c00a408:	4630      	mov	r0, r6
 c00a40a:	f7ff fb45 	bl	c009a98 <_free_r>
 c00a40e:	2300      	movs	r3, #0
 c00a410:	6363      	str	r3, [r4, #52]	; 0x34
 c00a412:	89a3      	ldrh	r3, [r4, #12]
 c00a414:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 c00a418:	81a3      	strh	r3, [r4, #12]
 c00a41a:	2300      	movs	r3, #0
 c00a41c:	6063      	str	r3, [r4, #4]
 c00a41e:	6923      	ldr	r3, [r4, #16]
 c00a420:	6023      	str	r3, [r4, #0]
 c00a422:	89a3      	ldrh	r3, [r4, #12]
 c00a424:	f043 0308 	orr.w	r3, r3, #8
 c00a428:	81a3      	strh	r3, [r4, #12]
 c00a42a:	6923      	ldr	r3, [r4, #16]
 c00a42c:	b94b      	cbnz	r3, c00a442 <__swsetup_r+0x9a>
 c00a42e:	89a3      	ldrh	r3, [r4, #12]
 c00a430:	f403 7320 	and.w	r3, r3, #640	; 0x280
 c00a434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c00a438:	d003      	beq.n	c00a442 <__swsetup_r+0x9a>
 c00a43a:	4621      	mov	r1, r4
 c00a43c:	4630      	mov	r0, r6
 c00a43e:	f000 f931 	bl	c00a6a4 <__smakebuf_r>
 c00a442:	89a0      	ldrh	r0, [r4, #12]
 c00a444:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c00a448:	f010 0301 	ands.w	r3, r0, #1
 c00a44c:	d00a      	beq.n	c00a464 <__swsetup_r+0xbc>
 c00a44e:	2300      	movs	r3, #0
 c00a450:	60a3      	str	r3, [r4, #8]
 c00a452:	6963      	ldr	r3, [r4, #20]
 c00a454:	425b      	negs	r3, r3
 c00a456:	61a3      	str	r3, [r4, #24]
 c00a458:	6923      	ldr	r3, [r4, #16]
 c00a45a:	b943      	cbnz	r3, c00a46e <__swsetup_r+0xc6>
 c00a45c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 c00a460:	d1ba      	bne.n	c00a3d8 <__swsetup_r+0x30>
 c00a462:	bd70      	pop	{r4, r5, r6, pc}
 c00a464:	0781      	lsls	r1, r0, #30
 c00a466:	bf58      	it	pl
 c00a468:	6963      	ldrpl	r3, [r4, #20]
 c00a46a:	60a3      	str	r3, [r4, #8]
 c00a46c:	e7f4      	b.n	c00a458 <__swsetup_r+0xb0>
 c00a46e:	2000      	movs	r0, #0
 c00a470:	e7f7      	b.n	c00a462 <__swsetup_r+0xba>
 c00a472:	bf00      	nop
 c00a474:	30000090 	.word	0x30000090
 c00a478:	0c00aa98 	.word	0x0c00aa98
 c00a47c:	0c00aab8 	.word	0x0c00aab8
 c00a480:	0c00aa78 	.word	0x0c00aa78

0c00a484 <abort>:
 c00a484:	2006      	movs	r0, #6
 c00a486:	b508      	push	{r3, lr}
 c00a488:	f000 f9a0 	bl	c00a7cc <raise>
 c00a48c:	2001      	movs	r0, #1
 c00a48e:	f7f8 f93b 	bl	c002708 <_exit>
	...

0c00a494 <_close_r>:
 c00a494:	b538      	push	{r3, r4, r5, lr}
 c00a496:	2300      	movs	r3, #0
 c00a498:	4d05      	ldr	r5, [pc, #20]	; (c00a4b0 <_close_r+0x1c>)
 c00a49a:	4604      	mov	r4, r0
 c00a49c:	4608      	mov	r0, r1
 c00a49e:	602b      	str	r3, [r5, #0]
 c00a4a0:	f7f8 f975 	bl	c00278e <_close>
 c00a4a4:	1c43      	adds	r3, r0, #1
 c00a4a6:	d102      	bne.n	c00a4ae <_close_r+0x1a>
 c00a4a8:	682b      	ldr	r3, [r5, #0]
 c00a4aa:	b103      	cbz	r3, c00a4ae <_close_r+0x1a>
 c00a4ac:	6023      	str	r3, [r4, #0]
 c00a4ae:	bd38      	pop	{r3, r4, r5, pc}
 c00a4b0:	30002478 	.word	0x30002478

0c00a4b4 <__sflush_r>:
 c00a4b4:	898a      	ldrh	r2, [r1, #12]
 c00a4b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c00a4ba:	4605      	mov	r5, r0
 c00a4bc:	0710      	lsls	r0, r2, #28
 c00a4be:	460c      	mov	r4, r1
 c00a4c0:	d458      	bmi.n	c00a574 <__sflush_r+0xc0>
 c00a4c2:	684b      	ldr	r3, [r1, #4]
 c00a4c4:	2b00      	cmp	r3, #0
 c00a4c6:	dc05      	bgt.n	c00a4d4 <__sflush_r+0x20>
 c00a4c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 c00a4ca:	2b00      	cmp	r3, #0
 c00a4cc:	dc02      	bgt.n	c00a4d4 <__sflush_r+0x20>
 c00a4ce:	2000      	movs	r0, #0
 c00a4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c00a4d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c00a4d6:	2e00      	cmp	r6, #0
 c00a4d8:	d0f9      	beq.n	c00a4ce <__sflush_r+0x1a>
 c00a4da:	2300      	movs	r3, #0
 c00a4dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 c00a4e0:	682f      	ldr	r7, [r5, #0]
 c00a4e2:	602b      	str	r3, [r5, #0]
 c00a4e4:	d032      	beq.n	c00a54c <__sflush_r+0x98>
 c00a4e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 c00a4e8:	89a3      	ldrh	r3, [r4, #12]
 c00a4ea:	075a      	lsls	r2, r3, #29
 c00a4ec:	d505      	bpl.n	c00a4fa <__sflush_r+0x46>
 c00a4ee:	6863      	ldr	r3, [r4, #4]
 c00a4f0:	1ac0      	subs	r0, r0, r3
 c00a4f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c00a4f4:	b10b      	cbz	r3, c00a4fa <__sflush_r+0x46>
 c00a4f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 c00a4f8:	1ac0      	subs	r0, r0, r3
 c00a4fa:	2300      	movs	r3, #0
 c00a4fc:	4602      	mov	r2, r0
 c00a4fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c00a500:	4628      	mov	r0, r5
 c00a502:	6a21      	ldr	r1, [r4, #32]
 c00a504:	47b0      	blx	r6
 c00a506:	1c43      	adds	r3, r0, #1
 c00a508:	89a3      	ldrh	r3, [r4, #12]
 c00a50a:	d106      	bne.n	c00a51a <__sflush_r+0x66>
 c00a50c:	6829      	ldr	r1, [r5, #0]
 c00a50e:	291d      	cmp	r1, #29
 c00a510:	d82c      	bhi.n	c00a56c <__sflush_r+0xb8>
 c00a512:	4a29      	ldr	r2, [pc, #164]	; (c00a5b8 <__sflush_r+0x104>)
 c00a514:	40ca      	lsrs	r2, r1
 c00a516:	07d6      	lsls	r6, r2, #31
 c00a518:	d528      	bpl.n	c00a56c <__sflush_r+0xb8>
 c00a51a:	2200      	movs	r2, #0
 c00a51c:	04d9      	lsls	r1, r3, #19
 c00a51e:	6062      	str	r2, [r4, #4]
 c00a520:	6922      	ldr	r2, [r4, #16]
 c00a522:	6022      	str	r2, [r4, #0]
 c00a524:	d504      	bpl.n	c00a530 <__sflush_r+0x7c>
 c00a526:	1c42      	adds	r2, r0, #1
 c00a528:	d101      	bne.n	c00a52e <__sflush_r+0x7a>
 c00a52a:	682b      	ldr	r3, [r5, #0]
 c00a52c:	b903      	cbnz	r3, c00a530 <__sflush_r+0x7c>
 c00a52e:	6560      	str	r0, [r4, #84]	; 0x54
 c00a530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c00a532:	602f      	str	r7, [r5, #0]
 c00a534:	2900      	cmp	r1, #0
 c00a536:	d0ca      	beq.n	c00a4ce <__sflush_r+0x1a>
 c00a538:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c00a53c:	4299      	cmp	r1, r3
 c00a53e:	d002      	beq.n	c00a546 <__sflush_r+0x92>
 c00a540:	4628      	mov	r0, r5
 c00a542:	f7ff faa9 	bl	c009a98 <_free_r>
 c00a546:	2000      	movs	r0, #0
 c00a548:	6360      	str	r0, [r4, #52]	; 0x34
 c00a54a:	e7c1      	b.n	c00a4d0 <__sflush_r+0x1c>
 c00a54c:	6a21      	ldr	r1, [r4, #32]
 c00a54e:	2301      	movs	r3, #1
 c00a550:	4628      	mov	r0, r5
 c00a552:	47b0      	blx	r6
 c00a554:	1c41      	adds	r1, r0, #1
 c00a556:	d1c7      	bne.n	c00a4e8 <__sflush_r+0x34>
 c00a558:	682b      	ldr	r3, [r5, #0]
 c00a55a:	2b00      	cmp	r3, #0
 c00a55c:	d0c4      	beq.n	c00a4e8 <__sflush_r+0x34>
 c00a55e:	2b1d      	cmp	r3, #29
 c00a560:	d001      	beq.n	c00a566 <__sflush_r+0xb2>
 c00a562:	2b16      	cmp	r3, #22
 c00a564:	d101      	bne.n	c00a56a <__sflush_r+0xb6>
 c00a566:	602f      	str	r7, [r5, #0]
 c00a568:	e7b1      	b.n	c00a4ce <__sflush_r+0x1a>
 c00a56a:	89a3      	ldrh	r3, [r4, #12]
 c00a56c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c00a570:	81a3      	strh	r3, [r4, #12]
 c00a572:	e7ad      	b.n	c00a4d0 <__sflush_r+0x1c>
 c00a574:	690f      	ldr	r7, [r1, #16]
 c00a576:	2f00      	cmp	r7, #0
 c00a578:	d0a9      	beq.n	c00a4ce <__sflush_r+0x1a>
 c00a57a:	0793      	lsls	r3, r2, #30
 c00a57c:	680e      	ldr	r6, [r1, #0]
 c00a57e:	600f      	str	r7, [r1, #0]
 c00a580:	bf0c      	ite	eq
 c00a582:	694b      	ldreq	r3, [r1, #20]
 c00a584:	2300      	movne	r3, #0
 c00a586:	eba6 0807 	sub.w	r8, r6, r7
 c00a58a:	608b      	str	r3, [r1, #8]
 c00a58c:	f1b8 0f00 	cmp.w	r8, #0
 c00a590:	dd9d      	ble.n	c00a4ce <__sflush_r+0x1a>
 c00a592:	4643      	mov	r3, r8
 c00a594:	463a      	mov	r2, r7
 c00a596:	6a21      	ldr	r1, [r4, #32]
 c00a598:	4628      	mov	r0, r5
 c00a59a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 c00a59c:	47b0      	blx	r6
 c00a59e:	2800      	cmp	r0, #0
 c00a5a0:	dc06      	bgt.n	c00a5b0 <__sflush_r+0xfc>
 c00a5a2:	89a3      	ldrh	r3, [r4, #12]
 c00a5a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c00a5a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c00a5ac:	81a3      	strh	r3, [r4, #12]
 c00a5ae:	e78f      	b.n	c00a4d0 <__sflush_r+0x1c>
 c00a5b0:	4407      	add	r7, r0
 c00a5b2:	eba8 0800 	sub.w	r8, r8, r0
 c00a5b6:	e7e9      	b.n	c00a58c <__sflush_r+0xd8>
 c00a5b8:	20400001 	.word	0x20400001

0c00a5bc <_fflush_r>:
 c00a5bc:	b538      	push	{r3, r4, r5, lr}
 c00a5be:	690b      	ldr	r3, [r1, #16]
 c00a5c0:	4605      	mov	r5, r0
 c00a5c2:	460c      	mov	r4, r1
 c00a5c4:	b913      	cbnz	r3, c00a5cc <_fflush_r+0x10>
 c00a5c6:	2500      	movs	r5, #0
 c00a5c8:	4628      	mov	r0, r5
 c00a5ca:	bd38      	pop	{r3, r4, r5, pc}
 c00a5cc:	b118      	cbz	r0, c00a5d6 <_fflush_r+0x1a>
 c00a5ce:	6983      	ldr	r3, [r0, #24]
 c00a5d0:	b90b      	cbnz	r3, c00a5d6 <_fflush_r+0x1a>
 c00a5d2:	f7ff f9a7 	bl	c009924 <__sinit>
 c00a5d6:	4b14      	ldr	r3, [pc, #80]	; (c00a628 <_fflush_r+0x6c>)
 c00a5d8:	429c      	cmp	r4, r3
 c00a5da:	d11b      	bne.n	c00a614 <_fflush_r+0x58>
 c00a5dc:	686c      	ldr	r4, [r5, #4]
 c00a5de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c00a5e2:	2b00      	cmp	r3, #0
 c00a5e4:	d0ef      	beq.n	c00a5c6 <_fflush_r+0xa>
 c00a5e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 c00a5e8:	07d0      	lsls	r0, r2, #31
 c00a5ea:	d404      	bmi.n	c00a5f6 <_fflush_r+0x3a>
 c00a5ec:	0599      	lsls	r1, r3, #22
 c00a5ee:	d402      	bmi.n	c00a5f6 <_fflush_r+0x3a>
 c00a5f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c00a5f2:	f7ff fa47 	bl	c009a84 <__retarget_lock_acquire_recursive>
 c00a5f6:	4628      	mov	r0, r5
 c00a5f8:	4621      	mov	r1, r4
 c00a5fa:	f7ff ff5b 	bl	c00a4b4 <__sflush_r>
 c00a5fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c00a600:	4605      	mov	r5, r0
 c00a602:	07da      	lsls	r2, r3, #31
 c00a604:	d4e0      	bmi.n	c00a5c8 <_fflush_r+0xc>
 c00a606:	89a3      	ldrh	r3, [r4, #12]
 c00a608:	059b      	lsls	r3, r3, #22
 c00a60a:	d4dd      	bmi.n	c00a5c8 <_fflush_r+0xc>
 c00a60c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c00a60e:	f7ff fa3a 	bl	c009a86 <__retarget_lock_release_recursive>
 c00a612:	e7d9      	b.n	c00a5c8 <_fflush_r+0xc>
 c00a614:	4b05      	ldr	r3, [pc, #20]	; (c00a62c <_fflush_r+0x70>)
 c00a616:	429c      	cmp	r4, r3
 c00a618:	d101      	bne.n	c00a61e <_fflush_r+0x62>
 c00a61a:	68ac      	ldr	r4, [r5, #8]
 c00a61c:	e7df      	b.n	c00a5de <_fflush_r+0x22>
 c00a61e:	4b04      	ldr	r3, [pc, #16]	; (c00a630 <_fflush_r+0x74>)
 c00a620:	429c      	cmp	r4, r3
 c00a622:	bf08      	it	eq
 c00a624:	68ec      	ldreq	r4, [r5, #12]
 c00a626:	e7da      	b.n	c00a5de <_fflush_r+0x22>
 c00a628:	0c00aa98 	.word	0x0c00aa98
 c00a62c:	0c00aab8 	.word	0x0c00aab8
 c00a630:	0c00aa78 	.word	0x0c00aa78

0c00a634 <_lseek_r>:
 c00a634:	b538      	push	{r3, r4, r5, lr}
 c00a636:	4604      	mov	r4, r0
 c00a638:	4d06      	ldr	r5, [pc, #24]	; (c00a654 <_lseek_r+0x20>)
 c00a63a:	4608      	mov	r0, r1
 c00a63c:	4611      	mov	r1, r2
 c00a63e:	2200      	movs	r2, #0
 c00a640:	602a      	str	r2, [r5, #0]
 c00a642:	461a      	mov	r2, r3
 c00a644:	f7f8 f8ca 	bl	c0027dc <_lseek>
 c00a648:	1c43      	adds	r3, r0, #1
 c00a64a:	d102      	bne.n	c00a652 <_lseek_r+0x1e>
 c00a64c:	682b      	ldr	r3, [r5, #0]
 c00a64e:	b103      	cbz	r3, c00a652 <_lseek_r+0x1e>
 c00a650:	6023      	str	r3, [r4, #0]
 c00a652:	bd38      	pop	{r3, r4, r5, pc}
 c00a654:	30002478 	.word	0x30002478

0c00a658 <__swhatbuf_r>:
 c00a658:	b570      	push	{r4, r5, r6, lr}
 c00a65a:	460e      	mov	r6, r1
 c00a65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c00a660:	b096      	sub	sp, #88	; 0x58
 c00a662:	4614      	mov	r4, r2
 c00a664:	2900      	cmp	r1, #0
 c00a666:	461d      	mov	r5, r3
 c00a668:	da08      	bge.n	c00a67c <__swhatbuf_r+0x24>
 c00a66a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 c00a66e:	2200      	movs	r2, #0
 c00a670:	602a      	str	r2, [r5, #0]
 c00a672:	061a      	lsls	r2, r3, #24
 c00a674:	d410      	bmi.n	c00a698 <__swhatbuf_r+0x40>
 c00a676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c00a67a:	e00e      	b.n	c00a69a <__swhatbuf_r+0x42>
 c00a67c:	466a      	mov	r2, sp
 c00a67e:	f000 f8c1 	bl	c00a804 <_fstat_r>
 c00a682:	2800      	cmp	r0, #0
 c00a684:	dbf1      	blt.n	c00a66a <__swhatbuf_r+0x12>
 c00a686:	9a01      	ldr	r2, [sp, #4]
 c00a688:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 c00a68c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 c00a690:	425a      	negs	r2, r3
 c00a692:	415a      	adcs	r2, r3
 c00a694:	602a      	str	r2, [r5, #0]
 c00a696:	e7ee      	b.n	c00a676 <__swhatbuf_r+0x1e>
 c00a698:	2340      	movs	r3, #64	; 0x40
 c00a69a:	2000      	movs	r0, #0
 c00a69c:	6023      	str	r3, [r4, #0]
 c00a69e:	b016      	add	sp, #88	; 0x58
 c00a6a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0c00a6a4 <__smakebuf_r>:
 c00a6a4:	898b      	ldrh	r3, [r1, #12]
 c00a6a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c00a6a8:	079d      	lsls	r5, r3, #30
 c00a6aa:	4606      	mov	r6, r0
 c00a6ac:	460c      	mov	r4, r1
 c00a6ae:	d507      	bpl.n	c00a6c0 <__smakebuf_r+0x1c>
 c00a6b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 c00a6b4:	6023      	str	r3, [r4, #0]
 c00a6b6:	6123      	str	r3, [r4, #16]
 c00a6b8:	2301      	movs	r3, #1
 c00a6ba:	6163      	str	r3, [r4, #20]
 c00a6bc:	b002      	add	sp, #8
 c00a6be:	bd70      	pop	{r4, r5, r6, pc}
 c00a6c0:	ab01      	add	r3, sp, #4
 c00a6c2:	466a      	mov	r2, sp
 c00a6c4:	f7ff ffc8 	bl	c00a658 <__swhatbuf_r>
 c00a6c8:	9900      	ldr	r1, [sp, #0]
 c00a6ca:	4605      	mov	r5, r0
 c00a6cc:	4630      	mov	r0, r6
 c00a6ce:	f7ff fa4f 	bl	c009b70 <_malloc_r>
 c00a6d2:	b948      	cbnz	r0, c00a6e8 <__smakebuf_r+0x44>
 c00a6d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c00a6d8:	059a      	lsls	r2, r3, #22
 c00a6da:	d4ef      	bmi.n	c00a6bc <__smakebuf_r+0x18>
 c00a6dc:	f023 0303 	bic.w	r3, r3, #3
 c00a6e0:	f043 0302 	orr.w	r3, r3, #2
 c00a6e4:	81a3      	strh	r3, [r4, #12]
 c00a6e6:	e7e3      	b.n	c00a6b0 <__smakebuf_r+0xc>
 c00a6e8:	4b0d      	ldr	r3, [pc, #52]	; (c00a720 <__smakebuf_r+0x7c>)
 c00a6ea:	62b3      	str	r3, [r6, #40]	; 0x28
 c00a6ec:	89a3      	ldrh	r3, [r4, #12]
 c00a6ee:	6020      	str	r0, [r4, #0]
 c00a6f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c00a6f4:	6120      	str	r0, [r4, #16]
 c00a6f6:	81a3      	strh	r3, [r4, #12]
 c00a6f8:	9b00      	ldr	r3, [sp, #0]
 c00a6fa:	6163      	str	r3, [r4, #20]
 c00a6fc:	9b01      	ldr	r3, [sp, #4]
 c00a6fe:	b15b      	cbz	r3, c00a718 <__smakebuf_r+0x74>
 c00a700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c00a704:	4630      	mov	r0, r6
 c00a706:	f000 f88f 	bl	c00a828 <_isatty_r>
 c00a70a:	b128      	cbz	r0, c00a718 <__smakebuf_r+0x74>
 c00a70c:	89a3      	ldrh	r3, [r4, #12]
 c00a70e:	f023 0303 	bic.w	r3, r3, #3
 c00a712:	f043 0301 	orr.w	r3, r3, #1
 c00a716:	81a3      	strh	r3, [r4, #12]
 c00a718:	89a0      	ldrh	r0, [r4, #12]
 c00a71a:	4305      	orrs	r5, r0
 c00a71c:	81a5      	strh	r5, [r4, #12]
 c00a71e:	e7cd      	b.n	c00a6bc <__smakebuf_r+0x18>
 c00a720:	0c0098bd 	.word	0x0c0098bd

0c00a724 <memchr>:
 c00a724:	b2c9      	uxtb	r1, r1
 c00a726:	4402      	add	r2, r0
 c00a728:	b510      	push	{r4, lr}
 c00a72a:	4290      	cmp	r0, r2
 c00a72c:	4603      	mov	r3, r0
 c00a72e:	d101      	bne.n	c00a734 <memchr+0x10>
 c00a730:	2300      	movs	r3, #0
 c00a732:	e003      	b.n	c00a73c <memchr+0x18>
 c00a734:	781c      	ldrb	r4, [r3, #0]
 c00a736:	3001      	adds	r0, #1
 c00a738:	428c      	cmp	r4, r1
 c00a73a:	d1f6      	bne.n	c00a72a <memchr+0x6>
 c00a73c:	4618      	mov	r0, r3
 c00a73e:	bd10      	pop	{r4, pc}

0c00a740 <__malloc_lock>:
 c00a740:	4801      	ldr	r0, [pc, #4]	; (c00a748 <__malloc_lock+0x8>)
 c00a742:	f7ff b99f 	b.w	c009a84 <__retarget_lock_acquire_recursive>
 c00a746:	bf00      	nop
 c00a748:	3000246c 	.word	0x3000246c

0c00a74c <__malloc_unlock>:
 c00a74c:	4801      	ldr	r0, [pc, #4]	; (c00a754 <__malloc_unlock+0x8>)
 c00a74e:	f7ff b99a 	b.w	c009a86 <__retarget_lock_release_recursive>
 c00a752:	bf00      	nop
 c00a754:	3000246c 	.word	0x3000246c

0c00a758 <_read_r>:
 c00a758:	b538      	push	{r3, r4, r5, lr}
 c00a75a:	4604      	mov	r4, r0
 c00a75c:	4d06      	ldr	r5, [pc, #24]	; (c00a778 <_read_r+0x20>)
 c00a75e:	4608      	mov	r0, r1
 c00a760:	4611      	mov	r1, r2
 c00a762:	2200      	movs	r2, #0
 c00a764:	602a      	str	r2, [r5, #0]
 c00a766:	461a      	mov	r2, r3
 c00a768:	f7f7 ffd8 	bl	c00271c <_read>
 c00a76c:	1c43      	adds	r3, r0, #1
 c00a76e:	d102      	bne.n	c00a776 <_read_r+0x1e>
 c00a770:	682b      	ldr	r3, [r5, #0]
 c00a772:	b103      	cbz	r3, c00a776 <_read_r+0x1e>
 c00a774:	6023      	str	r3, [r4, #0]
 c00a776:	bd38      	pop	{r3, r4, r5, pc}
 c00a778:	30002478 	.word	0x30002478

0c00a77c <_raise_r>:
 c00a77c:	291f      	cmp	r1, #31
 c00a77e:	b538      	push	{r3, r4, r5, lr}
 c00a780:	4604      	mov	r4, r0
 c00a782:	460d      	mov	r5, r1
 c00a784:	d904      	bls.n	c00a790 <_raise_r+0x14>
 c00a786:	2316      	movs	r3, #22
 c00a788:	6003      	str	r3, [r0, #0]
 c00a78a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c00a78e:	bd38      	pop	{r3, r4, r5, pc}
 c00a790:	6c42      	ldr	r2, [r0, #68]	; 0x44
 c00a792:	b112      	cbz	r2, c00a79a <_raise_r+0x1e>
 c00a794:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 c00a798:	b94b      	cbnz	r3, c00a7ae <_raise_r+0x32>
 c00a79a:	4620      	mov	r0, r4
 c00a79c:	f000 f830 	bl	c00a800 <_getpid_r>
 c00a7a0:	462a      	mov	r2, r5
 c00a7a2:	4601      	mov	r1, r0
 c00a7a4:	4620      	mov	r0, r4
 c00a7a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 c00a7aa:	f000 b817 	b.w	c00a7dc <_kill_r>
 c00a7ae:	2b01      	cmp	r3, #1
 c00a7b0:	d00a      	beq.n	c00a7c8 <_raise_r+0x4c>
 c00a7b2:	1c59      	adds	r1, r3, #1
 c00a7b4:	d103      	bne.n	c00a7be <_raise_r+0x42>
 c00a7b6:	2316      	movs	r3, #22
 c00a7b8:	6003      	str	r3, [r0, #0]
 c00a7ba:	2001      	movs	r0, #1
 c00a7bc:	e7e7      	b.n	c00a78e <_raise_r+0x12>
 c00a7be:	2400      	movs	r4, #0
 c00a7c0:	4628      	mov	r0, r5
 c00a7c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 c00a7c6:	4798      	blx	r3
 c00a7c8:	2000      	movs	r0, #0
 c00a7ca:	e7e0      	b.n	c00a78e <_raise_r+0x12>

0c00a7cc <raise>:
 c00a7cc:	4b02      	ldr	r3, [pc, #8]	; (c00a7d8 <raise+0xc>)
 c00a7ce:	4601      	mov	r1, r0
 c00a7d0:	6818      	ldr	r0, [r3, #0]
 c00a7d2:	f7ff bfd3 	b.w	c00a77c <_raise_r>
 c00a7d6:	bf00      	nop
 c00a7d8:	30000090 	.word	0x30000090

0c00a7dc <_kill_r>:
 c00a7dc:	b538      	push	{r3, r4, r5, lr}
 c00a7de:	2300      	movs	r3, #0
 c00a7e0:	4d06      	ldr	r5, [pc, #24]	; (c00a7fc <_kill_r+0x20>)
 c00a7e2:	4604      	mov	r4, r0
 c00a7e4:	4608      	mov	r0, r1
 c00a7e6:	4611      	mov	r1, r2
 c00a7e8:	602b      	str	r3, [r5, #0]
 c00a7ea:	f7f7 ff7d 	bl	c0026e8 <_kill>
 c00a7ee:	1c43      	adds	r3, r0, #1
 c00a7f0:	d102      	bne.n	c00a7f8 <_kill_r+0x1c>
 c00a7f2:	682b      	ldr	r3, [r5, #0]
 c00a7f4:	b103      	cbz	r3, c00a7f8 <_kill_r+0x1c>
 c00a7f6:	6023      	str	r3, [r4, #0]
 c00a7f8:	bd38      	pop	{r3, r4, r5, pc}
 c00a7fa:	bf00      	nop
 c00a7fc:	30002478 	.word	0x30002478

0c00a800 <_getpid_r>:
 c00a800:	f7f7 bf6a 	b.w	c0026d8 <_getpid>

0c00a804 <_fstat_r>:
 c00a804:	b538      	push	{r3, r4, r5, lr}
 c00a806:	2300      	movs	r3, #0
 c00a808:	4d06      	ldr	r5, [pc, #24]	; (c00a824 <_fstat_r+0x20>)
 c00a80a:	4604      	mov	r4, r0
 c00a80c:	4608      	mov	r0, r1
 c00a80e:	4611      	mov	r1, r2
 c00a810:	602b      	str	r3, [r5, #0]
 c00a812:	f7f7 ffc8 	bl	c0027a6 <_fstat>
 c00a816:	1c43      	adds	r3, r0, #1
 c00a818:	d102      	bne.n	c00a820 <_fstat_r+0x1c>
 c00a81a:	682b      	ldr	r3, [r5, #0]
 c00a81c:	b103      	cbz	r3, c00a820 <_fstat_r+0x1c>
 c00a81e:	6023      	str	r3, [r4, #0]
 c00a820:	bd38      	pop	{r3, r4, r5, pc}
 c00a822:	bf00      	nop
 c00a824:	30002478 	.word	0x30002478

0c00a828 <_isatty_r>:
 c00a828:	b538      	push	{r3, r4, r5, lr}
 c00a82a:	2300      	movs	r3, #0
 c00a82c:	4d05      	ldr	r5, [pc, #20]	; (c00a844 <_isatty_r+0x1c>)
 c00a82e:	4604      	mov	r4, r0
 c00a830:	4608      	mov	r0, r1
 c00a832:	602b      	str	r3, [r5, #0]
 c00a834:	f7f7 ffc7 	bl	c0027c6 <_isatty>
 c00a838:	1c43      	adds	r3, r0, #1
 c00a83a:	d102      	bne.n	c00a842 <_isatty_r+0x1a>
 c00a83c:	682b      	ldr	r3, [r5, #0]
 c00a83e:	b103      	cbz	r3, c00a842 <_isatty_r+0x1a>
 c00a840:	6023      	str	r3, [r4, #0]
 c00a842:	bd38      	pop	{r3, r4, r5, pc}
 c00a844:	30002478 	.word	0x30002478

0c00a848 <_init>:
 c00a848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00a84a:	bf00      	nop
 c00a84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00a84e:	bc08      	pop	{r3}
 c00a850:	469e      	mov	lr, r3
 c00a852:	4770      	bx	lr

0c00a854 <_fini>:
 c00a854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00a856:	bf00      	nop
 c00a858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00a85a:	bc08      	pop	{r3}
 c00a85c:	469e      	mov	lr, r3
 c00a85e:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_SystemCoreClockUpdate>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c4 bd72 	b.w	c002aec <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e008 <SECURE_log_cond_br>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c4 b9e9 	b.w	c0023e2 <__acle_se_SECURE_log_cond_br>

0c03e010 <SECURE_RunCallback>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c4 b89a 	b.w	c00214c <__acle_se_SECURE_RunCallback>

0c03e018 <SECURE_log_call>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c4 b998 	b.w	c002350 <__acle_se_SECURE_log_call>

0c03e020 <SECURE_record_output_data>:
 c03e020:	e97f e97f 	sg
 c03e024:	f7c4 ba66 	b.w	c0024f4 <__acle_se_SECURE_record_output_data>

0c03e028 <SECURE_Initialize_CFA_engine>:
 c03e028:	e97f e97f 	sg
 c03e02c:	f7c4 b8cc 	b.w	c0021c8 <__acle_se_SECURE_Initialize_CFA_engine>

0c03e030 <SECURE_Initialize_Attestation>:
 c03e030:	e97f e97f 	sg
 c03e034:	f7c4 b904 	b.w	c002240 <__acle_se_SECURE_Initialize_Attestation>

0c03e038 <SECURE_log_ret>:
 c03e038:	e97f e97f 	sg
 c03e03c:	f7c4 b93c 	b.w	c0022b8 <__acle_se_SECURE_log_ret>

0c03e040 <SECURE_RegisterCallback>:
 c03e040:	e97f e97f 	sg
 c03e044:	f7c4 b81e 	b.w	c002084 <__acle_se_SECURE_RegisterCallback>

0c03e048 <SECURE_run_attestation_wait_mode>:
 c03e048:	e97f e97f 	sg
 c03e04c:	f7c4 ba16 	b.w	c00247c <__acle_se_SECURE_run_attestation_wait_mode>
	...
