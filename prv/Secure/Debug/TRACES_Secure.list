
TRACES_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bc8  0c0001f4  0c0001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0c007dbc  0c007dbc  00017dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c007e6c  0c007e6c  0002e060  2**0
                  CONTENTS
  4 .ARM          00000008  0c007e6c  0c007e6c  00017e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0c007e74  0c007e74  0002e060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c007e74  0c007e74  00017e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c007e78  0c007e78  00017e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  30000000  0c007e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .cfa_data     00000468  30000034  0c007eb0  00020034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .gnu.sgstubs  00000060  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .bss          0000039c  3000049c  3000049c  0003049c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  30000838  30000838  0003049c  2**0
                  ALLOC
 13 .ARM.attributes 00000036  00000000  00000000  0002e060  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017e24  00000000  00000000  0002e096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000038c2  00000000  00000000  00045eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015b8  00000000  00000000  00049780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001440  00000000  00000000  0004ad38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006879  00000000  00000000  0004c178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019e0a  00000000  00000000  000529f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011149d  00000000  00000000  0006c7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0017dc98  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000059bc  00000000  00000000  0017dce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f4 <__do_global_dtors_aux>:
 c0001f4:	b510      	push	{r4, lr}
 c0001f6:	4c05      	ldr	r4, [pc, #20]	; (c00020c <__do_global_dtors_aux+0x18>)
 c0001f8:	7823      	ldrb	r3, [r4, #0]
 c0001fa:	b933      	cbnz	r3, c00020a <__do_global_dtors_aux+0x16>
 c0001fc:	4b04      	ldr	r3, [pc, #16]	; (c000210 <__do_global_dtors_aux+0x1c>)
 c0001fe:	b113      	cbz	r3, c000206 <__do_global_dtors_aux+0x12>
 c000200:	4804      	ldr	r0, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x20>)
 c000202:	e000      	b.n	c000206 <__do_global_dtors_aux+0x12>
 c000204:	bf00      	nop
 c000206:	2301      	movs	r3, #1
 c000208:	7023      	strb	r3, [r4, #0]
 c00020a:	bd10      	pop	{r4, pc}
 c00020c:	3000049c 	.word	0x3000049c
 c000210:	00000000 	.word	0x00000000
 c000214:	0c007da4 	.word	0x0c007da4

0c000218 <frame_dummy>:
 c000218:	b508      	push	{r3, lr}
 c00021a:	4b03      	ldr	r3, [pc, #12]	; (c000228 <frame_dummy+0x10>)
 c00021c:	b11b      	cbz	r3, c000226 <frame_dummy+0xe>
 c00021e:	4903      	ldr	r1, [pc, #12]	; (c00022c <frame_dummy+0x14>)
 c000220:	4803      	ldr	r0, [pc, #12]	; (c000230 <frame_dummy+0x18>)
 c000222:	e000      	b.n	c000226 <frame_dummy+0xe>
 c000224:	bf00      	nop
 c000226:	bd08      	pop	{r3, pc}
 c000228:	00000000 	.word	0x00000000
 c00022c:	300004a0 	.word	0x300004a0
 c000230:	0c007da4 	.word	0x0c007da4

0c000234 <strcmp>:
 c000234:	f810 2b01 	ldrb.w	r2, [r0], #1
 c000238:	f811 3b01 	ldrb.w	r3, [r1], #1
 c00023c:	2a01      	cmp	r2, #1
 c00023e:	bf28      	it	cs
 c000240:	429a      	cmpcs	r2, r3
 c000242:	d0f7      	beq.n	c000234 <strcmp>
 c000244:	1ad0      	subs	r0, r2, r3
 c000246:	4770      	bx	lr

0c000248 <__gnu_cmse_nonsecure_call>:
 c000248:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c00024c:	4627      	mov	r7, r4
 c00024e:	46a0      	mov	r8, r4
 c000250:	46a1      	mov	r9, r4
 c000252:	46a2      	mov	sl, r4
 c000254:	46a3      	mov	fp, r4
 c000256:	46a4      	mov	ip, r4
 c000258:	ed2d 8b10 	vpush	{d8-d15}
 c00025c:	f04f 0500 	mov.w	r5, #0
 c000260:	ec45 5b18 	vmov	d8, r5, r5
 c000264:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000268:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c00026c:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c000270:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000274:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000278:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c00027c:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c000280:	eef1 5a10 	vmrs	r5, fpscr
 c000284:	f64f 7660 	movw	r6, #65376	; 0xff60
 c000288:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c00028c:	4035      	ands	r5, r6
 c00028e:	eee1 5a10 	vmsr	fpscr, r5
 c000292:	f384 8800 	msr	CPSR_f, r4
 c000296:	4625      	mov	r5, r4
 c000298:	4626      	mov	r6, r4
 c00029a:	47a4      	blxns	r4
 c00029c:	ecbd 8b10 	vpop	{d8-d15}
 c0002a0:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c0002a4 <__aeabi_uldivmod>:
 c0002a4:	b953      	cbnz	r3, c0002bc <__aeabi_uldivmod+0x18>
 c0002a6:	b94a      	cbnz	r2, c0002bc <__aeabi_uldivmod+0x18>
 c0002a8:	2900      	cmp	r1, #0
 c0002aa:	bf08      	it	eq
 c0002ac:	2800      	cmpeq	r0, #0
 c0002ae:	bf1c      	itt	ne
 c0002b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 c0002b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 c0002b8:	f000 b982 	b.w	c0005c0 <__aeabi_idiv0>
 c0002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 c0002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c0002c4:	f000 f806 	bl	c0002d4 <__udivmoddi4>
 c0002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 c0002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c0002d0:	b004      	add	sp, #16
 c0002d2:	4770      	bx	lr

0c0002d4 <__udivmoddi4>:
 c0002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0002d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 c0002da:	4604      	mov	r4, r0
 c0002dc:	460f      	mov	r7, r1
 c0002de:	2b00      	cmp	r3, #0
 c0002e0:	d148      	bne.n	c000374 <__udivmoddi4+0xa0>
 c0002e2:	428a      	cmp	r2, r1
 c0002e4:	4694      	mov	ip, r2
 c0002e6:	d961      	bls.n	c0003ac <__udivmoddi4+0xd8>
 c0002e8:	fab2 f382 	clz	r3, r2
 c0002ec:	b143      	cbz	r3, c000300 <__udivmoddi4+0x2c>
 c0002ee:	f1c3 0120 	rsb	r1, r3, #32
 c0002f2:	409f      	lsls	r7, r3
 c0002f4:	fa02 fc03 	lsl.w	ip, r2, r3
 c0002f8:	409c      	lsls	r4, r3
 c0002fa:	fa20 f101 	lsr.w	r1, r0, r1
 c0002fe:	430f      	orrs	r7, r1
 c000300:	ea4f 411c 	mov.w	r1, ip, lsr #16
 c000304:	fa1f fe8c 	uxth.w	lr, ip
 c000308:	0c22      	lsrs	r2, r4, #16
 c00030a:	fbb7 f6f1 	udiv	r6, r7, r1
 c00030e:	fb01 7716 	mls	r7, r1, r6, r7
 c000312:	fb06 f00e 	mul.w	r0, r6, lr
 c000316:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 c00031a:	4290      	cmp	r0, r2
 c00031c:	d908      	bls.n	c000330 <__udivmoddi4+0x5c>
 c00031e:	eb1c 0202 	adds.w	r2, ip, r2
 c000322:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 c000326:	d202      	bcs.n	c00032e <__udivmoddi4+0x5a>
 c000328:	4290      	cmp	r0, r2
 c00032a:	f200 8137 	bhi.w	c00059c <__udivmoddi4+0x2c8>
 c00032e:	463e      	mov	r6, r7
 c000330:	1a12      	subs	r2, r2, r0
 c000332:	b2a4      	uxth	r4, r4
 c000334:	fbb2 f0f1 	udiv	r0, r2, r1
 c000338:	fb01 2210 	mls	r2, r1, r0, r2
 c00033c:	fb00 fe0e 	mul.w	lr, r0, lr
 c000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 c000344:	45a6      	cmp	lr, r4
 c000346:	d908      	bls.n	c00035a <__udivmoddi4+0x86>
 c000348:	eb1c 0404 	adds.w	r4, ip, r4
 c00034c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 c000350:	d202      	bcs.n	c000358 <__udivmoddi4+0x84>
 c000352:	45a6      	cmp	lr, r4
 c000354:	f200 811c 	bhi.w	c000590 <__udivmoddi4+0x2bc>
 c000358:	4610      	mov	r0, r2
 c00035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 c00035e:	eba4 040e 	sub.w	r4, r4, lr
 c000362:	2600      	movs	r6, #0
 c000364:	b11d      	cbz	r5, c00036e <__udivmoddi4+0x9a>
 c000366:	40dc      	lsrs	r4, r3
 c000368:	2300      	movs	r3, #0
 c00036a:	e9c5 4300 	strd	r4, r3, [r5]
 c00036e:	4631      	mov	r1, r6
 c000370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000374:	428b      	cmp	r3, r1
 c000376:	d909      	bls.n	c00038c <__udivmoddi4+0xb8>
 c000378:	2d00      	cmp	r5, #0
 c00037a:	f000 80fd 	beq.w	c000578 <__udivmoddi4+0x2a4>
 c00037e:	2600      	movs	r6, #0
 c000380:	e9c5 0100 	strd	r0, r1, [r5]
 c000384:	4630      	mov	r0, r6
 c000386:	4631      	mov	r1, r6
 c000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c00038c:	fab3 f683 	clz	r6, r3
 c000390:	2e00      	cmp	r6, #0
 c000392:	d14b      	bne.n	c00042c <__udivmoddi4+0x158>
 c000394:	428b      	cmp	r3, r1
 c000396:	f0c0 80f2 	bcc.w	c00057e <__udivmoddi4+0x2aa>
 c00039a:	4282      	cmp	r2, r0
 c00039c:	f240 80ef 	bls.w	c00057e <__udivmoddi4+0x2aa>
 c0003a0:	4630      	mov	r0, r6
 c0003a2:	2d00      	cmp	r5, #0
 c0003a4:	d0e3      	beq.n	c00036e <__udivmoddi4+0x9a>
 c0003a6:	e9c5 4700 	strd	r4, r7, [r5]
 c0003aa:	e7e0      	b.n	c00036e <__udivmoddi4+0x9a>
 c0003ac:	b902      	cbnz	r2, c0003b0 <__udivmoddi4+0xdc>
 c0003ae:	deff      	udf	#255	; 0xff
 c0003b0:	fab2 f382 	clz	r3, r2
 c0003b4:	2b00      	cmp	r3, #0
 c0003b6:	f040 809d 	bne.w	c0004f4 <__udivmoddi4+0x220>
 c0003ba:	1a89      	subs	r1, r1, r2
 c0003bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 c0003c0:	b297      	uxth	r7, r2
 c0003c2:	2601      	movs	r6, #1
 c0003c4:	0c20      	lsrs	r0, r4, #16
 c0003c6:	fbb1 f2fe 	udiv	r2, r1, lr
 c0003ca:	fb0e 1112 	mls	r1, lr, r2, r1
 c0003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c0003d2:	fb07 f002 	mul.w	r0, r7, r2
 c0003d6:	4288      	cmp	r0, r1
 c0003d8:	d90f      	bls.n	c0003fa <__udivmoddi4+0x126>
 c0003da:	eb1c 0101 	adds.w	r1, ip, r1
 c0003de:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 c0003e2:	bf2c      	ite	cs
 c0003e4:	f04f 0901 	movcs.w	r9, #1
 c0003e8:	f04f 0900 	movcc.w	r9, #0
 c0003ec:	4288      	cmp	r0, r1
 c0003ee:	d903      	bls.n	c0003f8 <__udivmoddi4+0x124>
 c0003f0:	f1b9 0f00 	cmp.w	r9, #0
 c0003f4:	f000 80cf 	beq.w	c000596 <__udivmoddi4+0x2c2>
 c0003f8:	4642      	mov	r2, r8
 c0003fa:	1a09      	subs	r1, r1, r0
 c0003fc:	b2a4      	uxth	r4, r4
 c0003fe:	fbb1 f0fe 	udiv	r0, r1, lr
 c000402:	fb0e 1110 	mls	r1, lr, r0, r1
 c000406:	fb00 f707 	mul.w	r7, r0, r7
 c00040a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 c00040e:	42a7      	cmp	r7, r4
 c000410:	d908      	bls.n	c000424 <__udivmoddi4+0x150>
 c000412:	eb1c 0404 	adds.w	r4, ip, r4
 c000416:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 c00041a:	d202      	bcs.n	c000422 <__udivmoddi4+0x14e>
 c00041c:	42a7      	cmp	r7, r4
 c00041e:	f200 80b4 	bhi.w	c00058a <__udivmoddi4+0x2b6>
 c000422:	4608      	mov	r0, r1
 c000424:	1be4      	subs	r4, r4, r7
 c000426:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 c00042a:	e79b      	b.n	c000364 <__udivmoddi4+0x90>
 c00042c:	f1c6 0720 	rsb	r7, r6, #32
 c000430:	40b3      	lsls	r3, r6
 c000432:	fa01 f406 	lsl.w	r4, r1, r6
 c000436:	fa22 fc07 	lsr.w	ip, r2, r7
 c00043a:	40f9      	lsrs	r1, r7
 c00043c:	40b2      	lsls	r2, r6
 c00043e:	ea4c 0c03 	orr.w	ip, ip, r3
 c000442:	fa20 f307 	lsr.w	r3, r0, r7
 c000446:	ea4f 491c 	mov.w	r9, ip, lsr #16
 c00044a:	431c      	orrs	r4, r3
 c00044c:	fa1f fe8c 	uxth.w	lr, ip
 c000450:	fa00 f306 	lsl.w	r3, r0, r6
 c000454:	0c20      	lsrs	r0, r4, #16
 c000456:	fbb1 f8f9 	udiv	r8, r1, r9
 c00045a:	fb09 1118 	mls	r1, r9, r8, r1
 c00045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c000462:	fb08 f00e 	mul.w	r0, r8, lr
 c000466:	4288      	cmp	r0, r1
 c000468:	d90f      	bls.n	c00048a <__udivmoddi4+0x1b6>
 c00046a:	eb1c 0101 	adds.w	r1, ip, r1
 c00046e:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 c000472:	bf2c      	ite	cs
 c000474:	f04f 0b01 	movcs.w	fp, #1
 c000478:	f04f 0b00 	movcc.w	fp, #0
 c00047c:	4288      	cmp	r0, r1
 c00047e:	d903      	bls.n	c000488 <__udivmoddi4+0x1b4>
 c000480:	f1bb 0f00 	cmp.w	fp, #0
 c000484:	f000 808d 	beq.w	c0005a2 <__udivmoddi4+0x2ce>
 c000488:	46d0      	mov	r8, sl
 c00048a:	1a09      	subs	r1, r1, r0
 c00048c:	b2a4      	uxth	r4, r4
 c00048e:	fbb1 f0f9 	udiv	r0, r1, r9
 c000492:	fb09 1110 	mls	r1, r9, r0, r1
 c000496:	fb00 fe0e 	mul.w	lr, r0, lr
 c00049a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 c00049e:	458e      	cmp	lr, r1
 c0004a0:	d907      	bls.n	c0004b2 <__udivmoddi4+0x1de>
 c0004a2:	eb1c 0101 	adds.w	r1, ip, r1
 c0004a6:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 c0004aa:	d201      	bcs.n	c0004b0 <__udivmoddi4+0x1dc>
 c0004ac:	458e      	cmp	lr, r1
 c0004ae:	d87f      	bhi.n	c0005b0 <__udivmoddi4+0x2dc>
 c0004b0:	4620      	mov	r0, r4
 c0004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 c0004b6:	eba1 010e 	sub.w	r1, r1, lr
 c0004ba:	fba0 9802 	umull	r9, r8, r0, r2
 c0004be:	4541      	cmp	r1, r8
 c0004c0:	464c      	mov	r4, r9
 c0004c2:	46c6      	mov	lr, r8
 c0004c4:	d302      	bcc.n	c0004cc <__udivmoddi4+0x1f8>
 c0004c6:	d106      	bne.n	c0004d6 <__udivmoddi4+0x202>
 c0004c8:	454b      	cmp	r3, r9
 c0004ca:	d204      	bcs.n	c0004d6 <__udivmoddi4+0x202>
 c0004cc:	3801      	subs	r0, #1
 c0004ce:	ebb9 0402 	subs.w	r4, r9, r2
 c0004d2:	eb68 0e0c 	sbc.w	lr, r8, ip
 c0004d6:	2d00      	cmp	r5, #0
 c0004d8:	d070      	beq.n	c0005bc <__udivmoddi4+0x2e8>
 c0004da:	1b1a      	subs	r2, r3, r4
 c0004dc:	eb61 010e 	sbc.w	r1, r1, lr
 c0004e0:	fa22 f306 	lsr.w	r3, r2, r6
 c0004e4:	fa01 f707 	lsl.w	r7, r1, r7
 c0004e8:	40f1      	lsrs	r1, r6
 c0004ea:	2600      	movs	r6, #0
 c0004ec:	431f      	orrs	r7, r3
 c0004ee:	e9c5 7100 	strd	r7, r1, [r5]
 c0004f2:	e73c      	b.n	c00036e <__udivmoddi4+0x9a>
 c0004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 c0004f8:	f1c3 0020 	rsb	r0, r3, #32
 c0004fc:	fa01 f203 	lsl.w	r2, r1, r3
 c000500:	fa21 f600 	lsr.w	r6, r1, r0
 c000504:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 c000508:	fa24 f100 	lsr.w	r1, r4, r0
 c00050c:	fa1f f78c 	uxth.w	r7, ip
 c000510:	409c      	lsls	r4, r3
 c000512:	4311      	orrs	r1, r2
 c000514:	fbb6 f0fe 	udiv	r0, r6, lr
 c000518:	0c0a      	lsrs	r2, r1, #16
 c00051a:	fb0e 6610 	mls	r6, lr, r0, r6
 c00051e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 c000522:	fb00 f607 	mul.w	r6, r0, r7
 c000526:	4296      	cmp	r6, r2
 c000528:	d90e      	bls.n	c000548 <__udivmoddi4+0x274>
 c00052a:	eb1c 0202 	adds.w	r2, ip, r2
 c00052e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 c000532:	bf2c      	ite	cs
 c000534:	f04f 0901 	movcs.w	r9, #1
 c000538:	f04f 0900 	movcc.w	r9, #0
 c00053c:	4296      	cmp	r6, r2
 c00053e:	d902      	bls.n	c000546 <__udivmoddi4+0x272>
 c000540:	f1b9 0f00 	cmp.w	r9, #0
 c000544:	d031      	beq.n	c0005aa <__udivmoddi4+0x2d6>
 c000546:	4640      	mov	r0, r8
 c000548:	1b92      	subs	r2, r2, r6
 c00054a:	b289      	uxth	r1, r1
 c00054c:	fbb2 f6fe 	udiv	r6, r2, lr
 c000550:	fb0e 2216 	mls	r2, lr, r6, r2
 c000554:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 c000558:	fb06 f207 	mul.w	r2, r6, r7
 c00055c:	428a      	cmp	r2, r1
 c00055e:	d907      	bls.n	c000570 <__udivmoddi4+0x29c>
 c000560:	eb1c 0101 	adds.w	r1, ip, r1
 c000564:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 c000568:	d201      	bcs.n	c00056e <__udivmoddi4+0x29a>
 c00056a:	428a      	cmp	r2, r1
 c00056c:	d823      	bhi.n	c0005b6 <__udivmoddi4+0x2e2>
 c00056e:	4646      	mov	r6, r8
 c000570:	1a89      	subs	r1, r1, r2
 c000572:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 c000576:	e725      	b.n	c0003c4 <__udivmoddi4+0xf0>
 c000578:	462e      	mov	r6, r5
 c00057a:	4628      	mov	r0, r5
 c00057c:	e6f7      	b.n	c00036e <__udivmoddi4+0x9a>
 c00057e:	1a84      	subs	r4, r0, r2
 c000580:	eb61 0303 	sbc.w	r3, r1, r3
 c000584:	2001      	movs	r0, #1
 c000586:	461f      	mov	r7, r3
 c000588:	e70b      	b.n	c0003a2 <__udivmoddi4+0xce>
 c00058a:	4464      	add	r4, ip
 c00058c:	3802      	subs	r0, #2
 c00058e:	e749      	b.n	c000424 <__udivmoddi4+0x150>
 c000590:	4464      	add	r4, ip
 c000592:	3802      	subs	r0, #2
 c000594:	e6e1      	b.n	c00035a <__udivmoddi4+0x86>
 c000596:	3a02      	subs	r2, #2
 c000598:	4461      	add	r1, ip
 c00059a:	e72e      	b.n	c0003fa <__udivmoddi4+0x126>
 c00059c:	3e02      	subs	r6, #2
 c00059e:	4462      	add	r2, ip
 c0005a0:	e6c6      	b.n	c000330 <__udivmoddi4+0x5c>
 c0005a2:	f1a8 0802 	sub.w	r8, r8, #2
 c0005a6:	4461      	add	r1, ip
 c0005a8:	e76f      	b.n	c00048a <__udivmoddi4+0x1b6>
 c0005aa:	3802      	subs	r0, #2
 c0005ac:	4462      	add	r2, ip
 c0005ae:	e7cb      	b.n	c000548 <__udivmoddi4+0x274>
 c0005b0:	3802      	subs	r0, #2
 c0005b2:	4461      	add	r1, ip
 c0005b4:	e77d      	b.n	c0004b2 <__udivmoddi4+0x1de>
 c0005b6:	3e02      	subs	r6, #2
 c0005b8:	4461      	add	r1, ip
 c0005ba:	e7d9      	b.n	c000570 <__udivmoddi4+0x29c>
 c0005bc:	462e      	mov	r6, r5
 c0005be:	e6d6      	b.n	c00036e <__udivmoddi4+0x9a>

0c0005c0 <__aeabi_idiv0>:
 c0005c0:	4770      	bx	lr
 c0005c2:	bf00      	nop

0c0005c4 <load32>:
  uint16_t x;
  memcpy(&x, b, 2);
  return x;
}

inline static uint32_t load32(uint8_t *b) {
 c0005c4:	b480      	push	{r7}
 c0005c6:	b085      	sub	sp, #20
 c0005c8:	af00      	add	r7, sp, #0
 c0005ca:	6078      	str	r0, [r7, #4]
 c0005cc:	687b      	ldr	r3, [r7, #4]
 c0005ce:	681b      	ldr	r3, [r3, #0]
  uint32_t x;
  memcpy(&x, b, 4);
 c0005d0:	60fb      	str	r3, [r7, #12]
  return x;
 c0005d2:	68fb      	ldr	r3, [r7, #12]
}
 c0005d4:	4618      	mov	r0, r3
 c0005d6:	3714      	adds	r7, #20
 c0005d8:	46bd      	mov	sp, r7
 c0005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0005de:	4770      	bx	lr

0c0005e0 <store32>:
  return x;
}

inline static void store16(uint8_t *b, uint16_t i) { memcpy(b, &i, 2); }

inline static void store32(uint8_t *b, uint32_t i) { memcpy(b, &i, 4); }
 c0005e0:	b480      	push	{r7}
 c0005e2:	b083      	sub	sp, #12
 c0005e4:	af00      	add	r7, sp, #0
 c0005e6:	6078      	str	r0, [r7, #4]
 c0005e8:	6039      	str	r1, [r7, #0]
 c0005ea:	683a      	ldr	r2, [r7, #0]
 c0005ec:	687b      	ldr	r3, [r7, #4]
 c0005ee:	601a      	str	r2, [r3, #0]
 c0005f0:	bf00      	nop
 c0005f2:	370c      	adds	r7, #12
 c0005f4:	46bd      	mov	sp, r7
 c0005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0005fa:	4770      	bx	lr

0c0005fc <store64>:

inline static void store64(uint8_t *b, uint64_t i) { memcpy(b, &i, 8); }
 c0005fc:	b580      	push	{r7, lr}
 c0005fe:	b084      	sub	sp, #16
 c000600:	af00      	add	r7, sp, #0
 c000602:	60f8      	str	r0, [r7, #12]
 c000604:	e9c7 2300 	strd	r2, r3, [r7]
 c000608:	463b      	mov	r3, r7
 c00060a:	2208      	movs	r2, #8
 c00060c:	4619      	mov	r1, r3
 c00060e:	68f8      	ldr	r0, [r7, #12]
 c000610:	f007 fbb2 	bl	c007d78 <memcpy>
 c000614:	bf00      	nop
 c000616:	3710      	adds	r7, #16
 c000618:	46bd      	mov	sp, r7
 c00061a:	bd80      	pop	{r7, pc}

0c00061c <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes>:

#include "Hacl_HMAC_SHA2_256.h"

static void
Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes(uint32_t *output, uint8_t *input, uint32_t len)
{
 c00061c:	b580      	push	{r7, lr}
 c00061e:	b088      	sub	sp, #32
 c000620:	af00      	add	r7, sp, #0
 c000622:	60f8      	str	r0, [r7, #12]
 c000624:	60b9      	str	r1, [r7, #8]
 c000626:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c000628:	2300      	movs	r3, #0
 c00062a:	61fb      	str	r3, [r7, #28]
 c00062c:	e021      	b.n	c000672 <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes+0x56>
  {
    uint8_t *x0 = input + (uint32_t)4U * i;
 c00062e:	69fb      	ldr	r3, [r7, #28]
 c000630:	009b      	lsls	r3, r3, #2
 c000632:	68ba      	ldr	r2, [r7, #8]
 c000634:	4413      	add	r3, r2
 c000636:	61bb      	str	r3, [r7, #24]
    uint32_t inputi = load32_be(x0);
 c000638:	69b8      	ldr	r0, [r7, #24]
 c00063a:	f7ff ffc3 	bl	c0005c4 <load32>
 c00063e:	6178      	str	r0, [r7, #20]
 c000640:	697b      	ldr	r3, [r7, #20]
 c000642:	0e1a      	lsrs	r2, r3, #24
 c000644:	697b      	ldr	r3, [r7, #20]
 c000646:	0a1b      	lsrs	r3, r3, #8
 c000648:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c00064c:	431a      	orrs	r2, r3
 c00064e:	697b      	ldr	r3, [r7, #20]
 c000650:	021b      	lsls	r3, r3, #8
 c000652:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c000656:	431a      	orrs	r2, r3
 c000658:	697b      	ldr	r3, [r7, #20]
 c00065a:	061b      	lsls	r3, r3, #24
 c00065c:	4313      	orrs	r3, r2
 c00065e:	613b      	str	r3, [r7, #16]
    output[i] = inputi;
 c000660:	69fb      	ldr	r3, [r7, #28]
 c000662:	009b      	lsls	r3, r3, #2
 c000664:	68fa      	ldr	r2, [r7, #12]
 c000666:	4413      	add	r3, r2
 c000668:	693a      	ldr	r2, [r7, #16]
 c00066a:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c00066c:	69fb      	ldr	r3, [r7, #28]
 c00066e:	3301      	adds	r3, #1
 c000670:	61fb      	str	r3, [r7, #28]
 c000672:	69fa      	ldr	r2, [r7, #28]
 c000674:	687b      	ldr	r3, [r7, #4]
 c000676:	429a      	cmp	r2, r3
 c000678:	d3d9      	bcc.n	c00062e <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes+0x12>
  }
}
 c00067a:	bf00      	nop
 c00067c:	bf00      	nop
 c00067e:	3720      	adds	r7, #32
 c000680:	46bd      	mov	sp, r7
 c000682:	bd80      	pop	{r7, pc}

0c000684 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes>:

static void
Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes(uint8_t *output, uint32_t *input, uint32_t len)
{
 c000684:	b580      	push	{r7, lr}
 c000686:	b088      	sub	sp, #32
 c000688:	af00      	add	r7, sp, #0
 c00068a:	60f8      	str	r0, [r7, #12]
 c00068c:	60b9      	str	r1, [r7, #8]
 c00068e:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c000690:	2300      	movs	r3, #0
 c000692:	61fb      	str	r3, [r7, #28]
 c000694:	e022      	b.n	c0006dc <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes+0x58>
  {
    uint32_t hd1 = input[i];
 c000696:	69fb      	ldr	r3, [r7, #28]
 c000698:	009b      	lsls	r3, r3, #2
 c00069a:	68ba      	ldr	r2, [r7, #8]
 c00069c:	4413      	add	r3, r2
 c00069e:	681b      	ldr	r3, [r3, #0]
 c0006a0:	61bb      	str	r3, [r7, #24]
    uint8_t *x0 = output + (uint32_t)4U * i;
 c0006a2:	69fb      	ldr	r3, [r7, #28]
 c0006a4:	009b      	lsls	r3, r3, #2
 c0006a6:	68fa      	ldr	r2, [r7, #12]
 c0006a8:	4413      	add	r3, r2
 c0006aa:	617b      	str	r3, [r7, #20]
    store32_be(x0, hd1);
 c0006ac:	69bb      	ldr	r3, [r7, #24]
 c0006ae:	613b      	str	r3, [r7, #16]
 c0006b0:	693b      	ldr	r3, [r7, #16]
 c0006b2:	0e1a      	lsrs	r2, r3, #24
 c0006b4:	693b      	ldr	r3, [r7, #16]
 c0006b6:	0a1b      	lsrs	r3, r3, #8
 c0006b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c0006bc:	431a      	orrs	r2, r3
 c0006be:	693b      	ldr	r3, [r7, #16]
 c0006c0:	021b      	lsls	r3, r3, #8
 c0006c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c0006c6:	431a      	orrs	r2, r3
 c0006c8:	693b      	ldr	r3, [r7, #16]
 c0006ca:	061b      	lsls	r3, r3, #24
 c0006cc:	4313      	orrs	r3, r2
 c0006ce:	4619      	mov	r1, r3
 c0006d0:	6978      	ldr	r0, [r7, #20]
 c0006d2:	f7ff ff85 	bl	c0005e0 <store32>
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c0006d6:	69fb      	ldr	r3, [r7, #28]
 c0006d8:	3301      	adds	r3, #1
 c0006da:	61fb      	str	r3, [r7, #28]
 c0006dc:	69fa      	ldr	r2, [r7, #28]
 c0006de:	687b      	ldr	r3, [r7, #4]
 c0006e0:	429a      	cmp	r2, r3
 c0006e2:	d3d8      	bcc.n	c000696 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes+0x12>
  }
}
 c0006e4:	bf00      	nop
 c0006e6:	bf00      	nop
 c0006e8:	3720      	adds	r7, #32
 c0006ea:	46bd      	mov	sp, r7
 c0006ec:	bd80      	pop	{r7, pc}
	...

0c0006f0 <Hacl_Impl_SHA2_256_init>:

static void Hacl_Impl_SHA2_256_init(uint32_t *state)
{
 c0006f0:	b480      	push	{r7}
 c0006f2:	b0a3      	sub	sp, #140	; 0x8c
 c0006f4:	af00      	add	r7, sp, #0
 c0006f6:	6078      	str	r0, [r7, #4]
  uint32_t *k1 = state;
 c0006f8:	687b      	ldr	r3, [r7, #4]
 c0006fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t *h_01 = state + (uint32_t)128U;
 c0006fe:	687b      	ldr	r3, [r7, #4]
 c000700:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c000704:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t *p10 = k1;
 c000708:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c00070c:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t *p20 = k1 + (uint32_t)16U;
 c00070e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000712:	3340      	adds	r3, #64	; 0x40
 c000714:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t *p3 = k1 + (uint32_t)32U;
 c000716:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c00071a:	3380      	adds	r3, #128	; 0x80
 c00071c:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t *p4 = k1 + (uint32_t)48U;
 c00071e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000722:	33c0      	adds	r3, #192	; 0xc0
 c000724:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t *p11 = p10;
 c000726:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 c000728:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t *p21 = p10 + (uint32_t)8U;
 c00072a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 c00072c:	3320      	adds	r3, #32
 c00072e:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t *p12 = p11;
 c000730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c000732:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t *p22 = p11 + (uint32_t)4U;
 c000734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c000736:	3310      	adds	r3, #16
 c000738:	663b      	str	r3, [r7, #96]	; 0x60
  p12[0U] = (uint32_t)0x428a2f98U;
 c00073a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c00073c:	4a8d      	ldr	r2, [pc, #564]	; (c000974 <Hacl_Impl_SHA2_256_init+0x284>)
 c00073e:	601a      	str	r2, [r3, #0]
  p12[1U] = (uint32_t)0x71374491U;
 c000740:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c000742:	3304      	adds	r3, #4
 c000744:	4a8c      	ldr	r2, [pc, #560]	; (c000978 <Hacl_Impl_SHA2_256_init+0x288>)
 c000746:	601a      	str	r2, [r3, #0]
  p12[2U] = (uint32_t)0xb5c0fbcfU;
 c000748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c00074a:	3308      	adds	r3, #8
 c00074c:	4a8b      	ldr	r2, [pc, #556]	; (c00097c <Hacl_Impl_SHA2_256_init+0x28c>)
 c00074e:	601a      	str	r2, [r3, #0]
  p12[3U] = (uint32_t)0xe9b5dba5U;
 c000750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c000752:	330c      	adds	r3, #12
 c000754:	4a8a      	ldr	r2, [pc, #552]	; (c000980 <Hacl_Impl_SHA2_256_init+0x290>)
 c000756:	601a      	str	r2, [r3, #0]
  p22[0U] = (uint32_t)0x3956c25bU;
 c000758:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c00075a:	4a8a      	ldr	r2, [pc, #552]	; (c000984 <Hacl_Impl_SHA2_256_init+0x294>)
 c00075c:	601a      	str	r2, [r3, #0]
  p22[1U] = (uint32_t)0x59f111f1U;
 c00075e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c000760:	3304      	adds	r3, #4
 c000762:	4a89      	ldr	r2, [pc, #548]	; (c000988 <Hacl_Impl_SHA2_256_init+0x298>)
 c000764:	601a      	str	r2, [r3, #0]
  p22[2U] = (uint32_t)0x923f82a4U;
 c000766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c000768:	3308      	adds	r3, #8
 c00076a:	4a88      	ldr	r2, [pc, #544]	; (c00098c <Hacl_Impl_SHA2_256_init+0x29c>)
 c00076c:	601a      	str	r2, [r3, #0]
  p22[3U] = (uint32_t)0xab1c5ed5U;
 c00076e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c000770:	330c      	adds	r3, #12
 c000772:	4a87      	ldr	r2, [pc, #540]	; (c000990 <Hacl_Impl_SHA2_256_init+0x2a0>)
 c000774:	601a      	str	r2, [r3, #0]
  uint32_t *p13 = p21;
 c000776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c000778:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t *p23 = p21 + (uint32_t)4U;
 c00077a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c00077c:	3310      	adds	r3, #16
 c00077e:	65bb      	str	r3, [r7, #88]	; 0x58
  p13[0U] = (uint32_t)0xd807aa98U;
 c000780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c000782:	4a84      	ldr	r2, [pc, #528]	; (c000994 <Hacl_Impl_SHA2_256_init+0x2a4>)
 c000784:	601a      	str	r2, [r3, #0]
  p13[1U] = (uint32_t)0x12835b01U;
 c000786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c000788:	3304      	adds	r3, #4
 c00078a:	4a83      	ldr	r2, [pc, #524]	; (c000998 <Hacl_Impl_SHA2_256_init+0x2a8>)
 c00078c:	601a      	str	r2, [r3, #0]
  p13[2U] = (uint32_t)0x243185beU;
 c00078e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c000790:	3308      	adds	r3, #8
 c000792:	4a82      	ldr	r2, [pc, #520]	; (c00099c <Hacl_Impl_SHA2_256_init+0x2ac>)
 c000794:	601a      	str	r2, [r3, #0]
  p13[3U] = (uint32_t)0x550c7dc3U;
 c000796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c000798:	330c      	adds	r3, #12
 c00079a:	4a81      	ldr	r2, [pc, #516]	; (c0009a0 <Hacl_Impl_SHA2_256_init+0x2b0>)
 c00079c:	601a      	str	r2, [r3, #0]
  p23[0U] = (uint32_t)0x72be5d74U;
 c00079e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0007a0:	4a80      	ldr	r2, [pc, #512]	; (c0009a4 <Hacl_Impl_SHA2_256_init+0x2b4>)
 c0007a2:	601a      	str	r2, [r3, #0]
  p23[1U] = (uint32_t)0x80deb1feU;
 c0007a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0007a6:	3304      	adds	r3, #4
 c0007a8:	4a7f      	ldr	r2, [pc, #508]	; (c0009a8 <Hacl_Impl_SHA2_256_init+0x2b8>)
 c0007aa:	601a      	str	r2, [r3, #0]
  p23[2U] = (uint32_t)0x9bdc06a7U;
 c0007ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0007ae:	3308      	adds	r3, #8
 c0007b0:	4a7e      	ldr	r2, [pc, #504]	; (c0009ac <Hacl_Impl_SHA2_256_init+0x2bc>)
 c0007b2:	601a      	str	r2, [r3, #0]
  p23[3U] = (uint32_t)0xc19bf174U;
 c0007b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0007b6:	330c      	adds	r3, #12
 c0007b8:	4a7d      	ldr	r2, [pc, #500]	; (c0009b0 <Hacl_Impl_SHA2_256_init+0x2c0>)
 c0007ba:	601a      	str	r2, [r3, #0]
  uint32_t *p14 = p20;
 c0007bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c0007be:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t *p24 = p20 + (uint32_t)8U;
 c0007c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c0007c2:	3320      	adds	r3, #32
 c0007c4:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t *p15 = p14;
 c0007c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c0007c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t *p25 = p14 + (uint32_t)4U;
 c0007ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c0007cc:	3310      	adds	r3, #16
 c0007ce:	64bb      	str	r3, [r7, #72]	; 0x48
  p15[0U] = (uint32_t)0xe49b69c1U;
 c0007d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0007d2:	4a78      	ldr	r2, [pc, #480]	; (c0009b4 <Hacl_Impl_SHA2_256_init+0x2c4>)
 c0007d4:	601a      	str	r2, [r3, #0]
  p15[1U] = (uint32_t)0xefbe4786U;
 c0007d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0007d8:	3304      	adds	r3, #4
 c0007da:	4a77      	ldr	r2, [pc, #476]	; (c0009b8 <Hacl_Impl_SHA2_256_init+0x2c8>)
 c0007dc:	601a      	str	r2, [r3, #0]
  p15[2U] = (uint32_t)0x0fc19dc6U;
 c0007de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0007e0:	3308      	adds	r3, #8
 c0007e2:	4a76      	ldr	r2, [pc, #472]	; (c0009bc <Hacl_Impl_SHA2_256_init+0x2cc>)
 c0007e4:	601a      	str	r2, [r3, #0]
  p15[3U] = (uint32_t)0x240ca1ccU;
 c0007e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0007e8:	330c      	adds	r3, #12
 c0007ea:	4a75      	ldr	r2, [pc, #468]	; (c0009c0 <Hacl_Impl_SHA2_256_init+0x2d0>)
 c0007ec:	601a      	str	r2, [r3, #0]
  p25[0U] = (uint32_t)0x2de92c6fU;
 c0007ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c0007f0:	4a74      	ldr	r2, [pc, #464]	; (c0009c4 <Hacl_Impl_SHA2_256_init+0x2d4>)
 c0007f2:	601a      	str	r2, [r3, #0]
  p25[1U] = (uint32_t)0x4a7484aaU;
 c0007f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c0007f6:	3304      	adds	r3, #4
 c0007f8:	4a73      	ldr	r2, [pc, #460]	; (c0009c8 <Hacl_Impl_SHA2_256_init+0x2d8>)
 c0007fa:	601a      	str	r2, [r3, #0]
  p25[2U] = (uint32_t)0x5cb0a9dcU;
 c0007fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c0007fe:	3308      	adds	r3, #8
 c000800:	4a72      	ldr	r2, [pc, #456]	; (c0009cc <Hacl_Impl_SHA2_256_init+0x2dc>)
 c000802:	601a      	str	r2, [r3, #0]
  p25[3U] = (uint32_t)0x76f988daU;
 c000804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c000806:	330c      	adds	r3, #12
 c000808:	4a71      	ldr	r2, [pc, #452]	; (c0009d0 <Hacl_Impl_SHA2_256_init+0x2e0>)
 c00080a:	601a      	str	r2, [r3, #0]
  uint32_t *p16 = p24;
 c00080c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00080e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t *p26 = p24 + (uint32_t)4U;
 c000810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c000812:	3310      	adds	r3, #16
 c000814:	643b      	str	r3, [r7, #64]	; 0x40
  p16[0U] = (uint32_t)0x983e5152U;
 c000816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c000818:	4a6e      	ldr	r2, [pc, #440]	; (c0009d4 <Hacl_Impl_SHA2_256_init+0x2e4>)
 c00081a:	601a      	str	r2, [r3, #0]
  p16[1U] = (uint32_t)0xa831c66dU;
 c00081c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00081e:	3304      	adds	r3, #4
 c000820:	4a6d      	ldr	r2, [pc, #436]	; (c0009d8 <Hacl_Impl_SHA2_256_init+0x2e8>)
 c000822:	601a      	str	r2, [r3, #0]
  p16[2U] = (uint32_t)0xb00327c8U;
 c000824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c000826:	3308      	adds	r3, #8
 c000828:	4a6c      	ldr	r2, [pc, #432]	; (c0009dc <Hacl_Impl_SHA2_256_init+0x2ec>)
 c00082a:	601a      	str	r2, [r3, #0]
  p16[3U] = (uint32_t)0xbf597fc7U;
 c00082c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00082e:	330c      	adds	r3, #12
 c000830:	4a6b      	ldr	r2, [pc, #428]	; (c0009e0 <Hacl_Impl_SHA2_256_init+0x2f0>)
 c000832:	601a      	str	r2, [r3, #0]
  p26[0U] = (uint32_t)0xc6e00bf3U;
 c000834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c000836:	4a6b      	ldr	r2, [pc, #428]	; (c0009e4 <Hacl_Impl_SHA2_256_init+0x2f4>)
 c000838:	601a      	str	r2, [r3, #0]
  p26[1U] = (uint32_t)0xd5a79147U;
 c00083a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c00083c:	3304      	adds	r3, #4
 c00083e:	4a6a      	ldr	r2, [pc, #424]	; (c0009e8 <Hacl_Impl_SHA2_256_init+0x2f8>)
 c000840:	601a      	str	r2, [r3, #0]
  p26[2U] = (uint32_t)0x06ca6351U;
 c000842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c000844:	3308      	adds	r3, #8
 c000846:	4a69      	ldr	r2, [pc, #420]	; (c0009ec <Hacl_Impl_SHA2_256_init+0x2fc>)
 c000848:	601a      	str	r2, [r3, #0]
  p26[3U] = (uint32_t)0x14292967U;
 c00084a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c00084c:	330c      	adds	r3, #12
 c00084e:	4a68      	ldr	r2, [pc, #416]	; (c0009f0 <Hacl_Impl_SHA2_256_init+0x300>)
 c000850:	601a      	str	r2, [r3, #0]
  uint32_t *p17 = p3;
 c000852:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c000854:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t *p27 = p3 + (uint32_t)8U;
 c000856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c000858:	3320      	adds	r3, #32
 c00085a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t *p18 = p17;
 c00085c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c00085e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t *p28 = p17 + (uint32_t)4U;
 c000860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c000862:	3310      	adds	r3, #16
 c000864:	633b      	str	r3, [r7, #48]	; 0x30
  p18[0U] = (uint32_t)0x27b70a85U;
 c000866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c000868:	4a62      	ldr	r2, [pc, #392]	; (c0009f4 <Hacl_Impl_SHA2_256_init+0x304>)
 c00086a:	601a      	str	r2, [r3, #0]
  p18[1U] = (uint32_t)0x2e1b2138U;
 c00086c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00086e:	3304      	adds	r3, #4
 c000870:	4a61      	ldr	r2, [pc, #388]	; (c0009f8 <Hacl_Impl_SHA2_256_init+0x308>)
 c000872:	601a      	str	r2, [r3, #0]
  p18[2U] = (uint32_t)0x4d2c6dfcU;
 c000874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c000876:	3308      	adds	r3, #8
 c000878:	4a60      	ldr	r2, [pc, #384]	; (c0009fc <Hacl_Impl_SHA2_256_init+0x30c>)
 c00087a:	601a      	str	r2, [r3, #0]
  p18[3U] = (uint32_t)0x53380d13U;
 c00087c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00087e:	330c      	adds	r3, #12
 c000880:	4a5f      	ldr	r2, [pc, #380]	; (c000a00 <Hacl_Impl_SHA2_256_init+0x310>)
 c000882:	601a      	str	r2, [r3, #0]
  p28[0U] = (uint32_t)0x650a7354U;
 c000884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c000886:	4a5f      	ldr	r2, [pc, #380]	; (c000a04 <Hacl_Impl_SHA2_256_init+0x314>)
 c000888:	601a      	str	r2, [r3, #0]
  p28[1U] = (uint32_t)0x766a0abbU;
 c00088a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00088c:	3304      	adds	r3, #4
 c00088e:	4a5e      	ldr	r2, [pc, #376]	; (c000a08 <Hacl_Impl_SHA2_256_init+0x318>)
 c000890:	601a      	str	r2, [r3, #0]
  p28[2U] = (uint32_t)0x81c2c92eU;
 c000892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c000894:	3308      	adds	r3, #8
 c000896:	4a5d      	ldr	r2, [pc, #372]	; (c000a0c <Hacl_Impl_SHA2_256_init+0x31c>)
 c000898:	601a      	str	r2, [r3, #0]
  p28[3U] = (uint32_t)0x92722c85U;
 c00089a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00089c:	330c      	adds	r3, #12
 c00089e:	4a5c      	ldr	r2, [pc, #368]	; (c000a10 <Hacl_Impl_SHA2_256_init+0x320>)
 c0008a0:	601a      	str	r2, [r3, #0]
  uint32_t *p19 = p27;
 c0008a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t *p29 = p27 + (uint32_t)4U;
 c0008a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0008a8:	3310      	adds	r3, #16
 c0008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  p19[0U] = (uint32_t)0xa2bfe8a1U;
 c0008ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0008ae:	4a59      	ldr	r2, [pc, #356]	; (c000a14 <Hacl_Impl_SHA2_256_init+0x324>)
 c0008b0:	601a      	str	r2, [r3, #0]
  p19[1U] = (uint32_t)0xa81a664bU;
 c0008b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0008b4:	3304      	adds	r3, #4
 c0008b6:	4a58      	ldr	r2, [pc, #352]	; (c000a18 <Hacl_Impl_SHA2_256_init+0x328>)
 c0008b8:	601a      	str	r2, [r3, #0]
  p19[2U] = (uint32_t)0xc24b8b70U;
 c0008ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0008bc:	3308      	adds	r3, #8
 c0008be:	4a57      	ldr	r2, [pc, #348]	; (c000a1c <Hacl_Impl_SHA2_256_init+0x32c>)
 c0008c0:	601a      	str	r2, [r3, #0]
  p19[3U] = (uint32_t)0xc76c51a3U;
 c0008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0008c4:	330c      	adds	r3, #12
 c0008c6:	4a56      	ldr	r2, [pc, #344]	; (c000a20 <Hacl_Impl_SHA2_256_init+0x330>)
 c0008c8:	601a      	str	r2, [r3, #0]
  p29[0U] = (uint32_t)0xd192e819U;
 c0008ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0008cc:	4a55      	ldr	r2, [pc, #340]	; (c000a24 <Hacl_Impl_SHA2_256_init+0x334>)
 c0008ce:	601a      	str	r2, [r3, #0]
  p29[1U] = (uint32_t)0xd6990624U;
 c0008d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0008d2:	3304      	adds	r3, #4
 c0008d4:	4a54      	ldr	r2, [pc, #336]	; (c000a28 <Hacl_Impl_SHA2_256_init+0x338>)
 c0008d6:	601a      	str	r2, [r3, #0]
  p29[2U] = (uint32_t)0xf40e3585U;
 c0008d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0008da:	3308      	adds	r3, #8
 c0008dc:	4a53      	ldr	r2, [pc, #332]	; (c000a2c <Hacl_Impl_SHA2_256_init+0x33c>)
 c0008de:	601a      	str	r2, [r3, #0]
  p29[3U] = (uint32_t)0x106aa070U;
 c0008e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0008e2:	330c      	adds	r3, #12
 c0008e4:	4a52      	ldr	r2, [pc, #328]	; (c000a30 <Hacl_Impl_SHA2_256_init+0x340>)
 c0008e6:	601a      	str	r2, [r3, #0]
  uint32_t *p110 = p4;
 c0008e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c0008ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t *p210 = p4 + (uint32_t)8U;
 c0008ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c0008ee:	3320      	adds	r3, #32
 c0008f0:	623b      	str	r3, [r7, #32]
  uint32_t *p1 = p110;
 c0008f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0008f4:	61fb      	str	r3, [r7, #28]
  uint32_t *p211 = p110 + (uint32_t)4U;
 c0008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0008f8:	3310      	adds	r3, #16
 c0008fa:	61bb      	str	r3, [r7, #24]
  p1[0U] = (uint32_t)0x19a4c116U;
 c0008fc:	69fb      	ldr	r3, [r7, #28]
 c0008fe:	4a4d      	ldr	r2, [pc, #308]	; (c000a34 <Hacl_Impl_SHA2_256_init+0x344>)
 c000900:	601a      	str	r2, [r3, #0]
  p1[1U] = (uint32_t)0x1e376c08U;
 c000902:	69fb      	ldr	r3, [r7, #28]
 c000904:	3304      	adds	r3, #4
 c000906:	4a4c      	ldr	r2, [pc, #304]	; (c000a38 <Hacl_Impl_SHA2_256_init+0x348>)
 c000908:	601a      	str	r2, [r3, #0]
  p1[2U] = (uint32_t)0x2748774cU;
 c00090a:	69fb      	ldr	r3, [r7, #28]
 c00090c:	3308      	adds	r3, #8
 c00090e:	4a4b      	ldr	r2, [pc, #300]	; (c000a3c <Hacl_Impl_SHA2_256_init+0x34c>)
 c000910:	601a      	str	r2, [r3, #0]
  p1[3U] = (uint32_t)0x34b0bcb5U;
 c000912:	69fb      	ldr	r3, [r7, #28]
 c000914:	330c      	adds	r3, #12
 c000916:	4a4a      	ldr	r2, [pc, #296]	; (c000a40 <Hacl_Impl_SHA2_256_init+0x350>)
 c000918:	601a      	str	r2, [r3, #0]
  p211[0U] = (uint32_t)0x391c0cb3U;
 c00091a:	69bb      	ldr	r3, [r7, #24]
 c00091c:	4a49      	ldr	r2, [pc, #292]	; (c000a44 <Hacl_Impl_SHA2_256_init+0x354>)
 c00091e:	601a      	str	r2, [r3, #0]
  p211[1U] = (uint32_t)0x4ed8aa4aU;
 c000920:	69bb      	ldr	r3, [r7, #24]
 c000922:	3304      	adds	r3, #4
 c000924:	4a48      	ldr	r2, [pc, #288]	; (c000a48 <Hacl_Impl_SHA2_256_init+0x358>)
 c000926:	601a      	str	r2, [r3, #0]
  p211[2U] = (uint32_t)0x5b9cca4fU;
 c000928:	69bb      	ldr	r3, [r7, #24]
 c00092a:	3308      	adds	r3, #8
 c00092c:	4a47      	ldr	r2, [pc, #284]	; (c000a4c <Hacl_Impl_SHA2_256_init+0x35c>)
 c00092e:	601a      	str	r2, [r3, #0]
  p211[3U] = (uint32_t)0x682e6ff3U;
 c000930:	69bb      	ldr	r3, [r7, #24]
 c000932:	330c      	adds	r3, #12
 c000934:	4a46      	ldr	r2, [pc, #280]	; (c000a50 <Hacl_Impl_SHA2_256_init+0x360>)
 c000936:	601a      	str	r2, [r3, #0]
  uint32_t *p111 = p210;
 c000938:	6a3b      	ldr	r3, [r7, #32]
 c00093a:	617b      	str	r3, [r7, #20]
  uint32_t *p212 = p210 + (uint32_t)4U;
 c00093c:	6a3b      	ldr	r3, [r7, #32]
 c00093e:	3310      	adds	r3, #16
 c000940:	613b      	str	r3, [r7, #16]
  p111[0U] = (uint32_t)0x748f82eeU;
 c000942:	697b      	ldr	r3, [r7, #20]
 c000944:	4a43      	ldr	r2, [pc, #268]	; (c000a54 <Hacl_Impl_SHA2_256_init+0x364>)
 c000946:	601a      	str	r2, [r3, #0]
  p111[1U] = (uint32_t)0x78a5636fU;
 c000948:	697b      	ldr	r3, [r7, #20]
 c00094a:	3304      	adds	r3, #4
 c00094c:	4a42      	ldr	r2, [pc, #264]	; (c000a58 <Hacl_Impl_SHA2_256_init+0x368>)
 c00094e:	601a      	str	r2, [r3, #0]
  p111[2U] = (uint32_t)0x84c87814U;
 c000950:	697b      	ldr	r3, [r7, #20]
 c000952:	3308      	adds	r3, #8
 c000954:	4a41      	ldr	r2, [pc, #260]	; (c000a5c <Hacl_Impl_SHA2_256_init+0x36c>)
 c000956:	601a      	str	r2, [r3, #0]
  p111[3U] = (uint32_t)0x8cc70208U;
 c000958:	697b      	ldr	r3, [r7, #20]
 c00095a:	330c      	adds	r3, #12
 c00095c:	4a40      	ldr	r2, [pc, #256]	; (c000a60 <Hacl_Impl_SHA2_256_init+0x370>)
 c00095e:	601a      	str	r2, [r3, #0]
  p212[0U] = (uint32_t)0x90befffaU;
 c000960:	693b      	ldr	r3, [r7, #16]
 c000962:	4a40      	ldr	r2, [pc, #256]	; (c000a64 <Hacl_Impl_SHA2_256_init+0x374>)
 c000964:	601a      	str	r2, [r3, #0]
  p212[1U] = (uint32_t)0xa4506cebU;
 c000966:	693b      	ldr	r3, [r7, #16]
 c000968:	3304      	adds	r3, #4
 c00096a:	4a3f      	ldr	r2, [pc, #252]	; (c000a68 <Hacl_Impl_SHA2_256_init+0x378>)
 c00096c:	601a      	str	r2, [r3, #0]
  p212[2U] = (uint32_t)0xbef9a3f7U;
 c00096e:	693b      	ldr	r3, [r7, #16]
 c000970:	e07c      	b.n	c000a6c <Hacl_Impl_SHA2_256_init+0x37c>
 c000972:	bf00      	nop
 c000974:	428a2f98 	.word	0x428a2f98
 c000978:	71374491 	.word	0x71374491
 c00097c:	b5c0fbcf 	.word	0xb5c0fbcf
 c000980:	e9b5dba5 	.word	0xe9b5dba5
 c000984:	3956c25b 	.word	0x3956c25b
 c000988:	59f111f1 	.word	0x59f111f1
 c00098c:	923f82a4 	.word	0x923f82a4
 c000990:	ab1c5ed5 	.word	0xab1c5ed5
 c000994:	d807aa98 	.word	0xd807aa98
 c000998:	12835b01 	.word	0x12835b01
 c00099c:	243185be 	.word	0x243185be
 c0009a0:	550c7dc3 	.word	0x550c7dc3
 c0009a4:	72be5d74 	.word	0x72be5d74
 c0009a8:	80deb1fe 	.word	0x80deb1fe
 c0009ac:	9bdc06a7 	.word	0x9bdc06a7
 c0009b0:	c19bf174 	.word	0xc19bf174
 c0009b4:	e49b69c1 	.word	0xe49b69c1
 c0009b8:	efbe4786 	.word	0xefbe4786
 c0009bc:	0fc19dc6 	.word	0x0fc19dc6
 c0009c0:	240ca1cc 	.word	0x240ca1cc
 c0009c4:	2de92c6f 	.word	0x2de92c6f
 c0009c8:	4a7484aa 	.word	0x4a7484aa
 c0009cc:	5cb0a9dc 	.word	0x5cb0a9dc
 c0009d0:	76f988da 	.word	0x76f988da
 c0009d4:	983e5152 	.word	0x983e5152
 c0009d8:	a831c66d 	.word	0xa831c66d
 c0009dc:	b00327c8 	.word	0xb00327c8
 c0009e0:	bf597fc7 	.word	0xbf597fc7
 c0009e4:	c6e00bf3 	.word	0xc6e00bf3
 c0009e8:	d5a79147 	.word	0xd5a79147
 c0009ec:	06ca6351 	.word	0x06ca6351
 c0009f0:	14292967 	.word	0x14292967
 c0009f4:	27b70a85 	.word	0x27b70a85
 c0009f8:	2e1b2138 	.word	0x2e1b2138
 c0009fc:	4d2c6dfc 	.word	0x4d2c6dfc
 c000a00:	53380d13 	.word	0x53380d13
 c000a04:	650a7354 	.word	0x650a7354
 c000a08:	766a0abb 	.word	0x766a0abb
 c000a0c:	81c2c92e 	.word	0x81c2c92e
 c000a10:	92722c85 	.word	0x92722c85
 c000a14:	a2bfe8a1 	.word	0xa2bfe8a1
 c000a18:	a81a664b 	.word	0xa81a664b
 c000a1c:	c24b8b70 	.word	0xc24b8b70
 c000a20:	c76c51a3 	.word	0xc76c51a3
 c000a24:	d192e819 	.word	0xd192e819
 c000a28:	d6990624 	.word	0xd6990624
 c000a2c:	f40e3585 	.word	0xf40e3585
 c000a30:	106aa070 	.word	0x106aa070
 c000a34:	19a4c116 	.word	0x19a4c116
 c000a38:	1e376c08 	.word	0x1e376c08
 c000a3c:	2748774c 	.word	0x2748774c
 c000a40:	34b0bcb5 	.word	0x34b0bcb5
 c000a44:	391c0cb3 	.word	0x391c0cb3
 c000a48:	4ed8aa4a 	.word	0x4ed8aa4a
 c000a4c:	5b9cca4f 	.word	0x5b9cca4f
 c000a50:	682e6ff3 	.word	0x682e6ff3
 c000a54:	748f82ee 	.word	0x748f82ee
 c000a58:	78a5636f 	.word	0x78a5636f
 c000a5c:	84c87814 	.word	0x84c87814
 c000a60:	8cc70208 	.word	0x8cc70208
 c000a64:	90befffa 	.word	0x90befffa
 c000a68:	a4506ceb 	.word	0xa4506ceb
 c000a6c:	3308      	adds	r3, #8
 c000a6e:	4a18      	ldr	r2, [pc, #96]	; (c000ad0 <Hacl_Impl_SHA2_256_init+0x3e0>)
 c000a70:	601a      	str	r2, [r3, #0]
  p212[3U] = (uint32_t)0xc67178f2U;
 c000a72:	693b      	ldr	r3, [r7, #16]
 c000a74:	330c      	adds	r3, #12
 c000a76:	4a17      	ldr	r2, [pc, #92]	; (c000ad4 <Hacl_Impl_SHA2_256_init+0x3e4>)
 c000a78:	601a      	str	r2, [r3, #0]
  uint32_t *p112 = h_01;
 c000a7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000a7e:	60fb      	str	r3, [r7, #12]
  uint32_t *p2 = h_01 + (uint32_t)4U;
 c000a80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000a84:	3310      	adds	r3, #16
 c000a86:	60bb      	str	r3, [r7, #8]
  p112[0U] = (uint32_t)0x6a09e667U;
 c000a88:	68fb      	ldr	r3, [r7, #12]
 c000a8a:	4a13      	ldr	r2, [pc, #76]	; (c000ad8 <Hacl_Impl_SHA2_256_init+0x3e8>)
 c000a8c:	601a      	str	r2, [r3, #0]
  p112[1U] = (uint32_t)0xbb67ae85U;
 c000a8e:	68fb      	ldr	r3, [r7, #12]
 c000a90:	3304      	adds	r3, #4
 c000a92:	4a12      	ldr	r2, [pc, #72]	; (c000adc <Hacl_Impl_SHA2_256_init+0x3ec>)
 c000a94:	601a      	str	r2, [r3, #0]
  p112[2U] = (uint32_t)0x3c6ef372U;
 c000a96:	68fb      	ldr	r3, [r7, #12]
 c000a98:	3308      	adds	r3, #8
 c000a9a:	4a11      	ldr	r2, [pc, #68]	; (c000ae0 <Hacl_Impl_SHA2_256_init+0x3f0>)
 c000a9c:	601a      	str	r2, [r3, #0]
  p112[3U] = (uint32_t)0xa54ff53aU;
 c000a9e:	68fb      	ldr	r3, [r7, #12]
 c000aa0:	330c      	adds	r3, #12
 c000aa2:	4a10      	ldr	r2, [pc, #64]	; (c000ae4 <Hacl_Impl_SHA2_256_init+0x3f4>)
 c000aa4:	601a      	str	r2, [r3, #0]
  p2[0U] = (uint32_t)0x510e527fU;
 c000aa6:	68bb      	ldr	r3, [r7, #8]
 c000aa8:	4a0f      	ldr	r2, [pc, #60]	; (c000ae8 <Hacl_Impl_SHA2_256_init+0x3f8>)
 c000aaa:	601a      	str	r2, [r3, #0]
  p2[1U] = (uint32_t)0x9b05688cU;
 c000aac:	68bb      	ldr	r3, [r7, #8]
 c000aae:	3304      	adds	r3, #4
 c000ab0:	4a0e      	ldr	r2, [pc, #56]	; (c000aec <Hacl_Impl_SHA2_256_init+0x3fc>)
 c000ab2:	601a      	str	r2, [r3, #0]
  p2[2U] = (uint32_t)0x1f83d9abU;
 c000ab4:	68bb      	ldr	r3, [r7, #8]
 c000ab6:	3308      	adds	r3, #8
 c000ab8:	4a0d      	ldr	r2, [pc, #52]	; (c000af0 <Hacl_Impl_SHA2_256_init+0x400>)
 c000aba:	601a      	str	r2, [r3, #0]
  p2[3U] = (uint32_t)0x5be0cd19U;
 c000abc:	68bb      	ldr	r3, [r7, #8]
 c000abe:	330c      	adds	r3, #12
 c000ac0:	4a0c      	ldr	r2, [pc, #48]	; (c000af4 <Hacl_Impl_SHA2_256_init+0x404>)
 c000ac2:	601a      	str	r2, [r3, #0]
}
 c000ac4:	bf00      	nop
 c000ac6:	378c      	adds	r7, #140	; 0x8c
 c000ac8:	46bd      	mov	sp, r7
 c000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ace:	4770      	bx	lr
 c000ad0:	bef9a3f7 	.word	0xbef9a3f7
 c000ad4:	c67178f2 	.word	0xc67178f2
 c000ad8:	6a09e667 	.word	0x6a09e667
 c000adc:	bb67ae85 	.word	0xbb67ae85
 c000ae0:	3c6ef372 	.word	0x3c6ef372
 c000ae4:	a54ff53a 	.word	0xa54ff53a
 c000ae8:	510e527f 	.word	0x510e527f
 c000aec:	9b05688c 	.word	0x9b05688c
 c000af0:	1f83d9ab 	.word	0x1f83d9ab
 c000af4:	5be0cd19 	.word	0x5be0cd19

0c000af8 <Hacl_Impl_SHA2_256_update>:

static void Hacl_Impl_SHA2_256_update(uint32_t *state, uint8_t *data)
{
 c000af8:	b580      	push	{r7, lr}
 c000afa:	b0bc      	sub	sp, #240	; 0xf0
 c000afc:	af00      	add	r7, sp, #0
 c000afe:	6078      	str	r0, [r7, #4]
 c000b00:	6039      	str	r1, [r7, #0]
  uint32_t data_w[16U] = { 0U };
 c000b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c000b06:	2240      	movs	r2, #64	; 0x40
 c000b08:	2100      	movs	r1, #0
 c000b0a:	4618      	mov	r0, r3
 c000b0c:	f007 f941 	bl	c007d92 <memset>
  Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes(data_w, data, (uint32_t)16U);
 c000b10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c000b14:	2210      	movs	r2, #16
 c000b16:	6839      	ldr	r1, [r7, #0]
 c000b18:	4618      	mov	r0, r3
 c000b1a:	f7ff fd7f 	bl	c00061c <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes>
  uint32_t *hash_w = state + (uint32_t)128U;
 c000b1e:	687b      	ldr	r3, [r7, #4]
 c000b20:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c000b24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t *ws_w = state + (uint32_t)64U;
 c000b28:	687b      	ldr	r3, [r7, #4]
 c000b2a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 c000b2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t *k_w = state;
 c000b32:	687b      	ldr	r3, [r7, #4]
 c000b34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint32_t *counter_w = state + (uint32_t)136U;
 c000b38:	687b      	ldr	r3, [r7, #4]
 c000b3a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 c000b3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)16U; i = i + (uint32_t)1U)
 c000b42:	2300      	movs	r3, #0
 c000b44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000b48:	e014      	b.n	c000b74 <Hacl_Impl_SHA2_256_update+0x7c>
  {
    uint32_t b = data_w[i];
 c000b4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000b4e:	009b      	lsls	r3, r3, #2
 c000b50:	33f0      	adds	r3, #240	; 0xf0
 c000b52:	443b      	add	r3, r7
 c000b54:	f853 3cc4 	ldr.w	r3, [r3, #-196]
 c000b58:	66fb      	str	r3, [r7, #108]	; 0x6c
    ws_w[i] = b;
 c000b5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000b5e:	009b      	lsls	r3, r3, #2
 c000b60:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000b64:	4413      	add	r3, r2
 c000b66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 c000b68:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)16U; i = i + (uint32_t)1U)
 c000b6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000b6e:	3301      	adds	r3, #1
 c000b70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c000b74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c000b78:	2b0f      	cmp	r3, #15
 c000b7a:	d9e6      	bls.n	c000b4a <Hacl_Impl_SHA2_256_update+0x52>
  }
  for (uint32_t i = (uint32_t)16U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000b7c:	2310      	movs	r3, #16
 c000b7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 c000b82:	e050      	b.n	c000c26 <Hacl_Impl_SHA2_256_update+0x12e>
  {
    uint32_t t16 = ws_w[i - (uint32_t)16U];
 c000b84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000b88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c000b8c:	3b10      	subs	r3, #16
 c000b8e:	009b      	lsls	r3, r3, #2
 c000b90:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000b94:	4413      	add	r3, r2
 c000b96:	681b      	ldr	r3, [r3, #0]
 c000b98:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint32_t t15 = ws_w[i - (uint32_t)15U];
 c000b9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000b9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c000ba2:	3b0f      	subs	r3, #15
 c000ba4:	009b      	lsls	r3, r3, #2
 c000ba6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000baa:	4413      	add	r3, r2
 c000bac:	681b      	ldr	r3, [r3, #0]
 c000bae:	67bb      	str	r3, [r7, #120]	; 0x78
    uint32_t t7 = ws_w[i - (uint32_t)7U];
 c000bb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000bb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c000bb8:	3b07      	subs	r3, #7
 c000bba:	009b      	lsls	r3, r3, #2
 c000bbc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000bc0:	4413      	add	r3, r2
 c000bc2:	681b      	ldr	r3, [r3, #0]
 c000bc4:	677b      	str	r3, [r7, #116]	; 0x74
    uint32_t t2 = ws_w[i - (uint32_t)2U];
 c000bc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000bca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c000bce:	3b02      	subs	r3, #2
 c000bd0:	009b      	lsls	r3, r3, #2
 c000bd2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000bd6:	4413      	add	r3, r2
 c000bd8:	681b      	ldr	r3, [r3, #0]
 c000bda:	673b      	str	r3, [r7, #112]	; 0x70
    ws_w[i] =
      ((t2 >> (uint32_t)17U | t2 << ((uint32_t)32U - (uint32_t)17U))
 c000bdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c000bde:	ea4f 4273 	mov.w	r2, r3, ror #17
      ^ ((t2 >> (uint32_t)19U | t2 << ((uint32_t)32U - (uint32_t)19U)) ^ t2 >> (uint32_t)10U))
 c000be2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c000be4:	ea4f 41f3 	mov.w	r1, r3, ror #19
 c000be8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c000bea:	0a9b      	lsrs	r3, r3, #10
 c000bec:	404b      	eors	r3, r1
 c000bee:	405a      	eors	r2, r3
      +
 c000bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c000bf2:	441a      	add	r2, r3
        t7
        +
          ((t15 >> (uint32_t)7U | t15 << ((uint32_t)32U - (uint32_t)7U))
 c000bf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c000bf6:	ea4f 11f3 	mov.w	r1, r3, ror #7
          ^ ((t15 >> (uint32_t)18U | t15 << ((uint32_t)32U - (uint32_t)18U)) ^ t15 >> (uint32_t)3U))
 c000bfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c000bfc:	ea4f 40b3 	mov.w	r0, r3, ror #18
 c000c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c000c02:	08db      	lsrs	r3, r3, #3
 c000c04:	4043      	eors	r3, r0
 c000c06:	404b      	eors	r3, r1
        +
 c000c08:	18d1      	adds	r1, r2, r3
    ws_w[i] =
 c000c0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000c0e:	009b      	lsls	r3, r3, #2
 c000c10:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000c14:	4413      	add	r3, r2
          + t16;
 c000c16:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 c000c18:	440a      	add	r2, r1
    ws_w[i] =
 c000c1a:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)16U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000c1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000c20:	3301      	adds	r3, #1
 c000c22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 c000c26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c000c2a:	2b3f      	cmp	r3, #63	; 0x3f
 c000c2c:	d9aa      	bls.n	c000b84 <Hacl_Impl_SHA2_256_update+0x8c>
  }
  uint32_t hash_0[8U] = { 0U };
 c000c2e:	f107 030c 	add.w	r3, r7, #12
 c000c32:	2220      	movs	r2, #32
 c000c34:	2100      	movs	r1, #0
 c000c36:	4618      	mov	r0, r3
 c000c38:	f007 f8ab 	bl	c007d92 <memset>
  memcpy(hash_0, hash_w, (uint32_t)8U * sizeof hash_w[0U]);
 c000c3c:	f107 030c 	add.w	r3, r7, #12
 c000c40:	2220      	movs	r2, #32
 c000c42:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 c000c46:	4618      	mov	r0, r3
 c000c48:	f007 f896 	bl	c007d78 <memcpy>
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000c4c:	2300      	movs	r3, #0
 c000c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c000c52:	e0b8      	b.n	c000dc6 <Hacl_Impl_SHA2_256_update+0x2ce>
  {
    uint32_t a = hash_0[0U];
 c000c54:	68fb      	ldr	r3, [r7, #12]
 c000c56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    uint32_t b = hash_0[1U];
 c000c5a:	693b      	ldr	r3, [r7, #16]
 c000c5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    uint32_t c = hash_0[2U];
 c000c60:	697b      	ldr	r3, [r7, #20]
 c000c62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    uint32_t d = hash_0[3U];
 c000c66:	69bb      	ldr	r3, [r7, #24]
 c000c68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint32_t e = hash_0[4U];
 c000c6c:	69fb      	ldr	r3, [r7, #28]
 c000c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    uint32_t f1 = hash_0[5U];
 c000c72:	6a3b      	ldr	r3, [r7, #32]
 c000c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    uint32_t g = hash_0[6U];
 c000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    uint32_t h = hash_0[7U];
 c000c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c000c80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    uint32_t kt = k_w[i];
 c000c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000c88:	009b      	lsls	r3, r3, #2
 c000c8a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 c000c8e:	4413      	add	r3, r2
 c000c90:	681b      	ldr	r3, [r3, #0]
 c000c92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t wst = ws_w[i];
 c000c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000c9a:	009b      	lsls	r3, r3, #2
 c000c9c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000ca0:	4413      	add	r3, r2
 c000ca2:	681b      	ldr	r3, [r3, #0]
 c000ca4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint32_t
    t1 =
      h
      +
        ((e >> (uint32_t)6U | e << ((uint32_t)32U - (uint32_t)6U))
 c000ca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000cac:	ea4f 12b3 	mov.w	r2, r3, ror #6
        ^
          ((e >> (uint32_t)11U | e << ((uint32_t)32U - (uint32_t)11U))
 c000cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000cb4:	ea4f 21f3 	mov.w	r1, r3, ror #11
          ^ (e >> (uint32_t)25U | e << ((uint32_t)32U - (uint32_t)25U))))
 c000cb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000cbc:	ea4f 6373 	mov.w	r3, r3, ror #25
 c000cc0:	404b      	eors	r3, r1
        ^
 c000cc2:	405a      	eors	r2, r3
      +
 c000cc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 c000cc8:	441a      	add	r2, r3
      + ((e & f1) ^ (~e & g))
 c000cca:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 c000cce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 c000cd2:	4019      	ands	r1, r3
 c000cd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000cd8:	43d8      	mvns	r0, r3
 c000cda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 c000cde:	4003      	ands	r3, r0
 c000ce0:	404b      	eors	r3, r1
 c000ce2:	441a      	add	r2, r3
      + kt
 c000ce4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 c000ce8:	4413      	add	r3, r2
    t1 =
 c000cea:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 c000cee:	4413      	add	r3, r2
 c000cf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      + wst;
    uint32_t
    t2 =
      ((a >> (uint32_t)2U | a << ((uint32_t)32U - (uint32_t)2U))
 c000cf4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c000cf8:	ea4f 02b3 	mov.w	r2, r3, ror #2
      ^
        ((a >> (uint32_t)13U | a << ((uint32_t)32U - (uint32_t)13U))
 c000cfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c000d00:	ea4f 3173 	mov.w	r1, r3, ror #13
        ^ (a >> (uint32_t)22U | a << ((uint32_t)32U - (uint32_t)22U))))
 c000d04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c000d08:	ea4f 53b3 	mov.w	r3, r3, ror #22
 c000d0c:	404b      	eors	r3, r1
      ^
 c000d0e:	405a      	eors	r2, r3
      + ((a & b) ^ ((a & c) ^ (b & c)));
 c000d10:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 c000d14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c000d18:	4019      	ands	r1, r3
 c000d1a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 c000d1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c000d22:	4058      	eors	r0, r3
 c000d24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000d28:	4003      	ands	r3, r0
 c000d2a:	404b      	eors	r3, r1
    t2 =
 c000d2c:	4413      	add	r3, r2
 c000d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    uint32_t x1 = t1 + t2;
 c000d32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 c000d36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c000d3a:	4413      	add	r3, r2
 c000d3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint32_t x5 = d + t1;
 c000d40:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 c000d44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 c000d48:	4413      	add	r3, r2
 c000d4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    uint32_t *p1 = hash_0;
 c000d4e:	f107 030c 	add.w	r3, r7, #12
 c000d52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t *p2 = hash_0 + (uint32_t)4U;
 c000d56:	f107 030c 	add.w	r3, r7, #12
 c000d5a:	3310      	adds	r3, #16
 c000d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    p1[0U] = x1;
 c000d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000d64:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 c000d68:	601a      	str	r2, [r3, #0]
    p1[1U] = a;
 c000d6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000d6e:	3304      	adds	r3, #4
 c000d70:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 c000d74:	601a      	str	r2, [r3, #0]
    p1[2U] = b;
 c000d76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000d7a:	3308      	adds	r3, #8
 c000d7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 c000d80:	601a      	str	r2, [r3, #0]
    p1[3U] = c;
 c000d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c000d86:	330c      	adds	r3, #12
 c000d88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 c000d8c:	601a      	str	r2, [r3, #0]
    p2[0U] = x5;
 c000d8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000d92:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 c000d96:	601a      	str	r2, [r3, #0]
    p2[1U] = e;
 c000d98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000d9c:	3304      	adds	r3, #4
 c000d9e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 c000da2:	601a      	str	r2, [r3, #0]
    p2[2U] = f1;
 c000da4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000da8:	3308      	adds	r3, #8
 c000daa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 c000dae:	601a      	str	r2, [r3, #0]
    p2[3U] = g;
 c000db0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c000db4:	330c      	adds	r3, #12
 c000db6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 c000dba:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c000dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000dc0:	3301      	adds	r3, #1
 c000dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c000dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c000dca:	2b3f      	cmp	r3, #63	; 0x3f
 c000dcc:	f67f af42 	bls.w	c000c54 <Hacl_Impl_SHA2_256_update+0x15c>
  }
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)8U; i = i + (uint32_t)1U)
 c000dd0:	2300      	movs	r3, #0
 c000dd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c000dd6:	e022      	b.n	c000e1e <Hacl_Impl_SHA2_256_update+0x326>
  {
    uint32_t xi = hash_w[i];
 c000dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000ddc:	009b      	lsls	r3, r3, #2
 c000dde:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 c000de2:	4413      	add	r3, r2
 c000de4:	681b      	ldr	r3, [r3, #0]
 c000de6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32_t yi = hash_0[i];
 c000dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000dee:	009b      	lsls	r3, r3, #2
 c000df0:	33f0      	adds	r3, #240	; 0xf0
 c000df2:	443b      	add	r3, r7
 c000df4:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 c000df8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    hash_w[i] = xi + yi;
 c000dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000e00:	009b      	lsls	r3, r3, #2
 c000e02:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 c000e06:	4413      	add	r3, r2
 c000e08:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 c000e0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 c000e10:	440a      	add	r2, r1
 c000e12:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)8U; i = i + (uint32_t)1U)
 c000e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000e18:	3301      	adds	r3, #1
 c000e1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c000e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c000e22:	2b07      	cmp	r3, #7
 c000e24:	d9d8      	bls.n	c000dd8 <Hacl_Impl_SHA2_256_update+0x2e0>
  }
  uint32_t c0 = counter_w[0U];
 c000e26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c000e2a:	681b      	ldr	r3, [r3, #0]
 c000e2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  uint32_t one1 = (uint32_t)1U;
 c000e30:	2301      	movs	r3, #1
 c000e32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  counter_w[0U] = c0 + one1;
 c000e36:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 c000e3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 c000e3e:	441a      	add	r2, r3
 c000e40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c000e44:	601a      	str	r2, [r3, #0]
}
 c000e46:	bf00      	nop
 c000e48:	37f0      	adds	r7, #240	; 0xf0
 c000e4a:	46bd      	mov	sp, r7
 c000e4c:	bd80      	pop	{r7, pc}

0c000e4e <Hacl_Impl_SHA2_256_update_multi>:

static void Hacl_Impl_SHA2_256_update_multi(uint32_t *state, uint8_t *data, uint32_t n1)
{
 c000e4e:	b580      	push	{r7, lr}
 c000e50:	b086      	sub	sp, #24
 c000e52:	af00      	add	r7, sp, #0
 c000e54:	60f8      	str	r0, [r7, #12]
 c000e56:	60b9      	str	r1, [r7, #8]
 c000e58:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < n1; i = i + (uint32_t)1U)
 c000e5a:	2300      	movs	r3, #0
 c000e5c:	617b      	str	r3, [r7, #20]
 c000e5e:	e00b      	b.n	c000e78 <Hacl_Impl_SHA2_256_update_multi+0x2a>
  {
    uint8_t *b = data + i * (uint32_t)64U;
 c000e60:	697b      	ldr	r3, [r7, #20]
 c000e62:	019b      	lsls	r3, r3, #6
 c000e64:	68ba      	ldr	r2, [r7, #8]
 c000e66:	4413      	add	r3, r2
 c000e68:	613b      	str	r3, [r7, #16]
    Hacl_Impl_SHA2_256_update(state, b);
 c000e6a:	6939      	ldr	r1, [r7, #16]
 c000e6c:	68f8      	ldr	r0, [r7, #12]
 c000e6e:	f7ff fe43 	bl	c000af8 <Hacl_Impl_SHA2_256_update>
  for (uint32_t i = (uint32_t)0U; i < n1; i = i + (uint32_t)1U)
 c000e72:	697b      	ldr	r3, [r7, #20]
 c000e74:	3301      	adds	r3, #1
 c000e76:	617b      	str	r3, [r7, #20]
 c000e78:	697a      	ldr	r2, [r7, #20]
 c000e7a:	687b      	ldr	r3, [r7, #4]
 c000e7c:	429a      	cmp	r2, r3
 c000e7e:	d3ef      	bcc.n	c000e60 <Hacl_Impl_SHA2_256_update_multi+0x12>
  }
}
 c000e80:	bf00      	nop
 c000e82:	bf00      	nop
 c000e84:	3718      	adds	r7, #24
 c000e86:	46bd      	mov	sp, r7
 c000e88:	bd80      	pop	{r7, pc}

0c000e8a <Hacl_Impl_SHA2_256_update_last>:

static void Hacl_Impl_SHA2_256_update_last(uint32_t *state, uint8_t *data, uint32_t len)
{
 c000e8a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c000e8e:	b0ba      	sub	sp, #232	; 0xe8
 c000e90:	af00      	add	r7, sp, #0
 c000e92:	6278      	str	r0, [r7, #36]	; 0x24
 c000e94:	6239      	str	r1, [r7, #32]
 c000e96:	61fa      	str	r2, [r7, #28]
  uint8_t blocks[128U] = { 0U };
 c000e98:	2300      	movs	r3, #0
 c000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
 c000e9c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 c000ea0:	237c      	movs	r3, #124	; 0x7c
 c000ea2:	461a      	mov	r2, r3
 c000ea4:	2100      	movs	r1, #0
 c000ea6:	f006 ff74 	bl	c007d92 <memset>
  uint32_t nb;
  if (len < (uint32_t)56U)
 c000eaa:	69fb      	ldr	r3, [r7, #28]
 c000eac:	2b37      	cmp	r3, #55	; 0x37
 c000eae:	d803      	bhi.n	c000eb8 <Hacl_Impl_SHA2_256_update_last+0x2e>
    nb = (uint32_t)1U;
 c000eb0:	2301      	movs	r3, #1
 c000eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c000eb6:	e002      	b.n	c000ebe <Hacl_Impl_SHA2_256_update_last+0x34>
  else
    nb = (uint32_t)2U;
 c000eb8:	2302      	movs	r3, #2
 c000eba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint8_t *final_blocks;
  if (len < (uint32_t)56U)
 c000ebe:	69fb      	ldr	r3, [r7, #28]
 c000ec0:	2b37      	cmp	r3, #55	; 0x37
 c000ec2:	d805      	bhi.n	c000ed0 <Hacl_Impl_SHA2_256_update_last+0x46>
    final_blocks = blocks + (uint32_t)64U;
 c000ec4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 c000ec8:	3340      	adds	r3, #64	; 0x40
 c000eca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c000ece:	e003      	b.n	c000ed8 <Hacl_Impl_SHA2_256_update_last+0x4e>
  else
    final_blocks = blocks;
 c000ed0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 c000ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  memcpy(final_blocks, data, len * sizeof data[0U]);
 c000ed8:	69fa      	ldr	r2, [r7, #28]
 c000eda:	6a39      	ldr	r1, [r7, #32]
 c000edc:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 c000ee0:	f006 ff4a 	bl	c007d78 <memcpy>
  uint32_t n1 = state[136U];
 c000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c000ee6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 c000eea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint8_t *padding = final_blocks + len;
 c000eee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 c000ef2:	69fb      	ldr	r3, [r7, #28]
 c000ef4:	4413      	add	r3, r2
 c000ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t
  pad0len = ((uint32_t)64U - (len + (uint32_t)8U + (uint32_t)1U) % (uint32_t)64U) % (uint32_t)64U;
 c000efa:	69fa      	ldr	r2, [r7, #28]
 c000efc:	f06f 0308 	mvn.w	r3, #8
 c000f00:	1a9b      	subs	r3, r3, r2
 c000f02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c000f06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint8_t *buf1 = padding;
 c000f0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 c000f0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  uint8_t *buf2 = padding + (uint32_t)1U + pad0len;
 c000f12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 c000f16:	3301      	adds	r3, #1
 c000f18:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c000f1c:	4413      	add	r3, r2
 c000f1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  uint64_t
  encodedlen = ((uint64_t)n1 * (uint64_t)(uint32_t)64U + (uint64_t)len) * (uint64_t)(uint32_t)8U;
 c000f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 c000f26:	2200      	movs	r2, #0
 c000f28:	4698      	mov	r8, r3
 c000f2a:	4691      	mov	r9, r2
 c000f2c:	f04f 0200 	mov.w	r2, #0
 c000f30:	f04f 0300 	mov.w	r3, #0
 c000f34:	ea4f 1389 	mov.w	r3, r9, lsl #6
 c000f38:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 c000f3c:	ea4f 1288 	mov.w	r2, r8, lsl #6
 c000f40:	69f9      	ldr	r1, [r7, #28]
 c000f42:	2000      	movs	r0, #0
 c000f44:	6139      	str	r1, [r7, #16]
 c000f46:	6178      	str	r0, [r7, #20]
 c000f48:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 c000f4c:	4641      	mov	r1, r8
 c000f4e:	1854      	adds	r4, r2, r1
 c000f50:	4649      	mov	r1, r9
 c000f52:	eb43 0101 	adc.w	r1, r3, r1
 c000f56:	460d      	mov	r5, r1
 c000f58:	f04f 0200 	mov.w	r2, #0
 c000f5c:	f04f 0300 	mov.w	r3, #0
 c000f60:	00eb      	lsls	r3, r5, #3
 c000f62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 c000f66:	00e2      	lsls	r2, r4, #3
 c000f68:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  buf1[0U] = (uint8_t)0x80U;
 c000f6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c000f70:	2280      	movs	r2, #128	; 0x80
 c000f72:	701a      	strb	r2, [r3, #0]
  store64_be(buf2, encodedlen);
 c000f74:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 c000f78:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 c000f7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c000f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 c000f84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000f88:	0e1a      	lsrs	r2, r3, #24
 c000f8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000f8e:	0a1b      	lsrs	r3, r3, #8
 c000f90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c000f94:	431a      	orrs	r2, r3
 c000f96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000f9a:	021b      	lsls	r3, r3, #8
 c000f9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c000fa0:	431a      	orrs	r2, r3
 c000fa2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c000fa6:	061b      	lsls	r3, r3, #24
 c000fa8:	4313      	orrs	r3, r2
 c000faa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 c000fae:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 c000fb2:	f04f 0200 	mov.w	r2, #0
 c000fb6:	f04f 0300 	mov.w	r3, #0
 c000fba:	000a      	movs	r2, r1
 c000fbc:	2300      	movs	r3, #0
 c000fbe:	4613      	mov	r3, r2
 c000fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c000fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000fc8:	0e1a      	lsrs	r2, r3, #24
 c000fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000fce:	0a1b      	lsrs	r3, r3, #8
 c000fd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c000fd4:	431a      	orrs	r2, r3
 c000fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000fda:	021b      	lsls	r3, r3, #8
 c000fdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c000fe0:	431a      	orrs	r2, r3
 c000fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c000fe6:	061b      	lsls	r3, r3, #24
 c000fe8:	4313      	orrs	r3, r2
 c000fea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 c000fee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c000ff2:	2200      	movs	r2, #0
 c000ff4:	60bb      	str	r3, [r7, #8]
 c000ff6:	60fa      	str	r2, [r7, #12]
 c000ff8:	f04f 0200 	mov.w	r2, #0
 c000ffc:	f04f 0300 	mov.w	r3, #0
 c001000:	68b9      	ldr	r1, [r7, #8]
 c001002:	000b      	movs	r3, r1
 c001004:	2200      	movs	r2, #0
 c001006:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 c00100a:	2000      	movs	r0, #0
 c00100c:	468a      	mov	sl, r1
 c00100e:	4683      	mov	fp, r0
 c001010:	ea42 010a 	orr.w	r1, r2, sl
 c001014:	6039      	str	r1, [r7, #0]
 c001016:	ea43 030b 	orr.w	r3, r3, fp
 c00101a:	607b      	str	r3, [r7, #4]
 c00101c:	e9d7 2300 	ldrd	r2, r3, [r7]
 c001020:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 c001024:	f7ff faea 	bl	c0005fc <store64>
  Hacl_Impl_SHA2_256_update_multi(state, final_blocks, nb);
 c001028:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 c00102c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 c001030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 c001032:	f7ff ff0c 	bl	c000e4e <Hacl_Impl_SHA2_256_update_multi>
}
 c001036:	bf00      	nop
 c001038:	37e8      	adds	r7, #232	; 0xe8
 c00103a:	46bd      	mov	sp, r7
 c00103c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c001040 <Hacl_Impl_SHA2_256_finish>:

static void Hacl_Impl_SHA2_256_finish(uint32_t *state, uint8_t *hash1)
{
 c001040:	b580      	push	{r7, lr}
 c001042:	b084      	sub	sp, #16
 c001044:	af00      	add	r7, sp, #0
 c001046:	6078      	str	r0, [r7, #4]
 c001048:	6039      	str	r1, [r7, #0]
  uint32_t *hash_w = state + (uint32_t)128U;
 c00104a:	687b      	ldr	r3, [r7, #4]
 c00104c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c001050:	60fb      	str	r3, [r7, #12]
  Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes(hash1, hash_w, (uint32_t)8U);
 c001052:	2208      	movs	r2, #8
 c001054:	68f9      	ldr	r1, [r7, #12]
 c001056:	6838      	ldr	r0, [r7, #0]
 c001058:	f7ff fb14 	bl	c000684 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes>
}
 c00105c:	bf00      	nop
 c00105e:	3710      	adds	r7, #16
 c001060:	46bd      	mov	sp, r7
 c001062:	bd80      	pop	{r7, pc}

0c001064 <Hacl_Impl_SHA2_256_hash>:

static void Hacl_Impl_SHA2_256_hash(uint8_t *hash1, uint8_t *input, uint32_t len)
{
 c001064:	b580      	push	{r7, lr}
 c001066:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 c00106a:	af00      	add	r7, sp, #0
 c00106c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001070:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 c001074:	6018      	str	r0, [r3, #0]
 c001076:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c00107a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 c00107e:	6019      	str	r1, [r3, #0]
 c001080:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001084:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c001088:	601a      	str	r2, [r3, #0]
  uint32_t state[137U] = { 0U };
 c00108a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c00108e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 c001092:	4618      	mov	r0, r3
 c001094:	f44f 7309 	mov.w	r3, #548	; 0x224
 c001098:	461a      	mov	r2, r3
 c00109a:	2100      	movs	r1, #0
 c00109c:	f006 fe79 	bl	c007d92 <memset>
  uint32_t n1 = len / (uint32_t)64U;
 c0010a0:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c0010a4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c0010a8:	681b      	ldr	r3, [r3, #0]
 c0010aa:	099b      	lsrs	r3, r3, #6
 c0010ac:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  uint32_t r = len % (uint32_t)64U;
 c0010b0:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c0010b4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c0010b8:	681b      	ldr	r3, [r3, #0]
 c0010ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c0010be:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  uint8_t *input_blocks = input;
 c0010c2:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c0010c6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 c0010ca:	681b      	ldr	r3, [r3, #0]
 c0010cc:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  uint8_t *input_last = input + n1 * (uint32_t)64U;
 c0010d0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 c0010d4:	019b      	lsls	r3, r3, #6
 c0010d6:	f507 7212 	add.w	r2, r7, #584	; 0x248
 c0010da:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 c0010de:	6812      	ldr	r2, [r2, #0]
 c0010e0:	4413      	add	r3, r2
 c0010e2:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
  Hacl_Impl_SHA2_256_init(state);
 c0010e6:	f107 0314 	add.w	r3, r7, #20
 c0010ea:	4618      	mov	r0, r3
 c0010ec:	f7ff fb00 	bl	c0006f0 <Hacl_Impl_SHA2_256_init>
  Hacl_Impl_SHA2_256_update_multi(state, input_blocks, n1);
 c0010f0:	f107 0314 	add.w	r3, r7, #20
 c0010f4:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 c0010f8:	f8d7 123c 	ldr.w	r1, [r7, #572]	; 0x23c
 c0010fc:	4618      	mov	r0, r3
 c0010fe:	f7ff fea6 	bl	c000e4e <Hacl_Impl_SHA2_256_update_multi>
  Hacl_Impl_SHA2_256_update_last(state, input_last, r);
 c001102:	f107 0314 	add.w	r3, r7, #20
 c001106:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 c00110a:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 c00110e:	4618      	mov	r0, r3
 c001110:	f7ff febb 	bl	c000e8a <Hacl_Impl_SHA2_256_update_last>
  Hacl_Impl_SHA2_256_finish(state, hash1);
 c001114:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001118:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 c00111c:	f107 0214 	add.w	r2, r7, #20
 c001120:	6819      	ldr	r1, [r3, #0]
 c001122:	4610      	mov	r0, r2
 c001124:	f7ff ff8c 	bl	c001040 <Hacl_Impl_SHA2_256_finish>
}
 c001128:	bf00      	nop
 c00112a:	f507 7712 	add.w	r7, r7, #584	; 0x248
 c00112e:	46bd      	mov	sp, r7
 c001130:	bd80      	pop	{r7, pc}

0c001132 <Hacl_Impl_HMAC_SHA2_256_xor_bytes_inplace>:

static void Hacl_Impl_HMAC_SHA2_256_xor_bytes_inplace(uint8_t *a, uint8_t *b, uint32_t len)
{
 c001132:	b480      	push	{r7}
 c001134:	b087      	sub	sp, #28
 c001136:	af00      	add	r7, sp, #0
 c001138:	60f8      	str	r0, [r7, #12]
 c00113a:	60b9      	str	r1, [r7, #8]
 c00113c:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c00113e:	2300      	movs	r3, #0
 c001140:	617b      	str	r3, [r7, #20]
 c001142:	e014      	b.n	c00116e <Hacl_Impl_HMAC_SHA2_256_xor_bytes_inplace+0x3c>
  {
    uint8_t xi = a[i];
 c001144:	68fa      	ldr	r2, [r7, #12]
 c001146:	697b      	ldr	r3, [r7, #20]
 c001148:	4413      	add	r3, r2
 c00114a:	781b      	ldrb	r3, [r3, #0]
 c00114c:	74fb      	strb	r3, [r7, #19]
    uint8_t yi = b[i];
 c00114e:	68ba      	ldr	r2, [r7, #8]
 c001150:	697b      	ldr	r3, [r7, #20]
 c001152:	4413      	add	r3, r2
 c001154:	781b      	ldrb	r3, [r3, #0]
 c001156:	74bb      	strb	r3, [r7, #18]
    a[i] = xi ^ yi;
 c001158:	68fa      	ldr	r2, [r7, #12]
 c00115a:	697b      	ldr	r3, [r7, #20]
 c00115c:	4413      	add	r3, r2
 c00115e:	7cf9      	ldrb	r1, [r7, #19]
 c001160:	7cba      	ldrb	r2, [r7, #18]
 c001162:	404a      	eors	r2, r1
 c001164:	b2d2      	uxtb	r2, r2
 c001166:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c001168:	697b      	ldr	r3, [r7, #20]
 c00116a:	3301      	adds	r3, #1
 c00116c:	617b      	str	r3, [r7, #20]
 c00116e:	697a      	ldr	r2, [r7, #20]
 c001170:	687b      	ldr	r3, [r7, #4]
 c001172:	429a      	cmp	r2, r3
 c001174:	d3e6      	bcc.n	c001144 <Hacl_Impl_HMAC_SHA2_256_xor_bytes_inplace+0x12>
  }
}
 c001176:	bf00      	nop
 c001178:	bf00      	nop
 c00117a:	371c      	adds	r7, #28
 c00117c:	46bd      	mov	sp, r7
 c00117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001182:	4770      	bx	lr

0c001184 <Hacl_Impl_HMAC_SHA2_256_hmac_core>:

static void
Hacl_Impl_HMAC_SHA2_256_hmac_core(uint8_t *mac, uint8_t *key, uint8_t *data, uint32_t len)
{
 c001184:	b590      	push	{r4, r7, lr}
 c001186:	f2ad 4dfc 	subw	sp, sp, #1276	; 0x4fc
 c00118a:	af00      	add	r7, sp, #0
 c00118c:	f507 649f 	add.w	r4, r7, #1272	; 0x4f8
 c001190:	f2a4 44ec 	subw	r4, r4, #1260	; 0x4ec
 c001194:	6020      	str	r0, [r4, #0]
 c001196:	f507 609f 	add.w	r0, r7, #1272	; 0x4f8
 c00119a:	f5a0 609e 	sub.w	r0, r0, #1264	; 0x4f0
 c00119e:	6001      	str	r1, [r0, #0]
 c0011a0:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 c0011a4:	f2a1 41f4 	subw	r1, r1, #1268	; 0x4f4
 c0011a8:	600a      	str	r2, [r1, #0]
 c0011aa:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 c0011ae:	f5a2 629f 	sub.w	r2, r2, #1272	; 0x4f8
 c0011b2:	6013      	str	r3, [r2, #0]
  uint8_t ipad[64U];
  for (uint32_t _i = 0U; _i < (uint32_t)64U; ++_i)
 c0011b4:	2300      	movs	r3, #0
 c0011b6:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 c0011ba:	e00b      	b.n	c0011d4 <Hacl_Impl_HMAC_SHA2_256_hmac_core+0x50>
    ipad[_i] = (uint8_t)0x36U;
 c0011bc:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 c0011c0:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 c0011c4:	4413      	add	r3, r2
 c0011c6:	2236      	movs	r2, #54	; 0x36
 c0011c8:	701a      	strb	r2, [r3, #0]
  for (uint32_t _i = 0U; _i < (uint32_t)64U; ++_i)
 c0011ca:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 c0011ce:	3301      	adds	r3, #1
 c0011d0:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 c0011d4:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 c0011d8:	2b3f      	cmp	r3, #63	; 0x3f
 c0011da:	d9ef      	bls.n	c0011bc <Hacl_Impl_HMAC_SHA2_256_hmac_core+0x38>
  uint8_t opad[64U];
  for (uint32_t _i = 0U; _i < (uint32_t)64U; ++_i)
 c0011dc:	2300      	movs	r3, #0
 c0011de:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 c0011e2:	e00b      	b.n	c0011fc <Hacl_Impl_HMAC_SHA2_256_hmac_core+0x78>
    opad[_i] = (uint8_t)0x5cU;
 c0011e4:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 c0011e8:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 c0011ec:	4413      	add	r3, r2
 c0011ee:	225c      	movs	r2, #92	; 0x5c
 c0011f0:	701a      	strb	r2, [r3, #0]
  for (uint32_t _i = 0U; _i < (uint32_t)64U; ++_i)
 c0011f2:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 c0011f6:	3301      	adds	r3, #1
 c0011f8:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 c0011fc:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 c001200:	2b3f      	cmp	r3, #63	; 0x3f
 c001202:	d9ef      	bls.n	c0011e4 <Hacl_Impl_HMAC_SHA2_256_hmac_core+0x60>
  Hacl_Impl_HMAC_SHA2_256_xor_bytes_inplace(ipad, key, (uint32_t)64U);
 c001204:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 c001208:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 c00120c:	f507 6093 	add.w	r0, r7, #1176	; 0x498
 c001210:	2240      	movs	r2, #64	; 0x40
 c001212:	6819      	ldr	r1, [r3, #0]
 c001214:	f7ff ff8d 	bl	c001132 <Hacl_Impl_HMAC_SHA2_256_xor_bytes_inplace>
  uint32_t state0[137U] = { 0U };
 c001218:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 c00121c:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 c001220:	4618      	mov	r0, r3
 c001222:	f44f 7309 	mov.w	r3, #548	; 0x224
 c001226:	461a      	mov	r2, r3
 c001228:	2100      	movs	r1, #0
 c00122a:	f006 fdb2 	bl	c007d92 <memset>
  uint32_t n0 = len / (uint32_t)64U;
 c00122e:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 c001232:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 c001236:	681b      	ldr	r3, [r3, #0]
 c001238:	099b      	lsrs	r3, r3, #6
 c00123a:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
  uint32_t r0 = len % (uint32_t)64U;
 c00123e:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 c001242:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 c001246:	681b      	ldr	r3, [r3, #0]
 c001248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c00124c:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
  uint8_t *blocks0 = data;
 c001250:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 c001254:	f2a3 43f4 	subw	r3, r3, #1268	; 0x4f4
 c001258:	681b      	ldr	r3, [r3, #0]
 c00125a:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
  uint8_t *last0 = data + n0 * (uint32_t)64U;
 c00125e:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 c001262:	019b      	lsls	r3, r3, #6
 c001264:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 c001268:	f2a2 42f4 	subw	r2, r2, #1268	; 0x4f4
 c00126c:	6812      	ldr	r2, [r2, #0]
 c00126e:	4413      	add	r3, r2
 c001270:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
  Hacl_Impl_SHA2_256_init(state0);
 c001274:	f507 730d 	add.w	r3, r7, #564	; 0x234
 c001278:	4618      	mov	r0, r3
 c00127a:	f7ff fa39 	bl	c0006f0 <Hacl_Impl_SHA2_256_init>
  Hacl_Impl_SHA2_256_update(state0, ipad);
 c00127e:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 c001282:	f507 730d 	add.w	r3, r7, #564	; 0x234
 c001286:	4611      	mov	r1, r2
 c001288:	4618      	mov	r0, r3
 c00128a:	f7ff fc35 	bl	c000af8 <Hacl_Impl_SHA2_256_update>
  Hacl_Impl_SHA2_256_update_multi(state0, blocks0, n0);
 c00128e:	f507 730d 	add.w	r3, r7, #564	; 0x234
 c001292:	f8d7 24ec 	ldr.w	r2, [r7, #1260]	; 0x4ec
 c001296:	f8d7 14e4 	ldr.w	r1, [r7, #1252]	; 0x4e4
 c00129a:	4618      	mov	r0, r3
 c00129c:	f7ff fdd7 	bl	c000e4e <Hacl_Impl_SHA2_256_update_multi>
  Hacl_Impl_SHA2_256_update_last(state0, last0, r0);
 c0012a0:	f507 730d 	add.w	r3, r7, #564	; 0x234
 c0012a4:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	; 0x4e8
 c0012a8:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 c0012ac:	4618      	mov	r0, r3
 c0012ae:	f7ff fdec 	bl	c000e8a <Hacl_Impl_SHA2_256_update_last>
  uint8_t *hash0 = ipad;
 c0012b2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 c0012b6:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
  Hacl_Impl_SHA2_256_finish(state0, hash0);
 c0012ba:	f507 730d 	add.w	r3, r7, #564	; 0x234
 c0012be:	f8d7 14dc 	ldr.w	r1, [r7, #1244]	; 0x4dc
 c0012c2:	4618      	mov	r0, r3
 c0012c4:	f7ff febc 	bl	c001040 <Hacl_Impl_SHA2_256_finish>
  uint8_t *s4 = ipad;
 c0012c8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 c0012cc:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
  Hacl_Impl_HMAC_SHA2_256_xor_bytes_inplace(opad, key, (uint32_t)64U);
 c0012d0:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 c0012d4:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 c0012d8:	f507 608b 	add.w	r0, r7, #1112	; 0x458
 c0012dc:	2240      	movs	r2, #64	; 0x40
 c0012de:	6819      	ldr	r1, [r3, #0]
 c0012e0:	f7ff ff27 	bl	c001132 <Hacl_Impl_HMAC_SHA2_256_xor_bytes_inplace>
  uint32_t state1[137U] = { 0U };
 c0012e4:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 c0012e8:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 c0012ec:	4618      	mov	r0, r3
 c0012ee:	f44f 7309 	mov.w	r3, #548	; 0x224
 c0012f2:	461a      	mov	r2, r3
 c0012f4:	2100      	movs	r1, #0
 c0012f6:	f006 fd4c 	bl	c007d92 <memset>
  Hacl_Impl_SHA2_256_init(state1);
 c0012fa:	f107 0310 	add.w	r3, r7, #16
 c0012fe:	4618      	mov	r0, r3
 c001300:	f7ff f9f6 	bl	c0006f0 <Hacl_Impl_SHA2_256_init>
  Hacl_Impl_SHA2_256_update(state1, opad);
 c001304:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 c001308:	f107 0310 	add.w	r3, r7, #16
 c00130c:	4611      	mov	r1, r2
 c00130e:	4618      	mov	r0, r3
 c001310:	f7ff fbf2 	bl	c000af8 <Hacl_Impl_SHA2_256_update>
  Hacl_Impl_SHA2_256_update_last(state1, s4, (uint32_t)32U);
 c001314:	f107 0310 	add.w	r3, r7, #16
 c001318:	2220      	movs	r2, #32
 c00131a:	f8d7 14d8 	ldr.w	r1, [r7, #1240]	; 0x4d8
 c00131e:	4618      	mov	r0, r3
 c001320:	f7ff fdb3 	bl	c000e8a <Hacl_Impl_SHA2_256_update_last>
  Hacl_Impl_SHA2_256_finish(state1, mac);
 c001324:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 c001328:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 c00132c:	f107 0210 	add.w	r2, r7, #16
 c001330:	6819      	ldr	r1, [r3, #0]
 c001332:	4610      	mov	r0, r2
 c001334:	f7ff fe84 	bl	c001040 <Hacl_Impl_SHA2_256_finish>
}
 c001338:	bf00      	nop
 c00133a:	f207 47fc 	addw	r7, r7, #1276	; 0x4fc
 c00133e:	46bd      	mov	sp, r7
 c001340:	bd90      	pop	{r4, r7, pc}

0c001342 <Hacl_Impl_HMAC_SHA2_256_hmac>:
  uint8_t *key,
  uint32_t keylen,
  uint8_t *data,
  uint32_t datalen
)
{
 c001342:	b580      	push	{r7, lr}
 c001344:	b096      	sub	sp, #88	; 0x58
 c001346:	af00      	add	r7, sp, #0
 c001348:	60f8      	str	r0, [r7, #12]
 c00134a:	60b9      	str	r1, [r7, #8]
 c00134c:	607a      	str	r2, [r7, #4]
 c00134e:	603b      	str	r3, [r7, #0]
  uint8_t nkey[64U];
  for (uint32_t _i = 0U; _i < (uint32_t)64U; ++_i)
 c001350:	2300      	movs	r3, #0
 c001352:	657b      	str	r3, [r7, #84]	; 0x54
 c001354:	e008      	b.n	c001368 <Hacl_Impl_HMAC_SHA2_256_hmac+0x26>
    nkey[_i] = (uint8_t)0x00U;
 c001356:	f107 0210 	add.w	r2, r7, #16
 c00135a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c00135c:	4413      	add	r3, r2
 c00135e:	2200      	movs	r2, #0
 c001360:	701a      	strb	r2, [r3, #0]
  for (uint32_t _i = 0U; _i < (uint32_t)64U; ++_i)
 c001362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c001364:	3301      	adds	r3, #1
 c001366:	657b      	str	r3, [r7, #84]	; 0x54
 c001368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c00136a:	2b3f      	cmp	r3, #63	; 0x3f
 c00136c:	d9f3      	bls.n	c001356 <Hacl_Impl_HMAC_SHA2_256_hmac+0x14>
  if (keylen <= (uint32_t)64U)
 c00136e:	687b      	ldr	r3, [r7, #4]
 c001370:	2b40      	cmp	r3, #64	; 0x40
 c001372:	d807      	bhi.n	c001384 <Hacl_Impl_HMAC_SHA2_256_hmac+0x42>
    memcpy(nkey, key, keylen * sizeof key[0U]);
 c001374:	f107 0310 	add.w	r3, r7, #16
 c001378:	687a      	ldr	r2, [r7, #4]
 c00137a:	68b9      	ldr	r1, [r7, #8]
 c00137c:	4618      	mov	r0, r3
 c00137e:	f006 fcfb 	bl	c007d78 <memcpy>
 c001382:	e007      	b.n	c001394 <Hacl_Impl_HMAC_SHA2_256_hmac+0x52>
  else
  {
    uint8_t *nkey0 = nkey;
 c001384:	f107 0310 	add.w	r3, r7, #16
 c001388:	653b      	str	r3, [r7, #80]	; 0x50
    Hacl_Impl_SHA2_256_hash(nkey0, key, keylen);
 c00138a:	687a      	ldr	r2, [r7, #4]
 c00138c:	68b9      	ldr	r1, [r7, #8]
 c00138e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 c001390:	f7ff fe68 	bl	c001064 <Hacl_Impl_SHA2_256_hash>
  }
  Hacl_Impl_HMAC_SHA2_256_hmac_core(mac, nkey, data, datalen);
 c001394:	f107 0110 	add.w	r1, r7, #16
 c001398:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c00139a:	683a      	ldr	r2, [r7, #0]
 c00139c:	68f8      	ldr	r0, [r7, #12]
 c00139e:	f7ff fef1 	bl	c001184 <Hacl_Impl_HMAC_SHA2_256_hmac_core>
}
 c0013a2:	bf00      	nop
 c0013a4:	3758      	adds	r7, #88	; 0x58
 c0013a6:	46bd      	mov	sp, r7
 c0013a8:	bd80      	pop	{r7, pc}

0c0013aa <hmac>:
{
  Hacl_Impl_HMAC_SHA2_256_hmac_core(mac, key, data, len);
}

void hmac(uint8_t *mac, uint8_t *key, uint32_t keylen, uint8_t *data, uint32_t datalen)
{
 c0013aa:	b580      	push	{r7, lr}
 c0013ac:	b086      	sub	sp, #24
 c0013ae:	af02      	add	r7, sp, #8
 c0013b0:	60f8      	str	r0, [r7, #12]
 c0013b2:	60b9      	str	r1, [r7, #8]
 c0013b4:	607a      	str	r2, [r7, #4]
 c0013b6:	603b      	str	r3, [r7, #0]
  Hacl_Impl_HMAC_SHA2_256_hmac(mac, key, keylen, data, datalen);
 c0013b8:	69bb      	ldr	r3, [r7, #24]
 c0013ba:	9300      	str	r3, [sp, #0]
 c0013bc:	683b      	ldr	r3, [r7, #0]
 c0013be:	687a      	ldr	r2, [r7, #4]
 c0013c0:	68b9      	ldr	r1, [r7, #8]
 c0013c2:	68f8      	ldr	r0, [r7, #12]
 c0013c4:	f7ff ffbd 	bl	c001342 <Hacl_Impl_HMAC_SHA2_256_hmac>
}
 c0013c8:	bf00      	nop
 c0013ca:	3710      	adds	r7, #16
 c0013cc:	46bd      	mov	sp, r7
 c0013ce:	bd80      	pop	{r7, pc}

0c0013d0 <load32>:
inline static uint32_t load32(uint8_t *b) {
 c0013d0:	b480      	push	{r7}
 c0013d2:	b085      	sub	sp, #20
 c0013d4:	af00      	add	r7, sp, #0
 c0013d6:	6078      	str	r0, [r7, #4]
 c0013d8:	687b      	ldr	r3, [r7, #4]
 c0013da:	681b      	ldr	r3, [r3, #0]
  memcpy(&x, b, 4);
 c0013dc:	60fb      	str	r3, [r7, #12]
  return x;
 c0013de:	68fb      	ldr	r3, [r7, #12]
}
 c0013e0:	4618      	mov	r0, r3
 c0013e2:	3714      	adds	r7, #20
 c0013e4:	46bd      	mov	sp, r7
 c0013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0013ea:	4770      	bx	lr

0c0013ec <store32>:
inline static void store32(uint8_t *b, uint32_t i) { memcpy(b, &i, 4); }
 c0013ec:	b480      	push	{r7}
 c0013ee:	b083      	sub	sp, #12
 c0013f0:	af00      	add	r7, sp, #0
 c0013f2:	6078      	str	r0, [r7, #4]
 c0013f4:	6039      	str	r1, [r7, #0]
 c0013f6:	683a      	ldr	r2, [r7, #0]
 c0013f8:	687b      	ldr	r3, [r7, #4]
 c0013fa:	601a      	str	r2, [r3, #0]
 c0013fc:	bf00      	nop
 c0013fe:	370c      	adds	r7, #12
 c001400:	46bd      	mov	sp, r7
 c001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001406:	4770      	bx	lr

0c001408 <store64>:
inline static void store64(uint8_t *b, uint64_t i) { memcpy(b, &i, 8); }
 c001408:	b580      	push	{r7, lr}
 c00140a:	b084      	sub	sp, #16
 c00140c:	af00      	add	r7, sp, #0
 c00140e:	60f8      	str	r0, [r7, #12]
 c001410:	e9c7 2300 	strd	r2, r3, [r7]
 c001414:	463b      	mov	r3, r7
 c001416:	2208      	movs	r2, #8
 c001418:	4619      	mov	r1, r3
 c00141a:	68f8      	ldr	r0, [r7, #12]
 c00141c:	f006 fcac 	bl	c007d78 <memcpy>
 c001420:	bf00      	nop
 c001422:	3710      	adds	r7, #16
 c001424:	46bd      	mov	sp, r7
 c001426:	bd80      	pop	{r7, pc}

0c001428 <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes>:

#include "Hacl_SHA2_256.h"

static void
Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes(uint32_t *output, uint8_t *input, uint32_t len)
{
 c001428:	b580      	push	{r7, lr}
 c00142a:	b088      	sub	sp, #32
 c00142c:	af00      	add	r7, sp, #0
 c00142e:	60f8      	str	r0, [r7, #12]
 c001430:	60b9      	str	r1, [r7, #8]
 c001432:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c001434:	2300      	movs	r3, #0
 c001436:	61fb      	str	r3, [r7, #28]
 c001438:	e021      	b.n	c00147e <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes+0x56>
  {
    uint8_t *x0 = input + (uint32_t)4U * i;
 c00143a:	69fb      	ldr	r3, [r7, #28]
 c00143c:	009b      	lsls	r3, r3, #2
 c00143e:	68ba      	ldr	r2, [r7, #8]
 c001440:	4413      	add	r3, r2
 c001442:	61bb      	str	r3, [r7, #24]
    uint32_t inputi = load32_be(x0);
 c001444:	69b8      	ldr	r0, [r7, #24]
 c001446:	f7ff ffc3 	bl	c0013d0 <load32>
 c00144a:	6178      	str	r0, [r7, #20]
 c00144c:	697b      	ldr	r3, [r7, #20]
 c00144e:	0e1a      	lsrs	r2, r3, #24
 c001450:	697b      	ldr	r3, [r7, #20]
 c001452:	0a1b      	lsrs	r3, r3, #8
 c001454:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c001458:	431a      	orrs	r2, r3
 c00145a:	697b      	ldr	r3, [r7, #20]
 c00145c:	021b      	lsls	r3, r3, #8
 c00145e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c001462:	431a      	orrs	r2, r3
 c001464:	697b      	ldr	r3, [r7, #20]
 c001466:	061b      	lsls	r3, r3, #24
 c001468:	4313      	orrs	r3, r2
 c00146a:	613b      	str	r3, [r7, #16]
    output[i] = inputi;
 c00146c:	69fb      	ldr	r3, [r7, #28]
 c00146e:	009b      	lsls	r3, r3, #2
 c001470:	68fa      	ldr	r2, [r7, #12]
 c001472:	4413      	add	r3, r2
 c001474:	693a      	ldr	r2, [r7, #16]
 c001476:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c001478:	69fb      	ldr	r3, [r7, #28]
 c00147a:	3301      	adds	r3, #1
 c00147c:	61fb      	str	r3, [r7, #28]
 c00147e:	69fa      	ldr	r2, [r7, #28]
 c001480:	687b      	ldr	r3, [r7, #4]
 c001482:	429a      	cmp	r2, r3
 c001484:	d3d9      	bcc.n	c00143a <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes+0x12>
  }
}
 c001486:	bf00      	nop
 c001488:	bf00      	nop
 c00148a:	3720      	adds	r7, #32
 c00148c:	46bd      	mov	sp, r7
 c00148e:	bd80      	pop	{r7, pc}

0c001490 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes>:

static void
Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes(uint8_t *output, uint32_t *input, uint32_t len)
{
 c001490:	b580      	push	{r7, lr}
 c001492:	b088      	sub	sp, #32
 c001494:	af00      	add	r7, sp, #0
 c001496:	60f8      	str	r0, [r7, #12]
 c001498:	60b9      	str	r1, [r7, #8]
 c00149a:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c00149c:	2300      	movs	r3, #0
 c00149e:	61fb      	str	r3, [r7, #28]
 c0014a0:	e022      	b.n	c0014e8 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes+0x58>
  {
    uint32_t hd1 = input[i];
 c0014a2:	69fb      	ldr	r3, [r7, #28]
 c0014a4:	009b      	lsls	r3, r3, #2
 c0014a6:	68ba      	ldr	r2, [r7, #8]
 c0014a8:	4413      	add	r3, r2
 c0014aa:	681b      	ldr	r3, [r3, #0]
 c0014ac:	61bb      	str	r3, [r7, #24]
    uint8_t *x0 = output + (uint32_t)4U * i;
 c0014ae:	69fb      	ldr	r3, [r7, #28]
 c0014b0:	009b      	lsls	r3, r3, #2
 c0014b2:	68fa      	ldr	r2, [r7, #12]
 c0014b4:	4413      	add	r3, r2
 c0014b6:	617b      	str	r3, [r7, #20]
    store32_be(x0, hd1);
 c0014b8:	69bb      	ldr	r3, [r7, #24]
 c0014ba:	613b      	str	r3, [r7, #16]
 c0014bc:	693b      	ldr	r3, [r7, #16]
 c0014be:	0e1a      	lsrs	r2, r3, #24
 c0014c0:	693b      	ldr	r3, [r7, #16]
 c0014c2:	0a1b      	lsrs	r3, r3, #8
 c0014c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c0014c8:	431a      	orrs	r2, r3
 c0014ca:	693b      	ldr	r3, [r7, #16]
 c0014cc:	021b      	lsls	r3, r3, #8
 c0014ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c0014d2:	431a      	orrs	r2, r3
 c0014d4:	693b      	ldr	r3, [r7, #16]
 c0014d6:	061b      	lsls	r3, r3, #24
 c0014d8:	4313      	orrs	r3, r2
 c0014da:	4619      	mov	r1, r3
 c0014dc:	6978      	ldr	r0, [r7, #20]
 c0014de:	f7ff ff85 	bl	c0013ec <store32>
  for (uint32_t i = (uint32_t)0U; i < len; i = i + (uint32_t)1U)
 c0014e2:	69fb      	ldr	r3, [r7, #28]
 c0014e4:	3301      	adds	r3, #1
 c0014e6:	61fb      	str	r3, [r7, #28]
 c0014e8:	69fa      	ldr	r2, [r7, #28]
 c0014ea:	687b      	ldr	r3, [r7, #4]
 c0014ec:	429a      	cmp	r2, r3
 c0014ee:	d3d8      	bcc.n	c0014a2 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes+0x12>
  }
}
 c0014f0:	bf00      	nop
 c0014f2:	bf00      	nop
 c0014f4:	3720      	adds	r7, #32
 c0014f6:	46bd      	mov	sp, r7
 c0014f8:	bd80      	pop	{r7, pc}
	...

0c0014fc <Hacl_Impl_SHA2_256_init>:

static void Hacl_Impl_SHA2_256_init(uint32_t *state)
{
 c0014fc:	b480      	push	{r7}
 c0014fe:	b0a3      	sub	sp, #140	; 0x8c
 c001500:	af00      	add	r7, sp, #0
 c001502:	6078      	str	r0, [r7, #4]
  uint32_t *k1 = state;
 c001504:	687b      	ldr	r3, [r7, #4]
 c001506:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t *h_01 = state + (uint32_t)128U;
 c00150a:	687b      	ldr	r3, [r7, #4]
 c00150c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c001510:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t *p10 = k1;
 c001514:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c001518:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t *p20 = k1 + (uint32_t)16U;
 c00151a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c00151e:	3340      	adds	r3, #64	; 0x40
 c001520:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t *p3 = k1 + (uint32_t)32U;
 c001522:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c001526:	3380      	adds	r3, #128	; 0x80
 c001528:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t *p4 = k1 + (uint32_t)48U;
 c00152a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c00152e:	33c0      	adds	r3, #192	; 0xc0
 c001530:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t *p11 = p10;
 c001532:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 c001534:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t *p21 = p10 + (uint32_t)8U;
 c001536:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 c001538:	3320      	adds	r3, #32
 c00153a:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t *p12 = p11;
 c00153c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00153e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t *p22 = p11 + (uint32_t)4U;
 c001540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c001542:	3310      	adds	r3, #16
 c001544:	663b      	str	r3, [r7, #96]	; 0x60
  p12[0U] = (uint32_t)0x428a2f98U;
 c001546:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c001548:	4a8d      	ldr	r2, [pc, #564]	; (c001780 <Hacl_Impl_SHA2_256_init+0x284>)
 c00154a:	601a      	str	r2, [r3, #0]
  p12[1U] = (uint32_t)0x71374491U;
 c00154c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c00154e:	3304      	adds	r3, #4
 c001550:	4a8c      	ldr	r2, [pc, #560]	; (c001784 <Hacl_Impl_SHA2_256_init+0x288>)
 c001552:	601a      	str	r2, [r3, #0]
  p12[2U] = (uint32_t)0xb5c0fbcfU;
 c001554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c001556:	3308      	adds	r3, #8
 c001558:	4a8b      	ldr	r2, [pc, #556]	; (c001788 <Hacl_Impl_SHA2_256_init+0x28c>)
 c00155a:	601a      	str	r2, [r3, #0]
  p12[3U] = (uint32_t)0xe9b5dba5U;
 c00155c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c00155e:	330c      	adds	r3, #12
 c001560:	4a8a      	ldr	r2, [pc, #552]	; (c00178c <Hacl_Impl_SHA2_256_init+0x290>)
 c001562:	601a      	str	r2, [r3, #0]
  p22[0U] = (uint32_t)0x3956c25bU;
 c001564:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c001566:	4a8a      	ldr	r2, [pc, #552]	; (c001790 <Hacl_Impl_SHA2_256_init+0x294>)
 c001568:	601a      	str	r2, [r3, #0]
  p22[1U] = (uint32_t)0x59f111f1U;
 c00156a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c00156c:	3304      	adds	r3, #4
 c00156e:	4a89      	ldr	r2, [pc, #548]	; (c001794 <Hacl_Impl_SHA2_256_init+0x298>)
 c001570:	601a      	str	r2, [r3, #0]
  p22[2U] = (uint32_t)0x923f82a4U;
 c001572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c001574:	3308      	adds	r3, #8
 c001576:	4a88      	ldr	r2, [pc, #544]	; (c001798 <Hacl_Impl_SHA2_256_init+0x29c>)
 c001578:	601a      	str	r2, [r3, #0]
  p22[3U] = (uint32_t)0xab1c5ed5U;
 c00157a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 c00157c:	330c      	adds	r3, #12
 c00157e:	4a87      	ldr	r2, [pc, #540]	; (c00179c <Hacl_Impl_SHA2_256_init+0x2a0>)
 c001580:	601a      	str	r2, [r3, #0]
  uint32_t *p13 = p21;
 c001582:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c001584:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t *p23 = p21 + (uint32_t)4U;
 c001586:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c001588:	3310      	adds	r3, #16
 c00158a:	65bb      	str	r3, [r7, #88]	; 0x58
  p13[0U] = (uint32_t)0xd807aa98U;
 c00158c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00158e:	4a84      	ldr	r2, [pc, #528]	; (c0017a0 <Hacl_Impl_SHA2_256_init+0x2a4>)
 c001590:	601a      	str	r2, [r3, #0]
  p13[1U] = (uint32_t)0x12835b01U;
 c001592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c001594:	3304      	adds	r3, #4
 c001596:	4a83      	ldr	r2, [pc, #524]	; (c0017a4 <Hacl_Impl_SHA2_256_init+0x2a8>)
 c001598:	601a      	str	r2, [r3, #0]
  p13[2U] = (uint32_t)0x243185beU;
 c00159a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c00159c:	3308      	adds	r3, #8
 c00159e:	4a82      	ldr	r2, [pc, #520]	; (c0017a8 <Hacl_Impl_SHA2_256_init+0x2ac>)
 c0015a0:	601a      	str	r2, [r3, #0]
  p13[3U] = (uint32_t)0x550c7dc3U;
 c0015a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 c0015a4:	330c      	adds	r3, #12
 c0015a6:	4a81      	ldr	r2, [pc, #516]	; (c0017ac <Hacl_Impl_SHA2_256_init+0x2b0>)
 c0015a8:	601a      	str	r2, [r3, #0]
  p23[0U] = (uint32_t)0x72be5d74U;
 c0015aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0015ac:	4a80      	ldr	r2, [pc, #512]	; (c0017b0 <Hacl_Impl_SHA2_256_init+0x2b4>)
 c0015ae:	601a      	str	r2, [r3, #0]
  p23[1U] = (uint32_t)0x80deb1feU;
 c0015b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0015b2:	3304      	adds	r3, #4
 c0015b4:	4a7f      	ldr	r2, [pc, #508]	; (c0017b4 <Hacl_Impl_SHA2_256_init+0x2b8>)
 c0015b6:	601a      	str	r2, [r3, #0]
  p23[2U] = (uint32_t)0x9bdc06a7U;
 c0015b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0015ba:	3308      	adds	r3, #8
 c0015bc:	4a7e      	ldr	r2, [pc, #504]	; (c0017b8 <Hacl_Impl_SHA2_256_init+0x2bc>)
 c0015be:	601a      	str	r2, [r3, #0]
  p23[3U] = (uint32_t)0xc19bf174U;
 c0015c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0015c2:	330c      	adds	r3, #12
 c0015c4:	4a7d      	ldr	r2, [pc, #500]	; (c0017bc <Hacl_Impl_SHA2_256_init+0x2c0>)
 c0015c6:	601a      	str	r2, [r3, #0]
  uint32_t *p14 = p20;
 c0015c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c0015ca:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t *p24 = p20 + (uint32_t)8U;
 c0015cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c0015ce:	3320      	adds	r3, #32
 c0015d0:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t *p15 = p14;
 c0015d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c0015d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t *p25 = p14 + (uint32_t)4U;
 c0015d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c0015d8:	3310      	adds	r3, #16
 c0015da:	64bb      	str	r3, [r7, #72]	; 0x48
  p15[0U] = (uint32_t)0xe49b69c1U;
 c0015dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0015de:	4a78      	ldr	r2, [pc, #480]	; (c0017c0 <Hacl_Impl_SHA2_256_init+0x2c4>)
 c0015e0:	601a      	str	r2, [r3, #0]
  p15[1U] = (uint32_t)0xefbe4786U;
 c0015e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0015e4:	3304      	adds	r3, #4
 c0015e6:	4a77      	ldr	r2, [pc, #476]	; (c0017c4 <Hacl_Impl_SHA2_256_init+0x2c8>)
 c0015e8:	601a      	str	r2, [r3, #0]
  p15[2U] = (uint32_t)0x0fc19dc6U;
 c0015ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0015ec:	3308      	adds	r3, #8
 c0015ee:	4a76      	ldr	r2, [pc, #472]	; (c0017c8 <Hacl_Impl_SHA2_256_init+0x2cc>)
 c0015f0:	601a      	str	r2, [r3, #0]
  p15[3U] = (uint32_t)0x240ca1ccU;
 c0015f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0015f4:	330c      	adds	r3, #12
 c0015f6:	4a75      	ldr	r2, [pc, #468]	; (c0017cc <Hacl_Impl_SHA2_256_init+0x2d0>)
 c0015f8:	601a      	str	r2, [r3, #0]
  p25[0U] = (uint32_t)0x2de92c6fU;
 c0015fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c0015fc:	4a74      	ldr	r2, [pc, #464]	; (c0017d0 <Hacl_Impl_SHA2_256_init+0x2d4>)
 c0015fe:	601a      	str	r2, [r3, #0]
  p25[1U] = (uint32_t)0x4a7484aaU;
 c001600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c001602:	3304      	adds	r3, #4
 c001604:	4a73      	ldr	r2, [pc, #460]	; (c0017d4 <Hacl_Impl_SHA2_256_init+0x2d8>)
 c001606:	601a      	str	r2, [r3, #0]
  p25[2U] = (uint32_t)0x5cb0a9dcU;
 c001608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c00160a:	3308      	adds	r3, #8
 c00160c:	4a72      	ldr	r2, [pc, #456]	; (c0017d8 <Hacl_Impl_SHA2_256_init+0x2dc>)
 c00160e:	601a      	str	r2, [r3, #0]
  p25[3U] = (uint32_t)0x76f988daU;
 c001610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c001612:	330c      	adds	r3, #12
 c001614:	4a71      	ldr	r2, [pc, #452]	; (c0017dc <Hacl_Impl_SHA2_256_init+0x2e0>)
 c001616:	601a      	str	r2, [r3, #0]
  uint32_t *p16 = p24;
 c001618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00161a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t *p26 = p24 + (uint32_t)4U;
 c00161c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c00161e:	3310      	adds	r3, #16
 c001620:	643b      	str	r3, [r7, #64]	; 0x40
  p16[0U] = (uint32_t)0x983e5152U;
 c001622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c001624:	4a6e      	ldr	r2, [pc, #440]	; (c0017e0 <Hacl_Impl_SHA2_256_init+0x2e4>)
 c001626:	601a      	str	r2, [r3, #0]
  p16[1U] = (uint32_t)0xa831c66dU;
 c001628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00162a:	3304      	adds	r3, #4
 c00162c:	4a6d      	ldr	r2, [pc, #436]	; (c0017e4 <Hacl_Impl_SHA2_256_init+0x2e8>)
 c00162e:	601a      	str	r2, [r3, #0]
  p16[2U] = (uint32_t)0xb00327c8U;
 c001630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c001632:	3308      	adds	r3, #8
 c001634:	4a6c      	ldr	r2, [pc, #432]	; (c0017e8 <Hacl_Impl_SHA2_256_init+0x2ec>)
 c001636:	601a      	str	r2, [r3, #0]
  p16[3U] = (uint32_t)0xbf597fc7U;
 c001638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00163a:	330c      	adds	r3, #12
 c00163c:	4a6b      	ldr	r2, [pc, #428]	; (c0017ec <Hacl_Impl_SHA2_256_init+0x2f0>)
 c00163e:	601a      	str	r2, [r3, #0]
  p26[0U] = (uint32_t)0xc6e00bf3U;
 c001640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c001642:	4a6b      	ldr	r2, [pc, #428]	; (c0017f0 <Hacl_Impl_SHA2_256_init+0x2f4>)
 c001644:	601a      	str	r2, [r3, #0]
  p26[1U] = (uint32_t)0xd5a79147U;
 c001646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c001648:	3304      	adds	r3, #4
 c00164a:	4a6a      	ldr	r2, [pc, #424]	; (c0017f4 <Hacl_Impl_SHA2_256_init+0x2f8>)
 c00164c:	601a      	str	r2, [r3, #0]
  p26[2U] = (uint32_t)0x06ca6351U;
 c00164e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c001650:	3308      	adds	r3, #8
 c001652:	4a69      	ldr	r2, [pc, #420]	; (c0017f8 <Hacl_Impl_SHA2_256_init+0x2fc>)
 c001654:	601a      	str	r2, [r3, #0]
  p26[3U] = (uint32_t)0x14292967U;
 c001656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 c001658:	330c      	adds	r3, #12
 c00165a:	4a68      	ldr	r2, [pc, #416]	; (c0017fc <Hacl_Impl_SHA2_256_init+0x300>)
 c00165c:	601a      	str	r2, [r3, #0]
  uint32_t *p17 = p3;
 c00165e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c001660:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t *p27 = p3 + (uint32_t)8U;
 c001662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c001664:	3320      	adds	r3, #32
 c001666:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t *p18 = p17;
 c001668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c00166a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t *p28 = p17 + (uint32_t)4U;
 c00166c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c00166e:	3310      	adds	r3, #16
 c001670:	633b      	str	r3, [r7, #48]	; 0x30
  p18[0U] = (uint32_t)0x27b70a85U;
 c001672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c001674:	4a62      	ldr	r2, [pc, #392]	; (c001800 <Hacl_Impl_SHA2_256_init+0x304>)
 c001676:	601a      	str	r2, [r3, #0]
  p18[1U] = (uint32_t)0x2e1b2138U;
 c001678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00167a:	3304      	adds	r3, #4
 c00167c:	4a61      	ldr	r2, [pc, #388]	; (c001804 <Hacl_Impl_SHA2_256_init+0x308>)
 c00167e:	601a      	str	r2, [r3, #0]
  p18[2U] = (uint32_t)0x4d2c6dfcU;
 c001680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c001682:	3308      	adds	r3, #8
 c001684:	4a60      	ldr	r2, [pc, #384]	; (c001808 <Hacl_Impl_SHA2_256_init+0x30c>)
 c001686:	601a      	str	r2, [r3, #0]
  p18[3U] = (uint32_t)0x53380d13U;
 c001688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00168a:	330c      	adds	r3, #12
 c00168c:	4a5f      	ldr	r2, [pc, #380]	; (c00180c <Hacl_Impl_SHA2_256_init+0x310>)
 c00168e:	601a      	str	r2, [r3, #0]
  p28[0U] = (uint32_t)0x650a7354U;
 c001690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c001692:	4a5f      	ldr	r2, [pc, #380]	; (c001810 <Hacl_Impl_SHA2_256_init+0x314>)
 c001694:	601a      	str	r2, [r3, #0]
  p28[1U] = (uint32_t)0x766a0abbU;
 c001696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c001698:	3304      	adds	r3, #4
 c00169a:	4a5e      	ldr	r2, [pc, #376]	; (c001814 <Hacl_Impl_SHA2_256_init+0x318>)
 c00169c:	601a      	str	r2, [r3, #0]
  p28[2U] = (uint32_t)0x81c2c92eU;
 c00169e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c0016a0:	3308      	adds	r3, #8
 c0016a2:	4a5d      	ldr	r2, [pc, #372]	; (c001818 <Hacl_Impl_SHA2_256_init+0x31c>)
 c0016a4:	601a      	str	r2, [r3, #0]
  p28[3U] = (uint32_t)0x92722c85U;
 c0016a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c0016a8:	330c      	adds	r3, #12
 c0016aa:	4a5c      	ldr	r2, [pc, #368]	; (c00181c <Hacl_Impl_SHA2_256_init+0x320>)
 c0016ac:	601a      	str	r2, [r3, #0]
  uint32_t *p19 = p27;
 c0016ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t *p29 = p27 + (uint32_t)4U;
 c0016b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0016b4:	3310      	adds	r3, #16
 c0016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  p19[0U] = (uint32_t)0xa2bfe8a1U;
 c0016b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0016ba:	4a59      	ldr	r2, [pc, #356]	; (c001820 <Hacl_Impl_SHA2_256_init+0x324>)
 c0016bc:	601a      	str	r2, [r3, #0]
  p19[1U] = (uint32_t)0xa81a664bU;
 c0016be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0016c0:	3304      	adds	r3, #4
 c0016c2:	4a58      	ldr	r2, [pc, #352]	; (c001824 <Hacl_Impl_SHA2_256_init+0x328>)
 c0016c4:	601a      	str	r2, [r3, #0]
  p19[2U] = (uint32_t)0xc24b8b70U;
 c0016c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0016c8:	3308      	adds	r3, #8
 c0016ca:	4a57      	ldr	r2, [pc, #348]	; (c001828 <Hacl_Impl_SHA2_256_init+0x32c>)
 c0016cc:	601a      	str	r2, [r3, #0]
  p19[3U] = (uint32_t)0xc76c51a3U;
 c0016ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 c0016d0:	330c      	adds	r3, #12
 c0016d2:	4a56      	ldr	r2, [pc, #344]	; (c00182c <Hacl_Impl_SHA2_256_init+0x330>)
 c0016d4:	601a      	str	r2, [r3, #0]
  p29[0U] = (uint32_t)0xd192e819U;
 c0016d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0016d8:	4a55      	ldr	r2, [pc, #340]	; (c001830 <Hacl_Impl_SHA2_256_init+0x334>)
 c0016da:	601a      	str	r2, [r3, #0]
  p29[1U] = (uint32_t)0xd6990624U;
 c0016dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0016de:	3304      	adds	r3, #4
 c0016e0:	4a54      	ldr	r2, [pc, #336]	; (c001834 <Hacl_Impl_SHA2_256_init+0x338>)
 c0016e2:	601a      	str	r2, [r3, #0]
  p29[2U] = (uint32_t)0xf40e3585U;
 c0016e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0016e6:	3308      	adds	r3, #8
 c0016e8:	4a53      	ldr	r2, [pc, #332]	; (c001838 <Hacl_Impl_SHA2_256_init+0x33c>)
 c0016ea:	601a      	str	r2, [r3, #0]
  p29[3U] = (uint32_t)0x106aa070U;
 c0016ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0016ee:	330c      	adds	r3, #12
 c0016f0:	4a52      	ldr	r2, [pc, #328]	; (c00183c <Hacl_Impl_SHA2_256_init+0x340>)
 c0016f2:	601a      	str	r2, [r3, #0]
  uint32_t *p110 = p4;
 c0016f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c0016f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t *p210 = p4 + (uint32_t)8U;
 c0016f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c0016fa:	3320      	adds	r3, #32
 c0016fc:	623b      	str	r3, [r7, #32]
  uint32_t *p1 = p110;
 c0016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c001700:	61fb      	str	r3, [r7, #28]
  uint32_t *p211 = p110 + (uint32_t)4U;
 c001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c001704:	3310      	adds	r3, #16
 c001706:	61bb      	str	r3, [r7, #24]
  p1[0U] = (uint32_t)0x19a4c116U;
 c001708:	69fb      	ldr	r3, [r7, #28]
 c00170a:	4a4d      	ldr	r2, [pc, #308]	; (c001840 <Hacl_Impl_SHA2_256_init+0x344>)
 c00170c:	601a      	str	r2, [r3, #0]
  p1[1U] = (uint32_t)0x1e376c08U;
 c00170e:	69fb      	ldr	r3, [r7, #28]
 c001710:	3304      	adds	r3, #4
 c001712:	4a4c      	ldr	r2, [pc, #304]	; (c001844 <Hacl_Impl_SHA2_256_init+0x348>)
 c001714:	601a      	str	r2, [r3, #0]
  p1[2U] = (uint32_t)0x2748774cU;
 c001716:	69fb      	ldr	r3, [r7, #28]
 c001718:	3308      	adds	r3, #8
 c00171a:	4a4b      	ldr	r2, [pc, #300]	; (c001848 <Hacl_Impl_SHA2_256_init+0x34c>)
 c00171c:	601a      	str	r2, [r3, #0]
  p1[3U] = (uint32_t)0x34b0bcb5U;
 c00171e:	69fb      	ldr	r3, [r7, #28]
 c001720:	330c      	adds	r3, #12
 c001722:	4a4a      	ldr	r2, [pc, #296]	; (c00184c <Hacl_Impl_SHA2_256_init+0x350>)
 c001724:	601a      	str	r2, [r3, #0]
  p211[0U] = (uint32_t)0x391c0cb3U;
 c001726:	69bb      	ldr	r3, [r7, #24]
 c001728:	4a49      	ldr	r2, [pc, #292]	; (c001850 <Hacl_Impl_SHA2_256_init+0x354>)
 c00172a:	601a      	str	r2, [r3, #0]
  p211[1U] = (uint32_t)0x4ed8aa4aU;
 c00172c:	69bb      	ldr	r3, [r7, #24]
 c00172e:	3304      	adds	r3, #4
 c001730:	4a48      	ldr	r2, [pc, #288]	; (c001854 <Hacl_Impl_SHA2_256_init+0x358>)
 c001732:	601a      	str	r2, [r3, #0]
  p211[2U] = (uint32_t)0x5b9cca4fU;
 c001734:	69bb      	ldr	r3, [r7, #24]
 c001736:	3308      	adds	r3, #8
 c001738:	4a47      	ldr	r2, [pc, #284]	; (c001858 <Hacl_Impl_SHA2_256_init+0x35c>)
 c00173a:	601a      	str	r2, [r3, #0]
  p211[3U] = (uint32_t)0x682e6ff3U;
 c00173c:	69bb      	ldr	r3, [r7, #24]
 c00173e:	330c      	adds	r3, #12
 c001740:	4a46      	ldr	r2, [pc, #280]	; (c00185c <Hacl_Impl_SHA2_256_init+0x360>)
 c001742:	601a      	str	r2, [r3, #0]
  uint32_t *p111 = p210;
 c001744:	6a3b      	ldr	r3, [r7, #32]
 c001746:	617b      	str	r3, [r7, #20]
  uint32_t *p212 = p210 + (uint32_t)4U;
 c001748:	6a3b      	ldr	r3, [r7, #32]
 c00174a:	3310      	adds	r3, #16
 c00174c:	613b      	str	r3, [r7, #16]
  p111[0U] = (uint32_t)0x748f82eeU;
 c00174e:	697b      	ldr	r3, [r7, #20]
 c001750:	4a43      	ldr	r2, [pc, #268]	; (c001860 <Hacl_Impl_SHA2_256_init+0x364>)
 c001752:	601a      	str	r2, [r3, #0]
  p111[1U] = (uint32_t)0x78a5636fU;
 c001754:	697b      	ldr	r3, [r7, #20]
 c001756:	3304      	adds	r3, #4
 c001758:	4a42      	ldr	r2, [pc, #264]	; (c001864 <Hacl_Impl_SHA2_256_init+0x368>)
 c00175a:	601a      	str	r2, [r3, #0]
  p111[2U] = (uint32_t)0x84c87814U;
 c00175c:	697b      	ldr	r3, [r7, #20]
 c00175e:	3308      	adds	r3, #8
 c001760:	4a41      	ldr	r2, [pc, #260]	; (c001868 <Hacl_Impl_SHA2_256_init+0x36c>)
 c001762:	601a      	str	r2, [r3, #0]
  p111[3U] = (uint32_t)0x8cc70208U;
 c001764:	697b      	ldr	r3, [r7, #20]
 c001766:	330c      	adds	r3, #12
 c001768:	4a40      	ldr	r2, [pc, #256]	; (c00186c <Hacl_Impl_SHA2_256_init+0x370>)
 c00176a:	601a      	str	r2, [r3, #0]
  p212[0U] = (uint32_t)0x90befffaU;
 c00176c:	693b      	ldr	r3, [r7, #16]
 c00176e:	4a40      	ldr	r2, [pc, #256]	; (c001870 <Hacl_Impl_SHA2_256_init+0x374>)
 c001770:	601a      	str	r2, [r3, #0]
  p212[1U] = (uint32_t)0xa4506cebU;
 c001772:	693b      	ldr	r3, [r7, #16]
 c001774:	3304      	adds	r3, #4
 c001776:	4a3f      	ldr	r2, [pc, #252]	; (c001874 <Hacl_Impl_SHA2_256_init+0x378>)
 c001778:	601a      	str	r2, [r3, #0]
  p212[2U] = (uint32_t)0xbef9a3f7U;
 c00177a:	693b      	ldr	r3, [r7, #16]
 c00177c:	e07c      	b.n	c001878 <Hacl_Impl_SHA2_256_init+0x37c>
 c00177e:	bf00      	nop
 c001780:	428a2f98 	.word	0x428a2f98
 c001784:	71374491 	.word	0x71374491
 c001788:	b5c0fbcf 	.word	0xb5c0fbcf
 c00178c:	e9b5dba5 	.word	0xe9b5dba5
 c001790:	3956c25b 	.word	0x3956c25b
 c001794:	59f111f1 	.word	0x59f111f1
 c001798:	923f82a4 	.word	0x923f82a4
 c00179c:	ab1c5ed5 	.word	0xab1c5ed5
 c0017a0:	d807aa98 	.word	0xd807aa98
 c0017a4:	12835b01 	.word	0x12835b01
 c0017a8:	243185be 	.word	0x243185be
 c0017ac:	550c7dc3 	.word	0x550c7dc3
 c0017b0:	72be5d74 	.word	0x72be5d74
 c0017b4:	80deb1fe 	.word	0x80deb1fe
 c0017b8:	9bdc06a7 	.word	0x9bdc06a7
 c0017bc:	c19bf174 	.word	0xc19bf174
 c0017c0:	e49b69c1 	.word	0xe49b69c1
 c0017c4:	efbe4786 	.word	0xefbe4786
 c0017c8:	0fc19dc6 	.word	0x0fc19dc6
 c0017cc:	240ca1cc 	.word	0x240ca1cc
 c0017d0:	2de92c6f 	.word	0x2de92c6f
 c0017d4:	4a7484aa 	.word	0x4a7484aa
 c0017d8:	5cb0a9dc 	.word	0x5cb0a9dc
 c0017dc:	76f988da 	.word	0x76f988da
 c0017e0:	983e5152 	.word	0x983e5152
 c0017e4:	a831c66d 	.word	0xa831c66d
 c0017e8:	b00327c8 	.word	0xb00327c8
 c0017ec:	bf597fc7 	.word	0xbf597fc7
 c0017f0:	c6e00bf3 	.word	0xc6e00bf3
 c0017f4:	d5a79147 	.word	0xd5a79147
 c0017f8:	06ca6351 	.word	0x06ca6351
 c0017fc:	14292967 	.word	0x14292967
 c001800:	27b70a85 	.word	0x27b70a85
 c001804:	2e1b2138 	.word	0x2e1b2138
 c001808:	4d2c6dfc 	.word	0x4d2c6dfc
 c00180c:	53380d13 	.word	0x53380d13
 c001810:	650a7354 	.word	0x650a7354
 c001814:	766a0abb 	.word	0x766a0abb
 c001818:	81c2c92e 	.word	0x81c2c92e
 c00181c:	92722c85 	.word	0x92722c85
 c001820:	a2bfe8a1 	.word	0xa2bfe8a1
 c001824:	a81a664b 	.word	0xa81a664b
 c001828:	c24b8b70 	.word	0xc24b8b70
 c00182c:	c76c51a3 	.word	0xc76c51a3
 c001830:	d192e819 	.word	0xd192e819
 c001834:	d6990624 	.word	0xd6990624
 c001838:	f40e3585 	.word	0xf40e3585
 c00183c:	106aa070 	.word	0x106aa070
 c001840:	19a4c116 	.word	0x19a4c116
 c001844:	1e376c08 	.word	0x1e376c08
 c001848:	2748774c 	.word	0x2748774c
 c00184c:	34b0bcb5 	.word	0x34b0bcb5
 c001850:	391c0cb3 	.word	0x391c0cb3
 c001854:	4ed8aa4a 	.word	0x4ed8aa4a
 c001858:	5b9cca4f 	.word	0x5b9cca4f
 c00185c:	682e6ff3 	.word	0x682e6ff3
 c001860:	748f82ee 	.word	0x748f82ee
 c001864:	78a5636f 	.word	0x78a5636f
 c001868:	84c87814 	.word	0x84c87814
 c00186c:	8cc70208 	.word	0x8cc70208
 c001870:	90befffa 	.word	0x90befffa
 c001874:	a4506ceb 	.word	0xa4506ceb
 c001878:	3308      	adds	r3, #8
 c00187a:	4a18      	ldr	r2, [pc, #96]	; (c0018dc <Hacl_Impl_SHA2_256_init+0x3e0>)
 c00187c:	601a      	str	r2, [r3, #0]
  p212[3U] = (uint32_t)0xc67178f2U;
 c00187e:	693b      	ldr	r3, [r7, #16]
 c001880:	330c      	adds	r3, #12
 c001882:	4a17      	ldr	r2, [pc, #92]	; (c0018e0 <Hacl_Impl_SHA2_256_init+0x3e4>)
 c001884:	601a      	str	r2, [r3, #0]
  uint32_t *p112 = h_01;
 c001886:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c00188a:	60fb      	str	r3, [r7, #12]
  uint32_t *p2 = h_01 + (uint32_t)4U;
 c00188c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c001890:	3310      	adds	r3, #16
 c001892:	60bb      	str	r3, [r7, #8]
  p112[0U] = (uint32_t)0x6a09e667U;
 c001894:	68fb      	ldr	r3, [r7, #12]
 c001896:	4a13      	ldr	r2, [pc, #76]	; (c0018e4 <Hacl_Impl_SHA2_256_init+0x3e8>)
 c001898:	601a      	str	r2, [r3, #0]
  p112[1U] = (uint32_t)0xbb67ae85U;
 c00189a:	68fb      	ldr	r3, [r7, #12]
 c00189c:	3304      	adds	r3, #4
 c00189e:	4a12      	ldr	r2, [pc, #72]	; (c0018e8 <Hacl_Impl_SHA2_256_init+0x3ec>)
 c0018a0:	601a      	str	r2, [r3, #0]
  p112[2U] = (uint32_t)0x3c6ef372U;
 c0018a2:	68fb      	ldr	r3, [r7, #12]
 c0018a4:	3308      	adds	r3, #8
 c0018a6:	4a11      	ldr	r2, [pc, #68]	; (c0018ec <Hacl_Impl_SHA2_256_init+0x3f0>)
 c0018a8:	601a      	str	r2, [r3, #0]
  p112[3U] = (uint32_t)0xa54ff53aU;
 c0018aa:	68fb      	ldr	r3, [r7, #12]
 c0018ac:	330c      	adds	r3, #12
 c0018ae:	4a10      	ldr	r2, [pc, #64]	; (c0018f0 <Hacl_Impl_SHA2_256_init+0x3f4>)
 c0018b0:	601a      	str	r2, [r3, #0]
  p2[0U] = (uint32_t)0x510e527fU;
 c0018b2:	68bb      	ldr	r3, [r7, #8]
 c0018b4:	4a0f      	ldr	r2, [pc, #60]	; (c0018f4 <Hacl_Impl_SHA2_256_init+0x3f8>)
 c0018b6:	601a      	str	r2, [r3, #0]
  p2[1U] = (uint32_t)0x9b05688cU;
 c0018b8:	68bb      	ldr	r3, [r7, #8]
 c0018ba:	3304      	adds	r3, #4
 c0018bc:	4a0e      	ldr	r2, [pc, #56]	; (c0018f8 <Hacl_Impl_SHA2_256_init+0x3fc>)
 c0018be:	601a      	str	r2, [r3, #0]
  p2[2U] = (uint32_t)0x1f83d9abU;
 c0018c0:	68bb      	ldr	r3, [r7, #8]
 c0018c2:	3308      	adds	r3, #8
 c0018c4:	4a0d      	ldr	r2, [pc, #52]	; (c0018fc <Hacl_Impl_SHA2_256_init+0x400>)
 c0018c6:	601a      	str	r2, [r3, #0]
  p2[3U] = (uint32_t)0x5be0cd19U;
 c0018c8:	68bb      	ldr	r3, [r7, #8]
 c0018ca:	330c      	adds	r3, #12
 c0018cc:	4a0c      	ldr	r2, [pc, #48]	; (c001900 <Hacl_Impl_SHA2_256_init+0x404>)
 c0018ce:	601a      	str	r2, [r3, #0]
}
 c0018d0:	bf00      	nop
 c0018d2:	378c      	adds	r7, #140	; 0x8c
 c0018d4:	46bd      	mov	sp, r7
 c0018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0018da:	4770      	bx	lr
 c0018dc:	bef9a3f7 	.word	0xbef9a3f7
 c0018e0:	c67178f2 	.word	0xc67178f2
 c0018e4:	6a09e667 	.word	0x6a09e667
 c0018e8:	bb67ae85 	.word	0xbb67ae85
 c0018ec:	3c6ef372 	.word	0x3c6ef372
 c0018f0:	a54ff53a 	.word	0xa54ff53a
 c0018f4:	510e527f 	.word	0x510e527f
 c0018f8:	9b05688c 	.word	0x9b05688c
 c0018fc:	1f83d9ab 	.word	0x1f83d9ab
 c001900:	5be0cd19 	.word	0x5be0cd19

0c001904 <Hacl_Impl_SHA2_256_update>:

static void Hacl_Impl_SHA2_256_update(uint32_t *state, uint8_t *data)
{
 c001904:	b580      	push	{r7, lr}
 c001906:	b0bc      	sub	sp, #240	; 0xf0
 c001908:	af00      	add	r7, sp, #0
 c00190a:	6078      	str	r0, [r7, #4]
 c00190c:	6039      	str	r1, [r7, #0]
  uint32_t data_w[16U] = { 0U };
 c00190e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c001912:	2240      	movs	r2, #64	; 0x40
 c001914:	2100      	movs	r1, #0
 c001916:	4618      	mov	r0, r3
 c001918:	f006 fa3b 	bl	c007d92 <memset>
  Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes(data_w, data, (uint32_t)16U);
 c00191c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 c001920:	2210      	movs	r2, #16
 c001922:	6839      	ldr	r1, [r7, #0]
 c001924:	4618      	mov	r0, r3
 c001926:	f7ff fd7f 	bl	c001428 <Hacl_Hash_Lib_LoadStore_uint32s_from_be_bytes>
  uint32_t *hash_w = state + (uint32_t)128U;
 c00192a:	687b      	ldr	r3, [r7, #4]
 c00192c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c001930:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t *ws_w = state + (uint32_t)64U;
 c001934:	687b      	ldr	r3, [r7, #4]
 c001936:	f503 7380 	add.w	r3, r3, #256	; 0x100
 c00193a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t *k_w = state;
 c00193e:	687b      	ldr	r3, [r7, #4]
 c001940:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint32_t *counter_w = state + (uint32_t)136U;
 c001944:	687b      	ldr	r3, [r7, #4]
 c001946:	f503 7308 	add.w	r3, r3, #544	; 0x220
 c00194a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)16U; i = i + (uint32_t)1U)
 c00194e:	2300      	movs	r3, #0
 c001950:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c001954:	e014      	b.n	c001980 <Hacl_Impl_SHA2_256_update+0x7c>
  {
    uint32_t b = data_w[i];
 c001956:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c00195a:	009b      	lsls	r3, r3, #2
 c00195c:	33f0      	adds	r3, #240	; 0xf0
 c00195e:	443b      	add	r3, r7
 c001960:	f853 3cc4 	ldr.w	r3, [r3, #-196]
 c001964:	66fb      	str	r3, [r7, #108]	; 0x6c
    ws_w[i] = b;
 c001966:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c00196a:	009b      	lsls	r3, r3, #2
 c00196c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c001970:	4413      	add	r3, r2
 c001972:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 c001974:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)16U; i = i + (uint32_t)1U)
 c001976:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c00197a:	3301      	adds	r3, #1
 c00197c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 c001980:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 c001984:	2b0f      	cmp	r3, #15
 c001986:	d9e6      	bls.n	c001956 <Hacl_Impl_SHA2_256_update+0x52>
  }
  for (uint32_t i = (uint32_t)16U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c001988:	2310      	movs	r3, #16
 c00198a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 c00198e:	e050      	b.n	c001a32 <Hacl_Impl_SHA2_256_update+0x12e>
  {
    uint32_t t16 = ws_w[i - (uint32_t)16U];
 c001990:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c001994:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c001998:	3b10      	subs	r3, #16
 c00199a:	009b      	lsls	r3, r3, #2
 c00199c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c0019a0:	4413      	add	r3, r2
 c0019a2:	681b      	ldr	r3, [r3, #0]
 c0019a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint32_t t15 = ws_w[i - (uint32_t)15U];
 c0019a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c0019aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c0019ae:	3b0f      	subs	r3, #15
 c0019b0:	009b      	lsls	r3, r3, #2
 c0019b2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c0019b6:	4413      	add	r3, r2
 c0019b8:	681b      	ldr	r3, [r3, #0]
 c0019ba:	67bb      	str	r3, [r7, #120]	; 0x78
    uint32_t t7 = ws_w[i - (uint32_t)7U];
 c0019bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c0019c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c0019c4:	3b07      	subs	r3, #7
 c0019c6:	009b      	lsls	r3, r3, #2
 c0019c8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c0019cc:	4413      	add	r3, r2
 c0019ce:	681b      	ldr	r3, [r3, #0]
 c0019d0:	677b      	str	r3, [r7, #116]	; 0x74
    uint32_t t2 = ws_w[i - (uint32_t)2U];
 c0019d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c0019d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 c0019da:	3b02      	subs	r3, #2
 c0019dc:	009b      	lsls	r3, r3, #2
 c0019de:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c0019e2:	4413      	add	r3, r2
 c0019e4:	681b      	ldr	r3, [r3, #0]
 c0019e6:	673b      	str	r3, [r7, #112]	; 0x70
    ws_w[i] =
      ((t2 >> (uint32_t)17U | t2 << ((uint32_t)32U - (uint32_t)17U))
 c0019e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c0019ea:	ea4f 4273 	mov.w	r2, r3, ror #17
      ^ ((t2 >> (uint32_t)19U | t2 << ((uint32_t)32U - (uint32_t)19U)) ^ t2 >> (uint32_t)10U))
 c0019ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c0019f0:	ea4f 41f3 	mov.w	r1, r3, ror #19
 c0019f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 c0019f6:	0a9b      	lsrs	r3, r3, #10
 c0019f8:	404b      	eors	r3, r1
 c0019fa:	405a      	eors	r2, r3
      +
 c0019fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 c0019fe:	441a      	add	r2, r3
        t7
        +
          ((t15 >> (uint32_t)7U | t15 << ((uint32_t)32U - (uint32_t)7U))
 c001a00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c001a02:	ea4f 11f3 	mov.w	r1, r3, ror #7
          ^ ((t15 >> (uint32_t)18U | t15 << ((uint32_t)32U - (uint32_t)18U)) ^ t15 >> (uint32_t)3U))
 c001a06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c001a08:	ea4f 40b3 	mov.w	r0, r3, ror #18
 c001a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 c001a0e:	08db      	lsrs	r3, r3, #3
 c001a10:	4043      	eors	r3, r0
 c001a12:	404b      	eors	r3, r1
        +
 c001a14:	18d1      	adds	r1, r2, r3
    ws_w[i] =
 c001a16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c001a1a:	009b      	lsls	r3, r3, #2
 c001a1c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c001a20:	4413      	add	r3, r2
          + t16;
 c001a22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 c001a24:	440a      	add	r2, r1
    ws_w[i] =
 c001a26:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)16U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c001a28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c001a2c:	3301      	adds	r3, #1
 c001a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 c001a32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 c001a36:	2b3f      	cmp	r3, #63	; 0x3f
 c001a38:	d9aa      	bls.n	c001990 <Hacl_Impl_SHA2_256_update+0x8c>
  }
  uint32_t hash_0[8U] = { 0U };
 c001a3a:	f107 030c 	add.w	r3, r7, #12
 c001a3e:	2220      	movs	r2, #32
 c001a40:	2100      	movs	r1, #0
 c001a42:	4618      	mov	r0, r3
 c001a44:	f006 f9a5 	bl	c007d92 <memset>
  memcpy(hash_0, hash_w, (uint32_t)8U * sizeof hash_w[0U]);
 c001a48:	f107 030c 	add.w	r3, r7, #12
 c001a4c:	2220      	movs	r2, #32
 c001a4e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 c001a52:	4618      	mov	r0, r3
 c001a54:	f006 f990 	bl	c007d78 <memcpy>
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c001a58:	2300      	movs	r3, #0
 c001a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c001a5e:	e0b8      	b.n	c001bd2 <Hacl_Impl_SHA2_256_update+0x2ce>
  {
    uint32_t a = hash_0[0U];
 c001a60:	68fb      	ldr	r3, [r7, #12]
 c001a62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    uint32_t b = hash_0[1U];
 c001a66:	693b      	ldr	r3, [r7, #16]
 c001a68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    uint32_t c = hash_0[2U];
 c001a6c:	697b      	ldr	r3, [r7, #20]
 c001a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    uint32_t d = hash_0[3U];
 c001a72:	69bb      	ldr	r3, [r7, #24]
 c001a74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint32_t e = hash_0[4U];
 c001a78:	69fb      	ldr	r3, [r7, #28]
 c001a7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    uint32_t f1 = hash_0[5U];
 c001a7e:	6a3b      	ldr	r3, [r7, #32]
 c001a80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    uint32_t g = hash_0[6U];
 c001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c001a86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    uint32_t h = hash_0[7U];
 c001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c001a8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    uint32_t kt = k_w[i];
 c001a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c001a94:	009b      	lsls	r3, r3, #2
 c001a96:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 c001a9a:	4413      	add	r3, r2
 c001a9c:	681b      	ldr	r3, [r3, #0]
 c001a9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint32_t wst = ws_w[i];
 c001aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c001aa6:	009b      	lsls	r3, r3, #2
 c001aa8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c001aac:	4413      	add	r3, r2
 c001aae:	681b      	ldr	r3, [r3, #0]
 c001ab0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint32_t
    t1 =
      h
      +
        ((e >> (uint32_t)6U | e << ((uint32_t)32U - (uint32_t)6U))
 c001ab4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c001ab8:	ea4f 12b3 	mov.w	r2, r3, ror #6
        ^
          ((e >> (uint32_t)11U | e << ((uint32_t)32U - (uint32_t)11U))
 c001abc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c001ac0:	ea4f 21f3 	mov.w	r1, r3, ror #11
          ^ (e >> (uint32_t)25U | e << ((uint32_t)32U - (uint32_t)25U))))
 c001ac4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c001ac8:	ea4f 6373 	mov.w	r3, r3, ror #25
 c001acc:	404b      	eors	r3, r1
        ^
 c001ace:	405a      	eors	r2, r3
      +
 c001ad0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 c001ad4:	441a      	add	r2, r3
      + ((e & f1) ^ (~e & g))
 c001ad6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 c001ada:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 c001ade:	4019      	ands	r1, r3
 c001ae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c001ae4:	43d8      	mvns	r0, r3
 c001ae6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 c001aea:	4003      	ands	r3, r0
 c001aec:	404b      	eors	r3, r1
 c001aee:	441a      	add	r2, r3
      + kt
 c001af0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 c001af4:	4413      	add	r3, r2
    t1 =
 c001af6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 c001afa:	4413      	add	r3, r2
 c001afc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      + wst;
    uint32_t
    t2 =
      ((a >> (uint32_t)2U | a << ((uint32_t)32U - (uint32_t)2U))
 c001b00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c001b04:	ea4f 02b3 	mov.w	r2, r3, ror #2
      ^
        ((a >> (uint32_t)13U | a << ((uint32_t)32U - (uint32_t)13U))
 c001b08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c001b0c:	ea4f 3173 	mov.w	r1, r3, ror #13
        ^ (a >> (uint32_t)22U | a << ((uint32_t)32U - (uint32_t)22U))))
 c001b10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 c001b14:	ea4f 53b3 	mov.w	r3, r3, ror #22
 c001b18:	404b      	eors	r3, r1
      ^
 c001b1a:	405a      	eors	r2, r3
      + ((a & b) ^ ((a & c) ^ (b & c)));
 c001b1c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 c001b20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c001b24:	4019      	ands	r1, r3
 c001b26:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 c001b2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c001b2e:	4058      	eors	r0, r3
 c001b30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c001b34:	4003      	ands	r3, r0
 c001b36:	404b      	eors	r3, r1
    t2 =
 c001b38:	4413      	add	r3, r2
 c001b3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    uint32_t x1 = t1 + t2;
 c001b3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 c001b42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 c001b46:	4413      	add	r3, r2
 c001b48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint32_t x5 = d + t1;
 c001b4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 c001b50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 c001b54:	4413      	add	r3, r2
 c001b56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    uint32_t *p1 = hash_0;
 c001b5a:	f107 030c 	add.w	r3, r7, #12
 c001b5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint32_t *p2 = hash_0 + (uint32_t)4U;
 c001b62:	f107 030c 	add.w	r3, r7, #12
 c001b66:	3310      	adds	r3, #16
 c001b68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    p1[0U] = x1;
 c001b6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c001b70:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 c001b74:	601a      	str	r2, [r3, #0]
    p1[1U] = a;
 c001b76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c001b7a:	3304      	adds	r3, #4
 c001b7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 c001b80:	601a      	str	r2, [r3, #0]
    p1[2U] = b;
 c001b82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c001b86:	3308      	adds	r3, #8
 c001b88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 c001b8c:	601a      	str	r2, [r3, #0]
    p1[3U] = c;
 c001b8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 c001b92:	330c      	adds	r3, #12
 c001b94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 c001b98:	601a      	str	r2, [r3, #0]
    p2[0U] = x5;
 c001b9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c001b9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 c001ba2:	601a      	str	r2, [r3, #0]
    p2[1U] = e;
 c001ba4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c001ba8:	3304      	adds	r3, #4
 c001baa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 c001bae:	601a      	str	r2, [r3, #0]
    p2[2U] = f1;
 c001bb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c001bb4:	3308      	adds	r3, #8
 c001bb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 c001bba:	601a      	str	r2, [r3, #0]
    p2[3U] = g;
 c001bbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 c001bc0:	330c      	adds	r3, #12
 c001bc2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 c001bc6:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)64U; i = i + (uint32_t)1U)
 c001bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c001bcc:	3301      	adds	r3, #1
 c001bce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c001bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 c001bd6:	2b3f      	cmp	r3, #63	; 0x3f
 c001bd8:	f67f af42 	bls.w	c001a60 <Hacl_Impl_SHA2_256_update+0x15c>
  }
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)8U; i = i + (uint32_t)1U)
 c001bdc:	2300      	movs	r3, #0
 c001bde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c001be2:	e022      	b.n	c001c2a <Hacl_Impl_SHA2_256_update+0x326>
  {
    uint32_t xi = hash_w[i];
 c001be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c001be8:	009b      	lsls	r3, r3, #2
 c001bea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 c001bee:	4413      	add	r3, r2
 c001bf0:	681b      	ldr	r3, [r3, #0]
 c001bf2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32_t yi = hash_0[i];
 c001bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c001bfa:	009b      	lsls	r3, r3, #2
 c001bfc:	33f0      	adds	r3, #240	; 0xf0
 c001bfe:	443b      	add	r3, r7
 c001c00:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 c001c04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    hash_w[i] = xi + yi;
 c001c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c001c0c:	009b      	lsls	r3, r3, #2
 c001c0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 c001c12:	4413      	add	r3, r2
 c001c14:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 c001c18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 c001c1c:	440a      	add	r2, r1
 c001c1e:	601a      	str	r2, [r3, #0]
  for (uint32_t i = (uint32_t)0U; i < (uint32_t)8U; i = i + (uint32_t)1U)
 c001c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c001c24:	3301      	adds	r3, #1
 c001c26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c001c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 c001c2e:	2b07      	cmp	r3, #7
 c001c30:	d9d8      	bls.n	c001be4 <Hacl_Impl_SHA2_256_update+0x2e0>
  }
  uint32_t c0 = counter_w[0U];
 c001c32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c001c36:	681b      	ldr	r3, [r3, #0]
 c001c38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  uint32_t one1 = (uint32_t)1U;
 c001c3c:	2301      	movs	r3, #1
 c001c3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  counter_w[0U] = c0 + one1;
 c001c42:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 c001c46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 c001c4a:	441a      	add	r2, r3
 c001c4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c001c50:	601a      	str	r2, [r3, #0]
}
 c001c52:	bf00      	nop
 c001c54:	37f0      	adds	r7, #240	; 0xf0
 c001c56:	46bd      	mov	sp, r7
 c001c58:	bd80      	pop	{r7, pc}

0c001c5a <Hacl_Impl_SHA2_256_update_multi>:

static void Hacl_Impl_SHA2_256_update_multi(uint32_t *state, uint8_t *data, uint32_t n1)
{
 c001c5a:	b580      	push	{r7, lr}
 c001c5c:	b086      	sub	sp, #24
 c001c5e:	af00      	add	r7, sp, #0
 c001c60:	60f8      	str	r0, [r7, #12]
 c001c62:	60b9      	str	r1, [r7, #8]
 c001c64:	607a      	str	r2, [r7, #4]
  for (uint32_t i = (uint32_t)0U; i < n1; i = i + (uint32_t)1U)
 c001c66:	2300      	movs	r3, #0
 c001c68:	617b      	str	r3, [r7, #20]
 c001c6a:	e00b      	b.n	c001c84 <Hacl_Impl_SHA2_256_update_multi+0x2a>
  {
    uint8_t *b = data + i * (uint32_t)64U;
 c001c6c:	697b      	ldr	r3, [r7, #20]
 c001c6e:	019b      	lsls	r3, r3, #6
 c001c70:	68ba      	ldr	r2, [r7, #8]
 c001c72:	4413      	add	r3, r2
 c001c74:	613b      	str	r3, [r7, #16]
    Hacl_Impl_SHA2_256_update(state, b);
 c001c76:	6939      	ldr	r1, [r7, #16]
 c001c78:	68f8      	ldr	r0, [r7, #12]
 c001c7a:	f7ff fe43 	bl	c001904 <Hacl_Impl_SHA2_256_update>
  for (uint32_t i = (uint32_t)0U; i < n1; i = i + (uint32_t)1U)
 c001c7e:	697b      	ldr	r3, [r7, #20]
 c001c80:	3301      	adds	r3, #1
 c001c82:	617b      	str	r3, [r7, #20]
 c001c84:	697a      	ldr	r2, [r7, #20]
 c001c86:	687b      	ldr	r3, [r7, #4]
 c001c88:	429a      	cmp	r2, r3
 c001c8a:	d3ef      	bcc.n	c001c6c <Hacl_Impl_SHA2_256_update_multi+0x12>
  }
}
 c001c8c:	bf00      	nop
 c001c8e:	bf00      	nop
 c001c90:	3718      	adds	r7, #24
 c001c92:	46bd      	mov	sp, r7
 c001c94:	bd80      	pop	{r7, pc}

0c001c96 <Hacl_Impl_SHA2_256_update_last>:

static void Hacl_Impl_SHA2_256_update_last(uint32_t *state, uint8_t *data, uint32_t len)
{
 c001c96:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c001c9a:	b0ba      	sub	sp, #232	; 0xe8
 c001c9c:	af00      	add	r7, sp, #0
 c001c9e:	6278      	str	r0, [r7, #36]	; 0x24
 c001ca0:	6239      	str	r1, [r7, #32]
 c001ca2:	61fa      	str	r2, [r7, #28]
  uint8_t blocks[128U] = { 0U };
 c001ca4:	2300      	movs	r3, #0
 c001ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 c001ca8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 c001cac:	237c      	movs	r3, #124	; 0x7c
 c001cae:	461a      	mov	r2, r3
 c001cb0:	2100      	movs	r1, #0
 c001cb2:	f006 f86e 	bl	c007d92 <memset>
  uint32_t nb;
  if (len < (uint32_t)56U)
 c001cb6:	69fb      	ldr	r3, [r7, #28]
 c001cb8:	2b37      	cmp	r3, #55	; 0x37
 c001cba:	d803      	bhi.n	c001cc4 <Hacl_Impl_SHA2_256_update_last+0x2e>
    nb = (uint32_t)1U;
 c001cbc:	2301      	movs	r3, #1
 c001cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 c001cc2:	e002      	b.n	c001cca <Hacl_Impl_SHA2_256_update_last+0x34>
  else
    nb = (uint32_t)2U;
 c001cc4:	2302      	movs	r3, #2
 c001cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint8_t *final_blocks;
  if (len < (uint32_t)56U)
 c001cca:	69fb      	ldr	r3, [r7, #28]
 c001ccc:	2b37      	cmp	r3, #55	; 0x37
 c001cce:	d805      	bhi.n	c001cdc <Hacl_Impl_SHA2_256_update_last+0x46>
    final_blocks = blocks + (uint32_t)64U;
 c001cd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 c001cd4:	3340      	adds	r3, #64	; 0x40
 c001cd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 c001cda:	e003      	b.n	c001ce4 <Hacl_Impl_SHA2_256_update_last+0x4e>
  else
    final_blocks = blocks;
 c001cdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 c001ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  memcpy(final_blocks, data, len * sizeof data[0U]);
 c001ce4:	69fa      	ldr	r2, [r7, #28]
 c001ce6:	6a39      	ldr	r1, [r7, #32]
 c001ce8:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 c001cec:	f006 f844 	bl	c007d78 <memcpy>
  uint32_t n1 = state[136U];
 c001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c001cf2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 c001cf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint8_t *padding = final_blocks + len;
 c001cfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 c001cfe:	69fb      	ldr	r3, [r7, #28]
 c001d00:	4413      	add	r3, r2
 c001d02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t
  pad0len = ((uint32_t)64U - (len + (uint32_t)8U + (uint32_t)1U) % (uint32_t)64U) % (uint32_t)64U;
 c001d06:	69fa      	ldr	r2, [r7, #28]
 c001d08:	f06f 0308 	mvn.w	r3, #8
 c001d0c:	1a9b      	subs	r3, r3, r2
 c001d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c001d12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint8_t *buf1 = padding;
 c001d16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 c001d1a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  uint8_t *buf2 = padding + (uint32_t)1U + pad0len;
 c001d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 c001d22:	3301      	adds	r3, #1
 c001d24:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 c001d28:	4413      	add	r3, r2
 c001d2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  uint64_t
  encodedlen = ((uint64_t)n1 * (uint64_t)(uint32_t)64U + (uint64_t)len) * (uint64_t)(uint32_t)8U;
 c001d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 c001d32:	2200      	movs	r2, #0
 c001d34:	4698      	mov	r8, r3
 c001d36:	4691      	mov	r9, r2
 c001d38:	f04f 0200 	mov.w	r2, #0
 c001d3c:	f04f 0300 	mov.w	r3, #0
 c001d40:	ea4f 1389 	mov.w	r3, r9, lsl #6
 c001d44:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 c001d48:	ea4f 1288 	mov.w	r2, r8, lsl #6
 c001d4c:	69f9      	ldr	r1, [r7, #28]
 c001d4e:	2000      	movs	r0, #0
 c001d50:	6139      	str	r1, [r7, #16]
 c001d52:	6178      	str	r0, [r7, #20]
 c001d54:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 c001d58:	4641      	mov	r1, r8
 c001d5a:	1854      	adds	r4, r2, r1
 c001d5c:	4649      	mov	r1, r9
 c001d5e:	eb43 0101 	adc.w	r1, r3, r1
 c001d62:	460d      	mov	r5, r1
 c001d64:	f04f 0200 	mov.w	r2, #0
 c001d68:	f04f 0300 	mov.w	r3, #0
 c001d6c:	00eb      	lsls	r3, r5, #3
 c001d6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 c001d72:	00e2      	lsls	r2, r4, #3
 c001d74:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  buf1[0U] = (uint8_t)0x80U;
 c001d78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 c001d7c:	2280      	movs	r2, #128	; 0x80
 c001d7e:	701a      	strb	r2, [r3, #0]
  store64_be(buf2, encodedlen);
 c001d80:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 c001d84:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 c001d88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 c001d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 c001d90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c001d94:	0e1a      	lsrs	r2, r3, #24
 c001d96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c001d9a:	0a1b      	lsrs	r3, r3, #8
 c001d9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c001da0:	431a      	orrs	r2, r3
 c001da2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c001da6:	021b      	lsls	r3, r3, #8
 c001da8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c001dac:	431a      	orrs	r2, r3
 c001dae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 c001db2:	061b      	lsls	r3, r3, #24
 c001db4:	4313      	orrs	r3, r2
 c001db6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 c001dba:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 c001dbe:	f04f 0200 	mov.w	r2, #0
 c001dc2:	f04f 0300 	mov.w	r3, #0
 c001dc6:	000a      	movs	r2, r1
 c001dc8:	2300      	movs	r3, #0
 c001dca:	4613      	mov	r3, r2
 c001dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 c001dd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c001dd4:	0e1a      	lsrs	r2, r3, #24
 c001dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c001dda:	0a1b      	lsrs	r3, r3, #8
 c001ddc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 c001de0:	431a      	orrs	r2, r3
 c001de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c001de6:	021b      	lsls	r3, r3, #8
 c001de8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c001dec:	431a      	orrs	r2, r3
 c001dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 c001df2:	061b      	lsls	r3, r3, #24
 c001df4:	4313      	orrs	r3, r2
 c001df6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 c001dfa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 c001dfe:	2200      	movs	r2, #0
 c001e00:	60bb      	str	r3, [r7, #8]
 c001e02:	60fa      	str	r2, [r7, #12]
 c001e04:	f04f 0200 	mov.w	r2, #0
 c001e08:	f04f 0300 	mov.w	r3, #0
 c001e0c:	68b9      	ldr	r1, [r7, #8]
 c001e0e:	000b      	movs	r3, r1
 c001e10:	2200      	movs	r2, #0
 c001e12:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 c001e16:	2000      	movs	r0, #0
 c001e18:	468a      	mov	sl, r1
 c001e1a:	4683      	mov	fp, r0
 c001e1c:	ea42 010a 	orr.w	r1, r2, sl
 c001e20:	6039      	str	r1, [r7, #0]
 c001e22:	ea43 030b 	orr.w	r3, r3, fp
 c001e26:	607b      	str	r3, [r7, #4]
 c001e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 c001e2c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 c001e30:	f7ff faea 	bl	c001408 <store64>
  Hacl_Impl_SHA2_256_update_multi(state, final_blocks, nb);
 c001e34:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 c001e38:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 c001e3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 c001e3e:	f7ff ff0c 	bl	c001c5a <Hacl_Impl_SHA2_256_update_multi>
}
 c001e42:	bf00      	nop
 c001e44:	37e8      	adds	r7, #232	; 0xe8
 c001e46:	46bd      	mov	sp, r7
 c001e48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c001e4c <Hacl_Impl_SHA2_256_finish>:

static void Hacl_Impl_SHA2_256_finish(uint32_t *state, uint8_t *hash1)
{
 c001e4c:	b580      	push	{r7, lr}
 c001e4e:	b084      	sub	sp, #16
 c001e50:	af00      	add	r7, sp, #0
 c001e52:	6078      	str	r0, [r7, #4]
 c001e54:	6039      	str	r1, [r7, #0]
  uint32_t *hash_w = state + (uint32_t)128U;
 c001e56:	687b      	ldr	r3, [r7, #4]
 c001e58:	f503 7300 	add.w	r3, r3, #512	; 0x200
 c001e5c:	60fb      	str	r3, [r7, #12]
  Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes(hash1, hash_w, (uint32_t)8U);
 c001e5e:	2208      	movs	r2, #8
 c001e60:	68f9      	ldr	r1, [r7, #12]
 c001e62:	6838      	ldr	r0, [r7, #0]
 c001e64:	f7ff fb14 	bl	c001490 <Hacl_Hash_Lib_LoadStore_uint32s_to_be_bytes>
}
 c001e68:	bf00      	nop
 c001e6a:	3710      	adds	r7, #16
 c001e6c:	46bd      	mov	sp, r7
 c001e6e:	bd80      	pop	{r7, pc}

0c001e70 <Hacl_Impl_SHA2_256_hash>:

static void Hacl_Impl_SHA2_256_hash(uint8_t *hash1, uint8_t *input, uint32_t len)
{
 c001e70:	b580      	push	{r7, lr}
 c001e72:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 c001e76:	af00      	add	r7, sp, #0
 c001e78:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001e7c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 c001e80:	6018      	str	r0, [r3, #0]
 c001e82:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001e86:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 c001e8a:	6019      	str	r1, [r3, #0]
 c001e8c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001e90:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c001e94:	601a      	str	r2, [r3, #0]
  uint32_t state[137U] = { 0U };
 c001e96:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001e9a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 c001e9e:	4618      	mov	r0, r3
 c001ea0:	f44f 7309 	mov.w	r3, #548	; 0x224
 c001ea4:	461a      	mov	r2, r3
 c001ea6:	2100      	movs	r1, #0
 c001ea8:	f005 ff73 	bl	c007d92 <memset>
  uint32_t n1 = len / (uint32_t)64U;
 c001eac:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001eb0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c001eb4:	681b      	ldr	r3, [r3, #0]
 c001eb6:	099b      	lsrs	r3, r3, #6
 c001eb8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  uint32_t r = len % (uint32_t)64U;
 c001ebc:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001ec0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 c001ec4:	681b      	ldr	r3, [r3, #0]
 c001ec6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 c001eca:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
  uint8_t *input_blocks = input;
 c001ece:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001ed2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 c001ed6:	681b      	ldr	r3, [r3, #0]
 c001ed8:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  uint8_t *input_last = input + n1 * (uint32_t)64U;
 c001edc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 c001ee0:	019b      	lsls	r3, r3, #6
 c001ee2:	f507 7212 	add.w	r2, r7, #584	; 0x248
 c001ee6:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 c001eea:	6812      	ldr	r2, [r2, #0]
 c001eec:	4413      	add	r3, r2
 c001eee:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
  Hacl_Impl_SHA2_256_init(state);
 c001ef2:	f107 0314 	add.w	r3, r7, #20
 c001ef6:	4618      	mov	r0, r3
 c001ef8:	f7ff fb00 	bl	c0014fc <Hacl_Impl_SHA2_256_init>
  Hacl_Impl_SHA2_256_update_multi(state, input_blocks, n1);
 c001efc:	f107 0314 	add.w	r3, r7, #20
 c001f00:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 c001f04:	f8d7 123c 	ldr.w	r1, [r7, #572]	; 0x23c
 c001f08:	4618      	mov	r0, r3
 c001f0a:	f7ff fea6 	bl	c001c5a <Hacl_Impl_SHA2_256_update_multi>
  Hacl_Impl_SHA2_256_update_last(state, input_last, r);
 c001f0e:	f107 0314 	add.w	r3, r7, #20
 c001f12:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 c001f16:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 c001f1a:	4618      	mov	r0, r3
 c001f1c:	f7ff febb 	bl	c001c96 <Hacl_Impl_SHA2_256_update_last>
  Hacl_Impl_SHA2_256_finish(state, hash1);
 c001f20:	f507 7312 	add.w	r3, r7, #584	; 0x248
 c001f24:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 c001f28:	f107 0214 	add.w	r2, r7, #20
 c001f2c:	6819      	ldr	r1, [r3, #0]
 c001f2e:	4610      	mov	r0, r2
 c001f30:	f7ff ff8c 	bl	c001e4c <Hacl_Impl_SHA2_256_finish>
}
 c001f34:	bf00      	nop
 c001f36:	f507 7712 	add.w	r7, r7, #584	; 0x248
 c001f3a:	46bd      	mov	sp, r7
 c001f3c:	bd80      	pop	{r7, pc}

0c001f3e <Hacl_SHA2_256_hash>:
{
  Hacl_Impl_SHA2_256_finish(state, hash1);
}

void Hacl_SHA2_256_hash(uint8_t *hash1, uint8_t *input, uint32_t len)
{
 c001f3e:	b580      	push	{r7, lr}
 c001f40:	b084      	sub	sp, #16
 c001f42:	af00      	add	r7, sp, #0
 c001f44:	60f8      	str	r0, [r7, #12]
 c001f46:	60b9      	str	r1, [r7, #8]
 c001f48:	607a      	str	r2, [r7, #4]
  Hacl_Impl_SHA2_256_hash(hash1, input, len);
 c001f4a:	687a      	ldr	r2, [r7, #4]
 c001f4c:	68b9      	ldr	r1, [r7, #8]
 c001f4e:	68f8      	ldr	r0, [r7, #12]
 c001f50:	f7ff ff8e 	bl	c001e70 <Hacl_Impl_SHA2_256_hash>
}
 c001f54:	bf00      	nop
 c001f56:	3710      	adds	r7, #16
 c001f58:	46bd      	mov	sp, r7
 c001f5a:	bd80      	pop	{r7, pc}

0c001f5c <_setup_data>:
	----------------------------- SUPERVISOR  --------------------------------------------
	---------------------------------------------------------------------------------
*/

//-------------------------- UTILS -------//
void _setup_data(){
 c001f5c:	b480      	push	{r7}
 c001f5e:	b083      	sub	sp, #12
 c001f60:	af00      	add	r7, sp, #0
	for(unsigned int i = 0; i < CHAL_SIZE; ++i ){
 c001f62:	2300      	movs	r3, #0
 c001f64:	607b      	str	r3, [r7, #4]
 c001f66:	e014      	b.n	c001f92 <_setup_data+0x36>
		cfa_engine_conf.hash_key[i] = i;
 c001f68:	687b      	ldr	r3, [r7, #4]
 c001f6a:	b2d9      	uxtb	r1, r3
 c001f6c:	4a0e      	ldr	r2, [pc, #56]	; (c001fa8 <_setup_data+0x4c>)
 c001f6e:	687b      	ldr	r3, [r7, #4]
 c001f70:	4413      	add	r3, r2
 c001f72:	334a      	adds	r3, #74	; 0x4a
 c001f74:	460a      	mov	r2, r1
 c001f76:	701a      	strb	r2, [r3, #0]
		cfa_engine_conf.challenge[i] = 0x65+i;
 c001f78:	687b      	ldr	r3, [r7, #4]
 c001f7a:	b2db      	uxtb	r3, r3
 c001f7c:	3365      	adds	r3, #101	; 0x65
 c001f7e:	b2d9      	uxtb	r1, r3
 c001f80:	4a09      	ldr	r2, [pc, #36]	; (c001fa8 <_setup_data+0x4c>)
 c001f82:	687b      	ldr	r3, [r7, #4]
 c001f84:	4413      	add	r3, r2
 c001f86:	3308      	adds	r3, #8
 c001f88:	460a      	mov	r2, r1
 c001f8a:	701a      	strb	r2, [r3, #0]
	for(unsigned int i = 0; i < CHAL_SIZE; ++i ){
 c001f8c:	687b      	ldr	r3, [r7, #4]
 c001f8e:	3301      	adds	r3, #1
 c001f90:	607b      	str	r3, [r7, #4]
 c001f92:	687b      	ldr	r3, [r7, #4]
 c001f94:	2b3f      	cmp	r3, #63	; 0x3f
 c001f96:	d9e7      	bls.n	c001f68 <_setup_data+0xc>
	}
}
 c001f98:	bf00      	nop
 c001f9a:	bf00      	nop
 c001f9c:	370c      	adds	r7, #12
 c001f9e:	46bd      	mov	sp, r7
 c001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001fa4:	4770      	bx	lr
 c001fa6:	bf00      	nop
 c001fa8:	300004b8 	.word	0x300004b8

0c001fac <_update_challenge>:

void _update_challenge(uint8_t* chl){
 c001fac:	b4f0      	push	{r4, r5, r6, r7}
 c001fae:	b082      	sub	sp, #8
 c001fb0:	af00      	add	r7, sp, #0
 c001fb2:	6078      	str	r0, [r7, #4]
	memcpy(cfa_engine_conf.challenge,chl, CHAL_SIZE);
 c001fb4:	4b15      	ldr	r3, [pc, #84]	; (c00200c <_update_challenge+0x60>)
 c001fb6:	687a      	ldr	r2, [r7, #4]
 c001fb8:	4614      	mov	r4, r2
 c001fba:	f103 0608 	add.w	r6, r3, #8
 c001fbe:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 c001fc2:	4635      	mov	r5, r6
 c001fc4:	4623      	mov	r3, r4
 c001fc6:	6818      	ldr	r0, [r3, #0]
 c001fc8:	6859      	ldr	r1, [r3, #4]
 c001fca:	689a      	ldr	r2, [r3, #8]
 c001fcc:	68db      	ldr	r3, [r3, #12]
 c001fce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 c001fd0:	3410      	adds	r4, #16
 c001fd2:	3610      	adds	r6, #16
 c001fd4:	4564      	cmp	r4, ip
 c001fd6:	d1f4      	bne.n	c001fc2 <_update_challenge+0x16>
	memcpy(vrf_resp.new_challenge,chl, CHAL_SIZE);
 c001fd8:	4a0d      	ldr	r2, [pc, #52]	; (c002010 <_update_challenge+0x64>)
 c001fda:	687b      	ldr	r3, [r7, #4]
 c001fdc:	461c      	mov	r4, r3
 c001fde:	4616      	mov	r6, r2
 c001fe0:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 c001fe4:	4635      	mov	r5, r6
 c001fe6:	4623      	mov	r3, r4
 c001fe8:	6818      	ldr	r0, [r3, #0]
 c001fea:	6859      	ldr	r1, [r3, #4]
 c001fec:	689a      	ldr	r2, [r3, #8]
 c001fee:	68db      	ldr	r3, [r3, #12]
 c001ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 c001ff2:	3410      	adds	r4, #16
 c001ff4:	3610      	adds	r6, #16
 c001ff6:	4564      	cmp	r4, ip
 c001ff8:	d1f4      	bne.n	c001fe4 <_update_challenge+0x38>
	cfa_engine_conf.challenge_renewed = TRUE;
 c001ffa:	4b04      	ldr	r3, [pc, #16]	; (c00200c <_update_challenge+0x60>)
 c001ffc:	2201      	movs	r2, #1
 c001ffe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 c002002:	bf00      	nop
 c002004:	3708      	adds	r7, #8
 c002006:	46bd      	mov	sp, r7
 c002008:	bcf0      	pop	{r4, r5, r6, r7}
 c00200a:	4770      	bx	lr
 c00200c:	300004b8 	.word	0x300004b8
 c002010:	30000544 	.word	0x30000544

0c002014 <_clean>:

void _clean(){
 c002014:	b480      	push	{r7}
 c002016:	b083      	sub	sp, #12
 c002018:	af00      	add	r7, sp, #0
	cfa_engine_conf.log_counter = 0;
 c00201a:	4b18      	ldr	r3, [pc, #96]	; (c00207c <_clean+0x68>)
 c00201c:	2200      	movs	r2, #0
 c00201e:	80da      	strh	r2, [r3, #6]
	report_secure.number_of_logs_sent = 0;
 c002020:	4b17      	ldr	r3, [pc, #92]	; (c002080 <_clean+0x6c>)
 c002022:	2200      	movs	r2, #0
 c002024:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
	cfa_engine_conf.initialized = INITIALIZED;
 c002028:	4b14      	ldr	r3, [pc, #80]	; (c00207c <_clean+0x68>)
 c00202a:	22ee      	movs	r2, #238	; 0xee
 c00202c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	cfa_engine_conf.attestation_status = INACTIVE;
 c002030:	4b12      	ldr	r3, [pc, #72]	; (c00207c <_clean+0x68>)
 c002032:	2200      	movs	r2, #0
 c002034:	711a      	strb	r2, [r3, #4]
	report_secure.num_CF_Log_size = 0;
 c002036:	4b12      	ldr	r3, [pc, #72]	; (c002080 <_clean+0x6c>)
 c002038:	2200      	movs	r2, #0
 c00203a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	cfa_engine_conf.challenge_renewed = FALSE;
 c00203e:	4b0f      	ldr	r3, [pc, #60]	; (c00207c <_clean+0x68>)
 c002040:	2200      	movs	r2, #0
 c002042:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	report_secure.isFinal = FALSE;
 c002046:	4b0e      	ldr	r3, [pc, #56]	; (c002080 <_clean+0x6c>)
 c002048:	2200      	movs	r2, #0
 c00204a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	for(int i=0; i<MAX_CF_LOG_SIZE; i++){
 c00204e:	2300      	movs	r3, #0
 c002050:	607b      	str	r3, [r7, #4]
 c002052:	e009      	b.n	c002068 <_clean+0x54>
		report_secure.CFLog[i] = 0;
 c002054:	4a0a      	ldr	r2, [pc, #40]	; (c002080 <_clean+0x6c>)
 c002056:	687b      	ldr	r3, [r7, #4]
 c002058:	3318      	adds	r3, #24
 c00205a:	009b      	lsls	r3, r3, #2
 c00205c:	4413      	add	r3, r2
 c00205e:	2200      	movs	r2, #0
 c002060:	605a      	str	r2, [r3, #4]
	for(int i=0; i<MAX_CF_LOG_SIZE; i++){
 c002062:	687b      	ldr	r3, [r7, #4]
 c002064:	3301      	adds	r3, #1
 c002066:	607b      	str	r3, [r7, #4]
 c002068:	687b      	ldr	r3, [r7, #4]
 c00206a:	2bff      	cmp	r3, #255	; 0xff
 c00206c:	ddf2      	ble.n	c002054 <_clean+0x40>
	}
}
 c00206e:	bf00      	nop
 c002070:	bf00      	nop
 c002072:	370c      	adds	r7, #12
 c002074:	46bd      	mov	sp, r7
 c002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00207a:	4770      	bx	lr
 c00207c:	300004b8 	.word	0x300004b8
 c002080:	30000034 	.word	0x30000034

0c002084 <_clean_partial>:

void _clean_partial(){
 c002084:	b480      	push	{r7}
 c002086:	af00      	add	r7, sp, #0
	report_secure.num_CF_Log_size = 0;
 c002088:	4b04      	ldr	r3, [pc, #16]	; (c00209c <_clean_partial+0x18>)
 c00208a:	2200      	movs	r2, #0
 c00208c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
}
 c002090:	bf00      	nop
 c002092:	46bd      	mov	sp, r7
 c002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002098:	4770      	bx	lr
 c00209a:	bf00      	nop
 c00209c:	30000034 	.word	0x30000034

0c0020a0 <_run_application>:

void _run_application(){
 c0020a0:	b598      	push	{r3, r4, r7, lr}
 c0020a2:	af00      	add	r7, sp, #0
	//start app
	if (cfa_engine_conf.iac.app_start_address != NULL){
 c0020a4:	4b18      	ldr	r3, [pc, #96]	; (c002108 <_run_application+0x68>)
 c0020a6:	681b      	ldr	r3, [r3, #0]
 c0020a8:	2b00      	cmp	r3, #0
 c0020aa:	d02b      	beq.n	c002104 <_run_application+0x64>
		cfa_engine_conf.iac.app_start_address();
 c0020ac:	4b16      	ldr	r3, [pc, #88]	; (c002108 <_run_application+0x68>)
 c0020ae:	681b      	ldr	r3, [r3, #0]
 c0020b0:	461c      	mov	r4, r3
 c0020b2:	0864      	lsrs	r4, r4, #1
 c0020b4:	0064      	lsls	r4, r4, #1
 c0020b6:	4620      	mov	r0, r4
 c0020b8:	4621      	mov	r1, r4
 c0020ba:	4622      	mov	r2, r4
 c0020bc:	4623      	mov	r3, r4
 c0020be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0020c2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0020c6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0020ca:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0020ce:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0020d2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0020d6:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0020da:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0020de:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0020e2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0020e6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0020ea:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0020ee:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0020f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0020f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0020fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0020fe:	f7fe f8a3 	bl	c000248 <__gnu_cmse_nonsecure_call>
	}
	return;
 c002102:	bf00      	nop
 c002104:	bf00      	nop
}
 c002106:	bd98      	pop	{r3, r4, r7, pc}
 c002108:	300004b8 	.word	0x300004b8

0c00210c <record_output_data>:

uint32_t output_data = 0;
void record_output_data(uint32_t value){
 c00210c:	b480      	push	{r7}
 c00210e:	b083      	sub	sp, #12
 c002110:	af00      	add	r7, sp, #0
 c002112:	6078      	str	r0, [r7, #4]
	output_data = value;
 c002114:	4a04      	ldr	r2, [pc, #16]	; (c002128 <record_output_data+0x1c>)
 c002116:	687b      	ldr	r3, [r7, #4]
 c002118:	6013      	str	r3, [r2, #0]
}
 c00211a:	bf00      	nop
 c00211c:	370c      	adds	r7, #12
 c00211e:	46bd      	mov	sp, r7
 c002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002124:	4770      	bx	lr
 c002126:	bf00      	nop
 c002128:	30000694 	.word	0x30000694

0c00212c <CFA_ENGINE_start>:
}
#endif

/* -------------  NON SECURE CALLABLES */

void CFA_ENGINE_start(){
 c00212c:	b580      	push	{r7, lr}
 c00212e:	af00      	add	r7, sp, #0
	while(1){
		_attest_memory();
 c002130:	f000 fb10 	bl	c002754 <_attest_memory>
		_setup_data();
 c002134:	f7ff ff12 	bl	c001f5c <_setup_data>
		_clean();
 c002138:	f7ff ff6c 	bl	c002014 <_clean>
		_read_serial_loop();
 c00213c:	f000 f8f6 	bl	c00232c <_read_serial_loop>
		_attest_memory();
 c002140:	e7f6      	b.n	c002130 <CFA_ENGINE_start+0x4>
	...

0c002144 <CFA_ENGINE_register_callback>:
	}
}

void CFA_ENGINE_register_callback(){
 c002144:	b480      	push	{r7}
 c002146:	af00      	add	r7, sp, #0
	cfa_engine_conf.iac.app_start_address = (funcptr_NS)  pAttestationFunctionCallback;
 c002148:	4b04      	ldr	r3, [pc, #16]	; (c00215c <CFA_ENGINE_register_callback+0x18>)
 c00214a:	681b      	ldr	r3, [r3, #0]
 c00214c:	461a      	mov	r2, r3
 c00214e:	4b04      	ldr	r3, [pc, #16]	; (c002160 <CFA_ENGINE_register_callback+0x1c>)
 c002150:	601a      	str	r2, [r3, #0]
	return;
 c002152:	bf00      	nop
}
 c002154:	46bd      	mov	sp, r7
 c002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00215a:	4770      	bx	lr
 c00215c:	30000708 	.word	0x30000708
 c002160:	300004b8 	.word	0x300004b8

0c002164 <STATE_initialize_attestation>:

/* --------------- - STATE HANDLING --------------------- */


uint32_t total_runtime = 0;
int STATE_initialize_attestation(){
 c002164:	b580      	push	{r7, lr}
 c002166:	b082      	sub	sp, #8
 c002168:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.attestation_status == INACTIVE){
 c00216a:	4b1c      	ldr	r3, [pc, #112]	; (c0021dc <STATE_initialize_attestation+0x78>)
 c00216c:	791b      	ldrb	r3, [r3, #4]
 c00216e:	2b00      	cmp	r3, #0
 c002170:	d11c      	bne.n	c0021ac <STATE_initialize_attestation+0x48>

		// send response to vrf
		uint8_t ready_char[COMMAND_SIZE+1] = INIT_ATTESTATION;
 c002172:	4a1b      	ldr	r2, [pc, #108]	; (c0021e0 <STATE_initialize_attestation+0x7c>)
 c002174:	463b      	mov	r3, r7
 c002176:	e892 0003 	ldmia.w	r2, {r0, r1}
 c00217a:	6018      	str	r0, [r3, #0]
 c00217c:	3304      	adds	r3, #4
 c00217e:	7019      	strb	r1, [r3, #0]
		SecureUartTx(ready_char, COMMAND_SIZE);
 c002180:	463b      	mov	r3, r7
 c002182:	2104      	movs	r1, #4
 c002184:	4618      	mov	r0, r3
 c002186:	f001 fd53 	bl	c003c30 <SecureUartTx>

		// receive challange
		if(_receive_challenge()) return 1;
 c00218a:	f000 f973 	bl	c002474 <_receive_challenge>
 c00218e:	4603      	mov	r3, r0
 c002190:	2b00      	cmp	r3, #0
 c002192:	d001      	beq.n	c002198 <STATE_initialize_attestation+0x34>
 c002194:	2301      	movs	r3, #1
 c002196:	e01d      	b.n	c0021d4 <STATE_initialize_attestation+0x70>

		// start application
		cfa_engine_conf.attestation_status = ACTIVE;
 c002198:	4b10      	ldr	r3, [pc, #64]	; (c0021dc <STATE_initialize_attestation+0x78>)
 c00219a:	2201      	movs	r2, #1
 c00219c:	711a      	strb	r2, [r3, #4]
		CFA_ENGINE_run_attestation();
 c00219e:	f000 fbf9 	bl	c002994 <CFA_ENGINE_run_attestation>
		cfa_engine_conf.attestation_status = COMPLETE;
 c0021a2:	4b0e      	ldr	r3, [pc, #56]	; (c0021dc <STATE_initialize_attestation+0x78>)
 c0021a4:	2202      	movs	r2, #2
 c0021a6:	711a      	strb	r2, [r3, #4]

		// Send final report
		_send_report();
 c0021a8:	f000 fa86 	bl	c0026b8 <_send_report>
	}

	total_runtime += app_exec_time + time_sign_report + send_report_time + receive_resp_time + verify_resp_time;
 c0021ac:	4b0d      	ldr	r3, [pc, #52]	; (c0021e4 <STATE_initialize_attestation+0x80>)
 c0021ae:	681a      	ldr	r2, [r3, #0]
 c0021b0:	4b0d      	ldr	r3, [pc, #52]	; (c0021e8 <STATE_initialize_attestation+0x84>)
 c0021b2:	681b      	ldr	r3, [r3, #0]
 c0021b4:	441a      	add	r2, r3
 c0021b6:	4b0d      	ldr	r3, [pc, #52]	; (c0021ec <STATE_initialize_attestation+0x88>)
 c0021b8:	681b      	ldr	r3, [r3, #0]
 c0021ba:	441a      	add	r2, r3
 c0021bc:	4b0c      	ldr	r3, [pc, #48]	; (c0021f0 <STATE_initialize_attestation+0x8c>)
 c0021be:	681b      	ldr	r3, [r3, #0]
 c0021c0:	441a      	add	r2, r3
 c0021c2:	4b0c      	ldr	r3, [pc, #48]	; (c0021f4 <STATE_initialize_attestation+0x90>)
 c0021c4:	681b      	ldr	r3, [r3, #0]
 c0021c6:	441a      	add	r2, r3
 c0021c8:	4b0b      	ldr	r3, [pc, #44]	; (c0021f8 <STATE_initialize_attestation+0x94>)
 c0021ca:	681b      	ldr	r3, [r3, #0]
 c0021cc:	4413      	add	r3, r2
 c0021ce:	4a0a      	ldr	r2, [pc, #40]	; (c0021f8 <STATE_initialize_attestation+0x94>)
 c0021d0:	6013      	str	r3, [r2, #0]

	return CONTINUE_LOOP;
 c0021d2:	2301      	movs	r3, #1
}
 c0021d4:	4618      	mov	r0, r3
 c0021d6:	3708      	adds	r7, #8
 c0021d8:	46bd      	mov	sp, r7
 c0021da:	bd80      	pop	{r7, pc}
 c0021dc:	300004b8 	.word	0x300004b8
 c0021e0:	0c007dbc 	.word	0x0c007dbc
 c0021e4:	30000650 	.word	0x30000650
 c0021e8:	30000654 	.word	0x30000654
 c0021ec:	30000658 	.word	0x30000658
 c0021f0:	3000065c 	.word	0x3000065c
 c0021f4:	30000660 	.word	0x30000660
 c0021f8:	30000698 	.word	0x30000698

0c0021fc <STATE_accept_report>:

int STATE_accept_report(){
 c0021fc:	b580      	push	{r7, lr}
 c0021fe:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.attestation_status == COMPLETE){
 c002200:	4b06      	ldr	r3, [pc, #24]	; (c00221c <STATE_accept_report+0x20>)
 c002202:	791b      	ldrb	r3, [r3, #4]
 c002204:	2b02      	cmp	r3, #2
 c002206:	d106      	bne.n	c002216 <STATE_accept_report+0x1a>
		cfa_engine_conf.attestation_status = INACTIVE; //temp
 c002208:	4b04      	ldr	r3, [pc, #16]	; (c00221c <STATE_accept_report+0x20>)
 c00220a:	2200      	movs	r2, #0
 c00220c:	711a      	strb	r2, [r3, #4]
		_clean();
 c00220e:	f7ff ff01 	bl	c002014 <_clean>
		return EXIT_LOOP;
 c002212:	2300      	movs	r3, #0
 c002214:	e000      	b.n	c002218 <STATE_accept_report+0x1c>
	}
	return CONTINUE_LOOP;
 c002216:	2301      	movs	r3, #1
}
 c002218:	4618      	mov	r0, r3
 c00221a:	bd80      	pop	{r7, pc}
 c00221c:	300004b8 	.word	0x300004b8

0c002220 <STATE_heal>:

int STATE_heal(){
 c002220:	b580      	push	{r7, lr}
 c002222:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.attestation_status == COMPLETE || cfa_engine_conf.attestation_status == WAITING_PARTIAL){
 c002224:	4b07      	ldr	r3, [pc, #28]	; (c002244 <STATE_heal+0x24>)
 c002226:	791b      	ldrb	r3, [r3, #4]
 c002228:	2b02      	cmp	r3, #2
 c00222a:	d003      	beq.n	c002234 <STATE_heal+0x14>
 c00222c:	4b05      	ldr	r3, [pc, #20]	; (c002244 <STATE_heal+0x24>)
 c00222e:	791b      	ldrb	r3, [r3, #4]
 c002230:	2b04      	cmp	r3, #4
 c002232:	d103      	bne.n	c00223c <STATE_heal+0x1c>
		_heal_function();
 c002234:	f000 fc70 	bl	c002b18 <_heal_function>
		return EXIT_LOOP;
 c002238:	2300      	movs	r3, #0
 c00223a:	e000      	b.n	c00223e <STATE_heal+0x1e>
	}
	return CONTINUE_LOOP;
 c00223c:	2301      	movs	r3, #1
}
 c00223e:	4618      	mov	r0, r3
 c002240:	bd80      	pop	{r7, pc}
 c002242:	bf00      	nop
 c002244:	300004b8 	.word	0x300004b8

0c002248 <STATE_continue>:

int STATE_continue(){
 c002248:	b580      	push	{r7, lr}
 c00224a:	af00      	add	r7, sp, #0

	_receive_challenge();
 c00224c:	f000 f912 	bl	c002474 <_receive_challenge>

	cfa_engine_conf.attestation_status = ACTIVE;
 c002250:	4b02      	ldr	r3, [pc, #8]	; (c00225c <STATE_continue+0x14>)
 c002252:	2201      	movs	r2, #1
 c002254:	711a      	strb	r2, [r3, #4]

//	_initialize_timer_interrupt();

	return EXIT_LOOP;
 c002256:	2300      	movs	r3, #0
}
 c002258:	4618      	mov	r0, r3
 c00225a:	bd80      	pop	{r7, pc}
 c00225c:	300004b8 	.word	0x300004b8

0c002260 <translate_command>:

/* ---------------------------  PROTOCOL  ----------------------------------------- */


char translate_command(uint8_t command_received[]){
 c002260:	b580      	push	{r7, lr}
 c002262:	b082      	sub	sp, #8
 c002264:	af00      	add	r7, sp, #0
 c002266:	6078      	str	r0, [r7, #4]
	command_received[COMMAND_SIZE] = '\0';
 c002268:	687b      	ldr	r3, [r7, #4]
 c00226a:	3304      	adds	r3, #4
 c00226c:	2200      	movs	r2, #0
 c00226e:	701a      	strb	r2, [r3, #0]
	if (!strcmp(command_received,INIT_ATTESTATION))
 c002270:	4914      	ldr	r1, [pc, #80]	; (c0022c4 <translate_command+0x64>)
 c002272:	6878      	ldr	r0, [r7, #4]
 c002274:	f7fd ffde 	bl	c000234 <strcmp>
 c002278:	4603      	mov	r3, r0
 c00227a:	2b00      	cmp	r3, #0
 c00227c:	d101      	bne.n	c002282 <translate_command+0x22>
		return INIT_ATTESTATION_CHAR;
 c00227e:	2369      	movs	r3, #105	; 0x69
 c002280:	e01b      	b.n	c0022ba <translate_command+0x5a>
	else if (!strcmp(command_received,ACCEPTED_REPORT))
 c002282:	4911      	ldr	r1, [pc, #68]	; (c0022c8 <translate_command+0x68>)
 c002284:	6878      	ldr	r0, [r7, #4]
 c002286:	f7fd ffd5 	bl	c000234 <strcmp>
 c00228a:	4603      	mov	r3, r0
 c00228c:	2b00      	cmp	r3, #0
 c00228e:	d101      	bne.n	c002294 <translate_command+0x34>
		return ACCEPT_REPORT_CHAR;
 c002290:	2376      	movs	r3, #118	; 0x76
 c002292:	e012      	b.n	c0022ba <translate_command+0x5a>
	else if (!strcmp(command_received,CONTINUE_REQUEST))
 c002294:	490d      	ldr	r1, [pc, #52]	; (c0022cc <translate_command+0x6c>)
 c002296:	6878      	ldr	r0, [r7, #4]
 c002298:	f7fd ffcc 	bl	c000234 <strcmp>
 c00229c:	4603      	mov	r3, r0
 c00229e:	2b00      	cmp	r3, #0
 c0022a0:	d101      	bne.n	c0022a6 <translate_command+0x46>
		return CONTINUE_CHAR;
 c0022a2:	2363      	movs	r3, #99	; 0x63
 c0022a4:	e009      	b.n	c0022ba <translate_command+0x5a>
	else if (!strcmp(command_received,HEAL_REQUEST))
 c0022a6:	490a      	ldr	r1, [pc, #40]	; (c0022d0 <translate_command+0x70>)
 c0022a8:	6878      	ldr	r0, [r7, #4]
 c0022aa:	f7fd ffc3 	bl	c000234 <strcmp>
 c0022ae:	4603      	mov	r3, r0
 c0022b0:	2b00      	cmp	r3, #0
 c0022b2:	d101      	bne.n	c0022b8 <translate_command+0x58>
		return HEAL_CHAR;
 c0022b4:	2368      	movs	r3, #104	; 0x68
 c0022b6:	e000      	b.n	c0022ba <translate_command+0x5a>
	return 'X';
 c0022b8:	2358      	movs	r3, #88	; 0x58

}
 c0022ba:	4618      	mov	r0, r3
 c0022bc:	3708      	adds	r7, #8
 c0022be:	46bd      	mov	sp, r7
 c0022c0:	bd80      	pop	{r7, pc}
 c0022c2:	bf00      	nop
 c0022c4:	0c007dbc 	.word	0x0c007dbc
 c0022c8:	0c007dc4 	.word	0x0c007dc4
 c0022cc:	0c007dcc 	.word	0x0c007dcc
 c0022d0:	0c007dd4 	.word	0x0c007dd4

0c0022d4 <wait_for_command>:

void wait_for_command(char pattern[],int size){
 c0022d4:	b580      	push	{r7, lr}
 c0022d6:	b086      	sub	sp, #24
 c0022d8:	af00      	add	r7, sp, #0
 c0022da:	6078      	str	r0, [r7, #4]
 c0022dc:	6039      	str	r1, [r7, #0]
	int found_size = 0;
 c0022de:	2300      	movs	r3, #0
 c0022e0:	617b      	str	r3, [r7, #20]
	int i = 0;
 c0022e2:	2300      	movs	r3, #0
 c0022e4:	613b      	str	r3, [r7, #16]
	char read_char;
	while(found_size != size){
 c0022e6:	e017      	b.n	c002318 <wait_for_command+0x44>
		SecureUartRx((uint8_t*)&read_char, 1);
 c0022e8:	f107 030f 	add.w	r3, r7, #15
 c0022ec:	2101      	movs	r1, #1
 c0022ee:	4618      	mov	r0, r3
 c0022f0:	f001 fcb2 	bl	c003c58 <SecureUartRx>
		if (read_char == pattern[i]){
 c0022f4:	693b      	ldr	r3, [r7, #16]
 c0022f6:	687a      	ldr	r2, [r7, #4]
 c0022f8:	4413      	add	r3, r2
 c0022fa:	781a      	ldrb	r2, [r3, #0]
 c0022fc:	7bfb      	ldrb	r3, [r7, #15]
 c0022fe:	429a      	cmp	r2, r3
 c002300:	d106      	bne.n	c002310 <wait_for_command+0x3c>
			i++;
 c002302:	693b      	ldr	r3, [r7, #16]
 c002304:	3301      	adds	r3, #1
 c002306:	613b      	str	r3, [r7, #16]
			found_size++;
 c002308:	697b      	ldr	r3, [r7, #20]
 c00230a:	3301      	adds	r3, #1
 c00230c:	617b      	str	r3, [r7, #20]
 c00230e:	e003      	b.n	c002318 <wait_for_command+0x44>
		}
		else{
			i = 0;
 c002310:	2300      	movs	r3, #0
 c002312:	613b      	str	r3, [r7, #16]
			found_size = 0;
 c002314:	2300      	movs	r3, #0
 c002316:	617b      	str	r3, [r7, #20]
	while(found_size != size){
 c002318:	697a      	ldr	r2, [r7, #20]
 c00231a:	683b      	ldr	r3, [r7, #0]
 c00231c:	429a      	cmp	r2, r3
 c00231e:	d1e3      	bne.n	c0022e8 <wait_for_command+0x14>
		}
	}
}
 c002320:	bf00      	nop
 c002322:	bf00      	nop
 c002324:	3718      	adds	r7, #24
 c002326:	46bd      	mov	sp, r7
 c002328:	bd80      	pop	{r7, pc}
	...

0c00232c <_read_serial_loop>:

void _read_serial_loop(){
 c00232c:	b580      	push	{r7, lr}
 c00232e:	b082      	sub	sp, #8
 c002330:	af00      	add	r7, sp, #0
	uint8_t command_received[COMMAND_SIZE+1];
	uint8_t state = CONTINUE_LOOP;
 c002332:	2301      	movs	r3, #1
 c002334:	71fb      	strb	r3, [r7, #7]
	char aaa;
	while(state == CONTINUE_LOOP){
 c002336:	e054      	b.n	c0023e2 <_read_serial_loop+0xb6>
		wait_for_command(BEGGINING_OF_COMMAND,COMMAND_SIZE);
 c002338:	2104      	movs	r1, #4
 c00233a:	482e      	ldr	r0, [pc, #184]	; (c0023f4 <_read_serial_loop+0xc8>)
 c00233c:	f7ff ffca 	bl	c0022d4 <wait_for_command>
		_receive_request(COMMAND_SIZE, command_received);
 c002340:	463b      	mov	r3, r7
 c002342:	4619      	mov	r1, r3
 c002344:	2004      	movs	r0, #4
 c002346:	f000 f95d 	bl	c002604 <_receive_request>
		aaa = translate_command(command_received);
 c00234a:	463b      	mov	r3, r7
 c00234c:	4618      	mov	r0, r3
 c00234e:	f7ff ff87 	bl	c002260 <translate_command>
 c002352:	4603      	mov	r3, r0
 c002354:	71bb      	strb	r3, [r7, #6]
		switch(aaa){
 c002356:	79bb      	ldrb	r3, [r7, #6]
 c002358:	3b63      	subs	r3, #99	; 0x63
 c00235a:	2b13      	cmp	r3, #19
 c00235c:	d83e      	bhi.n	c0023dc <_read_serial_loop+0xb0>
 c00235e:	a201      	add	r2, pc, #4	; (adr r2, c002364 <_read_serial_loop+0x38>)
 c002360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c002364:	0c0023d3 	.word	0x0c0023d3
 c002368:	0c0023dd 	.word	0x0c0023dd
 c00236c:	0c0023dd 	.word	0x0c0023dd
 c002370:	0c0023dd 	.word	0x0c0023dd
 c002374:	0c0023dd 	.word	0x0c0023dd
 c002378:	0c0023c9 	.word	0x0c0023c9
 c00237c:	0c0023b5 	.word	0x0c0023b5
 c002380:	0c0023dd 	.word	0x0c0023dd
 c002384:	0c0023dd 	.word	0x0c0023dd
 c002388:	0c0023dd 	.word	0x0c0023dd
 c00238c:	0c0023dd 	.word	0x0c0023dd
 c002390:	0c0023dd 	.word	0x0c0023dd
 c002394:	0c0023dd 	.word	0x0c0023dd
 c002398:	0c0023dd 	.word	0x0c0023dd
 c00239c:	0c0023dd 	.word	0x0c0023dd
 c0023a0:	0c0023dd 	.word	0x0c0023dd
 c0023a4:	0c0023dd 	.word	0x0c0023dd
 c0023a8:	0c0023dd 	.word	0x0c0023dd
 c0023ac:	0c0023dd 	.word	0x0c0023dd
 c0023b0:	0c0023bf 	.word	0x0c0023bf

			case INIT_ATTESTATION_CHAR:
				state = STATE_initialize_attestation();
 c0023b4:	f7ff fed6 	bl	c002164 <STATE_initialize_attestation>
 c0023b8:	4603      	mov	r3, r0
 c0023ba:	71fb      	strb	r3, [r7, #7]
				break;
 c0023bc:	e011      	b.n	c0023e2 <_read_serial_loop+0xb6>

			case ACCEPT_REPORT_CHAR:
				state = STATE_accept_report();
 c0023be:	f7ff ff1d 	bl	c0021fc <STATE_accept_report>
 c0023c2:	4603      	mov	r3, r0
 c0023c4:	71fb      	strb	r3, [r7, #7]
				break;
 c0023c6:	e00c      	b.n	c0023e2 <_read_serial_loop+0xb6>

			case HEAL_CHAR:
				state = STATE_heal();
 c0023c8:	f7ff ff2a 	bl	c002220 <STATE_heal>
 c0023cc:	4603      	mov	r3, r0
 c0023ce:	71fb      	strb	r3, [r7, #7]
				break;
 c0023d0:	e007      	b.n	c0023e2 <_read_serial_loop+0xb6>

			case CONTINUE_CHAR:
				state = STATE_continue();
 c0023d2:	f7ff ff39 	bl	c002248 <STATE_continue>
 c0023d6:	4603      	mov	r3, r0
 c0023d8:	71fb      	strb	r3, [r7, #7]
				break;
 c0023da:	e002      	b.n	c0023e2 <_read_serial_loop+0xb6>

			default:
				state = CONTINUE_LOOP;
 c0023dc:	2301      	movs	r3, #1
 c0023de:	71fb      	strb	r3, [r7, #7]
				break;
 c0023e0:	bf00      	nop
	while(state == CONTINUE_LOOP){
 c0023e2:	79fb      	ldrb	r3, [r7, #7]
 c0023e4:	2b01      	cmp	r3, #1
 c0023e6:	d0a7      	beq.n	c002338 <_read_serial_loop+0xc>
		}
	}
}
 c0023e8:	bf00      	nop
 c0023ea:	bf00      	nop
 c0023ec:	3708      	adds	r7, #8
 c0023ee:	46bd      	mov	sp, r7
 c0023f0:	bd80      	pop	{r7, pc}
 c0023f2:	bf00      	nop
 c0023f4:	0c007ddc 	.word	0x0c007ddc

0c0023f8 <_deactivate_timer_interrupt>:
void _activate_timeout_interrupt(){
	HAL_TIM_Base_Start(&htim3);
}


void _deactivate_timer_interrupt(){
 c0023f8:	b580      	push	{r7, lr}
 c0023fa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim3);
 c0023fc:	4804      	ldr	r0, [pc, #16]	; (c002410 <_deactivate_timer_interrupt+0x18>)
 c0023fe:	f004 f954 	bl	c0066aa <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER(&htim3, 0); // reset count
 c002402:	4b03      	ldr	r3, [pc, #12]	; (c002410 <_deactivate_timer_interrupt+0x18>)
 c002404:	681b      	ldr	r3, [r3, #0]
 c002406:	2200      	movs	r2, #0
 c002408:	625a      	str	r2, [r3, #36]	; 0x24
}
 c00240a:	bf00      	nop
 c00240c:	bd80      	pop	{r7, pc}
 c00240e:	bf00      	nop
 c002410:	3000070c 	.word	0x3000070c

0c002414 <CFA_time_interrupt_handler>:

void CFA_time_interrupt_handler(){
 c002414:	b580      	push	{r7, lr}
 c002416:	b082      	sub	sp, #8
 c002418:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM3_CLK_DISABLE();
 c00241a:	4b13      	ldr	r3, [pc, #76]	; (c002468 <CFA_time_interrupt_handler+0x54>)
 c00241c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00241e:	4a12      	ldr	r2, [pc, #72]	; (c002468 <CFA_time_interrupt_handler+0x54>)
 c002420:	f023 0302 	bic.w	r3, r3, #2
 c002424:	6593      	str	r3, [r2, #88]	; 0x58
	report_secure.isFinal = PARTIAL_REPORT;
 c002426:	4b11      	ldr	r3, [pc, #68]	; (c00246c <CFA_time_interrupt_handler+0x58>)
 c002428:	2250      	movs	r2, #80	; 0x50
 c00242a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	_sign_report();
 c00242e:	f000 f9b7 	bl	c0027a0 <_sign_report>
	_send_report_message();
 c002432:	f000 f8f7 	bl	c002624 <_send_report_message>
	_clean_partial();
 c002436:	f7ff fe25 	bl	c002084 <_clean_partial>
	_read_serial_loop();
 c00243a:	f7ff ff77 	bl	c00232c <_read_serial_loop>
	ti_reset_timer_counter(TIMER_INTERRUPT);
 c00243e:	4b0c      	ldr	r3, [pc, #48]	; (c002470 <CFA_time_interrupt_handler+0x5c>)
 c002440:	681b      	ldr	r3, [r3, #0]
 c002442:	2200      	movs	r2, #0
 c002444:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RCC_TIM3_CLK_ENABLE();
 c002446:	4b08      	ldr	r3, [pc, #32]	; (c002468 <CFA_time_interrupt_handler+0x54>)
 c002448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00244a:	4a07      	ldr	r2, [pc, #28]	; (c002468 <CFA_time_interrupt_handler+0x54>)
 c00244c:	f043 0302 	orr.w	r3, r3, #2
 c002450:	6593      	str	r3, [r2, #88]	; 0x58
 c002452:	4b05      	ldr	r3, [pc, #20]	; (c002468 <CFA_time_interrupt_handler+0x54>)
 c002454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002456:	f003 0302 	and.w	r3, r3, #2
 c00245a:	607b      	str	r3, [r7, #4]
 c00245c:	687b      	ldr	r3, [r7, #4]
}
 c00245e:	bf00      	nop
 c002460:	3708      	adds	r7, #8
 c002462:	46bd      	mov	sp, r7
 c002464:	bd80      	pop	{r7, pc}
 c002466:	bf00      	nop
 c002468:	50021000 	.word	0x50021000
 c00246c:	30000034 	.word	0x30000034
 c002470:	3000070c 	.word	0x3000070c

0c002474 <_receive_challenge>:

/* -----------------------------  SENDING REPORT ------------------------------------ */

uint8_t  _receive_challenge(){
 c002474:	b580      	push	{r7, lr}
 c002476:	b09e      	sub	sp, #120	; 0x78
 c002478:	af02      	add	r7, sp, #8
	uint8_t chl[64];
//	uint8_t init_chal[] = BEGGINING_OF_CHALLANGE;

	SecureUartRx((uint8_t*)(&chl[0]), 1);
 c00247a:	1d3b      	adds	r3, r7, #4
 c00247c:	2101      	movs	r1, #1
 c00247e:	4618      	mov	r0, r3
 c002480:	f001 fbea 	bl	c003c58 <SecureUartRx>
	receive_resp_start = HAL_GetTick();
 c002484:	f001 fc90 	bl	c003da8 <HAL_GetTick>
 c002488:	4603      	mov	r3, r0
 c00248a:	4a51      	ldr	r2, [pc, #324]	; (c0025d0 <_receive_challenge+0x15c>)
 c00248c:	6013      	str	r3, [r2, #0]
	SecureUartRx((uint8_t*)(&chl[1]), CHAL_SIZE-1);
 c00248e:	1d3b      	adds	r3, r7, #4
 c002490:	3301      	adds	r3, #1
 c002492:	213f      	movs	r1, #63	; 0x3f
 c002494:	4618      	mov	r0, r3
 c002496:	f001 fbdf 	bl	c003c58 <SecureUartRx>
	uint32_t recv_chal_stop = HAL_GetTick();
 c00249a:	f001 fc85 	bl	c003da8 <HAL_GetTick>
 c00249e:	6638      	str	r0, [r7, #96]	; 0x60
	uint32_t recv_chal = recv_chal_stop - receive_resp_start;
 c0024a0:	4b4b      	ldr	r3, [pc, #300]	; (c0025d0 <_receive_challenge+0x15c>)
 c0024a2:	681b      	ldr	r3, [r3, #0]
 c0024a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 c0024a6:	1ad3      	subs	r3, r2, r3
 c0024a8:	65fb      	str	r3, [r7, #92]	; 0x5c
//	SecureUartTx(init_chal, COMMAND_SIZE); // echo for debug
//	SecureUartTx((uint8_t*)chl, 64);

	// read verifier signature
	uint32_t recv_sig_start = HAL_GetTick();
 c0024aa:	f001 fc7d 	bl	c003da8 <HAL_GetTick>
 c0024ae:	65b8      	str	r0, [r7, #88]	; 0x58
	SecureUartRx((uint8_t*)(&vrf_resp.signature), 32);
 c0024b0:	2120      	movs	r1, #32
 c0024b2:	4848      	ldr	r0, [pc, #288]	; (c0025d4 <_receive_challenge+0x160>)
 c0024b4:	f001 fbd0 	bl	c003c58 <SecureUartRx>
//	SecureUartTx((uint8_t*)(&vrf_resp.signature), SIGNATURE_SIZE_BYTES);
	uint32_t recv_sig_stop = HAL_GetTick();
 c0024b8:	f001 fc76 	bl	c003da8 <HAL_GetTick>
 c0024bc:	6578      	str	r0, [r7, #84]	; 0x54
	uint32_t recv_sig = recv_sig_stop - recv_sig_start;
 c0024be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 c0024c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 c0024c2:	1ad3      	subs	r3, r2, r3
 c0024c4:	653b      	str	r3, [r7, #80]	; 0x50

	receive_resp_stop = HAL_GetTick();
 c0024c6:	f001 fc6f 	bl	c003da8 <HAL_GetTick>
 c0024ca:	4603      	mov	r3, r0
 c0024cc:	4a42      	ldr	r2, [pc, #264]	; (c0025d8 <_receive_challenge+0x164>)
 c0024ce:	6013      	str	r3, [r2, #0]
	receive_resp_time += receive_resp_stop-receive_resp_start;
 c0024d0:	4b41      	ldr	r3, [pc, #260]	; (c0025d8 <_receive_challenge+0x164>)
 c0024d2:	681a      	ldr	r2, [r3, #0]
 c0024d4:	4b3e      	ldr	r3, [pc, #248]	; (c0025d0 <_receive_challenge+0x15c>)
 c0024d6:	681b      	ldr	r3, [r3, #0]
 c0024d8:	1ad2      	subs	r2, r2, r3
 c0024da:	4b40      	ldr	r3, [pc, #256]	; (c0025dc <_receive_challenge+0x168>)
 c0024dc:	681b      	ldr	r3, [r3, #0]
 c0024de:	4413      	add	r3, r2
 c0024e0:	4a3e      	ldr	r2, [pc, #248]	; (c0025dc <_receive_challenge+0x168>)
 c0024e2:	6013      	str	r3, [r2, #0]

	verify_resp_start = HAL_GetTick();
 c0024e4:	f001 fc60 	bl	c003da8 <HAL_GetTick>
 c0024e8:	4603      	mov	r3, r0
 c0024ea:	4a3d      	ldr	r2, [pc, #244]	; (c0025e0 <_receive_challenge+0x16c>)
 c0024ec:	6013      	str	r3, [r2, #0]

	// Check chal is greater than prev chal
	int valid_next_chal = 1;
 c0024ee:	2301      	movs	r3, #1
 c0024f0:	66fb      	str	r3, [r7, #108]	; 0x6c
	unsigned int i;
	#if MODE == AUD
	for(i=0; i<CHAL_SIZE; i++){
 c0024f2:	2300      	movs	r3, #0
 c0024f4:	66bb      	str	r3, [r7, #104]	; 0x68
 c0024f6:	e00f      	b.n	c002518 <_receive_challenge+0xa4>
		if(chl[i] < cfa_engine_conf.challenge[i]){
 c0024f8:	1d3a      	adds	r2, r7, #4
 c0024fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c0024fc:	4413      	add	r3, r2
 c0024fe:	781a      	ldrb	r2, [r3, #0]
 c002500:	4938      	ldr	r1, [pc, #224]	; (c0025e4 <_receive_challenge+0x170>)
 c002502:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c002504:	440b      	add	r3, r1
 c002506:	3308      	adds	r3, #8
 c002508:	781b      	ldrb	r3, [r3, #0]
 c00250a:	429a      	cmp	r2, r3
 c00250c:	d201      	bcs.n	c002512 <_receive_challenge+0x9e>
			valid_next_chal = 0;
 c00250e:	2300      	movs	r3, #0
 c002510:	66fb      	str	r3, [r7, #108]	; 0x6c
	for(i=0; i<CHAL_SIZE; i++){
 c002512:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c002514:	3301      	adds	r3, #1
 c002516:	66bb      	str	r3, [r7, #104]	; 0x68
 c002518:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c00251a:	2b3f      	cmp	r3, #63	; 0x3f
 c00251c:	d9ec      	bls.n	c0024f8 <_receive_challenge+0x84>
		}
	}
	#endif

	_update_challenge(chl);
 c00251e:	1d3b      	adds	r3, r7, #4
 c002520:	4618      	mov	r0, r3
 c002522:	f7ff fd43 	bl	c001fac <_update_challenge>

	// check verifier signature by sig = ECDSA(private_key, hash(report))
	// 1) get SHA256 hash over report (excluding buffer that holds signature)
	uint32_t response_size = CHAL_SIZE + 1 + HASH_SIZE_BYTES;
 c002526:	2361      	movs	r3, #97	; 0x61
 c002528:	64fb      	str	r3, [r7, #76]	; 0x4c
//	Hacl_SHA2_256_hash(response_hash, (uint8_t*)(&vrf_resp), response_size);
	// 2) verify signature of hash
//    curve = uECC_secp256r1();
//    int valid_sig =  uECC_verify(public_key, response_hash, HASH_SIZE_BYTES, vrf_resp.signature, curve);

	uint32_t hmac_start = HAL_GetTick();
 c00252a:	f001 fc3d 	bl	c003da8 <HAL_GetTick>
 c00252e:	64b8      	str	r0, [r7, #72]	; 0x48
	#ifdef HASH_ENGINE
    HMAC_SHA_265((uint8_t*)(&vrf_resp), response_size, hash_output);
	#else
    hmac(hash_output, att_key, 32, (uint8_t*)(&vrf_resp), (uint32_t) response_size);
 c002530:	4b2d      	ldr	r3, [pc, #180]	; (c0025e8 <_receive_challenge+0x174>)
 c002532:	6819      	ldr	r1, [r3, #0]
 c002534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c002536:	9300      	str	r3, [sp, #0]
 c002538:	4b2c      	ldr	r3, [pc, #176]	; (c0025ec <_receive_challenge+0x178>)
 c00253a:	2220      	movs	r2, #32
 c00253c:	482c      	ldr	r0, [pc, #176]	; (c0025f0 <_receive_challenge+0x17c>)
 c00253e:	f7fe ff34 	bl	c0013aa <hmac>
	#endif
    uint32_t hmac_stop = HAL_GetTick();
 c002542:	f001 fc31 	bl	c003da8 <HAL_GetTick>
 c002546:	6478      	str	r0, [r7, #68]	; 0x44
    hmac_time = hmac_stop-hmac_start;
 c002548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 c00254a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 c00254c:	1ad3      	subs	r3, r2, r3
 c00254e:	4a29      	ldr	r2, [pc, #164]	; (c0025f4 <_receive_challenge+0x180>)
 c002550:	6013      	str	r3, [r2, #0]

    int valid_sig = 1;
 c002552:	2301      	movs	r3, #1
 c002554:	667b      	str	r3, [r7, #100]	; 0x64
    for(i=0; i<32; i++){
 c002556:	2300      	movs	r3, #0
 c002558:	66bb      	str	r3, [r7, #104]	; 0x68
 c00255a:	e00f      	b.n	c00257c <_receive_challenge+0x108>
    	if(hash_output[i] != vrf_resp.signature[i]){
 c00255c:	4a24      	ldr	r2, [pc, #144]	; (c0025f0 <_receive_challenge+0x17c>)
 c00255e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c002560:	4413      	add	r3, r2
 c002562:	781a      	ldrb	r2, [r3, #0]
 c002564:	4921      	ldr	r1, [pc, #132]	; (c0025ec <_receive_challenge+0x178>)
 c002566:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c002568:	440b      	add	r3, r1
 c00256a:	3341      	adds	r3, #65	; 0x41
 c00256c:	781b      	ldrb	r3, [r3, #0]
 c00256e:	429a      	cmp	r2, r3
 c002570:	d001      	beq.n	c002576 <_receive_challenge+0x102>
    		valid_sig = 0;
 c002572:	2300      	movs	r3, #0
 c002574:	667b      	str	r3, [r7, #100]	; 0x64
    for(i=0; i<32; i++){
 c002576:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c002578:	3301      	adds	r3, #1
 c00257a:	66bb      	str	r3, [r7, #104]	; 0x68
 c00257c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 c00257e:	2b1f      	cmp	r3, #31
 c002580:	d9ec      	bls.n	c00255c <_receive_challenge+0xe8>
    	}
    }

    vrf_resp.verify_result = (valid_next_chal & valid_sig);
 c002582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c002584:	b25a      	sxtb	r2, r3
 c002586:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 c002588:	b25b      	sxtb	r3, r3
 c00258a:	4013      	ands	r3, r2
 c00258c:	b25b      	sxtb	r3, r3
 c00258e:	b2da      	uxtb	r2, r3
 c002590:	4b16      	ldr	r3, [pc, #88]	; (c0025ec <_receive_challenge+0x178>)
 c002592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    verify_resp_stop = HAL_GetTick();
 c002596:	f001 fc07 	bl	c003da8 <HAL_GetTick>
 c00259a:	4603      	mov	r3, r0
 c00259c:	4a16      	ldr	r2, [pc, #88]	; (c0025f8 <_receive_challenge+0x184>)
 c00259e:	6013      	str	r3, [r2, #0]
    verify_resp_time += verify_resp_stop-verify_resp_start;
 c0025a0:	4b15      	ldr	r3, [pc, #84]	; (c0025f8 <_receive_challenge+0x184>)
 c0025a2:	681a      	ldr	r2, [r3, #0]
 c0025a4:	4b0e      	ldr	r3, [pc, #56]	; (c0025e0 <_receive_challenge+0x16c>)
 c0025a6:	681b      	ldr	r3, [r3, #0]
 c0025a8:	1ad2      	subs	r2, r2, r3
 c0025aa:	4b14      	ldr	r3, [pc, #80]	; (c0025fc <_receive_challenge+0x188>)
 c0025ac:	681b      	ldr	r3, [r3, #0]
 c0025ae:	4413      	add	r3, r2
 c0025b0:	4a12      	ldr	r2, [pc, #72]	; (c0025fc <_receive_challenge+0x188>)
 c0025b2:	6013      	str	r3, [r2, #0]
    recv_verify_response_time = receive_resp_time + verify_resp_time;
 c0025b4:	4b09      	ldr	r3, [pc, #36]	; (c0025dc <_receive_challenge+0x168>)
 c0025b6:	681a      	ldr	r2, [r3, #0]
 c0025b8:	4b10      	ldr	r3, [pc, #64]	; (c0025fc <_receive_challenge+0x188>)
 c0025ba:	681b      	ldr	r3, [r3, #0]
 c0025bc:	4413      	add	r3, r2
 c0025be:	4a10      	ldr	r2, [pc, #64]	; (c002600 <_receive_challenge+0x18c>)
 c0025c0:	6013      	str	r3, [r2, #0]

	return vrf_resp.verify_result;
 c0025c2:	4b0a      	ldr	r3, [pc, #40]	; (c0025ec <_receive_challenge+0x178>)
 c0025c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
}
 c0025c8:	4618      	mov	r0, r3
 c0025ca:	3770      	adds	r7, #112	; 0x70
 c0025cc:	46bd      	mov	sp, r7
 c0025ce:	bd80      	pop	{r7, pc}
 c0025d0:	30000670 	.word	0x30000670
 c0025d4:	30000585 	.word	0x30000585
 c0025d8:	30000674 	.word	0x30000674
 c0025dc:	3000065c 	.word	0x3000065c
 c0025e0:	30000678 	.word	0x30000678
 c0025e4:	300004b8 	.word	0x300004b8
 c0025e8:	30000020 	.word	0x30000020
 c0025ec:	30000544 	.word	0x30000544
 c0025f0:	30000630 	.word	0x30000630
 c0025f4:	30000680 	.word	0x30000680
 c0025f8:	3000067c 	.word	0x3000067c
 c0025fc:	30000660 	.word	0x30000660
 c002600:	30000664 	.word	0x30000664

0c002604 <_receive_request>:

void _receive_request(int size,uint8_t* read_char){
 c002604:	b580      	push	{r7, lr}
 c002606:	b082      	sub	sp, #8
 c002608:	af00      	add	r7, sp, #0
 c00260a:	6078      	str	r0, [r7, #4]
 c00260c:	6039      	str	r1, [r7, #0]
	SecureUartRx(read_char, size);
 c00260e:	687b      	ldr	r3, [r7, #4]
 c002610:	b29b      	uxth	r3, r3
 c002612:	4619      	mov	r1, r3
 c002614:	6838      	ldr	r0, [r7, #0]
 c002616:	f001 fb1f 	bl	c003c58 <SecureUartRx>
	return;
 c00261a:	bf00      	nop
}
 c00261c:	3708      	adds	r7, #8
 c00261e:	46bd      	mov	sp, r7
 c002620:	bd80      	pop	{r7, pc}
	...

0c002624 <_send_report_message>:

void _send_report_message(){
 c002624:	b580      	push	{r7, lr}
 c002626:	b084      	sub	sp, #16
 c002628:	af00      	add	r7, sp, #0
	send_report_start = HAL_GetTick();
 c00262a:	f001 fbbd 	bl	c003da8 <HAL_GetTick>
 c00262e:	4603      	mov	r3, r0
 c002630:	4a1b      	ldr	r2, [pc, #108]	; (c0026a0 <_send_report_message+0x7c>)
 c002632:	6013      	str	r3, [r2, #0]
	uint8_t init_report[] = BEGGINING_OF_REPORT;
 c002634:	4a1b      	ldr	r2, [pc, #108]	; (c0026a4 <_send_report_message+0x80>)
 c002636:	463b      	mov	r3, r7
 c002638:	e892 0003 	ldmia.w	r2, {r0, r1}
 c00263c:	6018      	str	r0, [r3, #0]
 c00263e:	3304      	adds	r3, #4
 c002640:	7019      	strb	r1, [r3, #0]
	SecureUartTx(init_report, COMMAND_SIZE);
 c002642:	463b      	mov	r3, r7
 c002644:	2104      	movs	r1, #4
 c002646:	4618      	mov	r0, r3
 c002648:	f001 faf2 	bl	c003c30 <SecureUartTx>
	#if MODE == SENSE_APP
	SecureUartTx((uint8_t *)(&output_data), 4);
	SecureUartTx(report_secure.signature, SIGNATURE_SIZE_BYTES);
	#else
	// CFA or TRACES
	SecureUartTx(report_secure.signature, SIGNATURE_SIZE_BYTES+2);
 c00264c:	2142      	movs	r1, #66	; 0x42
 c00264e:	4816      	ldr	r0, [pc, #88]	; (c0026a8 <_send_report_message+0x84>)
 c002650:	f001 faee 	bl	c003c30 <SecureUartTx>
	int data_size = 2 + 4*report_secure.num_CF_Log_size;
 c002654:	4b14      	ldr	r3, [pc, #80]	; (c0026a8 <_send_report_message+0x84>)
 c002656:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c00265a:	009b      	lsls	r3, r3, #2
 c00265c:	3302      	adds	r3, #2
 c00265e:	60fb      	str	r3, [r7, #12]
	uint8_t * report_addr = (uint8_t*)(&(report_secure.num_CF_Log_size));
 c002660:	4b12      	ldr	r3, [pc, #72]	; (c0026ac <_send_report_message+0x88>)
 c002662:	60bb      	str	r3, [r7, #8]
	SecureUartTx(report_addr, data_size);
 c002664:	68fb      	ldr	r3, [r7, #12]
 c002666:	b29b      	uxth	r3, r3
 c002668:	4619      	mov	r1, r3
 c00266a:	68b8      	ldr	r0, [r7, #8]
 c00266c:	f001 fae0 	bl	c003c30 <SecureUartTx>
	#endif
	send_report_stop = HAL_GetTick();
 c002670:	f001 fb9a 	bl	c003da8 <HAL_GetTick>
 c002674:	4603      	mov	r3, r0
 c002676:	4a0e      	ldr	r2, [pc, #56]	; (c0026b0 <_send_report_message+0x8c>)
 c002678:	6013      	str	r3, [r2, #0]
	send_report_time += send_report_stop - send_report_start;
 c00267a:	4b0d      	ldr	r3, [pc, #52]	; (c0026b0 <_send_report_message+0x8c>)
 c00267c:	681a      	ldr	r2, [r3, #0]
 c00267e:	4b08      	ldr	r3, [pc, #32]	; (c0026a0 <_send_report_message+0x7c>)
 c002680:	681b      	ldr	r3, [r3, #0]
 c002682:	1ad2      	subs	r2, r2, r3
 c002684:	4b0b      	ldr	r3, [pc, #44]	; (c0026b4 <_send_report_message+0x90>)
 c002686:	681b      	ldr	r3, [r3, #0]
 c002688:	4413      	add	r3, r2
 c00268a:	4a0a      	ldr	r2, [pc, #40]	; (c0026b4 <_send_report_message+0x90>)
 c00268c:	6013      	str	r3, [r2, #0]

	// timing for debug
	SecureUartTx((uint8_t *)(&send_report_time), 4);
 c00268e:	2104      	movs	r1, #4
 c002690:	4808      	ldr	r0, [pc, #32]	; (c0026b4 <_send_report_message+0x90>)
 c002692:	f001 facd 	bl	c003c30 <SecureUartTx>
}
 c002696:	bf00      	nop
 c002698:	3710      	adds	r7, #16
 c00269a:	46bd      	mov	sp, r7
 c00269c:	bd80      	pop	{r7, pc}
 c00269e:	bf00      	nop
 c0026a0:	30000684 	.word	0x30000684
 c0026a4:	0c007de4 	.word	0x0c007de4
 c0026a8:	30000034 	.word	0x30000034
 c0026ac:	30000096 	.word	0x30000096
 c0026b0:	30000688 	.word	0x30000688
 c0026b4:	30000658 	.word	0x30000658

0c0026b8 <_send_report>:

uint32_t compute_send_report_time;
uint32_t compute_send_report_start;
uint32_t compute_send_report_stop;
void _send_report(){
 c0026b8:	b580      	push	{r7, lr}
 c0026ba:	af00      	add	r7, sp, #0
	_deactivate_timer_interrupt();
 c0026bc:	f7ff fe9c 	bl	c0023f8 <_deactivate_timer_interrupt>
	report_secure.number_of_logs_sent ++;
 c0026c0:	4b1f      	ldr	r3, [pc, #124]	; (c002740 <_send_report+0x88>)
 c0026c2:	f8b3 3464 	ldrh.w	r3, [r3, #1124]	; 0x464
 c0026c6:	3301      	adds	r3, #1
 c0026c8:	b29a      	uxth	r2, r3
 c0026ca:	4b1d      	ldr	r3, [pc, #116]	; (c002740 <_send_report+0x88>)
 c0026cc:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
	if (cfa_engine_conf.attestation_status == COMPLETE){
 c0026d0:	4b1c      	ldr	r3, [pc, #112]	; (c002744 <_send_report+0x8c>)
 c0026d2:	791b      	ldrb	r3, [r3, #4]
 c0026d4:	2b02      	cmp	r3, #2
 c0026d6:	d112      	bne.n	c0026fe <_send_report+0x46>
		report_secure.isFinal = FINAL_REPORT;
 c0026d8:	4b19      	ldr	r3, [pc, #100]	; (c002740 <_send_report+0x88>)
 c0026da:	2246      	movs	r2, #70	; 0x46
 c0026dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		compute_send_report_start = HAL_GetTick();
 c0026e0:	f001 fb62 	bl	c003da8 <HAL_GetTick>
 c0026e4:	4603      	mov	r3, r0
 c0026e6:	4a18      	ldr	r2, [pc, #96]	; (c002748 <_send_report+0x90>)
 c0026e8:	6013      	str	r3, [r2, #0]
		_sign_report(); // must come after isFinal is set since signs all report data
 c0026ea:	f000 f859 	bl	c0027a0 <_sign_report>
		_send_report_message();
 c0026ee:	f7ff ff99 	bl	c002624 <_send_report_message>
		compute_send_report_stop = HAL_GetTick();
 c0026f2:	f001 fb59 	bl	c003da8 <HAL_GetTick>
 c0026f6:	4603      	mov	r3, r0
 c0026f8:	4a14      	ldr	r2, [pc, #80]	; (c00274c <_send_report+0x94>)
 c0026fa:	6013      	str	r3, [r2, #0]
 c0026fc:	e017      	b.n	c00272e <_send_report+0x76>
	}
	else if(cfa_engine_conf.attestation_status == WAITING_PARTIAL){
 c0026fe:	4b11      	ldr	r3, [pc, #68]	; (c002744 <_send_report+0x8c>)
 c002700:	791b      	ldrb	r3, [r3, #4]
 c002702:	2b04      	cmp	r3, #4
 c002704:	d113      	bne.n	c00272e <_send_report+0x76>
		report_secure.isFinal = PARTIAL_REPORT;
 c002706:	4b0e      	ldr	r3, [pc, #56]	; (c002740 <_send_report+0x88>)
 c002708:	2250      	movs	r2, #80	; 0x50
 c00270a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		compute_send_report_start = HAL_GetTick();
 c00270e:	f001 fb4b 	bl	c003da8 <HAL_GetTick>
 c002712:	4603      	mov	r3, r0
 c002714:	4a0c      	ldr	r2, [pc, #48]	; (c002748 <_send_report+0x90>)
 c002716:	6013      	str	r3, [r2, #0]
		_sign_report();
 c002718:	f000 f842 	bl	c0027a0 <_sign_report>
		_send_report_message();
 c00271c:	f7ff ff82 	bl	c002624 <_send_report_message>
		_clean_partial();
 c002720:	f7ff fcb0 	bl	c002084 <_clean_partial>
		compute_send_report_stop = HAL_GetTick();
 c002724:	f001 fb40 	bl	c003da8 <HAL_GetTick>
 c002728:	4603      	mov	r3, r0
 c00272a:	4a08      	ldr	r2, [pc, #32]	; (c00274c <_send_report+0x94>)
 c00272c:	6013      	str	r3, [r2, #0]
	}

	compute_send_report_time = compute_send_report_stop - compute_send_report_start;
 c00272e:	4b07      	ldr	r3, [pc, #28]	; (c00274c <_send_report+0x94>)
 c002730:	681a      	ldr	r2, [r3, #0]
 c002732:	4b05      	ldr	r3, [pc, #20]	; (c002748 <_send_report+0x90>)
 c002734:	681b      	ldr	r3, [r3, #0]
 c002736:	1ad3      	subs	r3, r2, r3
 c002738:	4a05      	ldr	r2, [pc, #20]	; (c002750 <_send_report+0x98>)
 c00273a:	6013      	str	r3, [r2, #0]
	return;
 c00273c:	bf00      	nop
}
 c00273e:	bd80      	pop	{r7, pc}
 c002740:	30000034 	.word	0x30000034
 c002744:	300004b8 	.word	0x300004b8
 c002748:	300006a0 	.word	0x300006a0
 c00274c:	300006a4 	.word	0x300006a4
 c002750:	3000069c 	.word	0x3000069c

0c002754 <_attest_memory>:

/* ----------------------------- CRYPTO-OPERATIONS --------------------------------- */
uint32_t time_hash_memory;
uint32_t time_hash_memory_start;
uint32_t time_hash_memory_end;
void _attest_memory(){
 c002754:	b580      	push	{r7, lr}
 c002756:	af00      	add	r7, sp, #0
	time_hash_memory_start = HAL_GetTick();
 c002758:	f001 fb26 	bl	c003da8 <HAL_GetTick>
 c00275c:	4603      	mov	r3, r0
 c00275e:	4a0b      	ldr	r2, [pc, #44]	; (c00278c <_attest_memory+0x38>)
 c002760:	6013      	str	r3, [r2, #0]
	// Compute sigle hash of non-secure memory
	Hacl_SHA2_256_hash(report_secure.mem_hash, (uint8_t*)(NONSECURE_FLASH_START), NONSECURE_FLASH_SIZE);
 c002762:	f640 6258 	movw	r2, #3672	; 0xe58
 c002766:	490a      	ldr	r1, [pc, #40]	; (c002790 <_attest_memory+0x3c>)
 c002768:	480a      	ldr	r0, [pc, #40]	; (c002794 <_attest_memory+0x40>)
 c00276a:	f7ff fbe8 	bl	c001f3e <Hacl_SHA2_256_hash>
	time_hash_memory_end = HAL_GetTick();
 c00276e:	f001 fb1b 	bl	c003da8 <HAL_GetTick>
 c002772:	4603      	mov	r3, r0
 c002774:	4a08      	ldr	r2, [pc, #32]	; (c002798 <_attest_memory+0x44>)
 c002776:	6013      	str	r3, [r2, #0]
	time_hash_memory = time_hash_memory_end-time_hash_memory_start;
 c002778:	4b07      	ldr	r3, [pc, #28]	; (c002798 <_attest_memory+0x44>)
 c00277a:	681a      	ldr	r2, [r3, #0]
 c00277c:	4b03      	ldr	r3, [pc, #12]	; (c00278c <_attest_memory+0x38>)
 c00277e:	681b      	ldr	r3, [r3, #0]
 c002780:	1ad3      	subs	r3, r2, r3
 c002782:	4a06      	ldr	r2, [pc, #24]	; (c00279c <_attest_memory+0x48>)
 c002784:	6013      	str	r3, [r2, #0]
}
 c002786:	bf00      	nop
 c002788:	bd80      	pop	{r7, pc}
 c00278a:	bf00      	nop
 c00278c:	300006ac 	.word	0x300006ac
 c002790:	080401f8 	.word	0x080401f8
 c002794:	30000076 	.word	0x30000076
 c002798:	300006b0 	.word	0x300006b0
 c00279c:	300006a8 	.word	0x300006a8

0c0027a0 <_sign_report>:


void _sign_report(){
 c0027a0:	b580      	push	{r7, lr}
 c0027a2:	b084      	sub	sp, #16
 c0027a4:	af02      	add	r7, sp, #8
	time_sign_report_start = HAL_GetTick();
 c0027a6:	f001 faff 	bl	c003da8 <HAL_GetTick>
 c0027aa:	4603      	mov	r3, r0
 c0027ac:	4a11      	ldr	r2, [pc, #68]	; (c0027f4 <_sign_report+0x54>)
 c0027ae:	6013      	str	r3, [r2, #0]
	#else
	Hacl_SHA2_256_hash(report_hash, (uint8_t*)(&output_data), report_size);
	#endif
	#else
	// CFA or TRACES
	uint32_t report_size = 2 + HASH_SIZE_BYTES + 2 + 4*report_secure.num_CF_Log_size;
 c0027b0:	4b11      	ldr	r3, [pc, #68]	; (c0027f8 <_sign_report+0x58>)
 c0027b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c0027b6:	3309      	adds	r3, #9
 c0027b8:	009b      	lsls	r3, r3, #2
 c0027ba:	607b      	str	r3, [r7, #4]
//	Hacl_SHA2_256_hash(report_hash, (uint8_t*)(&report_secure.isFinal), report_size);

	#ifdef HASH_ENGINE
	HMAC_SHA_265((uint8_t*)(&report_secure.isFinal), report_size, report_secure.signature);
	#else
	hmac(report_secure.signature, att_key, 32, (uint8_t*)(&report_secure.isFinal), (uint32_t) report_size);
 c0027bc:	4b0f      	ldr	r3, [pc, #60]	; (c0027fc <_sign_report+0x5c>)
 c0027be:	6819      	ldr	r1, [r3, #0]
 c0027c0:	687b      	ldr	r3, [r7, #4]
 c0027c2:	9300      	str	r3, [sp, #0]
 c0027c4:	4b0e      	ldr	r3, [pc, #56]	; (c002800 <_sign_report+0x60>)
 c0027c6:	2220      	movs	r2, #32
 c0027c8:	480b      	ldr	r0, [pc, #44]	; (c0027f8 <_sign_report+0x58>)
 c0027ca:	f7fe fdee 	bl	c0013aa <hmac>
//
//	// sign hash
//    curve = uECC_secp256r1();
//    int t =  uECC_sign(private_key, report_hash, HASH_SIZE_BYTES, report_secure.signature, curve);

    time_sign_report_end = HAL_GetTick();
 c0027ce:	f001 faeb 	bl	c003da8 <HAL_GetTick>
 c0027d2:	4603      	mov	r3, r0
 c0027d4:	4a0b      	ldr	r2, [pc, #44]	; (c002804 <_sign_report+0x64>)
 c0027d6:	6013      	str	r3, [r2, #0]
	time_sign_report += time_sign_report_end-time_sign_report_start;
 c0027d8:	4b0a      	ldr	r3, [pc, #40]	; (c002804 <_sign_report+0x64>)
 c0027da:	681a      	ldr	r2, [r3, #0]
 c0027dc:	4b05      	ldr	r3, [pc, #20]	; (c0027f4 <_sign_report+0x54>)
 c0027de:	681b      	ldr	r3, [r3, #0]
 c0027e0:	1ad2      	subs	r2, r2, r3
 c0027e2:	4b09      	ldr	r3, [pc, #36]	; (c002808 <_sign_report+0x68>)
 c0027e4:	681b      	ldr	r3, [r3, #0]
 c0027e6:	4413      	add	r3, r2
 c0027e8:	4a07      	ldr	r2, [pc, #28]	; (c002808 <_sign_report+0x68>)
 c0027ea:	6013      	str	r3, [r2, #0]
}
 c0027ec:	bf00      	nop
 c0027ee:	3708      	adds	r7, #8
 c0027f0:	46bd      	mov	sp, r7
 c0027f2:	bd80      	pop	{r7, pc}
 c0027f4:	3000068c 	.word	0x3000068c
 c0027f8:	30000034 	.word	0x30000034
 c0027fc:	30000020 	.word	0x30000020
 c002800:	30000074 	.word	0x30000074
 c002804:	30000690 	.word	0x30000690
 c002808:	30000654 	.word	0x30000654

0c00280c <CFA_ENGINE_new_log_entry>:
uint16_t loop_counter = 1;
uint32_t prev_entry;

// VERBATIM STYLE
/**/
void CFA_ENGINE_new_log_entry(uint32_t value){
 c00280c:	b580      	push	{r7, lr}
 c00280e:	b082      	sub	sp, #8
 c002810:	af00      	add	r7, sp, #0
 c002812:	6078      	str	r0, [r7, #4]
	if(report_secure.num_CF_Log_size >= MAX_CF_LOG_SIZE){
 c002814:	4b57      	ldr	r3, [pc, #348]	; (c002974 <CFA_ENGINE_new_log_entry+0x168>)
 c002816:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c00281a:	2bff      	cmp	r3, #255	; 0xff
 c00281c:	d932      	bls.n	c002884 <CFA_ENGINE_new_log_entry+0x78>
		end = HAL_GetTick();
 c00281e:	f001 fac3 	bl	c003da8 <HAL_GetTick>
 c002822:	4603      	mov	r3, r0
 c002824:	4a54      	ldr	r2, [pc, #336]	; (c002978 <CFA_ENGINE_new_log_entry+0x16c>)
 c002826:	6013      	str	r3, [r2, #0]
		app_exec_time += end - start;
 c002828:	4b53      	ldr	r3, [pc, #332]	; (c002978 <CFA_ENGINE_new_log_entry+0x16c>)
 c00282a:	681a      	ldr	r2, [r3, #0]
 c00282c:	4b53      	ldr	r3, [pc, #332]	; (c00297c <CFA_ENGINE_new_log_entry+0x170>)
 c00282e:	681b      	ldr	r3, [r3, #0]
 c002830:	1ad2      	subs	r2, r2, r3
 c002832:	4b53      	ldr	r3, [pc, #332]	; (c002980 <CFA_ENGINE_new_log_entry+0x174>)
 c002834:	681b      	ldr	r3, [r3, #0]
 c002836:	4413      	add	r3, r2
 c002838:	4a51      	ldr	r2, [pc, #324]	; (c002980 <CFA_ENGINE_new_log_entry+0x174>)
 c00283a:	6013      	str	r3, [r2, #0]
		cfa_engine_conf.attestation_status = WAITING_PARTIAL;
 c00283c:	4b51      	ldr	r3, [pc, #324]	; (c002984 <CFA_ENGINE_new_log_entry+0x178>)
 c00283e:	2204      	movs	r2, #4
 c002840:	711a      	strb	r2, [r3, #4]
		_send_report();
 c002842:	f7ff ff39 	bl	c0026b8 <_send_report>

		#if CFLOG_TYPE == CFLOG_RAM
		report_secure.CFLog[report_secure.num_CF_Log_size] = value;
 c002846:	4b4b      	ldr	r3, [pc, #300]	; (c002974 <CFA_ENGINE_new_log_entry+0x168>)
 c002848:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c00284c:	4a49      	ldr	r2, [pc, #292]	; (c002974 <CFA_ENGINE_new_log_entry+0x168>)
 c00284e:	3318      	adds	r3, #24
 c002850:	009b      	lsls	r3, r3, #2
 c002852:	4413      	add	r3, r2
 c002854:	687a      	ldr	r2, [r7, #4]
 c002856:	605a      	str	r2, [r3, #4]
		uint32_t addr = (uint32_t)(&FLASH_CFLog[report_secure.num_CF_Log_size]);
//		update_flash(addr, value);
		FLASH_CFLog[report_secure.num_CF_Log_size] = value;
		#endif

		report_secure.num_CF_Log_size++;
 c002858:	4b46      	ldr	r3, [pc, #280]	; (c002974 <CFA_ENGINE_new_log_entry+0x168>)
 c00285a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c00285e:	3301      	adds	r3, #1
 c002860:	b29a      	uxth	r2, r3
 c002862:	4b44      	ldr	r3, [pc, #272]	; (c002974 <CFA_ENGINE_new_log_entry+0x168>)
 c002864:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		cfa_engine_conf.log_counter++;
 c002868:	4b46      	ldr	r3, [pc, #280]	; (c002984 <CFA_ENGINE_new_log_entry+0x178>)
 c00286a:	88db      	ldrh	r3, [r3, #6]
 c00286c:	3301      	adds	r3, #1
 c00286e:	b29a      	uxth	r2, r3
 c002870:	4b44      	ldr	r3, [pc, #272]	; (c002984 <CFA_ENGINE_new_log_entry+0x178>)
 c002872:	80da      	strh	r2, [r3, #6]
		_read_serial_loop();
 c002874:	f7ff fd5a 	bl	c00232c <_read_serial_loop>
		start = HAL_GetTick();
 c002878:	f001 fa96 	bl	c003da8 <HAL_GetTick>
 c00287c:	4603      	mov	r3, r0
 c00287e:	4a3f      	ldr	r2, [pc, #252]	; (c00297c <CFA_ENGINE_new_log_entry+0x170>)
 c002880:	6013      	str	r3, [r2, #0]

			cfa_engine_conf.log_counter++;
			report_secure.num_CF_Log_size++;
		}
	}
	return;
 c002882:	e074      	b.n	c00296e <CFA_ENGINE_new_log_entry+0x162>
		if(report_secure.num_CF_Log_size == MAX_CF_LOG_SIZE)
 c002884:	4b3b      	ldr	r3, [pc, #236]	; (c002974 <CFA_ENGINE_new_log_entry+0x168>)
 c002886:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c00288a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c00288e:	d103      	bne.n	c002898 <CFA_ENGINE_new_log_entry+0x8c>
			loop_detect = loop_detect;
 c002890:	4b3d      	ldr	r3, [pc, #244]	; (c002988 <CFA_ENGINE_new_log_entry+0x17c>)
 c002892:	781a      	ldrb	r2, [r3, #0]
 c002894:	4b3c      	ldr	r3, [pc, #240]	; (c002988 <CFA_ENGINE_new_log_entry+0x17c>)
 c002896:	701a      	strb	r2, [r3, #0]
		prev_entry = report_secure.CFLog[report_secure.num_CF_Log_size - 1];
 c002898:	4b36      	ldr	r3, [pc, #216]	; (c002974 <CFA_ENGINE_new_log_entry+0x168>)
 c00289a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c00289e:	3b01      	subs	r3, #1
 c0028a0:	4a34      	ldr	r2, [pc, #208]	; (c002974 <CFA_ENGINE_new_log_entry+0x168>)
 c0028a2:	3318      	adds	r3, #24
 c0028a4:	009b      	lsls	r3, r3, #2
 c0028a6:	4413      	add	r3, r2
 c0028a8:	685b      	ldr	r3, [r3, #4]
 c0028aa:	4a38      	ldr	r2, [pc, #224]	; (c00298c <CFA_ENGINE_new_log_entry+0x180>)
 c0028ac:	6013      	str	r3, [r2, #0]
		if(report_secure.num_CF_Log_size != 0 && prev_entry == value){
 c0028ae:	4b31      	ldr	r3, [pc, #196]	; (c002974 <CFA_ENGINE_new_log_entry+0x168>)
 c0028b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c0028b4:	2b00      	cmp	r3, #0
 c0028b6:	d01b      	beq.n	c0028f0 <CFA_ENGINE_new_log_entry+0xe4>
 c0028b8:	4b34      	ldr	r3, [pc, #208]	; (c00298c <CFA_ENGINE_new_log_entry+0x180>)
 c0028ba:	681b      	ldr	r3, [r3, #0]
 c0028bc:	687a      	ldr	r2, [r7, #4]
 c0028be:	429a      	cmp	r2, r3
 c0028c0:	d116      	bne.n	c0028f0 <CFA_ENGINE_new_log_entry+0xe4>
			if (loop_detect == 0){
 c0028c2:	4b31      	ldr	r3, [pc, #196]	; (c002988 <CFA_ENGINE_new_log_entry+0x17c>)
 c0028c4:	781b      	ldrb	r3, [r3, #0]
 c0028c6:	2b00      	cmp	r3, #0
 c0028c8:	d107      	bne.n	c0028da <CFA_ENGINE_new_log_entry+0xce>
				loop_detect ^= 1;
 c0028ca:	4b2f      	ldr	r3, [pc, #188]	; (c002988 <CFA_ENGINE_new_log_entry+0x17c>)
 c0028cc:	781b      	ldrb	r3, [r3, #0]
 c0028ce:	f083 0301 	eor.w	r3, r3, #1
 c0028d2:	b2da      	uxtb	r2, r3
 c0028d4:	4b2c      	ldr	r3, [pc, #176]	; (c002988 <CFA_ENGINE_new_log_entry+0x17c>)
 c0028d6:	701a      	strb	r2, [r3, #0]
			if (loop_detect == 0){
 c0028d8:	e047      	b.n	c00296a <CFA_ENGINE_new_log_entry+0x15e>
			} else if (loop_detect == 1){
 c0028da:	4b2b      	ldr	r3, [pc, #172]	; (c002988 <CFA_ENGINE_new_log_entry+0x17c>)
 c0028dc:	781b      	ldrb	r3, [r3, #0]
 c0028de:	2b01      	cmp	r3, #1
 c0028e0:	d143      	bne.n	c00296a <CFA_ENGINE_new_log_entry+0x15e>
				loop_counter++;
 c0028e2:	4b2b      	ldr	r3, [pc, #172]	; (c002990 <CFA_ENGINE_new_log_entry+0x184>)
 c0028e4:	881b      	ldrh	r3, [r3, #0]
 c0028e6:	3301      	adds	r3, #1
 c0028e8:	b29a      	uxth	r2, r3
 c0028ea:	4b29      	ldr	r3, [pc, #164]	; (c002990 <CFA_ENGINE_new_log_entry+0x184>)
 c0028ec:	801a      	strh	r2, [r3, #0]
			if (loop_detect == 0){
 c0028ee:	e03c      	b.n	c00296a <CFA_ENGINE_new_log_entry+0x15e>
			if(loop_detect == 1){
 c0028f0:	4b25      	ldr	r3, [pc, #148]	; (c002988 <CFA_ENGINE_new_log_entry+0x17c>)
 c0028f2:	781b      	ldrb	r3, [r3, #0]
 c0028f4:	2b01      	cmp	r3, #1
 c0028f6:	d120      	bne.n	c00293a <CFA_ENGINE_new_log_entry+0x12e>
					report_secure.CFLog[report_secure.num_CF_Log_size] = (0xffff0000 + loop_counter);
 c0028f8:	4b25      	ldr	r3, [pc, #148]	; (c002990 <CFA_ENGINE_new_log_entry+0x184>)
 c0028fa:	881b      	ldrh	r3, [r3, #0]
 c0028fc:	461a      	mov	r2, r3
 c0028fe:	4b1d      	ldr	r3, [pc, #116]	; (c002974 <CFA_ENGINE_new_log_entry+0x168>)
 c002900:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c002904:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 c002908:	491a      	ldr	r1, [pc, #104]	; (c002974 <CFA_ENGINE_new_log_entry+0x168>)
 c00290a:	3318      	adds	r3, #24
 c00290c:	009b      	lsls	r3, r3, #2
 c00290e:	440b      	add	r3, r1
 c002910:	605a      	str	r2, [r3, #4]
				loop_detect = 0;
 c002912:	4b1d      	ldr	r3, [pc, #116]	; (c002988 <CFA_ENGINE_new_log_entry+0x17c>)
 c002914:	2200      	movs	r2, #0
 c002916:	701a      	strb	r2, [r3, #0]
				cfa_engine_conf.log_counter++;
 c002918:	4b1a      	ldr	r3, [pc, #104]	; (c002984 <CFA_ENGINE_new_log_entry+0x178>)
 c00291a:	88db      	ldrh	r3, [r3, #6]
 c00291c:	3301      	adds	r3, #1
 c00291e:	b29a      	uxth	r2, r3
 c002920:	4b18      	ldr	r3, [pc, #96]	; (c002984 <CFA_ENGINE_new_log_entry+0x178>)
 c002922:	80da      	strh	r2, [r3, #6]
				report_secure.num_CF_Log_size++;
 c002924:	4b13      	ldr	r3, [pc, #76]	; (c002974 <CFA_ENGINE_new_log_entry+0x168>)
 c002926:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c00292a:	3301      	adds	r3, #1
 c00292c:	b29a      	uxth	r2, r3
 c00292e:	4b11      	ldr	r3, [pc, #68]	; (c002974 <CFA_ENGINE_new_log_entry+0x168>)
 c002930:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
				loop_counter = 1;
 c002934:	4b16      	ldr	r3, [pc, #88]	; (c002990 <CFA_ENGINE_new_log_entry+0x184>)
 c002936:	2201      	movs	r2, #1
 c002938:	801a      	strh	r2, [r3, #0]
			report_secure.CFLog[report_secure.num_CF_Log_size] = value;
 c00293a:	4b0e      	ldr	r3, [pc, #56]	; (c002974 <CFA_ENGINE_new_log_entry+0x168>)
 c00293c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c002940:	4a0c      	ldr	r2, [pc, #48]	; (c002974 <CFA_ENGINE_new_log_entry+0x168>)
 c002942:	3318      	adds	r3, #24
 c002944:	009b      	lsls	r3, r3, #2
 c002946:	4413      	add	r3, r2
 c002948:	687a      	ldr	r2, [r7, #4]
 c00294a:	605a      	str	r2, [r3, #4]
			cfa_engine_conf.log_counter++;
 c00294c:	4b0d      	ldr	r3, [pc, #52]	; (c002984 <CFA_ENGINE_new_log_entry+0x178>)
 c00294e:	88db      	ldrh	r3, [r3, #6]
 c002950:	3301      	adds	r3, #1
 c002952:	b29a      	uxth	r2, r3
 c002954:	4b0b      	ldr	r3, [pc, #44]	; (c002984 <CFA_ENGINE_new_log_entry+0x178>)
 c002956:	80da      	strh	r2, [r3, #6]
			report_secure.num_CF_Log_size++;
 c002958:	4b06      	ldr	r3, [pc, #24]	; (c002974 <CFA_ENGINE_new_log_entry+0x168>)
 c00295a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 c00295e:	3301      	adds	r3, #1
 c002960:	b29a      	uxth	r2, r3
 c002962:	4b04      	ldr	r3, [pc, #16]	; (c002974 <CFA_ENGINE_new_log_entry+0x168>)
 c002964:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	return;
 c002968:	e000      	b.n	c00296c <CFA_ENGINE_new_log_entry+0x160>
			if (loop_detect == 0){
 c00296a:	bf00      	nop
	return;
 c00296c:	bf00      	nop
}
 c00296e:	3708      	adds	r7, #8
 c002970:	46bd      	mov	sp, r7
 c002972:	bd80      	pop	{r7, pc}
 c002974:	30000034 	.word	0x30000034
 c002978:	3000066c 	.word	0x3000066c
 c00297c:	30000668 	.word	0x30000668
 c002980:	30000650 	.word	0x30000650
 c002984:	300004b8 	.word	0x300004b8
 c002988:	300006b4 	.word	0x300006b4
 c00298c:	300006b8 	.word	0x300006b8
 c002990:	30000024 	.word	0x30000024

0c002994 <CFA_ENGINE_run_attestation>:
	}
	return;
}
*/

void CFA_ENGINE_run_attestation(){
 c002994:	b580      	push	{r7, lr}
 c002996:	af00      	add	r7, sp, #0
	if (cfa_engine_conf.initialized != INITIALIZED){
 c002998:	4b18      	ldr	r3, [pc, #96]	; (c0029fc <CFA_ENGINE_run_attestation+0x68>)
 c00299a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 c00299e:	2bee      	cmp	r3, #238	; 0xee
 c0029a0:	d12a      	bne.n	c0029f8 <CFA_ENGINE_run_attestation+0x64>
	//	*ERROR = ERROR_CFA_ENGINE_NOT_INITIALIZED;
		return;
	}

	report_secure.num_CF_Log_size = 0;
 c0029a2:	4b17      	ldr	r3, [pc, #92]	; (c002a00 <CFA_ENGINE_run_attestation+0x6c>)
 c0029a4:	2200      	movs	r2, #0
 c0029a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	cfa_engine_conf.attestation_status = ACTIVE;
 c0029aa:	4b14      	ldr	r3, [pc, #80]	; (c0029fc <CFA_ENGINE_run_attestation+0x68>)
 c0029ac:	2201      	movs	r2, #1
 c0029ae:	711a      	strb	r2, [r3, #4]
	cfa_engine_conf.log_counter = 0;
 c0029b0:	4b12      	ldr	r3, [pc, #72]	; (c0029fc <CFA_ENGINE_run_attestation+0x68>)
 c0029b2:	2200      	movs	r2, #0
 c0029b4:	80da      	strh	r2, [r3, #6]
	report_secure.number_of_logs_sent = 0;
 c0029b6:	4b12      	ldr	r3, [pc, #72]	; (c002a00 <CFA_ENGINE_run_attestation+0x6c>)
 c0029b8:	2200      	movs	r2, #0
 c0029ba:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464


//	_initialize_timer_interrupt();

	// Call the application
	start = HAL_GetTick();
 c0029be:	f001 f9f3 	bl	c003da8 <HAL_GetTick>
 c0029c2:	4603      	mov	r3, r0
 c0029c4:	4a0f      	ldr	r2, [pc, #60]	; (c002a04 <CFA_ENGINE_run_attestation+0x70>)
 c0029c6:	6013      	str	r3, [r2, #0]
	_run_application();
 c0029c8:	f7ff fb6a 	bl	c0020a0 <_run_application>
	end = HAL_GetTick();
 c0029cc:	f001 f9ec 	bl	c003da8 <HAL_GetTick>
 c0029d0:	4603      	mov	r3, r0
 c0029d2:	4a0d      	ldr	r2, [pc, #52]	; (c002a08 <CFA_ENGINE_run_attestation+0x74>)
 c0029d4:	6013      	str	r3, [r2, #0]
	app_exec_time += end - start;
 c0029d6:	4b0c      	ldr	r3, [pc, #48]	; (c002a08 <CFA_ENGINE_run_attestation+0x74>)
 c0029d8:	681a      	ldr	r2, [r3, #0]
 c0029da:	4b0a      	ldr	r3, [pc, #40]	; (c002a04 <CFA_ENGINE_run_attestation+0x70>)
 c0029dc:	681b      	ldr	r3, [r3, #0]
 c0029de:	1ad2      	subs	r2, r2, r3
 c0029e0:	4b0a      	ldr	r3, [pc, #40]	; (c002a0c <CFA_ENGINE_run_attestation+0x78>)
 c0029e2:	681b      	ldr	r3, [r3, #0]
 c0029e4:	4413      	add	r3, r2
 c0029e6:	4a09      	ldr	r2, [pc, #36]	; (c002a0c <CFA_ENGINE_run_attestation+0x78>)
 c0029e8:	6013      	str	r3, [r2, #0]

	_deactivate_timer_interrupt();
 c0029ea:	f7ff fd05 	bl	c0023f8 <_deactivate_timer_interrupt>

	// Set Final report Flag
	report_secure.isFinal = TRUE;
 c0029ee:	4b04      	ldr	r3, [pc, #16]	; (c002a00 <CFA_ENGINE_run_attestation+0x6c>)
 c0029f0:	2201      	movs	r2, #1
 c0029f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	return;
 c0029f6:	e000      	b.n	c0029fa <CFA_ENGINE_run_attestation+0x66>
		return;
 c0029f8:	bf00      	nop
}
 c0029fa:	bd80      	pop	{r7, pc}
 c0029fc:	300004b8 	.word	0x300004b8
 c002a00:	30000034 	.word	0x30000034
 c002a04:	30000668 	.word	0x30000668
 c002a08:	3000066c 	.word	0x3000066c
 c002a0c:	30000650 	.word	0x30000650

0c002a10 <TRACES_DMA_init>:

void TRACES_DMA_init(){
 c002a10:	b580      	push	{r7, lr}
 c002a12:	b082      	sub	sp, #8
 c002a14:	af00      	add	r7, sp, #0
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 c002a16:	4b2f      	ldr	r3, [pc, #188]	; (c002ad4 <TRACES_DMA_init+0xc4>)
 c002a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002a1a:	4a2e      	ldr	r2, [pc, #184]	; (c002ad4 <TRACES_DMA_init+0xc4>)
 c002a1c:	f043 0301 	orr.w	r3, r3, #1
 c002a20:	6493      	str	r3, [r2, #72]	; 0x48
 c002a22:	4b2c      	ldr	r3, [pc, #176]	; (c002ad4 <TRACES_DMA_init+0xc4>)
 c002a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002a26:	f003 0301 	and.w	r3, r3, #1
 c002a2a:	607b      	str	r3, [r7, #4]
 c002a2c:	687b      	ldr	r3, [r7, #4]

	  /* Configure DMA request hdma on DMA1_Channel1 */
	  hdma.Instance = DMA1_Channel1;
 c002a2e:	4b2a      	ldr	r3, [pc, #168]	; (c002ad8 <TRACES_DMA_init+0xc8>)
 c002a30:	4a2a      	ldr	r2, [pc, #168]	; (c002adc <TRACES_DMA_init+0xcc>)
 c002a32:	601a      	str	r2, [r3, #0]
	  hdma.Init.Request = DMA_REQUEST_MEM2MEM;
 c002a34:	4b28      	ldr	r3, [pc, #160]	; (c002ad8 <TRACES_DMA_init+0xc8>)
 c002a36:	2200      	movs	r2, #0
 c002a38:	605a      	str	r2, [r3, #4]
	  hdma.Init.Direction = DMA_MEMORY_TO_MEMORY;
 c002a3a:	4b27      	ldr	r3, [pc, #156]	; (c002ad8 <TRACES_DMA_init+0xc8>)
 c002a3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 c002a40:	609a      	str	r2, [r3, #8]
	  hdma.Init.PeriphInc = DMA_PINC_ENABLE;
 c002a42:	4b25      	ldr	r3, [pc, #148]	; (c002ad8 <TRACES_DMA_init+0xc8>)
 c002a44:	2240      	movs	r2, #64	; 0x40
 c002a46:	60da      	str	r2, [r3, #12]
	  hdma.Init.MemInc = DMA_MINC_ENABLE;
 c002a48:	4b23      	ldr	r3, [pc, #140]	; (c002ad8 <TRACES_DMA_init+0xc8>)
 c002a4a:	2280      	movs	r2, #128	; 0x80
 c002a4c:	611a      	str	r2, [r3, #16]
	  hdma.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 c002a4e:	4b22      	ldr	r3, [pc, #136]	; (c002ad8 <TRACES_DMA_init+0xc8>)
 c002a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 c002a54:	615a      	str	r2, [r3, #20]
	  hdma.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 c002a56:	4b20      	ldr	r3, [pc, #128]	; (c002ad8 <TRACES_DMA_init+0xc8>)
 c002a58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c002a5c:	619a      	str	r2, [r3, #24]
	  hdma.Init.Mode = DMA_NORMAL;
 c002a5e:	4b1e      	ldr	r3, [pc, #120]	; (c002ad8 <TRACES_DMA_init+0xc8>)
 c002a60:	2200      	movs	r2, #0
 c002a62:	61da      	str	r2, [r3, #28]
	  hdma.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 c002a64:	4b1c      	ldr	r3, [pc, #112]	; (c002ad8 <TRACES_DMA_init+0xc8>)
 c002a66:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 c002a6a:	621a      	str	r2, [r3, #32]
	  if (HAL_DMA_Init(&hdma) != HAL_OK)
 c002a6c:	481a      	ldr	r0, [pc, #104]	; (c002ad8 <TRACES_DMA_init+0xc8>)
 c002a6e:	f001 fab7 	bl	c003fe0 <HAL_DMA_Init>
 c002a72:	4603      	mov	r3, r0
 c002a74:	2b00      	cmp	r3, #0
 c002a76:	d001      	beq.n	c002a7c <TRACES_DMA_init+0x6c>
	  {
	    Error_Handler( );
 c002a78:	f000 fa4e 	bl	c002f18 <Error_Handler>
	  }

	  /*  */
	  if (HAL_DMA_ConfigChannelAttributes(&hdma, DMA_CHANNEL_NPRIV) != HAL_OK)
 c002a7c:	2110      	movs	r1, #16
 c002a7e:	4816      	ldr	r0, [pc, #88]	; (c002ad8 <TRACES_DMA_init+0xc8>)
 c002a80:	f001 fb56 	bl	c004130 <HAL_DMA_ConfigChannelAttributes>
 c002a84:	4603      	mov	r3, r0
 c002a86:	2b00      	cmp	r3, #0
 c002a88:	d001      	beq.n	c002a8e <TRACES_DMA_init+0x7e>
	  {
	    Error_Handler( );
 c002a8a:	f000 fa45 	bl	c002f18 <Error_Handler>
	  }

	  /*  */
	  if (HAL_DMA_ConfigChannelAttributes(&hdma, DMA_CHANNEL_SEC) != HAL_OK)
 c002a8e:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c002a92:	4811      	ldr	r0, [pc, #68]	; (c002ad8 <TRACES_DMA_init+0xc8>)
 c002a94:	f001 fb4c 	bl	c004130 <HAL_DMA_ConfigChannelAttributes>
 c002a98:	4603      	mov	r3, r0
 c002a9a:	2b00      	cmp	r3, #0
 c002a9c:	d001      	beq.n	c002aa2 <TRACES_DMA_init+0x92>
	  {
	    Error_Handler( );
 c002a9e:	f000 fa3b 	bl	c002f18 <Error_Handler>
	  }

	  /*  */
	  if (HAL_DMA_ConfigChannelAttributes(&hdma, DMA_CHANNEL_SRC_SEC) != HAL_OK)
 c002aa2:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 c002aa6:	480c      	ldr	r0, [pc, #48]	; (c002ad8 <TRACES_DMA_init+0xc8>)
 c002aa8:	f001 fb42 	bl	c004130 <HAL_DMA_ConfigChannelAttributes>
 c002aac:	4603      	mov	r3, r0
 c002aae:	2b00      	cmp	r3, #0
 c002ab0:	d001      	beq.n	c002ab6 <TRACES_DMA_init+0xa6>
	  {
	    Error_Handler( );
 c002ab2:	f000 fa31 	bl	c002f18 <Error_Handler>
	  }

	  /*  */
	  if (HAL_DMA_ConfigChannelAttributes(&hdma, DMA_CHANNEL_DEST_SEC) != HAL_OK)
 c002ab6:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 c002aba:	4807      	ldr	r0, [pc, #28]	; (c002ad8 <TRACES_DMA_init+0xc8>)
 c002abc:	f001 fb38 	bl	c004130 <HAL_DMA_ConfigChannelAttributes>
 c002ac0:	4603      	mov	r3, r0
 c002ac2:	2b00      	cmp	r3, #0
 c002ac4:	d001      	beq.n	c002aca <TRACES_DMA_init+0xba>
	  {
	    Error_Handler( );
 c002ac6:	f000 fa27 	bl	c002f18 <Error_Handler>
	  }
}
 c002aca:	bf00      	nop
 c002acc:	3708      	adds	r7, #8
 c002ace:	46bd      	mov	sp, r7
 c002ad0:	bd80      	pop	{r7, pc}
 c002ad2:	bf00      	nop
 c002ad4:	50021000 	.word	0x50021000
 c002ad8:	300005c8 	.word	0x300005c8
 c002adc:	50020008 	.word	0x50020008

0c002ae0 <CFA_ENGINE_initialize>:

void CFA_ENGINE_initialize(){
 c002ae0:	b580      	push	{r7, lr}
 c002ae2:	af00      	add	r7, sp, #0

	if (cfa_engine_conf.initialized == INITIALIZED){
 c002ae4:	4b0a      	ldr	r3, [pc, #40]	; (c002b10 <CFA_ENGINE_initialize+0x30>)
 c002ae6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 c002aea:	2bee      	cmp	r3, #238	; 0xee
 c002aec:	d00e      	beq.n	c002b0c <CFA_ENGINE_initialize+0x2c>
		return; //ERROR_cfa_engine_ALREADY_INITIALIZED;;
	}

	set_hmac_key(att_key, 32);
 c002aee:	4b09      	ldr	r3, [pc, #36]	; (c002b14 <CFA_ENGINE_initialize+0x34>)
 c002af0:	681b      	ldr	r3, [r3, #0]
 c002af2:	2120      	movs	r1, #32
 c002af4:	4618      	mov	r0, r3
 c002af6:	f000 f8c9 	bl	c002c8c <set_hmac_key>

	_attest_memory();
 c002afa:	f7ff fe2b 	bl	c002754 <_attest_memory>
	_setup_data();
 c002afe:	f7ff fa2d 	bl	c001f5c <_setup_data>
	_clean();
 c002b02:	f7ff fa87 	bl	c002014 <_clean>

	// init DMA
	TRACES_DMA_init();
 c002b06:	f7ff ff83 	bl	c002a10 <TRACES_DMA_init>
	////

	return;
 c002b0a:	e000      	b.n	c002b0e <CFA_ENGINE_initialize+0x2e>
		return; //ERROR_cfa_engine_ALREADY_INITIALIZED;;
 c002b0c:	bf00      	nop
}
 c002b0e:	bd80      	pop	{r7, pc}
 c002b10:	300004b8 	.word	0x300004b8
 c002b14:	30000020 	.word	0x30000020

0c002b18 <_heal_function>:
	HAL_NVIC_SystemReset();
	return;
}


void _heal_function(){
 c002b18:	b480      	push	{r7}
 c002b1a:	af00      	add	r7, sp, #0
	while(1);
 c002b1c:	e7fe      	b.n	c002b1c <_heal_function+0x4>
	...

0c002b20 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 c002b20:	b580      	push	{r7, lr}
 c002b22:	b082      	sub	sp, #8
 c002b24:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c002b26:	4b09      	ldr	r3, [pc, #36]	; (c002b4c <MX_GPIO_Init+0x2c>)
 c002b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002b2a:	4a08      	ldr	r2, [pc, #32]	; (c002b4c <MX_GPIO_Init+0x2c>)
 c002b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c002b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 c002b32:	4b06      	ldr	r3, [pc, #24]	; (c002b4c <MX_GPIO_Init+0x2c>)
 c002b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c002b3a:	607b      	str	r3, [r7, #4]
 c002b3c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 c002b3e:	f002 f845 	bl	c004bcc <HAL_PWREx_EnableVddIO2>

}
 c002b42:	bf00      	nop
 c002b44:	3708      	adds	r7, #8
 c002b46:	46bd      	mov	sp, r7
 c002b48:	bd80      	pop	{r7, pc}
 c002b4a:	bf00      	nop
 c002b4c:	50021000 	.word	0x50021000

0c002b50 <MX_GTZC_S_Init>:

/* USER CODE END 0 */

/* GTZC_S init function */
void MX_GTZC_S_Init(void)
{
 c002b50:	b580      	push	{r7, lr}
 c002b52:	b09c      	sub	sp, #112	; 0x70
 c002b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c002b56:	1d3b      	adds	r3, r7, #4
 c002b58:	226c      	movs	r2, #108	; 0x6c
 c002b5a:	2100      	movs	r1, #0
 c002b5c:	4618      	mov	r0, r3
 c002b5e:	f005 f918 	bl	c007d92 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_TIM3, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c002b62:	f240 3101 	movw	r1, #769	; 0x301
 c002b66:	2001      	movs	r0, #1
 c002b68:	f001 fd4c 	bl	c004604 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c002b6c:	4603      	mov	r3, r0
 c002b6e:	2b00      	cmp	r3, #0
 c002b70:	d001      	beq.n	c002b76 <MX_GTZC_S_Init+0x26>
  {
    Error_Handler();
 c002b72:	f000 f9d1 	bl	c002f18 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_TIM4, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c002b76:	f240 3101 	movw	r1, #769	; 0x301
 c002b7a:	2002      	movs	r0, #2
 c002b7c:	f001 fd42 	bl	c004604 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c002b80:	4603      	mov	r3, r0
 c002b82:	2b00      	cmp	r3, #0
 c002b84:	d001      	beq.n	c002b8a <MX_GTZC_S_Init+0x3a>
  {
    Error_Handler();
 c002b86:	f000 f9c7 	bl	c002f18 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_LPUART1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c002b8a:	f240 3101 	movw	r1, #769	; 0x301
 c002b8e:	2015      	movs	r0, #21
 c002b90:	f001 fd38 	bl	c004604 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c002b94:	4603      	mov	r3, r0
 c002b96:	2b00      	cmp	r3, #0
 c002b98:	d001      	beq.n	c002b9e <MX_GTZC_S_Init+0x4e>
  {
    Error_Handler();
 c002b9a:	f000 f9bd 	bl	c002f18 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c002b9e:	2300      	movs	r3, #0
 c002ba0:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c002ba2:	2300      	movs	r3, #0
 c002ba4:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c002ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002baa:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c002bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002bb0:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c002bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002bb6:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c002bb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002bbc:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c002bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002bc2:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c002bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002bc8:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c002bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002bce:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c002bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c002bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c002bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002be0:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c002be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002be6:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c002be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c002bec:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c002bee:	2300      	movs	r3, #0
 c002bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c002bf2:	2300      	movs	r3, #0
 c002bf4:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c002bf6:	2300      	movs	r3, #0
 c002bf8:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c002bfa:	2300      	movs	r3, #0
 c002bfc:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c002bfe:	2300      	movs	r3, #0
 c002c00:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c002c02:	2300      	movs	r3, #0
 c002c04:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c002c06:	2300      	movs	r3, #0
 c002c08:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c002c0a:	2300      	movs	r3, #0
 c002c0c:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c002c0e:	2300      	movs	r3, #0
 c002c10:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c002c12:	2300      	movs	r3, #0
 c002c14:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c002c16:	2300      	movs	r3, #0
 c002c18:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c002c1a:	2300      	movs	r3, #0
 c002c1c:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c002c1e:	2300      	movs	r3, #0
 c002c20:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c002c22:	1d3b      	adds	r3, r7, #4
 c002c24:	4619      	mov	r1, r3
 c002c26:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c002c2a:	f001 fdc3 	bl	c0047b4 <HAL_GTZC_MPCBB_ConfigMem>
 c002c2e:	4603      	mov	r3, r0
 c002c30:	2b00      	cmp	r3, #0
 c002c32:	d001      	beq.n	c002c38 <MX_GTZC_S_Init+0xe8>
  {
    Error_Handler();
 c002c34:	f000 f970 	bl	c002f18 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c002c38:	2300      	movs	r3, #0
 c002c3a:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c002c3c:	2300      	movs	r3, #0
 c002c3e:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c002c40:	2300      	movs	r3, #0
 c002c42:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c002c44:	2300      	movs	r3, #0
 c002c46:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c002c48:	2300      	movs	r3, #0
 c002c4a:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c002c4c:	2300      	movs	r3, #0
 c002c4e:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c002c50:	2300      	movs	r3, #0
 c002c52:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c002c54:	2300      	movs	r3, #0
 c002c56:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c002c58:	2300      	movs	r3, #0
 c002c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c002c5c:	1d3b      	adds	r3, r7, #4
 c002c5e:	4619      	mov	r1, r3
 c002c60:	4809      	ldr	r0, [pc, #36]	; (c002c88 <MX_GTZC_S_Init+0x138>)
 c002c62:	f001 fda7 	bl	c0047b4 <HAL_GTZC_MPCBB_ConfigMem>
 c002c66:	4603      	mov	r3, r0
 c002c68:	2b00      	cmp	r3, #0
 c002c6a:	d001      	beq.n	c002c70 <MX_GTZC_S_Init+0x120>
  {
    Error_Handler();
 c002c6c:	f000 f954 	bl	c002f18 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */
  if (HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_LPUART1) != HAL_OK)
 c002c70:	2015      	movs	r0, #21
 c002c72:	f001 fe23 	bl	c0048bc <HAL_GTZC_TZIC_EnableIT>
 c002c76:	4603      	mov	r3, r0
 c002c78:	2b00      	cmp	r3, #0
 c002c7a:	d001      	beq.n	c002c80 <MX_GTZC_S_Init+0x130>
  {
    Error_Handler();
 c002c7c:	f000 f94c 	bl	c002f18 <Error_Handler>
  }

  /* USER CODE END GTZC_S_Init 2 */

}
 c002c80:	bf00      	nop
 c002c82:	3770      	adds	r7, #112	; 0x70
 c002c84:	46bd      	mov	sp, r7
 c002c86:	bd80      	pop	{r7, pc}
 c002c88:	30030000 	.word	0x30030000

0c002c8c <set_hmac_key>:

HAL_StatusTypeDef HMAC_SHA_265(uint8_t *pInBuffer, uint32_t Size, uint8_t* pOutBuffer){
	return HAL_HMACEx_SHA256_Start(&hhash, pInBuffer, Size, pOutBuffer, HASH_TIMEOUT);
}

void set_hmac_key(uint8_t * att_key, uint32_t size){
 c002c8c:	b480      	push	{r7}
 c002c8e:	b083      	sub	sp, #12
 c002c90:	af00      	add	r7, sp, #0
 c002c92:	6078      	str	r0, [r7, #4]
 c002c94:	6039      	str	r1, [r7, #0]
	hhash.Init.KeySize = size;
 c002c96:	4a06      	ldr	r2, [pc, #24]	; (c002cb0 <set_hmac_key+0x24>)
 c002c98:	683b      	ldr	r3, [r7, #0]
 c002c9a:	6053      	str	r3, [r2, #4]
	hhash.Init.pKey = att_key;
 c002c9c:	4a04      	ldr	r2, [pc, #16]	; (c002cb0 <set_hmac_key+0x24>)
 c002c9e:	687b      	ldr	r3, [r7, #4]
 c002ca0:	6093      	str	r3, [r2, #8]
}
 c002ca2:	bf00      	nop
 c002ca4:	370c      	adds	r7, #12
 c002ca6:	46bd      	mov	sp, r7
 c002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002cac:	4770      	bx	lr
 c002cae:	bf00      	nop
 c002cb0:	300006bc 	.word	0x300006bc

0c002cb4 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c002cb4:	b480      	push	{r7}
 c002cb6:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c002cb8:	4b2f      	ldr	r3, [pc, #188]	; (c002d78 <TZ_SAU_Setup+0xc4>)
 c002cba:	2200      	movs	r2, #0
 c002cbc:	609a      	str	r2, [r3, #8]
 c002cbe:	4b2e      	ldr	r3, [pc, #184]	; (c002d78 <TZ_SAU_Setup+0xc4>)
 c002cc0:	4a2e      	ldr	r2, [pc, #184]	; (c002d7c <TZ_SAU_Setup+0xc8>)
 c002cc2:	60da      	str	r2, [r3, #12]
 c002cc4:	4b2c      	ldr	r3, [pc, #176]	; (c002d78 <TZ_SAU_Setup+0xc4>)
 c002cc6:	4a2e      	ldr	r2, [pc, #184]	; (c002d80 <TZ_SAU_Setup+0xcc>)
 c002cc8:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c002cca:	4b2b      	ldr	r3, [pc, #172]	; (c002d78 <TZ_SAU_Setup+0xc4>)
 c002ccc:	2201      	movs	r2, #1
 c002cce:	609a      	str	r2, [r3, #8]
 c002cd0:	4b29      	ldr	r3, [pc, #164]	; (c002d78 <TZ_SAU_Setup+0xc4>)
 c002cd2:	4a2c      	ldr	r2, [pc, #176]	; (c002d84 <TZ_SAU_Setup+0xd0>)
 c002cd4:	60da      	str	r2, [r3, #12]
 c002cd6:	4b28      	ldr	r3, [pc, #160]	; (c002d78 <TZ_SAU_Setup+0xc4>)
 c002cd8:	4a2b      	ldr	r2, [pc, #172]	; (c002d88 <TZ_SAU_Setup+0xd4>)
 c002cda:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c002cdc:	4b26      	ldr	r3, [pc, #152]	; (c002d78 <TZ_SAU_Setup+0xc4>)
 c002cde:	2202      	movs	r2, #2
 c002ce0:	609a      	str	r2, [r3, #8]
 c002ce2:	4b25      	ldr	r3, [pc, #148]	; (c002d78 <TZ_SAU_Setup+0xc4>)
 c002ce4:	4a29      	ldr	r2, [pc, #164]	; (c002d8c <TZ_SAU_Setup+0xd8>)
 c002ce6:	60da      	str	r2, [r3, #12]
 c002ce8:	4b23      	ldr	r3, [pc, #140]	; (c002d78 <TZ_SAU_Setup+0xc4>)
 c002cea:	4a29      	ldr	r2, [pc, #164]	; (c002d90 <TZ_SAU_Setup+0xdc>)
 c002cec:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c002cee:	4b22      	ldr	r3, [pc, #136]	; (c002d78 <TZ_SAU_Setup+0xc4>)
 c002cf0:	2203      	movs	r2, #3
 c002cf2:	609a      	str	r2, [r3, #8]
 c002cf4:	4b20      	ldr	r3, [pc, #128]	; (c002d78 <TZ_SAU_Setup+0xc4>)
 c002cf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c002cfa:	60da      	str	r2, [r3, #12]
 c002cfc:	4b1e      	ldr	r3, [pc, #120]	; (c002d78 <TZ_SAU_Setup+0xc4>)
 c002cfe:	4a25      	ldr	r2, [pc, #148]	; (c002d94 <TZ_SAU_Setup+0xe0>)
 c002d00:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c002d02:	4b1d      	ldr	r3, [pc, #116]	; (c002d78 <TZ_SAU_Setup+0xc4>)
 c002d04:	2204      	movs	r2, #4
 c002d06:	609a      	str	r2, [r3, #8]
 c002d08:	4b1b      	ldr	r3, [pc, #108]	; (c002d78 <TZ_SAU_Setup+0xc4>)
 c002d0a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c002d0e:	60da      	str	r2, [r3, #12]
 c002d10:	4b19      	ldr	r3, [pc, #100]	; (c002d78 <TZ_SAU_Setup+0xc4>)
 c002d12:	4a21      	ldr	r2, [pc, #132]	; (c002d98 <TZ_SAU_Setup+0xe4>)
 c002d14:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c002d16:	4b18      	ldr	r3, [pc, #96]	; (c002d78 <TZ_SAU_Setup+0xc4>)
 c002d18:	2205      	movs	r2, #5
 c002d1a:	609a      	str	r2, [r3, #8]
 c002d1c:	4b16      	ldr	r3, [pc, #88]	; (c002d78 <TZ_SAU_Setup+0xc4>)
 c002d1e:	4a1f      	ldr	r2, [pc, #124]	; (c002d9c <TZ_SAU_Setup+0xe8>)
 c002d20:	60da      	str	r2, [r3, #12]
 c002d22:	4b15      	ldr	r3, [pc, #84]	; (c002d78 <TZ_SAU_Setup+0xc4>)
 c002d24:	4a1e      	ldr	r2, [pc, #120]	; (c002da0 <TZ_SAU_Setup+0xec>)
 c002d26:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c002d28:	4b13      	ldr	r3, [pc, #76]	; (c002d78 <TZ_SAU_Setup+0xc4>)
 c002d2a:	2201      	movs	r2, #1
 c002d2c:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c002d2e:	4b1d      	ldr	r3, [pc, #116]	; (c002da4 <TZ_SAU_Setup+0xf0>)
 c002d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c002d34:	4a1b      	ldr	r2, [pc, #108]	; (c002da4 <TZ_SAU_Setup+0xf0>)
 c002d36:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c002d3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c002d3e:	4b1a      	ldr	r3, [pc, #104]	; (c002da8 <TZ_SAU_Setup+0xf4>)
 c002d40:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c002d42:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c002d46:	4a18      	ldr	r2, [pc, #96]	; (c002da8 <TZ_SAU_Setup+0xf4>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c002d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c002d4c:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c002d4e:	4b17      	ldr	r3, [pc, #92]	; (c002dac <TZ_SAU_Setup+0xf8>)
 c002d50:	2200      	movs	r2, #0
 c002d52:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c002d56:	4b15      	ldr	r3, [pc, #84]	; (c002dac <TZ_SAU_Setup+0xf8>)
 c002d58:	2200      	movs	r2, #0
 c002d5a:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c002d5e:	4b13      	ldr	r3, [pc, #76]	; (c002dac <TZ_SAU_Setup+0xf8>)
 c002d60:	2200      	movs	r2, #0
 c002d62:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c002d66:	4b11      	ldr	r3, [pc, #68]	; (c002dac <TZ_SAU_Setup+0xf8>)
 c002d68:	2200      	movs	r2, #0
 c002d6a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c002d6e:	bf00      	nop
 c002d70:	46bd      	mov	sp, r7
 c002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002d76:	4770      	bx	lr
 c002d78:	e000edd0 	.word	0xe000edd0
 c002d7c:	0c03e000 	.word	0x0c03e000
 c002d80:	0c03ffe3 	.word	0x0c03ffe3
 c002d84:	08040000 	.word	0x08040000
 c002d88:	0807ffe1 	.word	0x0807ffe1
 c002d8c:	20018000 	.word	0x20018000
 c002d90:	2003ffe1 	.word	0x2003ffe1
 c002d94:	4fffffe1 	.word	0x4fffffe1
 c002d98:	9fffffe1 	.word	0x9fffffe1
 c002d9c:	0bf90000 	.word	0x0bf90000
 c002da0:	0bfa8fe1 	.word	0x0bfa8fe1
 c002da4:	e000ed00 	.word	0xe000ed00
 c002da8:	e000ef30 	.word	0xe000ef30
 c002dac:	e000e100 	.word	0xe000e100

0c002db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c002db0:	b580      	push	{r7, lr}
 c002db2:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and interrupts secure/non-secure allocation setup done */
  /* in SystemInit() based on partition_stm32l552xx.h file's definitions. */
  /* USER CODE BEGIN 1 */

  //enable SecureFault_Handler, without this HardFault_Handler will be raised.
  SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
 c002db4:	4b0d      	ldr	r3, [pc, #52]	; (c002dec <main+0x3c>)
 c002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002db8:	4a0c      	ldr	r2, [pc, #48]	; (c002dec <main+0x3c>)
 c002dba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c002dbe:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c002dc0:	f000 ff87 	bl	c003cd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c002dc4:	f000 f858 	bl	c002e78 <SystemClock_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c002dc8:	f7ff fec2 	bl	c002b50 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
 
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c002dcc:	f7ff fea8 	bl	c002b20 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 c002dd0:	f000 fe82 	bl	c003ad8 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 c002dd4:	f000 fda2 	bl	c00391c <MX_TIM3_Init>
  MX_TIM4_Init();
 c002dd8:	f000 fdee 	bl	c0039b8 <MX_TIM4_Init>

  /* USER CODE BEGIN 2 */
  // Configure SAU and NVIC
  TZ_SAU_Setup();
 c002ddc:	f7ff ff6a 	bl	c002cb4 <TZ_SAU_Setup>
//  SAU->CTRL = 1; //enable SAU
//  FLASH_init();
//  MPU_init();
  CFA_ENGINE_initialize();
 c002de0:	f7ff fe7e 	bl	c002ae0 <CFA_ENGINE_initialize>
  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/


  NonSecure_Init();
 c002de4:	f000 f804 	bl	c002df0 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c002de8:	e7fe      	b.n	c002de8 <main+0x38>
 c002dea:	bf00      	nop
 c002dec:	e000ed00 	.word	0xe000ed00

0c002df0 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c002df0:	b590      	push	{r4, r7, lr}
 c002df2:	b083      	sub	sp, #12
 c002df4:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c002df6:	4b1d      	ldr	r3, [pc, #116]	; (c002e6c <NonSecure_Init+0x7c>)
 c002df8:	4a1d      	ldr	r2, [pc, #116]	; (c002e70 <NonSecure_Init+0x80>)
 c002dfa:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c002dfc:	4b1c      	ldr	r3, [pc, #112]	; (c002e70 <NonSecure_Init+0x80>)
 c002dfe:	681b      	ldr	r3, [r3, #0]
 c002e00:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c002e02:	683b      	ldr	r3, [r7, #0]
 c002e04:	f383 8888 	msr	MSP_NS, r3
}
 c002e08:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c002e0a:	4b1a      	ldr	r3, [pc, #104]	; (c002e74 <NonSecure_Init+0x84>)
 c002e0c:	681b      	ldr	r3, [r3, #0]
 c002e0e:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c002e10:	687b      	ldr	r3, [r7, #4]
 c002e12:	461c      	mov	r4, r3
 c002e14:	0864      	lsrs	r4, r4, #1
 c002e16:	0064      	lsls	r4, r4, #1
 c002e18:	4620      	mov	r0, r4
 c002e1a:	4621      	mov	r1, r4
 c002e1c:	4622      	mov	r2, r4
 c002e1e:	4623      	mov	r3, r4
 c002e20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c002e24:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c002e28:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c002e2c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c002e30:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c002e34:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c002e38:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c002e3c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c002e40:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c002e44:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c002e48:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c002e4c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c002e50:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c002e54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002e58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c002e5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c002e60:	f7fd f9f2 	bl	c000248 <__gnu_cmse_nonsecure_call>
}
 c002e64:	bf00      	nop
 c002e66:	370c      	adds	r7, #12
 c002e68:	46bd      	mov	sp, r7
 c002e6a:	bd90      	pop	{r4, r7, pc}
 c002e6c:	e002ed00 	.word	0xe002ed00
 c002e70:	08040000 	.word	0x08040000
 c002e74:	08040004 	.word	0x08040004

0c002e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c002e78:	b580      	push	{r7, lr}
 c002e7a:	b098      	sub	sp, #96	; 0x60
 c002e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c002e7e:	f107 0318 	add.w	r3, r7, #24
 c002e82:	2248      	movs	r2, #72	; 0x48
 c002e84:	2100      	movs	r1, #0
 c002e86:	4618      	mov	r0, r3
 c002e88:	f004 ff83 	bl	c007d92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c002e8c:	1d3b      	adds	r3, r7, #4
 c002e8e:	2200      	movs	r2, #0
 c002e90:	601a      	str	r2, [r3, #0]
 c002e92:	605a      	str	r2, [r3, #4]
 c002e94:	609a      	str	r2, [r3, #8]
 c002e96:	60da      	str	r2, [r3, #12]
 c002e98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c002e9a:	2000      	movs	r0, #0
 c002e9c:	f001 fe3a 	bl	c004b14 <HAL_PWREx_ControlVoltageScaling>
 c002ea0:	4603      	mov	r3, r0
 c002ea2:	2b00      	cmp	r3, #0
 c002ea4:	d001      	beq.n	c002eaa <SystemClock_Config+0x32>
  {
    Error_Handler();
 c002ea6:	f000 f837 	bl	c002f18 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 c002eaa:	2302      	movs	r3, #2
 c002eac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 c002eae:	f44f 7380 	mov.w	r3, #256	; 0x100
 c002eb2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 c002eb4:	2340      	movs	r3, #64	; 0x40
 c002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c002eb8:	2302      	movs	r3, #2
 c002eba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 c002ebc:	2302      	movs	r3, #2
 c002ebe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 c002ec0:	2304      	movs	r3, #4
 c002ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 c002ec4:	2337      	movs	r3, #55	; 0x37
 c002ec6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c002ec8:	2307      	movs	r3, #7
 c002eca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 c002ecc:	2302      	movs	r3, #2
 c002ece:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c002ed0:	2302      	movs	r3, #2
 c002ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c002ed4:	f107 0318 	add.w	r3, r7, #24
 c002ed8:	4618      	mov	r0, r3
 c002eda:	f001 febb 	bl	c004c54 <HAL_RCC_OscConfig>
 c002ede:	4603      	mov	r3, r0
 c002ee0:	2b00      	cmp	r3, #0
 c002ee2:	d001      	beq.n	c002ee8 <SystemClock_Config+0x70>
  {
    Error_Handler();
 c002ee4:	f000 f818 	bl	c002f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c002ee8:	230f      	movs	r3, #15
 c002eea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c002eec:	2303      	movs	r3, #3
 c002eee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c002ef0:	2300      	movs	r3, #0
 c002ef2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c002ef4:	2300      	movs	r3, #0
 c002ef6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c002ef8:	2300      	movs	r3, #0
 c002efa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c002efc:	1d3b      	adds	r3, r7, #4
 c002efe:	2105      	movs	r1, #5
 c002f00:	4618      	mov	r0, r3
 c002f02:	f002 fb89 	bl	c005618 <HAL_RCC_ClockConfig>
 c002f06:	4603      	mov	r3, r0
 c002f08:	2b00      	cmp	r3, #0
 c002f0a:	d001      	beq.n	c002f10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 c002f0c:	f000 f804 	bl	c002f18 <Error_Handler>
  }
}
 c002f10:	bf00      	nop
 c002f12:	3760      	adds	r7, #96	; 0x60
 c002f14:	46bd      	mov	sp, r7
 c002f16:	bd80      	pop	{r7, pc}

0c002f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c002f18:	b480      	push	{r7}
 c002f1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c002f1c:	b672      	cpsid	i
}
 c002f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c002f20:	e7fe      	b.n	c002f20 <Error_Handler+0x8>
	...

0c002f24 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */

CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func){
 c002f24:	b580      	push	{r7, lr}
 c002f26:	b082      	sub	sp, #8
 c002f28:	af00      	add	r7, sp, #0
 c002f2a:	4603      	mov	r3, r0
 c002f2c:	6039      	str	r1, [r7, #0]
 c002f2e:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c002f30:	683b      	ldr	r3, [r7, #0]
 c002f32:	2b00      	cmp	r3, #0
 c002f34:	d017      	beq.n	c002f66 <__acle_se_SECURE_RegisterCallback+0x42>
  {
    switch(CallbackId)
 c002f36:	79fb      	ldrb	r3, [r7, #7]
 c002f38:	2b02      	cmp	r3, #2
 c002f3a:	d00e      	beq.n	c002f5a <__acle_se_SECURE_RegisterCallback+0x36>
 c002f3c:	2b02      	cmp	r3, #2
 c002f3e:	dc14      	bgt.n	c002f6a <__acle_se_SECURE_RegisterCallback+0x46>
 c002f40:	2b00      	cmp	r3, #0
 c002f42:	d002      	beq.n	c002f4a <__acle_se_SECURE_RegisterCallback+0x26>
 c002f44:	2b01      	cmp	r3, #1
 c002f46:	d004      	beq.n	c002f52 <__acle_se_SECURE_RegisterCallback+0x2e>
      case ATTESTATION_APP_ID:
			pAttestationFunctionCallback = func;
			CFA_ENGINE_register_callback();
			break;
      default:
        break;
 c002f48:	e00f      	b.n	c002f6a <__acle_se_SECURE_RegisterCallback+0x46>
			pSecureFaultCallback = func;
 c002f4a:	4a25      	ldr	r2, [pc, #148]	; (c002fe0 <__acle_se_SECURE_RegisterCallback+0xbc>)
 c002f4c:	683b      	ldr	r3, [r7, #0]
 c002f4e:	6013      	str	r3, [r2, #0]
			break;
 c002f50:	e00c      	b.n	c002f6c <__acle_se_SECURE_RegisterCallback+0x48>
			pSecureErrorCallback = func;
 c002f52:	4a24      	ldr	r2, [pc, #144]	; (c002fe4 <__acle_se_SECURE_RegisterCallback+0xc0>)
 c002f54:	683b      	ldr	r3, [r7, #0]
 c002f56:	6013      	str	r3, [r2, #0]
			break;
 c002f58:	e008      	b.n	c002f6c <__acle_se_SECURE_RegisterCallback+0x48>
			pAttestationFunctionCallback = func;
 c002f5a:	4a23      	ldr	r2, [pc, #140]	; (c002fe8 <__acle_se_SECURE_RegisterCallback+0xc4>)
 c002f5c:	683b      	ldr	r3, [r7, #0]
 c002f5e:	6013      	str	r3, [r2, #0]
			CFA_ENGINE_register_callback();
 c002f60:	f7ff f8f0 	bl	c002144 <CFA_ENGINE_register_callback>
			break;
 c002f64:	e002      	b.n	c002f6c <__acle_se_SECURE_RegisterCallback+0x48>
    }
  }
 c002f66:	bf00      	nop
 c002f68:	e000      	b.n	c002f6c <__acle_se_SECURE_RegisterCallback+0x48>
        break;
 c002f6a:	bf00      	nop
}
 c002f6c:	bf00      	nop
 c002f6e:	3708      	adds	r7, #8
 c002f70:	46bd      	mov	sp, r7
 c002f72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c002f76:	4670      	mov	r0, lr
 c002f78:	4671      	mov	r1, lr
 c002f7a:	4672      	mov	r2, lr
 c002f7c:	4673      	mov	r3, lr
 c002f7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c002f82:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c002f86:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c002f8a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c002f8e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c002f92:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c002f96:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c002f9a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c002f9e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c002fa2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c002fa6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c002faa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c002fae:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c002fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c002fb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c002fba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c002fbe:	f38e 8c00 	msr	CPSR_fs, lr
 c002fc2:	b410      	push	{r4}
 c002fc4:	eef1 ca10 	vmrs	ip, fpscr
 c002fc8:	f64f 7460 	movw	r4, #65376	; 0xff60
 c002fcc:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c002fd0:	ea0c 0c04 	and.w	ip, ip, r4
 c002fd4:	eee1 ca10 	vmsr	fpscr, ip
 c002fd8:	bc10      	pop	{r4}
 c002fda:	46f4      	mov	ip, lr
 c002fdc:	4774      	bxns	lr
 c002fde:	bf00      	nop
 c002fe0:	30000700 	.word	0x30000700
 c002fe4:	30000704 	.word	0x30000704
 c002fe8:	30000708 	.word	0x30000708

0c002fec <__acle_se_SECURE_RunCallback>:

CMSE_NS_ENTRY void SECURE_RunCallback(){
 c002fec:	b580      	push	{r7, lr}
 c002fee:	af00      	add	r7, sp, #0
	CFA_ENGINE_run_attestation(0x23FA);
 c002ff0:	f242 30fa 	movw	r0, #9210	; 0x23fa
 c002ff4:	f7ff fcce 	bl	c002994 <CFA_ENGINE_run_attestation>
	return;
 c002ff8:	bf00      	nop
}
 c002ffa:	46bd      	mov	sp, r7
 c002ffc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c003000:	4670      	mov	r0, lr
 c003002:	4671      	mov	r1, lr
 c003004:	4672      	mov	r2, lr
 c003006:	4673      	mov	r3, lr
 c003008:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00300c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c003010:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c003014:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c003018:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00301c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c003020:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c003024:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c003028:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00302c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c003030:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c003034:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c003038:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00303c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c003040:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c003044:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c003048:	f38e 8c00 	msr	CPSR_fs, lr
 c00304c:	b410      	push	{r4}
 c00304e:	eef1 ca10 	vmrs	ip, fpscr
 c003052:	f64f 7460 	movw	r4, #65376	; 0xff60
 c003056:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00305a:	ea0c 0c04 	and.w	ip, ip, r4
 c00305e:	eee1 ca10 	vmsr	fpscr, ip
 c003062:	bc10      	pop	{r4}
 c003064:	46f4      	mov	ip, lr
 c003066:	4774      	bxns	lr

0c003068 <__acle_se_SECURE_Initialize_CFA_engine>:

CMSE_NS_ENTRY void SECURE_Initialize_CFA_engine(){
 c003068:	b580      	push	{r7, lr}
 c00306a:	af00      	add	r7, sp, #0
	CFA_ENGINE_initialize();
 c00306c:	f7ff fd38 	bl	c002ae0 <CFA_ENGINE_initialize>
	return;
 c003070:	bf00      	nop
}
 c003072:	46bd      	mov	sp, r7
 c003074:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c003078:	4670      	mov	r0, lr
 c00307a:	4671      	mov	r1, lr
 c00307c:	4672      	mov	r2, lr
 c00307e:	4673      	mov	r3, lr
 c003080:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c003084:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c003088:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00308c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c003090:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c003094:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c003098:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00309c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0030a0:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0030a4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0030a8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0030ac:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0030b0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0030b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0030b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0030bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0030c0:	f38e 8c00 	msr	CPSR_fs, lr
 c0030c4:	b410      	push	{r4}
 c0030c6:	eef1 ca10 	vmrs	ip, fpscr
 c0030ca:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0030ce:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0030d2:	ea0c 0c04 	and.w	ip, ip, r4
 c0030d6:	eee1 ca10 	vmsr	fpscr, ip
 c0030da:	bc10      	pop	{r4}
 c0030dc:	46f4      	mov	ip, lr
 c0030de:	4774      	bxns	lr

0c0030e0 <__acle_se_SECURE_Initialize_Attestation>:

CMSE_NS_ENTRY void SECURE_Initialize_Attestation(){
 c0030e0:	b580      	push	{r7, lr}
 c0030e2:	af00      	add	r7, sp, #0
	CFA_ENGINE_initialize();
 c0030e4:	f7ff fcfc 	bl	c002ae0 <CFA_ENGINE_initialize>
	return;
 c0030e8:	bf00      	nop
}
 c0030ea:	46bd      	mov	sp, r7
 c0030ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0030f0:	4670      	mov	r0, lr
 c0030f2:	4671      	mov	r1, lr
 c0030f4:	4672      	mov	r2, lr
 c0030f6:	4673      	mov	r3, lr
 c0030f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0030fc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c003100:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c003104:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c003108:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00310c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c003110:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c003114:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c003118:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00311c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c003120:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c003124:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c003128:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00312c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c003130:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c003134:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c003138:	f38e 8c00 	msr	CPSR_fs, lr
 c00313c:	b410      	push	{r4}
 c00313e:	eef1 ca10 	vmrs	ip, fpscr
 c003142:	f64f 7460 	movw	r4, #65376	; 0xff60
 c003146:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00314a:	ea0c 0c04 	and.w	ip, ip, r4
 c00314e:	eee1 ca10 	vmsr	fpscr, ip
 c003152:	bc10      	pop	{r4}
 c003154:	46f4      	mov	ip, lr
 c003156:	4774      	bxns	lr

0c003158 <__acle_se_SECURE_log_ret>:

CMSE_NS_ENTRY __attribute ((naked)) void SECURE_log_ret(){
	__asm__ volatile("push	{r0, r1, r2, r3, r4, r7, r12}");
 c003158:	e92d 109f 	stmdb	sp!, {r0, r1, r2, r3, r4, r7, ip}
	__asm__ volatile("sub	sp, sp, #28");
 c00315c:	b087      	sub	sp, #28
	__asm__ volatile("add	r7, sp, #0");
 c00315e:	af00      	add	r7, sp, #0
	__asm__ volatile("push	{r7, lr}");
 c003160:	b580      	push	{r7, lr}
	__asm__ volatile("sub	sp, sp, #8");
 c003162:	b082      	sub	sp, #8
	__asm__ volatile("add	r7, sp, #0");
 c003164:	af00      	add	r7, sp, #0

	uint32_t inst_addr;
	asm("mov %0, lr" : "=r"(inst_addr));
 c003166:	4673      	mov	r3, lr
 c003168:	461c      	mov	r4, r3
	CFA_ENGINE_new_log_entry(inst_addr);
 c00316a:	4620      	mov	r0, r4
 c00316c:	f7ff fb4e 	bl	c00280c <CFA_ENGINE_new_log_entry>

	__asm__ volatile("nop");
 c003170:	bf00      	nop
	__asm__ volatile("adds	r7, r7, #8");
 c003172:	3708      	adds	r7, #8
	__asm__ volatile("mov	sp, r7");
 c003174:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r7, lr}");
 c003176:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	__asm__ volatile("mov	r0, lr");
 c00317a:	4670      	mov	r0, lr
	__asm__ volatile("mov	r1, lr");
 c00317c:	4671      	mov	r1, lr
	__asm__ volatile("mov	r2, lr");
 c00317e:	4672      	mov	r2, lr
	__asm__ volatile("mov	r3, lr");
 c003180:	4673      	mov	r3, lr
	__asm__ volatile("vmov.f32	s0, #1.0e+0");
 c003182:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s1, #1.0e+0");
 c003186:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s2, #1.0e+0");
 c00318a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s3, #1.0e+0");
 c00318e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s4, #1.0e+0");
 c003192:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s5, #1.0e+0");
 c003196:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s6, #1.0e+0");
 c00319a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s7, #1.0e+0");
 c00319e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s8, #1.0e+0");
 c0031a2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s9, #1.0e+0");
 c0031a6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s10, #1.0e+0");
 c0031aa:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s11, #1.0e+0");
 c0031ae:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s12, #1.0e+0");
 c0031b2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s13, #1.0e+0");
 c0031b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s14, #1.0e+0");
 c0031ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s15, #1.0e+0");
 c0031be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	__asm__ volatile("msr	APSR_nzcvqg, lr");
 c0031c2:	f38e 8c00 	msr	CPSR_fs, lr
	__asm__ volatile("push	{r4}");
 c0031c6:	b410      	push	{r4}
	__asm__ volatile("vmrs	ip, fpscr");
 c0031c8:	eef1 ca10 	vmrs	ip, fpscr
	__asm__ volatile("movw	r4, #65376");
 c0031cc:	f64f 7460 	movw	r4, #65376	; 0xff60
	__asm__ volatile("movt	r4, #4095");
 c0031d0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
	__asm__ volatile("and	ip, r4");
 c0031d4:	ea0c 0c04 	and.w	ip, ip, r4
	__asm__ volatile("vmsr	fpscr, ip");
 c0031d8:	eee1 ca10 	vmsr	fpscr, ip
	__asm__ volatile("pop	{r4}");
 c0031dc:	bc10      	pop	{r4}
	__asm__ volatile("mov	ip, lr");
 c0031de:	46f4      	mov	ip, lr
	__asm__ volatile("adds	r7, r7, #28");
 c0031e0:	371c      	adds	r7, #28
	__asm__ volatile("mov	sp, r7");
 c0031e2:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r0, r1, r2, r3, r4, r7, r12}");
 c0031e4:	e8bd 109f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r7, ip}
	__asm__ volatile("bics	lr, #1");
 c0031e8:	f03e 0e01 	bics.w	lr, lr, #1
	__asm__ volatile("bxns	lr");
 c0031ec:	4774      	bxns	lr
}
 c0031ee:	bf00      	nop

0c0031f0 <__acle_se_SECURE_log_call>:

CMSE_NS_ENTRY __attribute ((naked)) void SECURE_log_call(uint32_t addr){
	__asm__ volatile("push	{r0, r1, r2, r3, r4, r7, r10}");
 c0031f0:	e92d 049f 	stmdb	sp!, {r0, r1, r2, r3, r4, r7, sl}
	__asm__ volatile("sub	sp, sp, #28");
 c0031f4:	b087      	sub	sp, #28
	__asm__ volatile("add	r7, sp, #0");
 c0031f6:	af00      	add	r7, sp, #0
	__asm__ volatile("push	{r7, lr}");
 c0031f8:	b580      	push	{r7, lr}
	__asm__ volatile("sub	sp, sp, #8");
 c0031fa:	b082      	sub	sp, #8
	__asm__ volatile("add	r7, sp, #0");
 c0031fc:	af00      	add	r7, sp, #0
	__asm__ volatile("sub	r0, r10, #1");
 c0031fe:	f1aa 0001 	sub.w	r0, sl, #1
	__asm__ volatile("bl	CFA_ENGINE_new_log_entry");
 c003202:	f7ff fb03 	bl	c00280c <CFA_ENGINE_new_log_entry>
	__asm__ volatile("nop");
 c003206:	bf00      	nop
	__asm__ volatile("adds	r7, r7, #8");
 c003208:	3708      	adds	r7, #8
	__asm__ volatile("mov	sp, r7");
 c00320a:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r7, lr}");
 c00320c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	__asm__ volatile("mov	r0, lr");
 c003210:	4670      	mov	r0, lr
	__asm__ volatile("mov	r1, lr");
 c003212:	4671      	mov	r1, lr
	__asm__ volatile("mov	r2, lr");
 c003214:	4672      	mov	r2, lr
	__asm__ volatile("mov	r3, lr");
 c003216:	4673      	mov	r3, lr
	__asm__ volatile("vmov.f32	s0, #1.0e+0");
 c003218:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s1, #1.0e+0");
 c00321c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s2, #1.0e+0");
 c003220:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s3, #1.0e+0");
 c003224:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s4, #1.0e+0");
 c003228:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s5, #1.0e+0");
 c00322c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s6, #1.0e+0");
 c003230:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s7, #1.0e+0");
 c003234:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s8, #1.0e+0");
 c003238:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s9, #1.0e+0");
 c00323c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s10, #1.0e+0");
 c003240:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s11, #1.0e+0");
 c003244:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s12, #1.0e+0");
 c003248:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s13, #1.0e+0");
 c00324c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s14, #1.0e+0");
 c003250:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s15, #1.0e+0");
 c003254:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	__asm__ volatile("msr	APSR_nzcvqg, lr");
 c003258:	f38e 8c00 	msr	CPSR_fs, lr
	__asm__ volatile("vmrs	ip, fpscr");
 c00325c:	eef1 ca10 	vmrs	ip, fpscr
	__asm__ volatile("movw	r4, #65376");
 c003260:	f64f 7460 	movw	r4, #65376	; 0xff60
	__asm__ volatile("movt	r4, #4095");
 c003264:	f6c0 74ff 	movt	r4, #4095	; 0xfff
	__asm__ volatile("and	ip, r4");
 c003268:	ea0c 0c04 	and.w	ip, ip, r4
	__asm__ volatile("vmsr	fpscr, ip");
 c00326c:	eee1 ca10 	vmsr	fpscr, ip
	__asm__ volatile("mov	ip, lr");
 c003270:	46f4      	mov	ip, lr
	__asm__ volatile("adds	r7, r7, #28");
 c003272:	371c      	adds	r7, #28
	__asm__ volatile("mov	sp, r7");
 c003274:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r0, r1, r2, r3, r4, r7, r10}");
 c003276:	e8bd 049f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r7, sl}
	__asm__ volatile("bics	r10, #1");
 c00327a:	f03a 0a01 	bics.w	sl, sl, #1
	__asm__ volatile("bxns	r10");
 c00327e:	4754      	bxns	sl
}
 c003280:	bf00      	nop

0c003282 <__acle_se_SECURE_log_cond_br_taken>:

CMSE_NS_ENTRY __attribute ((naked)) void SECURE_log_cond_br_taken(){;
	__asm__ volatile("push	{r0, r1, r2, r3, r4, r7, r12}");
 c003282:	e92d 109f 	stmdb	sp!, {r0, r1, r2, r3, r4, r7, ip}
	__asm__ volatile("sub	sp, sp, #28");
 c003286:	b087      	sub	sp, #28
	__asm__ volatile("add	r7, sp, #0");
 c003288:	af00      	add	r7, sp, #0
	__asm__ volatile("push	{r7, lr}");
 c00328a:	b580      	push	{r7, lr}
	__asm__ volatile("sub	sp, sp, #8");
 c00328c:	b082      	sub	sp, #8
	__asm__ volatile("add	r7, sp, #0");
 c00328e:	af00      	add	r7, sp, #0

	uint32_t inst_addr;
	asm("mov %0, lr" : "=r"(inst_addr));
 c003290:	4673      	mov	r3, lr
 c003292:	461c      	mov	r4, r3
	inst_addr -= 4;
 c003294:	3c04      	subs	r4, #4
	CFA_ENGINE_new_log_entry(inst_addr);
 c003296:	4620      	mov	r0, r4
 c003298:	f7ff fab8 	bl	c00280c <CFA_ENGINE_new_log_entry>

	__asm__ volatile("nop");
 c00329c:	bf00      	nop
	__asm__ volatile("adds	r7, r7, #8");
 c00329e:	3708      	adds	r7, #8
	__asm__ volatile("mov	sp, r7");
 c0032a0:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r7, lr}");
 c0032a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	__asm__ volatile("mov	r0, lr");
 c0032a6:	4670      	mov	r0, lr
	__asm__ volatile("mov	r1, lr");
 c0032a8:	4671      	mov	r1, lr
	__asm__ volatile("mov	r2, lr");
 c0032aa:	4672      	mov	r2, lr
	__asm__ volatile("mov	r3, lr");
 c0032ac:	4673      	mov	r3, lr
	__asm__ volatile("vmov.f32	s0, #1.0e+0");
 c0032ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s1, #1.0e+0");
 c0032b2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s2, #1.0e+0");
 c0032b6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s3, #1.0e+0");
 c0032ba:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s4, #1.0e+0");
 c0032be:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s5, #1.0e+0");
 c0032c2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s6, #1.0e+0");
 c0032c6:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s7, #1.0e+0");
 c0032ca:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s8, #1.0e+0");
 c0032ce:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s9, #1.0e+0");
 c0032d2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s10, #1.0e+0");
 c0032d6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s11, #1.0e+0");
 c0032da:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s12, #1.0e+0");
 c0032de:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s13, #1.0e+0");
 c0032e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s14, #1.0e+0");
 c0032e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s15, #1.0e+0");
 c0032ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	__asm__ volatile("msr	APSR_nzcvqg, lr");
 c0032ee:	f38e 8c00 	msr	CPSR_fs, lr
	__asm__ volatile("push	{r4}");
 c0032f2:	b410      	push	{r4}
	__asm__ volatile("vmrs	ip, fpscr");
 c0032f4:	eef1 ca10 	vmrs	ip, fpscr
	__asm__ volatile("movw	r4, #65376");
 c0032f8:	f64f 7460 	movw	r4, #65376	; 0xff60
	__asm__ volatile("movt	r4, #4095");
 c0032fc:	f6c0 74ff 	movt	r4, #4095	; 0xfff
	__asm__ volatile("and	ip, r4");
 c003300:	ea0c 0c04 	and.w	ip, ip, r4
	__asm__ volatile("vmsr	fpscr, ip");
 c003304:	eee1 ca10 	vmsr	fpscr, ip
	__asm__ volatile("pop	{r4}");
 c003308:	bc10      	pop	{r4}
	__asm__ volatile("mov	ip, lr");
 c00330a:	46f4      	mov	ip, lr
	__asm__ volatile("adds	r7, r7, #28");
 c00330c:	371c      	adds	r7, #28
	__asm__ volatile("mov	sp, r7");
 c00330e:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r0, r1, r2, r3, r4, r7, r12}");
 c003310:	e8bd 109f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r7, ip}
	__asm__ volatile("bics	lr, #1");
 c003314:	f03e 0e01 	bics.w	lr, lr, #1
	__asm__ volatile("bxns	lr");
 c003318:	4774      	bxns	lr
}
 c00331a:	bf00      	nop

0c00331c <__acle_se_SECURE_log_cond_br_not_taken>:

CMSE_NS_ENTRY __attribute ((naked)) void SECURE_log_cond_br_not_taken(){;
	__asm__ volatile("push	{r0, r1, r2, r3, r4, r7, r12}");
 c00331c:	e92d 109f 	stmdb	sp!, {r0, r1, r2, r3, r4, r7, ip}
	__asm__ volatile("sub	sp, sp, #28");
 c003320:	b087      	sub	sp, #28
	__asm__ volatile("add	r7, sp, #0");
 c003322:	af00      	add	r7, sp, #0
	__asm__ volatile("push	{r7, lr}");
 c003324:	b580      	push	{r7, lr}
	__asm__ volatile("sub	sp, sp, #8");
 c003326:	b082      	sub	sp, #8
	__asm__ volatile("add	r7, sp, #0");
 c003328:	af00      	add	r7, sp, #0

	uint32_t inst_addr;
	asm("mov %0, lr" : "=r"(inst_addr));
 c00332a:	4673      	mov	r3, lr
 c00332c:	461c      	mov	r4, r3
	inst_addr -= 4;
 c00332e:	3c04      	subs	r4, #4
	CFA_ENGINE_new_log_entry(inst_addr);
 c003330:	4620      	mov	r0, r4
 c003332:	f7ff fa6b 	bl	c00280c <CFA_ENGINE_new_log_entry>

	__asm__ volatile("nop");
 c003336:	bf00      	nop
	__asm__ volatile("adds	r7, r7, #8");
 c003338:	3708      	adds	r7, #8
	__asm__ volatile("mov	sp, r7");
 c00333a:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r7, lr}");
 c00333c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	__asm__ volatile("mov	r0, lr");
 c003340:	4670      	mov	r0, lr
	__asm__ volatile("mov	r1, lr");
 c003342:	4671      	mov	r1, lr
	__asm__ volatile("mov	r2, lr");
 c003344:	4672      	mov	r2, lr
	__asm__ volatile("mov	r3, lr");
 c003346:	4673      	mov	r3, lr
	__asm__ volatile("vmov.f32	s0, #1.0e+0");
 c003348:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s1, #1.0e+0");
 c00334c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s2, #1.0e+0");
 c003350:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s3, #1.0e+0");
 c003354:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s4, #1.0e+0");
 c003358:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s5, #1.0e+0");
 c00335c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s6, #1.0e+0");
 c003360:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s7, #1.0e+0");
 c003364:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s8, #1.0e+0");
 c003368:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s9, #1.0e+0");
 c00336c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s10, #1.0e+0");
 c003370:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s11, #1.0e+0");
 c003374:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s12, #1.0e+0");
 c003378:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s13, #1.0e+0");
 c00337c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s14, #1.0e+0");
 c003380:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	__asm__ volatile("vmov.f32	s15, #1.0e+0");
 c003384:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	__asm__ volatile("msr	APSR_nzcvqg, lr");
 c003388:	f38e 8c00 	msr	CPSR_fs, lr
	__asm__ volatile("push	{r4}");
 c00338c:	b410      	push	{r4}
	__asm__ volatile("vmrs	ip, fpscr");
 c00338e:	eef1 ca10 	vmrs	ip, fpscr
	__asm__ volatile("movw	r4, #65376");
 c003392:	f64f 7460 	movw	r4, #65376	; 0xff60
	__asm__ volatile("movt	r4, #4095");
 c003396:	f6c0 74ff 	movt	r4, #4095	; 0xfff
	__asm__ volatile("and	ip, r4");
 c00339a:	ea0c 0c04 	and.w	ip, ip, r4
	__asm__ volatile("vmsr	fpscr, ip");
 c00339e:	eee1 ca10 	vmsr	fpscr, ip
	__asm__ volatile("pop	{r4}");
 c0033a2:	bc10      	pop	{r4}
	__asm__ volatile("mov	ip, lr");
 c0033a4:	46f4      	mov	ip, lr
	__asm__ volatile("adds	r7, r7, #28");
 c0033a6:	371c      	adds	r7, #28
	__asm__ volatile("mov	sp, r7");
 c0033a8:	46bd      	mov	sp, r7
	__asm__ volatile("pop	{r0, r1, r2, r3, r4, r7, r12}");
 c0033aa:	e8bd 109f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r7, ip}
	__asm__ volatile("bics	lr, #1");
 c0033ae:	f03e 0e01 	bics.w	lr, lr, #1
	__asm__ volatile("bxns	lr");
 c0033b2:	4774      	bxns	lr
}
 c0033b4:	bf00      	nop

0c0033b6 <__acle_se_SECURE_run_attestation_wait_mode>:

CMSE_NS_ENTRY void  SECURE_run_attestation_wait_mode(){
 c0033b6:	b580      	push	{r7, lr}
 c0033b8:	af00      	add	r7, sp, #0
	CFA_ENGINE_start();
 c0033ba:	f7fe feb7 	bl	c00212c <CFA_ENGINE_start>
	return;
 c0033be:	bf00      	nop
};
 c0033c0:	46bd      	mov	sp, r7
 c0033c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0033c6:	4670      	mov	r0, lr
 c0033c8:	4671      	mov	r1, lr
 c0033ca:	4672      	mov	r2, lr
 c0033cc:	4673      	mov	r3, lr
 c0033ce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0033d2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0033d6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0033da:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0033de:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0033e2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0033e6:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0033ea:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0033ee:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0033f2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0033f6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0033fa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0033fe:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c003402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c003406:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00340a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00340e:	f38e 8c00 	msr	CPSR_fs, lr
 c003412:	b410      	push	{r4}
 c003414:	eef1 ca10 	vmrs	ip, fpscr
 c003418:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00341c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c003420:	ea0c 0c04 	and.w	ip, ip, r4
 c003424:	eee1 ca10 	vmsr	fpscr, ip
 c003428:	bc10      	pop	{r4}
 c00342a:	46f4      	mov	ip, lr
 c00342c:	4774      	bxns	lr

0c00342e <__acle_se_SECURE_record_output_data>:

CMSE_NS_ENTRY void SECURE_record_output_data(uint32_t value){
 c00342e:	b580      	push	{r7, lr}
 c003430:	b082      	sub	sp, #8
 c003432:	af00      	add	r7, sp, #0
 c003434:	6078      	str	r0, [r7, #4]
	record_output_data(value);
 c003436:	6878      	ldr	r0, [r7, #4]
 c003438:	f7fe fe68 	bl	c00210c <record_output_data>
	return;
 c00343c:	bf00      	nop
};
 c00343e:	3708      	adds	r7, #8
 c003440:	46bd      	mov	sp, r7
 c003442:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c003446:	4670      	mov	r0, lr
 c003448:	4671      	mov	r1, lr
 c00344a:	4672      	mov	r2, lr
 c00344c:	4673      	mov	r3, lr
 c00344e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c003452:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c003456:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00345a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00345e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c003462:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c003466:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00346a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00346e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c003472:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c003476:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00347a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00347e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c003482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c003486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00348a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00348e:	f38e 8c00 	msr	CPSR_fs, lr
 c003492:	b410      	push	{r4}
 c003494:	eef1 ca10 	vmrs	ip, fpscr
 c003498:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00349c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0034a0:	ea0c 0c04 	and.w	ip, ip, r4
 c0034a4:	eee1 ca10 	vmsr	fpscr, ip
 c0034a8:	bc10      	pop	{r4}
 c0034aa:	46f4      	mov	ip, lr
 c0034ac:	4774      	bxns	lr
	...

0c0034b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c0034b0:	b580      	push	{r7, lr}
 c0034b2:	b084      	sub	sp, #16
 c0034b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c0034b6:	4b31      	ldr	r3, [pc, #196]	; (c00357c <HAL_MspInit+0xcc>)
 c0034b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0034ba:	4a30      	ldr	r2, [pc, #192]	; (c00357c <HAL_MspInit+0xcc>)
 c0034bc:	f043 0301 	orr.w	r3, r3, #1
 c0034c0:	6613      	str	r3, [r2, #96]	; 0x60
 c0034c2:	4b2e      	ldr	r3, [pc, #184]	; (c00357c <HAL_MspInit+0xcc>)
 c0034c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0034c6:	f003 0301 	and.w	r3, r3, #1
 c0034ca:	60fb      	str	r3, [r7, #12]
 c0034cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c0034ce:	4b2b      	ldr	r3, [pc, #172]	; (c00357c <HAL_MspInit+0xcc>)
 c0034d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0034d2:	4a2a      	ldr	r2, [pc, #168]	; (c00357c <HAL_MspInit+0xcc>)
 c0034d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0034d8:	6593      	str	r3, [r2, #88]	; 0x58
 c0034da:	4b28      	ldr	r3, [pc, #160]	; (c00357c <HAL_MspInit+0xcc>)
 c0034dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0034de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0034e2:	60bb      	str	r3, [r7, #8]
 c0034e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c0034e6:	4b25      	ldr	r3, [pc, #148]	; (c00357c <HAL_MspInit+0xcc>)
 c0034e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0034ea:	4a24      	ldr	r2, [pc, #144]	; (c00357c <HAL_MspInit+0xcc>)
 c0034ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c0034f0:	6493      	str	r3, [r2, #72]	; 0x48
 c0034f2:	4b22      	ldr	r3, [pc, #136]	; (c00357c <HAL_MspInit+0xcc>)
 c0034f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0034f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c0034fa:	607b      	str	r3, [r7, #4]
 c0034fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c0034fe:	2200      	movs	r2, #0
 c003500:	2100      	movs	r1, #0
 c003502:	2008      	movs	r0, #8
 c003504:	f000 fd37 	bl	c003f76 <HAL_NVIC_SetPriority>
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(GTZC_IRQn);
 c003508:	2008      	movs	r0, #8
 c00350a:	f000 fd4e 	bl	c003faa <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 c00350e:	f001 fb6d 	bl	c004bec <HAL_PWREx_DisableUCPDDeadBattery>

  /** PWR Non-Privilege/Non-Secure Items Configurations
  */
  HAL_PWR_ConfigAttributes(PWR_WKUP1, PWR_NSEC |PWR_NPRIV);
 c003512:	f44f 7140 	mov.w	r1, #768	; 0x300
 c003516:	2001      	movs	r0, #1
 c003518:	f001 faa8 	bl	c004a6c <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP2, PWR_NSEC |PWR_NPRIV);
 c00351c:	f44f 7140 	mov.w	r1, #768	; 0x300
 c003520:	2002      	movs	r0, #2
 c003522:	f001 faa3 	bl	c004a6c <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP3, PWR_NSEC |PWR_NPRIV);
 c003526:	f44f 7140 	mov.w	r1, #768	; 0x300
 c00352a:	2004      	movs	r0, #4
 c00352c:	f001 fa9e 	bl	c004a6c <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP4, PWR_NSEC |PWR_NPRIV);
 c003530:	f44f 7140 	mov.w	r1, #768	; 0x300
 c003534:	2008      	movs	r0, #8
 c003536:	f001 fa99 	bl	c004a6c <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP5, PWR_NSEC |PWR_NPRIV);
 c00353a:	f44f 7140 	mov.w	r1, #768	; 0x300
 c00353e:	2010      	movs	r0, #16
 c003540:	f001 fa94 	bl	c004a6c <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_VDM, PWR_NSEC |PWR_NPRIV);
 c003544:	f44f 7140 	mov.w	r1, #768	; 0x300
 c003548:	f44f 7000 	mov.w	r0, #512	; 0x200
 c00354c:	f001 fa8e 	bl	c004a6c <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_APC, PWR_NSEC |PWR_NPRIV);
 c003550:	f44f 7140 	mov.w	r1, #768	; 0x300
 c003554:	f44f 6000 	mov.w	r0, #2048	; 0x800
 c003558:	f001 fa88 	bl	c004a6c <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_LPM, PWR_NSEC |PWR_NPRIV);
 c00355c:	f44f 7140 	mov.w	r1, #768	; 0x300
 c003560:	f44f 7080 	mov.w	r0, #256	; 0x100
 c003564:	f001 fa82 	bl	c004a6c <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_VB, PWR_NSEC |PWR_NPRIV);
 c003568:	f44f 7140 	mov.w	r1, #768	; 0x300
 c00356c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 c003570:	f001 fa7c 	bl	c004a6c <HAL_PWR_ConfigAttributes>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c003574:	bf00      	nop
 c003576:	3710      	adds	r7, #16
 c003578:	46bd      	mov	sp, r7
 c00357a:	bd80      	pop	{r7, pc}
 c00357c:	50021000 	.word	0x50021000

0c003580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c003580:	b480      	push	{r7}
 c003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c003584:	e7fe      	b.n	c003584 <NMI_Handler+0x4>

0c003586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c003586:	b480      	push	{r7}
 c003588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c00358a:	e7fe      	b.n	c00358a <HardFault_Handler+0x4>

0c00358c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c00358c:	b480      	push	{r7}
 c00358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c003590:	e7fe      	b.n	c003590 <MemManage_Handler+0x4>

0c003592 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c003592:	b480      	push	{r7}
 c003594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c003596:	e7fe      	b.n	c003596 <BusFault_Handler+0x4>

0c003598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c003598:	b480      	push	{r7}
 c00359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c00359c:	e7fe      	b.n	c00359c <UsageFault_Handler+0x4>

0c00359e <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c00359e:	b480      	push	{r7}
 c0035a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c0035a2:	e7fe      	b.n	c0035a2 <SecureFault_Handler+0x4>

0c0035a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c0035a4:	b480      	push	{r7}
 c0035a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c0035a8:	bf00      	nop
 c0035aa:	46bd      	mov	sp, r7
 c0035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0035b0:	4770      	bx	lr

0c0035b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c0035b2:	b480      	push	{r7}
 c0035b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c0035b6:	bf00      	nop
 c0035b8:	46bd      	mov	sp, r7
 c0035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0035be:	4770      	bx	lr

0c0035c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c0035c0:	b480      	push	{r7}
 c0035c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c0035c4:	bf00      	nop
 c0035c6:	46bd      	mov	sp, r7
 c0035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0035cc:	4770      	bx	lr

0c0035ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c0035ce:	b580      	push	{r7, lr}
 c0035d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c0035d2:	f000 fbd5 	bl	c003d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c0035d6:	bf00      	nop
 c0035d8:	bd80      	pop	{r7, pc}

0c0035da <GTZC_IRQHandler>:

/**
  * @brief This function handles Global TrustZone controller global interrupt.
  */
void GTZC_IRQHandler(void)
{
 c0035da:	b580      	push	{r7, lr}
 c0035dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GTZC_IRQn 0 */

  /* USER CODE END GTZC_IRQn 0 */
  HAL_GTZC_IRQHandler();
 c0035de:	f001 f9b7 	bl	c004950 <HAL_GTZC_IRQHandler>
  /* USER CODE BEGIN GTZC_IRQn 1 */

  /* USER CODE END GTZC_IRQn 1 */
}
 c0035e2:	bf00      	nop
 c0035e4:	bd80      	pop	{r7, pc}
	...

0c0035e8 <TIM3_IRQHandler>:
  * @brief This function handles TIM3 global interrupt.
  */

#include "cfa_engine.h"
void TIM3_IRQHandler(void)
{
 c0035e8:	b580      	push	{r7, lr}
 c0035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	CFA_time_interrupt_handler();
 c0035ec:	f7fe ff12 	bl	c002414 <CFA_time_interrupt_handler>

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 c0035f0:	4802      	ldr	r0, [pc, #8]	; (c0035fc <TIM3_IRQHandler+0x14>)
 c0035f2:	f003 f881 	bl	c0066f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 c0035f6:	bf00      	nop
 c0035f8:	bd80      	pop	{r7, pc}
 c0035fa:	bf00      	nop
 c0035fc:	3000070c 	.word	0x3000070c

0c003600 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 c003600:	b580      	push	{r7, lr}
 c003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 c003604:	4802      	ldr	r0, [pc, #8]	; (c003610 <TIM4_IRQHandler+0x10>)
 c003606:	f003 f877 	bl	c0066f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 c00360a:	bf00      	nop
 c00360c:	bd80      	pop	{r7, pc}
 c00360e:	bf00      	nop
 c003610:	30000758 	.word	0x30000758

0c003614 <TZ_SAU_Setup>:
{
 c003614:	b480      	push	{r7}
 c003616:	af00      	add	r7, sp, #0
    SAU_INIT_REGION(0);
 c003618:	4b2f      	ldr	r3, [pc, #188]	; (c0036d8 <TZ_SAU_Setup+0xc4>)
 c00361a:	2200      	movs	r2, #0
 c00361c:	609a      	str	r2, [r3, #8]
 c00361e:	4b2e      	ldr	r3, [pc, #184]	; (c0036d8 <TZ_SAU_Setup+0xc4>)
 c003620:	4a2e      	ldr	r2, [pc, #184]	; (c0036dc <TZ_SAU_Setup+0xc8>)
 c003622:	60da      	str	r2, [r3, #12]
 c003624:	4b2c      	ldr	r3, [pc, #176]	; (c0036d8 <TZ_SAU_Setup+0xc4>)
 c003626:	4a2e      	ldr	r2, [pc, #184]	; (c0036e0 <TZ_SAU_Setup+0xcc>)
 c003628:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(1);
 c00362a:	4b2b      	ldr	r3, [pc, #172]	; (c0036d8 <TZ_SAU_Setup+0xc4>)
 c00362c:	2201      	movs	r2, #1
 c00362e:	609a      	str	r2, [r3, #8]
 c003630:	4b29      	ldr	r3, [pc, #164]	; (c0036d8 <TZ_SAU_Setup+0xc4>)
 c003632:	4a2c      	ldr	r2, [pc, #176]	; (c0036e4 <TZ_SAU_Setup+0xd0>)
 c003634:	60da      	str	r2, [r3, #12]
 c003636:	4b28      	ldr	r3, [pc, #160]	; (c0036d8 <TZ_SAU_Setup+0xc4>)
 c003638:	4a2b      	ldr	r2, [pc, #172]	; (c0036e8 <TZ_SAU_Setup+0xd4>)
 c00363a:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(2);
 c00363c:	4b26      	ldr	r3, [pc, #152]	; (c0036d8 <TZ_SAU_Setup+0xc4>)
 c00363e:	2202      	movs	r2, #2
 c003640:	609a      	str	r2, [r3, #8]
 c003642:	4b25      	ldr	r3, [pc, #148]	; (c0036d8 <TZ_SAU_Setup+0xc4>)
 c003644:	4a29      	ldr	r2, [pc, #164]	; (c0036ec <TZ_SAU_Setup+0xd8>)
 c003646:	60da      	str	r2, [r3, #12]
 c003648:	4b23      	ldr	r3, [pc, #140]	; (c0036d8 <TZ_SAU_Setup+0xc4>)
 c00364a:	4a29      	ldr	r2, [pc, #164]	; (c0036f0 <TZ_SAU_Setup+0xdc>)
 c00364c:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(3);
 c00364e:	4b22      	ldr	r3, [pc, #136]	; (c0036d8 <TZ_SAU_Setup+0xc4>)
 c003650:	2203      	movs	r2, #3
 c003652:	609a      	str	r2, [r3, #8]
 c003654:	4b20      	ldr	r3, [pc, #128]	; (c0036d8 <TZ_SAU_Setup+0xc4>)
 c003656:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c00365a:	60da      	str	r2, [r3, #12]
 c00365c:	4b1e      	ldr	r3, [pc, #120]	; (c0036d8 <TZ_SAU_Setup+0xc4>)
 c00365e:	4a25      	ldr	r2, [pc, #148]	; (c0036f4 <TZ_SAU_Setup+0xe0>)
 c003660:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(4);
 c003662:	4b1d      	ldr	r3, [pc, #116]	; (c0036d8 <TZ_SAU_Setup+0xc4>)
 c003664:	2204      	movs	r2, #4
 c003666:	609a      	str	r2, [r3, #8]
 c003668:	4b1b      	ldr	r3, [pc, #108]	; (c0036d8 <TZ_SAU_Setup+0xc4>)
 c00366a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c00366e:	60da      	str	r2, [r3, #12]
 c003670:	4b19      	ldr	r3, [pc, #100]	; (c0036d8 <TZ_SAU_Setup+0xc4>)
 c003672:	4a21      	ldr	r2, [pc, #132]	; (c0036f8 <TZ_SAU_Setup+0xe4>)
 c003674:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(5);
 c003676:	4b18      	ldr	r3, [pc, #96]	; (c0036d8 <TZ_SAU_Setup+0xc4>)
 c003678:	2205      	movs	r2, #5
 c00367a:	609a      	str	r2, [r3, #8]
 c00367c:	4b16      	ldr	r3, [pc, #88]	; (c0036d8 <TZ_SAU_Setup+0xc4>)
 c00367e:	4a1f      	ldr	r2, [pc, #124]	; (c0036fc <TZ_SAU_Setup+0xe8>)
 c003680:	60da      	str	r2, [r3, #12]
 c003682:	4b15      	ldr	r3, [pc, #84]	; (c0036d8 <TZ_SAU_Setup+0xc4>)
 c003684:	4a1e      	ldr	r2, [pc, #120]	; (c003700 <TZ_SAU_Setup+0xec>)
 c003686:	611a      	str	r2, [r3, #16]
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c003688:	4b13      	ldr	r3, [pc, #76]	; (c0036d8 <TZ_SAU_Setup+0xc4>)
 c00368a:	2201      	movs	r2, #1
 c00368c:	601a      	str	r2, [r3, #0]
    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c00368e:	4b1d      	ldr	r3, [pc, #116]	; (c003704 <TZ_SAU_Setup+0xf0>)
 c003690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c003694:	4a1b      	ldr	r2, [pc, #108]	; (c003704 <TZ_SAU_Setup+0xf0>)
 c003696:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c00369a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c00369e:	4b1a      	ldr	r3, [pc, #104]	; (c003708 <TZ_SAU_Setup+0xf4>)
 c0036a0:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c0036a2:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0036a6:	4a18      	ldr	r2, [pc, #96]	; (c003708 <TZ_SAU_Setup+0xf4>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c0036a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0036ac:	6053      	str	r3, [r2, #4]
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c0036ae:	4b17      	ldr	r3, [pc, #92]	; (c00370c <TZ_SAU_Setup+0xf8>)
 c0036b0:	2200      	movs	r2, #0
 c0036b2:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c0036b6:	4b15      	ldr	r3, [pc, #84]	; (c00370c <TZ_SAU_Setup+0xf8>)
 c0036b8:	2200      	movs	r2, #0
 c0036ba:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c0036be:	4b13      	ldr	r3, [pc, #76]	; (c00370c <TZ_SAU_Setup+0xf8>)
 c0036c0:	2200      	movs	r2, #0
 c0036c2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c0036c6:	4b11      	ldr	r3, [pc, #68]	; (c00370c <TZ_SAU_Setup+0xf8>)
 c0036c8:	2200      	movs	r2, #0
 c0036ca:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
}
 c0036ce:	bf00      	nop
 c0036d0:	46bd      	mov	sp, r7
 c0036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0036d6:	4770      	bx	lr
 c0036d8:	e000edd0 	.word	0xe000edd0
 c0036dc:	0c03e000 	.word	0x0c03e000
 c0036e0:	0c03ffe3 	.word	0x0c03ffe3
 c0036e4:	08040000 	.word	0x08040000
 c0036e8:	0807ffe1 	.word	0x0807ffe1
 c0036ec:	20018000 	.word	0x20018000
 c0036f0:	2003ffe1 	.word	0x2003ffe1
 c0036f4:	4fffffe1 	.word	0x4fffffe1
 c0036f8:	9fffffe1 	.word	0x9fffffe1
 c0036fc:	0bf90000 	.word	0x0bf90000
 c003700:	0bfa8fe1 	.word	0x0bfa8fe1
 c003704:	e000ed00 	.word	0xe000ed00
 c003708:	e000ef30 	.word	0xe000ef30
 c00370c:	e000e100 	.word	0xe000e100

0c003710 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c003710:	b580      	push	{r7, lr}
 c003712:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c003714:	f7ff ff7e 	bl	c003614 <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c003718:	4b08      	ldr	r3, [pc, #32]	; (c00373c <SystemInit+0x2c>)
 c00371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00371e:	4a07      	ldr	r2, [pc, #28]	; (c00373c <SystemInit+0x2c>)
 c003720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c003724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c003728:	4b05      	ldr	r3, [pc, #20]	; (c003740 <SystemInit+0x30>)
 c00372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00372e:	4a04      	ldr	r2, [pc, #16]	; (c003740 <SystemInit+0x30>)
 c003730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c003734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c003738:	bf00      	nop
 c00373a:	bd80      	pop	{r7, pc}
 c00373c:	e000ed00 	.word	0xe000ed00
 c003740:	e002ed00 	.word	0xe002ed00

0c003744 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c003744:	b480      	push	{r7}
 c003746:	b087      	sub	sp, #28
 c003748:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c00374a:	4b4f      	ldr	r3, [pc, #316]	; (c003888 <SystemCoreClockUpdate+0x144>)
 c00374c:	681b      	ldr	r3, [r3, #0]
 c00374e:	f003 0308 	and.w	r3, r3, #8
 c003752:	2b00      	cmp	r3, #0
 c003754:	d107      	bne.n	c003766 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c003756:	4b4c      	ldr	r3, [pc, #304]	; (c003888 <SystemCoreClockUpdate+0x144>)
 c003758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00375c:	0a1b      	lsrs	r3, r3, #8
 c00375e:	f003 030f 	and.w	r3, r3, #15
 c003762:	617b      	str	r3, [r7, #20]
 c003764:	e005      	b.n	c003772 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c003766:	4b48      	ldr	r3, [pc, #288]	; (c003888 <SystemCoreClockUpdate+0x144>)
 c003768:	681b      	ldr	r3, [r3, #0]
 c00376a:	091b      	lsrs	r3, r3, #4
 c00376c:	f003 030f 	and.w	r3, r3, #15
 c003770:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c003772:	4a46      	ldr	r2, [pc, #280]	; (c00388c <SystemCoreClockUpdate+0x148>)
 c003774:	697b      	ldr	r3, [r7, #20]
 c003776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00377a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c00377c:	4b42      	ldr	r3, [pc, #264]	; (c003888 <SystemCoreClockUpdate+0x144>)
 c00377e:	689b      	ldr	r3, [r3, #8]
 c003780:	f003 030c 	and.w	r3, r3, #12
 c003784:	2b0c      	cmp	r3, #12
 c003786:	d866      	bhi.n	c003856 <SystemCoreClockUpdate+0x112>
 c003788:	a201      	add	r2, pc, #4	; (adr r2, c003790 <SystemCoreClockUpdate+0x4c>)
 c00378a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00378e:	bf00      	nop
 c003790:	0c0037c5 	.word	0x0c0037c5
 c003794:	0c003857 	.word	0x0c003857
 c003798:	0c003857 	.word	0x0c003857
 c00379c:	0c003857 	.word	0x0c003857
 c0037a0:	0c0037cd 	.word	0x0c0037cd
 c0037a4:	0c003857 	.word	0x0c003857
 c0037a8:	0c003857 	.word	0x0c003857
 c0037ac:	0c003857 	.word	0x0c003857
 c0037b0:	0c0037d5 	.word	0x0c0037d5
 c0037b4:	0c003857 	.word	0x0c003857
 c0037b8:	0c003857 	.word	0x0c003857
 c0037bc:	0c003857 	.word	0x0c003857
 c0037c0:	0c0037dd 	.word	0x0c0037dd
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c0037c4:	4a32      	ldr	r2, [pc, #200]	; (c003890 <SystemCoreClockUpdate+0x14c>)
 c0037c6:	697b      	ldr	r3, [r7, #20]
 c0037c8:	6013      	str	r3, [r2, #0]
      break;
 c0037ca:	e048      	b.n	c00385e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c0037cc:	4b30      	ldr	r3, [pc, #192]	; (c003890 <SystemCoreClockUpdate+0x14c>)
 c0037ce:	4a31      	ldr	r2, [pc, #196]	; (c003894 <SystemCoreClockUpdate+0x150>)
 c0037d0:	601a      	str	r2, [r3, #0]
      break;
 c0037d2:	e044      	b.n	c00385e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c0037d4:	4b2e      	ldr	r3, [pc, #184]	; (c003890 <SystemCoreClockUpdate+0x14c>)
 c0037d6:	4a2f      	ldr	r2, [pc, #188]	; (c003894 <SystemCoreClockUpdate+0x150>)
 c0037d8:	601a      	str	r2, [r3, #0]
      break;
 c0037da:	e040      	b.n	c00385e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c0037dc:	4b2a      	ldr	r3, [pc, #168]	; (c003888 <SystemCoreClockUpdate+0x144>)
 c0037de:	68db      	ldr	r3, [r3, #12]
 c0037e0:	f003 0303 	and.w	r3, r3, #3
 c0037e4:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c0037e6:	4b28      	ldr	r3, [pc, #160]	; (c003888 <SystemCoreClockUpdate+0x144>)
 c0037e8:	68db      	ldr	r3, [r3, #12]
 c0037ea:	091b      	lsrs	r3, r3, #4
 c0037ec:	f003 030f 	and.w	r3, r3, #15
 c0037f0:	3301      	adds	r3, #1
 c0037f2:	60bb      	str	r3, [r7, #8]
 c0037f4:	68fb      	ldr	r3, [r7, #12]
 c0037f6:	2b02      	cmp	r3, #2
 c0037f8:	d003      	beq.n	c003802 <SystemCoreClockUpdate+0xbe>
 c0037fa:	68fb      	ldr	r3, [r7, #12]
 c0037fc:	2b03      	cmp	r3, #3
 c0037fe:	d006      	beq.n	c00380e <SystemCoreClockUpdate+0xca>
 c003800:	e00b      	b.n	c00381a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c003802:	4a24      	ldr	r2, [pc, #144]	; (c003894 <SystemCoreClockUpdate+0x150>)
 c003804:	68bb      	ldr	r3, [r7, #8]
 c003806:	fbb2 f3f3 	udiv	r3, r2, r3
 c00380a:	613b      	str	r3, [r7, #16]
          break;
 c00380c:	e00b      	b.n	c003826 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c00380e:	4a21      	ldr	r2, [pc, #132]	; (c003894 <SystemCoreClockUpdate+0x150>)
 c003810:	68bb      	ldr	r3, [r7, #8]
 c003812:	fbb2 f3f3 	udiv	r3, r2, r3
 c003816:	613b      	str	r3, [r7, #16]
          break;
 c003818:	e005      	b.n	c003826 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c00381a:	697a      	ldr	r2, [r7, #20]
 c00381c:	68bb      	ldr	r3, [r7, #8]
 c00381e:	fbb2 f3f3 	udiv	r3, r2, r3
 c003822:	613b      	str	r3, [r7, #16]
          break;
 c003824:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c003826:	4b18      	ldr	r3, [pc, #96]	; (c003888 <SystemCoreClockUpdate+0x144>)
 c003828:	68db      	ldr	r3, [r3, #12]
 c00382a:	0a1b      	lsrs	r3, r3, #8
 c00382c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c003830:	693b      	ldr	r3, [r7, #16]
 c003832:	fb02 f303 	mul.w	r3, r2, r3
 c003836:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c003838:	4b13      	ldr	r3, [pc, #76]	; (c003888 <SystemCoreClockUpdate+0x144>)
 c00383a:	68db      	ldr	r3, [r3, #12]
 c00383c:	0e5b      	lsrs	r3, r3, #25
 c00383e:	f003 0303 	and.w	r3, r3, #3
 c003842:	3301      	adds	r3, #1
 c003844:	005b      	lsls	r3, r3, #1
 c003846:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c003848:	693a      	ldr	r2, [r7, #16]
 c00384a:	687b      	ldr	r3, [r7, #4]
 c00384c:	fbb2 f3f3 	udiv	r3, r2, r3
 c003850:	4a0f      	ldr	r2, [pc, #60]	; (c003890 <SystemCoreClockUpdate+0x14c>)
 c003852:	6013      	str	r3, [r2, #0]
      break;
 c003854:	e003      	b.n	c00385e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c003856:	4a0e      	ldr	r2, [pc, #56]	; (c003890 <SystemCoreClockUpdate+0x14c>)
 c003858:	697b      	ldr	r3, [r7, #20]
 c00385a:	6013      	str	r3, [r2, #0]
      break;
 c00385c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c00385e:	4b0a      	ldr	r3, [pc, #40]	; (c003888 <SystemCoreClockUpdate+0x144>)
 c003860:	689b      	ldr	r3, [r3, #8]
 c003862:	091b      	lsrs	r3, r3, #4
 c003864:	f003 030f 	and.w	r3, r3, #15
 c003868:	4a0b      	ldr	r2, [pc, #44]	; (c003898 <SystemCoreClockUpdate+0x154>)
 c00386a:	5cd3      	ldrb	r3, [r2, r3]
 c00386c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c00386e:	4b08      	ldr	r3, [pc, #32]	; (c003890 <SystemCoreClockUpdate+0x14c>)
 c003870:	681a      	ldr	r2, [r3, #0]
 c003872:	683b      	ldr	r3, [r7, #0]
 c003874:	fa22 f303 	lsr.w	r3, r2, r3
 c003878:	4a05      	ldr	r2, [pc, #20]	; (c003890 <SystemCoreClockUpdate+0x14c>)
 c00387a:	6013      	str	r3, [r2, #0]
}
 c00387c:	bf00      	nop
 c00387e:	371c      	adds	r7, #28
 c003880:	46bd      	mov	sp, r7
 c003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003886:	4770      	bx	lr
 c003888:	50021000 	.word	0x50021000
 c00388c:	0c007e04 	.word	0x0c007e04
 c003890:	30000028 	.word	0x30000028
 c003894:	00f42400 	.word	0x00f42400
 c003898:	0c007dec 	.word	0x0c007dec

0c00389c <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c00389c:	b580      	push	{r7, lr}
 c00389e:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c0038a0:	f7ff ff50 	bl	c003744 <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c0038a4:	4b1c      	ldr	r3, [pc, #112]	; (c003918 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c0038a6:	681b      	ldr	r3, [r3, #0]
}
 c0038a8:	4618      	mov	r0, r3
 c0038aa:	46bd      	mov	sp, r7
 c0038ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0038b0:	4671      	mov	r1, lr
 c0038b2:	4672      	mov	r2, lr
 c0038b4:	4673      	mov	r3, lr
 c0038b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0038ba:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0038be:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0038c2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0038c6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0038ca:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0038ce:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0038d2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0038d6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0038da:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0038de:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0038e2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0038e6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0038ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0038ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0038f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0038f6:	f38e 8c00 	msr	CPSR_fs, lr
 c0038fa:	b410      	push	{r4}
 c0038fc:	eef1 ca10 	vmrs	ip, fpscr
 c003900:	f64f 7460 	movw	r4, #65376	; 0xff60
 c003904:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c003908:	ea0c 0c04 	and.w	ip, ip, r4
 c00390c:	eee1 ca10 	vmsr	fpscr, ip
 c003910:	bc10      	pop	{r4}
 c003912:	46f4      	mov	ip, lr
 c003914:	4774      	bxns	lr
 c003916:	bf00      	nop
 c003918:	30000028 	.word	0x30000028

0c00391c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 c00391c:	b580      	push	{r7, lr}
 c00391e:	b088      	sub	sp, #32
 c003920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 c003922:	f107 0310 	add.w	r3, r7, #16
 c003926:	2200      	movs	r2, #0
 c003928:	601a      	str	r2, [r3, #0]
 c00392a:	605a      	str	r2, [r3, #4]
 c00392c:	609a      	str	r2, [r3, #8]
 c00392e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 c003930:	1d3b      	adds	r3, r7, #4
 c003932:	2200      	movs	r2, #0
 c003934:	601a      	str	r2, [r3, #0]
 c003936:	605a      	str	r2, [r3, #4]
 c003938:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 c00393a:	4b1d      	ldr	r3, [pc, #116]	; (c0039b0 <MX_TIM3_Init+0x94>)
 c00393c:	4a1d      	ldr	r2, [pc, #116]	; (c0039b4 <MX_TIM3_Init+0x98>)
 c00393e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 c003940:	4b1b      	ldr	r3, [pc, #108]	; (c0039b0 <MX_TIM3_Init+0x94>)
 c003942:	2200      	movs	r2, #0
 c003944:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 c003946:	4b1a      	ldr	r3, [pc, #104]	; (c0039b0 <MX_TIM3_Init+0x94>)
 c003948:	2200      	movs	r2, #0
 c00394a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 c00394c:	4b18      	ldr	r3, [pc, #96]	; (c0039b0 <MX_TIM3_Init+0x94>)
 c00394e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 c003952:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 c003954:	4b16      	ldr	r3, [pc, #88]	; (c0039b0 <MX_TIM3_Init+0x94>)
 c003956:	2200      	movs	r2, #0
 c003958:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 c00395a:	4b15      	ldr	r3, [pc, #84]	; (c0039b0 <MX_TIM3_Init+0x94>)
 c00395c:	2200      	movs	r2, #0
 c00395e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 c003960:	4813      	ldr	r0, [pc, #76]	; (c0039b0 <MX_TIM3_Init+0x94>)
 c003962:	f002 fe4b 	bl	c0065fc <HAL_TIM_Base_Init>
 c003966:	4603      	mov	r3, r0
 c003968:	2b00      	cmp	r3, #0
 c00396a:	d001      	beq.n	c003970 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 c00396c:	f7ff fad4 	bl	c002f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 c003970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c003974:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 c003976:	f107 0310 	add.w	r3, r7, #16
 c00397a:	4619      	mov	r1, r3
 c00397c:	480c      	ldr	r0, [pc, #48]	; (c0039b0 <MX_TIM3_Init+0x94>)
 c00397e:	f002 ffda 	bl	c006936 <HAL_TIM_ConfigClockSource>
 c003982:	4603      	mov	r3, r0
 c003984:	2b00      	cmp	r3, #0
 c003986:	d001      	beq.n	c00398c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 c003988:	f7ff fac6 	bl	c002f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 c00398c:	2300      	movs	r3, #0
 c00398e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 c003990:	2300      	movs	r3, #0
 c003992:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 c003994:	1d3b      	adds	r3, r7, #4
 c003996:	4619      	mov	r1, r3
 c003998:	4805      	ldr	r0, [pc, #20]	; (c0039b0 <MX_TIM3_Init+0x94>)
 c00399a:	f003 f9fb 	bl	c006d94 <HAL_TIMEx_MasterConfigSynchronization>
 c00399e:	4603      	mov	r3, r0
 c0039a0:	2b00      	cmp	r3, #0
 c0039a2:	d001      	beq.n	c0039a8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 c0039a4:	f7ff fab8 	bl	c002f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 c0039a8:	bf00      	nop
 c0039aa:	3720      	adds	r7, #32
 c0039ac:	46bd      	mov	sp, r7
 c0039ae:	bd80      	pop	{r7, pc}
 c0039b0:	3000070c 	.word	0x3000070c
 c0039b4:	50000400 	.word	0x50000400

0c0039b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 c0039b8:	b580      	push	{r7, lr}
 c0039ba:	b088      	sub	sp, #32
 c0039bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 c0039be:	f107 0310 	add.w	r3, r7, #16
 c0039c2:	2200      	movs	r2, #0
 c0039c4:	601a      	str	r2, [r3, #0]
 c0039c6:	605a      	str	r2, [r3, #4]
 c0039c8:	609a      	str	r2, [r3, #8]
 c0039ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 c0039cc:	1d3b      	adds	r3, r7, #4
 c0039ce:	2200      	movs	r2, #0
 c0039d0:	601a      	str	r2, [r3, #0]
 c0039d2:	605a      	str	r2, [r3, #4]
 c0039d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 c0039d6:	4b1d      	ldr	r3, [pc, #116]	; (c003a4c <MX_TIM4_Init+0x94>)
 c0039d8:	4a1d      	ldr	r2, [pc, #116]	; (c003a50 <MX_TIM4_Init+0x98>)
 c0039da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 c0039dc:	4b1b      	ldr	r3, [pc, #108]	; (c003a4c <MX_TIM4_Init+0x94>)
 c0039de:	2200      	movs	r2, #0
 c0039e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 c0039e2:	4b1a      	ldr	r3, [pc, #104]	; (c003a4c <MX_TIM4_Init+0x94>)
 c0039e4:	2200      	movs	r2, #0
 c0039e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 c0039e8:	4b18      	ldr	r3, [pc, #96]	; (c003a4c <MX_TIM4_Init+0x94>)
 c0039ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 c0039ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 c0039f0:	4b16      	ldr	r3, [pc, #88]	; (c003a4c <MX_TIM4_Init+0x94>)
 c0039f2:	2200      	movs	r2, #0
 c0039f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 c0039f6:	4b15      	ldr	r3, [pc, #84]	; (c003a4c <MX_TIM4_Init+0x94>)
 c0039f8:	2200      	movs	r2, #0
 c0039fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 c0039fc:	4813      	ldr	r0, [pc, #76]	; (c003a4c <MX_TIM4_Init+0x94>)
 c0039fe:	f002 fdfd 	bl	c0065fc <HAL_TIM_Base_Init>
 c003a02:	4603      	mov	r3, r0
 c003a04:	2b00      	cmp	r3, #0
 c003a06:	d001      	beq.n	c003a0c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 c003a08:	f7ff fa86 	bl	c002f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 c003a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c003a10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 c003a12:	f107 0310 	add.w	r3, r7, #16
 c003a16:	4619      	mov	r1, r3
 c003a18:	480c      	ldr	r0, [pc, #48]	; (c003a4c <MX_TIM4_Init+0x94>)
 c003a1a:	f002 ff8c 	bl	c006936 <HAL_TIM_ConfigClockSource>
 c003a1e:	4603      	mov	r3, r0
 c003a20:	2b00      	cmp	r3, #0
 c003a22:	d001      	beq.n	c003a28 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 c003a24:	f7ff fa78 	bl	c002f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 c003a28:	2300      	movs	r3, #0
 c003a2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 c003a2c:	2300      	movs	r3, #0
 c003a2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 c003a30:	1d3b      	adds	r3, r7, #4
 c003a32:	4619      	mov	r1, r3
 c003a34:	4805      	ldr	r0, [pc, #20]	; (c003a4c <MX_TIM4_Init+0x94>)
 c003a36:	f003 f9ad 	bl	c006d94 <HAL_TIMEx_MasterConfigSynchronization>
 c003a3a:	4603      	mov	r3, r0
 c003a3c:	2b00      	cmp	r3, #0
 c003a3e:	d001      	beq.n	c003a44 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 c003a40:	f7ff fa6a 	bl	c002f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 c003a44:	bf00      	nop
 c003a46:	3720      	adds	r7, #32
 c003a48:	46bd      	mov	sp, r7
 c003a4a:	bd80      	pop	{r7, pc}
 c003a4c:	30000758 	.word	0x30000758
 c003a50:	50000800 	.word	0x50000800

0c003a54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 c003a54:	b580      	push	{r7, lr}
 c003a56:	b084      	sub	sp, #16
 c003a58:	af00      	add	r7, sp, #0
 c003a5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 c003a5c:	687b      	ldr	r3, [r7, #4]
 c003a5e:	681b      	ldr	r3, [r3, #0]
 c003a60:	4a1a      	ldr	r2, [pc, #104]	; (c003acc <HAL_TIM_Base_MspInit+0x78>)
 c003a62:	4293      	cmp	r3, r2
 c003a64:	d114      	bne.n	c003a90 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 c003a66:	4b1a      	ldr	r3, [pc, #104]	; (c003ad0 <HAL_TIM_Base_MspInit+0x7c>)
 c003a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003a6a:	4a19      	ldr	r2, [pc, #100]	; (c003ad0 <HAL_TIM_Base_MspInit+0x7c>)
 c003a6c:	f043 0302 	orr.w	r3, r3, #2
 c003a70:	6593      	str	r3, [r2, #88]	; 0x58
 c003a72:	4b17      	ldr	r3, [pc, #92]	; (c003ad0 <HAL_TIM_Base_MspInit+0x7c>)
 c003a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003a76:	f003 0302 	and.w	r3, r3, #2
 c003a7a:	60fb      	str	r3, [r7, #12]
 c003a7c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 c003a7e:	2200      	movs	r2, #0
 c003a80:	2100      	movs	r1, #0
 c003a82:	202e      	movs	r0, #46	; 0x2e
 c003a84:	f000 fa77 	bl	c003f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 c003a88:	202e      	movs	r0, #46	; 0x2e
 c003a8a:	f000 fa8e 	bl	c003faa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 c003a8e:	e018      	b.n	c003ac2 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 c003a90:	687b      	ldr	r3, [r7, #4]
 c003a92:	681b      	ldr	r3, [r3, #0]
 c003a94:	4a0f      	ldr	r2, [pc, #60]	; (c003ad4 <HAL_TIM_Base_MspInit+0x80>)
 c003a96:	4293      	cmp	r3, r2
 c003a98:	d113      	bne.n	c003ac2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 c003a9a:	4b0d      	ldr	r3, [pc, #52]	; (c003ad0 <HAL_TIM_Base_MspInit+0x7c>)
 c003a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003a9e:	4a0c      	ldr	r2, [pc, #48]	; (c003ad0 <HAL_TIM_Base_MspInit+0x7c>)
 c003aa0:	f043 0304 	orr.w	r3, r3, #4
 c003aa4:	6593      	str	r3, [r2, #88]	; 0x58
 c003aa6:	4b0a      	ldr	r3, [pc, #40]	; (c003ad0 <HAL_TIM_Base_MspInit+0x7c>)
 c003aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003aaa:	f003 0304 	and.w	r3, r3, #4
 c003aae:	60bb      	str	r3, [r7, #8]
 c003ab0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 c003ab2:	2200      	movs	r2, #0
 c003ab4:	2100      	movs	r1, #0
 c003ab6:	202f      	movs	r0, #47	; 0x2f
 c003ab8:	f000 fa5d 	bl	c003f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 c003abc:	202f      	movs	r0, #47	; 0x2f
 c003abe:	f000 fa74 	bl	c003faa <HAL_NVIC_EnableIRQ>
}
 c003ac2:	bf00      	nop
 c003ac4:	3710      	adds	r7, #16
 c003ac6:	46bd      	mov	sp, r7
 c003ac8:	bd80      	pop	{r7, pc}
 c003aca:	bf00      	nop
 c003acc:	50000400 	.word	0x50000400
 c003ad0:	50021000 	.word	0x50021000
 c003ad4:	50000800 	.word	0x50000800

0c003ad8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 c003ad8:	b580      	push	{r7, lr}
 c003ada:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 c003adc:	4b22      	ldr	r3, [pc, #136]	; (c003b68 <MX_LPUART1_UART_Init+0x90>)
 c003ade:	4a23      	ldr	r2, [pc, #140]	; (c003b6c <MX_LPUART1_UART_Init+0x94>)
 c003ae0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 921600;
 c003ae2:	4b21      	ldr	r3, [pc, #132]	; (c003b68 <MX_LPUART1_UART_Init+0x90>)
 c003ae4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 c003ae8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 c003aea:	4b1f      	ldr	r3, [pc, #124]	; (c003b68 <MX_LPUART1_UART_Init+0x90>)
 c003aec:	2200      	movs	r2, #0
 c003aee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 c003af0:	4b1d      	ldr	r3, [pc, #116]	; (c003b68 <MX_LPUART1_UART_Init+0x90>)
 c003af2:	2200      	movs	r2, #0
 c003af4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 c003af6:	4b1c      	ldr	r3, [pc, #112]	; (c003b68 <MX_LPUART1_UART_Init+0x90>)
 c003af8:	2200      	movs	r2, #0
 c003afa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 c003afc:	4b1a      	ldr	r3, [pc, #104]	; (c003b68 <MX_LPUART1_UART_Init+0x90>)
 c003afe:	220c      	movs	r2, #12
 c003b00:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 c003b02:	4b19      	ldr	r3, [pc, #100]	; (c003b68 <MX_LPUART1_UART_Init+0x90>)
 c003b04:	2200      	movs	r2, #0
 c003b06:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c003b08:	4b17      	ldr	r3, [pc, #92]	; (c003b68 <MX_LPUART1_UART_Init+0x90>)
 c003b0a:	2200      	movs	r2, #0
 c003b0c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c003b0e:	4b16      	ldr	r3, [pc, #88]	; (c003b68 <MX_LPUART1_UART_Init+0x90>)
 c003b10:	2200      	movs	r2, #0
 c003b12:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c003b14:	4b14      	ldr	r3, [pc, #80]	; (c003b68 <MX_LPUART1_UART_Init+0x90>)
 c003b16:	2200      	movs	r2, #0
 c003b18:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 c003b1a:	4b13      	ldr	r3, [pc, #76]	; (c003b68 <MX_LPUART1_UART_Init+0x90>)
 c003b1c:	2200      	movs	r2, #0
 c003b1e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 c003b20:	4811      	ldr	r0, [pc, #68]	; (c003b68 <MX_LPUART1_UART_Init+0x90>)
 c003b22:	f003 f9dd 	bl	c006ee0 <HAL_UART_Init>
 c003b26:	4603      	mov	r3, r0
 c003b28:	2b00      	cmp	r3, #0
 c003b2a:	d001      	beq.n	c003b30 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 c003b2c:	f7ff f9f4 	bl	c002f18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c003b30:	2100      	movs	r1, #0
 c003b32:	480d      	ldr	r0, [pc, #52]	; (c003b68 <MX_LPUART1_UART_Init+0x90>)
 c003b34:	f004 f832 	bl	c007b9c <HAL_UARTEx_SetTxFifoThreshold>
 c003b38:	4603      	mov	r3, r0
 c003b3a:	2b00      	cmp	r3, #0
 c003b3c:	d001      	beq.n	c003b42 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 c003b3e:	f7ff f9eb 	bl	c002f18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c003b42:	2100      	movs	r1, #0
 c003b44:	4808      	ldr	r0, [pc, #32]	; (c003b68 <MX_LPUART1_UART_Init+0x90>)
 c003b46:	f004 f867 	bl	c007c18 <HAL_UARTEx_SetRxFifoThreshold>
 c003b4a:	4603      	mov	r3, r0
 c003b4c:	2b00      	cmp	r3, #0
 c003b4e:	d001      	beq.n	c003b54 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 c003b50:	f7ff f9e2 	bl	c002f18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 c003b54:	4804      	ldr	r0, [pc, #16]	; (c003b68 <MX_LPUART1_UART_Init+0x90>)
 c003b56:	f003 ffe8 	bl	c007b2a <HAL_UARTEx_DisableFifoMode>
 c003b5a:	4603      	mov	r3, r0
 c003b5c:	2b00      	cmp	r3, #0
 c003b5e:	d001      	beq.n	c003b64 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 c003b60:	f7ff f9da 	bl	c002f18 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 c003b64:	bf00      	nop
 c003b66:	bd80      	pop	{r7, pc}
 c003b68:	300007a4 	.word	0x300007a4
 c003b6c:	50008000 	.word	0x50008000

0c003b70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 c003b70:	b580      	push	{r7, lr}
 c003b72:	b0ae      	sub	sp, #184	; 0xb8
 c003b74:	af00      	add	r7, sp, #0
 c003b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c003b78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c003b7c:	2200      	movs	r2, #0
 c003b7e:	601a      	str	r2, [r3, #0]
 c003b80:	605a      	str	r2, [r3, #4]
 c003b82:	609a      	str	r2, [r3, #8]
 c003b84:	60da      	str	r2, [r3, #12]
 c003b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c003b88:	f107 0310 	add.w	r3, r7, #16
 c003b8c:	2294      	movs	r2, #148	; 0x94
 c003b8e:	2100      	movs	r1, #0
 c003b90:	4618      	mov	r0, r3
 c003b92:	f004 f8fe 	bl	c007d92 <memset>
  if(uartHandle->Instance==LPUART1)
 c003b96:	687b      	ldr	r3, [r7, #4]
 c003b98:	681b      	ldr	r3, [r3, #0]
 c003b9a:	4a22      	ldr	r2, [pc, #136]	; (c003c24 <HAL_UART_MspInit+0xb4>)
 c003b9c:	4293      	cmp	r3, r2
 c003b9e:	d13d      	bne.n	c003c1c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 c003ba0:	2320      	movs	r3, #32
 c003ba2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 c003ba4:	2300      	movs	r3, #0
 c003ba6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c003ba8:	f107 0310 	add.w	r3, r7, #16
 c003bac:	4618      	mov	r0, r3
 c003bae:	f002 f80f 	bl	c005bd0 <HAL_RCCEx_PeriphCLKConfig>
 c003bb2:	4603      	mov	r3, r0
 c003bb4:	2b00      	cmp	r3, #0
 c003bb6:	d001      	beq.n	c003bbc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 c003bb8:	f7ff f9ae 	bl	c002f18 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 c003bbc:	4b1a      	ldr	r3, [pc, #104]	; (c003c28 <HAL_UART_MspInit+0xb8>)
 c003bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c003bc0:	4a19      	ldr	r2, [pc, #100]	; (c003c28 <HAL_UART_MspInit+0xb8>)
 c003bc2:	f043 0301 	orr.w	r3, r3, #1
 c003bc6:	65d3      	str	r3, [r2, #92]	; 0x5c
 c003bc8:	4b17      	ldr	r3, [pc, #92]	; (c003c28 <HAL_UART_MspInit+0xb8>)
 c003bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c003bcc:	f003 0301 	and.w	r3, r3, #1
 c003bd0:	60fb      	str	r3, [r7, #12]
 c003bd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 c003bd4:	4b14      	ldr	r3, [pc, #80]	; (c003c28 <HAL_UART_MspInit+0xb8>)
 c003bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c003bd8:	4a13      	ldr	r2, [pc, #76]	; (c003c28 <HAL_UART_MspInit+0xb8>)
 c003bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c003bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 c003be0:	4b11      	ldr	r3, [pc, #68]	; (c003c28 <HAL_UART_MspInit+0xb8>)
 c003be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c003be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c003be8:	60bb      	str	r3, [r7, #8]
 c003bea:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 c003bec:	f000 ffee 	bl	c004bcc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 c003bf0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 c003bf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c003bf8:	2302      	movs	r3, #2
 c003bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c003bfe:	2300      	movs	r3, #0
 c003c00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c003c04:	2300      	movs	r3, #0
 c003c06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 c003c0a:	2308      	movs	r3, #8
 c003c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 c003c10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c003c14:	4619      	mov	r1, r3
 c003c16:	4805      	ldr	r0, [pc, #20]	; (c003c2c <HAL_UART_MspInit+0xbc>)
 c003c18:	f000 fb74 	bl	c004304 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 c003c1c:	bf00      	nop
 c003c1e:	37b8      	adds	r7, #184	; 0xb8
 c003c20:	46bd      	mov	sp, r7
 c003c22:	bd80      	pop	{r7, pc}
 c003c24:	50008000 	.word	0x50008000
 c003c28:	50021000 	.word	0x50021000
 c003c2c:	52021800 	.word	0x52021800

0c003c30 <SecureUartTx>:
}

/* USER CODE BEGIN 1 */

void SecureUartTx(uint8_t* data, uint16_t len)
{
 c003c30:	b580      	push	{r7, lr}
 c003c32:	b082      	sub	sp, #8
 c003c34:	af00      	add	r7, sp, #0
 c003c36:	6078      	str	r0, [r7, #4]
 c003c38:	460b      	mov	r3, r1
 c003c3a:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&hlpuart1, data, len, HAL_MAX_DELAY);
 c003c3c:	887a      	ldrh	r2, [r7, #2]
 c003c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c003c42:	6879      	ldr	r1, [r7, #4]
 c003c44:	4803      	ldr	r0, [pc, #12]	; (c003c54 <SecureUartTx+0x24>)
 c003c46:	f003 f99b 	bl	c006f80 <HAL_UART_Transmit>
}
 c003c4a:	bf00      	nop
 c003c4c:	3708      	adds	r7, #8
 c003c4e:	46bd      	mov	sp, r7
 c003c50:	bd80      	pop	{r7, pc}
 c003c52:	bf00      	nop
 c003c54:	300007a4 	.word	0x300007a4

0c003c58 <SecureUartRx>:

void SecureUartRx(uint8_t* data, uint16_t len)
{
 c003c58:	b580      	push	{r7, lr}
 c003c5a:	b082      	sub	sp, #8
 c003c5c:	af00      	add	r7, sp, #0
 c003c5e:	6078      	str	r0, [r7, #4]
 c003c60:	460b      	mov	r3, r1
 c003c62:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&hlpuart1, data, len, HAL_MAX_DELAY);
 c003c64:	887a      	ldrh	r2, [r7, #2]
 c003c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c003c6a:	6879      	ldr	r1, [r7, #4]
 c003c6c:	4803      	ldr	r0, [pc, #12]	; (c003c7c <SecureUartRx+0x24>)
 c003c6e:	f003 fa1d 	bl	c0070ac <HAL_UART_Receive>

}
 c003c72:	bf00      	nop
 c003c74:	3708      	adds	r7, #8
 c003c76:	46bd      	mov	sp, r7
 c003c78:	bd80      	pop	{r7, pc}
 c003c7a:	bf00      	nop
 c003c7c:	300007a4 	.word	0x300007a4

0c003c80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c003c80:	f8df d034 	ldr.w	sp, [pc, #52]	; c003cb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c003c84:	f7ff fd44 	bl	c003710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c003c88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c003c8a:	e003      	b.n	c003c94 <LoopCopyDataInit>

0c003c8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c003c8c:	4b0b      	ldr	r3, [pc, #44]	; (c003cbc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c003c8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c003c90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c003c92:	3104      	adds	r1, #4

0c003c94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c003c94:	480a      	ldr	r0, [pc, #40]	; (c003cc0 <LoopForever+0xa>)
	ldr	r3, =_edata
 c003c96:	4b0b      	ldr	r3, [pc, #44]	; (c003cc4 <LoopForever+0xe>)
	adds	r2, r0, r1
 c003c98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c003c9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c003c9c:	d3f6      	bcc.n	c003c8c <CopyDataInit>
	ldr	r2, =_sbss
 c003c9e:	4a0a      	ldr	r2, [pc, #40]	; (c003cc8 <LoopForever+0x12>)
	b	LoopFillZerobss
 c003ca0:	e002      	b.n	c003ca8 <LoopFillZerobss>

0c003ca2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c003ca2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c003ca4:	f842 3b04 	str.w	r3, [r2], #4

0c003ca8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c003ca8:	4b08      	ldr	r3, [pc, #32]	; (c003ccc <LoopForever+0x16>)
	cmp	r2, r3
 c003caa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c003cac:	d3f9      	bcc.n	c003ca2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c003cae:	f004 f83f 	bl	c007d30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c003cb2:	f7ff f87d 	bl	c002db0 <main>

0c003cb6 <LoopForever>:

LoopForever:
    b LoopForever
 c003cb6:	e7fe      	b.n	c003cb6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c003cb8:	30010000 	.word	0x30010000
	ldr	r3, =_sidata
 c003cbc:	0c007e7c 	.word	0x0c007e7c
	ldr	r0, =_sdata
 c003cc0:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c003cc4:	30000034 	.word	0x30000034
	ldr	r2, =_sbss
 c003cc8:	3000049c 	.word	0x3000049c
	ldr	r3, = _ebss
 c003ccc:	30000838 	.word	0x30000838

0c003cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c003cd0:	e7fe      	b.n	c003cd0 <ADC1_2_IRQHandler>

0c003cd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c003cd2:	b580      	push	{r7, lr}
 c003cd4:	b082      	sub	sp, #8
 c003cd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c003cd8:	2300      	movs	r3, #0
 c003cda:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c003cdc:	2004      	movs	r0, #4
 c003cde:	f000 f93f 	bl	c003f60 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c003ce2:	f7ff fd2f 	bl	c003744 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c003ce6:	2007      	movs	r0, #7
 c003ce8:	f000 f80e 	bl	c003d08 <HAL_InitTick>
 c003cec:	4603      	mov	r3, r0
 c003cee:	2b00      	cmp	r3, #0
 c003cf0:	d002      	beq.n	c003cf8 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c003cf2:	2301      	movs	r3, #1
 c003cf4:	71fb      	strb	r3, [r7, #7]
 c003cf6:	e001      	b.n	c003cfc <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c003cf8:	f7ff fbda 	bl	c0034b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c003cfc:	79fb      	ldrb	r3, [r7, #7]
}
 c003cfe:	4618      	mov	r0, r3
 c003d00:	3708      	adds	r7, #8
 c003d02:	46bd      	mov	sp, r7
 c003d04:	bd80      	pop	{r7, pc}
	...

0c003d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c003d08:	b580      	push	{r7, lr}
 c003d0a:	b084      	sub	sp, #16
 c003d0c:	af00      	add	r7, sp, #0
 c003d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c003d10:	2300      	movs	r3, #0
 c003d12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c003d14:	4b17      	ldr	r3, [pc, #92]	; (c003d74 <HAL_InitTick+0x6c>)
 c003d16:	781b      	ldrb	r3, [r3, #0]
 c003d18:	2b00      	cmp	r3, #0
 c003d1a:	d023      	beq.n	c003d64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c003d1c:	4b16      	ldr	r3, [pc, #88]	; (c003d78 <HAL_InitTick+0x70>)
 c003d1e:	681a      	ldr	r2, [r3, #0]
 c003d20:	4b14      	ldr	r3, [pc, #80]	; (c003d74 <HAL_InitTick+0x6c>)
 c003d22:	781b      	ldrb	r3, [r3, #0]
 c003d24:	4619      	mov	r1, r3
 c003d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c003d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 c003d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 c003d32:	4618      	mov	r0, r3
 c003d34:	f000 f947 	bl	c003fc6 <HAL_SYSTICK_Config>
 c003d38:	4603      	mov	r3, r0
 c003d3a:	2b00      	cmp	r3, #0
 c003d3c:	d10f      	bne.n	c003d5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c003d3e:	687b      	ldr	r3, [r7, #4]
 c003d40:	2b07      	cmp	r3, #7
 c003d42:	d809      	bhi.n	c003d58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c003d44:	2200      	movs	r2, #0
 c003d46:	6879      	ldr	r1, [r7, #4]
 c003d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c003d4c:	f000 f913 	bl	c003f76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c003d50:	4a0a      	ldr	r2, [pc, #40]	; (c003d7c <HAL_InitTick+0x74>)
 c003d52:	687b      	ldr	r3, [r7, #4]
 c003d54:	6013      	str	r3, [r2, #0]
 c003d56:	e007      	b.n	c003d68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c003d58:	2301      	movs	r3, #1
 c003d5a:	73fb      	strb	r3, [r7, #15]
 c003d5c:	e004      	b.n	c003d68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c003d5e:	2301      	movs	r3, #1
 c003d60:	73fb      	strb	r3, [r7, #15]
 c003d62:	e001      	b.n	c003d68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c003d64:	2301      	movs	r3, #1
 c003d66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c003d68:	7bfb      	ldrb	r3, [r7, #15]
}
 c003d6a:	4618      	mov	r0, r3
 c003d6c:	3710      	adds	r7, #16
 c003d6e:	46bd      	mov	sp, r7
 c003d70:	bd80      	pop	{r7, pc}
 c003d72:	bf00      	nop
 c003d74:	30000030 	.word	0x30000030
 c003d78:	30000028 	.word	0x30000028
 c003d7c:	3000002c 	.word	0x3000002c

0c003d80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c003d80:	b480      	push	{r7}
 c003d82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c003d84:	4b06      	ldr	r3, [pc, #24]	; (c003da0 <HAL_IncTick+0x20>)
 c003d86:	781b      	ldrb	r3, [r3, #0]
 c003d88:	461a      	mov	r2, r3
 c003d8a:	4b06      	ldr	r3, [pc, #24]	; (c003da4 <HAL_IncTick+0x24>)
 c003d8c:	681b      	ldr	r3, [r3, #0]
 c003d8e:	4413      	add	r3, r2
 c003d90:	4a04      	ldr	r2, [pc, #16]	; (c003da4 <HAL_IncTick+0x24>)
 c003d92:	6013      	str	r3, [r2, #0]
}
 c003d94:	bf00      	nop
 c003d96:	46bd      	mov	sp, r7
 c003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003d9c:	4770      	bx	lr
 c003d9e:	bf00      	nop
 c003da0:	30000030 	.word	0x30000030
 c003da4:	30000834 	.word	0x30000834

0c003da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c003da8:	b480      	push	{r7}
 c003daa:	af00      	add	r7, sp, #0
  return uwTick;
 c003dac:	4b03      	ldr	r3, [pc, #12]	; (c003dbc <HAL_GetTick+0x14>)
 c003dae:	681b      	ldr	r3, [r3, #0]
}
 c003db0:	4618      	mov	r0, r3
 c003db2:	46bd      	mov	sp, r7
 c003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003db8:	4770      	bx	lr
 c003dba:	bf00      	nop
 c003dbc:	30000834 	.word	0x30000834

0c003dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c003dc0:	b480      	push	{r7}
 c003dc2:	b085      	sub	sp, #20
 c003dc4:	af00      	add	r7, sp, #0
 c003dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c003dc8:	687b      	ldr	r3, [r7, #4]
 c003dca:	f003 0307 	and.w	r3, r3, #7
 c003dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c003dd0:	4b0c      	ldr	r3, [pc, #48]	; (c003e04 <__NVIC_SetPriorityGrouping+0x44>)
 c003dd2:	68db      	ldr	r3, [r3, #12]
 c003dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c003dd6:	68ba      	ldr	r2, [r7, #8]
 c003dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c003ddc:	4013      	ands	r3, r2
 c003dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c003de0:	68fb      	ldr	r3, [r7, #12]
 c003de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c003de4:	68bb      	ldr	r3, [r7, #8]
 c003de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c003de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c003dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c003df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c003df2:	4a04      	ldr	r2, [pc, #16]	; (c003e04 <__NVIC_SetPriorityGrouping+0x44>)
 c003df4:	68bb      	ldr	r3, [r7, #8]
 c003df6:	60d3      	str	r3, [r2, #12]
}
 c003df8:	bf00      	nop
 c003dfa:	3714      	adds	r7, #20
 c003dfc:	46bd      	mov	sp, r7
 c003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003e02:	4770      	bx	lr
 c003e04:	e000ed00 	.word	0xe000ed00

0c003e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c003e08:	b480      	push	{r7}
 c003e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c003e0c:	4b04      	ldr	r3, [pc, #16]	; (c003e20 <__NVIC_GetPriorityGrouping+0x18>)
 c003e0e:	68db      	ldr	r3, [r3, #12]
 c003e10:	0a1b      	lsrs	r3, r3, #8
 c003e12:	f003 0307 	and.w	r3, r3, #7
}
 c003e16:	4618      	mov	r0, r3
 c003e18:	46bd      	mov	sp, r7
 c003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003e1e:	4770      	bx	lr
 c003e20:	e000ed00 	.word	0xe000ed00

0c003e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c003e24:	b480      	push	{r7}
 c003e26:	b083      	sub	sp, #12
 c003e28:	af00      	add	r7, sp, #0
 c003e2a:	4603      	mov	r3, r0
 c003e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c003e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c003e32:	2b00      	cmp	r3, #0
 c003e34:	db0b      	blt.n	c003e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c003e36:	79fb      	ldrb	r3, [r7, #7]
 c003e38:	f003 021f 	and.w	r2, r3, #31
 c003e3c:	4907      	ldr	r1, [pc, #28]	; (c003e5c <__NVIC_EnableIRQ+0x38>)
 c003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c003e42:	095b      	lsrs	r3, r3, #5
 c003e44:	2001      	movs	r0, #1
 c003e46:	fa00 f202 	lsl.w	r2, r0, r2
 c003e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c003e4e:	bf00      	nop
 c003e50:	370c      	adds	r7, #12
 c003e52:	46bd      	mov	sp, r7
 c003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003e58:	4770      	bx	lr
 c003e5a:	bf00      	nop
 c003e5c:	e000e100 	.word	0xe000e100

0c003e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c003e60:	b480      	push	{r7}
 c003e62:	b083      	sub	sp, #12
 c003e64:	af00      	add	r7, sp, #0
 c003e66:	4603      	mov	r3, r0
 c003e68:	6039      	str	r1, [r7, #0]
 c003e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c003e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c003e70:	2b00      	cmp	r3, #0
 c003e72:	db0a      	blt.n	c003e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c003e74:	683b      	ldr	r3, [r7, #0]
 c003e76:	b2da      	uxtb	r2, r3
 c003e78:	490c      	ldr	r1, [pc, #48]	; (c003eac <__NVIC_SetPriority+0x4c>)
 c003e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c003e7e:	0152      	lsls	r2, r2, #5
 c003e80:	b2d2      	uxtb	r2, r2
 c003e82:	440b      	add	r3, r1
 c003e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c003e88:	e00a      	b.n	c003ea0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c003e8a:	683b      	ldr	r3, [r7, #0]
 c003e8c:	b2da      	uxtb	r2, r3
 c003e8e:	4908      	ldr	r1, [pc, #32]	; (c003eb0 <__NVIC_SetPriority+0x50>)
 c003e90:	79fb      	ldrb	r3, [r7, #7]
 c003e92:	f003 030f 	and.w	r3, r3, #15
 c003e96:	3b04      	subs	r3, #4
 c003e98:	0152      	lsls	r2, r2, #5
 c003e9a:	b2d2      	uxtb	r2, r2
 c003e9c:	440b      	add	r3, r1
 c003e9e:	761a      	strb	r2, [r3, #24]
}
 c003ea0:	bf00      	nop
 c003ea2:	370c      	adds	r7, #12
 c003ea4:	46bd      	mov	sp, r7
 c003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003eaa:	4770      	bx	lr
 c003eac:	e000e100 	.word	0xe000e100
 c003eb0:	e000ed00 	.word	0xe000ed00

0c003eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c003eb4:	b480      	push	{r7}
 c003eb6:	b089      	sub	sp, #36	; 0x24
 c003eb8:	af00      	add	r7, sp, #0
 c003eba:	60f8      	str	r0, [r7, #12]
 c003ebc:	60b9      	str	r1, [r7, #8]
 c003ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c003ec0:	68fb      	ldr	r3, [r7, #12]
 c003ec2:	f003 0307 	and.w	r3, r3, #7
 c003ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c003ec8:	69fb      	ldr	r3, [r7, #28]
 c003eca:	f1c3 0307 	rsb	r3, r3, #7
 c003ece:	2b03      	cmp	r3, #3
 c003ed0:	bf28      	it	cs
 c003ed2:	2303      	movcs	r3, #3
 c003ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c003ed6:	69fb      	ldr	r3, [r7, #28]
 c003ed8:	3303      	adds	r3, #3
 c003eda:	2b06      	cmp	r3, #6
 c003edc:	d902      	bls.n	c003ee4 <NVIC_EncodePriority+0x30>
 c003ede:	69fb      	ldr	r3, [r7, #28]
 c003ee0:	3b04      	subs	r3, #4
 c003ee2:	e000      	b.n	c003ee6 <NVIC_EncodePriority+0x32>
 c003ee4:	2300      	movs	r3, #0
 c003ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c003ee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c003eec:	69bb      	ldr	r3, [r7, #24]
 c003eee:	fa02 f303 	lsl.w	r3, r2, r3
 c003ef2:	43da      	mvns	r2, r3
 c003ef4:	68bb      	ldr	r3, [r7, #8]
 c003ef6:	401a      	ands	r2, r3
 c003ef8:	697b      	ldr	r3, [r7, #20]
 c003efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c003efc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 c003f00:	697b      	ldr	r3, [r7, #20]
 c003f02:	fa01 f303 	lsl.w	r3, r1, r3
 c003f06:	43d9      	mvns	r1, r3
 c003f08:	687b      	ldr	r3, [r7, #4]
 c003f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c003f0c:	4313      	orrs	r3, r2
         );
}
 c003f0e:	4618      	mov	r0, r3
 c003f10:	3724      	adds	r7, #36	; 0x24
 c003f12:	46bd      	mov	sp, r7
 c003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003f18:	4770      	bx	lr
	...

0c003f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c003f1c:	b580      	push	{r7, lr}
 c003f1e:	b082      	sub	sp, #8
 c003f20:	af00      	add	r7, sp, #0
 c003f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c003f24:	687b      	ldr	r3, [r7, #4]
 c003f26:	3b01      	subs	r3, #1
 c003f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c003f2c:	d301      	bcc.n	c003f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c003f2e:	2301      	movs	r3, #1
 c003f30:	e00f      	b.n	c003f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c003f32:	4a0a      	ldr	r2, [pc, #40]	; (c003f5c <SysTick_Config+0x40>)
 c003f34:	687b      	ldr	r3, [r7, #4]
 c003f36:	3b01      	subs	r3, #1
 c003f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c003f3a:	2107      	movs	r1, #7
 c003f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c003f40:	f7ff ff8e 	bl	c003e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c003f44:	4b05      	ldr	r3, [pc, #20]	; (c003f5c <SysTick_Config+0x40>)
 c003f46:	2200      	movs	r2, #0
 c003f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c003f4a:	4b04      	ldr	r3, [pc, #16]	; (c003f5c <SysTick_Config+0x40>)
 c003f4c:	2207      	movs	r2, #7
 c003f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c003f50:	2300      	movs	r3, #0
}
 c003f52:	4618      	mov	r0, r3
 c003f54:	3708      	adds	r7, #8
 c003f56:	46bd      	mov	sp, r7
 c003f58:	bd80      	pop	{r7, pc}
 c003f5a:	bf00      	nop
 c003f5c:	e000e010 	.word	0xe000e010

0c003f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c003f60:	b580      	push	{r7, lr}
 c003f62:	b082      	sub	sp, #8
 c003f64:	af00      	add	r7, sp, #0
 c003f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c003f68:	6878      	ldr	r0, [r7, #4]
 c003f6a:	f7ff ff29 	bl	c003dc0 <__NVIC_SetPriorityGrouping>
}
 c003f6e:	bf00      	nop
 c003f70:	3708      	adds	r7, #8
 c003f72:	46bd      	mov	sp, r7
 c003f74:	bd80      	pop	{r7, pc}

0c003f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c003f76:	b580      	push	{r7, lr}
 c003f78:	b086      	sub	sp, #24
 c003f7a:	af00      	add	r7, sp, #0
 c003f7c:	4603      	mov	r3, r0
 c003f7e:	60b9      	str	r1, [r7, #8]
 c003f80:	607a      	str	r2, [r7, #4]
 c003f82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c003f84:	f7ff ff40 	bl	c003e08 <__NVIC_GetPriorityGrouping>
 c003f88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c003f8a:	687a      	ldr	r2, [r7, #4]
 c003f8c:	68b9      	ldr	r1, [r7, #8]
 c003f8e:	6978      	ldr	r0, [r7, #20]
 c003f90:	f7ff ff90 	bl	c003eb4 <NVIC_EncodePriority>
 c003f94:	4602      	mov	r2, r0
 c003f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c003f9a:	4611      	mov	r1, r2
 c003f9c:	4618      	mov	r0, r3
 c003f9e:	f7ff ff5f 	bl	c003e60 <__NVIC_SetPriority>
}
 c003fa2:	bf00      	nop
 c003fa4:	3718      	adds	r7, #24
 c003fa6:	46bd      	mov	sp, r7
 c003fa8:	bd80      	pop	{r7, pc}

0c003faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c003faa:	b580      	push	{r7, lr}
 c003fac:	b082      	sub	sp, #8
 c003fae:	af00      	add	r7, sp, #0
 c003fb0:	4603      	mov	r3, r0
 c003fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c003fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c003fb8:	4618      	mov	r0, r3
 c003fba:	f7ff ff33 	bl	c003e24 <__NVIC_EnableIRQ>
}
 c003fbe:	bf00      	nop
 c003fc0:	3708      	adds	r7, #8
 c003fc2:	46bd      	mov	sp, r7
 c003fc4:	bd80      	pop	{r7, pc}

0c003fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c003fc6:	b580      	push	{r7, lr}
 c003fc8:	b082      	sub	sp, #8
 c003fca:	af00      	add	r7, sp, #0
 c003fcc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c003fce:	6878      	ldr	r0, [r7, #4]
 c003fd0:	f7ff ffa4 	bl	c003f1c <SysTick_Config>
 c003fd4:	4603      	mov	r3, r0
}
 c003fd6:	4618      	mov	r0, r3
 c003fd8:	3708      	adds	r7, #8
 c003fda:	46bd      	mov	sp, r7
 c003fdc:	bd80      	pop	{r7, pc}
	...

0c003fe0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 c003fe0:	b580      	push	{r7, lr}
 c003fe2:	b084      	sub	sp, #16
 c003fe4:	af00      	add	r7, sp, #0
 c003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 c003fe8:	687b      	ldr	r3, [r7, #4]
 c003fea:	2b00      	cmp	r3, #0
 c003fec:	d101      	bne.n	c003ff2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 c003fee:	2301      	movs	r3, #1
 c003ff0:	e08d      	b.n	c00410e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 c003ff2:	687b      	ldr	r3, [r7, #4]
 c003ff4:	681b      	ldr	r3, [r3, #0]
 c003ff6:	461a      	mov	r2, r3
 c003ff8:	4b47      	ldr	r3, [pc, #284]	; (c004118 <HAL_DMA_Init+0x138>)
 c003ffa:	429a      	cmp	r2, r3
 c003ffc:	d80f      	bhi.n	c00401e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 c003ffe:	687b      	ldr	r3, [r7, #4]
 c004000:	681b      	ldr	r3, [r3, #0]
 c004002:	461a      	mov	r2, r3
 c004004:	4b45      	ldr	r3, [pc, #276]	; (c00411c <HAL_DMA_Init+0x13c>)
 c004006:	4413      	add	r3, r2
 c004008:	4a45      	ldr	r2, [pc, #276]	; (c004120 <HAL_DMA_Init+0x140>)
 c00400a:	fba2 2303 	umull	r2, r3, r2, r3
 c00400e:	091b      	lsrs	r3, r3, #4
 c004010:	009a      	lsls	r2, r3, #2
 c004012:	687b      	ldr	r3, [r7, #4]
 c004014:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 c004016:	687b      	ldr	r3, [r7, #4]
 c004018:	4a42      	ldr	r2, [pc, #264]	; (c004124 <HAL_DMA_Init+0x144>)
 c00401a:	649a      	str	r2, [r3, #72]	; 0x48
 c00401c:	e00e      	b.n	c00403c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 c00401e:	687b      	ldr	r3, [r7, #4]
 c004020:	681b      	ldr	r3, [r3, #0]
 c004022:	461a      	mov	r2, r3
 c004024:	4b40      	ldr	r3, [pc, #256]	; (c004128 <HAL_DMA_Init+0x148>)
 c004026:	4413      	add	r3, r2
 c004028:	4a3d      	ldr	r2, [pc, #244]	; (c004120 <HAL_DMA_Init+0x140>)
 c00402a:	fba2 2303 	umull	r2, r3, r2, r3
 c00402e:	091b      	lsrs	r3, r3, #4
 c004030:	009a      	lsls	r2, r3, #2
 c004032:	687b      	ldr	r3, [r7, #4]
 c004034:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 c004036:	687b      	ldr	r3, [r7, #4]
 c004038:	4a3c      	ldr	r2, [pc, #240]	; (c00412c <HAL_DMA_Init+0x14c>)
 c00403a:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 c00403c:	687b      	ldr	r3, [r7, #4]
 c00403e:	2202      	movs	r2, #2
 c004040:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 c004044:	687b      	ldr	r3, [r7, #4]
 c004046:	681b      	ldr	r3, [r3, #0]
 c004048:	681b      	ldr	r3, [r3, #0]
 c00404a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 c00404c:	68fb      	ldr	r3, [r7, #12]
 c00404e:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 c004052:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 c004056:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 c004058:	687b      	ldr	r3, [r7, #4]
 c00405a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c00405c:	687b      	ldr	r3, [r7, #4]
 c00405e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 c004060:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c004062:	687b      	ldr	r3, [r7, #4]
 c004064:	691b      	ldr	r3, [r3, #16]
 c004066:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c004068:	687b      	ldr	r3, [r7, #4]
 c00406a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c00406c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c00406e:	687b      	ldr	r3, [r7, #4]
 c004070:	699b      	ldr	r3, [r3, #24]
 c004072:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 c004074:	687b      	ldr	r3, [r7, #4]
 c004076:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c004078:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 c00407a:	687b      	ldr	r3, [r7, #4]
 c00407c:	6a1b      	ldr	r3, [r3, #32]
 c00407e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 c004080:	68fa      	ldr	r2, [r7, #12]
 c004082:	4313      	orrs	r3, r2
 c004084:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 c004086:	687b      	ldr	r3, [r7, #4]
 c004088:	681b      	ldr	r3, [r3, #0]
 c00408a:	68fa      	ldr	r2, [r7, #12]
 c00408c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 c00408e:	6878      	ldr	r0, [r7, #4]
 c004090:	f000 f8d6 	bl	c004240 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 c004094:	687b      	ldr	r3, [r7, #4]
 c004096:	689b      	ldr	r3, [r3, #8]
 c004098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c00409c:	d102      	bne.n	c0040a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 c00409e:	687b      	ldr	r3, [r7, #4]
 c0040a0:	2200      	movs	r2, #0
 c0040a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 c0040a4:	687b      	ldr	r3, [r7, #4]
 c0040a6:	685a      	ldr	r2, [r3, #4]
 c0040a8:	687b      	ldr	r3, [r7, #4]
 c0040aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c0040ac:	b2d2      	uxtb	r2, r2
 c0040ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 c0040b0:	687b      	ldr	r3, [r7, #4]
 c0040b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0040b4:	687a      	ldr	r2, [r7, #4]
 c0040b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 c0040b8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 c0040ba:	687b      	ldr	r3, [r7, #4]
 c0040bc:	685b      	ldr	r3, [r3, #4]
 c0040be:	2b00      	cmp	r3, #0
 c0040c0:	d010      	beq.n	c0040e4 <HAL_DMA_Init+0x104>
 c0040c2:	687b      	ldr	r3, [r7, #4]
 c0040c4:	685b      	ldr	r3, [r3, #4]
 c0040c6:	2b04      	cmp	r3, #4
 c0040c8:	d80c      	bhi.n	c0040e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 c0040ca:	6878      	ldr	r0, [r7, #4]
 c0040cc:	f000 f8f6 	bl	c0042bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 c0040d0:	687b      	ldr	r3, [r7, #4]
 c0040d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0040d4:	2200      	movs	r2, #0
 c0040d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 c0040d8:	687b      	ldr	r3, [r7, #4]
 c0040da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0040dc:	687a      	ldr	r2, [r7, #4]
 c0040de:	6e52      	ldr	r2, [r2, #100]	; 0x64
 c0040e0:	605a      	str	r2, [r3, #4]
 c0040e2:	e008      	b.n	c0040f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 c0040e4:	687b      	ldr	r3, [r7, #4]
 c0040e6:	2200      	movs	r2, #0
 c0040e8:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 c0040ea:	687b      	ldr	r3, [r7, #4]
 c0040ec:	2200      	movs	r2, #0
 c0040ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 c0040f0:	687b      	ldr	r3, [r7, #4]
 c0040f2:	2200      	movs	r2, #0
 c0040f4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 c0040f6:	687b      	ldr	r3, [r7, #4]
 c0040f8:	2200      	movs	r2, #0
 c0040fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 c0040fc:	687b      	ldr	r3, [r7, #4]
 c0040fe:	2201      	movs	r2, #1
 c004100:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 c004104:	687b      	ldr	r3, [r7, #4]
 c004106:	2200      	movs	r2, #0
 c004108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 c00410c:	2300      	movs	r3, #0
}
 c00410e:	4618      	mov	r0, r3
 c004110:	3710      	adds	r7, #16
 c004112:	46bd      	mov	sp, r7
 c004114:	bd80      	pop	{r7, pc}
 c004116:	bf00      	nop
 c004118:	50020407 	.word	0x50020407
 c00411c:	affdfff8 	.word	0xaffdfff8
 c004120:	cccccccd 	.word	0xcccccccd
 c004124:	50020000 	.word	0x50020000
 c004128:	affdfbf8 	.word	0xaffdfbf8
 c00412c:	50020400 	.word	0x50020400

0c004130 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 c004130:	b480      	push	{r7}
 c004132:	b087      	sub	sp, #28
 c004134:	af00      	add	r7, sp, #0
 c004136:	6078      	str	r0, [r7, #4]
 c004138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c00413a:	2300      	movs	r3, #0
 c00413c:	75fb      	strb	r3, [r7, #23]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 c00413e:	687b      	ldr	r3, [r7, #4]
 c004140:	2b00      	cmp	r3, #0
 c004142:	d103      	bne.n	c00414c <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 c004144:	2301      	movs	r3, #1
 c004146:	75fb      	strb	r3, [r7, #23]
    return status;
 c004148:	7dfb      	ldrb	r3, [r7, #23]
 c00414a:	e073      	b.n	c004234 <HAL_DMA_ConfigChannelAttributes+0x104>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 c00414c:	687b      	ldr	r3, [r7, #4]
 c00414e:	681b      	ldr	r3, [r3, #0]
 c004150:	681b      	ldr	r3, [r3, #0]
 c004152:	613b      	str	r3, [r7, #16]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 c004154:	683b      	ldr	r3, [r7, #0]
 c004156:	f003 0310 	and.w	r3, r3, #16
 c00415a:	2b00      	cmp	r3, #0
 c00415c:	d00d      	beq.n	c00417a <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 c00415e:	683b      	ldr	r3, [r7, #0]
 c004160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c004164:	2b00      	cmp	r3, #0
 c004166:	d004      	beq.n	c004172 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 c004168:	693b      	ldr	r3, [r7, #16]
 c00416a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c00416e:	613b      	str	r3, [r7, #16]
 c004170:	e003      	b.n	c00417a <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 c004172:	693b      	ldr	r3, [r7, #16]
 c004174:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c004178:	613b      	str	r3, [r7, #16]
  }

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Channel */
  /* Check what is the current SECM status */
  if ((hdma->Instance->CCR & DMA_CCR_SECM) == DMA_CCR_SECM)
 c00417a:	687b      	ldr	r3, [r7, #4]
 c00417c:	681b      	ldr	r3, [r3, #0]
 c00417e:	681b      	ldr	r3, [r3, #0]
 c004180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c004184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c004188:	d103      	bne.n	c004192 <HAL_DMA_ConfigChannelAttributes+0x62>
  {
    /* Channel is currently secure */
    ccr_SECM = DMA_CCR_SECM;
 c00418a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c00418e:	60fb      	str	r3, [r7, #12]
 c004190:	e001      	b.n	c004196 <HAL_DMA_ConfigChannelAttributes+0x66>
  }
  else
  {
    /* Channel is currently non-secure */
    ccr_SECM = 0U;
 c004192:	2300      	movs	r3, #0
 c004194:	60fb      	str	r3, [r7, #12]
  }

  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_MASK) != 0U)
 c004196:	683b      	ldr	r3, [r7, #0]
 c004198:	f003 0302 	and.w	r3, r3, #2
 c00419c:	2b00      	cmp	r3, #0
 c00419e:	d012      	beq.n	c0041c6 <HAL_DMA_ConfigChannelAttributes+0x96>
  {
    if((ChannelAttributes & DMA_CCR_SECM) != 0U)
 c0041a0:	683b      	ldr	r3, [r7, #0]
 c0041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0041a6:	2b00      	cmp	r3, #0
 c0041a8:	d007      	beq.n	c0041ba <HAL_DMA_ConfigChannelAttributes+0x8a>
    {
      SET_BIT(ccr, DMA_CCR_SECM);
 c0041aa:	693b      	ldr	r3, [r7, #16]
 c0041ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c0041b0:	613b      	str	r3, [r7, #16]
      /* Channel changed to secure */
      ccr_SECM = DMA_CCR_SECM;
 c0041b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c0041b6:	60fb      	str	r3, [r7, #12]
 c0041b8:	e005      	b.n	c0041c6 <HAL_DMA_ConfigChannelAttributes+0x96>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_SECM);
 c0041ba:	693b      	ldr	r3, [r7, #16]
 c0041bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 c0041c0:	613b      	str	r3, [r7, #16]
      /* Channel changed to non-secure */
      ccr_SECM = 0U;
 c0041c2:	2300      	movs	r3, #0
 c0041c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Channel source */
  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_SRC_MASK) != 0U)
 c0041c6:	683b      	ldr	r3, [r7, #0]
 c0041c8:	f003 0304 	and.w	r3, r3, #4
 c0041cc:	2b00      	cmp	r3, #0
 c0041ce:	d013      	beq.n	c0041f8 <HAL_DMA_ConfigChannelAttributes+0xc8>
  {
    /* Configure Source security attributes */
    if ((ChannelAttributes & DMA_CCR_SSEC) != 0x0U)
 c0041d0:	683b      	ldr	r3, [r7, #0]
 c0041d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c0041d6:	2b00      	cmp	r3, #0
 c0041d8:	d00a      	beq.n	c0041f0 <HAL_DMA_ConfigChannelAttributes+0xc0>
    {
      /* SSEC can only be set if channel is secure */
      /* Otherwise configuration is not taken into account */
      if (ccr_SECM == 0U)
 c0041da:	68fb      	ldr	r3, [r7, #12]
 c0041dc:	2b00      	cmp	r3, #0
 c0041de:	d102      	bne.n	c0041e6 <HAL_DMA_ConfigChannelAttributes+0xb6>
      {
        /* DSEC can not be secure */
        /* Source channel is non secure */
         status = HAL_ERROR;
 c0041e0:	2301      	movs	r3, #1
 c0041e2:	75fb      	strb	r3, [r7, #23]
 c0041e4:	e008      	b.n	c0041f8 <HAL_DMA_ConfigChannelAttributes+0xc8>
      }
      else
      {
        SET_BIT(ccr, DMA_CCR_SSEC);
 c0041e6:	693b      	ldr	r3, [r7, #16]
 c0041e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c0041ec:	613b      	str	r3, [r7, #16]
 c0041ee:	e003      	b.n	c0041f8 <HAL_DMA_ConfigChannelAttributes+0xc8>
      }
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_SSEC);
 c0041f0:	693b      	ldr	r3, [r7, #16]
 c0041f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c0041f6:	613b      	str	r3, [r7, #16]
    }
  }

  /* Channel destination */
  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_DEST_MASK) != 0U)
 c0041f8:	683b      	ldr	r3, [r7, #0]
 c0041fa:	f003 0308 	and.w	r3, r3, #8
 c0041fe:	2b00      	cmp	r3, #0
 c004200:	d013      	beq.n	c00422a <HAL_DMA_ConfigChannelAttributes+0xfa>
  {
    /* Configure Destination security attributes */
    if((ChannelAttributes & DMA_CCR_DSEC) != 0U)
 c004202:	683b      	ldr	r3, [r7, #0]
 c004204:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c004208:	2b00      	cmp	r3, #0
 c00420a:	d00a      	beq.n	c004222 <HAL_DMA_ConfigChannelAttributes+0xf2>
    {
      if (ccr_SECM == 0U)
 c00420c:	68fb      	ldr	r3, [r7, #12]
 c00420e:	2b00      	cmp	r3, #0
 c004210:	d102      	bne.n	c004218 <HAL_DMA_ConfigChannelAttributes+0xe8>
      {
        /* DSEC can only be set if channel is secure */
        /* Destination channel is non secure */
         status = HAL_ERROR;
 c004212:	2301      	movs	r3, #1
 c004214:	75fb      	strb	r3, [r7, #23]
 c004216:	e008      	b.n	c00422a <HAL_DMA_ConfigChannelAttributes+0xfa>
      }
      else
      {
        SET_BIT(ccr, DMA_CCR_DSEC);
 c004218:	693b      	ldr	r3, [r7, #16]
 c00421a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c00421e:	613b      	str	r3, [r7, #16]
 c004220:	e003      	b.n	c00422a <HAL_DMA_ConfigChannelAttributes+0xfa>
      }
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_DSEC);
 c004222:	693b      	ldr	r3, [r7, #16]
 c004224:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 c004228:	613b      	str	r3, [r7, #16]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 c00422a:	687b      	ldr	r3, [r7, #4]
 c00422c:	681b      	ldr	r3, [r3, #0]
 c00422e:	693a      	ldr	r2, [r7, #16]
 c004230:	601a      	str	r2, [r3, #0]

  return status;
 c004232:	7dfb      	ldrb	r3, [r7, #23]
}
 c004234:	4618      	mov	r0, r3
 c004236:	371c      	adds	r7, #28
 c004238:	46bd      	mov	sp, r7
 c00423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00423e:	4770      	bx	lr

0c004240 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 c004240:	b480      	push	{r7}
 c004242:	b085      	sub	sp, #20
 c004244:	af00      	add	r7, sp, #0
 c004246:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 c004248:	687b      	ldr	r3, [r7, #4]
 c00424a:	681b      	ldr	r3, [r3, #0]
 c00424c:	461a      	mov	r2, r3
 c00424e:	4b17      	ldr	r3, [pc, #92]	; (c0042ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 c004250:	429a      	cmp	r2, r3
 c004252:	d80a      	bhi.n	c00426a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 c004254:	687b      	ldr	r3, [r7, #4]
 c004256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c004258:	089b      	lsrs	r3, r3, #2
 c00425a:	009b      	lsls	r3, r3, #2
 c00425c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 c004260:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 c004264:	687a      	ldr	r2, [r7, #4]
 c004266:	6513      	str	r3, [r2, #80]	; 0x50
 c004268:	e007      	b.n	c00427a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 c00426a:	687b      	ldr	r3, [r7, #4]
 c00426c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00426e:	089b      	lsrs	r3, r3, #2
 c004270:	009a      	lsls	r2, r3, #2
 c004272:	4b0f      	ldr	r3, [pc, #60]	; (c0042b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 c004274:	4413      	add	r3, r2
 c004276:	687a      	ldr	r2, [r7, #4]
 c004278:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 c00427a:	687b      	ldr	r3, [r7, #4]
 c00427c:	681b      	ldr	r3, [r3, #0]
 c00427e:	b2db      	uxtb	r3, r3
 c004280:	3b08      	subs	r3, #8
 c004282:	4a0c      	ldr	r2, [pc, #48]	; (c0042b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 c004284:	fba2 2303 	umull	r2, r3, r2, r3
 c004288:	091b      	lsrs	r3, r3, #4
 c00428a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 c00428c:	687b      	ldr	r3, [r7, #4]
 c00428e:	4a0a      	ldr	r2, [pc, #40]	; (c0042b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 c004290:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 c004292:	68fb      	ldr	r3, [r7, #12]
 c004294:	f003 031f 	and.w	r3, r3, #31
 c004298:	2201      	movs	r2, #1
 c00429a:	409a      	lsls	r2, r3
 c00429c:	687b      	ldr	r3, [r7, #4]
 c00429e:	659a      	str	r2, [r3, #88]	; 0x58
}
 c0042a0:	bf00      	nop
 c0042a2:	3714      	adds	r7, #20
 c0042a4:	46bd      	mov	sp, r7
 c0042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0042aa:	4770      	bx	lr
 c0042ac:	50020407 	.word	0x50020407
 c0042b0:	50020820 	.word	0x50020820
 c0042b4:	cccccccd 	.word	0xcccccccd
 c0042b8:	50020880 	.word	0x50020880

0c0042bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 c0042bc:	b480      	push	{r7}
 c0042be:	b085      	sub	sp, #20
 c0042c0:	af00      	add	r7, sp, #0
 c0042c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 c0042c4:	687b      	ldr	r3, [r7, #4]
 c0042c6:	685b      	ldr	r3, [r3, #4]
 c0042c8:	b2db      	uxtb	r3, r3
 c0042ca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 c0042cc:	68fa      	ldr	r2, [r7, #12]
 c0042ce:	4b0b      	ldr	r3, [pc, #44]	; (c0042fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 c0042d0:	4413      	add	r3, r2
 c0042d2:	009b      	lsls	r3, r3, #2
 c0042d4:	461a      	mov	r2, r3
 c0042d6:	687b      	ldr	r3, [r7, #4]
 c0042d8:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 c0042da:	687b      	ldr	r3, [r7, #4]
 c0042dc:	4a08      	ldr	r2, [pc, #32]	; (c004300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 c0042de:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 c0042e0:	68fb      	ldr	r3, [r7, #12]
 c0042e2:	3b01      	subs	r3, #1
 c0042e4:	f003 0303 	and.w	r3, r3, #3
 c0042e8:	2201      	movs	r2, #1
 c0042ea:	409a      	lsls	r2, r3
 c0042ec:	687b      	ldr	r3, [r7, #4]
 c0042ee:	665a      	str	r2, [r3, #100]	; 0x64
}
 c0042f0:	bf00      	nop
 c0042f2:	3714      	adds	r7, #20
 c0042f4:	46bd      	mov	sp, r7
 c0042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0042fa:	4770      	bx	lr
 c0042fc:	1400823f 	.word	0x1400823f
 c004300:	50020940 	.word	0x50020940

0c004304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c004304:	b480      	push	{r7}
 c004306:	b087      	sub	sp, #28
 c004308:	af00      	add	r7, sp, #0
 c00430a:	6078      	str	r0, [r7, #4]
 c00430c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c00430e:	2300      	movs	r3, #0
 c004310:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c004312:	e158      	b.n	c0045c6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c004314:	683b      	ldr	r3, [r7, #0]
 c004316:	681a      	ldr	r2, [r3, #0]
 c004318:	2101      	movs	r1, #1
 c00431a:	697b      	ldr	r3, [r7, #20]
 c00431c:	fa01 f303 	lsl.w	r3, r1, r3
 c004320:	4013      	ands	r3, r2
 c004322:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 c004324:	68fb      	ldr	r3, [r7, #12]
 c004326:	2b00      	cmp	r3, #0
 c004328:	f000 814a 	beq.w	c0045c0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c00432c:	683b      	ldr	r3, [r7, #0]
 c00432e:	685b      	ldr	r3, [r3, #4]
 c004330:	2b01      	cmp	r3, #1
 c004332:	d00b      	beq.n	c00434c <HAL_GPIO_Init+0x48>
 c004334:	683b      	ldr	r3, [r7, #0]
 c004336:	685b      	ldr	r3, [r3, #4]
 c004338:	2b02      	cmp	r3, #2
 c00433a:	d007      	beq.n	c00434c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c00433c:	683b      	ldr	r3, [r7, #0]
 c00433e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c004340:	2b11      	cmp	r3, #17
 c004342:	d003      	beq.n	c00434c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c004344:	683b      	ldr	r3, [r7, #0]
 c004346:	685b      	ldr	r3, [r3, #4]
 c004348:	2b12      	cmp	r3, #18
 c00434a:	d130      	bne.n	c0043ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c00434c:	687b      	ldr	r3, [r7, #4]
 c00434e:	689b      	ldr	r3, [r3, #8]
 c004350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c004352:	697b      	ldr	r3, [r7, #20]
 c004354:	005b      	lsls	r3, r3, #1
 c004356:	2203      	movs	r2, #3
 c004358:	fa02 f303 	lsl.w	r3, r2, r3
 c00435c:	43db      	mvns	r3, r3
 c00435e:	693a      	ldr	r2, [r7, #16]
 c004360:	4013      	ands	r3, r2
 c004362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c004364:	683b      	ldr	r3, [r7, #0]
 c004366:	68da      	ldr	r2, [r3, #12]
 c004368:	697b      	ldr	r3, [r7, #20]
 c00436a:	005b      	lsls	r3, r3, #1
 c00436c:	fa02 f303 	lsl.w	r3, r2, r3
 c004370:	693a      	ldr	r2, [r7, #16]
 c004372:	4313      	orrs	r3, r2
 c004374:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c004376:	687b      	ldr	r3, [r7, #4]
 c004378:	693a      	ldr	r2, [r7, #16]
 c00437a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c00437c:	687b      	ldr	r3, [r7, #4]
 c00437e:	685b      	ldr	r3, [r3, #4]
 c004380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c004382:	2201      	movs	r2, #1
 c004384:	697b      	ldr	r3, [r7, #20]
 c004386:	fa02 f303 	lsl.w	r3, r2, r3
 c00438a:	43db      	mvns	r3, r3
 c00438c:	693a      	ldr	r2, [r7, #16]
 c00438e:	4013      	ands	r3, r2
 c004390:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 c004392:	683b      	ldr	r3, [r7, #0]
 c004394:	685b      	ldr	r3, [r3, #4]
 c004396:	091b      	lsrs	r3, r3, #4
 c004398:	f003 0201 	and.w	r2, r3, #1
 c00439c:	697b      	ldr	r3, [r7, #20]
 c00439e:	fa02 f303 	lsl.w	r3, r2, r3
 c0043a2:	693a      	ldr	r2, [r7, #16]
 c0043a4:	4313      	orrs	r3, r2
 c0043a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c0043a8:	687b      	ldr	r3, [r7, #4]
 c0043aa:	693a      	ldr	r2, [r7, #16]
 c0043ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 c0043ae:	687b      	ldr	r3, [r7, #4]
 c0043b0:	68db      	ldr	r3, [r3, #12]
 c0043b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c0043b4:	697b      	ldr	r3, [r7, #20]
 c0043b6:	005b      	lsls	r3, r3, #1
 c0043b8:	2203      	movs	r2, #3
 c0043ba:	fa02 f303 	lsl.w	r3, r2, r3
 c0043be:	43db      	mvns	r3, r3
 c0043c0:	693a      	ldr	r2, [r7, #16]
 c0043c2:	4013      	ands	r3, r2
 c0043c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c0043c6:	683b      	ldr	r3, [r7, #0]
 c0043c8:	689a      	ldr	r2, [r3, #8]
 c0043ca:	697b      	ldr	r3, [r7, #20]
 c0043cc:	005b      	lsls	r3, r3, #1
 c0043ce:	fa02 f303 	lsl.w	r3, r2, r3
 c0043d2:	693a      	ldr	r2, [r7, #16]
 c0043d4:	4313      	orrs	r3, r2
 c0043d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 c0043d8:	687b      	ldr	r3, [r7, #4]
 c0043da:	693a      	ldr	r2, [r7, #16]
 c0043dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c0043de:	683b      	ldr	r3, [r7, #0]
 c0043e0:	685b      	ldr	r3, [r3, #4]
 c0043e2:	2b02      	cmp	r3, #2
 c0043e4:	d003      	beq.n	c0043ee <HAL_GPIO_Init+0xea>
 c0043e6:	683b      	ldr	r3, [r7, #0]
 c0043e8:	685b      	ldr	r3, [r3, #4]
 c0043ea:	2b12      	cmp	r3, #18
 c0043ec:	d123      	bne.n	c004436 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c0043ee:	697b      	ldr	r3, [r7, #20]
 c0043f0:	08da      	lsrs	r2, r3, #3
 c0043f2:	687b      	ldr	r3, [r7, #4]
 c0043f4:	3208      	adds	r2, #8
 c0043f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c0043fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c0043fc:	697b      	ldr	r3, [r7, #20]
 c0043fe:	f003 0307 	and.w	r3, r3, #7
 c004402:	009b      	lsls	r3, r3, #2
 c004404:	220f      	movs	r2, #15
 c004406:	fa02 f303 	lsl.w	r3, r2, r3
 c00440a:	43db      	mvns	r3, r3
 c00440c:	693a      	ldr	r2, [r7, #16]
 c00440e:	4013      	ands	r3, r2
 c004410:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c004412:	683b      	ldr	r3, [r7, #0]
 c004414:	691a      	ldr	r2, [r3, #16]
 c004416:	697b      	ldr	r3, [r7, #20]
 c004418:	f003 0307 	and.w	r3, r3, #7
 c00441c:	009b      	lsls	r3, r3, #2
 c00441e:	fa02 f303 	lsl.w	r3, r2, r3
 c004422:	693a      	ldr	r2, [r7, #16]
 c004424:	4313      	orrs	r3, r2
 c004426:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c004428:	697b      	ldr	r3, [r7, #20]
 c00442a:	08da      	lsrs	r2, r3, #3
 c00442c:	687b      	ldr	r3, [r7, #4]
 c00442e:	3208      	adds	r2, #8
 c004430:	6939      	ldr	r1, [r7, #16]
 c004432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c004436:	687b      	ldr	r3, [r7, #4]
 c004438:	681b      	ldr	r3, [r3, #0]
 c00443a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c00443c:	697b      	ldr	r3, [r7, #20]
 c00443e:	005b      	lsls	r3, r3, #1
 c004440:	2203      	movs	r2, #3
 c004442:	fa02 f303 	lsl.w	r3, r2, r3
 c004446:	43db      	mvns	r3, r3
 c004448:	693a      	ldr	r2, [r7, #16]
 c00444a:	4013      	ands	r3, r2
 c00444c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c00444e:	683b      	ldr	r3, [r7, #0]
 c004450:	685b      	ldr	r3, [r3, #4]
 c004452:	f003 0203 	and.w	r2, r3, #3
 c004456:	697b      	ldr	r3, [r7, #20]
 c004458:	005b      	lsls	r3, r3, #1
 c00445a:	fa02 f303 	lsl.w	r3, r2, r3
 c00445e:	693a      	ldr	r2, [r7, #16]
 c004460:	4313      	orrs	r3, r2
 c004462:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c004464:	687b      	ldr	r3, [r7, #4]
 c004466:	693a      	ldr	r2, [r7, #16]
 c004468:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c00446a:	683b      	ldr	r3, [r7, #0]
 c00446c:	685b      	ldr	r3, [r3, #4]
 c00446e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c004472:	2b00      	cmp	r3, #0
 c004474:	f000 80a4 	beq.w	c0045c0 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c004478:	4a5a      	ldr	r2, [pc, #360]	; (c0045e4 <HAL_GPIO_Init+0x2e0>)
 c00447a:	697b      	ldr	r3, [r7, #20]
 c00447c:	089b      	lsrs	r3, r3, #2
 c00447e:	3318      	adds	r3, #24
 c004480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c004484:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c004486:	697b      	ldr	r3, [r7, #20]
 c004488:	f003 0303 	and.w	r3, r3, #3
 c00448c:	00db      	lsls	r3, r3, #3
 c00448e:	220f      	movs	r2, #15
 c004490:	fa02 f303 	lsl.w	r3, r2, r3
 c004494:	43db      	mvns	r3, r3
 c004496:	693a      	ldr	r2, [r7, #16]
 c004498:	4013      	ands	r3, r2
 c00449a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c00449c:	687b      	ldr	r3, [r7, #4]
 c00449e:	4a52      	ldr	r2, [pc, #328]	; (c0045e8 <HAL_GPIO_Init+0x2e4>)
 c0044a0:	4293      	cmp	r3, r2
 c0044a2:	d025      	beq.n	c0044f0 <HAL_GPIO_Init+0x1ec>
 c0044a4:	687b      	ldr	r3, [r7, #4]
 c0044a6:	4a51      	ldr	r2, [pc, #324]	; (c0045ec <HAL_GPIO_Init+0x2e8>)
 c0044a8:	4293      	cmp	r3, r2
 c0044aa:	d01f      	beq.n	c0044ec <HAL_GPIO_Init+0x1e8>
 c0044ac:	687b      	ldr	r3, [r7, #4]
 c0044ae:	4a50      	ldr	r2, [pc, #320]	; (c0045f0 <HAL_GPIO_Init+0x2ec>)
 c0044b0:	4293      	cmp	r3, r2
 c0044b2:	d019      	beq.n	c0044e8 <HAL_GPIO_Init+0x1e4>
 c0044b4:	687b      	ldr	r3, [r7, #4]
 c0044b6:	4a4f      	ldr	r2, [pc, #316]	; (c0045f4 <HAL_GPIO_Init+0x2f0>)
 c0044b8:	4293      	cmp	r3, r2
 c0044ba:	d013      	beq.n	c0044e4 <HAL_GPIO_Init+0x1e0>
 c0044bc:	687b      	ldr	r3, [r7, #4]
 c0044be:	4a4e      	ldr	r2, [pc, #312]	; (c0045f8 <HAL_GPIO_Init+0x2f4>)
 c0044c0:	4293      	cmp	r3, r2
 c0044c2:	d00d      	beq.n	c0044e0 <HAL_GPIO_Init+0x1dc>
 c0044c4:	687b      	ldr	r3, [r7, #4]
 c0044c6:	4a4d      	ldr	r2, [pc, #308]	; (c0045fc <HAL_GPIO_Init+0x2f8>)
 c0044c8:	4293      	cmp	r3, r2
 c0044ca:	d007      	beq.n	c0044dc <HAL_GPIO_Init+0x1d8>
 c0044cc:	687b      	ldr	r3, [r7, #4]
 c0044ce:	4a4c      	ldr	r2, [pc, #304]	; (c004600 <HAL_GPIO_Init+0x2fc>)
 c0044d0:	4293      	cmp	r3, r2
 c0044d2:	d101      	bne.n	c0044d8 <HAL_GPIO_Init+0x1d4>
 c0044d4:	2306      	movs	r3, #6
 c0044d6:	e00c      	b.n	c0044f2 <HAL_GPIO_Init+0x1ee>
 c0044d8:	2307      	movs	r3, #7
 c0044da:	e00a      	b.n	c0044f2 <HAL_GPIO_Init+0x1ee>
 c0044dc:	2305      	movs	r3, #5
 c0044de:	e008      	b.n	c0044f2 <HAL_GPIO_Init+0x1ee>
 c0044e0:	2304      	movs	r3, #4
 c0044e2:	e006      	b.n	c0044f2 <HAL_GPIO_Init+0x1ee>
 c0044e4:	2303      	movs	r3, #3
 c0044e6:	e004      	b.n	c0044f2 <HAL_GPIO_Init+0x1ee>
 c0044e8:	2302      	movs	r3, #2
 c0044ea:	e002      	b.n	c0044f2 <HAL_GPIO_Init+0x1ee>
 c0044ec:	2301      	movs	r3, #1
 c0044ee:	e000      	b.n	c0044f2 <HAL_GPIO_Init+0x1ee>
 c0044f0:	2300      	movs	r3, #0
 c0044f2:	697a      	ldr	r2, [r7, #20]
 c0044f4:	f002 0203 	and.w	r2, r2, #3
 c0044f8:	00d2      	lsls	r2, r2, #3
 c0044fa:	4093      	lsls	r3, r2
 c0044fc:	693a      	ldr	r2, [r7, #16]
 c0044fe:	4313      	orrs	r3, r2
 c004500:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c004502:	4938      	ldr	r1, [pc, #224]	; (c0045e4 <HAL_GPIO_Init+0x2e0>)
 c004504:	697b      	ldr	r3, [r7, #20]
 c004506:	089b      	lsrs	r3, r3, #2
 c004508:	3318      	adds	r3, #24
 c00450a:	693a      	ldr	r2, [r7, #16]
 c00450c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 c004510:	4b34      	ldr	r3, [pc, #208]	; (c0045e4 <HAL_GPIO_Init+0x2e0>)
 c004512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c004516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c004518:	68fb      	ldr	r3, [r7, #12]
 c00451a:	43db      	mvns	r3, r3
 c00451c:	693a      	ldr	r2, [r7, #16]
 c00451e:	4013      	ands	r3, r2
 c004520:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c004522:	683b      	ldr	r3, [r7, #0]
 c004524:	685b      	ldr	r3, [r3, #4]
 c004526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c00452a:	2b00      	cmp	r3, #0
 c00452c:	d003      	beq.n	c004536 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 c00452e:	693a      	ldr	r2, [r7, #16]
 c004530:	68fb      	ldr	r3, [r7, #12]
 c004532:	4313      	orrs	r3, r2
 c004534:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c004536:	4a2b      	ldr	r2, [pc, #172]	; (c0045e4 <HAL_GPIO_Init+0x2e0>)
 c004538:	693b      	ldr	r3, [r7, #16]
 c00453a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 c00453e:	4b29      	ldr	r3, [pc, #164]	; (c0045e4 <HAL_GPIO_Init+0x2e0>)
 c004540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c004544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c004546:	68fb      	ldr	r3, [r7, #12]
 c004548:	43db      	mvns	r3, r3
 c00454a:	693a      	ldr	r2, [r7, #16]
 c00454c:	4013      	ands	r3, r2
 c00454e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c004550:	683b      	ldr	r3, [r7, #0]
 c004552:	685b      	ldr	r3, [r3, #4]
 c004554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c004558:	2b00      	cmp	r3, #0
 c00455a:	d003      	beq.n	c004564 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 c00455c:	693a      	ldr	r2, [r7, #16]
 c00455e:	68fb      	ldr	r3, [r7, #12]
 c004560:	4313      	orrs	r3, r2
 c004562:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c004564:	4a1f      	ldr	r2, [pc, #124]	; (c0045e4 <HAL_GPIO_Init+0x2e0>)
 c004566:	693b      	ldr	r3, [r7, #16]
 c004568:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c00456c:	4b1d      	ldr	r3, [pc, #116]	; (c0045e4 <HAL_GPIO_Init+0x2e0>)
 c00456e:	681b      	ldr	r3, [r3, #0]
 c004570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c004572:	68fb      	ldr	r3, [r7, #12]
 c004574:	43db      	mvns	r3, r3
 c004576:	693a      	ldr	r2, [r7, #16]
 c004578:	4013      	ands	r3, r2
 c00457a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c00457c:	683b      	ldr	r3, [r7, #0]
 c00457e:	685b      	ldr	r3, [r3, #4]
 c004580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c004584:	2b00      	cmp	r3, #0
 c004586:	d003      	beq.n	c004590 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 c004588:	693a      	ldr	r2, [r7, #16]
 c00458a:	68fb      	ldr	r3, [r7, #12]
 c00458c:	4313      	orrs	r3, r2
 c00458e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c004590:	4a14      	ldr	r2, [pc, #80]	; (c0045e4 <HAL_GPIO_Init+0x2e0>)
 c004592:	693b      	ldr	r3, [r7, #16]
 c004594:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c004596:	4b13      	ldr	r3, [pc, #76]	; (c0045e4 <HAL_GPIO_Init+0x2e0>)
 c004598:	685b      	ldr	r3, [r3, #4]
 c00459a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c00459c:	68fb      	ldr	r3, [r7, #12]
 c00459e:	43db      	mvns	r3, r3
 c0045a0:	693a      	ldr	r2, [r7, #16]
 c0045a2:	4013      	ands	r3, r2
 c0045a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c0045a6:	683b      	ldr	r3, [r7, #0]
 c0045a8:	685b      	ldr	r3, [r3, #4]
 c0045aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c0045ae:	2b00      	cmp	r3, #0
 c0045b0:	d003      	beq.n	c0045ba <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 c0045b2:	693a      	ldr	r2, [r7, #16]
 c0045b4:	68fb      	ldr	r3, [r7, #12]
 c0045b6:	4313      	orrs	r3, r2
 c0045b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c0045ba:	4a0a      	ldr	r2, [pc, #40]	; (c0045e4 <HAL_GPIO_Init+0x2e0>)
 c0045bc:	693b      	ldr	r3, [r7, #16]
 c0045be:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 c0045c0:	697b      	ldr	r3, [r7, #20]
 c0045c2:	3301      	adds	r3, #1
 c0045c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c0045c6:	683b      	ldr	r3, [r7, #0]
 c0045c8:	681a      	ldr	r2, [r3, #0]
 c0045ca:	697b      	ldr	r3, [r7, #20]
 c0045cc:	fa22 f303 	lsr.w	r3, r2, r3
 c0045d0:	2b00      	cmp	r3, #0
 c0045d2:	f47f ae9f 	bne.w	c004314 <HAL_GPIO_Init+0x10>
  }
}
 c0045d6:	bf00      	nop
 c0045d8:	bf00      	nop
 c0045da:	371c      	adds	r7, #28
 c0045dc:	46bd      	mov	sp, r7
 c0045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0045e2:	4770      	bx	lr
 c0045e4:	5002f400 	.word	0x5002f400
 c0045e8:	52020000 	.word	0x52020000
 c0045ec:	52020400 	.word	0x52020400
 c0045f0:	52020800 	.word	0x52020800
 c0045f4:	52020c00 	.word	0x52020c00
 c0045f8:	52021000 	.word	0x52021000
 c0045fc:	52021400 	.word	0x52021400
 c004600:	52021800 	.word	0x52021800

0c004604 <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c004604:	b480      	push	{r7}
 c004606:	b085      	sub	sp, #20
 c004608:	af00      	add	r7, sp, #0
 c00460a:	6078      	str	r0, [r7, #4]
 c00460c:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c00460e:	683b      	ldr	r3, [r7, #0]
 c004610:	f5b3 7f41 	cmp.w	r3, #772	; 0x304
 c004614:	d216      	bcs.n	c004644 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c004616:	687b      	ldr	r3, [r7, #4]
 c004618:	0f1b      	lsrs	r3, r3, #28
 c00461a:	015a      	lsls	r2, r3, #5
 c00461c:	687b      	ldr	r3, [r7, #4]
 c00461e:	f003 031f 	and.w	r3, r3, #31
 c004622:	4413      	add	r3, r2
 c004624:	2b32      	cmp	r3, #50	; 0x32
 c004626:	d80d      	bhi.n	c004644 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c004628:	687b      	ldr	r3, [r7, #4]
 c00462a:	f003 0320 	and.w	r3, r3, #32
 c00462e:	2b00      	cmp	r3, #0
 c004630:	d00a      	beq.n	c004648 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
 c004632:	687b      	ldr	r3, [r7, #4]
 c004634:	0f1b      	lsrs	r3, r3, #28
 c004636:	015a      	lsls	r2, r3, #5
 c004638:	687b      	ldr	r3, [r7, #4]
 c00463a:	f003 031f 	and.w	r3, r3, #31
 c00463e:	4413      	add	r3, r2
 c004640:	2b00      	cmp	r3, #0
 c004642:	d001      	beq.n	c004648 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
  {
    return HAL_ERROR;
 c004644:	2301      	movs	r3, #1
 c004646:	e0a4      	b.n	c004792 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18e>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c004648:	687b      	ldr	r3, [r7, #4]
 c00464a:	f003 0320 	and.w	r3, r3, #32
 c00464e:	2b00      	cmp	r3, #0
 c004650:	d04a      	beq.n	c0046e8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xe4>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c004652:	683a      	ldr	r2, [r7, #0]
 c004654:	f240 1301 	movw	r3, #257	; 0x101
 c004658:	4013      	ands	r3, r2
 c00465a:	f240 1201 	movw	r2, #257	; 0x101
 c00465e:	4293      	cmp	r3, r2
 c004660:	d10c      	bne.n	c00467c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x78>
    {
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c004662:	4b4f      	ldr	r3, [pc, #316]	; (c0047a0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c004664:	691b      	ldr	r3, [r3, #16]
 c004666:	4b4e      	ldr	r3, [pc, #312]	; (c0047a0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c004668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c00466c:	611a      	str	r2, [r3, #16]
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c00466e:	4b4c      	ldr	r3, [pc, #304]	; (c0047a0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c004670:	695a      	ldr	r2, [r3, #20]
 c004672:	494b      	ldr	r1, [pc, #300]	; (c0047a0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c004674:	4b4b      	ldr	r3, [pc, #300]	; (c0047a4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a0>)
 c004676:	4313      	orrs	r3, r2
 c004678:	614b      	str	r3, [r1, #20]
 c00467a:	e00f      	b.n	c00469c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c00467c:	683b      	ldr	r3, [r7, #0]
 c00467e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c004682:	2b00      	cmp	r3, #0
 c004684:	d00a      	beq.n	c00469c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
    {
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c004686:	4b46      	ldr	r3, [pc, #280]	; (c0047a0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c004688:	691b      	ldr	r3, [r3, #16]
 c00468a:	4b45      	ldr	r3, [pc, #276]	; (c0047a0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c00468c:	2200      	movs	r2, #0
 c00468e:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c004690:	4b43      	ldr	r3, [pc, #268]	; (c0047a0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c004692:	695a      	ldr	r2, [r3, #20]
 c004694:	4942      	ldr	r1, [pc, #264]	; (c0047a0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c004696:	4b44      	ldr	r3, [pc, #272]	; (c0047a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c004698:	4013      	ands	r3, r2
 c00469a:	614b      	str	r3, [r1, #20]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c00469c:	683a      	ldr	r2, [r7, #0]
 c00469e:	f240 2302 	movw	r3, #514	; 0x202
 c0046a2:	4013      	ands	r3, r2
 c0046a4:	f240 2202 	movw	r2, #514	; 0x202
 c0046a8:	4293      	cmp	r3, r2
 c0046aa:	d10c      	bne.n	c0046c6 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xc2>
    {
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c0046ac:	4b3c      	ldr	r3, [pc, #240]	; (c0047a0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0046ae:	6a1b      	ldr	r3, [r3, #32]
 c0046b0:	4b3b      	ldr	r3, [pc, #236]	; (c0047a0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0046b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c0046b6:	621a      	str	r2, [r3, #32]
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c0046b8:	4b39      	ldr	r3, [pc, #228]	; (c0047a0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0046ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0046bc:	4938      	ldr	r1, [pc, #224]	; (c0047a0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0046be:	4b39      	ldr	r3, [pc, #228]	; (c0047a4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a0>)
 c0046c0:	4313      	orrs	r3, r2
 c0046c2:	624b      	str	r3, [r1, #36]	; 0x24
 c0046c4:	e064      	b.n	c004790 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c0046c6:	683b      	ldr	r3, [r7, #0]
 c0046c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c0046cc:	2b00      	cmp	r3, #0
 c0046ce:	d05f      	beq.n	c004790 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    {
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c0046d0:	4b33      	ldr	r3, [pc, #204]	; (c0047a0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0046d2:	6a1b      	ldr	r3, [r3, #32]
 c0046d4:	4b32      	ldr	r3, [pc, #200]	; (c0047a0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0046d6:	2200      	movs	r2, #0
 c0046d8:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c0046da:	4b31      	ldr	r3, [pc, #196]	; (c0047a0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0046dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0046de:	4930      	ldr	r1, [pc, #192]	; (c0047a0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x19c>)
 c0046e0:	4b31      	ldr	r3, [pc, #196]	; (c0047a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0046e2:	4013      	ands	r3, r2
 c0046e4:	624b      	str	r3, [r1, #36]	; 0x24
 c0046e6:	e053      	b.n	c004790 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
  {
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c0046e8:	687b      	ldr	r3, [r7, #4]
 c0046ea:	0f1a      	lsrs	r2, r3, #28
 c0046ec:	4b2f      	ldr	r3, [pc, #188]	; (c0047ac <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a8>)
 c0046ee:	4413      	add	r3, r2
 c0046f0:	009b      	lsls	r3, r3, #2
 c0046f2:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c0046f4:	683a      	ldr	r2, [r7, #0]
 c0046f6:	f240 1301 	movw	r3, #257	; 0x101
 c0046fa:	4013      	ands	r3, r2
 c0046fc:	f240 1201 	movw	r2, #257	; 0x101
 c004700:	4293      	cmp	r3, r2
 c004702:	d10a      	bne.n	c00471a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x116>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c004704:	68fb      	ldr	r3, [r7, #12]
 c004706:	6819      	ldr	r1, [r3, #0]
 c004708:	687b      	ldr	r3, [r7, #4]
 c00470a:	f003 031f 	and.w	r3, r3, #31
 c00470e:	2201      	movs	r2, #1
 c004710:	409a      	lsls	r2, r3
 c004712:	68fb      	ldr	r3, [r7, #12]
 c004714:	430a      	orrs	r2, r1
 c004716:	601a      	str	r2, [r3, #0]
 c004718:	e010      	b.n	c00473c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x138>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c00471a:	683b      	ldr	r3, [r7, #0]
 c00471c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c004720:	2b00      	cmp	r3, #0
 c004722:	d00b      	beq.n	c00473c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x138>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c004724:	68fb      	ldr	r3, [r7, #12]
 c004726:	6819      	ldr	r1, [r3, #0]
 c004728:	687b      	ldr	r3, [r7, #4]
 c00472a:	f003 031f 	and.w	r3, r3, #31
 c00472e:	2201      	movs	r2, #1
 c004730:	fa02 f303 	lsl.w	r3, r2, r3
 c004734:	43da      	mvns	r2, r3
 c004736:	68fb      	ldr	r3, [r7, #12]
 c004738:	400a      	ands	r2, r1
 c00473a:	601a      	str	r2, [r3, #0]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(GTZC_TZSC->PRIVCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c00473c:	687b      	ldr	r3, [r7, #4]
 c00473e:	0f1a      	lsrs	r2, r3, #28
 c004740:	4b1b      	ldr	r3, [pc, #108]	; (c0047b0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1ac>)
 c004742:	4413      	add	r3, r2
 c004744:	009b      	lsls	r3, r3, #2
 c004746:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c004748:	683a      	ldr	r2, [r7, #0]
 c00474a:	f240 2302 	movw	r3, #514	; 0x202
 c00474e:	4013      	ands	r3, r2
 c004750:	f240 2202 	movw	r2, #514	; 0x202
 c004754:	4293      	cmp	r3, r2
 c004756:	d10a      	bne.n	c00476e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x16a>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c004758:	68fb      	ldr	r3, [r7, #12]
 c00475a:	6819      	ldr	r1, [r3, #0]
 c00475c:	687b      	ldr	r3, [r7, #4]
 c00475e:	f003 031f 	and.w	r3, r3, #31
 c004762:	2201      	movs	r2, #1
 c004764:	409a      	lsls	r2, r3
 c004766:	68fb      	ldr	r3, [r7, #12]
 c004768:	430a      	orrs	r2, r1
 c00476a:	601a      	str	r2, [r3, #0]
 c00476c:	e010      	b.n	c004790 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c00476e:	683b      	ldr	r3, [r7, #0]
 c004770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c004774:	2b00      	cmp	r3, #0
 c004776:	d00b      	beq.n	c004790 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x18c>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c004778:	68fb      	ldr	r3, [r7, #12]
 c00477a:	6819      	ldr	r1, [r3, #0]
 c00477c:	687b      	ldr	r3, [r7, #4]
 c00477e:	f003 031f 	and.w	r3, r3, #31
 c004782:	2201      	movs	r2, #1
 c004784:	fa02 f303 	lsl.w	r3, r2, r3
 c004788:	43da      	mvns	r2, r3
 c00478a:	68fb      	ldr	r3, [r7, #12]
 c00478c:	400a      	ands	r2, r1
 c00478e:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c004790:	2300      	movs	r3, #0
}
 c004792:	4618      	mov	r0, r3
 c004794:	3714      	adds	r7, #20
 c004796:	46bd      	mov	sp, r7
 c004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00479c:	4770      	bx	lr
 c00479e:	bf00      	nop
 c0047a0:	50032400 	.word	0x50032400
 c0047a4:	00076fff 	.word	0x00076fff
 c0047a8:	fff89000 	.word	0xfff89000
 c0047ac:	1400c904 	.word	0x1400c904
 c0047b0:	1400c908 	.word	0x1400c908

0c0047b4 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c0047b4:	b480      	push	{r7}
 c0047b6:	b089      	sub	sp, #36	; 0x24
 c0047b8:	af00      	add	r7, sp, #0
 c0047ba:	6078      	str	r0, [r7, #4]
 c0047bc:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0047be:	687b      	ldr	r3, [r7, #4]
 c0047c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c0047c4:	d00b      	beq.n	c0047de <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c0047c6:	687b      	ldr	r3, [r7, #4]
 c0047c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0047cc:	d007      	beq.n	c0047de <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c0047ce:	687b      	ldr	r3, [r7, #4]
 c0047d0:	4a36      	ldr	r2, [pc, #216]	; (c0048ac <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c0047d2:	4293      	cmp	r3, r2
 c0047d4:	d003      	beq.n	c0047de <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c0047d6:	687b      	ldr	r3, [r7, #4]
 c0047d8:	4a35      	ldr	r2, [pc, #212]	; (c0048b0 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c0047da:	4293      	cmp	r3, r2
 c0047dc:	d111      	bne.n	c004802 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c0047de:	683b      	ldr	r3, [r7, #0]
 c0047e0:	681b      	ldr	r3, [r3, #0]
 c0047e2:	2b00      	cmp	r3, #0
 c0047e4:	d004      	beq.n	c0047f0 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c0047e6:	683b      	ldr	r3, [r7, #0]
 c0047e8:	681b      	ldr	r3, [r3, #0]
 c0047ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c0047ee:	d108      	bne.n	c004802 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c0047f0:	683b      	ldr	r3, [r7, #0]
 c0047f2:	685b      	ldr	r3, [r3, #4]
 c0047f4:	2b00      	cmp	r3, #0
 c0047f6:	d006      	beq.n	c004806 <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c0047f8:	683b      	ldr	r3, [r7, #0]
 c0047fa:	685b      	ldr	r3, [r3, #4]
 c0047fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c004800:	d001      	beq.n	c004806 <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c004802:	2301      	movs	r3, #1
 c004804:	e04b      	b.n	c00489e <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c004806:	683b      	ldr	r3, [r7, #0]
 c004808:	685b      	ldr	r3, [r3, #4]
 c00480a:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c00480c:	683b      	ldr	r3, [r7, #0]
 c00480e:	681b      	ldr	r3, [r3, #0]
 c004810:	693a      	ldr	r2, [r7, #16]
 c004812:	4313      	orrs	r3, r2
 c004814:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c004816:	687b      	ldr	r3, [r7, #4]
 c004818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c00481c:	d003      	beq.n	c004826 <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c00481e:	687b      	ldr	r3, [r7, #4]
 c004820:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c004824:	d105      	bne.n	c004832 <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c004826:	4b23      	ldr	r3, [pc, #140]	; (c0048b4 <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c004828:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c00482a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c00482e:	61bb      	str	r3, [r7, #24]
 c004830:	e004      	b.n	c00483c <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c004832:	4b21      	ldr	r3, [pc, #132]	; (c0048b8 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c004834:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c004836:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c00483a:	61bb      	str	r3, [r7, #24]
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c00483c:	69fb      	ldr	r3, [r7, #28]
 c00483e:	681b      	ldr	r3, [r3, #0]
 c004840:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c004844:	693b      	ldr	r3, [r7, #16]
 c004846:	431a      	orrs	r2, r3
 c004848:	69fb      	ldr	r3, [r7, #28]
 c00484a:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);
  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c00484c:	69bb      	ldr	r3, [r7, #24]
 c00484e:	0b5b      	lsrs	r3, r3, #13
 c004850:	2201      	movs	r2, #1
 c004852:	fa02 f303 	lsl.w	r3, r2, r3
 c004856:	3b01      	subs	r3, #1
 c004858:	60fb      	str	r3, [r7, #12]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c00485a:	69fb      	ldr	r3, [r7, #28]
 c00485c:	691a      	ldr	r2, [r3, #16]
 c00485e:	68fb      	ldr	r3, [r7, #12]
 c004860:	43db      	mvns	r3, r3
 c004862:	401a      	ands	r2, r3
 c004864:	683b      	ldr	r3, [r7, #0]
 c004866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c004868:	431a      	orrs	r2, r3
 c00486a:	69fb      	ldr	r3, [r7, #28]
 c00486c:	611a      	str	r2, [r3, #16]

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c00486e:	69bb      	ldr	r3, [r7, #24]
 c004870:	0b5b      	lsrs	r3, r3, #13
 c004872:	60bb      	str	r3, [r7, #8]
  for (i = 0U; i < size_in_superblocks; i++)
 c004874:	2300      	movs	r3, #0
 c004876:	617b      	str	r3, [r7, #20]
 c004878:	e00c      	b.n	c004894 <HAL_GTZC_MPCBB_ConfigMem+0xe0>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c00487a:	683b      	ldr	r3, [r7, #0]
 c00487c:	697a      	ldr	r2, [r7, #20]
 c00487e:	3202      	adds	r2, #2
 c004880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c004884:	69fb      	ldr	r3, [r7, #28]
 c004886:	697a      	ldr	r2, [r7, #20]
 c004888:	3240      	adds	r2, #64	; 0x40
 c00488a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c00488e:	697b      	ldr	r3, [r7, #20]
 c004890:	3301      	adds	r3, #1
 c004892:	617b      	str	r3, [r7, #20]
 c004894:	697a      	ldr	r2, [r7, #20]
 c004896:	68bb      	ldr	r3, [r7, #8]
 c004898:	429a      	cmp	r2, r3
 c00489a:	d3ee      	bcc.n	c00487a <HAL_GTZC_MPCBB_ConfigMem+0xc6>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  return HAL_OK;
 c00489c:	2300      	movs	r3, #0
}
 c00489e:	4618      	mov	r0, r3
 c0048a0:	3724      	adds	r7, #36	; 0x24
 c0048a2:	46bd      	mov	sp, r7
 c0048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0048a8:	4770      	bx	lr
 c0048aa:	bf00      	nop
 c0048ac:	20030000 	.word	0x20030000
 c0048b0:	30030000 	.word	0x30030000
 c0048b4:	50032c00 	.word	0x50032c00
 c0048b8:	50033000 	.word	0x50033000

0c0048bc <HAL_GTZC_TZIC_EnableIT>:
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId.
  *         Use GTZC_PERIPH_ALL to select all peripherals.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZIC_EnableIT(uint32_t PeriphId)
{
 c0048bc:	b480      	push	{r7}
 c0048be:	b085      	sub	sp, #20
 c0048c0:	af00      	add	r7, sp, #0
 c0048c2:	6078      	str	r0, [r7, #4]
  uint32_t register_address;

  /* check entry parameters */
  if ((HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZIC_PERIPH_NUMBER)
 c0048c4:	687b      	ldr	r3, [r7, #4]
 c0048c6:	0f1b      	lsrs	r3, r3, #28
 c0048c8:	015a      	lsls	r2, r3, #5
 c0048ca:	687b      	ldr	r3, [r7, #4]
 c0048cc:	f003 031f 	and.w	r3, r3, #31
 c0048d0:	4413      	add	r3, r2
 c0048d2:	2b47      	cmp	r3, #71	; 0x47
 c0048d4:	d80d      	bhi.n	c0048f2 <HAL_GTZC_TZIC_EnableIT+0x36>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c0048d6:	687b      	ldr	r3, [r7, #4]
 c0048d8:	f003 0320 	and.w	r3, r3, #32
 c0048dc:	2b00      	cmp	r3, #0
 c0048de:	d00a      	beq.n	c0048f6 <HAL_GTZC_TZIC_EnableIT+0x3a>
 c0048e0:	687b      	ldr	r3, [r7, #4]
 c0048e2:	0f1b      	lsrs	r3, r3, #28
 c0048e4:	015a      	lsls	r2, r3, #5
 c0048e6:	687b      	ldr	r3, [r7, #4]
 c0048e8:	f003 031f 	and.w	r3, r3, #31
 c0048ec:	4413      	add	r3, r2
 c0048ee:	2b00      	cmp	r3, #0
 c0048f0:	d001      	beq.n	c0048f6 <HAL_GTZC_TZIC_EnableIT+0x3a>
  {
    return HAL_ERROR;
 c0048f2:	2301      	movs	r3, #1
 c0048f4:	e022      	b.n	c00493c <HAL_GTZC_TZIC_EnableIT+0x80>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c0048f6:	687b      	ldr	r3, [r7, #4]
 c0048f8:	f003 0320 	and.w	r3, r3, #32
 c0048fc:	2b00      	cmp	r3, #0
 c0048fe:	d00a      	beq.n	c004916 <HAL_GTZC_TZIC_EnableIT+0x5a>
  {
    /* same configuration is applied to all peripherals */
    WRITE_REG(GTZC_TZIC->IER1, TZIC_IER1_ALL);
 c004900:	4b11      	ldr	r3, [pc, #68]	; (c004948 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c004902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c004906:	601a      	str	r2, [r3, #0]
    WRITE_REG(GTZC_TZIC->IER2, TZIC_IER2_ALL);
 c004908:	4b0f      	ldr	r3, [pc, #60]	; (c004948 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c00490a:	4a10      	ldr	r2, [pc, #64]	; (c00494c <HAL_GTZC_TZIC_EnableIT+0x90>)
 c00490c:	605a      	str	r2, [r3, #4]
    WRITE_REG(GTZC_TZIC->IER3, TZIC_IER3_ALL);
 c00490e:	4b0e      	ldr	r3, [pc, #56]	; (c004948 <HAL_GTZC_TZIC_EnableIT+0x8c>)
 c004910:	22ff      	movs	r2, #255	; 0xff
 c004912:	609a      	str	r2, [r3, #8]
 c004914:	e011      	b.n	c00493a <HAL_GTZC_TZIC_EnableIT+0x7e>
  }
  else
  {
    /* common case where only one peripheral is configured */
    register_address = (uint32_t) &(GTZC_TZIC->IER1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c004916:	687b      	ldr	r3, [r7, #4]
 c004918:	0f1b      	lsrs	r3, r3, #28
 c00491a:	f103 53a0 	add.w	r3, r3, #335544320	; 0x14000000
 c00491e:	f503 434a 	add.w	r3, r3, #51712	; 0xca00
 c004922:	009b      	lsls	r3, r3, #2
 c004924:	60fb      	str	r3, [r7, #12]
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c004926:	68fb      	ldr	r3, [r7, #12]
 c004928:	6819      	ldr	r1, [r3, #0]
 c00492a:	687b      	ldr	r3, [r7, #4]
 c00492c:	f003 031f 	and.w	r3, r3, #31
 c004930:	2201      	movs	r2, #1
 c004932:	409a      	lsls	r2, r3
 c004934:	68fb      	ldr	r3, [r7, #12]
 c004936:	430a      	orrs	r2, r1
 c004938:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 c00493a:	2300      	movs	r3, #0
}
 c00493c:	4618      	mov	r0, r3
 c00493e:	3714      	adds	r7, #20
 c004940:	46bd      	mov	sp, r7
 c004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004946:	4770      	bx	lr
 c004948:	50032800 	.word	0x50032800
 c00494c:	3fff6fff 	.word	0x3fff6fff

0c004950 <HAL_GTZC_IRQHandler>:
/**
  * @brief  This function handles GTZC interrupt request.
  * @retval None.
  */
void HAL_GTZC_IRQHandler(void)
{
 c004950:	b580      	push	{r7, lr}
 c004952:	b084      	sub	sp, #16
 c004954:	af00      	add	r7, sp, #0
  uint32_t flag;
  uint32_t ier_itsources;
  uint32_t sr_flags;

  /* Get current IT Flags and IT sources value on 1st register */
  ier_itsources = READ_REG(GTZC_TZIC->IER1);
 c004956:	4b3f      	ldr	r3, [pc, #252]	; (c004a54 <HAL_GTZC_IRQHandler+0x104>)
 c004958:	681b      	ldr	r3, [r3, #0]
 c00495a:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR1);
 c00495c:	4b3d      	ldr	r3, [pc, #244]	; (c004a54 <HAL_GTZC_IRQHandler+0x104>)
 c00495e:	691b      	ldr	r3, [r3, #16]
 c004960:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c004962:	68ba      	ldr	r2, [r7, #8]
 c004964:	687b      	ldr	r3, [r7, #4]
 c004966:	4013      	ands	r3, r2
 c004968:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c00496a:	683b      	ldr	r3, [r7, #0]
 c00496c:	2b00      	cmp	r3, #0
 c00496e:	d019      	beq.n	c0049a4 <HAL_GTZC_IRQHandler+0x54>
  {
    WRITE_REG(GTZC_TZIC->FCR1, flag);
 c004970:	4a38      	ldr	r2, [pc, #224]	; (c004a54 <HAL_GTZC_IRQHandler+0x104>)
 c004972:	683b      	ldr	r3, [r7, #0]
 c004974:	6213      	str	r3, [r2, #32]

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c004976:	2300      	movs	r3, #0
 c004978:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c00497a:	e00d      	b.n	c004998 <HAL_GTZC_IRQHandler+0x48>
    {
      if ((flag & (1UL << position)) != 0U)
 c00497c:	683a      	ldr	r2, [r7, #0]
 c00497e:	68fb      	ldr	r3, [r7, #12]
 c004980:	fa22 f303 	lsr.w	r3, r2, r3
 c004984:	f003 0301 	and.w	r3, r3, #1
 c004988:	2b00      	cmp	r3, #0
 c00498a:	d002      	beq.n	c004992 <HAL_GTZC_IRQHandler+0x42>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG1 | position);
 c00498c:	68f8      	ldr	r0, [r7, #12]
 c00498e:	f000 f863 	bl	c004a58 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c004992:	68fb      	ldr	r3, [r7, #12]
 c004994:	3301      	adds	r3, #1
 c004996:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c004998:	683a      	ldr	r2, [r7, #0]
 c00499a:	68fb      	ldr	r3, [r7, #12]
 c00499c:	fa22 f303 	lsr.w	r3, r2, r3
 c0049a0:	2b00      	cmp	r3, #0
 c0049a2:	d1eb      	bne.n	c00497c <HAL_GTZC_IRQHandler+0x2c>
    }
  }

  /* Get current IT Flags and IT sources value on 2nd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER2);
 c0049a4:	4b2b      	ldr	r3, [pc, #172]	; (c004a54 <HAL_GTZC_IRQHandler+0x104>)
 c0049a6:	685b      	ldr	r3, [r3, #4]
 c0049a8:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR2);
 c0049aa:	4b2a      	ldr	r3, [pc, #168]	; (c004a54 <HAL_GTZC_IRQHandler+0x104>)
 c0049ac:	695b      	ldr	r3, [r3, #20]
 c0049ae:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c0049b0:	68ba      	ldr	r2, [r7, #8]
 c0049b2:	687b      	ldr	r3, [r7, #4]
 c0049b4:	4013      	ands	r3, r2
 c0049b6:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c0049b8:	683b      	ldr	r3, [r7, #0]
 c0049ba:	2b00      	cmp	r3, #0
 c0049bc:	d01c      	beq.n	c0049f8 <HAL_GTZC_IRQHandler+0xa8>
  {
    WRITE_REG(GTZC_TZIC->FCR2, flag);
 c0049be:	4a25      	ldr	r2, [pc, #148]	; (c004a54 <HAL_GTZC_IRQHandler+0x104>)
 c0049c0:	683b      	ldr	r3, [r7, #0]
 c0049c2:	6253      	str	r3, [r2, #36]	; 0x24

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c0049c4:	2300      	movs	r3, #0
 c0049c6:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0049c8:	e010      	b.n	c0049ec <HAL_GTZC_IRQHandler+0x9c>
    {
      if ((flag & (1UL << position)) != 0U)
 c0049ca:	683a      	ldr	r2, [r7, #0]
 c0049cc:	68fb      	ldr	r3, [r7, #12]
 c0049ce:	fa22 f303 	lsr.w	r3, r2, r3
 c0049d2:	f003 0301 	and.w	r3, r3, #1
 c0049d6:	2b00      	cmp	r3, #0
 c0049d8:	d005      	beq.n	c0049e6 <HAL_GTZC_IRQHandler+0x96>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG2 | position);
 c0049da:	68fb      	ldr	r3, [r7, #12]
 c0049dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0049e0:	4618      	mov	r0, r3
 c0049e2:	f000 f839 	bl	c004a58 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c0049e6:	68fb      	ldr	r3, [r7, #12]
 c0049e8:	3301      	adds	r3, #1
 c0049ea:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0049ec:	683a      	ldr	r2, [r7, #0]
 c0049ee:	68fb      	ldr	r3, [r7, #12]
 c0049f0:	fa22 f303 	lsr.w	r3, r2, r3
 c0049f4:	2b00      	cmp	r3, #0
 c0049f6:	d1e8      	bne.n	c0049ca <HAL_GTZC_IRQHandler+0x7a>
    }
  }

  /* Get current IT Flags and IT sources value on 3rd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER3);
 c0049f8:	4b16      	ldr	r3, [pc, #88]	; (c004a54 <HAL_GTZC_IRQHandler+0x104>)
 c0049fa:	689b      	ldr	r3, [r3, #8]
 c0049fc:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR3);
 c0049fe:	4b15      	ldr	r3, [pc, #84]	; (c004a54 <HAL_GTZC_IRQHandler+0x104>)
 c004a00:	699b      	ldr	r3, [r3, #24]
 c004a02:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c004a04:	68ba      	ldr	r2, [r7, #8]
 c004a06:	687b      	ldr	r3, [r7, #4]
 c004a08:	4013      	ands	r3, r2
 c004a0a:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c004a0c:	683b      	ldr	r3, [r7, #0]
 c004a0e:	2b00      	cmp	r3, #0
 c004a10:	d01c      	beq.n	c004a4c <HAL_GTZC_IRQHandler+0xfc>
  {
    WRITE_REG(GTZC_TZIC->FCR3, flag);
 c004a12:	4a10      	ldr	r2, [pc, #64]	; (c004a54 <HAL_GTZC_IRQHandler+0x104>)
 c004a14:	683b      	ldr	r3, [r7, #0]
 c004a16:	6293      	str	r3, [r2, #40]	; 0x28

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c004a18:	2300      	movs	r3, #0
 c004a1a:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c004a1c:	e010      	b.n	c004a40 <HAL_GTZC_IRQHandler+0xf0>
    {
      if ((flag & (1UL << position)) != 0U)
 c004a1e:	683a      	ldr	r2, [r7, #0]
 c004a20:	68fb      	ldr	r3, [r7, #12]
 c004a22:	fa22 f303 	lsr.w	r3, r2, r3
 c004a26:	f003 0301 	and.w	r3, r3, #1
 c004a2a:	2b00      	cmp	r3, #0
 c004a2c:	d005      	beq.n	c004a3a <HAL_GTZC_IRQHandler+0xea>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG3 | position);
 c004a2e:	68fb      	ldr	r3, [r7, #12]
 c004a30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 c004a34:	4618      	mov	r0, r3
 c004a36:	f000 f80f 	bl	c004a58 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c004a3a:	68fb      	ldr	r3, [r7, #12]
 c004a3c:	3301      	adds	r3, #1
 c004a3e:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c004a40:	683a      	ldr	r2, [r7, #0]
 c004a42:	68fb      	ldr	r3, [r7, #12]
 c004a44:	fa22 f303 	lsr.w	r3, r2, r3
 c004a48:	2b00      	cmp	r3, #0
 c004a4a:	d1e8      	bne.n	c004a1e <HAL_GTZC_IRQHandler+0xce>
    }
  }
}
 c004a4c:	bf00      	nop
 c004a4e:	3710      	adds	r7, #16
 c004a50:	46bd      	mov	sp, r7
 c004a52:	bd80      	pop	{r7, pc}
 c004a54:	50032800 	.word	0x50032800

0c004a58 <HAL_GTZC_TZIC_Callback>:
  * @param  PeriphId Peripheral identifier triggering the illegal access.
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId
  * @retval None.
  */
__weak void HAL_GTZC_TZIC_Callback(uint32_t PeriphId)
{
 c004a58:	b480      	push	{r7}
 c004a5a:	b083      	sub	sp, #12
 c004a5c:	af00      	add	r7, sp, #0
 c004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(PeriphId);

  /* NOTE: This function should not be modified. When the callback is needed,
   * the HAL_GTZC_TZIC_Callback is to be implemented in the user file
   */
}
 c004a60:	bf00      	nop
 c004a62:	370c      	adds	r7, #12
 c004a64:	46bd      	mov	sp, r7
 c004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004a6a:	4770      	bx	lr

0c004a6c <HAL_PWR_ConfigAttributes>:
  *            @arg @ref PWR_SEC          Secure-only access
  *            @arg @ref PWR_NSEC         Secure/Non-secure access
  * @retval None
  */
void HAL_PWR_ConfigAttributes(uint32_t Item, uint32_t Attributes)
{
 c004a6c:	b480      	push	{r7}
 c004a6e:	b083      	sub	sp, #12
 c004a70:	af00      	add	r7, sp, #0
 c004a72:	6078      	str	r0, [r7, #4]
 c004a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_PWR_ITEMS_ATTRIBUTES(Item));
  assert_param(IS_PWR_ATTRIBUTES(Attributes));

  /* Privilege/non-privilege attribute */
  if ((Attributes & PWR_PRIV) == PWR_PRIV)
 c004a76:	683a      	ldr	r2, [r7, #0]
 c004a78:	f240 2302 	movw	r3, #514	; 0x202
 c004a7c:	4013      	ands	r3, r2
 c004a7e:	f240 2202 	movw	r2, #514	; 0x202
 c004a82:	4293      	cmp	r3, r2
 c004a84:	d108      	bne.n	c004a98 <HAL_PWR_ConfigAttributes+0x2c>
  {
    SET_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_PRIV);
 c004a86:	4b1b      	ldr	r3, [pc, #108]	; (c004af4 <HAL_PWR_ConfigAttributes+0x88>)
 c004a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c004a8c:	4a19      	ldr	r2, [pc, #100]	; (c004af4 <HAL_PWR_ConfigAttributes+0x88>)
 c004a8e:	f043 0301 	orr.w	r3, r3, #1
 c004a92:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 c004a96:	e00c      	b.n	c004ab2 <HAL_PWR_ConfigAttributes+0x46>
  }
  else if ((Attributes & PWR_NPRIV) == PWR_NPRIV)
 c004a98:	683b      	ldr	r3, [r7, #0]
 c004a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c004a9e:	2b00      	cmp	r3, #0
 c004aa0:	d007      	beq.n	c004ab2 <HAL_PWR_ConfigAttributes+0x46>
  {
    CLEAR_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_PRIV);
 c004aa2:	4b14      	ldr	r3, [pc, #80]	; (c004af4 <HAL_PWR_ConfigAttributes+0x88>)
 c004aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c004aa8:	4a12      	ldr	r2, [pc, #72]	; (c004af4 <HAL_PWR_ConfigAttributes+0x88>)
 c004aaa:	f023 0301 	bic.w	r3, r3, #1
 c004aae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80


#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)

  /* Secure/non-secure attribute */
  if ((Attributes & PWR_SEC) == PWR_SEC)
 c004ab2:	683a      	ldr	r2, [r7, #0]
 c004ab4:	f240 1301 	movw	r3, #257	; 0x101
 c004ab8:	4013      	ands	r3, r2
 c004aba:	f240 1201 	movw	r2, #257	; 0x101
 c004abe:	4293      	cmp	r3, r2
 c004ac0:	d106      	bne.n	c004ad0 <HAL_PWR_ConfigAttributes+0x64>
  {
    SET_BIT(PWR_S->SECCFGR, Item);
 c004ac2:	4b0c      	ldr	r3, [pc, #48]	; (c004af4 <HAL_PWR_ConfigAttributes+0x88>)
 c004ac4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 c004ac6:	490b      	ldr	r1, [pc, #44]	; (c004af4 <HAL_PWR_ConfigAttributes+0x88>)
 c004ac8:	687b      	ldr	r3, [r7, #4]
 c004aca:	4313      	orrs	r3, r2
 c004acc:	678b      	str	r3, [r1, #120]	; 0x78
  {
    /* do nothing */
  }

#endif /* __ARM_FEATURE_CMSE */
}
 c004ace:	e00b      	b.n	c004ae8 <HAL_PWR_ConfigAttributes+0x7c>
  else if ((Attributes & PWR_NSEC) == PWR_NSEC)
 c004ad0:	683b      	ldr	r3, [r7, #0]
 c004ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c004ad6:	2b00      	cmp	r3, #0
 c004ad8:	d006      	beq.n	c004ae8 <HAL_PWR_ConfigAttributes+0x7c>
    CLEAR_BIT(PWR_S->SECCFGR, Item);
 c004ada:	4b06      	ldr	r3, [pc, #24]	; (c004af4 <HAL_PWR_ConfigAttributes+0x88>)
 c004adc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 c004ade:	687b      	ldr	r3, [r7, #4]
 c004ae0:	43db      	mvns	r3, r3
 c004ae2:	4904      	ldr	r1, [pc, #16]	; (c004af4 <HAL_PWR_ConfigAttributes+0x88>)
 c004ae4:	4013      	ands	r3, r2
 c004ae6:	678b      	str	r3, [r1, #120]	; 0x78
}
 c004ae8:	bf00      	nop
 c004aea:	370c      	adds	r7, #12
 c004aec:	46bd      	mov	sp, r7
 c004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004af2:	4770      	bx	lr
 c004af4:	50007000 	.word	0x50007000

0c004af8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c004af8:	b480      	push	{r7}
 c004afa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 c004afc:	4b04      	ldr	r3, [pc, #16]	; (c004b10 <HAL_PWREx_GetVoltageRange+0x18>)
 c004afe:	681b      	ldr	r3, [r3, #0]
 c004b00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 c004b04:	4618      	mov	r0, r3
 c004b06:	46bd      	mov	sp, r7
 c004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004b0c:	4770      	bx	lr
 c004b0e:	bf00      	nop
 c004b10:	50007000 	.word	0x50007000

0c004b14 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c004b14:	b580      	push	{r7, lr}
 c004b16:	b084      	sub	sp, #16
 c004b18:	af00      	add	r7, sp, #0
 c004b1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c004b1c:	4b27      	ldr	r3, [pc, #156]	; (c004bbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c004b1e:	681b      	ldr	r3, [r3, #0]
 c004b20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 c004b24:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 c004b26:	f000 f871 	bl	c004c0c <HAL_PWREx_SMPS_GetEffectiveMode>
 c004b2a:	4603      	mov	r3, r0
 c004b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c004b30:	d101      	bne.n	c004b36 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 c004b32:	2301      	movs	r3, #1
 c004b34:	e03e      	b.n	c004bb4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c004b36:	4b21      	ldr	r3, [pc, #132]	; (c004bbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c004b38:	68db      	ldr	r3, [r3, #12]
 c004b3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c004b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c004b42:	d101      	bne.n	c004b48 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 c004b44:	2301      	movs	r3, #1
 c004b46:	e035      	b.n	c004bb4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c004b48:	68ba      	ldr	r2, [r7, #8]
 c004b4a:	687b      	ldr	r3, [r7, #4]
 c004b4c:	429a      	cmp	r2, r3
 c004b4e:	d101      	bne.n	c004b54 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 c004b50:	2300      	movs	r3, #0
 c004b52:	e02f      	b.n	c004bb4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c004b54:	4b19      	ldr	r3, [pc, #100]	; (c004bbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c004b56:	681b      	ldr	r3, [r3, #0]
 c004b58:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 c004b5c:	4917      	ldr	r1, [pc, #92]	; (c004bbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c004b5e:	687b      	ldr	r3, [r7, #4]
 c004b60:	4313      	orrs	r3, r2
 c004b62:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c004b64:	4b16      	ldr	r3, [pc, #88]	; (c004bc0 <HAL_PWREx_ControlVoltageScaling+0xac>)
 c004b66:	681b      	ldr	r3, [r3, #0]
 c004b68:	095b      	lsrs	r3, r3, #5
 c004b6a:	4a16      	ldr	r2, [pc, #88]	; (c004bc4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 c004b6c:	fba2 2303 	umull	r2, r3, r2, r3
 c004b70:	09db      	lsrs	r3, r3, #7
 c004b72:	2232      	movs	r2, #50	; 0x32
 c004b74:	fb02 f303 	mul.w	r3, r2, r3
 c004b78:	4a13      	ldr	r2, [pc, #76]	; (c004bc8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 c004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 c004b7e:	08db      	lsrs	r3, r3, #3
 c004b80:	3301      	adds	r3, #1
 c004b82:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c004b84:	e002      	b.n	c004b8c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 c004b86:	68fb      	ldr	r3, [r7, #12]
 c004b88:	3b01      	subs	r3, #1
 c004b8a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c004b8c:	4b0b      	ldr	r3, [pc, #44]	; (c004bbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c004b8e:	695b      	ldr	r3, [r3, #20]
 c004b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c004b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c004b98:	d102      	bne.n	c004ba0 <HAL_PWREx_ControlVoltageScaling+0x8c>
 c004b9a:	68fb      	ldr	r3, [r7, #12]
 c004b9c:	2b00      	cmp	r3, #0
 c004b9e:	d1f2      	bne.n	c004b86 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c004ba0:	4b06      	ldr	r3, [pc, #24]	; (c004bbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c004ba2:	695b      	ldr	r3, [r3, #20]
 c004ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c004ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c004bac:	d101      	bne.n	c004bb2 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 c004bae:	2303      	movs	r3, #3
 c004bb0:	e000      	b.n	c004bb4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 c004bb2:	2300      	movs	r3, #0
}
 c004bb4:	4618      	mov	r0, r3
 c004bb6:	3710      	adds	r7, #16
 c004bb8:	46bd      	mov	sp, r7
 c004bba:	bd80      	pop	{r7, pc}
 c004bbc:	50007000 	.word	0x50007000
 c004bc0:	30000028 	.word	0x30000028
 c004bc4:	0a7c5ac5 	.word	0x0a7c5ac5
 c004bc8:	cccccccd 	.word	0xcccccccd

0c004bcc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 c004bcc:	b480      	push	{r7}
 c004bce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 c004bd0:	4b05      	ldr	r3, [pc, #20]	; (c004be8 <HAL_PWREx_EnableVddIO2+0x1c>)
 c004bd2:	685b      	ldr	r3, [r3, #4]
 c004bd4:	4a04      	ldr	r2, [pc, #16]	; (c004be8 <HAL_PWREx_EnableVddIO2+0x1c>)
 c004bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 c004bda:	6053      	str	r3, [r2, #4]
}
 c004bdc:	bf00      	nop
 c004bde:	46bd      	mov	sp, r7
 c004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004be4:	4770      	bx	lr
 c004be6:	bf00      	nop
 c004be8:	50007000 	.word	0x50007000

0c004bec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c004bec:	b480      	push	{r7}
 c004bee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c004bf0:	4b05      	ldr	r3, [pc, #20]	; (c004c08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c004bf2:	689b      	ldr	r3, [r3, #8]
 c004bf4:	4a04      	ldr	r2, [pc, #16]	; (c004c08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c004bf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c004bfa:	6093      	str	r3, [r2, #8]
}
 c004bfc:	bf00      	nop
 c004bfe:	46bd      	mov	sp, r7
 c004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004c04:	4770      	bx	lr
 c004c06:	bf00      	nop
 c004c08:	50007000 	.word	0x50007000

0c004c0c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 c004c0c:	b480      	push	{r7}
 c004c0e:	b083      	sub	sp, #12
 c004c10:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c004c12:	4b0f      	ldr	r3, [pc, #60]	; (c004c50 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 c004c14:	691b      	ldr	r3, [r3, #16]
 c004c16:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 c004c18:	683b      	ldr	r3, [r7, #0]
 c004c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c004c1e:	2b00      	cmp	r3, #0
 c004c20:	d003      	beq.n	c004c2a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 c004c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c004c26:	607b      	str	r3, [r7, #4]
 c004c28:	e00a      	b.n	c004c40 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c004c2a:	683b      	ldr	r3, [r7, #0]
 c004c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c004c30:	2b00      	cmp	r3, #0
 c004c32:	d103      	bne.n	c004c3c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 c004c34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c004c38:	607b      	str	r3, [r7, #4]
 c004c3a:	e001      	b.n	c004c40 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 c004c3c:	2300      	movs	r3, #0
 c004c3e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 c004c40:	687b      	ldr	r3, [r7, #4]
}
 c004c42:	4618      	mov	r0, r3
 c004c44:	370c      	adds	r7, #12
 c004c46:	46bd      	mov	sp, r7
 c004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004c4c:	4770      	bx	lr
 c004c4e:	bf00      	nop
 c004c50:	50007000 	.word	0x50007000

0c004c54 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 c004c54:	b580      	push	{r7, lr}
 c004c56:	b088      	sub	sp, #32
 c004c58:	af00      	add	r7, sp, #0
 c004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 c004c5c:	687b      	ldr	r3, [r7, #4]
 c004c5e:	2b00      	cmp	r3, #0
 c004c60:	d102      	bne.n	c004c68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c004c62:	2301      	movs	r3, #1
 c004c64:	f000 bcd0 	b.w	c005608 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c004c68:	4b99      	ldr	r3, [pc, #612]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004c6a:	689b      	ldr	r3, [r3, #8]
 c004c6c:	f003 030c 	and.w	r3, r3, #12
 c004c70:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c004c72:	4b97      	ldr	r3, [pc, #604]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004c74:	68db      	ldr	r3, [r3, #12]
 c004c76:	f003 0303 	and.w	r3, r3, #3
 c004c7a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c004c7c:	687b      	ldr	r3, [r7, #4]
 c004c7e:	681b      	ldr	r3, [r3, #0]
 c004c80:	f003 0310 	and.w	r3, r3, #16
 c004c84:	2b00      	cmp	r3, #0
 c004c86:	f000 80e9 	beq.w	c004e5c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c004c8a:	69bb      	ldr	r3, [r7, #24]
 c004c8c:	2b00      	cmp	r3, #0
 c004c8e:	d006      	beq.n	c004c9e <HAL_RCC_OscConfig+0x4a>
 c004c90:	69bb      	ldr	r3, [r7, #24]
 c004c92:	2b0c      	cmp	r3, #12
 c004c94:	f040 8083 	bne.w	c004d9e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c004c98:	697b      	ldr	r3, [r7, #20]
 c004c9a:	2b01      	cmp	r3, #1
 c004c9c:	d17f      	bne.n	c004d9e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c004c9e:	4b8c      	ldr	r3, [pc, #560]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004ca0:	681b      	ldr	r3, [r3, #0]
 c004ca2:	f003 0302 	and.w	r3, r3, #2
 c004ca6:	2b00      	cmp	r3, #0
 c004ca8:	d006      	beq.n	c004cb8 <HAL_RCC_OscConfig+0x64>
 c004caa:	687b      	ldr	r3, [r7, #4]
 c004cac:	69db      	ldr	r3, [r3, #28]
 c004cae:	2b00      	cmp	r3, #0
 c004cb0:	d102      	bne.n	c004cb8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 c004cb2:	2301      	movs	r3, #1
 c004cb4:	f000 bca8 	b.w	c005608 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c004cb8:	687b      	ldr	r3, [r7, #4]
 c004cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c004cbc:	4b84      	ldr	r3, [pc, #528]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004cbe:	681b      	ldr	r3, [r3, #0]
 c004cc0:	f003 0308 	and.w	r3, r3, #8
 c004cc4:	2b00      	cmp	r3, #0
 c004cc6:	d004      	beq.n	c004cd2 <HAL_RCC_OscConfig+0x7e>
 c004cc8:	4b81      	ldr	r3, [pc, #516]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004cca:	681b      	ldr	r3, [r3, #0]
 c004ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c004cd0:	e005      	b.n	c004cde <HAL_RCC_OscConfig+0x8a>
 c004cd2:	4b7f      	ldr	r3, [pc, #508]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c004cd8:	091b      	lsrs	r3, r3, #4
 c004cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c004cde:	4293      	cmp	r3, r2
 c004ce0:	d224      	bcs.n	c004d2c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c004ce2:	687b      	ldr	r3, [r7, #4]
 c004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004ce6:	4618      	mov	r0, r3
 c004ce8:	f000 fe96 	bl	c005a18 <RCC_SetFlashLatencyFromMSIRange>
 c004cec:	4603      	mov	r3, r0
 c004cee:	2b00      	cmp	r3, #0
 c004cf0:	d002      	beq.n	c004cf8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 c004cf2:	2301      	movs	r3, #1
 c004cf4:	f000 bc88 	b.w	c005608 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c004cf8:	4b75      	ldr	r3, [pc, #468]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004cfa:	681b      	ldr	r3, [r3, #0]
 c004cfc:	4a74      	ldr	r2, [pc, #464]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004cfe:	f043 0308 	orr.w	r3, r3, #8
 c004d02:	6013      	str	r3, [r2, #0]
 c004d04:	4b72      	ldr	r3, [pc, #456]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004d06:	681b      	ldr	r3, [r3, #0]
 c004d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c004d0c:	687b      	ldr	r3, [r7, #4]
 c004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004d10:	496f      	ldr	r1, [pc, #444]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004d12:	4313      	orrs	r3, r2
 c004d14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c004d16:	4b6e      	ldr	r3, [pc, #440]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004d18:	685b      	ldr	r3, [r3, #4]
 c004d1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c004d1e:	687b      	ldr	r3, [r7, #4]
 c004d20:	6a1b      	ldr	r3, [r3, #32]
 c004d22:	021b      	lsls	r3, r3, #8
 c004d24:	496a      	ldr	r1, [pc, #424]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004d26:	4313      	orrs	r3, r2
 c004d28:	604b      	str	r3, [r1, #4]
 c004d2a:	e026      	b.n	c004d7a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c004d2c:	4b68      	ldr	r3, [pc, #416]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004d2e:	681b      	ldr	r3, [r3, #0]
 c004d30:	4a67      	ldr	r2, [pc, #412]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004d32:	f043 0308 	orr.w	r3, r3, #8
 c004d36:	6013      	str	r3, [r2, #0]
 c004d38:	4b65      	ldr	r3, [pc, #404]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004d3a:	681b      	ldr	r3, [r3, #0]
 c004d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c004d40:	687b      	ldr	r3, [r7, #4]
 c004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004d44:	4962      	ldr	r1, [pc, #392]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004d46:	4313      	orrs	r3, r2
 c004d48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c004d4a:	4b61      	ldr	r3, [pc, #388]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004d4c:	685b      	ldr	r3, [r3, #4]
 c004d4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c004d52:	687b      	ldr	r3, [r7, #4]
 c004d54:	6a1b      	ldr	r3, [r3, #32]
 c004d56:	021b      	lsls	r3, r3, #8
 c004d58:	495d      	ldr	r1, [pc, #372]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004d5a:	4313      	orrs	r3, r2
 c004d5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c004d5e:	69bb      	ldr	r3, [r7, #24]
 c004d60:	2b00      	cmp	r3, #0
 c004d62:	d10a      	bne.n	c004d7a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c004d64:	687b      	ldr	r3, [r7, #4]
 c004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004d68:	4618      	mov	r0, r3
 c004d6a:	f000 fe55 	bl	c005a18 <RCC_SetFlashLatencyFromMSIRange>
 c004d6e:	4603      	mov	r3, r0
 c004d70:	2b00      	cmp	r3, #0
 c004d72:	d002      	beq.n	c004d7a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 c004d74:	2301      	movs	r3, #1
 c004d76:	f000 bc47 	b.w	c005608 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c004d7a:	f000 fe11 	bl	c0059a0 <HAL_RCC_GetHCLKFreq>
 c004d7e:	4603      	mov	r3, r0
 c004d80:	4a54      	ldr	r2, [pc, #336]	; (c004ed4 <HAL_RCC_OscConfig+0x280>)
 c004d82:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c004d84:	4b54      	ldr	r3, [pc, #336]	; (c004ed8 <HAL_RCC_OscConfig+0x284>)
 c004d86:	681b      	ldr	r3, [r3, #0]
 c004d88:	4618      	mov	r0, r3
 c004d8a:	f7fe ffbd 	bl	c003d08 <HAL_InitTick>
 c004d8e:	4603      	mov	r3, r0
 c004d90:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 c004d92:	7bfb      	ldrb	r3, [r7, #15]
 c004d94:	2b00      	cmp	r3, #0
 c004d96:	d060      	beq.n	c004e5a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 c004d98:	7bfb      	ldrb	r3, [r7, #15]
 c004d9a:	f000 bc35 	b.w	c005608 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c004d9e:	687b      	ldr	r3, [r7, #4]
 c004da0:	69db      	ldr	r3, [r3, #28]
 c004da2:	2b00      	cmp	r3, #0
 c004da4:	d039      	beq.n	c004e1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 c004da6:	4b4a      	ldr	r3, [pc, #296]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004da8:	681b      	ldr	r3, [r3, #0]
 c004daa:	4a49      	ldr	r2, [pc, #292]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004dac:	f043 0301 	orr.w	r3, r3, #1
 c004db0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c004db2:	f7fe fff9 	bl	c003da8 <HAL_GetTick>
 c004db6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c004db8:	e00f      	b.n	c004dda <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c004dba:	f7fe fff5 	bl	c003da8 <HAL_GetTick>
 c004dbe:	4602      	mov	r2, r0
 c004dc0:	693b      	ldr	r3, [r7, #16]
 c004dc2:	1ad3      	subs	r3, r2, r3
 c004dc4:	2b02      	cmp	r3, #2
 c004dc6:	d908      	bls.n	c004dda <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c004dc8:	4b41      	ldr	r3, [pc, #260]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004dca:	681b      	ldr	r3, [r3, #0]
 c004dcc:	f003 0302 	and.w	r3, r3, #2
 c004dd0:	2b00      	cmp	r3, #0
 c004dd2:	d102      	bne.n	c004dda <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 c004dd4:	2303      	movs	r3, #3
 c004dd6:	f000 bc17 	b.w	c005608 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c004dda:	4b3d      	ldr	r3, [pc, #244]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004ddc:	681b      	ldr	r3, [r3, #0]
 c004dde:	f003 0302 	and.w	r3, r3, #2
 c004de2:	2b00      	cmp	r3, #0
 c004de4:	d0e9      	beq.n	c004dba <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c004de6:	4b3a      	ldr	r3, [pc, #232]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004de8:	681b      	ldr	r3, [r3, #0]
 c004dea:	4a39      	ldr	r2, [pc, #228]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004dec:	f043 0308 	orr.w	r3, r3, #8
 c004df0:	6013      	str	r3, [r2, #0]
 c004df2:	4b37      	ldr	r3, [pc, #220]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004df4:	681b      	ldr	r3, [r3, #0]
 c004df6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c004dfa:	687b      	ldr	r3, [r7, #4]
 c004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004dfe:	4934      	ldr	r1, [pc, #208]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004e00:	4313      	orrs	r3, r2
 c004e02:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c004e04:	4b32      	ldr	r3, [pc, #200]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004e06:	685b      	ldr	r3, [r3, #4]
 c004e08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c004e0c:	687b      	ldr	r3, [r7, #4]
 c004e0e:	6a1b      	ldr	r3, [r3, #32]
 c004e10:	021b      	lsls	r3, r3, #8
 c004e12:	492f      	ldr	r1, [pc, #188]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004e14:	4313      	orrs	r3, r2
 c004e16:	604b      	str	r3, [r1, #4]
 c004e18:	e020      	b.n	c004e5c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 c004e1a:	4b2d      	ldr	r3, [pc, #180]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004e1c:	681b      	ldr	r3, [r3, #0]
 c004e1e:	4a2c      	ldr	r2, [pc, #176]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004e20:	f023 0301 	bic.w	r3, r3, #1
 c004e24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c004e26:	f7fe ffbf 	bl	c003da8 <HAL_GetTick>
 c004e2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c004e2c:	e00e      	b.n	c004e4c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c004e2e:	f7fe ffbb 	bl	c003da8 <HAL_GetTick>
 c004e32:	4602      	mov	r2, r0
 c004e34:	693b      	ldr	r3, [r7, #16]
 c004e36:	1ad3      	subs	r3, r2, r3
 c004e38:	2b02      	cmp	r3, #2
 c004e3a:	d907      	bls.n	c004e4c <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c004e3c:	4b24      	ldr	r3, [pc, #144]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004e3e:	681b      	ldr	r3, [r3, #0]
 c004e40:	f003 0302 	and.w	r3, r3, #2
 c004e44:	2b00      	cmp	r3, #0
 c004e46:	d001      	beq.n	c004e4c <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 c004e48:	2303      	movs	r3, #3
 c004e4a:	e3dd      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c004e4c:	4b20      	ldr	r3, [pc, #128]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004e4e:	681b      	ldr	r3, [r3, #0]
 c004e50:	f003 0302 	and.w	r3, r3, #2
 c004e54:	2b00      	cmp	r3, #0
 c004e56:	d1ea      	bne.n	c004e2e <HAL_RCC_OscConfig+0x1da>
 c004e58:	e000      	b.n	c004e5c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c004e5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c004e5c:	687b      	ldr	r3, [r7, #4]
 c004e5e:	681b      	ldr	r3, [r3, #0]
 c004e60:	f003 0301 	and.w	r3, r3, #1
 c004e64:	2b00      	cmp	r3, #0
 c004e66:	d07e      	beq.n	c004f66 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c004e68:	69bb      	ldr	r3, [r7, #24]
 c004e6a:	2b08      	cmp	r3, #8
 c004e6c:	d005      	beq.n	c004e7a <HAL_RCC_OscConfig+0x226>
 c004e6e:	69bb      	ldr	r3, [r7, #24]
 c004e70:	2b0c      	cmp	r3, #12
 c004e72:	d10e      	bne.n	c004e92 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c004e74:	697b      	ldr	r3, [r7, #20]
 c004e76:	2b03      	cmp	r3, #3
 c004e78:	d10b      	bne.n	c004e92 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c004e7a:	4b15      	ldr	r3, [pc, #84]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004e7c:	681b      	ldr	r3, [r3, #0]
 c004e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c004e82:	2b00      	cmp	r3, #0
 c004e84:	d06e      	beq.n	c004f64 <HAL_RCC_OscConfig+0x310>
 c004e86:	687b      	ldr	r3, [r7, #4]
 c004e88:	685b      	ldr	r3, [r3, #4]
 c004e8a:	2b00      	cmp	r3, #0
 c004e8c:	d16a      	bne.n	c004f64 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 c004e8e:	2301      	movs	r3, #1
 c004e90:	e3ba      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c004e92:	687b      	ldr	r3, [r7, #4]
 c004e94:	685b      	ldr	r3, [r3, #4]
 c004e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c004e9a:	d106      	bne.n	c004eaa <HAL_RCC_OscConfig+0x256>
 c004e9c:	4b0c      	ldr	r3, [pc, #48]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004e9e:	681b      	ldr	r3, [r3, #0]
 c004ea0:	4a0b      	ldr	r2, [pc, #44]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c004ea6:	6013      	str	r3, [r2, #0]
 c004ea8:	e024      	b.n	c004ef4 <HAL_RCC_OscConfig+0x2a0>
 c004eaa:	687b      	ldr	r3, [r7, #4]
 c004eac:	685b      	ldr	r3, [r3, #4]
 c004eae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c004eb2:	d113      	bne.n	c004edc <HAL_RCC_OscConfig+0x288>
 c004eb4:	4b06      	ldr	r3, [pc, #24]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004eb6:	681b      	ldr	r3, [r3, #0]
 c004eb8:	4a05      	ldr	r2, [pc, #20]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004eba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c004ebe:	6013      	str	r3, [r2, #0]
 c004ec0:	4b03      	ldr	r3, [pc, #12]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004ec2:	681b      	ldr	r3, [r3, #0]
 c004ec4:	4a02      	ldr	r2, [pc, #8]	; (c004ed0 <HAL_RCC_OscConfig+0x27c>)
 c004ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c004eca:	6013      	str	r3, [r2, #0]
 c004ecc:	e012      	b.n	c004ef4 <HAL_RCC_OscConfig+0x2a0>
 c004ece:	bf00      	nop
 c004ed0:	50021000 	.word	0x50021000
 c004ed4:	30000028 	.word	0x30000028
 c004ed8:	3000002c 	.word	0x3000002c
 c004edc:	4b8b      	ldr	r3, [pc, #556]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c004ede:	681b      	ldr	r3, [r3, #0]
 c004ee0:	4a8a      	ldr	r2, [pc, #552]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c004ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c004ee6:	6013      	str	r3, [r2, #0]
 c004ee8:	4b88      	ldr	r3, [pc, #544]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c004eea:	681b      	ldr	r3, [r3, #0]
 c004eec:	4a87      	ldr	r2, [pc, #540]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c004eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c004ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c004ef4:	687b      	ldr	r3, [r7, #4]
 c004ef6:	685b      	ldr	r3, [r3, #4]
 c004ef8:	2b00      	cmp	r3, #0
 c004efa:	d019      	beq.n	c004f30 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c004efc:	f7fe ff54 	bl	c003da8 <HAL_GetTick>
 c004f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c004f02:	e00e      	b.n	c004f22 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c004f04:	f7fe ff50 	bl	c003da8 <HAL_GetTick>
 c004f08:	4602      	mov	r2, r0
 c004f0a:	693b      	ldr	r3, [r7, #16]
 c004f0c:	1ad3      	subs	r3, r2, r3
 c004f0e:	2b64      	cmp	r3, #100	; 0x64
 c004f10:	d907      	bls.n	c004f22 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c004f12:	4b7e      	ldr	r3, [pc, #504]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c004f14:	681b      	ldr	r3, [r3, #0]
 c004f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c004f1a:	2b00      	cmp	r3, #0
 c004f1c:	d101      	bne.n	c004f22 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 c004f1e:	2303      	movs	r3, #3
 c004f20:	e372      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c004f22:	4b7a      	ldr	r3, [pc, #488]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c004f24:	681b      	ldr	r3, [r3, #0]
 c004f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c004f2a:	2b00      	cmp	r3, #0
 c004f2c:	d0ea      	beq.n	c004f04 <HAL_RCC_OscConfig+0x2b0>
 c004f2e:	e01a      	b.n	c004f66 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c004f30:	f7fe ff3a 	bl	c003da8 <HAL_GetTick>
 c004f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c004f36:	e00e      	b.n	c004f56 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c004f38:	f7fe ff36 	bl	c003da8 <HAL_GetTick>
 c004f3c:	4602      	mov	r2, r0
 c004f3e:	693b      	ldr	r3, [r7, #16]
 c004f40:	1ad3      	subs	r3, r2, r3
 c004f42:	2b64      	cmp	r3, #100	; 0x64
 c004f44:	d907      	bls.n	c004f56 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c004f46:	4b71      	ldr	r3, [pc, #452]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c004f48:	681b      	ldr	r3, [r3, #0]
 c004f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c004f4e:	2b00      	cmp	r3, #0
 c004f50:	d001      	beq.n	c004f56 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 c004f52:	2303      	movs	r3, #3
 c004f54:	e358      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c004f56:	4b6d      	ldr	r3, [pc, #436]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c004f58:	681b      	ldr	r3, [r3, #0]
 c004f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c004f5e:	2b00      	cmp	r3, #0
 c004f60:	d1ea      	bne.n	c004f38 <HAL_RCC_OscConfig+0x2e4>
 c004f62:	e000      	b.n	c004f66 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c004f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c004f66:	687b      	ldr	r3, [r7, #4]
 c004f68:	681b      	ldr	r3, [r3, #0]
 c004f6a:	f003 0302 	and.w	r3, r3, #2
 c004f6e:	2b00      	cmp	r3, #0
 c004f70:	d06c      	beq.n	c00504c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c004f72:	69bb      	ldr	r3, [r7, #24]
 c004f74:	2b04      	cmp	r3, #4
 c004f76:	d005      	beq.n	c004f84 <HAL_RCC_OscConfig+0x330>
 c004f78:	69bb      	ldr	r3, [r7, #24]
 c004f7a:	2b0c      	cmp	r3, #12
 c004f7c:	d119      	bne.n	c004fb2 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c004f7e:	697b      	ldr	r3, [r7, #20]
 c004f80:	2b02      	cmp	r3, #2
 c004f82:	d116      	bne.n	c004fb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c004f84:	4b61      	ldr	r3, [pc, #388]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c004f86:	681b      	ldr	r3, [r3, #0]
 c004f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c004f8c:	2b00      	cmp	r3, #0
 c004f8e:	d005      	beq.n	c004f9c <HAL_RCC_OscConfig+0x348>
 c004f90:	687b      	ldr	r3, [r7, #4]
 c004f92:	68db      	ldr	r3, [r3, #12]
 c004f94:	2b00      	cmp	r3, #0
 c004f96:	d101      	bne.n	c004f9c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 c004f98:	2301      	movs	r3, #1
 c004f9a:	e335      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c004f9c:	4b5b      	ldr	r3, [pc, #364]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c004f9e:	685b      	ldr	r3, [r3, #4]
 c004fa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c004fa4:	687b      	ldr	r3, [r7, #4]
 c004fa6:	691b      	ldr	r3, [r3, #16]
 c004fa8:	061b      	lsls	r3, r3, #24
 c004faa:	4958      	ldr	r1, [pc, #352]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c004fac:	4313      	orrs	r3, r2
 c004fae:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c004fb0:	e04c      	b.n	c00504c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c004fb2:	687b      	ldr	r3, [r7, #4]
 c004fb4:	68db      	ldr	r3, [r3, #12]
 c004fb6:	2b00      	cmp	r3, #0
 c004fb8:	d029      	beq.n	c00500e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 c004fba:	4b54      	ldr	r3, [pc, #336]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c004fbc:	681b      	ldr	r3, [r3, #0]
 c004fbe:	4a53      	ldr	r2, [pc, #332]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c004fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c004fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c004fc6:	f7fe feef 	bl	c003da8 <HAL_GetTick>
 c004fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c004fcc:	e00e      	b.n	c004fec <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c004fce:	f7fe feeb 	bl	c003da8 <HAL_GetTick>
 c004fd2:	4602      	mov	r2, r0
 c004fd4:	693b      	ldr	r3, [r7, #16]
 c004fd6:	1ad3      	subs	r3, r2, r3
 c004fd8:	2b02      	cmp	r3, #2
 c004fda:	d907      	bls.n	c004fec <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c004fdc:	4b4b      	ldr	r3, [pc, #300]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c004fde:	681b      	ldr	r3, [r3, #0]
 c004fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c004fe4:	2b00      	cmp	r3, #0
 c004fe6:	d101      	bne.n	c004fec <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 c004fe8:	2303      	movs	r3, #3
 c004fea:	e30d      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c004fec:	4b47      	ldr	r3, [pc, #284]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c004fee:	681b      	ldr	r3, [r3, #0]
 c004ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c004ff4:	2b00      	cmp	r3, #0
 c004ff6:	d0ea      	beq.n	c004fce <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c004ff8:	4b44      	ldr	r3, [pc, #272]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c004ffa:	685b      	ldr	r3, [r3, #4]
 c004ffc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c005000:	687b      	ldr	r3, [r7, #4]
 c005002:	691b      	ldr	r3, [r3, #16]
 c005004:	061b      	lsls	r3, r3, #24
 c005006:	4941      	ldr	r1, [pc, #260]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c005008:	4313      	orrs	r3, r2
 c00500a:	604b      	str	r3, [r1, #4]
 c00500c:	e01e      	b.n	c00504c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c00500e:	4b3f      	ldr	r3, [pc, #252]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c005010:	681b      	ldr	r3, [r3, #0]
 c005012:	4a3e      	ldr	r2, [pc, #248]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c005014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c005018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00501a:	f7fe fec5 	bl	c003da8 <HAL_GetTick>
 c00501e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c005020:	e00e      	b.n	c005040 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c005022:	f7fe fec1 	bl	c003da8 <HAL_GetTick>
 c005026:	4602      	mov	r2, r0
 c005028:	693b      	ldr	r3, [r7, #16]
 c00502a:	1ad3      	subs	r3, r2, r3
 c00502c:	2b02      	cmp	r3, #2
 c00502e:	d907      	bls.n	c005040 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c005030:	4b36      	ldr	r3, [pc, #216]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c005032:	681b      	ldr	r3, [r3, #0]
 c005034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c005038:	2b00      	cmp	r3, #0
 c00503a:	d001      	beq.n	c005040 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 c00503c:	2303      	movs	r3, #3
 c00503e:	e2e3      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c005040:	4b32      	ldr	r3, [pc, #200]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c005042:	681b      	ldr	r3, [r3, #0]
 c005044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c005048:	2b00      	cmp	r3, #0
 c00504a:	d1ea      	bne.n	c005022 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c00504c:	687b      	ldr	r3, [r7, #4]
 c00504e:	681b      	ldr	r3, [r3, #0]
 c005050:	f003 0308 	and.w	r3, r3, #8
 c005054:	2b00      	cmp	r3, #0
 c005056:	d062      	beq.n	c00511e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c005058:	687b      	ldr	r3, [r7, #4]
 c00505a:	695b      	ldr	r3, [r3, #20]
 c00505c:	2b00      	cmp	r3, #0
 c00505e:	d038      	beq.n	c0050d2 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c005060:	687b      	ldr	r3, [r7, #4]
 c005062:	699b      	ldr	r3, [r3, #24]
 c005064:	2b00      	cmp	r3, #0
 c005066:	d108      	bne.n	c00507a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c005068:	4b28      	ldr	r3, [pc, #160]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c00506a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00506e:	4a27      	ldr	r2, [pc, #156]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c005070:	f023 0310 	bic.w	r3, r3, #16
 c005074:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 c005078:	e007      	b.n	c00508a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c00507a:	4b24      	ldr	r3, [pc, #144]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c00507c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c005080:	4a22      	ldr	r2, [pc, #136]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c005082:	f043 0310 	orr.w	r3, r3, #16
 c005086:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c00508a:	4b20      	ldr	r3, [pc, #128]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c00508c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c005090:	4a1e      	ldr	r2, [pc, #120]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c005092:	f043 0301 	orr.w	r3, r3, #1
 c005096:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00509a:	f7fe fe85 	bl	c003da8 <HAL_GetTick>
 c00509e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c0050a0:	e00f      	b.n	c0050c2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c0050a2:	f7fe fe81 	bl	c003da8 <HAL_GetTick>
 c0050a6:	4602      	mov	r2, r0
 c0050a8:	693b      	ldr	r3, [r7, #16]
 c0050aa:	1ad3      	subs	r3, r2, r3
 c0050ac:	2b07      	cmp	r3, #7
 c0050ae:	d908      	bls.n	c0050c2 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c0050b0:	4b16      	ldr	r3, [pc, #88]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c0050b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0050b6:	f003 0302 	and.w	r3, r3, #2
 c0050ba:	2b00      	cmp	r3, #0
 c0050bc:	d101      	bne.n	c0050c2 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 c0050be:	2303      	movs	r3, #3
 c0050c0:	e2a2      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c0050c2:	4b12      	ldr	r3, [pc, #72]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c0050c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0050c8:	f003 0302 	and.w	r3, r3, #2
 c0050cc:	2b00      	cmp	r3, #0
 c0050ce:	d0e8      	beq.n	c0050a2 <HAL_RCC_OscConfig+0x44e>
 c0050d0:	e025      	b.n	c00511e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c0050d2:	4b0e      	ldr	r3, [pc, #56]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c0050d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0050d8:	4a0c      	ldr	r2, [pc, #48]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c0050da:	f023 0301 	bic.w	r3, r3, #1
 c0050de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0050e2:	f7fe fe61 	bl	c003da8 <HAL_GetTick>
 c0050e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0050e8:	e012      	b.n	c005110 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c0050ea:	f7fe fe5d 	bl	c003da8 <HAL_GetTick>
 c0050ee:	4602      	mov	r2, r0
 c0050f0:	693b      	ldr	r3, [r7, #16]
 c0050f2:	1ad3      	subs	r3, r2, r3
 c0050f4:	2b07      	cmp	r3, #7
 c0050f6:	d90b      	bls.n	c005110 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0050f8:	4b04      	ldr	r3, [pc, #16]	; (c00510c <HAL_RCC_OscConfig+0x4b8>)
 c0050fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0050fe:	f003 0302 	and.w	r3, r3, #2
 c005102:	2b00      	cmp	r3, #0
 c005104:	d004      	beq.n	c005110 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 c005106:	2303      	movs	r3, #3
 c005108:	e27e      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
 c00510a:	bf00      	nop
 c00510c:	50021000 	.word	0x50021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c005110:	4ba8      	ldr	r3, [pc, #672]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c005112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c005116:	f003 0302 	and.w	r3, r3, #2
 c00511a:	2b00      	cmp	r3, #0
 c00511c:	d1e5      	bne.n	c0050ea <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c00511e:	687b      	ldr	r3, [r7, #4]
 c005120:	681b      	ldr	r3, [r3, #0]
 c005122:	f003 0304 	and.w	r3, r3, #4
 c005126:	2b00      	cmp	r3, #0
 c005128:	f000 812d 	beq.w	c005386 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 c00512c:	2300      	movs	r3, #0
 c00512e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c005130:	4ba0      	ldr	r3, [pc, #640]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c005132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c005138:	2b00      	cmp	r3, #0
 c00513a:	d10d      	bne.n	c005158 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c00513c:	4b9d      	ldr	r3, [pc, #628]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c00513e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005140:	4a9c      	ldr	r2, [pc, #624]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c005142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c005146:	6593      	str	r3, [r2, #88]	; 0x58
 c005148:	4b9a      	ldr	r3, [pc, #616]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c00514a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00514c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c005150:	60bb      	str	r3, [r7, #8]
 c005152:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 c005154:	2301      	movs	r3, #1
 c005156:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c005158:	4b97      	ldr	r3, [pc, #604]	; (c0053b8 <HAL_RCC_OscConfig+0x764>)
 c00515a:	681b      	ldr	r3, [r3, #0]
 c00515c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c005160:	2b00      	cmp	r3, #0
 c005162:	d11e      	bne.n	c0051a2 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c005164:	4b94      	ldr	r3, [pc, #592]	; (c0053b8 <HAL_RCC_OscConfig+0x764>)
 c005166:	681b      	ldr	r3, [r3, #0]
 c005168:	4a93      	ldr	r2, [pc, #588]	; (c0053b8 <HAL_RCC_OscConfig+0x764>)
 c00516a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c00516e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c005170:	f7fe fe1a 	bl	c003da8 <HAL_GetTick>
 c005174:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c005176:	e00e      	b.n	c005196 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c005178:	f7fe fe16 	bl	c003da8 <HAL_GetTick>
 c00517c:	4602      	mov	r2, r0
 c00517e:	693b      	ldr	r3, [r7, #16]
 c005180:	1ad3      	subs	r3, r2, r3
 c005182:	2b02      	cmp	r3, #2
 c005184:	d907      	bls.n	c005196 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c005186:	4b8c      	ldr	r3, [pc, #560]	; (c0053b8 <HAL_RCC_OscConfig+0x764>)
 c005188:	681b      	ldr	r3, [r3, #0]
 c00518a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00518e:	2b00      	cmp	r3, #0
 c005190:	d101      	bne.n	c005196 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 c005192:	2303      	movs	r3, #3
 c005194:	e238      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c005196:	4b88      	ldr	r3, [pc, #544]	; (c0053b8 <HAL_RCC_OscConfig+0x764>)
 c005198:	681b      	ldr	r3, [r3, #0]
 c00519a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00519e:	2b00      	cmp	r3, #0
 c0051a0:	d0ea      	beq.n	c005178 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c0051a2:	687b      	ldr	r3, [r7, #4]
 c0051a4:	689b      	ldr	r3, [r3, #8]
 c0051a6:	f003 0301 	and.w	r3, r3, #1
 c0051aa:	2b00      	cmp	r3, #0
 c0051ac:	d01f      	beq.n	c0051ee <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c0051ae:	687b      	ldr	r3, [r7, #4]
 c0051b0:	689b      	ldr	r3, [r3, #8]
 c0051b2:	f003 0304 	and.w	r3, r3, #4
 c0051b6:	2b00      	cmp	r3, #0
 c0051b8:	d010      	beq.n	c0051dc <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c0051ba:	4b7e      	ldr	r3, [pc, #504]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c0051bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0051c0:	4a7c      	ldr	r2, [pc, #496]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c0051c2:	f043 0304 	orr.w	r3, r3, #4
 c0051c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0051ca:	4b7a      	ldr	r3, [pc, #488]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c0051cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0051d0:	4a78      	ldr	r2, [pc, #480]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c0051d2:	f043 0301 	orr.w	r3, r3, #1
 c0051d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c0051da:	e018      	b.n	c00520e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0051dc:	4b75      	ldr	r3, [pc, #468]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c0051de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0051e2:	4a74      	ldr	r2, [pc, #464]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c0051e4:	f043 0301 	orr.w	r3, r3, #1
 c0051e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c0051ec:	e00f      	b.n	c00520e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0051ee:	4b71      	ldr	r3, [pc, #452]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c0051f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0051f4:	4a6f      	ldr	r2, [pc, #444]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c0051f6:	f023 0301 	bic.w	r3, r3, #1
 c0051fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c0051fe:	4b6d      	ldr	r3, [pc, #436]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c005200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c005204:	4a6b      	ldr	r2, [pc, #428]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c005206:	f023 0304 	bic.w	r3, r3, #4
 c00520a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c00520e:	687b      	ldr	r3, [r7, #4]
 c005210:	689b      	ldr	r3, [r3, #8]
 c005212:	2b00      	cmp	r3, #0
 c005214:	d068      	beq.n	c0052e8 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c005216:	f7fe fdc7 	bl	c003da8 <HAL_GetTick>
 c00521a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00521c:	e011      	b.n	c005242 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00521e:	f7fe fdc3 	bl	c003da8 <HAL_GetTick>
 c005222:	4602      	mov	r2, r0
 c005224:	693b      	ldr	r3, [r7, #16]
 c005226:	1ad3      	subs	r3, r2, r3
 c005228:	f241 3288 	movw	r2, #5000	; 0x1388
 c00522c:	4293      	cmp	r3, r2
 c00522e:	d908      	bls.n	c005242 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c005230:	4b60      	ldr	r3, [pc, #384]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c005232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c005236:	f003 0302 	and.w	r3, r3, #2
 c00523a:	2b00      	cmp	r3, #0
 c00523c:	d101      	bne.n	c005242 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 c00523e:	2303      	movs	r3, #3
 c005240:	e1e2      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c005242:	4b5c      	ldr	r3, [pc, #368]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c005244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c005248:	f003 0302 	and.w	r3, r3, #2
 c00524c:	2b00      	cmp	r3, #0
 c00524e:	d0e6      	beq.n	c00521e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c005250:	687b      	ldr	r3, [r7, #4]
 c005252:	689b      	ldr	r3, [r3, #8]
 c005254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c005258:	2b00      	cmp	r3, #0
 c00525a:	d022      	beq.n	c0052a2 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c00525c:	4b55      	ldr	r3, [pc, #340]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c00525e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c005262:	4a54      	ldr	r2, [pc, #336]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c005264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c005268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c00526c:	e011      	b.n	c005292 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00526e:	f7fe fd9b 	bl	c003da8 <HAL_GetTick>
 c005272:	4602      	mov	r2, r0
 c005274:	693b      	ldr	r3, [r7, #16]
 c005276:	1ad3      	subs	r3, r2, r3
 c005278:	f241 3288 	movw	r2, #5000	; 0x1388
 c00527c:	4293      	cmp	r3, r2
 c00527e:	d908      	bls.n	c005292 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c005280:	4b4c      	ldr	r3, [pc, #304]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c005282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c005286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00528a:	2b00      	cmp	r3, #0
 c00528c:	d101      	bne.n	c005292 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 c00528e:	2303      	movs	r3, #3
 c005290:	e1ba      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c005292:	4b48      	ldr	r3, [pc, #288]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c005294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c005298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00529c:	2b00      	cmp	r3, #0
 c00529e:	d0e6      	beq.n	c00526e <HAL_RCC_OscConfig+0x61a>
 c0052a0:	e068      	b.n	c005374 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0052a2:	4b44      	ldr	r3, [pc, #272]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c0052a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0052a8:	4a42      	ldr	r2, [pc, #264]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c0052aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c0052ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0052b2:	e011      	b.n	c0052d8 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0052b4:	f7fe fd78 	bl	c003da8 <HAL_GetTick>
 c0052b8:	4602      	mov	r2, r0
 c0052ba:	693b      	ldr	r3, [r7, #16]
 c0052bc:	1ad3      	subs	r3, r2, r3
 c0052be:	f241 3288 	movw	r2, #5000	; 0x1388
 c0052c2:	4293      	cmp	r3, r2
 c0052c4:	d908      	bls.n	c0052d8 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0052c6:	4b3b      	ldr	r3, [pc, #236]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c0052c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0052cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c0052d0:	2b00      	cmp	r3, #0
 c0052d2:	d001      	beq.n	c0052d8 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 c0052d4:	2303      	movs	r3, #3
 c0052d6:	e197      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0052d8:	4b36      	ldr	r3, [pc, #216]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c0052da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0052de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c0052e2:	2b00      	cmp	r3, #0
 c0052e4:	d1e6      	bne.n	c0052b4 <HAL_RCC_OscConfig+0x660>
 c0052e6:	e045      	b.n	c005374 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0052e8:	f7fe fd5e 	bl	c003da8 <HAL_GetTick>
 c0052ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c0052ee:	e011      	b.n	c005314 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0052f0:	f7fe fd5a 	bl	c003da8 <HAL_GetTick>
 c0052f4:	4602      	mov	r2, r0
 c0052f6:	693b      	ldr	r3, [r7, #16]
 c0052f8:	1ad3      	subs	r3, r2, r3
 c0052fa:	f241 3288 	movw	r2, #5000	; 0x1388
 c0052fe:	4293      	cmp	r3, r2
 c005300:	d908      	bls.n	c005314 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c005302:	4b2c      	ldr	r3, [pc, #176]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c005304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c005308:	f003 0302 	and.w	r3, r3, #2
 c00530c:	2b00      	cmp	r3, #0
 c00530e:	d001      	beq.n	c005314 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 c005310:	2303      	movs	r3, #3
 c005312:	e179      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c005314:	4b27      	ldr	r3, [pc, #156]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c005316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00531a:	f003 0302 	and.w	r3, r3, #2
 c00531e:	2b00      	cmp	r3, #0
 c005320:	d1e6      	bne.n	c0052f0 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c005322:	4b24      	ldr	r3, [pc, #144]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c005324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c005328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c00532c:	2b00      	cmp	r3, #0
 c00532e:	d021      	beq.n	c005374 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c005330:	4b20      	ldr	r3, [pc, #128]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c005332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c005336:	4a1f      	ldr	r2, [pc, #124]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c005338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c00533c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c005340:	e011      	b.n	c005366 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c005342:	f7fe fd31 	bl	c003da8 <HAL_GetTick>
 c005346:	4602      	mov	r2, r0
 c005348:	693b      	ldr	r3, [r7, #16]
 c00534a:	1ad3      	subs	r3, r2, r3
 c00534c:	f241 3288 	movw	r2, #5000	; 0x1388
 c005350:	4293      	cmp	r3, r2
 c005352:	d908      	bls.n	c005366 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c005354:	4b17      	ldr	r3, [pc, #92]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c005356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00535a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00535e:	2b00      	cmp	r3, #0
 c005360:	d001      	beq.n	c005366 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 c005362:	2303      	movs	r3, #3
 c005364:	e150      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c005366:	4b13      	ldr	r3, [pc, #76]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00536c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c005370:	2b00      	cmp	r3, #0
 c005372:	d1e6      	bne.n	c005342 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c005374:	7ffb      	ldrb	r3, [r7, #31]
 c005376:	2b01      	cmp	r3, #1
 c005378:	d105      	bne.n	c005386 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c00537a:	4b0e      	ldr	r3, [pc, #56]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c00537c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00537e:	4a0d      	ldr	r2, [pc, #52]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c005380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c005384:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c005386:	687b      	ldr	r3, [r7, #4]
 c005388:	681b      	ldr	r3, [r3, #0]
 c00538a:	f003 0320 	and.w	r3, r3, #32
 c00538e:	2b00      	cmp	r3, #0
 c005390:	d04f      	beq.n	c005432 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c005392:	687b      	ldr	r3, [r7, #4]
 c005394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005396:	2b00      	cmp	r3, #0
 c005398:	d028      	beq.n	c0053ec <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c00539a:	4b06      	ldr	r3, [pc, #24]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c00539c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0053a0:	4a04      	ldr	r2, [pc, #16]	; (c0053b4 <HAL_RCC_OscConfig+0x760>)
 c0053a2:	f043 0301 	orr.w	r3, r3, #1
 c0053a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0053aa:	f7fe fcfd 	bl	c003da8 <HAL_GetTick>
 c0053ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c0053b0:	e014      	b.n	c0053dc <HAL_RCC_OscConfig+0x788>
 c0053b2:	bf00      	nop
 c0053b4:	50021000 	.word	0x50021000
 c0053b8:	50007000 	.word	0x50007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c0053bc:	f7fe fcf4 	bl	c003da8 <HAL_GetTick>
 c0053c0:	4602      	mov	r2, r0
 c0053c2:	693b      	ldr	r3, [r7, #16]
 c0053c4:	1ad3      	subs	r3, r2, r3
 c0053c6:	2b02      	cmp	r3, #2
 c0053c8:	d908      	bls.n	c0053dc <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c0053ca:	4b91      	ldr	r3, [pc, #580]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c0053cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0053d0:	f003 0302 	and.w	r3, r3, #2
 c0053d4:	2b00      	cmp	r3, #0
 c0053d6:	d101      	bne.n	c0053dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 c0053d8:	2303      	movs	r3, #3
 c0053da:	e115      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c0053dc:	4b8c      	ldr	r3, [pc, #560]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c0053de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0053e2:	f003 0302 	and.w	r3, r3, #2
 c0053e6:	2b00      	cmp	r3, #0
 c0053e8:	d0e8      	beq.n	c0053bc <HAL_RCC_OscConfig+0x768>
 c0053ea:	e022      	b.n	c005432 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c0053ec:	4b88      	ldr	r3, [pc, #544]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c0053ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0053f2:	4a87      	ldr	r2, [pc, #540]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c0053f4:	f023 0301 	bic.w	r3, r3, #1
 c0053f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0053fc:	f7fe fcd4 	bl	c003da8 <HAL_GetTick>
 c005400:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c005402:	e00f      	b.n	c005424 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c005404:	f7fe fcd0 	bl	c003da8 <HAL_GetTick>
 c005408:	4602      	mov	r2, r0
 c00540a:	693b      	ldr	r3, [r7, #16]
 c00540c:	1ad3      	subs	r3, r2, r3
 c00540e:	2b02      	cmp	r3, #2
 c005410:	d908      	bls.n	c005424 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c005412:	4b7f      	ldr	r3, [pc, #508]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c005414:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c005418:	f003 0302 	and.w	r3, r3, #2
 c00541c:	2b00      	cmp	r3, #0
 c00541e:	d001      	beq.n	c005424 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 c005420:	2303      	movs	r3, #3
 c005422:	e0f1      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c005424:	4b7a      	ldr	r3, [pc, #488]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c005426:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c00542a:	f003 0302 	and.w	r3, r3, #2
 c00542e:	2b00      	cmp	r3, #0
 c005430:	d1e8      	bne.n	c005404 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c005432:	687b      	ldr	r3, [r7, #4]
 c005434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c005436:	2b00      	cmp	r3, #0
 c005438:	f000 80e5 	beq.w	c005606 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c00543c:	4b74      	ldr	r3, [pc, #464]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c00543e:	689b      	ldr	r3, [r3, #8]
 c005440:	f003 030c 	and.w	r3, r3, #12
 c005444:	2b0c      	cmp	r3, #12
 c005446:	f000 809f 	beq.w	c005588 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c00544a:	687b      	ldr	r3, [r7, #4]
 c00544c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c00544e:	2b02      	cmp	r3, #2
 c005450:	d166      	bne.n	c005520 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c005452:	4b6f      	ldr	r3, [pc, #444]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c005454:	681b      	ldr	r3, [r3, #0]
 c005456:	4a6e      	ldr	r2, [pc, #440]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c005458:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c00545c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00545e:	f7fe fca3 	bl	c003da8 <HAL_GetTick>
 c005462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c005464:	e00e      	b.n	c005484 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c005466:	f7fe fc9f 	bl	c003da8 <HAL_GetTick>
 c00546a:	4602      	mov	r2, r0
 c00546c:	693b      	ldr	r3, [r7, #16]
 c00546e:	1ad3      	subs	r3, r2, r3
 c005470:	2b02      	cmp	r3, #2
 c005472:	d907      	bls.n	c005484 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c005474:	4b66      	ldr	r3, [pc, #408]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c005476:	681b      	ldr	r3, [r3, #0]
 c005478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00547c:	2b00      	cmp	r3, #0
 c00547e:	d001      	beq.n	c005484 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 c005480:	2303      	movs	r3, #3
 c005482:	e0c1      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c005484:	4b62      	ldr	r3, [pc, #392]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c005486:	681b      	ldr	r3, [r3, #0]
 c005488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00548c:	2b00      	cmp	r3, #0
 c00548e:	d1ea      	bne.n	c005466 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c005490:	4b5f      	ldr	r3, [pc, #380]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c005492:	68da      	ldr	r2, [r3, #12]
 c005494:	4b5f      	ldr	r3, [pc, #380]	; (c005614 <HAL_RCC_OscConfig+0x9c0>)
 c005496:	4013      	ands	r3, r2
 c005498:	687a      	ldr	r2, [r7, #4]
 c00549a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 c00549c:	687a      	ldr	r2, [r7, #4]
 c00549e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 c0054a0:	3a01      	subs	r2, #1
 c0054a2:	0112      	lsls	r2, r2, #4
 c0054a4:	4311      	orrs	r1, r2
 c0054a6:	687a      	ldr	r2, [r7, #4]
 c0054a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 c0054aa:	0212      	lsls	r2, r2, #8
 c0054ac:	4311      	orrs	r1, r2
 c0054ae:	687a      	ldr	r2, [r7, #4]
 c0054b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c0054b2:	0852      	lsrs	r2, r2, #1
 c0054b4:	3a01      	subs	r2, #1
 c0054b6:	0552      	lsls	r2, r2, #21
 c0054b8:	4311      	orrs	r1, r2
 c0054ba:	687a      	ldr	r2, [r7, #4]
 c0054bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 c0054be:	0852      	lsrs	r2, r2, #1
 c0054c0:	3a01      	subs	r2, #1
 c0054c2:	0652      	lsls	r2, r2, #25
 c0054c4:	4311      	orrs	r1, r2
 c0054c6:	687a      	ldr	r2, [r7, #4]
 c0054c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 c0054ca:	06d2      	lsls	r2, r2, #27
 c0054cc:	430a      	orrs	r2, r1
 c0054ce:	4950      	ldr	r1, [pc, #320]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c0054d0:	4313      	orrs	r3, r2
 c0054d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 c0054d4:	4b4e      	ldr	r3, [pc, #312]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c0054d6:	681b      	ldr	r3, [r3, #0]
 c0054d8:	4a4d      	ldr	r2, [pc, #308]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c0054da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c0054de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c0054e0:	4b4b      	ldr	r3, [pc, #300]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c0054e2:	68db      	ldr	r3, [r3, #12]
 c0054e4:	4a4a      	ldr	r2, [pc, #296]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c0054e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c0054ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0054ec:	f7fe fc5c 	bl	c003da8 <HAL_GetTick>
 c0054f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c0054f2:	e00e      	b.n	c005512 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0054f4:	f7fe fc58 	bl	c003da8 <HAL_GetTick>
 c0054f8:	4602      	mov	r2, r0
 c0054fa:	693b      	ldr	r3, [r7, #16]
 c0054fc:	1ad3      	subs	r3, r2, r3
 c0054fe:	2b02      	cmp	r3, #2
 c005500:	d907      	bls.n	c005512 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c005502:	4b43      	ldr	r3, [pc, #268]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c005504:	681b      	ldr	r3, [r3, #0]
 c005506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00550a:	2b00      	cmp	r3, #0
 c00550c:	d101      	bne.n	c005512 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 c00550e:	2303      	movs	r3, #3
 c005510:	e07a      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c005512:	4b3f      	ldr	r3, [pc, #252]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c005514:	681b      	ldr	r3, [r3, #0]
 c005516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00551a:	2b00      	cmp	r3, #0
 c00551c:	d0ea      	beq.n	c0054f4 <HAL_RCC_OscConfig+0x8a0>
 c00551e:	e072      	b.n	c005606 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c005520:	4b3b      	ldr	r3, [pc, #236]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c005522:	681b      	ldr	r3, [r3, #0]
 c005524:	4a3a      	ldr	r2, [pc, #232]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c005526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c00552a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 c00552c:	4b38      	ldr	r3, [pc, #224]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c00552e:	681b      	ldr	r3, [r3, #0]
 c005530:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 c005534:	2b00      	cmp	r3, #0
 c005536:	d105      	bne.n	c005544 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 c005538:	4b35      	ldr	r3, [pc, #212]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c00553a:	68db      	ldr	r3, [r3, #12]
 c00553c:	4a34      	ldr	r2, [pc, #208]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c00553e:	f023 0303 	bic.w	r3, r3, #3
 c005542:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c005544:	4b32      	ldr	r3, [pc, #200]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c005546:	68db      	ldr	r3, [r3, #12]
 c005548:	4a31      	ldr	r2, [pc, #196]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c00554a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 c00554e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c005552:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c005554:	f7fe fc28 	bl	c003da8 <HAL_GetTick>
 c005558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c00555a:	e00e      	b.n	c00557a <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c00555c:	f7fe fc24 	bl	c003da8 <HAL_GetTick>
 c005560:	4602      	mov	r2, r0
 c005562:	693b      	ldr	r3, [r7, #16]
 c005564:	1ad3      	subs	r3, r2, r3
 c005566:	2b02      	cmp	r3, #2
 c005568:	d907      	bls.n	c00557a <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c00556a:	4b29      	ldr	r3, [pc, #164]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c00556c:	681b      	ldr	r3, [r3, #0]
 c00556e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c005572:	2b00      	cmp	r3, #0
 c005574:	d001      	beq.n	c00557a <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 c005576:	2303      	movs	r3, #3
 c005578:	e046      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c00557a:	4b25      	ldr	r3, [pc, #148]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c00557c:	681b      	ldr	r3, [r3, #0]
 c00557e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c005582:	2b00      	cmp	r3, #0
 c005584:	d1ea      	bne.n	c00555c <HAL_RCC_OscConfig+0x908>
 c005586:	e03e      	b.n	c005606 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c005588:	687b      	ldr	r3, [r7, #4]
 c00558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c00558c:	2b01      	cmp	r3, #1
 c00558e:	d101      	bne.n	c005594 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 c005590:	2301      	movs	r3, #1
 c005592:	e039      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 c005594:	4b1e      	ldr	r3, [pc, #120]	; (c005610 <HAL_RCC_OscConfig+0x9bc>)
 c005596:	68db      	ldr	r3, [r3, #12]
 c005598:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c00559a:	697b      	ldr	r3, [r7, #20]
 c00559c:	f003 0203 	and.w	r2, r3, #3
 c0055a0:	687b      	ldr	r3, [r7, #4]
 c0055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0055a4:	429a      	cmp	r2, r3
 c0055a6:	d12c      	bne.n	c005602 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c0055a8:	697b      	ldr	r3, [r7, #20]
 c0055aa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c0055ae:	687b      	ldr	r3, [r7, #4]
 c0055b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0055b2:	3b01      	subs	r3, #1
 c0055b4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c0055b6:	429a      	cmp	r2, r3
 c0055b8:	d123      	bne.n	c005602 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c0055ba:	697b      	ldr	r3, [r7, #20]
 c0055bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 c0055c0:	687b      	ldr	r3, [r7, #4]
 c0055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0055c4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c0055c6:	429a      	cmp	r2, r3
 c0055c8:	d11b      	bne.n	c005602 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c0055ca:	697b      	ldr	r3, [r7, #20]
 c0055cc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 c0055d0:	687b      	ldr	r3, [r7, #4]
 c0055d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c0055d4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c0055d6:	429a      	cmp	r2, r3
 c0055d8:	d113      	bne.n	c005602 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c0055da:	697b      	ldr	r3, [r7, #20]
 c0055dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 c0055e0:	687b      	ldr	r3, [r7, #4]
 c0055e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c0055e4:	085b      	lsrs	r3, r3, #1
 c0055e6:	3b01      	subs	r3, #1
 c0055e8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c0055ea:	429a      	cmp	r2, r3
 c0055ec:	d109      	bne.n	c005602 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c0055ee:	697b      	ldr	r3, [r7, #20]
 c0055f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 c0055f4:	687b      	ldr	r3, [r7, #4]
 c0055f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0055f8:	085b      	lsrs	r3, r3, #1
 c0055fa:	3b01      	subs	r3, #1
 c0055fc:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c0055fe:	429a      	cmp	r2, r3
 c005600:	d001      	beq.n	c005606 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 c005602:	2301      	movs	r3, #1
 c005604:	e000      	b.n	c005608 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 c005606:	2300      	movs	r3, #0
}
 c005608:	4618      	mov	r0, r3
 c00560a:	3720      	adds	r7, #32
 c00560c:	46bd      	mov	sp, r7
 c00560e:	bd80      	pop	{r7, pc}
 c005610:	50021000 	.word	0x50021000
 c005614:	019f800c 	.word	0x019f800c

0c005618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 c005618:	b580      	push	{r7, lr}
 c00561a:	b086      	sub	sp, #24
 c00561c:	af00      	add	r7, sp, #0
 c00561e:	6078      	str	r0, [r7, #4]
 c005620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c005622:	2300      	movs	r3, #0
 c005624:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 c005626:	687b      	ldr	r3, [r7, #4]
 c005628:	2b00      	cmp	r3, #0
 c00562a:	d101      	bne.n	c005630 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 c00562c:	2301      	movs	r3, #1
 c00562e:	e10d      	b.n	c00584c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c005630:	4b88      	ldr	r3, [pc, #544]	; (c005854 <HAL_RCC_ClockConfig+0x23c>)
 c005632:	681b      	ldr	r3, [r3, #0]
 c005634:	f003 030f 	and.w	r3, r3, #15
 c005638:	683a      	ldr	r2, [r7, #0]
 c00563a:	429a      	cmp	r2, r3
 c00563c:	d910      	bls.n	c005660 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c00563e:	4b85      	ldr	r3, [pc, #532]	; (c005854 <HAL_RCC_ClockConfig+0x23c>)
 c005640:	681b      	ldr	r3, [r3, #0]
 c005642:	f023 020f 	bic.w	r2, r3, #15
 c005646:	4983      	ldr	r1, [pc, #524]	; (c005854 <HAL_RCC_ClockConfig+0x23c>)
 c005648:	683b      	ldr	r3, [r7, #0]
 c00564a:	4313      	orrs	r3, r2
 c00564c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c00564e:	4b81      	ldr	r3, [pc, #516]	; (c005854 <HAL_RCC_ClockConfig+0x23c>)
 c005650:	681b      	ldr	r3, [r3, #0]
 c005652:	f003 030f 	and.w	r3, r3, #15
 c005656:	683a      	ldr	r2, [r7, #0]
 c005658:	429a      	cmp	r2, r3
 c00565a:	d001      	beq.n	c005660 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 c00565c:	2301      	movs	r3, #1
 c00565e:	e0f5      	b.n	c00584c <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c005660:	687b      	ldr	r3, [r7, #4]
 c005662:	681b      	ldr	r3, [r3, #0]
 c005664:	f003 0301 	and.w	r3, r3, #1
 c005668:	2b00      	cmp	r3, #0
 c00566a:	f000 8094 	beq.w	c005796 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c00566e:	687b      	ldr	r3, [r7, #4]
 c005670:	685b      	ldr	r3, [r3, #4]
 c005672:	2b03      	cmp	r3, #3
 c005674:	d134      	bne.n	c0056e0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c005676:	4b78      	ldr	r3, [pc, #480]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c005678:	681b      	ldr	r3, [r3, #0]
 c00567a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00567e:	2b00      	cmp	r3, #0
 c005680:	d101      	bne.n	c005686 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 c005682:	2301      	movs	r3, #1
 c005684:	e0e2      	b.n	c00584c <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 c005686:	f000 fa2b 	bl	c005ae0 <RCC_GetSysClockFreqFromPLLSource>
 c00568a:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 c00568c:	693b      	ldr	r3, [r7, #16]
 c00568e:	4a73      	ldr	r2, [pc, #460]	; (c00585c <HAL_RCC_ClockConfig+0x244>)
 c005690:	4293      	cmp	r3, r2
 c005692:	d956      	bls.n	c005742 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c005694:	4b70      	ldr	r3, [pc, #448]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c005696:	689b      	ldr	r3, [r3, #8]
 c005698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c00569c:	2b00      	cmp	r3, #0
 c00569e:	d10a      	bne.n	c0056b6 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c0056a0:	4b6d      	ldr	r3, [pc, #436]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c0056a2:	689b      	ldr	r3, [r3, #8]
 c0056a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c0056a8:	4a6b      	ldr	r2, [pc, #428]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c0056aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0056ae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c0056b0:	2380      	movs	r3, #128	; 0x80
 c0056b2:	617b      	str	r3, [r7, #20]
 c0056b4:	e045      	b.n	c005742 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c0056b6:	687b      	ldr	r3, [r7, #4]
 c0056b8:	681b      	ldr	r3, [r3, #0]
 c0056ba:	f003 0302 	and.w	r3, r3, #2
 c0056be:	2b00      	cmp	r3, #0
 c0056c0:	d03f      	beq.n	c005742 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 c0056c2:	687b      	ldr	r3, [r7, #4]
 c0056c4:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c0056c6:	2b00      	cmp	r3, #0
 c0056c8:	d13b      	bne.n	c005742 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c0056ca:	4b63      	ldr	r3, [pc, #396]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c0056cc:	689b      	ldr	r3, [r3, #8]
 c0056ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c0056d2:	4a61      	ldr	r2, [pc, #388]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c0056d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0056d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c0056da:	2380      	movs	r3, #128	; 0x80
 c0056dc:	617b      	str	r3, [r7, #20]
 c0056de:	e030      	b.n	c005742 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c0056e0:	687b      	ldr	r3, [r7, #4]
 c0056e2:	685b      	ldr	r3, [r3, #4]
 c0056e4:	2b02      	cmp	r3, #2
 c0056e6:	d107      	bne.n	c0056f8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0056e8:	4b5b      	ldr	r3, [pc, #364]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c0056ea:	681b      	ldr	r3, [r3, #0]
 c0056ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0056f0:	2b00      	cmp	r3, #0
 c0056f2:	d115      	bne.n	c005720 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c0056f4:	2301      	movs	r3, #1
 c0056f6:	e0a9      	b.n	c00584c <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c0056f8:	687b      	ldr	r3, [r7, #4]
 c0056fa:	685b      	ldr	r3, [r3, #4]
 c0056fc:	2b00      	cmp	r3, #0
 c0056fe:	d107      	bne.n	c005710 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c005700:	4b55      	ldr	r3, [pc, #340]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c005702:	681b      	ldr	r3, [r3, #0]
 c005704:	f003 0302 	and.w	r3, r3, #2
 c005708:	2b00      	cmp	r3, #0
 c00570a:	d109      	bne.n	c005720 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c00570c:	2301      	movs	r3, #1
 c00570e:	e09d      	b.n	c00584c <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c005710:	4b51      	ldr	r3, [pc, #324]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c005712:	681b      	ldr	r3, [r3, #0]
 c005714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c005718:	2b00      	cmp	r3, #0
 c00571a:	d101      	bne.n	c005720 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c00571c:	2301      	movs	r3, #1
 c00571e:	e095      	b.n	c00584c <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 c005720:	f000 f8a2 	bl	c005868 <HAL_RCC_GetSysClockFreq>
 c005724:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 c005726:	693b      	ldr	r3, [r7, #16]
 c005728:	4a4c      	ldr	r2, [pc, #304]	; (c00585c <HAL_RCC_ClockConfig+0x244>)
 c00572a:	4293      	cmp	r3, r2
 c00572c:	d909      	bls.n	c005742 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c00572e:	4b4a      	ldr	r3, [pc, #296]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c005730:	689b      	ldr	r3, [r3, #8]
 c005732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c005736:	4a48      	ldr	r2, [pc, #288]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c005738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c00573c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 c00573e:	2380      	movs	r3, #128	; 0x80
 c005740:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c005742:	4b45      	ldr	r3, [pc, #276]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c005744:	689b      	ldr	r3, [r3, #8]
 c005746:	f023 0203 	bic.w	r2, r3, #3
 c00574a:	687b      	ldr	r3, [r7, #4]
 c00574c:	685b      	ldr	r3, [r3, #4]
 c00574e:	4942      	ldr	r1, [pc, #264]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c005750:	4313      	orrs	r3, r2
 c005752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c005754:	f7fe fb28 	bl	c003da8 <HAL_GetTick>
 c005758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c00575a:	e013      	b.n	c005784 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c00575c:	f7fe fb24 	bl	c003da8 <HAL_GetTick>
 c005760:	4602      	mov	r2, r0
 c005762:	68fb      	ldr	r3, [r7, #12]
 c005764:	1ad3      	subs	r3, r2, r3
 c005766:	f241 3288 	movw	r2, #5000	; 0x1388
 c00576a:	4293      	cmp	r3, r2
 c00576c:	d90a      	bls.n	c005784 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c00576e:	4b3a      	ldr	r3, [pc, #232]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c005770:	689b      	ldr	r3, [r3, #8]
 c005772:	f003 020c 	and.w	r2, r3, #12
 c005776:	687b      	ldr	r3, [r7, #4]
 c005778:	685b      	ldr	r3, [r3, #4]
 c00577a:	009b      	lsls	r3, r3, #2
 c00577c:	429a      	cmp	r2, r3
 c00577e:	d001      	beq.n	c005784 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 c005780:	2303      	movs	r3, #3
 c005782:	e063      	b.n	c00584c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c005784:	4b34      	ldr	r3, [pc, #208]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c005786:	689b      	ldr	r3, [r3, #8]
 c005788:	f003 020c 	and.w	r2, r3, #12
 c00578c:	687b      	ldr	r3, [r7, #4]
 c00578e:	685b      	ldr	r3, [r3, #4]
 c005790:	009b      	lsls	r3, r3, #2
 c005792:	429a      	cmp	r2, r3
 c005794:	d1e2      	bne.n	c00575c <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c005796:	687b      	ldr	r3, [r7, #4]
 c005798:	681b      	ldr	r3, [r3, #0]
 c00579a:	f003 0302 	and.w	r3, r3, #2
 c00579e:	2b00      	cmp	r3, #0
 c0057a0:	d009      	beq.n	c0057b6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c0057a2:	4b2d      	ldr	r3, [pc, #180]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c0057a4:	689b      	ldr	r3, [r3, #8]
 c0057a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c0057aa:	687b      	ldr	r3, [r7, #4]
 c0057ac:	689b      	ldr	r3, [r3, #8]
 c0057ae:	492a      	ldr	r1, [pc, #168]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c0057b0:	4313      	orrs	r3, r2
 c0057b2:	608b      	str	r3, [r1, #8]
 c0057b4:	e008      	b.n	c0057c8 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 c0057b6:	697b      	ldr	r3, [r7, #20]
 c0057b8:	2b80      	cmp	r3, #128	; 0x80
 c0057ba:	d105      	bne.n	c0057c8 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c0057bc:	4b26      	ldr	r3, [pc, #152]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c0057be:	689b      	ldr	r3, [r3, #8]
 c0057c0:	4a25      	ldr	r2, [pc, #148]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c0057c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c0057c6:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c0057c8:	4b22      	ldr	r3, [pc, #136]	; (c005854 <HAL_RCC_ClockConfig+0x23c>)
 c0057ca:	681b      	ldr	r3, [r3, #0]
 c0057cc:	f003 030f 	and.w	r3, r3, #15
 c0057d0:	683a      	ldr	r2, [r7, #0]
 c0057d2:	429a      	cmp	r2, r3
 c0057d4:	d210      	bcs.n	c0057f8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c0057d6:	4b1f      	ldr	r3, [pc, #124]	; (c005854 <HAL_RCC_ClockConfig+0x23c>)
 c0057d8:	681b      	ldr	r3, [r3, #0]
 c0057da:	f023 020f 	bic.w	r2, r3, #15
 c0057de:	491d      	ldr	r1, [pc, #116]	; (c005854 <HAL_RCC_ClockConfig+0x23c>)
 c0057e0:	683b      	ldr	r3, [r7, #0]
 c0057e2:	4313      	orrs	r3, r2
 c0057e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c0057e6:	4b1b      	ldr	r3, [pc, #108]	; (c005854 <HAL_RCC_ClockConfig+0x23c>)
 c0057e8:	681b      	ldr	r3, [r3, #0]
 c0057ea:	f003 030f 	and.w	r3, r3, #15
 c0057ee:	683a      	ldr	r2, [r7, #0]
 c0057f0:	429a      	cmp	r2, r3
 c0057f2:	d001      	beq.n	c0057f8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 c0057f4:	2301      	movs	r3, #1
 c0057f6:	e029      	b.n	c00584c <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c0057f8:	687b      	ldr	r3, [r7, #4]
 c0057fa:	681b      	ldr	r3, [r3, #0]
 c0057fc:	f003 0304 	and.w	r3, r3, #4
 c005800:	2b00      	cmp	r3, #0
 c005802:	d008      	beq.n	c005816 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c005804:	4b14      	ldr	r3, [pc, #80]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c005806:	689b      	ldr	r3, [r3, #8]
 c005808:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c00580c:	687b      	ldr	r3, [r7, #4]
 c00580e:	68db      	ldr	r3, [r3, #12]
 c005810:	4911      	ldr	r1, [pc, #68]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c005812:	4313      	orrs	r3, r2
 c005814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c005816:	687b      	ldr	r3, [r7, #4]
 c005818:	681b      	ldr	r3, [r3, #0]
 c00581a:	f003 0308 	and.w	r3, r3, #8
 c00581e:	2b00      	cmp	r3, #0
 c005820:	d009      	beq.n	c005836 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c005822:	4b0d      	ldr	r3, [pc, #52]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c005824:	689b      	ldr	r3, [r3, #8]
 c005826:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 c00582a:	687b      	ldr	r3, [r7, #4]
 c00582c:	691b      	ldr	r3, [r3, #16]
 c00582e:	00db      	lsls	r3, r3, #3
 c005830:	4909      	ldr	r1, [pc, #36]	; (c005858 <HAL_RCC_ClockConfig+0x240>)
 c005832:	4313      	orrs	r3, r2
 c005834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c005836:	f000 f8b3 	bl	c0059a0 <HAL_RCC_GetHCLKFreq>
 c00583a:	4603      	mov	r3, r0
 c00583c:	4a08      	ldr	r2, [pc, #32]	; (c005860 <HAL_RCC_ClockConfig+0x248>)
 c00583e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 c005840:	4b08      	ldr	r3, [pc, #32]	; (c005864 <HAL_RCC_ClockConfig+0x24c>)
 c005842:	681b      	ldr	r3, [r3, #0]
 c005844:	4618      	mov	r0, r3
 c005846:	f7fe fa5f 	bl	c003d08 <HAL_InitTick>
 c00584a:	4603      	mov	r3, r0
}
 c00584c:	4618      	mov	r0, r3
 c00584e:	3718      	adds	r7, #24
 c005850:	46bd      	mov	sp, r7
 c005852:	bd80      	pop	{r7, pc}
 c005854:	50022000 	.word	0x50022000
 c005858:	50021000 	.word	0x50021000
 c00585c:	04c4b400 	.word	0x04c4b400
 c005860:	30000028 	.word	0x30000028
 c005864:	3000002c 	.word	0x3000002c

0c005868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c005868:	b480      	push	{r7}
 c00586a:	b089      	sub	sp, #36	; 0x24
 c00586c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c00586e:	2300      	movs	r3, #0
 c005870:	61fb      	str	r3, [r7, #28]
 c005872:	2300      	movs	r3, #0
 c005874:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c005876:	4b47      	ldr	r3, [pc, #284]	; (c005994 <HAL_RCC_GetSysClockFreq+0x12c>)
 c005878:	689b      	ldr	r3, [r3, #8]
 c00587a:	f003 030c 	and.w	r3, r3, #12
 c00587e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c005880:	4b44      	ldr	r3, [pc, #272]	; (c005994 <HAL_RCC_GetSysClockFreq+0x12c>)
 c005882:	68db      	ldr	r3, [r3, #12]
 c005884:	f003 0303 	and.w	r3, r3, #3
 c005888:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c00588a:	693b      	ldr	r3, [r7, #16]
 c00588c:	2b00      	cmp	r3, #0
 c00588e:	d005      	beq.n	c00589c <HAL_RCC_GetSysClockFreq+0x34>
 c005890:	693b      	ldr	r3, [r7, #16]
 c005892:	2b0c      	cmp	r3, #12
 c005894:	d121      	bne.n	c0058da <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c005896:	68fb      	ldr	r3, [r7, #12]
 c005898:	2b01      	cmp	r3, #1
 c00589a:	d11e      	bne.n	c0058da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c00589c:	4b3d      	ldr	r3, [pc, #244]	; (c005994 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00589e:	681b      	ldr	r3, [r3, #0]
 c0058a0:	f003 0308 	and.w	r3, r3, #8
 c0058a4:	2b00      	cmp	r3, #0
 c0058a6:	d107      	bne.n	c0058b8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c0058a8:	4b3a      	ldr	r3, [pc, #232]	; (c005994 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0058aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0058ae:	0a1b      	lsrs	r3, r3, #8
 c0058b0:	f003 030f 	and.w	r3, r3, #15
 c0058b4:	61fb      	str	r3, [r7, #28]
 c0058b6:	e005      	b.n	c0058c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c0058b8:	4b36      	ldr	r3, [pc, #216]	; (c005994 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0058ba:	681b      	ldr	r3, [r3, #0]
 c0058bc:	091b      	lsrs	r3, r3, #4
 c0058be:	f003 030f 	and.w	r3, r3, #15
 c0058c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c0058c4:	4a34      	ldr	r2, [pc, #208]	; (c005998 <HAL_RCC_GetSysClockFreq+0x130>)
 c0058c6:	69fb      	ldr	r3, [r7, #28]
 c0058c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0058cc:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0058ce:	693b      	ldr	r3, [r7, #16]
 c0058d0:	2b00      	cmp	r3, #0
 c0058d2:	d10d      	bne.n	c0058f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c0058d4:	69fb      	ldr	r3, [r7, #28]
 c0058d6:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0058d8:	e00a      	b.n	c0058f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c0058da:	693b      	ldr	r3, [r7, #16]
 c0058dc:	2b04      	cmp	r3, #4
 c0058de:	d102      	bne.n	c0058e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c0058e0:	4b2e      	ldr	r3, [pc, #184]	; (c00599c <HAL_RCC_GetSysClockFreq+0x134>)
 c0058e2:	61bb      	str	r3, [r7, #24]
 c0058e4:	e004      	b.n	c0058f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c0058e6:	693b      	ldr	r3, [r7, #16]
 c0058e8:	2b08      	cmp	r3, #8
 c0058ea:	d101      	bne.n	c0058f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c0058ec:	4b2b      	ldr	r3, [pc, #172]	; (c00599c <HAL_RCC_GetSysClockFreq+0x134>)
 c0058ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c0058f0:	693b      	ldr	r3, [r7, #16]
 c0058f2:	2b0c      	cmp	r3, #12
 c0058f4:	d146      	bne.n	c005984 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c0058f6:	4b27      	ldr	r3, [pc, #156]	; (c005994 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0058f8:	68db      	ldr	r3, [r3, #12]
 c0058fa:	f003 0303 	and.w	r3, r3, #3
 c0058fe:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c005900:	4b24      	ldr	r3, [pc, #144]	; (c005994 <HAL_RCC_GetSysClockFreq+0x12c>)
 c005902:	68db      	ldr	r3, [r3, #12]
 c005904:	091b      	lsrs	r3, r3, #4
 c005906:	f003 030f 	and.w	r3, r3, #15
 c00590a:	3301      	adds	r3, #1
 c00590c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 c00590e:	68bb      	ldr	r3, [r7, #8]
 c005910:	2b02      	cmp	r3, #2
 c005912:	d003      	beq.n	c00591c <HAL_RCC_GetSysClockFreq+0xb4>
 c005914:	68bb      	ldr	r3, [r7, #8]
 c005916:	2b03      	cmp	r3, #3
 c005918:	d00d      	beq.n	c005936 <HAL_RCC_GetSysClockFreq+0xce>
 c00591a:	e019      	b.n	c005950 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00591c:	4a1f      	ldr	r2, [pc, #124]	; (c00599c <HAL_RCC_GetSysClockFreq+0x134>)
 c00591e:	687b      	ldr	r3, [r7, #4]
 c005920:	fbb2 f3f3 	udiv	r3, r2, r3
 c005924:	4a1b      	ldr	r2, [pc, #108]	; (c005994 <HAL_RCC_GetSysClockFreq+0x12c>)
 c005926:	68d2      	ldr	r2, [r2, #12]
 c005928:	0a12      	lsrs	r2, r2, #8
 c00592a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c00592e:	fb02 f303 	mul.w	r3, r2, r3
 c005932:	617b      	str	r3, [r7, #20]
        break;
 c005934:	e019      	b.n	c00596a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c005936:	4a19      	ldr	r2, [pc, #100]	; (c00599c <HAL_RCC_GetSysClockFreq+0x134>)
 c005938:	687b      	ldr	r3, [r7, #4]
 c00593a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00593e:	4a15      	ldr	r2, [pc, #84]	; (c005994 <HAL_RCC_GetSysClockFreq+0x12c>)
 c005940:	68d2      	ldr	r2, [r2, #12]
 c005942:	0a12      	lsrs	r2, r2, #8
 c005944:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c005948:	fb02 f303 	mul.w	r3, r2, r3
 c00594c:	617b      	str	r3, [r7, #20]
        break;
 c00594e:	e00c      	b.n	c00596a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c005950:	69fa      	ldr	r2, [r7, #28]
 c005952:	687b      	ldr	r3, [r7, #4]
 c005954:	fbb2 f3f3 	udiv	r3, r2, r3
 c005958:	4a0e      	ldr	r2, [pc, #56]	; (c005994 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00595a:	68d2      	ldr	r2, [r2, #12]
 c00595c:	0a12      	lsrs	r2, r2, #8
 c00595e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c005962:	fb02 f303 	mul.w	r3, r2, r3
 c005966:	617b      	str	r3, [r7, #20]
        break;
 c005968:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c00596a:	4b0a      	ldr	r3, [pc, #40]	; (c005994 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00596c:	68db      	ldr	r3, [r3, #12]
 c00596e:	0e5b      	lsrs	r3, r3, #25
 c005970:	f003 0303 	and.w	r3, r3, #3
 c005974:	3301      	adds	r3, #1
 c005976:	005b      	lsls	r3, r3, #1
 c005978:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 c00597a:	697a      	ldr	r2, [r7, #20]
 c00597c:	683b      	ldr	r3, [r7, #0]
 c00597e:	fbb2 f3f3 	udiv	r3, r2, r3
 c005982:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 c005984:	69bb      	ldr	r3, [r7, #24]
}
 c005986:	4618      	mov	r0, r3
 c005988:	3724      	adds	r7, #36	; 0x24
 c00598a:	46bd      	mov	sp, r7
 c00598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005990:	4770      	bx	lr
 c005992:	bf00      	nop
 c005994:	50021000 	.word	0x50021000
 c005998:	0c007e04 	.word	0x0c007e04
 c00599c:	00f42400 	.word	0x00f42400

0c0059a0 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c0059a0:	b580      	push	{r7, lr}
 c0059a2:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c0059a4:	f7ff ff60 	bl	c005868 <HAL_RCC_GetSysClockFreq>
 c0059a8:	4602      	mov	r2, r0
 c0059aa:	4b05      	ldr	r3, [pc, #20]	; (c0059c0 <HAL_RCC_GetHCLKFreq+0x20>)
 c0059ac:	689b      	ldr	r3, [r3, #8]
 c0059ae:	091b      	lsrs	r3, r3, #4
 c0059b0:	f003 030f 	and.w	r3, r3, #15
 c0059b4:	4903      	ldr	r1, [pc, #12]	; (c0059c4 <HAL_RCC_GetHCLKFreq+0x24>)
 c0059b6:	5ccb      	ldrb	r3, [r1, r3]
 c0059b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 c0059bc:	4618      	mov	r0, r3
 c0059be:	bd80      	pop	{r7, pc}
 c0059c0:	50021000 	.word	0x50021000
 c0059c4:	0c007dec 	.word	0x0c007dec

0c0059c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c0059c8:	b580      	push	{r7, lr}
 c0059ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c0059cc:	f7ff ffe8 	bl	c0059a0 <HAL_RCC_GetHCLKFreq>
 c0059d0:	4602      	mov	r2, r0
 c0059d2:	4b05      	ldr	r3, [pc, #20]	; (c0059e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 c0059d4:	689b      	ldr	r3, [r3, #8]
 c0059d6:	0a1b      	lsrs	r3, r3, #8
 c0059d8:	f003 0307 	and.w	r3, r3, #7
 c0059dc:	4903      	ldr	r1, [pc, #12]	; (c0059ec <HAL_RCC_GetPCLK1Freq+0x24>)
 c0059de:	5ccb      	ldrb	r3, [r1, r3]
 c0059e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 c0059e4:	4618      	mov	r0, r3
 c0059e6:	bd80      	pop	{r7, pc}
 c0059e8:	50021000 	.word	0x50021000
 c0059ec:	0c007dfc 	.word	0x0c007dfc

0c0059f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c0059f0:	b580      	push	{r7, lr}
 c0059f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c0059f4:	f7ff ffd4 	bl	c0059a0 <HAL_RCC_GetHCLKFreq>
 c0059f8:	4602      	mov	r2, r0
 c0059fa:	4b05      	ldr	r3, [pc, #20]	; (c005a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 c0059fc:	689b      	ldr	r3, [r3, #8]
 c0059fe:	0adb      	lsrs	r3, r3, #11
 c005a00:	f003 0307 	and.w	r3, r3, #7
 c005a04:	4903      	ldr	r1, [pc, #12]	; (c005a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 c005a06:	5ccb      	ldrb	r3, [r1, r3]
 c005a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 c005a0c:	4618      	mov	r0, r3
 c005a0e:	bd80      	pop	{r7, pc}
 c005a10:	50021000 	.word	0x50021000
 c005a14:	0c007dfc 	.word	0x0c007dfc

0c005a18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c005a18:	b580      	push	{r7, lr}
 c005a1a:	b086      	sub	sp, #24
 c005a1c:	af00      	add	r7, sp, #0
 c005a1e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 c005a20:	2300      	movs	r3, #0
 c005a22:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c005a24:	4b2c      	ldr	r3, [pc, #176]	; (c005ad8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c005a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c005a2c:	2b00      	cmp	r3, #0
 c005a2e:	d003      	beq.n	c005a38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c005a30:	f7ff f862 	bl	c004af8 <HAL_PWREx_GetVoltageRange>
 c005a34:	6138      	str	r0, [r7, #16]
 c005a36:	e014      	b.n	c005a62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c005a38:	4b27      	ldr	r3, [pc, #156]	; (c005ad8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c005a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005a3c:	4a26      	ldr	r2, [pc, #152]	; (c005ad8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c005a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c005a42:	6593      	str	r3, [r2, #88]	; 0x58
 c005a44:	4b24      	ldr	r3, [pc, #144]	; (c005ad8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c005a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c005a4c:	60fb      	str	r3, [r7, #12]
 c005a4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c005a50:	f7ff f852 	bl	c004af8 <HAL_PWREx_GetVoltageRange>
 c005a54:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 c005a56:	4b20      	ldr	r3, [pc, #128]	; (c005ad8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c005a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005a5a:	4a1f      	ldr	r2, [pc, #124]	; (c005ad8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c005a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c005a60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c005a62:	693b      	ldr	r3, [r7, #16]
 c005a64:	2b00      	cmp	r3, #0
 c005a66:	d003      	beq.n	c005a70 <RCC_SetFlashLatencyFromMSIRange+0x58>
 c005a68:	693b      	ldr	r3, [r7, #16]
 c005a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c005a6e:	d10b      	bne.n	c005a88 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 c005a70:	687b      	ldr	r3, [r7, #4]
 c005a72:	2b80      	cmp	r3, #128	; 0x80
 c005a74:	d919      	bls.n	c005aaa <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 c005a76:	687b      	ldr	r3, [r7, #4]
 c005a78:	2ba0      	cmp	r3, #160	; 0xa0
 c005a7a:	d902      	bls.n	c005a82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c005a7c:	2302      	movs	r3, #2
 c005a7e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c005a80:	e013      	b.n	c005aaa <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c005a82:	2301      	movs	r3, #1
 c005a84:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c005a86:	e010      	b.n	c005aaa <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c005a88:	687b      	ldr	r3, [r7, #4]
 c005a8a:	2b80      	cmp	r3, #128	; 0x80
 c005a8c:	d902      	bls.n	c005a94 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 c005a8e:	2303      	movs	r3, #3
 c005a90:	617b      	str	r3, [r7, #20]
 c005a92:	e00a      	b.n	c005aaa <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c005a94:	687b      	ldr	r3, [r7, #4]
 c005a96:	2b80      	cmp	r3, #128	; 0x80
 c005a98:	d102      	bne.n	c005aa0 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c005a9a:	2302      	movs	r3, #2
 c005a9c:	617b      	str	r3, [r7, #20]
 c005a9e:	e004      	b.n	c005aaa <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 c005aa0:	687b      	ldr	r3, [r7, #4]
 c005aa2:	2b70      	cmp	r3, #112	; 0x70
 c005aa4:	d101      	bne.n	c005aaa <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c005aa6:	2301      	movs	r3, #1
 c005aa8:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c005aaa:	4b0c      	ldr	r3, [pc, #48]	; (c005adc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c005aac:	681b      	ldr	r3, [r3, #0]
 c005aae:	f023 020f 	bic.w	r2, r3, #15
 c005ab2:	490a      	ldr	r1, [pc, #40]	; (c005adc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c005ab4:	697b      	ldr	r3, [r7, #20]
 c005ab6:	4313      	orrs	r3, r2
 c005ab8:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c005aba:	4b08      	ldr	r3, [pc, #32]	; (c005adc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c005abc:	681b      	ldr	r3, [r3, #0]
 c005abe:	f003 030f 	and.w	r3, r3, #15
 c005ac2:	697a      	ldr	r2, [r7, #20]
 c005ac4:	429a      	cmp	r2, r3
 c005ac6:	d001      	beq.n	c005acc <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 c005ac8:	2301      	movs	r3, #1
 c005aca:	e000      	b.n	c005ace <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 c005acc:	2300      	movs	r3, #0
}
 c005ace:	4618      	mov	r0, r3
 c005ad0:	3718      	adds	r7, #24
 c005ad2:	46bd      	mov	sp, r7
 c005ad4:	bd80      	pop	{r7, pc}
 c005ad6:	bf00      	nop
 c005ad8:	50021000 	.word	0x50021000
 c005adc:	50022000 	.word	0x50022000

0c005ae0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 c005ae0:	b480      	push	{r7}
 c005ae2:	b087      	sub	sp, #28
 c005ae4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 c005ae6:	2300      	movs	r3, #0
 c005ae8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 c005aea:	4b36      	ldr	r3, [pc, #216]	; (c005bc4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c005aec:	68db      	ldr	r3, [r3, #12]
 c005aee:	f003 0303 	and.w	r3, r3, #3
 c005af2:	2b01      	cmp	r3, #1
 c005af4:	d118      	bne.n	c005b28 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c005af6:	4b33      	ldr	r3, [pc, #204]	; (c005bc4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c005af8:	681b      	ldr	r3, [r3, #0]
 c005afa:	f003 0308 	and.w	r3, r3, #8
 c005afe:	2b00      	cmp	r3, #0
 c005b00:	d107      	bne.n	c005b12 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c005b02:	4b30      	ldr	r3, [pc, #192]	; (c005bc4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c005b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c005b08:	0a1b      	lsrs	r3, r3, #8
 c005b0a:	f003 030f 	and.w	r3, r3, #15
 c005b0e:	617b      	str	r3, [r7, #20]
 c005b10:	e005      	b.n	c005b1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c005b12:	4b2c      	ldr	r3, [pc, #176]	; (c005bc4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c005b14:	681b      	ldr	r3, [r3, #0]
 c005b16:	091b      	lsrs	r3, r3, #4
 c005b18:	f003 030f 	and.w	r3, r3, #15
 c005b1c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c005b1e:	4a2a      	ldr	r2, [pc, #168]	; (c005bc8 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 c005b20:	697b      	ldr	r3, [r7, #20]
 c005b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005b26:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c005b28:	4b26      	ldr	r3, [pc, #152]	; (c005bc4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c005b2a:	68db      	ldr	r3, [r3, #12]
 c005b2c:	f003 0303 	and.w	r3, r3, #3
 c005b30:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c005b32:	4b24      	ldr	r3, [pc, #144]	; (c005bc4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c005b34:	68db      	ldr	r3, [r3, #12]
 c005b36:	091b      	lsrs	r3, r3, #4
 c005b38:	f003 030f 	and.w	r3, r3, #15
 c005b3c:	3301      	adds	r3, #1
 c005b3e:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 c005b40:	68fb      	ldr	r3, [r7, #12]
 c005b42:	2b02      	cmp	r3, #2
 c005b44:	d003      	beq.n	c005b4e <RCC_GetSysClockFreqFromPLLSource+0x6e>
 c005b46:	68fb      	ldr	r3, [r7, #12]
 c005b48:	2b03      	cmp	r3, #3
 c005b4a:	d00d      	beq.n	c005b68 <RCC_GetSysClockFreqFromPLLSource+0x88>
 c005b4c:	e019      	b.n	c005b82 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c005b4e:	4a1f      	ldr	r2, [pc, #124]	; (c005bcc <RCC_GetSysClockFreqFromPLLSource+0xec>)
 c005b50:	68bb      	ldr	r3, [r7, #8]
 c005b52:	fbb2 f3f3 	udiv	r3, r2, r3
 c005b56:	4a1b      	ldr	r2, [pc, #108]	; (c005bc4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c005b58:	68d2      	ldr	r2, [r2, #12]
 c005b5a:	0a12      	lsrs	r2, r2, #8
 c005b5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c005b60:	fb02 f303 	mul.w	r3, r2, r3
 c005b64:	613b      	str	r3, [r7, #16]
      break;
 c005b66:	e019      	b.n	c005b9c <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c005b68:	4a18      	ldr	r2, [pc, #96]	; (c005bcc <RCC_GetSysClockFreqFromPLLSource+0xec>)
 c005b6a:	68bb      	ldr	r3, [r7, #8]
 c005b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 c005b70:	4a14      	ldr	r2, [pc, #80]	; (c005bc4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c005b72:	68d2      	ldr	r2, [r2, #12]
 c005b74:	0a12      	lsrs	r2, r2, #8
 c005b76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c005b7a:	fb02 f303 	mul.w	r3, r2, r3
 c005b7e:	613b      	str	r3, [r7, #16]
      break;
 c005b80:	e00c      	b.n	c005b9c <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c005b82:	697a      	ldr	r2, [r7, #20]
 c005b84:	68bb      	ldr	r3, [r7, #8]
 c005b86:	fbb2 f3f3 	udiv	r3, r2, r3
 c005b8a:	4a0e      	ldr	r2, [pc, #56]	; (c005bc4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c005b8c:	68d2      	ldr	r2, [r2, #12]
 c005b8e:	0a12      	lsrs	r2, r2, #8
 c005b90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c005b94:	fb02 f303 	mul.w	r3, r2, r3
 c005b98:	613b      	str	r3, [r7, #16]
      break;
 c005b9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c005b9c:	4b09      	ldr	r3, [pc, #36]	; (c005bc4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c005b9e:	68db      	ldr	r3, [r3, #12]
 c005ba0:	0e5b      	lsrs	r3, r3, #25
 c005ba2:	f003 0303 	and.w	r3, r3, #3
 c005ba6:	3301      	adds	r3, #1
 c005ba8:	005b      	lsls	r3, r3, #1
 c005baa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 c005bac:	693a      	ldr	r2, [r7, #16]
 c005bae:	687b      	ldr	r3, [r7, #4]
 c005bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 c005bb4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 c005bb6:	683b      	ldr	r3, [r7, #0]
}
 c005bb8:	4618      	mov	r0, r3
 c005bba:	371c      	adds	r7, #28
 c005bbc:	46bd      	mov	sp, r7
 c005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005bc2:	4770      	bx	lr
 c005bc4:	50021000 	.word	0x50021000
 c005bc8:	0c007e04 	.word	0x0c007e04
 c005bcc:	00f42400 	.word	0x00f42400

0c005bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 c005bd0:	b580      	push	{r7, lr}
 c005bd2:	b088      	sub	sp, #32
 c005bd4:	af00      	add	r7, sp, #0
 c005bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c005bd8:	2300      	movs	r3, #0
 c005bda:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c005bdc:	2300      	movs	r3, #0
 c005bde:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c005be0:	687b      	ldr	r3, [r7, #4]
 c005be2:	681b      	ldr	r3, [r3, #0]
 c005be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c005be8:	2b00      	cmp	r3, #0
 c005bea:	d040      	beq.n	c005c6e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 c005bec:	687b      	ldr	r3, [r7, #4]
 c005bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c005bf0:	2b80      	cmp	r3, #128	; 0x80
 c005bf2:	d02a      	beq.n	c005c4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c005bf4:	2b80      	cmp	r3, #128	; 0x80
 c005bf6:	d825      	bhi.n	c005c44 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c005bf8:	2b60      	cmp	r3, #96	; 0x60
 c005bfa:	d026      	beq.n	c005c4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c005bfc:	2b60      	cmp	r3, #96	; 0x60
 c005bfe:	d821      	bhi.n	c005c44 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c005c00:	2b40      	cmp	r3, #64	; 0x40
 c005c02:	d006      	beq.n	c005c12 <HAL_RCCEx_PeriphCLKConfig+0x42>
 c005c04:	2b40      	cmp	r3, #64	; 0x40
 c005c06:	d81d      	bhi.n	c005c44 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c005c08:	2b00      	cmp	r3, #0
 c005c0a:	d009      	beq.n	c005c20 <HAL_RCCEx_PeriphCLKConfig+0x50>
 c005c0c:	2b20      	cmp	r3, #32
 c005c0e:	d010      	beq.n	c005c32 <HAL_RCCEx_PeriphCLKConfig+0x62>
 c005c10:	e018      	b.n	c005c44 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c005c12:	4b8f      	ldr	r3, [pc, #572]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005c14:	68db      	ldr	r3, [r3, #12]
 c005c16:	4a8e      	ldr	r2, [pc, #568]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c005c1c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c005c1e:	e015      	b.n	c005c4c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c005c20:	687b      	ldr	r3, [r7, #4]
 c005c22:	3304      	adds	r3, #4
 c005c24:	2100      	movs	r1, #0
 c005c26:	4618      	mov	r0, r3
 c005c28:	f000 fb56 	bl	c0062d8 <RCCEx_PLLSAI1_Config>
 c005c2c:	4603      	mov	r3, r0
 c005c2e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c005c30:	e00c      	b.n	c005c4c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c005c32:	687b      	ldr	r3, [r7, #4]
 c005c34:	3320      	adds	r3, #32
 c005c36:	2100      	movs	r1, #0
 c005c38:	4618      	mov	r0, r3
 c005c3a:	f000 fc33 	bl	c0064a4 <RCCEx_PLLSAI2_Config>
 c005c3e:	4603      	mov	r3, r0
 c005c40:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c005c42:	e003      	b.n	c005c4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005c44:	2301      	movs	r3, #1
 c005c46:	77fb      	strb	r3, [r7, #31]
        break;
 c005c48:	e000      	b.n	c005c4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 c005c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005c4c:	7ffb      	ldrb	r3, [r7, #31]
 c005c4e:	2b00      	cmp	r3, #0
 c005c50:	d10b      	bne.n	c005c6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c005c52:	4b7f      	ldr	r3, [pc, #508]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005c54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c005c58:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 c005c5c:	687b      	ldr	r3, [r7, #4]
 c005c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c005c60:	497b      	ldr	r1, [pc, #492]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005c62:	4313      	orrs	r3, r2
 c005c64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c005c68:	e001      	b.n	c005c6e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005c6a:	7ffb      	ldrb	r3, [r7, #31]
 c005c6c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c005c6e:	687b      	ldr	r3, [r7, #4]
 c005c70:	681b      	ldr	r3, [r3, #0]
 c005c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c005c76:	2b00      	cmp	r3, #0
 c005c78:	d047      	beq.n	c005d0a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 c005c7a:	687b      	ldr	r3, [r7, #4]
 c005c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c005c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005c82:	d030      	beq.n	c005ce6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 c005c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005c88:	d82a      	bhi.n	c005ce0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c005c8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c005c8e:	d02a      	beq.n	c005ce6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 c005c90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c005c94:	d824      	bhi.n	c005ce0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c005c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c005c9a:	d008      	beq.n	c005cae <HAL_RCCEx_PeriphCLKConfig+0xde>
 c005c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c005ca0:	d81e      	bhi.n	c005ce0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c005ca2:	2b00      	cmp	r3, #0
 c005ca4:	d00a      	beq.n	c005cbc <HAL_RCCEx_PeriphCLKConfig+0xec>
 c005ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c005caa:	d010      	beq.n	c005cce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 c005cac:	e018      	b.n	c005ce0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c005cae:	4b68      	ldr	r3, [pc, #416]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005cb0:	68db      	ldr	r3, [r3, #12]
 c005cb2:	4a67      	ldr	r2, [pc, #412]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c005cb8:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c005cba:	e015      	b.n	c005ce8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c005cbc:	687b      	ldr	r3, [r7, #4]
 c005cbe:	3304      	adds	r3, #4
 c005cc0:	2100      	movs	r1, #0
 c005cc2:	4618      	mov	r0, r3
 c005cc4:	f000 fb08 	bl	c0062d8 <RCCEx_PLLSAI1_Config>
 c005cc8:	4603      	mov	r3, r0
 c005cca:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c005ccc:	e00c      	b.n	c005ce8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c005cce:	687b      	ldr	r3, [r7, #4]
 c005cd0:	3320      	adds	r3, #32
 c005cd2:	2100      	movs	r1, #0
 c005cd4:	4618      	mov	r0, r3
 c005cd6:	f000 fbe5 	bl	c0064a4 <RCCEx_PLLSAI2_Config>
 c005cda:	4603      	mov	r3, r0
 c005cdc:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c005cde:	e003      	b.n	c005ce8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c005ce0:	2301      	movs	r3, #1
 c005ce2:	77fb      	strb	r3, [r7, #31]
        break;
 c005ce4:	e000      	b.n	c005ce8 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 c005ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005ce8:	7ffb      	ldrb	r3, [r7, #31]
 c005cea:	2b00      	cmp	r3, #0
 c005cec:	d10b      	bne.n	c005d06 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 c005cee:	4b58      	ldr	r3, [pc, #352]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005cf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c005cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c005cf8:	687b      	ldr	r3, [r7, #4]
 c005cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c005cfc:	4954      	ldr	r1, [pc, #336]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005cfe:	4313      	orrs	r3, r2
 c005d00:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c005d04:	e001      	b.n	c005d0a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005d06:	7ffb      	ldrb	r3, [r7, #31]
 c005d08:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c005d0a:	687b      	ldr	r3, [r7, #4]
 c005d0c:	681b      	ldr	r3, [r3, #0]
 c005d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c005d12:	2b00      	cmp	r3, #0
 c005d14:	f000 80ab 	beq.w	c005e6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 c005d18:	2300      	movs	r3, #0
 c005d1a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c005d1c:	4b4c      	ldr	r3, [pc, #304]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c005d24:	2b00      	cmp	r3, #0
 c005d26:	d10d      	bne.n	c005d44 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c005d28:	4b49      	ldr	r3, [pc, #292]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005d2c:	4a48      	ldr	r2, [pc, #288]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c005d32:	6593      	str	r3, [r2, #88]	; 0x58
 c005d34:	4b46      	ldr	r3, [pc, #280]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c005d3c:	60fb      	str	r3, [r7, #12]
 c005d3e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 c005d40:	2301      	movs	r3, #1
 c005d42:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c005d44:	4b43      	ldr	r3, [pc, #268]	; (c005e54 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c005d46:	681b      	ldr	r3, [r3, #0]
 c005d48:	4a42      	ldr	r2, [pc, #264]	; (c005e54 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c005d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c005d4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c005d50:	f7fe f82a 	bl	c003da8 <HAL_GetTick>
 c005d54:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c005d56:	e00f      	b.n	c005d78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c005d58:	f7fe f826 	bl	c003da8 <HAL_GetTick>
 c005d5c:	4602      	mov	r2, r0
 c005d5e:	693b      	ldr	r3, [r7, #16]
 c005d60:	1ad3      	subs	r3, r2, r3
 c005d62:	2b02      	cmp	r3, #2
 c005d64:	d908      	bls.n	c005d78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c005d66:	4b3b      	ldr	r3, [pc, #236]	; (c005e54 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c005d68:	681b      	ldr	r3, [r3, #0]
 c005d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c005d6e:	2b00      	cmp	r3, #0
 c005d70:	d109      	bne.n	c005d86 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 c005d72:	2303      	movs	r3, #3
 c005d74:	77fb      	strb	r3, [r7, #31]
        }
        break;
 c005d76:	e006      	b.n	c005d86 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c005d78:	4b36      	ldr	r3, [pc, #216]	; (c005e54 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c005d7a:	681b      	ldr	r3, [r3, #0]
 c005d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c005d80:	2b00      	cmp	r3, #0
 c005d82:	d0e9      	beq.n	c005d58 <HAL_RCCEx_PeriphCLKConfig+0x188>
 c005d84:	e000      	b.n	c005d88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 c005d86:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 c005d88:	7ffb      	ldrb	r3, [r7, #31]
 c005d8a:	2b00      	cmp	r3, #0
 c005d8c:	d164      	bne.n	c005e58 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c005d8e:	4b30      	ldr	r3, [pc, #192]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c005d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c005d98:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 c005d9a:	69bb      	ldr	r3, [r7, #24]
 c005d9c:	2b00      	cmp	r3, #0
 c005d9e:	d01f      	beq.n	c005de0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 c005da0:	687b      	ldr	r3, [r7, #4]
 c005da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c005da6:	69ba      	ldr	r2, [r7, #24]
 c005da8:	429a      	cmp	r2, r3
 c005daa:	d019      	beq.n	c005de0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c005dac:	4b28      	ldr	r3, [pc, #160]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c005db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c005db6:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c005db8:	4b25      	ldr	r3, [pc, #148]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c005dbe:	4a24      	ldr	r2, [pc, #144]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c005dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 c005dc8:	4b21      	ldr	r3, [pc, #132]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c005dce:	4a20      	ldr	r2, [pc, #128]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c005dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c005dd8:	4a1d      	ldr	r2, [pc, #116]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005dda:	69bb      	ldr	r3, [r7, #24]
 c005ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c005de0:	69bb      	ldr	r3, [r7, #24]
 c005de2:	f003 0301 	and.w	r3, r3, #1
 c005de6:	2b00      	cmp	r3, #0
 c005de8:	d01f      	beq.n	c005e2a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c005dea:	f7fd ffdd 	bl	c003da8 <HAL_GetTick>
 c005dee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c005df0:	e012      	b.n	c005e18 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c005df2:	f7fd ffd9 	bl	c003da8 <HAL_GetTick>
 c005df6:	4602      	mov	r2, r0
 c005df8:	693b      	ldr	r3, [r7, #16]
 c005dfa:	1ad3      	subs	r3, r2, r3
 c005dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 c005e00:	4293      	cmp	r3, r2
 c005e02:	d909      	bls.n	c005e18 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c005e04:	4b12      	ldr	r3, [pc, #72]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c005e0a:	f003 0302 	and.w	r3, r3, #2
 c005e0e:	2b00      	cmp	r3, #0
 c005e10:	d10a      	bne.n	c005e28 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 c005e12:	2303      	movs	r3, #3
 c005e14:	77fb      	strb	r3, [r7, #31]
            }
            break;
 c005e16:	e007      	b.n	c005e28 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c005e18:	4b0d      	ldr	r3, [pc, #52]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c005e1e:	f003 0302 	and.w	r3, r3, #2
 c005e22:	2b00      	cmp	r3, #0
 c005e24:	d0e5      	beq.n	c005df2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 c005e26:	e000      	b.n	c005e2a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 c005e28:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 c005e2a:	7ffb      	ldrb	r3, [r7, #31]
 c005e2c:	2b00      	cmp	r3, #0
 c005e2e:	d10c      	bne.n	c005e4a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 c005e30:	4b07      	ldr	r3, [pc, #28]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c005e36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c005e3a:	687b      	ldr	r3, [r7, #4]
 c005e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c005e40:	4903      	ldr	r1, [pc, #12]	; (c005e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c005e42:	4313      	orrs	r3, r2
 c005e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 c005e48:	e008      	b.n	c005e5c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c005e4a:	7ffb      	ldrb	r3, [r7, #31]
 c005e4c:	77bb      	strb	r3, [r7, #30]
 c005e4e:	e005      	b.n	c005e5c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 c005e50:	50021000 	.word	0x50021000
 c005e54:	50007000 	.word	0x50007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005e58:	7ffb      	ldrb	r3, [r7, #31]
 c005e5a:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c005e5c:	7dfb      	ldrb	r3, [r7, #23]
 c005e5e:	2b01      	cmp	r3, #1
 c005e60:	d105      	bne.n	c005e6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c005e62:	4b9c      	ldr	r3, [pc, #624]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005e66:	4a9b      	ldr	r2, [pc, #620]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c005e6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c005e6e:	687b      	ldr	r3, [r7, #4]
 c005e70:	681b      	ldr	r3, [r3, #0]
 c005e72:	f003 0301 	and.w	r3, r3, #1
 c005e76:	2b00      	cmp	r3, #0
 c005e78:	d00a      	beq.n	c005e90 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 c005e7a:	4b96      	ldr	r3, [pc, #600]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005e80:	f023 0203 	bic.w	r2, r3, #3
 c005e84:	687b      	ldr	r3, [r7, #4]
 c005e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c005e88:	4992      	ldr	r1, [pc, #584]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005e8a:	4313      	orrs	r3, r2
 c005e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c005e90:	687b      	ldr	r3, [r7, #4]
 c005e92:	681b      	ldr	r3, [r3, #0]
 c005e94:	f003 0302 	and.w	r3, r3, #2
 c005e98:	2b00      	cmp	r3, #0
 c005e9a:	d00a      	beq.n	c005eb2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 c005e9c:	4b8d      	ldr	r3, [pc, #564]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005ea2:	f023 020c 	bic.w	r2, r3, #12
 c005ea6:	687b      	ldr	r3, [r7, #4]
 c005ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c005eaa:	498a      	ldr	r1, [pc, #552]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005eac:	4313      	orrs	r3, r2
 c005eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c005eb2:	687b      	ldr	r3, [r7, #4]
 c005eb4:	681b      	ldr	r3, [r3, #0]
 c005eb6:	f003 0304 	and.w	r3, r3, #4
 c005eba:	2b00      	cmp	r3, #0
 c005ebc:	d00a      	beq.n	c005ed4 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 c005ebe:	4b85      	ldr	r3, [pc, #532]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005ec4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 c005ec8:	687b      	ldr	r3, [r7, #4]
 c005eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c005ecc:	4981      	ldr	r1, [pc, #516]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005ece:	4313      	orrs	r3, r2
 c005ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c005ed4:	687b      	ldr	r3, [r7, #4]
 c005ed6:	681b      	ldr	r3, [r3, #0]
 c005ed8:	f003 0308 	and.w	r3, r3, #8
 c005edc:	2b00      	cmp	r3, #0
 c005ede:	d00a      	beq.n	c005ef6 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 c005ee0:	4b7c      	ldr	r3, [pc, #496]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005ee6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 c005eea:	687b      	ldr	r3, [r7, #4]
 c005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c005eee:	4979      	ldr	r1, [pc, #484]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005ef0:	4313      	orrs	r3, r2
 c005ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c005ef6:	687b      	ldr	r3, [r7, #4]
 c005ef8:	681b      	ldr	r3, [r3, #0]
 c005efa:	f003 0310 	and.w	r3, r3, #16
 c005efe:	2b00      	cmp	r3, #0
 c005f00:	d00a      	beq.n	c005f18 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 c005f02:	4b74      	ldr	r3, [pc, #464]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c005f0c:	687b      	ldr	r3, [r7, #4]
 c005f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c005f10:	4970      	ldr	r1, [pc, #448]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005f12:	4313      	orrs	r3, r2
 c005f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c005f18:	687b      	ldr	r3, [r7, #4]
 c005f1a:	681b      	ldr	r3, [r3, #0]
 c005f1c:	f003 0320 	and.w	r3, r3, #32
 c005f20:	2b00      	cmp	r3, #0
 c005f22:	d00a      	beq.n	c005f3a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 c005f24:	4b6b      	ldr	r3, [pc, #428]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005f2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 c005f2e:	687b      	ldr	r3, [r7, #4]
 c005f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c005f32:	4968      	ldr	r1, [pc, #416]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005f34:	4313      	orrs	r3, r2
 c005f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c005f3a:	687b      	ldr	r3, [r7, #4]
 c005f3c:	681b      	ldr	r3, [r3, #0]
 c005f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c005f42:	2b00      	cmp	r3, #0
 c005f44:	d00a      	beq.n	c005f5c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 c005f46:	4b63      	ldr	r3, [pc, #396]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005f4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 c005f50:	687b      	ldr	r3, [r7, #4]
 c005f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c005f54:	495f      	ldr	r1, [pc, #380]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005f56:	4313      	orrs	r3, r2
 c005f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c005f5c:	687b      	ldr	r3, [r7, #4]
 c005f5e:	681b      	ldr	r3, [r3, #0]
 c005f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c005f64:	2b00      	cmp	r3, #0
 c005f66:	d00a      	beq.n	c005f7e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 c005f68:	4b5a      	ldr	r3, [pc, #360]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005f6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c005f72:	687b      	ldr	r3, [r7, #4]
 c005f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005f76:	4957      	ldr	r1, [pc, #348]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005f78:	4313      	orrs	r3, r2
 c005f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 c005f7e:	687b      	ldr	r3, [r7, #4]
 c005f80:	681b      	ldr	r3, [r3, #0]
 c005f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c005f86:	2b00      	cmp	r3, #0
 c005f88:	d00a      	beq.n	c005fa0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 c005f8a:	4b52      	ldr	r3, [pc, #328]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005f90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 c005f94:	687b      	ldr	r3, [r7, #4]
 c005f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c005f98:	494e      	ldr	r1, [pc, #312]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005f9a:	4313      	orrs	r3, r2
 c005f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 c005fa0:	687b      	ldr	r3, [r7, #4]
 c005fa2:	681b      	ldr	r3, [r3, #0]
 c005fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c005fa8:	2b00      	cmp	r3, #0
 c005faa:	d031      	beq.n	c006010 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 c005fac:	687b      	ldr	r3, [r7, #4]
 c005fae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c005fb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c005fb4:	d00e      	beq.n	c005fd4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 c005fb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c005fba:	d814      	bhi.n	c005fe6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 c005fbc:	2b00      	cmp	r3, #0
 c005fbe:	d015      	beq.n	c005fec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c005fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c005fc4:	d10f      	bne.n	c005fe6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c005fc6:	4b43      	ldr	r3, [pc, #268]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005fc8:	68db      	ldr	r3, [r3, #12]
 c005fca:	4a42      	ldr	r2, [pc, #264]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005fcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c005fd0:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c005fd2:	e00c      	b.n	c005fee <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c005fd4:	687b      	ldr	r3, [r7, #4]
 c005fd6:	3304      	adds	r3, #4
 c005fd8:	2100      	movs	r1, #0
 c005fda:	4618      	mov	r0, r3
 c005fdc:	f000 f97c 	bl	c0062d8 <RCCEx_PLLSAI1_Config>
 c005fe0:	4603      	mov	r3, r0
 c005fe2:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c005fe4:	e003      	b.n	c005fee <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 c005fe6:	2301      	movs	r3, #1
 c005fe8:	77fb      	strb	r3, [r7, #31]
        break;
 c005fea:	e000      	b.n	c005fee <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 c005fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 c005fee:	7ffb      	ldrb	r3, [r7, #31]
 c005ff0:	2b00      	cmp	r3, #0
 c005ff2:	d10b      	bne.n	c00600c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 c005ff4:	4b37      	ldr	r3, [pc, #220]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005ffa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 c005ffe:	687b      	ldr	r3, [r7, #4]
 c006000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c006002:	4934      	ldr	r1, [pc, #208]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006004:	4313      	orrs	r3, r2
 c006006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c00600a:	e001      	b.n	c006010 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00600c:	7ffb      	ldrb	r3, [r7, #31]
 c00600e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c006010:	687b      	ldr	r3, [r7, #4]
 c006012:	681b      	ldr	r3, [r3, #0]
 c006014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c006018:	2b00      	cmp	r3, #0
 c00601a:	d00a      	beq.n	c006032 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 c00601c:	4b2d      	ldr	r3, [pc, #180]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00601e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006022:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 c006026:	687b      	ldr	r3, [r7, #4]
 c006028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00602a:	492a      	ldr	r1, [pc, #168]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00602c:	4313      	orrs	r3, r2
 c00602e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c006032:	687b      	ldr	r3, [r7, #4]
 c006034:	681b      	ldr	r3, [r3, #0]
 c006036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c00603a:	2b00      	cmp	r3, #0
 c00603c:	d00a      	beq.n	c006054 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 c00603e:	4b25      	ldr	r3, [pc, #148]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006044:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 c006048:	687b      	ldr	r3, [r7, #4]
 c00604a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c00604c:	4921      	ldr	r1, [pc, #132]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00604e:	4313      	orrs	r3, r2
 c006050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c006054:	687b      	ldr	r3, [r7, #4]
 c006056:	681b      	ldr	r3, [r3, #0]
 c006058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00605c:	2b00      	cmp	r3, #0
 c00605e:	d00a      	beq.n	c006076 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 c006060:	4b1c      	ldr	r3, [pc, #112]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006066:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 c00606a:	687b      	ldr	r3, [r7, #4]
 c00606c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c00606e:	4919      	ldr	r1, [pc, #100]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006070:	4313      	orrs	r3, r2
 c006072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c006076:	687b      	ldr	r3, [r7, #4]
 c006078:	681b      	ldr	r3, [r3, #0]
 c00607a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c00607e:	2b00      	cmp	r3, #0
 c006080:	d00a      	beq.n	c006098 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 c006082:	4b14      	ldr	r3, [pc, #80]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006084:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c006088:	f023 0203 	bic.w	r2, r3, #3
 c00608c:	687b      	ldr	r3, [r7, #4]
 c00608e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c006090:	4910      	ldr	r1, [pc, #64]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c006092:	4313      	orrs	r3, r2
 c006094:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 c006098:	687b      	ldr	r3, [r7, #4]
 c00609a:	681b      	ldr	r3, [r3, #0]
 c00609c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c0060a0:	2b00      	cmp	r3, #0
 c0060a2:	d02b      	beq.n	c0060fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c0060a4:	4b0b      	ldr	r3, [pc, #44]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0060a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0060aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c0060ae:	687b      	ldr	r3, [r7, #4]
 c0060b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c0060b2:	4908      	ldr	r1, [pc, #32]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0060b4:	4313      	orrs	r3, r2
 c0060b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c0060ba:	687b      	ldr	r3, [r7, #4]
 c0060bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c0060be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c0060c2:	d109      	bne.n	c0060d8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0060c4:	4b03      	ldr	r3, [pc, #12]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0060c6:	68db      	ldr	r3, [r3, #12]
 c0060c8:	4a02      	ldr	r2, [pc, #8]	; (c0060d4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0060ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0060ce:	60d3      	str	r3, [r2, #12]
 c0060d0:	e014      	b.n	c0060fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 c0060d2:	bf00      	nop
 c0060d4:	50021000 	.word	0x50021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 c0060d8:	687b      	ldr	r3, [r7, #4]
 c0060da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c0060dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c0060e0:	d10c      	bne.n	c0060fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c0060e2:	687b      	ldr	r3, [r7, #4]
 c0060e4:	3304      	adds	r3, #4
 c0060e6:	2101      	movs	r1, #1
 c0060e8:	4618      	mov	r0, r3
 c0060ea:	f000 f8f5 	bl	c0062d8 <RCCEx_PLLSAI1_Config>
 c0060ee:	4603      	mov	r3, r0
 c0060f0:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 c0060f2:	7ffb      	ldrb	r3, [r7, #31]
 c0060f4:	2b00      	cmp	r3, #0
 c0060f6:	d001      	beq.n	c0060fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 c0060f8:	7ffb      	ldrb	r3, [r7, #31]
 c0060fa:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 c0060fc:	687b      	ldr	r3, [r7, #4]
 c0060fe:	681b      	ldr	r3, [r3, #0]
 c006100:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c006104:	2b00      	cmp	r3, #0
 c006106:	d04a      	beq.n	c00619e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c006108:	687b      	ldr	r3, [r7, #4]
 c00610a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c00610c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c006110:	d108      	bne.n	c006124 <HAL_RCCEx_PeriphCLKConfig+0x554>
 c006112:	4b70      	ldr	r3, [pc, #448]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c006114:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c006118:	4a6e      	ldr	r2, [pc, #440]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00611a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c00611e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 c006122:	e012      	b.n	c00614a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 c006124:	4b6b      	ldr	r3, [pc, #428]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c006126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00612a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c00612e:	687b      	ldr	r3, [r7, #4]
 c006130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c006132:	4968      	ldr	r1, [pc, #416]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c006134:	4313      	orrs	r3, r2
 c006136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c00613a:	4b66      	ldr	r3, [pc, #408]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00613c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c006140:	4a64      	ldr	r2, [pc, #400]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c006142:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 c006146:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c00614a:	687b      	ldr	r3, [r7, #4]
 c00614c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c00614e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c006152:	d10d      	bne.n	c006170 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c006154:	687b      	ldr	r3, [r7, #4]
 c006156:	3304      	adds	r3, #4
 c006158:	2101      	movs	r1, #1
 c00615a:	4618      	mov	r0, r3
 c00615c:	f000 f8bc 	bl	c0062d8 <RCCEx_PLLSAI1_Config>
 c006160:	4603      	mov	r3, r0
 c006162:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c006164:	7ffb      	ldrb	r3, [r7, #31]
 c006166:	2b00      	cmp	r3, #0
 c006168:	d019      	beq.n	c00619e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 c00616a:	7ffb      	ldrb	r3, [r7, #31]
 c00616c:	77bb      	strb	r3, [r7, #30]
 c00616e:	e016      	b.n	c00619e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 c006170:	687b      	ldr	r3, [r7, #4]
 c006172:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c006174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c006178:	d106      	bne.n	c006188 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c00617a:	4b56      	ldr	r3, [pc, #344]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00617c:	68db      	ldr	r3, [r3, #12]
 c00617e:	4a55      	ldr	r2, [pc, #340]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c006180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c006184:	60d3      	str	r3, [r2, #12]
 c006186:	e00a      	b.n	c00619e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 c006188:	687b      	ldr	r3, [r7, #4]
 c00618a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c00618c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c006190:	d105      	bne.n	c00619e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c006192:	4b50      	ldr	r3, [pc, #320]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c006194:	68db      	ldr	r3, [r3, #12]
 c006196:	4a4f      	ldr	r2, [pc, #316]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c006198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c00619c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 c00619e:	687b      	ldr	r3, [r7, #4]
 c0061a0:	681b      	ldr	r3, [r3, #0]
 c0061a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c0061a6:	2b00      	cmp	r3, #0
 c0061a8:	d028      	beq.n	c0061fc <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c0061aa:	4b4a      	ldr	r3, [pc, #296]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0061ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0061b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c0061b4:	687b      	ldr	r3, [r7, #4]
 c0061b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c0061b8:	4946      	ldr	r1, [pc, #280]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0061ba:	4313      	orrs	r3, r2
 c0061bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c0061c0:	687b      	ldr	r3, [r7, #4]
 c0061c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c0061c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c0061c8:	d106      	bne.n	c0061d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0061ca:	4b42      	ldr	r3, [pc, #264]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0061cc:	68db      	ldr	r3, [r3, #12]
 c0061ce:	4a41      	ldr	r2, [pc, #260]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0061d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0061d4:	60d3      	str	r3, [r2, #12]
 c0061d6:	e011      	b.n	c0061fc <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 c0061d8:	687b      	ldr	r3, [r7, #4]
 c0061da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c0061dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c0061e0:	d10c      	bne.n	c0061fc <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c0061e2:	687b      	ldr	r3, [r7, #4]
 c0061e4:	3304      	adds	r3, #4
 c0061e6:	2101      	movs	r1, #1
 c0061e8:	4618      	mov	r0, r3
 c0061ea:	f000 f875 	bl	c0062d8 <RCCEx_PLLSAI1_Config>
 c0061ee:	4603      	mov	r3, r0
 c0061f0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c0061f2:	7ffb      	ldrb	r3, [r7, #31]
 c0061f4:	2b00      	cmp	r3, #0
 c0061f6:	d001      	beq.n	c0061fc <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 c0061f8:	7ffb      	ldrb	r3, [r7, #31]
 c0061fa:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 c0061fc:	687b      	ldr	r3, [r7, #4]
 c0061fe:	681b      	ldr	r3, [r3, #0]
 c006200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c006204:	2b00      	cmp	r3, #0
 c006206:	d01e      	beq.n	c006246 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c006208:	4b32      	ldr	r3, [pc, #200]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00620a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00620e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 c006212:	687b      	ldr	r3, [r7, #4]
 c006214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c006218:	492e      	ldr	r1, [pc, #184]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00621a:	4313      	orrs	r3, r2
 c00621c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c006220:	687b      	ldr	r3, [r7, #4]
 c006222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c006226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c00622a:	d10c      	bne.n	c006246 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 c00622c:	687b      	ldr	r3, [r7, #4]
 c00622e:	3304      	adds	r3, #4
 c006230:	2102      	movs	r1, #2
 c006232:	4618      	mov	r0, r3
 c006234:	f000 f850 	bl	c0062d8 <RCCEx_PLLSAI1_Config>
 c006238:	4603      	mov	r3, r0
 c00623a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c00623c:	7ffb      	ldrb	r3, [r7, #31]
 c00623e:	2b00      	cmp	r3, #0
 c006240:	d001      	beq.n	c006246 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 c006242:	7ffb      	ldrb	r3, [r7, #31]
 c006244:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 c006246:	687b      	ldr	r3, [r7, #4]
 c006248:	681b      	ldr	r3, [r3, #0]
 c00624a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c00624e:	2b00      	cmp	r3, #0
 c006250:	d00b      	beq.n	c00626a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 c006252:	4b20      	ldr	r3, [pc, #128]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c006254:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c006258:	f023 0204 	bic.w	r2, r3, #4
 c00625c:	687b      	ldr	r3, [r7, #4]
 c00625e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c006262:	491c      	ldr	r1, [pc, #112]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c006264:	4313      	orrs	r3, r2
 c006266:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 c00626a:	687b      	ldr	r3, [r7, #4]
 c00626c:	681b      	ldr	r3, [r3, #0]
 c00626e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c006272:	2b00      	cmp	r3, #0
 c006274:	d00b      	beq.n	c00628e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 c006276:	4b17      	ldr	r3, [pc, #92]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c006278:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c00627c:	f023 0218 	bic.w	r2, r3, #24
 c006280:	687b      	ldr	r3, [r7, #4]
 c006282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006286:	4913      	ldr	r1, [pc, #76]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c006288:	4313      	orrs	r3, r2
 c00628a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c00628e:	687b      	ldr	r3, [r7, #4]
 c006290:	681b      	ldr	r3, [r3, #0]
 c006292:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c006296:	2b00      	cmp	r3, #0
 c006298:	d017      	beq.n	c0062ca <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c00629a:	4b0e      	ldr	r3, [pc, #56]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00629c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0062a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c0062a4:	687b      	ldr	r3, [r7, #4]
 c0062a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0062aa:	490a      	ldr	r1, [pc, #40]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0062ac:	4313      	orrs	r3, r2
 c0062ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c0062b2:	687b      	ldr	r3, [r7, #4]
 c0062b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0062b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c0062bc:	d105      	bne.n	c0062ca <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0062be:	4b05      	ldr	r3, [pc, #20]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0062c0:	68db      	ldr	r3, [r3, #12]
 c0062c2:	4a04      	ldr	r2, [pc, #16]	; (c0062d4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0062c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0062c8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 c0062ca:	7fbb      	ldrb	r3, [r7, #30]
}
 c0062cc:	4618      	mov	r0, r3
 c0062ce:	3720      	adds	r7, #32
 c0062d0:	46bd      	mov	sp, r7
 c0062d2:	bd80      	pop	{r7, pc}
 c0062d4:	50021000 	.word	0x50021000

0c0062d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 c0062d8:	b580      	push	{r7, lr}
 c0062da:	b084      	sub	sp, #16
 c0062dc:	af00      	add	r7, sp, #0
 c0062de:	6078      	str	r0, [r7, #4]
 c0062e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c0062e2:	2300      	movs	r3, #0
 c0062e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 c0062e6:	687b      	ldr	r3, [r7, #4]
 c0062e8:	681b      	ldr	r3, [r3, #0]
 c0062ea:	2b03      	cmp	r3, #3
 c0062ec:	d018      	beq.n	c006320 <RCCEx_PLLSAI1_Config+0x48>
 c0062ee:	2b03      	cmp	r3, #3
 c0062f0:	d81f      	bhi.n	c006332 <RCCEx_PLLSAI1_Config+0x5a>
 c0062f2:	2b01      	cmp	r3, #1
 c0062f4:	d002      	beq.n	c0062fc <RCCEx_PLLSAI1_Config+0x24>
 c0062f6:	2b02      	cmp	r3, #2
 c0062f8:	d009      	beq.n	c00630e <RCCEx_PLLSAI1_Config+0x36>
 c0062fa:	e01a      	b.n	c006332 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c0062fc:	4b65      	ldr	r3, [pc, #404]	; (c006494 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0062fe:	681b      	ldr	r3, [r3, #0]
 c006300:	f003 0302 	and.w	r3, r3, #2
 c006304:	2b00      	cmp	r3, #0
 c006306:	d117      	bne.n	c006338 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 c006308:	2301      	movs	r3, #1
 c00630a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c00630c:	e014      	b.n	c006338 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c00630e:	4b61      	ldr	r3, [pc, #388]	; (c006494 <RCCEx_PLLSAI1_Config+0x1bc>)
 c006310:	681b      	ldr	r3, [r3, #0]
 c006312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c006316:	2b00      	cmp	r3, #0
 c006318:	d110      	bne.n	c00633c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 c00631a:	2301      	movs	r3, #1
 c00631c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c00631e:	e00d      	b.n	c00633c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c006320:	4b5c      	ldr	r3, [pc, #368]	; (c006494 <RCCEx_PLLSAI1_Config+0x1bc>)
 c006322:	681b      	ldr	r3, [r3, #0]
 c006324:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c006328:	2b00      	cmp	r3, #0
 c00632a:	d109      	bne.n	c006340 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 c00632c:	2301      	movs	r3, #1
 c00632e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c006330:	e006      	b.n	c006340 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 c006332:	2301      	movs	r3, #1
 c006334:	73fb      	strb	r3, [r7, #15]
      break;
 c006336:	e004      	b.n	c006342 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c006338:	bf00      	nop
 c00633a:	e002      	b.n	c006342 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c00633c:	bf00      	nop
 c00633e:	e000      	b.n	c006342 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c006340:	bf00      	nop
  }

  if (status == HAL_OK)
 c006342:	7bfb      	ldrb	r3, [r7, #15]
 c006344:	2b00      	cmp	r3, #0
 c006346:	f040 809f 	bne.w	c006488 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 c00634a:	4b52      	ldr	r3, [pc, #328]	; (c006494 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00634c:	681b      	ldr	r3, [r3, #0]
 c00634e:	4a51      	ldr	r2, [pc, #324]	; (c006494 <RCCEx_PLLSAI1_Config+0x1bc>)
 c006350:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c006354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c006356:	f7fd fd27 	bl	c003da8 <HAL_GetTick>
 c00635a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c00635c:	e00f      	b.n	c00637e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c00635e:	f7fd fd23 	bl	c003da8 <HAL_GetTick>
 c006362:	4602      	mov	r2, r0
 c006364:	68bb      	ldr	r3, [r7, #8]
 c006366:	1ad3      	subs	r3, r2, r3
 c006368:	2b02      	cmp	r3, #2
 c00636a:	d908      	bls.n	c00637e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c00636c:	4b49      	ldr	r3, [pc, #292]	; (c006494 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00636e:	681b      	ldr	r3, [r3, #0]
 c006370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c006374:	2b00      	cmp	r3, #0
 c006376:	d009      	beq.n	c00638c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 c006378:	2303      	movs	r3, #3
 c00637a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c00637c:	e006      	b.n	c00638c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c00637e:	4b45      	ldr	r3, [pc, #276]	; (c006494 <RCCEx_PLLSAI1_Config+0x1bc>)
 c006380:	681b      	ldr	r3, [r3, #0]
 c006382:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c006386:	2b00      	cmp	r3, #0
 c006388:	d1e9      	bne.n	c00635e <RCCEx_PLLSAI1_Config+0x86>
 c00638a:	e000      	b.n	c00638e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 c00638c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c00638e:	7bfb      	ldrb	r3, [r7, #15]
 c006390:	2b00      	cmp	r3, #0
 c006392:	d179      	bne.n	c006488 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c006394:	683b      	ldr	r3, [r7, #0]
 c006396:	2b00      	cmp	r3, #0
 c006398:	d116      	bne.n	c0063c8 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c00639a:	4b3e      	ldr	r3, [pc, #248]	; (c006494 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00639c:	691a      	ldr	r2, [r3, #16]
 c00639e:	4b3e      	ldr	r3, [pc, #248]	; (c006498 <RCCEx_PLLSAI1_Config+0x1c0>)
 c0063a0:	4013      	ands	r3, r2
 c0063a2:	687a      	ldr	r2, [r7, #4]
 c0063a4:	6892      	ldr	r2, [r2, #8]
 c0063a6:	0211      	lsls	r1, r2, #8
 c0063a8:	687a      	ldr	r2, [r7, #4]
 c0063aa:	68d2      	ldr	r2, [r2, #12]
 c0063ac:	06d2      	lsls	r2, r2, #27
 c0063ae:	4311      	orrs	r1, r2
 c0063b0:	687a      	ldr	r2, [r7, #4]
 c0063b2:	6852      	ldr	r2, [r2, #4]
 c0063b4:	3a01      	subs	r2, #1
 c0063b6:	0112      	lsls	r2, r2, #4
 c0063b8:	4311      	orrs	r1, r2
 c0063ba:	687a      	ldr	r2, [r7, #4]
 c0063bc:	6812      	ldr	r2, [r2, #0]
 c0063be:	430a      	orrs	r2, r1
 c0063c0:	4934      	ldr	r1, [pc, #208]	; (c006494 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0063c2:	4313      	orrs	r3, r2
 c0063c4:	610b      	str	r3, [r1, #16]
 c0063c6:	e033      	b.n	c006430 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 c0063c8:	683b      	ldr	r3, [r7, #0]
 c0063ca:	2b01      	cmp	r3, #1
 c0063cc:	d118      	bne.n	c006400 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c0063ce:	4b31      	ldr	r3, [pc, #196]	; (c006494 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0063d0:	691a      	ldr	r2, [r3, #16]
 c0063d2:	4b32      	ldr	r3, [pc, #200]	; (c00649c <RCCEx_PLLSAI1_Config+0x1c4>)
 c0063d4:	4013      	ands	r3, r2
 c0063d6:	687a      	ldr	r2, [r7, #4]
 c0063d8:	6892      	ldr	r2, [r2, #8]
 c0063da:	0211      	lsls	r1, r2, #8
 c0063dc:	687a      	ldr	r2, [r7, #4]
 c0063de:	6912      	ldr	r2, [r2, #16]
 c0063e0:	0852      	lsrs	r2, r2, #1
 c0063e2:	3a01      	subs	r2, #1
 c0063e4:	0552      	lsls	r2, r2, #21
 c0063e6:	4311      	orrs	r1, r2
 c0063e8:	687a      	ldr	r2, [r7, #4]
 c0063ea:	6852      	ldr	r2, [r2, #4]
 c0063ec:	3a01      	subs	r2, #1
 c0063ee:	0112      	lsls	r2, r2, #4
 c0063f0:	4311      	orrs	r1, r2
 c0063f2:	687a      	ldr	r2, [r7, #4]
 c0063f4:	6812      	ldr	r2, [r2, #0]
 c0063f6:	430a      	orrs	r2, r1
 c0063f8:	4926      	ldr	r1, [pc, #152]	; (c006494 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0063fa:	4313      	orrs	r3, r2
 c0063fc:	610b      	str	r3, [r1, #16]
 c0063fe:	e017      	b.n	c006430 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c006400:	4b24      	ldr	r3, [pc, #144]	; (c006494 <RCCEx_PLLSAI1_Config+0x1bc>)
 c006402:	691a      	ldr	r2, [r3, #16]
 c006404:	4b26      	ldr	r3, [pc, #152]	; (c0064a0 <RCCEx_PLLSAI1_Config+0x1c8>)
 c006406:	4013      	ands	r3, r2
 c006408:	687a      	ldr	r2, [r7, #4]
 c00640a:	6892      	ldr	r2, [r2, #8]
 c00640c:	0211      	lsls	r1, r2, #8
 c00640e:	687a      	ldr	r2, [r7, #4]
 c006410:	6952      	ldr	r2, [r2, #20]
 c006412:	0852      	lsrs	r2, r2, #1
 c006414:	3a01      	subs	r2, #1
 c006416:	0652      	lsls	r2, r2, #25
 c006418:	4311      	orrs	r1, r2
 c00641a:	687a      	ldr	r2, [r7, #4]
 c00641c:	6852      	ldr	r2, [r2, #4]
 c00641e:	3a01      	subs	r2, #1
 c006420:	0112      	lsls	r2, r2, #4
 c006422:	4311      	orrs	r1, r2
 c006424:	687a      	ldr	r2, [r7, #4]
 c006426:	6812      	ldr	r2, [r2, #0]
 c006428:	430a      	orrs	r2, r1
 c00642a:	491a      	ldr	r1, [pc, #104]	; (c006494 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00642c:	4313      	orrs	r3, r2
 c00642e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 c006430:	4b18      	ldr	r3, [pc, #96]	; (c006494 <RCCEx_PLLSAI1_Config+0x1bc>)
 c006432:	681b      	ldr	r3, [r3, #0]
 c006434:	4a17      	ldr	r2, [pc, #92]	; (c006494 <RCCEx_PLLSAI1_Config+0x1bc>)
 c006436:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c00643a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00643c:	f7fd fcb4 	bl	c003da8 <HAL_GetTick>
 c006440:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c006442:	e00f      	b.n	c006464 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c006444:	f7fd fcb0 	bl	c003da8 <HAL_GetTick>
 c006448:	4602      	mov	r2, r0
 c00644a:	68bb      	ldr	r3, [r7, #8]
 c00644c:	1ad3      	subs	r3, r2, r3
 c00644e:	2b02      	cmp	r3, #2
 c006450:	d908      	bls.n	c006464 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c006452:	4b10      	ldr	r3, [pc, #64]	; (c006494 <RCCEx_PLLSAI1_Config+0x1bc>)
 c006454:	681b      	ldr	r3, [r3, #0]
 c006456:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c00645a:	2b00      	cmp	r3, #0
 c00645c:	d109      	bne.n	c006472 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 c00645e:	2303      	movs	r3, #3
 c006460:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c006462:	e006      	b.n	c006472 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c006464:	4b0b      	ldr	r3, [pc, #44]	; (c006494 <RCCEx_PLLSAI1_Config+0x1bc>)
 c006466:	681b      	ldr	r3, [r3, #0]
 c006468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c00646c:	2b00      	cmp	r3, #0
 c00646e:	d0e9      	beq.n	c006444 <RCCEx_PLLSAI1_Config+0x16c>
 c006470:	e000      	b.n	c006474 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 c006472:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c006474:	7bfb      	ldrb	r3, [r7, #15]
 c006476:	2b00      	cmp	r3, #0
 c006478:	d106      	bne.n	c006488 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 c00647a:	4b06      	ldr	r3, [pc, #24]	; (c006494 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00647c:	691a      	ldr	r2, [r3, #16]
 c00647e:	687b      	ldr	r3, [r7, #4]
 c006480:	699b      	ldr	r3, [r3, #24]
 c006482:	4904      	ldr	r1, [pc, #16]	; (c006494 <RCCEx_PLLSAI1_Config+0x1bc>)
 c006484:	4313      	orrs	r3, r2
 c006486:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 c006488:	7bfb      	ldrb	r3, [r7, #15]
}
 c00648a:	4618      	mov	r0, r3
 c00648c:	3710      	adds	r7, #16
 c00648e:	46bd      	mov	sp, r7
 c006490:	bd80      	pop	{r7, pc}
 c006492:	bf00      	nop
 c006494:	50021000 	.word	0x50021000
 c006498:	07ff800c 	.word	0x07ff800c
 c00649c:	ff9f800c 	.word	0xff9f800c
 c0064a0:	f9ff800c 	.word	0xf9ff800c

0c0064a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 c0064a4:	b580      	push	{r7, lr}
 c0064a6:	b084      	sub	sp, #16
 c0064a8:	af00      	add	r7, sp, #0
 c0064aa:	6078      	str	r0, [r7, #4]
 c0064ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c0064ae:	2300      	movs	r3, #0
 c0064b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 c0064b2:	687b      	ldr	r3, [r7, #4]
 c0064b4:	681b      	ldr	r3, [r3, #0]
 c0064b6:	2b03      	cmp	r3, #3
 c0064b8:	d018      	beq.n	c0064ec <RCCEx_PLLSAI2_Config+0x48>
 c0064ba:	2b03      	cmp	r3, #3
 c0064bc:	d81f      	bhi.n	c0064fe <RCCEx_PLLSAI2_Config+0x5a>
 c0064be:	2b01      	cmp	r3, #1
 c0064c0:	d002      	beq.n	c0064c8 <RCCEx_PLLSAI2_Config+0x24>
 c0064c2:	2b02      	cmp	r3, #2
 c0064c4:	d009      	beq.n	c0064da <RCCEx_PLLSAI2_Config+0x36>
 c0064c6:	e01a      	b.n	c0064fe <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c0064c8:	4b4a      	ldr	r3, [pc, #296]	; (c0065f4 <RCCEx_PLLSAI2_Config+0x150>)
 c0064ca:	681b      	ldr	r3, [r3, #0]
 c0064cc:	f003 0302 	and.w	r3, r3, #2
 c0064d0:	2b00      	cmp	r3, #0
 c0064d2:	d117      	bne.n	c006504 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 c0064d4:	2301      	movs	r3, #1
 c0064d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0064d8:	e014      	b.n	c006504 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c0064da:	4b46      	ldr	r3, [pc, #280]	; (c0065f4 <RCCEx_PLLSAI2_Config+0x150>)
 c0064dc:	681b      	ldr	r3, [r3, #0]
 c0064de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0064e2:	2b00      	cmp	r3, #0
 c0064e4:	d110      	bne.n	c006508 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 c0064e6:	2301      	movs	r3, #1
 c0064e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0064ea:	e00d      	b.n	c006508 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c0064ec:	4b41      	ldr	r3, [pc, #260]	; (c0065f4 <RCCEx_PLLSAI2_Config+0x150>)
 c0064ee:	681b      	ldr	r3, [r3, #0]
 c0064f0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c0064f4:	2b00      	cmp	r3, #0
 c0064f6:	d109      	bne.n	c00650c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 c0064f8:	2301      	movs	r3, #1
 c0064fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0064fc:	e006      	b.n	c00650c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 c0064fe:	2301      	movs	r3, #1
 c006500:	73fb      	strb	r3, [r7, #15]
      break;
 c006502:	e004      	b.n	c00650e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c006504:	bf00      	nop
 c006506:	e002      	b.n	c00650e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c006508:	bf00      	nop
 c00650a:	e000      	b.n	c00650e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c00650c:	bf00      	nop
  }

  if (status == HAL_OK)
 c00650e:	7bfb      	ldrb	r3, [r7, #15]
 c006510:	2b00      	cmp	r3, #0
 c006512:	d169      	bne.n	c0065e8 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 c006514:	4b37      	ldr	r3, [pc, #220]	; (c0065f4 <RCCEx_PLLSAI2_Config+0x150>)
 c006516:	681b      	ldr	r3, [r3, #0]
 c006518:	4a36      	ldr	r2, [pc, #216]	; (c0065f4 <RCCEx_PLLSAI2_Config+0x150>)
 c00651a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c00651e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c006520:	f7fd fc42 	bl	c003da8 <HAL_GetTick>
 c006524:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c006526:	e00f      	b.n	c006548 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c006528:	f7fd fc3e 	bl	c003da8 <HAL_GetTick>
 c00652c:	4602      	mov	r2, r0
 c00652e:	68bb      	ldr	r3, [r7, #8]
 c006530:	1ad3      	subs	r3, r2, r3
 c006532:	2b02      	cmp	r3, #2
 c006534:	d908      	bls.n	c006548 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c006536:	4b2f      	ldr	r3, [pc, #188]	; (c0065f4 <RCCEx_PLLSAI2_Config+0x150>)
 c006538:	681b      	ldr	r3, [r3, #0]
 c00653a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c00653e:	2b00      	cmp	r3, #0
 c006540:	d009      	beq.n	c006556 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 c006542:	2303      	movs	r3, #3
 c006544:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c006546:	e006      	b.n	c006556 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c006548:	4b2a      	ldr	r3, [pc, #168]	; (c0065f4 <RCCEx_PLLSAI2_Config+0x150>)
 c00654a:	681b      	ldr	r3, [r3, #0]
 c00654c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c006550:	2b00      	cmp	r3, #0
 c006552:	d1e9      	bne.n	c006528 <RCCEx_PLLSAI2_Config+0x84>
 c006554:	e000      	b.n	c006558 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 c006556:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c006558:	7bfb      	ldrb	r3, [r7, #15]
 c00655a:	2b00      	cmp	r3, #0
 c00655c:	d144      	bne.n	c0065e8 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c00655e:	683b      	ldr	r3, [r7, #0]
 c006560:	2b00      	cmp	r3, #0
 c006562:	d115      	bne.n	c006590 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 c006564:	4b23      	ldr	r3, [pc, #140]	; (c0065f4 <RCCEx_PLLSAI2_Config+0x150>)
 c006566:	695a      	ldr	r2, [r3, #20]
 c006568:	4b23      	ldr	r3, [pc, #140]	; (c0065f8 <RCCEx_PLLSAI2_Config+0x154>)
 c00656a:	4013      	ands	r3, r2
 c00656c:	687a      	ldr	r2, [r7, #4]
 c00656e:	6892      	ldr	r2, [r2, #8]
 c006570:	0211      	lsls	r1, r2, #8
 c006572:	687a      	ldr	r2, [r7, #4]
 c006574:	68d2      	ldr	r2, [r2, #12]
 c006576:	06d2      	lsls	r2, r2, #27
 c006578:	4311      	orrs	r1, r2
 c00657a:	687a      	ldr	r2, [r7, #4]
 c00657c:	6852      	ldr	r2, [r2, #4]
 c00657e:	3a01      	subs	r2, #1
 c006580:	0112      	lsls	r2, r2, #4
 c006582:	4311      	orrs	r1, r2
 c006584:	687a      	ldr	r2, [r7, #4]
 c006586:	6812      	ldr	r2, [r2, #0]
 c006588:	430a      	orrs	r2, r1
 c00658a:	491a      	ldr	r1, [pc, #104]	; (c0065f4 <RCCEx_PLLSAI2_Config+0x150>)
 c00658c:	4313      	orrs	r3, r2
 c00658e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 c006590:	4b18      	ldr	r3, [pc, #96]	; (c0065f4 <RCCEx_PLLSAI2_Config+0x150>)
 c006592:	681b      	ldr	r3, [r3, #0]
 c006594:	4a17      	ldr	r2, [pc, #92]	; (c0065f4 <RCCEx_PLLSAI2_Config+0x150>)
 c006596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c00659a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00659c:	f7fd fc04 	bl	c003da8 <HAL_GetTick>
 c0065a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c0065a2:	e00f      	b.n	c0065c4 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c0065a4:	f7fd fc00 	bl	c003da8 <HAL_GetTick>
 c0065a8:	4602      	mov	r2, r0
 c0065aa:	68bb      	ldr	r3, [r7, #8]
 c0065ac:	1ad3      	subs	r3, r2, r3
 c0065ae:	2b02      	cmp	r3, #2
 c0065b0:	d908      	bls.n	c0065c4 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c0065b2:	4b10      	ldr	r3, [pc, #64]	; (c0065f4 <RCCEx_PLLSAI2_Config+0x150>)
 c0065b4:	681b      	ldr	r3, [r3, #0]
 c0065b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c0065ba:	2b00      	cmp	r3, #0
 c0065bc:	d109      	bne.n	c0065d2 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 c0065be:	2303      	movs	r3, #3
 c0065c0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c0065c2:	e006      	b.n	c0065d2 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c0065c4:	4b0b      	ldr	r3, [pc, #44]	; (c0065f4 <RCCEx_PLLSAI2_Config+0x150>)
 c0065c6:	681b      	ldr	r3, [r3, #0]
 c0065c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c0065cc:	2b00      	cmp	r3, #0
 c0065ce:	d0e9      	beq.n	c0065a4 <RCCEx_PLLSAI2_Config+0x100>
 c0065d0:	e000      	b.n	c0065d4 <RCCEx_PLLSAI2_Config+0x130>
          break;
 c0065d2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c0065d4:	7bfb      	ldrb	r3, [r7, #15]
 c0065d6:	2b00      	cmp	r3, #0
 c0065d8:	d106      	bne.n	c0065e8 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 c0065da:	4b06      	ldr	r3, [pc, #24]	; (c0065f4 <RCCEx_PLLSAI2_Config+0x150>)
 c0065dc:	695a      	ldr	r2, [r3, #20]
 c0065de:	687b      	ldr	r3, [r7, #4]
 c0065e0:	691b      	ldr	r3, [r3, #16]
 c0065e2:	4904      	ldr	r1, [pc, #16]	; (c0065f4 <RCCEx_PLLSAI2_Config+0x150>)
 c0065e4:	4313      	orrs	r3, r2
 c0065e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 c0065e8:	7bfb      	ldrb	r3, [r7, #15]
}
 c0065ea:	4618      	mov	r0, r3
 c0065ec:	3710      	adds	r7, #16
 c0065ee:	46bd      	mov	sp, r7
 c0065f0:	bd80      	pop	{r7, pc}
 c0065f2:	bf00      	nop
 c0065f4:	50021000 	.word	0x50021000
 c0065f8:	07ff800c 	.word	0x07ff800c

0c0065fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 c0065fc:	b580      	push	{r7, lr}
 c0065fe:	b082      	sub	sp, #8
 c006600:	af00      	add	r7, sp, #0
 c006602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 c006604:	687b      	ldr	r3, [r7, #4]
 c006606:	2b00      	cmp	r3, #0
 c006608:	d101      	bne.n	c00660e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 c00660a:	2301      	movs	r3, #1
 c00660c:	e049      	b.n	c0066a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 c00660e:	687b      	ldr	r3, [r7, #4]
 c006610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 c006614:	b2db      	uxtb	r3, r3
 c006616:	2b00      	cmp	r3, #0
 c006618:	d106      	bne.n	c006628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 c00661a:	687b      	ldr	r3, [r7, #4]
 c00661c:	2200      	movs	r2, #0
 c00661e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 c006622:	6878      	ldr	r0, [r7, #4]
 c006624:	f7fd fa16 	bl	c003a54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 c006628:	687b      	ldr	r3, [r7, #4]
 c00662a:	2202      	movs	r2, #2
 c00662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 c006630:	687b      	ldr	r3, [r7, #4]
 c006632:	681a      	ldr	r2, [r3, #0]
 c006634:	687b      	ldr	r3, [r7, #4]
 c006636:	3304      	adds	r3, #4
 c006638:	4619      	mov	r1, r3
 c00663a:	4610      	mov	r0, r2
 c00663c:	f000 fa74 	bl	c006b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 c006640:	687b      	ldr	r3, [r7, #4]
 c006642:	2201      	movs	r2, #1
 c006644:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 c006648:	687b      	ldr	r3, [r7, #4]
 c00664a:	2201      	movs	r2, #1
 c00664c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 c006650:	687b      	ldr	r3, [r7, #4]
 c006652:	2201      	movs	r2, #1
 c006654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 c006658:	687b      	ldr	r3, [r7, #4]
 c00665a:	2201      	movs	r2, #1
 c00665c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 c006660:	687b      	ldr	r3, [r7, #4]
 c006662:	2201      	movs	r2, #1
 c006664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 c006668:	687b      	ldr	r3, [r7, #4]
 c00666a:	2201      	movs	r2, #1
 c00666c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 c006670:	687b      	ldr	r3, [r7, #4]
 c006672:	2201      	movs	r2, #1
 c006674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 c006678:	687b      	ldr	r3, [r7, #4]
 c00667a:	2201      	movs	r2, #1
 c00667c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 c006680:	687b      	ldr	r3, [r7, #4]
 c006682:	2201      	movs	r2, #1
 c006684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 c006688:	687b      	ldr	r3, [r7, #4]
 c00668a:	2201      	movs	r2, #1
 c00668c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 c006690:	687b      	ldr	r3, [r7, #4]
 c006692:	2201      	movs	r2, #1
 c006694:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 c006698:	687b      	ldr	r3, [r7, #4]
 c00669a:	2201      	movs	r2, #1
 c00669c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 c0066a0:	2300      	movs	r3, #0
}
 c0066a2:	4618      	mov	r0, r3
 c0066a4:	3708      	adds	r7, #8
 c0066a6:	46bd      	mov	sp, r7
 c0066a8:	bd80      	pop	{r7, pc}

0c0066aa <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 c0066aa:	b480      	push	{r7}
 c0066ac:	b083      	sub	sp, #12
 c0066ae:	af00      	add	r7, sp, #0
 c0066b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 c0066b2:	687b      	ldr	r3, [r7, #4]
 c0066b4:	681b      	ldr	r3, [r3, #0]
 c0066b6:	6a1a      	ldr	r2, [r3, #32]
 c0066b8:	f241 1311 	movw	r3, #4369	; 0x1111
 c0066bc:	4013      	ands	r3, r2
 c0066be:	2b00      	cmp	r3, #0
 c0066c0:	d10f      	bne.n	c0066e2 <HAL_TIM_Base_Stop+0x38>
 c0066c2:	687b      	ldr	r3, [r7, #4]
 c0066c4:	681b      	ldr	r3, [r3, #0]
 c0066c6:	6a1a      	ldr	r2, [r3, #32]
 c0066c8:	f240 4344 	movw	r3, #1092	; 0x444
 c0066cc:	4013      	ands	r3, r2
 c0066ce:	2b00      	cmp	r3, #0
 c0066d0:	d107      	bne.n	c0066e2 <HAL_TIM_Base_Stop+0x38>
 c0066d2:	687b      	ldr	r3, [r7, #4]
 c0066d4:	681b      	ldr	r3, [r3, #0]
 c0066d6:	681a      	ldr	r2, [r3, #0]
 c0066d8:	687b      	ldr	r3, [r7, #4]
 c0066da:	681b      	ldr	r3, [r3, #0]
 c0066dc:	f022 0201 	bic.w	r2, r2, #1
 c0066e0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 c0066e2:	687b      	ldr	r3, [r7, #4]
 c0066e4:	2201      	movs	r2, #1
 c0066e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 c0066ea:	2300      	movs	r3, #0
}
 c0066ec:	4618      	mov	r0, r3
 c0066ee:	370c      	adds	r7, #12
 c0066f0:	46bd      	mov	sp, r7
 c0066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0066f6:	4770      	bx	lr

0c0066f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 c0066f8:	b580      	push	{r7, lr}
 c0066fa:	b082      	sub	sp, #8
 c0066fc:	af00      	add	r7, sp, #0
 c0066fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 c006700:	687b      	ldr	r3, [r7, #4]
 c006702:	681b      	ldr	r3, [r3, #0]
 c006704:	691b      	ldr	r3, [r3, #16]
 c006706:	f003 0302 	and.w	r3, r3, #2
 c00670a:	2b02      	cmp	r3, #2
 c00670c:	d122      	bne.n	c006754 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 c00670e:	687b      	ldr	r3, [r7, #4]
 c006710:	681b      	ldr	r3, [r3, #0]
 c006712:	68db      	ldr	r3, [r3, #12]
 c006714:	f003 0302 	and.w	r3, r3, #2
 c006718:	2b02      	cmp	r3, #2
 c00671a:	d11b      	bne.n	c006754 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 c00671c:	687b      	ldr	r3, [r7, #4]
 c00671e:	681b      	ldr	r3, [r3, #0]
 c006720:	f06f 0202 	mvn.w	r2, #2
 c006724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 c006726:	687b      	ldr	r3, [r7, #4]
 c006728:	2201      	movs	r2, #1
 c00672a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 c00672c:	687b      	ldr	r3, [r7, #4]
 c00672e:	681b      	ldr	r3, [r3, #0]
 c006730:	699b      	ldr	r3, [r3, #24]
 c006732:	f003 0303 	and.w	r3, r3, #3
 c006736:	2b00      	cmp	r3, #0
 c006738:	d003      	beq.n	c006742 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 c00673a:	6878      	ldr	r0, [r7, #4]
 c00673c:	f000 f9d5 	bl	c006aea <HAL_TIM_IC_CaptureCallback>
 c006740:	e005      	b.n	c00674e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 c006742:	6878      	ldr	r0, [r7, #4]
 c006744:	f000 f9c7 	bl	c006ad6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 c006748:	6878      	ldr	r0, [r7, #4]
 c00674a:	f000 f9d8 	bl	c006afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c00674e:	687b      	ldr	r3, [r7, #4]
 c006750:	2200      	movs	r2, #0
 c006752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 c006754:	687b      	ldr	r3, [r7, #4]
 c006756:	681b      	ldr	r3, [r3, #0]
 c006758:	691b      	ldr	r3, [r3, #16]
 c00675a:	f003 0304 	and.w	r3, r3, #4
 c00675e:	2b04      	cmp	r3, #4
 c006760:	d122      	bne.n	c0067a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 c006762:	687b      	ldr	r3, [r7, #4]
 c006764:	681b      	ldr	r3, [r3, #0]
 c006766:	68db      	ldr	r3, [r3, #12]
 c006768:	f003 0304 	and.w	r3, r3, #4
 c00676c:	2b04      	cmp	r3, #4
 c00676e:	d11b      	bne.n	c0067a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 c006770:	687b      	ldr	r3, [r7, #4]
 c006772:	681b      	ldr	r3, [r3, #0]
 c006774:	f06f 0204 	mvn.w	r2, #4
 c006778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 c00677a:	687b      	ldr	r3, [r7, #4]
 c00677c:	2202      	movs	r2, #2
 c00677e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 c006780:	687b      	ldr	r3, [r7, #4]
 c006782:	681b      	ldr	r3, [r3, #0]
 c006784:	699b      	ldr	r3, [r3, #24]
 c006786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c00678a:	2b00      	cmp	r3, #0
 c00678c:	d003      	beq.n	c006796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 c00678e:	6878      	ldr	r0, [r7, #4]
 c006790:	f000 f9ab 	bl	c006aea <HAL_TIM_IC_CaptureCallback>
 c006794:	e005      	b.n	c0067a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 c006796:	6878      	ldr	r0, [r7, #4]
 c006798:	f000 f99d 	bl	c006ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 c00679c:	6878      	ldr	r0, [r7, #4]
 c00679e:	f000 f9ae 	bl	c006afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c0067a2:	687b      	ldr	r3, [r7, #4]
 c0067a4:	2200      	movs	r2, #0
 c0067a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 c0067a8:	687b      	ldr	r3, [r7, #4]
 c0067aa:	681b      	ldr	r3, [r3, #0]
 c0067ac:	691b      	ldr	r3, [r3, #16]
 c0067ae:	f003 0308 	and.w	r3, r3, #8
 c0067b2:	2b08      	cmp	r3, #8
 c0067b4:	d122      	bne.n	c0067fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 c0067b6:	687b      	ldr	r3, [r7, #4]
 c0067b8:	681b      	ldr	r3, [r3, #0]
 c0067ba:	68db      	ldr	r3, [r3, #12]
 c0067bc:	f003 0308 	and.w	r3, r3, #8
 c0067c0:	2b08      	cmp	r3, #8
 c0067c2:	d11b      	bne.n	c0067fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 c0067c4:	687b      	ldr	r3, [r7, #4]
 c0067c6:	681b      	ldr	r3, [r3, #0]
 c0067c8:	f06f 0208 	mvn.w	r2, #8
 c0067cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 c0067ce:	687b      	ldr	r3, [r7, #4]
 c0067d0:	2204      	movs	r2, #4
 c0067d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 c0067d4:	687b      	ldr	r3, [r7, #4]
 c0067d6:	681b      	ldr	r3, [r3, #0]
 c0067d8:	69db      	ldr	r3, [r3, #28]
 c0067da:	f003 0303 	and.w	r3, r3, #3
 c0067de:	2b00      	cmp	r3, #0
 c0067e0:	d003      	beq.n	c0067ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 c0067e2:	6878      	ldr	r0, [r7, #4]
 c0067e4:	f000 f981 	bl	c006aea <HAL_TIM_IC_CaptureCallback>
 c0067e8:	e005      	b.n	c0067f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 c0067ea:	6878      	ldr	r0, [r7, #4]
 c0067ec:	f000 f973 	bl	c006ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 c0067f0:	6878      	ldr	r0, [r7, #4]
 c0067f2:	f000 f984 	bl	c006afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c0067f6:	687b      	ldr	r3, [r7, #4]
 c0067f8:	2200      	movs	r2, #0
 c0067fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 c0067fc:	687b      	ldr	r3, [r7, #4]
 c0067fe:	681b      	ldr	r3, [r3, #0]
 c006800:	691b      	ldr	r3, [r3, #16]
 c006802:	f003 0310 	and.w	r3, r3, #16
 c006806:	2b10      	cmp	r3, #16
 c006808:	d122      	bne.n	c006850 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 c00680a:	687b      	ldr	r3, [r7, #4]
 c00680c:	681b      	ldr	r3, [r3, #0]
 c00680e:	68db      	ldr	r3, [r3, #12]
 c006810:	f003 0310 	and.w	r3, r3, #16
 c006814:	2b10      	cmp	r3, #16
 c006816:	d11b      	bne.n	c006850 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 c006818:	687b      	ldr	r3, [r7, #4]
 c00681a:	681b      	ldr	r3, [r3, #0]
 c00681c:	f06f 0210 	mvn.w	r2, #16
 c006820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 c006822:	687b      	ldr	r3, [r7, #4]
 c006824:	2208      	movs	r2, #8
 c006826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 c006828:	687b      	ldr	r3, [r7, #4]
 c00682a:	681b      	ldr	r3, [r3, #0]
 c00682c:	69db      	ldr	r3, [r3, #28]
 c00682e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c006832:	2b00      	cmp	r3, #0
 c006834:	d003      	beq.n	c00683e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 c006836:	6878      	ldr	r0, [r7, #4]
 c006838:	f000 f957 	bl	c006aea <HAL_TIM_IC_CaptureCallback>
 c00683c:	e005      	b.n	c00684a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 c00683e:	6878      	ldr	r0, [r7, #4]
 c006840:	f000 f949 	bl	c006ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 c006844:	6878      	ldr	r0, [r7, #4]
 c006846:	f000 f95a 	bl	c006afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c00684a:	687b      	ldr	r3, [r7, #4]
 c00684c:	2200      	movs	r2, #0
 c00684e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 c006850:	687b      	ldr	r3, [r7, #4]
 c006852:	681b      	ldr	r3, [r3, #0]
 c006854:	691b      	ldr	r3, [r3, #16]
 c006856:	f003 0301 	and.w	r3, r3, #1
 c00685a:	2b01      	cmp	r3, #1
 c00685c:	d10e      	bne.n	c00687c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 c00685e:	687b      	ldr	r3, [r7, #4]
 c006860:	681b      	ldr	r3, [r3, #0]
 c006862:	68db      	ldr	r3, [r3, #12]
 c006864:	f003 0301 	and.w	r3, r3, #1
 c006868:	2b01      	cmp	r3, #1
 c00686a:	d107      	bne.n	c00687c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 c00686c:	687b      	ldr	r3, [r7, #4]
 c00686e:	681b      	ldr	r3, [r3, #0]
 c006870:	f06f 0201 	mvn.w	r2, #1
 c006874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 c006876:	6878      	ldr	r0, [r7, #4]
 c006878:	f000 f923 	bl	c006ac2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 c00687c:	687b      	ldr	r3, [r7, #4]
 c00687e:	681b      	ldr	r3, [r3, #0]
 c006880:	691b      	ldr	r3, [r3, #16]
 c006882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c006886:	2b80      	cmp	r3, #128	; 0x80
 c006888:	d10e      	bne.n	c0068a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 c00688a:	687b      	ldr	r3, [r7, #4]
 c00688c:	681b      	ldr	r3, [r3, #0]
 c00688e:	68db      	ldr	r3, [r3, #12]
 c006890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c006894:	2b80      	cmp	r3, #128	; 0x80
 c006896:	d107      	bne.n	c0068a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 c006898:	687b      	ldr	r3, [r7, #4]
 c00689a:	681b      	ldr	r3, [r3, #0]
 c00689c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 c0068a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 c0068a2:	6878      	ldr	r0, [r7, #4]
 c0068a4:	f000 fb08 	bl	c006eb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 c0068a8:	687b      	ldr	r3, [r7, #4]
 c0068aa:	681b      	ldr	r3, [r3, #0]
 c0068ac:	691b      	ldr	r3, [r3, #16]
 c0068ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0068b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c0068b6:	d10e      	bne.n	c0068d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 c0068b8:	687b      	ldr	r3, [r7, #4]
 c0068ba:	681b      	ldr	r3, [r3, #0]
 c0068bc:	68db      	ldr	r3, [r3, #12]
 c0068be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0068c2:	2b80      	cmp	r3, #128	; 0x80
 c0068c4:	d107      	bne.n	c0068d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 c0068c6:	687b      	ldr	r3, [r7, #4]
 c0068c8:	681b      	ldr	r3, [r3, #0]
 c0068ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 c0068ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 c0068d0:	6878      	ldr	r0, [r7, #4]
 c0068d2:	f000 fafb 	bl	c006ecc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 c0068d6:	687b      	ldr	r3, [r7, #4]
 c0068d8:	681b      	ldr	r3, [r3, #0]
 c0068da:	691b      	ldr	r3, [r3, #16]
 c0068dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0068e0:	2b40      	cmp	r3, #64	; 0x40
 c0068e2:	d10e      	bne.n	c006902 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 c0068e4:	687b      	ldr	r3, [r7, #4]
 c0068e6:	681b      	ldr	r3, [r3, #0]
 c0068e8:	68db      	ldr	r3, [r3, #12]
 c0068ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0068ee:	2b40      	cmp	r3, #64	; 0x40
 c0068f0:	d107      	bne.n	c006902 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 c0068f2:	687b      	ldr	r3, [r7, #4]
 c0068f4:	681b      	ldr	r3, [r3, #0]
 c0068f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 c0068fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 c0068fc:	6878      	ldr	r0, [r7, #4]
 c0068fe:	f000 f908 	bl	c006b12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 c006902:	687b      	ldr	r3, [r7, #4]
 c006904:	681b      	ldr	r3, [r3, #0]
 c006906:	691b      	ldr	r3, [r3, #16]
 c006908:	f003 0320 	and.w	r3, r3, #32
 c00690c:	2b20      	cmp	r3, #32
 c00690e:	d10e      	bne.n	c00692e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 c006910:	687b      	ldr	r3, [r7, #4]
 c006912:	681b      	ldr	r3, [r3, #0]
 c006914:	68db      	ldr	r3, [r3, #12]
 c006916:	f003 0320 	and.w	r3, r3, #32
 c00691a:	2b20      	cmp	r3, #32
 c00691c:	d107      	bne.n	c00692e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 c00691e:	687b      	ldr	r3, [r7, #4]
 c006920:	681b      	ldr	r3, [r3, #0]
 c006922:	f06f 0220 	mvn.w	r2, #32
 c006926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 c006928:	6878      	ldr	r0, [r7, #4]
 c00692a:	f000 fabb 	bl	c006ea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 c00692e:	bf00      	nop
 c006930:	3708      	adds	r7, #8
 c006932:	46bd      	mov	sp, r7
 c006934:	bd80      	pop	{r7, pc}

0c006936 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 c006936:	b580      	push	{r7, lr}
 c006938:	b084      	sub	sp, #16
 c00693a:	af00      	add	r7, sp, #0
 c00693c:	6078      	str	r0, [r7, #4]
 c00693e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 c006940:	687b      	ldr	r3, [r7, #4]
 c006942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 c006946:	2b01      	cmp	r3, #1
 c006948:	d101      	bne.n	c00694e <HAL_TIM_ConfigClockSource+0x18>
 c00694a:	2302      	movs	r3, #2
 c00694c:	e0b5      	b.n	c006aba <HAL_TIM_ConfigClockSource+0x184>
 c00694e:	687b      	ldr	r3, [r7, #4]
 c006950:	2201      	movs	r2, #1
 c006952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 c006956:	687b      	ldr	r3, [r7, #4]
 c006958:	2202      	movs	r2, #2
 c00695a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 c00695e:	687b      	ldr	r3, [r7, #4]
 c006960:	681b      	ldr	r3, [r3, #0]
 c006962:	689b      	ldr	r3, [r3, #8]
 c006964:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 c006966:	68fb      	ldr	r3, [r7, #12]
 c006968:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 c00696c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 c006970:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 c006972:	68fb      	ldr	r3, [r7, #12]
 c006974:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 c006978:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 c00697a:	687b      	ldr	r3, [r7, #4]
 c00697c:	681b      	ldr	r3, [r3, #0]
 c00697e:	68fa      	ldr	r2, [r7, #12]
 c006980:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 c006982:	683b      	ldr	r3, [r7, #0]
 c006984:	681b      	ldr	r3, [r3, #0]
 c006986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c00698a:	d03e      	beq.n	c006a0a <HAL_TIM_ConfigClockSource+0xd4>
 c00698c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c006990:	f200 8087 	bhi.w	c006aa2 <HAL_TIM_ConfigClockSource+0x16c>
 c006994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c006998:	f000 8085 	beq.w	c006aa6 <HAL_TIM_ConfigClockSource+0x170>
 c00699c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c0069a0:	d87f      	bhi.n	c006aa2 <HAL_TIM_ConfigClockSource+0x16c>
 c0069a2:	2b70      	cmp	r3, #112	; 0x70
 c0069a4:	d01a      	beq.n	c0069dc <HAL_TIM_ConfigClockSource+0xa6>
 c0069a6:	2b70      	cmp	r3, #112	; 0x70
 c0069a8:	d87b      	bhi.n	c006aa2 <HAL_TIM_ConfigClockSource+0x16c>
 c0069aa:	2b60      	cmp	r3, #96	; 0x60
 c0069ac:	d050      	beq.n	c006a50 <HAL_TIM_ConfigClockSource+0x11a>
 c0069ae:	2b60      	cmp	r3, #96	; 0x60
 c0069b0:	d877      	bhi.n	c006aa2 <HAL_TIM_ConfigClockSource+0x16c>
 c0069b2:	2b50      	cmp	r3, #80	; 0x50
 c0069b4:	d03c      	beq.n	c006a30 <HAL_TIM_ConfigClockSource+0xfa>
 c0069b6:	2b50      	cmp	r3, #80	; 0x50
 c0069b8:	d873      	bhi.n	c006aa2 <HAL_TIM_ConfigClockSource+0x16c>
 c0069ba:	2b40      	cmp	r3, #64	; 0x40
 c0069bc:	d058      	beq.n	c006a70 <HAL_TIM_ConfigClockSource+0x13a>
 c0069be:	2b40      	cmp	r3, #64	; 0x40
 c0069c0:	d86f      	bhi.n	c006aa2 <HAL_TIM_ConfigClockSource+0x16c>
 c0069c2:	2b30      	cmp	r3, #48	; 0x30
 c0069c4:	d064      	beq.n	c006a90 <HAL_TIM_ConfigClockSource+0x15a>
 c0069c6:	2b30      	cmp	r3, #48	; 0x30
 c0069c8:	d86b      	bhi.n	c006aa2 <HAL_TIM_ConfigClockSource+0x16c>
 c0069ca:	2b20      	cmp	r3, #32
 c0069cc:	d060      	beq.n	c006a90 <HAL_TIM_ConfigClockSource+0x15a>
 c0069ce:	2b20      	cmp	r3, #32
 c0069d0:	d867      	bhi.n	c006aa2 <HAL_TIM_ConfigClockSource+0x16c>
 c0069d2:	2b00      	cmp	r3, #0
 c0069d4:	d05c      	beq.n	c006a90 <HAL_TIM_ConfigClockSource+0x15a>
 c0069d6:	2b10      	cmp	r3, #16
 c0069d8:	d05a      	beq.n	c006a90 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 c0069da:	e062      	b.n	c006aa2 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 c0069dc:	687b      	ldr	r3, [r7, #4]
 c0069de:	6818      	ldr	r0, [r3, #0]
 c0069e0:	683b      	ldr	r3, [r7, #0]
 c0069e2:	6899      	ldr	r1, [r3, #8]
 c0069e4:	683b      	ldr	r3, [r7, #0]
 c0069e6:	685a      	ldr	r2, [r3, #4]
 c0069e8:	683b      	ldr	r3, [r7, #0]
 c0069ea:	68db      	ldr	r3, [r3, #12]
 c0069ec:	f000 f9b2 	bl	c006d54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 c0069f0:	687b      	ldr	r3, [r7, #4]
 c0069f2:	681b      	ldr	r3, [r3, #0]
 c0069f4:	689b      	ldr	r3, [r3, #8]
 c0069f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 c0069f8:	68fb      	ldr	r3, [r7, #12]
 c0069fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 c0069fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 c006a00:	687b      	ldr	r3, [r7, #4]
 c006a02:	681b      	ldr	r3, [r3, #0]
 c006a04:	68fa      	ldr	r2, [r7, #12]
 c006a06:	609a      	str	r2, [r3, #8]
      break;
 c006a08:	e04e      	b.n	c006aa8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 c006a0a:	687b      	ldr	r3, [r7, #4]
 c006a0c:	6818      	ldr	r0, [r3, #0]
 c006a0e:	683b      	ldr	r3, [r7, #0]
 c006a10:	6899      	ldr	r1, [r3, #8]
 c006a12:	683b      	ldr	r3, [r7, #0]
 c006a14:	685a      	ldr	r2, [r3, #4]
 c006a16:	683b      	ldr	r3, [r7, #0]
 c006a18:	68db      	ldr	r3, [r3, #12]
 c006a1a:	f000 f99b 	bl	c006d54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 c006a1e:	687b      	ldr	r3, [r7, #4]
 c006a20:	681b      	ldr	r3, [r3, #0]
 c006a22:	689a      	ldr	r2, [r3, #8]
 c006a24:	687b      	ldr	r3, [r7, #4]
 c006a26:	681b      	ldr	r3, [r3, #0]
 c006a28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 c006a2c:	609a      	str	r2, [r3, #8]
      break;
 c006a2e:	e03b      	b.n	c006aa8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 c006a30:	687b      	ldr	r3, [r7, #4]
 c006a32:	6818      	ldr	r0, [r3, #0]
 c006a34:	683b      	ldr	r3, [r7, #0]
 c006a36:	6859      	ldr	r1, [r3, #4]
 c006a38:	683b      	ldr	r3, [r7, #0]
 c006a3a:	68db      	ldr	r3, [r3, #12]
 c006a3c:	461a      	mov	r2, r3
 c006a3e:	f000 f90d 	bl	c006c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 c006a42:	687b      	ldr	r3, [r7, #4]
 c006a44:	681b      	ldr	r3, [r3, #0]
 c006a46:	2150      	movs	r1, #80	; 0x50
 c006a48:	4618      	mov	r0, r3
 c006a4a:	f000 f966 	bl	c006d1a <TIM_ITRx_SetConfig>
      break;
 c006a4e:	e02b      	b.n	c006aa8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 c006a50:	687b      	ldr	r3, [r7, #4]
 c006a52:	6818      	ldr	r0, [r3, #0]
 c006a54:	683b      	ldr	r3, [r7, #0]
 c006a56:	6859      	ldr	r1, [r3, #4]
 c006a58:	683b      	ldr	r3, [r7, #0]
 c006a5a:	68db      	ldr	r3, [r3, #12]
 c006a5c:	461a      	mov	r2, r3
 c006a5e:	f000 f92c 	bl	c006cba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 c006a62:	687b      	ldr	r3, [r7, #4]
 c006a64:	681b      	ldr	r3, [r3, #0]
 c006a66:	2160      	movs	r1, #96	; 0x60
 c006a68:	4618      	mov	r0, r3
 c006a6a:	f000 f956 	bl	c006d1a <TIM_ITRx_SetConfig>
      break;
 c006a6e:	e01b      	b.n	c006aa8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 c006a70:	687b      	ldr	r3, [r7, #4]
 c006a72:	6818      	ldr	r0, [r3, #0]
 c006a74:	683b      	ldr	r3, [r7, #0]
 c006a76:	6859      	ldr	r1, [r3, #4]
 c006a78:	683b      	ldr	r3, [r7, #0]
 c006a7a:	68db      	ldr	r3, [r3, #12]
 c006a7c:	461a      	mov	r2, r3
 c006a7e:	f000 f8ed 	bl	c006c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 c006a82:	687b      	ldr	r3, [r7, #4]
 c006a84:	681b      	ldr	r3, [r3, #0]
 c006a86:	2140      	movs	r1, #64	; 0x40
 c006a88:	4618      	mov	r0, r3
 c006a8a:	f000 f946 	bl	c006d1a <TIM_ITRx_SetConfig>
      break;
 c006a8e:	e00b      	b.n	c006aa8 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 c006a90:	687b      	ldr	r3, [r7, #4]
 c006a92:	681a      	ldr	r2, [r3, #0]
 c006a94:	683b      	ldr	r3, [r7, #0]
 c006a96:	681b      	ldr	r3, [r3, #0]
 c006a98:	4619      	mov	r1, r3
 c006a9a:	4610      	mov	r0, r2
 c006a9c:	f000 f93d 	bl	c006d1a <TIM_ITRx_SetConfig>
        break;
 c006aa0:	e002      	b.n	c006aa8 <HAL_TIM_ConfigClockSource+0x172>
      break;
 c006aa2:	bf00      	nop
 c006aa4:	e000      	b.n	c006aa8 <HAL_TIM_ConfigClockSource+0x172>
      break;
 c006aa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 c006aa8:	687b      	ldr	r3, [r7, #4]
 c006aaa:	2201      	movs	r2, #1
 c006aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 c006ab0:	687b      	ldr	r3, [r7, #4]
 c006ab2:	2200      	movs	r2, #0
 c006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 c006ab8:	2300      	movs	r3, #0
}
 c006aba:	4618      	mov	r0, r3
 c006abc:	3710      	adds	r7, #16
 c006abe:	46bd      	mov	sp, r7
 c006ac0:	bd80      	pop	{r7, pc}

0c006ac2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 c006ac2:	b480      	push	{r7}
 c006ac4:	b083      	sub	sp, #12
 c006ac6:	af00      	add	r7, sp, #0
 c006ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 c006aca:	bf00      	nop
 c006acc:	370c      	adds	r7, #12
 c006ace:	46bd      	mov	sp, r7
 c006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006ad4:	4770      	bx	lr

0c006ad6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 c006ad6:	b480      	push	{r7}
 c006ad8:	b083      	sub	sp, #12
 c006ada:	af00      	add	r7, sp, #0
 c006adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 c006ade:	bf00      	nop
 c006ae0:	370c      	adds	r7, #12
 c006ae2:	46bd      	mov	sp, r7
 c006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006ae8:	4770      	bx	lr

0c006aea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 c006aea:	b480      	push	{r7}
 c006aec:	b083      	sub	sp, #12
 c006aee:	af00      	add	r7, sp, #0
 c006af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 c006af2:	bf00      	nop
 c006af4:	370c      	adds	r7, #12
 c006af6:	46bd      	mov	sp, r7
 c006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006afc:	4770      	bx	lr

0c006afe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 c006afe:	b480      	push	{r7}
 c006b00:	b083      	sub	sp, #12
 c006b02:	af00      	add	r7, sp, #0
 c006b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 c006b06:	bf00      	nop
 c006b08:	370c      	adds	r7, #12
 c006b0a:	46bd      	mov	sp, r7
 c006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006b10:	4770      	bx	lr

0c006b12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 c006b12:	b480      	push	{r7}
 c006b14:	b083      	sub	sp, #12
 c006b16:	af00      	add	r7, sp, #0
 c006b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 c006b1a:	bf00      	nop
 c006b1c:	370c      	adds	r7, #12
 c006b1e:	46bd      	mov	sp, r7
 c006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006b24:	4770      	bx	lr
	...

0c006b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 c006b28:	b480      	push	{r7}
 c006b2a:	b085      	sub	sp, #20
 c006b2c:	af00      	add	r7, sp, #0
 c006b2e:	6078      	str	r0, [r7, #4]
 c006b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 c006b32:	687b      	ldr	r3, [r7, #4]
 c006b34:	681b      	ldr	r3, [r3, #0]
 c006b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 c006b38:	687b      	ldr	r3, [r7, #4]
 c006b3a:	4a40      	ldr	r2, [pc, #256]	; (c006c3c <TIM_Base_SetConfig+0x114>)
 c006b3c:	4293      	cmp	r3, r2
 c006b3e:	d013      	beq.n	c006b68 <TIM_Base_SetConfig+0x40>
 c006b40:	687b      	ldr	r3, [r7, #4]
 c006b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c006b46:	d00f      	beq.n	c006b68 <TIM_Base_SetConfig+0x40>
 c006b48:	687b      	ldr	r3, [r7, #4]
 c006b4a:	4a3d      	ldr	r2, [pc, #244]	; (c006c40 <TIM_Base_SetConfig+0x118>)
 c006b4c:	4293      	cmp	r3, r2
 c006b4e:	d00b      	beq.n	c006b68 <TIM_Base_SetConfig+0x40>
 c006b50:	687b      	ldr	r3, [r7, #4]
 c006b52:	4a3c      	ldr	r2, [pc, #240]	; (c006c44 <TIM_Base_SetConfig+0x11c>)
 c006b54:	4293      	cmp	r3, r2
 c006b56:	d007      	beq.n	c006b68 <TIM_Base_SetConfig+0x40>
 c006b58:	687b      	ldr	r3, [r7, #4]
 c006b5a:	4a3b      	ldr	r2, [pc, #236]	; (c006c48 <TIM_Base_SetConfig+0x120>)
 c006b5c:	4293      	cmp	r3, r2
 c006b5e:	d003      	beq.n	c006b68 <TIM_Base_SetConfig+0x40>
 c006b60:	687b      	ldr	r3, [r7, #4]
 c006b62:	4a3a      	ldr	r2, [pc, #232]	; (c006c4c <TIM_Base_SetConfig+0x124>)
 c006b64:	4293      	cmp	r3, r2
 c006b66:	d108      	bne.n	c006b7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 c006b68:	68fb      	ldr	r3, [r7, #12]
 c006b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 c006b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 c006b70:	683b      	ldr	r3, [r7, #0]
 c006b72:	685b      	ldr	r3, [r3, #4]
 c006b74:	68fa      	ldr	r2, [r7, #12]
 c006b76:	4313      	orrs	r3, r2
 c006b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 c006b7a:	687b      	ldr	r3, [r7, #4]
 c006b7c:	4a2f      	ldr	r2, [pc, #188]	; (c006c3c <TIM_Base_SetConfig+0x114>)
 c006b7e:	4293      	cmp	r3, r2
 c006b80:	d01f      	beq.n	c006bc2 <TIM_Base_SetConfig+0x9a>
 c006b82:	687b      	ldr	r3, [r7, #4]
 c006b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c006b88:	d01b      	beq.n	c006bc2 <TIM_Base_SetConfig+0x9a>
 c006b8a:	687b      	ldr	r3, [r7, #4]
 c006b8c:	4a2c      	ldr	r2, [pc, #176]	; (c006c40 <TIM_Base_SetConfig+0x118>)
 c006b8e:	4293      	cmp	r3, r2
 c006b90:	d017      	beq.n	c006bc2 <TIM_Base_SetConfig+0x9a>
 c006b92:	687b      	ldr	r3, [r7, #4]
 c006b94:	4a2b      	ldr	r2, [pc, #172]	; (c006c44 <TIM_Base_SetConfig+0x11c>)
 c006b96:	4293      	cmp	r3, r2
 c006b98:	d013      	beq.n	c006bc2 <TIM_Base_SetConfig+0x9a>
 c006b9a:	687b      	ldr	r3, [r7, #4]
 c006b9c:	4a2a      	ldr	r2, [pc, #168]	; (c006c48 <TIM_Base_SetConfig+0x120>)
 c006b9e:	4293      	cmp	r3, r2
 c006ba0:	d00f      	beq.n	c006bc2 <TIM_Base_SetConfig+0x9a>
 c006ba2:	687b      	ldr	r3, [r7, #4]
 c006ba4:	4a29      	ldr	r2, [pc, #164]	; (c006c4c <TIM_Base_SetConfig+0x124>)
 c006ba6:	4293      	cmp	r3, r2
 c006ba8:	d00b      	beq.n	c006bc2 <TIM_Base_SetConfig+0x9a>
 c006baa:	687b      	ldr	r3, [r7, #4]
 c006bac:	4a28      	ldr	r2, [pc, #160]	; (c006c50 <TIM_Base_SetConfig+0x128>)
 c006bae:	4293      	cmp	r3, r2
 c006bb0:	d007      	beq.n	c006bc2 <TIM_Base_SetConfig+0x9a>
 c006bb2:	687b      	ldr	r3, [r7, #4]
 c006bb4:	4a27      	ldr	r2, [pc, #156]	; (c006c54 <TIM_Base_SetConfig+0x12c>)
 c006bb6:	4293      	cmp	r3, r2
 c006bb8:	d003      	beq.n	c006bc2 <TIM_Base_SetConfig+0x9a>
 c006bba:	687b      	ldr	r3, [r7, #4]
 c006bbc:	4a26      	ldr	r2, [pc, #152]	; (c006c58 <TIM_Base_SetConfig+0x130>)
 c006bbe:	4293      	cmp	r3, r2
 c006bc0:	d108      	bne.n	c006bd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 c006bc2:	68fb      	ldr	r3, [r7, #12]
 c006bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c006bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 c006bca:	683b      	ldr	r3, [r7, #0]
 c006bcc:	68db      	ldr	r3, [r3, #12]
 c006bce:	68fa      	ldr	r2, [r7, #12]
 c006bd0:	4313      	orrs	r3, r2
 c006bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 c006bd4:	68fb      	ldr	r3, [r7, #12]
 c006bd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 c006bda:	683b      	ldr	r3, [r7, #0]
 c006bdc:	695b      	ldr	r3, [r3, #20]
 c006bde:	4313      	orrs	r3, r2
 c006be0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 c006be2:	687b      	ldr	r3, [r7, #4]
 c006be4:	68fa      	ldr	r2, [r7, #12]
 c006be6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 c006be8:	683b      	ldr	r3, [r7, #0]
 c006bea:	689a      	ldr	r2, [r3, #8]
 c006bec:	687b      	ldr	r3, [r7, #4]
 c006bee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 c006bf0:	683b      	ldr	r3, [r7, #0]
 c006bf2:	681a      	ldr	r2, [r3, #0]
 c006bf4:	687b      	ldr	r3, [r7, #4]
 c006bf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 c006bf8:	687b      	ldr	r3, [r7, #4]
 c006bfa:	4a10      	ldr	r2, [pc, #64]	; (c006c3c <TIM_Base_SetConfig+0x114>)
 c006bfc:	4293      	cmp	r3, r2
 c006bfe:	d00f      	beq.n	c006c20 <TIM_Base_SetConfig+0xf8>
 c006c00:	687b      	ldr	r3, [r7, #4]
 c006c02:	4a12      	ldr	r2, [pc, #72]	; (c006c4c <TIM_Base_SetConfig+0x124>)
 c006c04:	4293      	cmp	r3, r2
 c006c06:	d00b      	beq.n	c006c20 <TIM_Base_SetConfig+0xf8>
 c006c08:	687b      	ldr	r3, [r7, #4]
 c006c0a:	4a11      	ldr	r2, [pc, #68]	; (c006c50 <TIM_Base_SetConfig+0x128>)
 c006c0c:	4293      	cmp	r3, r2
 c006c0e:	d007      	beq.n	c006c20 <TIM_Base_SetConfig+0xf8>
 c006c10:	687b      	ldr	r3, [r7, #4]
 c006c12:	4a10      	ldr	r2, [pc, #64]	; (c006c54 <TIM_Base_SetConfig+0x12c>)
 c006c14:	4293      	cmp	r3, r2
 c006c16:	d003      	beq.n	c006c20 <TIM_Base_SetConfig+0xf8>
 c006c18:	687b      	ldr	r3, [r7, #4]
 c006c1a:	4a0f      	ldr	r2, [pc, #60]	; (c006c58 <TIM_Base_SetConfig+0x130>)
 c006c1c:	4293      	cmp	r3, r2
 c006c1e:	d103      	bne.n	c006c28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 c006c20:	683b      	ldr	r3, [r7, #0]
 c006c22:	691a      	ldr	r2, [r3, #16]
 c006c24:	687b      	ldr	r3, [r7, #4]
 c006c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 c006c28:	687b      	ldr	r3, [r7, #4]
 c006c2a:	2201      	movs	r2, #1
 c006c2c:	615a      	str	r2, [r3, #20]
}
 c006c2e:	bf00      	nop
 c006c30:	3714      	adds	r7, #20
 c006c32:	46bd      	mov	sp, r7
 c006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006c38:	4770      	bx	lr
 c006c3a:	bf00      	nop
 c006c3c:	50012c00 	.word	0x50012c00
 c006c40:	50000400 	.word	0x50000400
 c006c44:	50000800 	.word	0x50000800
 c006c48:	50000c00 	.word	0x50000c00
 c006c4c:	50013400 	.word	0x50013400
 c006c50:	50014000 	.word	0x50014000
 c006c54:	50014400 	.word	0x50014400
 c006c58:	50014800 	.word	0x50014800

0c006c5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 c006c5c:	b480      	push	{r7}
 c006c5e:	b087      	sub	sp, #28
 c006c60:	af00      	add	r7, sp, #0
 c006c62:	60f8      	str	r0, [r7, #12]
 c006c64:	60b9      	str	r1, [r7, #8]
 c006c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 c006c68:	68fb      	ldr	r3, [r7, #12]
 c006c6a:	6a1b      	ldr	r3, [r3, #32]
 c006c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 c006c6e:	68fb      	ldr	r3, [r7, #12]
 c006c70:	6a1b      	ldr	r3, [r3, #32]
 c006c72:	f023 0201 	bic.w	r2, r3, #1
 c006c76:	68fb      	ldr	r3, [r7, #12]
 c006c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 c006c7a:	68fb      	ldr	r3, [r7, #12]
 c006c7c:	699b      	ldr	r3, [r3, #24]
 c006c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 c006c80:	693b      	ldr	r3, [r7, #16]
 c006c82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c006c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 c006c88:	687b      	ldr	r3, [r7, #4]
 c006c8a:	011b      	lsls	r3, r3, #4
 c006c8c:	693a      	ldr	r2, [r7, #16]
 c006c8e:	4313      	orrs	r3, r2
 c006c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 c006c92:	697b      	ldr	r3, [r7, #20]
 c006c94:	f023 030a 	bic.w	r3, r3, #10
 c006c98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 c006c9a:	697a      	ldr	r2, [r7, #20]
 c006c9c:	68bb      	ldr	r3, [r7, #8]
 c006c9e:	4313      	orrs	r3, r2
 c006ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 c006ca2:	68fb      	ldr	r3, [r7, #12]
 c006ca4:	693a      	ldr	r2, [r7, #16]
 c006ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 c006ca8:	68fb      	ldr	r3, [r7, #12]
 c006caa:	697a      	ldr	r2, [r7, #20]
 c006cac:	621a      	str	r2, [r3, #32]
}
 c006cae:	bf00      	nop
 c006cb0:	371c      	adds	r7, #28
 c006cb2:	46bd      	mov	sp, r7
 c006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006cb8:	4770      	bx	lr

0c006cba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 c006cba:	b480      	push	{r7}
 c006cbc:	b087      	sub	sp, #28
 c006cbe:	af00      	add	r7, sp, #0
 c006cc0:	60f8      	str	r0, [r7, #12]
 c006cc2:	60b9      	str	r1, [r7, #8]
 c006cc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 c006cc6:	68fb      	ldr	r3, [r7, #12]
 c006cc8:	6a1b      	ldr	r3, [r3, #32]
 c006cca:	f023 0210 	bic.w	r2, r3, #16
 c006cce:	68fb      	ldr	r3, [r7, #12]
 c006cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 c006cd2:	68fb      	ldr	r3, [r7, #12]
 c006cd4:	699b      	ldr	r3, [r3, #24]
 c006cd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 c006cd8:	68fb      	ldr	r3, [r7, #12]
 c006cda:	6a1b      	ldr	r3, [r3, #32]
 c006cdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 c006cde:	697b      	ldr	r3, [r7, #20]
 c006ce0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 c006ce4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 c006ce6:	687b      	ldr	r3, [r7, #4]
 c006ce8:	031b      	lsls	r3, r3, #12
 c006cea:	697a      	ldr	r2, [r7, #20]
 c006cec:	4313      	orrs	r3, r2
 c006cee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 c006cf0:	693b      	ldr	r3, [r7, #16]
 c006cf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 c006cf6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 c006cf8:	68bb      	ldr	r3, [r7, #8]
 c006cfa:	011b      	lsls	r3, r3, #4
 c006cfc:	693a      	ldr	r2, [r7, #16]
 c006cfe:	4313      	orrs	r3, r2
 c006d00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 c006d02:	68fb      	ldr	r3, [r7, #12]
 c006d04:	697a      	ldr	r2, [r7, #20]
 c006d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 c006d08:	68fb      	ldr	r3, [r7, #12]
 c006d0a:	693a      	ldr	r2, [r7, #16]
 c006d0c:	621a      	str	r2, [r3, #32]
}
 c006d0e:	bf00      	nop
 c006d10:	371c      	adds	r7, #28
 c006d12:	46bd      	mov	sp, r7
 c006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006d18:	4770      	bx	lr

0c006d1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 c006d1a:	b480      	push	{r7}
 c006d1c:	b085      	sub	sp, #20
 c006d1e:	af00      	add	r7, sp, #0
 c006d20:	6078      	str	r0, [r7, #4]
 c006d22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 c006d24:	687b      	ldr	r3, [r7, #4]
 c006d26:	689b      	ldr	r3, [r3, #8]
 c006d28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 c006d2a:	68fb      	ldr	r3, [r7, #12]
 c006d2c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 c006d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 c006d34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 c006d36:	683a      	ldr	r2, [r7, #0]
 c006d38:	68fb      	ldr	r3, [r7, #12]
 c006d3a:	4313      	orrs	r3, r2
 c006d3c:	f043 0307 	orr.w	r3, r3, #7
 c006d40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 c006d42:	687b      	ldr	r3, [r7, #4]
 c006d44:	68fa      	ldr	r2, [r7, #12]
 c006d46:	609a      	str	r2, [r3, #8]
}
 c006d48:	bf00      	nop
 c006d4a:	3714      	adds	r7, #20
 c006d4c:	46bd      	mov	sp, r7
 c006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006d52:	4770      	bx	lr

0c006d54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 c006d54:	b480      	push	{r7}
 c006d56:	b087      	sub	sp, #28
 c006d58:	af00      	add	r7, sp, #0
 c006d5a:	60f8      	str	r0, [r7, #12]
 c006d5c:	60b9      	str	r1, [r7, #8]
 c006d5e:	607a      	str	r2, [r7, #4]
 c006d60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 c006d62:	68fb      	ldr	r3, [r7, #12]
 c006d64:	689b      	ldr	r3, [r3, #8]
 c006d66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 c006d68:	697b      	ldr	r3, [r7, #20]
 c006d6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 c006d6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 c006d70:	683b      	ldr	r3, [r7, #0]
 c006d72:	021a      	lsls	r2, r3, #8
 c006d74:	687b      	ldr	r3, [r7, #4]
 c006d76:	431a      	orrs	r2, r3
 c006d78:	68bb      	ldr	r3, [r7, #8]
 c006d7a:	4313      	orrs	r3, r2
 c006d7c:	697a      	ldr	r2, [r7, #20]
 c006d7e:	4313      	orrs	r3, r2
 c006d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 c006d82:	68fb      	ldr	r3, [r7, #12]
 c006d84:	697a      	ldr	r2, [r7, #20]
 c006d86:	609a      	str	r2, [r3, #8]
}
 c006d88:	bf00      	nop
 c006d8a:	371c      	adds	r7, #28
 c006d8c:	46bd      	mov	sp, r7
 c006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006d92:	4770      	bx	lr

0c006d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 c006d94:	b480      	push	{r7}
 c006d96:	b085      	sub	sp, #20
 c006d98:	af00      	add	r7, sp, #0
 c006d9a:	6078      	str	r0, [r7, #4]
 c006d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 c006d9e:	687b      	ldr	r3, [r7, #4]
 c006da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 c006da4:	2b01      	cmp	r3, #1
 c006da6:	d101      	bne.n	c006dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 c006da8:	2302      	movs	r3, #2
 c006daa:	e068      	b.n	c006e7e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 c006dac:	687b      	ldr	r3, [r7, #4]
 c006dae:	2201      	movs	r2, #1
 c006db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 c006db4:	687b      	ldr	r3, [r7, #4]
 c006db6:	2202      	movs	r2, #2
 c006db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 c006dbc:	687b      	ldr	r3, [r7, #4]
 c006dbe:	681b      	ldr	r3, [r3, #0]
 c006dc0:	685b      	ldr	r3, [r3, #4]
 c006dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 c006dc4:	687b      	ldr	r3, [r7, #4]
 c006dc6:	681b      	ldr	r3, [r3, #0]
 c006dc8:	689b      	ldr	r3, [r3, #8]
 c006dca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 c006dcc:	687b      	ldr	r3, [r7, #4]
 c006dce:	681b      	ldr	r3, [r3, #0]
 c006dd0:	4a2e      	ldr	r2, [pc, #184]	; (c006e8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 c006dd2:	4293      	cmp	r3, r2
 c006dd4:	d004      	beq.n	c006de0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 c006dd6:	687b      	ldr	r3, [r7, #4]
 c006dd8:	681b      	ldr	r3, [r3, #0]
 c006dda:	4a2d      	ldr	r2, [pc, #180]	; (c006e90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 c006ddc:	4293      	cmp	r3, r2
 c006dde:	d108      	bne.n	c006df2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 c006de0:	68fb      	ldr	r3, [r7, #12]
 c006de2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 c006de6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 c006de8:	683b      	ldr	r3, [r7, #0]
 c006dea:	685b      	ldr	r3, [r3, #4]
 c006dec:	68fa      	ldr	r2, [r7, #12]
 c006dee:	4313      	orrs	r3, r2
 c006df0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 c006df2:	68fb      	ldr	r3, [r7, #12]
 c006df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 c006df8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 c006dfa:	683b      	ldr	r3, [r7, #0]
 c006dfc:	681b      	ldr	r3, [r3, #0]
 c006dfe:	68fa      	ldr	r2, [r7, #12]
 c006e00:	4313      	orrs	r3, r2
 c006e02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 c006e04:	687b      	ldr	r3, [r7, #4]
 c006e06:	681b      	ldr	r3, [r3, #0]
 c006e08:	68fa      	ldr	r2, [r7, #12]
 c006e0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 c006e0c:	687b      	ldr	r3, [r7, #4]
 c006e0e:	681b      	ldr	r3, [r3, #0]
 c006e10:	4a1e      	ldr	r2, [pc, #120]	; (c006e8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 c006e12:	4293      	cmp	r3, r2
 c006e14:	d01d      	beq.n	c006e52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c006e16:	687b      	ldr	r3, [r7, #4]
 c006e18:	681b      	ldr	r3, [r3, #0]
 c006e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 c006e1e:	d018      	beq.n	c006e52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c006e20:	687b      	ldr	r3, [r7, #4]
 c006e22:	681b      	ldr	r3, [r3, #0]
 c006e24:	4a1b      	ldr	r2, [pc, #108]	; (c006e94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 c006e26:	4293      	cmp	r3, r2
 c006e28:	d013      	beq.n	c006e52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c006e2a:	687b      	ldr	r3, [r7, #4]
 c006e2c:	681b      	ldr	r3, [r3, #0]
 c006e2e:	4a1a      	ldr	r2, [pc, #104]	; (c006e98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 c006e30:	4293      	cmp	r3, r2
 c006e32:	d00e      	beq.n	c006e52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c006e34:	687b      	ldr	r3, [r7, #4]
 c006e36:	681b      	ldr	r3, [r3, #0]
 c006e38:	4a18      	ldr	r2, [pc, #96]	; (c006e9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 c006e3a:	4293      	cmp	r3, r2
 c006e3c:	d009      	beq.n	c006e52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c006e3e:	687b      	ldr	r3, [r7, #4]
 c006e40:	681b      	ldr	r3, [r3, #0]
 c006e42:	4a13      	ldr	r2, [pc, #76]	; (c006e90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 c006e44:	4293      	cmp	r3, r2
 c006e46:	d004      	beq.n	c006e52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 c006e48:	687b      	ldr	r3, [r7, #4]
 c006e4a:	681b      	ldr	r3, [r3, #0]
 c006e4c:	4a14      	ldr	r2, [pc, #80]	; (c006ea0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 c006e4e:	4293      	cmp	r3, r2
 c006e50:	d10c      	bne.n	c006e6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 c006e52:	68bb      	ldr	r3, [r7, #8]
 c006e54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c006e58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 c006e5a:	683b      	ldr	r3, [r7, #0]
 c006e5c:	689b      	ldr	r3, [r3, #8]
 c006e5e:	68ba      	ldr	r2, [r7, #8]
 c006e60:	4313      	orrs	r3, r2
 c006e62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 c006e64:	687b      	ldr	r3, [r7, #4]
 c006e66:	681b      	ldr	r3, [r3, #0]
 c006e68:	68ba      	ldr	r2, [r7, #8]
 c006e6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 c006e6c:	687b      	ldr	r3, [r7, #4]
 c006e6e:	2201      	movs	r2, #1
 c006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 c006e74:	687b      	ldr	r3, [r7, #4]
 c006e76:	2200      	movs	r2, #0
 c006e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 c006e7c:	2300      	movs	r3, #0
}
 c006e7e:	4618      	mov	r0, r3
 c006e80:	3714      	adds	r7, #20
 c006e82:	46bd      	mov	sp, r7
 c006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006e88:	4770      	bx	lr
 c006e8a:	bf00      	nop
 c006e8c:	50012c00 	.word	0x50012c00
 c006e90:	50013400 	.word	0x50013400
 c006e94:	50000400 	.word	0x50000400
 c006e98:	50000800 	.word	0x50000800
 c006e9c:	50000c00 	.word	0x50000c00
 c006ea0:	50014000 	.word	0x50014000

0c006ea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 c006ea4:	b480      	push	{r7}
 c006ea6:	b083      	sub	sp, #12
 c006ea8:	af00      	add	r7, sp, #0
 c006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 c006eac:	bf00      	nop
 c006eae:	370c      	adds	r7, #12
 c006eb0:	46bd      	mov	sp, r7
 c006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006eb6:	4770      	bx	lr

0c006eb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 c006eb8:	b480      	push	{r7}
 c006eba:	b083      	sub	sp, #12
 c006ebc:	af00      	add	r7, sp, #0
 c006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 c006ec0:	bf00      	nop
 c006ec2:	370c      	adds	r7, #12
 c006ec4:	46bd      	mov	sp, r7
 c006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006eca:	4770      	bx	lr

0c006ecc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 c006ecc:	b480      	push	{r7}
 c006ece:	b083      	sub	sp, #12
 c006ed0:	af00      	add	r7, sp, #0
 c006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 c006ed4:	bf00      	nop
 c006ed6:	370c      	adds	r7, #12
 c006ed8:	46bd      	mov	sp, r7
 c006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006ede:	4770      	bx	lr

0c006ee0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 c006ee0:	b580      	push	{r7, lr}
 c006ee2:	b082      	sub	sp, #8
 c006ee4:	af00      	add	r7, sp, #0
 c006ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 c006ee8:	687b      	ldr	r3, [r7, #4]
 c006eea:	2b00      	cmp	r3, #0
 c006eec:	d101      	bne.n	c006ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 c006eee:	2301      	movs	r3, #1
 c006ef0:	e042      	b.n	c006f78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 c006ef2:	687b      	ldr	r3, [r7, #4]
 c006ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c006ef8:	2b00      	cmp	r3, #0
 c006efa:	d106      	bne.n	c006f0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 c006efc:	687b      	ldr	r3, [r7, #4]
 c006efe:	2200      	movs	r2, #0
 c006f00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 c006f04:	6878      	ldr	r0, [r7, #4]
 c006f06:	f7fc fe33 	bl	c003b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 c006f0a:	687b      	ldr	r3, [r7, #4]
 c006f0c:	2224      	movs	r2, #36	; 0x24
 c006f0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 c006f12:	687b      	ldr	r3, [r7, #4]
 c006f14:	681b      	ldr	r3, [r3, #0]
 c006f16:	681a      	ldr	r2, [r3, #0]
 c006f18:	687b      	ldr	r3, [r7, #4]
 c006f1a:	681b      	ldr	r3, [r3, #0]
 c006f1c:	f022 0201 	bic.w	r2, r2, #1
 c006f20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 c006f22:	6878      	ldr	r0, [r7, #4]
 c006f24:	f000 f996 	bl	c007254 <UART_SetConfig>
 c006f28:	4603      	mov	r3, r0
 c006f2a:	2b01      	cmp	r3, #1
 c006f2c:	d101      	bne.n	c006f32 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 c006f2e:	2301      	movs	r3, #1
 c006f30:	e022      	b.n	c006f78 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c006f32:	687b      	ldr	r3, [r7, #4]
 c006f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006f36:	2b00      	cmp	r3, #0
 c006f38:	d002      	beq.n	c006f40 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 c006f3a:	6878      	ldr	r0, [r7, #4]
 c006f3c:	f000 fc88 	bl	c007850 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c006f40:	687b      	ldr	r3, [r7, #4]
 c006f42:	681b      	ldr	r3, [r3, #0]
 c006f44:	685a      	ldr	r2, [r3, #4]
 c006f46:	687b      	ldr	r3, [r7, #4]
 c006f48:	681b      	ldr	r3, [r3, #0]
 c006f4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 c006f4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c006f50:	687b      	ldr	r3, [r7, #4]
 c006f52:	681b      	ldr	r3, [r3, #0]
 c006f54:	689a      	ldr	r2, [r3, #8]
 c006f56:	687b      	ldr	r3, [r7, #4]
 c006f58:	681b      	ldr	r3, [r3, #0]
 c006f5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 c006f5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 c006f60:	687b      	ldr	r3, [r7, #4]
 c006f62:	681b      	ldr	r3, [r3, #0]
 c006f64:	681a      	ldr	r2, [r3, #0]
 c006f66:	687b      	ldr	r3, [r7, #4]
 c006f68:	681b      	ldr	r3, [r3, #0]
 c006f6a:	f042 0201 	orr.w	r2, r2, #1
 c006f6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 c006f70:	6878      	ldr	r0, [r7, #4]
 c006f72:	f000 fd0f 	bl	c007994 <UART_CheckIdleState>
 c006f76:	4603      	mov	r3, r0
}
 c006f78:	4618      	mov	r0, r3
 c006f7a:	3708      	adds	r7, #8
 c006f7c:	46bd      	mov	sp, r7
 c006f7e:	bd80      	pop	{r7, pc}

0c006f80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c006f80:	b580      	push	{r7, lr}
 c006f82:	b08a      	sub	sp, #40	; 0x28
 c006f84:	af02      	add	r7, sp, #8
 c006f86:	60f8      	str	r0, [r7, #12]
 c006f88:	60b9      	str	r1, [r7, #8]
 c006f8a:	603b      	str	r3, [r7, #0]
 c006f8c:	4613      	mov	r3, r2
 c006f8e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 c006f90:	68fb      	ldr	r3, [r7, #12]
 c006f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c006f96:	2b20      	cmp	r3, #32
 c006f98:	f040 8083 	bne.w	c0070a2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 c006f9c:	68bb      	ldr	r3, [r7, #8]
 c006f9e:	2b00      	cmp	r3, #0
 c006fa0:	d002      	beq.n	c006fa8 <HAL_UART_Transmit+0x28>
 c006fa2:	88fb      	ldrh	r3, [r7, #6]
 c006fa4:	2b00      	cmp	r3, #0
 c006fa6:	d101      	bne.n	c006fac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 c006fa8:	2301      	movs	r3, #1
 c006faa:	e07b      	b.n	c0070a4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 c006fac:	68fb      	ldr	r3, [r7, #12]
 c006fae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c006fb2:	2b01      	cmp	r3, #1
 c006fb4:	d101      	bne.n	c006fba <HAL_UART_Transmit+0x3a>
 c006fb6:	2302      	movs	r3, #2
 c006fb8:	e074      	b.n	c0070a4 <HAL_UART_Transmit+0x124>
 c006fba:	68fb      	ldr	r3, [r7, #12]
 c006fbc:	2201      	movs	r2, #1
 c006fbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c006fc2:	68fb      	ldr	r3, [r7, #12]
 c006fc4:	2200      	movs	r2, #0
 c006fc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c006fca:	68fb      	ldr	r3, [r7, #12]
 c006fcc:	2221      	movs	r2, #33	; 0x21
 c006fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c006fd2:	f7fc fee9 	bl	c003da8 <HAL_GetTick>
 c006fd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 c006fd8:	68fb      	ldr	r3, [r7, #12]
 c006fda:	88fa      	ldrh	r2, [r7, #6]
 c006fdc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 c006fe0:	68fb      	ldr	r3, [r7, #12]
 c006fe2:	88fa      	ldrh	r2, [r7, #6]
 c006fe4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c006fe8:	68fb      	ldr	r3, [r7, #12]
 c006fea:	689b      	ldr	r3, [r3, #8]
 c006fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c006ff0:	d108      	bne.n	c007004 <HAL_UART_Transmit+0x84>
 c006ff2:	68fb      	ldr	r3, [r7, #12]
 c006ff4:	691b      	ldr	r3, [r3, #16]
 c006ff6:	2b00      	cmp	r3, #0
 c006ff8:	d104      	bne.n	c007004 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 c006ffa:	2300      	movs	r3, #0
 c006ffc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 c006ffe:	68bb      	ldr	r3, [r7, #8]
 c007000:	61bb      	str	r3, [r7, #24]
 c007002:	e003      	b.n	c00700c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 c007004:	68bb      	ldr	r3, [r7, #8]
 c007006:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c007008:	2300      	movs	r3, #0
 c00700a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 c00700c:	68fb      	ldr	r3, [r7, #12]
 c00700e:	2200      	movs	r2, #0
 c007010:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 c007014:	e02c      	b.n	c007070 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 c007016:	683b      	ldr	r3, [r7, #0]
 c007018:	9300      	str	r3, [sp, #0]
 c00701a:	697b      	ldr	r3, [r7, #20]
 c00701c:	2200      	movs	r2, #0
 c00701e:	2180      	movs	r1, #128	; 0x80
 c007020:	68f8      	ldr	r0, [r7, #12]
 c007022:	f000 fd02 	bl	c007a2a <UART_WaitOnFlagUntilTimeout>
 c007026:	4603      	mov	r3, r0
 c007028:	2b00      	cmp	r3, #0
 c00702a:	d001      	beq.n	c007030 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 c00702c:	2303      	movs	r3, #3
 c00702e:	e039      	b.n	c0070a4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 c007030:	69fb      	ldr	r3, [r7, #28]
 c007032:	2b00      	cmp	r3, #0
 c007034:	d10b      	bne.n	c00704e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 c007036:	69bb      	ldr	r3, [r7, #24]
 c007038:	881b      	ldrh	r3, [r3, #0]
 c00703a:	461a      	mov	r2, r3
 c00703c:	68fb      	ldr	r3, [r7, #12]
 c00703e:	681b      	ldr	r3, [r3, #0]
 c007040:	f3c2 0208 	ubfx	r2, r2, #0, #9
 c007044:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 c007046:	69bb      	ldr	r3, [r7, #24]
 c007048:	3302      	adds	r3, #2
 c00704a:	61bb      	str	r3, [r7, #24]
 c00704c:	e007      	b.n	c00705e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 c00704e:	69fb      	ldr	r3, [r7, #28]
 c007050:	781a      	ldrb	r2, [r3, #0]
 c007052:	68fb      	ldr	r3, [r7, #12]
 c007054:	681b      	ldr	r3, [r3, #0]
 c007056:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 c007058:	69fb      	ldr	r3, [r7, #28]
 c00705a:	3301      	adds	r3, #1
 c00705c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 c00705e:	68fb      	ldr	r3, [r7, #12]
 c007060:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c007064:	b29b      	uxth	r3, r3
 c007066:	3b01      	subs	r3, #1
 c007068:	b29a      	uxth	r2, r3
 c00706a:	68fb      	ldr	r3, [r7, #12]
 c00706c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 c007070:	68fb      	ldr	r3, [r7, #12]
 c007072:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c007076:	b29b      	uxth	r3, r3
 c007078:	2b00      	cmp	r3, #0
 c00707a:	d1cc      	bne.n	c007016 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 c00707c:	683b      	ldr	r3, [r7, #0]
 c00707e:	9300      	str	r3, [sp, #0]
 c007080:	697b      	ldr	r3, [r7, #20]
 c007082:	2200      	movs	r2, #0
 c007084:	2140      	movs	r1, #64	; 0x40
 c007086:	68f8      	ldr	r0, [r7, #12]
 c007088:	f000 fccf 	bl	c007a2a <UART_WaitOnFlagUntilTimeout>
 c00708c:	4603      	mov	r3, r0
 c00708e:	2b00      	cmp	r3, #0
 c007090:	d001      	beq.n	c007096 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 c007092:	2303      	movs	r3, #3
 c007094:	e006      	b.n	c0070a4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 c007096:	68fb      	ldr	r3, [r7, #12]
 c007098:	2220      	movs	r2, #32
 c00709a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 c00709e:	2300      	movs	r3, #0
 c0070a0:	e000      	b.n	c0070a4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 c0070a2:	2302      	movs	r3, #2
  }
}
 c0070a4:	4618      	mov	r0, r3
 c0070a6:	3720      	adds	r7, #32
 c0070a8:	46bd      	mov	sp, r7
 c0070aa:	bd80      	pop	{r7, pc}

0c0070ac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c0070ac:	b580      	push	{r7, lr}
 c0070ae:	b08a      	sub	sp, #40	; 0x28
 c0070b0:	af02      	add	r7, sp, #8
 c0070b2:	60f8      	str	r0, [r7, #12]
 c0070b4:	60b9      	str	r1, [r7, #8]
 c0070b6:	603b      	str	r3, [r7, #0]
 c0070b8:	4613      	mov	r3, r2
 c0070ba:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 c0070bc:	68fb      	ldr	r3, [r7, #12]
 c0070be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0070c2:	2b20      	cmp	r3, #32
 c0070c4:	f040 80c0 	bne.w	c007248 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 c0070c8:	68bb      	ldr	r3, [r7, #8]
 c0070ca:	2b00      	cmp	r3, #0
 c0070cc:	d002      	beq.n	c0070d4 <HAL_UART_Receive+0x28>
 c0070ce:	88fb      	ldrh	r3, [r7, #6]
 c0070d0:	2b00      	cmp	r3, #0
 c0070d2:	d101      	bne.n	c0070d8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 c0070d4:	2301      	movs	r3, #1
 c0070d6:	e0b8      	b.n	c00724a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 c0070d8:	68fb      	ldr	r3, [r7, #12]
 c0070da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c0070de:	2b01      	cmp	r3, #1
 c0070e0:	d101      	bne.n	c0070e6 <HAL_UART_Receive+0x3a>
 c0070e2:	2302      	movs	r3, #2
 c0070e4:	e0b1      	b.n	c00724a <HAL_UART_Receive+0x19e>
 c0070e6:	68fb      	ldr	r3, [r7, #12]
 c0070e8:	2201      	movs	r2, #1
 c0070ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c0070ee:	68fb      	ldr	r3, [r7, #12]
 c0070f0:	2200      	movs	r2, #0
 c0070f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 c0070f6:	68fb      	ldr	r3, [r7, #12]
 c0070f8:	2222      	movs	r2, #34	; 0x22
 c0070fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c0070fe:	68fb      	ldr	r3, [r7, #12]
 c007100:	2200      	movs	r2, #0
 c007102:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c007104:	f7fc fe50 	bl	c003da8 <HAL_GetTick>
 c007108:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 c00710a:	68fb      	ldr	r3, [r7, #12]
 c00710c:	88fa      	ldrh	r2, [r7, #6]
 c00710e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 c007112:	68fb      	ldr	r3, [r7, #12]
 c007114:	88fa      	ldrh	r2, [r7, #6]
 c007116:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 c00711a:	68fb      	ldr	r3, [r7, #12]
 c00711c:	689b      	ldr	r3, [r3, #8]
 c00711e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c007122:	d10e      	bne.n	c007142 <HAL_UART_Receive+0x96>
 c007124:	68fb      	ldr	r3, [r7, #12]
 c007126:	691b      	ldr	r3, [r3, #16]
 c007128:	2b00      	cmp	r3, #0
 c00712a:	d105      	bne.n	c007138 <HAL_UART_Receive+0x8c>
 c00712c:	68fb      	ldr	r3, [r7, #12]
 c00712e:	f240 12ff 	movw	r2, #511	; 0x1ff
 c007132:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c007136:	e02d      	b.n	c007194 <HAL_UART_Receive+0xe8>
 c007138:	68fb      	ldr	r3, [r7, #12]
 c00713a:	22ff      	movs	r2, #255	; 0xff
 c00713c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c007140:	e028      	b.n	c007194 <HAL_UART_Receive+0xe8>
 c007142:	68fb      	ldr	r3, [r7, #12]
 c007144:	689b      	ldr	r3, [r3, #8]
 c007146:	2b00      	cmp	r3, #0
 c007148:	d10d      	bne.n	c007166 <HAL_UART_Receive+0xba>
 c00714a:	68fb      	ldr	r3, [r7, #12]
 c00714c:	691b      	ldr	r3, [r3, #16]
 c00714e:	2b00      	cmp	r3, #0
 c007150:	d104      	bne.n	c00715c <HAL_UART_Receive+0xb0>
 c007152:	68fb      	ldr	r3, [r7, #12]
 c007154:	22ff      	movs	r2, #255	; 0xff
 c007156:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c00715a:	e01b      	b.n	c007194 <HAL_UART_Receive+0xe8>
 c00715c:	68fb      	ldr	r3, [r7, #12]
 c00715e:	227f      	movs	r2, #127	; 0x7f
 c007160:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c007164:	e016      	b.n	c007194 <HAL_UART_Receive+0xe8>
 c007166:	68fb      	ldr	r3, [r7, #12]
 c007168:	689b      	ldr	r3, [r3, #8]
 c00716a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c00716e:	d10d      	bne.n	c00718c <HAL_UART_Receive+0xe0>
 c007170:	68fb      	ldr	r3, [r7, #12]
 c007172:	691b      	ldr	r3, [r3, #16]
 c007174:	2b00      	cmp	r3, #0
 c007176:	d104      	bne.n	c007182 <HAL_UART_Receive+0xd6>
 c007178:	68fb      	ldr	r3, [r7, #12]
 c00717a:	227f      	movs	r2, #127	; 0x7f
 c00717c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c007180:	e008      	b.n	c007194 <HAL_UART_Receive+0xe8>
 c007182:	68fb      	ldr	r3, [r7, #12]
 c007184:	223f      	movs	r2, #63	; 0x3f
 c007186:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 c00718a:	e003      	b.n	c007194 <HAL_UART_Receive+0xe8>
 c00718c:	68fb      	ldr	r3, [r7, #12]
 c00718e:	2200      	movs	r2, #0
 c007190:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 c007194:	68fb      	ldr	r3, [r7, #12]
 c007196:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 c00719a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c00719c:	68fb      	ldr	r3, [r7, #12]
 c00719e:	689b      	ldr	r3, [r3, #8]
 c0071a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c0071a4:	d108      	bne.n	c0071b8 <HAL_UART_Receive+0x10c>
 c0071a6:	68fb      	ldr	r3, [r7, #12]
 c0071a8:	691b      	ldr	r3, [r3, #16]
 c0071aa:	2b00      	cmp	r3, #0
 c0071ac:	d104      	bne.n	c0071b8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 c0071ae:	2300      	movs	r3, #0
 c0071b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 c0071b2:	68bb      	ldr	r3, [r7, #8]
 c0071b4:	61bb      	str	r3, [r7, #24]
 c0071b6:	e003      	b.n	c0071c0 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 c0071b8:	68bb      	ldr	r3, [r7, #8]
 c0071ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c0071bc:	2300      	movs	r3, #0
 c0071be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 c0071c0:	68fb      	ldr	r3, [r7, #12]
 c0071c2:	2200      	movs	r2, #0
 c0071c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 c0071c8:	e032      	b.n	c007230 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 c0071ca:	683b      	ldr	r3, [r7, #0]
 c0071cc:	9300      	str	r3, [sp, #0]
 c0071ce:	697b      	ldr	r3, [r7, #20]
 c0071d0:	2200      	movs	r2, #0
 c0071d2:	2120      	movs	r1, #32
 c0071d4:	68f8      	ldr	r0, [r7, #12]
 c0071d6:	f000 fc28 	bl	c007a2a <UART_WaitOnFlagUntilTimeout>
 c0071da:	4603      	mov	r3, r0
 c0071dc:	2b00      	cmp	r3, #0
 c0071de:	d001      	beq.n	c0071e4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 c0071e0:	2303      	movs	r3, #3
 c0071e2:	e032      	b.n	c00724a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 c0071e4:	69fb      	ldr	r3, [r7, #28]
 c0071e6:	2b00      	cmp	r3, #0
 c0071e8:	d10c      	bne.n	c007204 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 c0071ea:	68fb      	ldr	r3, [r7, #12]
 c0071ec:	681b      	ldr	r3, [r3, #0]
 c0071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0071f0:	b29a      	uxth	r2, r3
 c0071f2:	8a7b      	ldrh	r3, [r7, #18]
 c0071f4:	4013      	ands	r3, r2
 c0071f6:	b29a      	uxth	r2, r3
 c0071f8:	69bb      	ldr	r3, [r7, #24]
 c0071fa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 c0071fc:	69bb      	ldr	r3, [r7, #24]
 c0071fe:	3302      	adds	r3, #2
 c007200:	61bb      	str	r3, [r7, #24]
 c007202:	e00c      	b.n	c00721e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 c007204:	68fb      	ldr	r3, [r7, #12]
 c007206:	681b      	ldr	r3, [r3, #0]
 c007208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00720a:	b2da      	uxtb	r2, r3
 c00720c:	8a7b      	ldrh	r3, [r7, #18]
 c00720e:	b2db      	uxtb	r3, r3
 c007210:	4013      	ands	r3, r2
 c007212:	b2da      	uxtb	r2, r3
 c007214:	69fb      	ldr	r3, [r7, #28]
 c007216:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 c007218:	69fb      	ldr	r3, [r7, #28]
 c00721a:	3301      	adds	r3, #1
 c00721c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 c00721e:	68fb      	ldr	r3, [r7, #12]
 c007220:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 c007224:	b29b      	uxth	r3, r3
 c007226:	3b01      	subs	r3, #1
 c007228:	b29a      	uxth	r2, r3
 c00722a:	68fb      	ldr	r3, [r7, #12]
 c00722c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 c007230:	68fb      	ldr	r3, [r7, #12]
 c007232:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 c007236:	b29b      	uxth	r3, r3
 c007238:	2b00      	cmp	r3, #0
 c00723a:	d1c6      	bne.n	c0071ca <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 c00723c:	68fb      	ldr	r3, [r7, #12]
 c00723e:	2220      	movs	r2, #32
 c007240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 c007244:	2300      	movs	r3, #0
 c007246:	e000      	b.n	c00724a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 c007248:	2302      	movs	r3, #2
  }
}
 c00724a:	4618      	mov	r0, r3
 c00724c:	3720      	adds	r7, #32
 c00724e:	46bd      	mov	sp, r7
 c007250:	bd80      	pop	{r7, pc}
	...

0c007254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 c007254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c007258:	b08c      	sub	sp, #48	; 0x30
 c00725a:	af00      	add	r7, sp, #0
 c00725c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 c00725e:	2300      	movs	r3, #0
 c007260:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c007264:	697b      	ldr	r3, [r7, #20]
 c007266:	689a      	ldr	r2, [r3, #8]
 c007268:	697b      	ldr	r3, [r7, #20]
 c00726a:	691b      	ldr	r3, [r3, #16]
 c00726c:	431a      	orrs	r2, r3
 c00726e:	697b      	ldr	r3, [r7, #20]
 c007270:	695b      	ldr	r3, [r3, #20]
 c007272:	431a      	orrs	r2, r3
 c007274:	697b      	ldr	r3, [r7, #20]
 c007276:	69db      	ldr	r3, [r3, #28]
 c007278:	4313      	orrs	r3, r2
 c00727a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c00727c:	697b      	ldr	r3, [r7, #20]
 c00727e:	681b      	ldr	r3, [r3, #0]
 c007280:	681a      	ldr	r2, [r3, #0]
 c007282:	4baa      	ldr	r3, [pc, #680]	; (c00752c <UART_SetConfig+0x2d8>)
 c007284:	4013      	ands	r3, r2
 c007286:	697a      	ldr	r2, [r7, #20]
 c007288:	6812      	ldr	r2, [r2, #0]
 c00728a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c00728c:	430b      	orrs	r3, r1
 c00728e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c007290:	697b      	ldr	r3, [r7, #20]
 c007292:	681b      	ldr	r3, [r3, #0]
 c007294:	685b      	ldr	r3, [r3, #4]
 c007296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 c00729a:	697b      	ldr	r3, [r7, #20]
 c00729c:	68da      	ldr	r2, [r3, #12]
 c00729e:	697b      	ldr	r3, [r7, #20]
 c0072a0:	681b      	ldr	r3, [r3, #0]
 c0072a2:	430a      	orrs	r2, r1
 c0072a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c0072a6:	697b      	ldr	r3, [r7, #20]
 c0072a8:	699b      	ldr	r3, [r3, #24]
 c0072aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c0072ac:	697b      	ldr	r3, [r7, #20]
 c0072ae:	681b      	ldr	r3, [r3, #0]
 c0072b0:	4a9f      	ldr	r2, [pc, #636]	; (c007530 <UART_SetConfig+0x2dc>)
 c0072b2:	4293      	cmp	r3, r2
 c0072b4:	d004      	beq.n	c0072c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 c0072b6:	697b      	ldr	r3, [r7, #20]
 c0072b8:	6a1b      	ldr	r3, [r3, #32]
 c0072ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c0072bc:	4313      	orrs	r3, r2
 c0072be:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c0072c0:	697b      	ldr	r3, [r7, #20]
 c0072c2:	681b      	ldr	r3, [r3, #0]
 c0072c4:	689b      	ldr	r3, [r3, #8]
 c0072c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 c0072ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 c0072ce:	697a      	ldr	r2, [r7, #20]
 c0072d0:	6812      	ldr	r2, [r2, #0]
 c0072d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c0072d4:	430b      	orrs	r3, r1
 c0072d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c0072d8:	697b      	ldr	r3, [r7, #20]
 c0072da:	681b      	ldr	r3, [r3, #0]
 c0072dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0072de:	f023 010f 	bic.w	r1, r3, #15
 c0072e2:	697b      	ldr	r3, [r7, #20]
 c0072e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0072e6:	697b      	ldr	r3, [r7, #20]
 c0072e8:	681b      	ldr	r3, [r3, #0]
 c0072ea:	430a      	orrs	r2, r1
 c0072ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 c0072ee:	697b      	ldr	r3, [r7, #20]
 c0072f0:	681b      	ldr	r3, [r3, #0]
 c0072f2:	4a90      	ldr	r2, [pc, #576]	; (c007534 <UART_SetConfig+0x2e0>)
 c0072f4:	4293      	cmp	r3, r2
 c0072f6:	d125      	bne.n	c007344 <UART_SetConfig+0xf0>
 c0072f8:	4b8f      	ldr	r3, [pc, #572]	; (c007538 <UART_SetConfig+0x2e4>)
 c0072fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0072fe:	f003 0303 	and.w	r3, r3, #3
 c007302:	2b03      	cmp	r3, #3
 c007304:	d81a      	bhi.n	c00733c <UART_SetConfig+0xe8>
 c007306:	a201      	add	r2, pc, #4	; (adr r2, c00730c <UART_SetConfig+0xb8>)
 c007308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00730c:	0c00731d 	.word	0x0c00731d
 c007310:	0c00732d 	.word	0x0c00732d
 c007314:	0c007325 	.word	0x0c007325
 c007318:	0c007335 	.word	0x0c007335
 c00731c:	2301      	movs	r3, #1
 c00731e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007322:	e114      	b.n	c00754e <UART_SetConfig+0x2fa>
 c007324:	2302      	movs	r3, #2
 c007326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00732a:	e110      	b.n	c00754e <UART_SetConfig+0x2fa>
 c00732c:	2304      	movs	r3, #4
 c00732e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007332:	e10c      	b.n	c00754e <UART_SetConfig+0x2fa>
 c007334:	2308      	movs	r3, #8
 c007336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00733a:	e108      	b.n	c00754e <UART_SetConfig+0x2fa>
 c00733c:	2310      	movs	r3, #16
 c00733e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007342:	e104      	b.n	c00754e <UART_SetConfig+0x2fa>
 c007344:	697b      	ldr	r3, [r7, #20]
 c007346:	681b      	ldr	r3, [r3, #0]
 c007348:	4a7c      	ldr	r2, [pc, #496]	; (c00753c <UART_SetConfig+0x2e8>)
 c00734a:	4293      	cmp	r3, r2
 c00734c:	d138      	bne.n	c0073c0 <UART_SetConfig+0x16c>
 c00734e:	4b7a      	ldr	r3, [pc, #488]	; (c007538 <UART_SetConfig+0x2e4>)
 c007350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007354:	f003 030c 	and.w	r3, r3, #12
 c007358:	2b0c      	cmp	r3, #12
 c00735a:	d82d      	bhi.n	c0073b8 <UART_SetConfig+0x164>
 c00735c:	a201      	add	r2, pc, #4	; (adr r2, c007364 <UART_SetConfig+0x110>)
 c00735e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c007362:	bf00      	nop
 c007364:	0c007399 	.word	0x0c007399
 c007368:	0c0073b9 	.word	0x0c0073b9
 c00736c:	0c0073b9 	.word	0x0c0073b9
 c007370:	0c0073b9 	.word	0x0c0073b9
 c007374:	0c0073a9 	.word	0x0c0073a9
 c007378:	0c0073b9 	.word	0x0c0073b9
 c00737c:	0c0073b9 	.word	0x0c0073b9
 c007380:	0c0073b9 	.word	0x0c0073b9
 c007384:	0c0073a1 	.word	0x0c0073a1
 c007388:	0c0073b9 	.word	0x0c0073b9
 c00738c:	0c0073b9 	.word	0x0c0073b9
 c007390:	0c0073b9 	.word	0x0c0073b9
 c007394:	0c0073b1 	.word	0x0c0073b1
 c007398:	2300      	movs	r3, #0
 c00739a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00739e:	e0d6      	b.n	c00754e <UART_SetConfig+0x2fa>
 c0073a0:	2302      	movs	r3, #2
 c0073a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0073a6:	e0d2      	b.n	c00754e <UART_SetConfig+0x2fa>
 c0073a8:	2304      	movs	r3, #4
 c0073aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0073ae:	e0ce      	b.n	c00754e <UART_SetConfig+0x2fa>
 c0073b0:	2308      	movs	r3, #8
 c0073b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0073b6:	e0ca      	b.n	c00754e <UART_SetConfig+0x2fa>
 c0073b8:	2310      	movs	r3, #16
 c0073ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0073be:	e0c6      	b.n	c00754e <UART_SetConfig+0x2fa>
 c0073c0:	697b      	ldr	r3, [r7, #20]
 c0073c2:	681b      	ldr	r3, [r3, #0]
 c0073c4:	4a5e      	ldr	r2, [pc, #376]	; (c007540 <UART_SetConfig+0x2ec>)
 c0073c6:	4293      	cmp	r3, r2
 c0073c8:	d125      	bne.n	c007416 <UART_SetConfig+0x1c2>
 c0073ca:	4b5b      	ldr	r3, [pc, #364]	; (c007538 <UART_SetConfig+0x2e4>)
 c0073cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0073d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 c0073d4:	2b30      	cmp	r3, #48	; 0x30
 c0073d6:	d016      	beq.n	c007406 <UART_SetConfig+0x1b2>
 c0073d8:	2b30      	cmp	r3, #48	; 0x30
 c0073da:	d818      	bhi.n	c00740e <UART_SetConfig+0x1ba>
 c0073dc:	2b20      	cmp	r3, #32
 c0073de:	d00a      	beq.n	c0073f6 <UART_SetConfig+0x1a2>
 c0073e0:	2b20      	cmp	r3, #32
 c0073e2:	d814      	bhi.n	c00740e <UART_SetConfig+0x1ba>
 c0073e4:	2b00      	cmp	r3, #0
 c0073e6:	d002      	beq.n	c0073ee <UART_SetConfig+0x19a>
 c0073e8:	2b10      	cmp	r3, #16
 c0073ea:	d008      	beq.n	c0073fe <UART_SetConfig+0x1aa>
 c0073ec:	e00f      	b.n	c00740e <UART_SetConfig+0x1ba>
 c0073ee:	2300      	movs	r3, #0
 c0073f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0073f4:	e0ab      	b.n	c00754e <UART_SetConfig+0x2fa>
 c0073f6:	2302      	movs	r3, #2
 c0073f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0073fc:	e0a7      	b.n	c00754e <UART_SetConfig+0x2fa>
 c0073fe:	2304      	movs	r3, #4
 c007400:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007404:	e0a3      	b.n	c00754e <UART_SetConfig+0x2fa>
 c007406:	2308      	movs	r3, #8
 c007408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00740c:	e09f      	b.n	c00754e <UART_SetConfig+0x2fa>
 c00740e:	2310      	movs	r3, #16
 c007410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007414:	e09b      	b.n	c00754e <UART_SetConfig+0x2fa>
 c007416:	697b      	ldr	r3, [r7, #20]
 c007418:	681b      	ldr	r3, [r3, #0]
 c00741a:	4a4a      	ldr	r2, [pc, #296]	; (c007544 <UART_SetConfig+0x2f0>)
 c00741c:	4293      	cmp	r3, r2
 c00741e:	d125      	bne.n	c00746c <UART_SetConfig+0x218>
 c007420:	4b45      	ldr	r3, [pc, #276]	; (c007538 <UART_SetConfig+0x2e4>)
 c007422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c007426:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 c00742a:	2bc0      	cmp	r3, #192	; 0xc0
 c00742c:	d016      	beq.n	c00745c <UART_SetConfig+0x208>
 c00742e:	2bc0      	cmp	r3, #192	; 0xc0
 c007430:	d818      	bhi.n	c007464 <UART_SetConfig+0x210>
 c007432:	2b80      	cmp	r3, #128	; 0x80
 c007434:	d00a      	beq.n	c00744c <UART_SetConfig+0x1f8>
 c007436:	2b80      	cmp	r3, #128	; 0x80
 c007438:	d814      	bhi.n	c007464 <UART_SetConfig+0x210>
 c00743a:	2b00      	cmp	r3, #0
 c00743c:	d002      	beq.n	c007444 <UART_SetConfig+0x1f0>
 c00743e:	2b40      	cmp	r3, #64	; 0x40
 c007440:	d008      	beq.n	c007454 <UART_SetConfig+0x200>
 c007442:	e00f      	b.n	c007464 <UART_SetConfig+0x210>
 c007444:	2300      	movs	r3, #0
 c007446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00744a:	e080      	b.n	c00754e <UART_SetConfig+0x2fa>
 c00744c:	2302      	movs	r3, #2
 c00744e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007452:	e07c      	b.n	c00754e <UART_SetConfig+0x2fa>
 c007454:	2304      	movs	r3, #4
 c007456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00745a:	e078      	b.n	c00754e <UART_SetConfig+0x2fa>
 c00745c:	2308      	movs	r3, #8
 c00745e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007462:	e074      	b.n	c00754e <UART_SetConfig+0x2fa>
 c007464:	2310      	movs	r3, #16
 c007466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00746a:	e070      	b.n	c00754e <UART_SetConfig+0x2fa>
 c00746c:	697b      	ldr	r3, [r7, #20]
 c00746e:	681b      	ldr	r3, [r3, #0]
 c007470:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 c007474:	d12a      	bne.n	c0074cc <UART_SetConfig+0x278>
 c007476:	4b30      	ldr	r3, [pc, #192]	; (c007538 <UART_SetConfig+0x2e4>)
 c007478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00747c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c007480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c007484:	d01a      	beq.n	c0074bc <UART_SetConfig+0x268>
 c007486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c00748a:	d81b      	bhi.n	c0074c4 <UART_SetConfig+0x270>
 c00748c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c007490:	d00c      	beq.n	c0074ac <UART_SetConfig+0x258>
 c007492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c007496:	d815      	bhi.n	c0074c4 <UART_SetConfig+0x270>
 c007498:	2b00      	cmp	r3, #0
 c00749a:	d003      	beq.n	c0074a4 <UART_SetConfig+0x250>
 c00749c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c0074a0:	d008      	beq.n	c0074b4 <UART_SetConfig+0x260>
 c0074a2:	e00f      	b.n	c0074c4 <UART_SetConfig+0x270>
 c0074a4:	2300      	movs	r3, #0
 c0074a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0074aa:	e050      	b.n	c00754e <UART_SetConfig+0x2fa>
 c0074ac:	2302      	movs	r3, #2
 c0074ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0074b2:	e04c      	b.n	c00754e <UART_SetConfig+0x2fa>
 c0074b4:	2304      	movs	r3, #4
 c0074b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0074ba:	e048      	b.n	c00754e <UART_SetConfig+0x2fa>
 c0074bc:	2308      	movs	r3, #8
 c0074be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0074c2:	e044      	b.n	c00754e <UART_SetConfig+0x2fa>
 c0074c4:	2310      	movs	r3, #16
 c0074c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0074ca:	e040      	b.n	c00754e <UART_SetConfig+0x2fa>
 c0074cc:	697b      	ldr	r3, [r7, #20]
 c0074ce:	681b      	ldr	r3, [r3, #0]
 c0074d0:	4a17      	ldr	r2, [pc, #92]	; (c007530 <UART_SetConfig+0x2dc>)
 c0074d2:	4293      	cmp	r3, r2
 c0074d4:	d138      	bne.n	c007548 <UART_SetConfig+0x2f4>
 c0074d6:	4b18      	ldr	r3, [pc, #96]	; (c007538 <UART_SetConfig+0x2e4>)
 c0074d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0074dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 c0074e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c0074e4:	d01a      	beq.n	c00751c <UART_SetConfig+0x2c8>
 c0074e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c0074ea:	d81b      	bhi.n	c007524 <UART_SetConfig+0x2d0>
 c0074ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c0074f0:	d00c      	beq.n	c00750c <UART_SetConfig+0x2b8>
 c0074f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c0074f6:	d815      	bhi.n	c007524 <UART_SetConfig+0x2d0>
 c0074f8:	2b00      	cmp	r3, #0
 c0074fa:	d003      	beq.n	c007504 <UART_SetConfig+0x2b0>
 c0074fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c007500:	d008      	beq.n	c007514 <UART_SetConfig+0x2c0>
 c007502:	e00f      	b.n	c007524 <UART_SetConfig+0x2d0>
 c007504:	2300      	movs	r3, #0
 c007506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00750a:	e020      	b.n	c00754e <UART_SetConfig+0x2fa>
 c00750c:	2302      	movs	r3, #2
 c00750e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007512:	e01c      	b.n	c00754e <UART_SetConfig+0x2fa>
 c007514:	2304      	movs	r3, #4
 c007516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00751a:	e018      	b.n	c00754e <UART_SetConfig+0x2fa>
 c00751c:	2308      	movs	r3, #8
 c00751e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c007522:	e014      	b.n	c00754e <UART_SetConfig+0x2fa>
 c007524:	2310      	movs	r3, #16
 c007526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00752a:	e010      	b.n	c00754e <UART_SetConfig+0x2fa>
 c00752c:	cfff69f3 	.word	0xcfff69f3
 c007530:	50008000 	.word	0x50008000
 c007534:	50013800 	.word	0x50013800
 c007538:	50021000 	.word	0x50021000
 c00753c:	50004400 	.word	0x50004400
 c007540:	50004800 	.word	0x50004800
 c007544:	50004c00 	.word	0x50004c00
 c007548:	2310      	movs	r3, #16
 c00754a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 c00754e:	697b      	ldr	r3, [r7, #20]
 c007550:	681b      	ldr	r3, [r3, #0]
 c007552:	4ab0      	ldr	r2, [pc, #704]	; (c007814 <UART_SetConfig+0x5c0>)
 c007554:	4293      	cmp	r3, r2
 c007556:	f040 809b 	bne.w	c007690 <UART_SetConfig+0x43c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 c00755a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c00755e:	2b08      	cmp	r3, #8
 c007560:	d827      	bhi.n	c0075b2 <UART_SetConfig+0x35e>
 c007562:	a201      	add	r2, pc, #4	; (adr r2, c007568 <UART_SetConfig+0x314>)
 c007564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c007568:	0c00758d 	.word	0x0c00758d
 c00756c:	0c007595 	.word	0x0c007595
 c007570:	0c00759d 	.word	0x0c00759d
 c007574:	0c0075b3 	.word	0x0c0075b3
 c007578:	0c0075a3 	.word	0x0c0075a3
 c00757c:	0c0075b3 	.word	0x0c0075b3
 c007580:	0c0075b3 	.word	0x0c0075b3
 c007584:	0c0075b3 	.word	0x0c0075b3
 c007588:	0c0075ab 	.word	0x0c0075ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c00758c:	f7fe fa1c 	bl	c0059c8 <HAL_RCC_GetPCLK1Freq>
 c007590:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c007592:	e014      	b.n	c0075be <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c007594:	f7fe fa2c 	bl	c0059f0 <HAL_RCC_GetPCLK2Freq>
 c007598:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c00759a:	e010      	b.n	c0075be <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c00759c:	4b9e      	ldr	r3, [pc, #632]	; (c007818 <UART_SetConfig+0x5c4>)
 c00759e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c0075a0:	e00d      	b.n	c0075be <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c0075a2:	f7fe f961 	bl	c005868 <HAL_RCC_GetSysClockFreq>
 c0075a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0075a8:	e009      	b.n	c0075be <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c0075aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c0075ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c0075b0:	e005      	b.n	c0075be <UART_SetConfig+0x36a>
      default:
        pclk = 0U;
 c0075b2:	2300      	movs	r3, #0
 c0075b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c0075b6:	2301      	movs	r3, #1
 c0075b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c0075bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 c0075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0075c0:	2b00      	cmp	r3, #0
 c0075c2:	f000 8130 	beq.w	c007826 <UART_SetConfig+0x5d2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c0075c6:	697b      	ldr	r3, [r7, #20]
 c0075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0075ca:	4a94      	ldr	r2, [pc, #592]	; (c00781c <UART_SetConfig+0x5c8>)
 c0075cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c0075d0:	461a      	mov	r2, r3
 c0075d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0075d4:	fbb3 f3f2 	udiv	r3, r3, r2
 c0075d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
//      volatile uint32_t value1 = 3U * huart->Init.BaudRate;
//      volatile uint32_t value2 = 4096U * huart->Init.BaudRate;
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c0075da:	697b      	ldr	r3, [r7, #20]
 c0075dc:	685a      	ldr	r2, [r3, #4]
 c0075de:	4613      	mov	r3, r2
 c0075e0:	005b      	lsls	r3, r3, #1
 c0075e2:	4413      	add	r3, r2
 c0075e4:	69ba      	ldr	r2, [r7, #24]
 c0075e6:	429a      	cmp	r2, r3
 c0075e8:	d305      	bcc.n	c0075f6 <UART_SetConfig+0x3a2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 c0075ea:	697b      	ldr	r3, [r7, #20]
 c0075ec:	685b      	ldr	r3, [r3, #4]
 c0075ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c0075f0:	69ba      	ldr	r2, [r7, #24]
 c0075f2:	429a      	cmp	r2, r3
 c0075f4:	d903      	bls.n	c0075fe <UART_SetConfig+0x3aa>
      {
        ret = HAL_ERROR;
 c0075f6:	2301      	movs	r3, #1
 c0075f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c0075fc:	e113      	b.n	c007826 <UART_SetConfig+0x5d2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c0075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c007600:	2200      	movs	r2, #0
 c007602:	60bb      	str	r3, [r7, #8]
 c007604:	60fa      	str	r2, [r7, #12]
 c007606:	697b      	ldr	r3, [r7, #20]
 c007608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00760a:	4a84      	ldr	r2, [pc, #528]	; (c00781c <UART_SetConfig+0x5c8>)
 c00760c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c007610:	b29b      	uxth	r3, r3
 c007612:	2200      	movs	r2, #0
 c007614:	603b      	str	r3, [r7, #0]
 c007616:	607a      	str	r2, [r7, #4]
 c007618:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00761c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 c007620:	f7f8 fe40 	bl	c0002a4 <__aeabi_uldivmod>
 c007624:	4602      	mov	r2, r0
 c007626:	460b      	mov	r3, r1
 c007628:	4610      	mov	r0, r2
 c00762a:	4619      	mov	r1, r3
 c00762c:	f04f 0200 	mov.w	r2, #0
 c007630:	f04f 0300 	mov.w	r3, #0
 c007634:	020b      	lsls	r3, r1, #8
 c007636:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 c00763a:	0202      	lsls	r2, r0, #8
 c00763c:	6979      	ldr	r1, [r7, #20]
 c00763e:	6849      	ldr	r1, [r1, #4]
 c007640:	0849      	lsrs	r1, r1, #1
 c007642:	2000      	movs	r0, #0
 c007644:	460c      	mov	r4, r1
 c007646:	4605      	mov	r5, r0
 c007648:	eb12 0804 	adds.w	r8, r2, r4
 c00764c:	eb43 0905 	adc.w	r9, r3, r5
 c007650:	697b      	ldr	r3, [r7, #20]
 c007652:	685b      	ldr	r3, [r3, #4]
 c007654:	2200      	movs	r2, #0
 c007656:	469a      	mov	sl, r3
 c007658:	4693      	mov	fp, r2
 c00765a:	4652      	mov	r2, sl
 c00765c:	465b      	mov	r3, fp
 c00765e:	4640      	mov	r0, r8
 c007660:	4649      	mov	r1, r9
 c007662:	f7f8 fe1f 	bl	c0002a4 <__aeabi_uldivmod>
 c007666:	4602      	mov	r2, r0
 c007668:	460b      	mov	r3, r1
 c00766a:	4613      	mov	r3, r2
 c00766c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c00766e:	6a3b      	ldr	r3, [r7, #32]
 c007670:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c007674:	d308      	bcc.n	c007688 <UART_SetConfig+0x434>
 c007676:	6a3b      	ldr	r3, [r7, #32]
 c007678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c00767c:	d204      	bcs.n	c007688 <UART_SetConfig+0x434>
        {
          huart->Instance->BRR = usartdiv;
 c00767e:	697b      	ldr	r3, [r7, #20]
 c007680:	681b      	ldr	r3, [r3, #0]
 c007682:	6a3a      	ldr	r2, [r7, #32]
 c007684:	60da      	str	r2, [r3, #12]
 c007686:	e0ce      	b.n	c007826 <UART_SetConfig+0x5d2>
        }
        else
        {
          ret = HAL_ERROR;
 c007688:	2301      	movs	r3, #1
 c00768a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c00768e:	e0ca      	b.n	c007826 <UART_SetConfig+0x5d2>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c007690:	697b      	ldr	r3, [r7, #20]
 c007692:	69db      	ldr	r3, [r3, #28]
 c007694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c007698:	d167      	bne.n	c00776a <UART_SetConfig+0x516>
  {
    switch (clocksource)
 c00769a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c00769e:	2b08      	cmp	r3, #8
 c0076a0:	d827      	bhi.n	c0076f2 <UART_SetConfig+0x49e>
 c0076a2:	a201      	add	r2, pc, #4	; (adr r2, c0076a8 <UART_SetConfig+0x454>)
 c0076a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0076a8:	0c0076cd 	.word	0x0c0076cd
 c0076ac:	0c0076d5 	.word	0x0c0076d5
 c0076b0:	0c0076dd 	.word	0x0c0076dd
 c0076b4:	0c0076f3 	.word	0x0c0076f3
 c0076b8:	0c0076e3 	.word	0x0c0076e3
 c0076bc:	0c0076f3 	.word	0x0c0076f3
 c0076c0:	0c0076f3 	.word	0x0c0076f3
 c0076c4:	0c0076f3 	.word	0x0c0076f3
 c0076c8:	0c0076eb 	.word	0x0c0076eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c0076cc:	f7fe f97c 	bl	c0059c8 <HAL_RCC_GetPCLK1Freq>
 c0076d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0076d2:	e014      	b.n	c0076fe <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c0076d4:	f7fe f98c 	bl	c0059f0 <HAL_RCC_GetPCLK2Freq>
 c0076d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0076da:	e010      	b.n	c0076fe <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c0076dc:	4b4e      	ldr	r3, [pc, #312]	; (c007818 <UART_SetConfig+0x5c4>)
 c0076de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c0076e0:	e00d      	b.n	c0076fe <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c0076e2:	f7fe f8c1 	bl	c005868 <HAL_RCC_GetSysClockFreq>
 c0076e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0076e8:	e009      	b.n	c0076fe <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c0076ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c0076ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c0076f0:	e005      	b.n	c0076fe <UART_SetConfig+0x4aa>
      default:
        pclk = 0U;
 c0076f2:	2300      	movs	r3, #0
 c0076f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c0076f6:	2301      	movs	r3, #1
 c0076f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c0076fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 c0076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c007700:	2b00      	cmp	r3, #0
 c007702:	f000 8090 	beq.w	c007826 <UART_SetConfig+0x5d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c007706:	697b      	ldr	r3, [r7, #20]
 c007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00770a:	4a44      	ldr	r2, [pc, #272]	; (c00781c <UART_SetConfig+0x5c8>)
 c00770c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c007710:	461a      	mov	r2, r3
 c007712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c007714:	fbb3 f3f2 	udiv	r3, r3, r2
 c007718:	005a      	lsls	r2, r3, #1
 c00771a:	697b      	ldr	r3, [r7, #20]
 c00771c:	685b      	ldr	r3, [r3, #4]
 c00771e:	085b      	lsrs	r3, r3, #1
 c007720:	441a      	add	r2, r3
 c007722:	697b      	ldr	r3, [r7, #20]
 c007724:	685b      	ldr	r3, [r3, #4]
 c007726:	fbb2 f3f3 	udiv	r3, r2, r3
 c00772a:	b29b      	uxth	r3, r3
 c00772c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c00772e:	6a3b      	ldr	r3, [r7, #32]
 c007730:	2b0f      	cmp	r3, #15
 c007732:	d916      	bls.n	c007762 <UART_SetConfig+0x50e>
 c007734:	6a3b      	ldr	r3, [r7, #32]
 c007736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c00773a:	d212      	bcs.n	c007762 <UART_SetConfig+0x50e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c00773c:	6a3b      	ldr	r3, [r7, #32]
 c00773e:	b29b      	uxth	r3, r3
 c007740:	f023 030f 	bic.w	r3, r3, #15
 c007744:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c007746:	6a3b      	ldr	r3, [r7, #32]
 c007748:	085b      	lsrs	r3, r3, #1
 c00774a:	b29b      	uxth	r3, r3
 c00774c:	f003 0307 	and.w	r3, r3, #7
 c007750:	b29a      	uxth	r2, r3
 c007752:	8bfb      	ldrh	r3, [r7, #30]
 c007754:	4313      	orrs	r3, r2
 c007756:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 c007758:	697b      	ldr	r3, [r7, #20]
 c00775a:	681b      	ldr	r3, [r3, #0]
 c00775c:	8bfa      	ldrh	r2, [r7, #30]
 c00775e:	60da      	str	r2, [r3, #12]
 c007760:	e061      	b.n	c007826 <UART_SetConfig+0x5d2>
      }
      else
      {
        ret = HAL_ERROR;
 c007762:	2301      	movs	r3, #1
 c007764:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c007768:	e05d      	b.n	c007826 <UART_SetConfig+0x5d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 c00776a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c00776e:	2b08      	cmp	r3, #8
 c007770:	d827      	bhi.n	c0077c2 <UART_SetConfig+0x56e>
 c007772:	a201      	add	r2, pc, #4	; (adr r2, c007778 <UART_SetConfig+0x524>)
 c007774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c007778:	0c00779d 	.word	0x0c00779d
 c00777c:	0c0077a5 	.word	0x0c0077a5
 c007780:	0c0077ad 	.word	0x0c0077ad
 c007784:	0c0077c3 	.word	0x0c0077c3
 c007788:	0c0077b3 	.word	0x0c0077b3
 c00778c:	0c0077c3 	.word	0x0c0077c3
 c007790:	0c0077c3 	.word	0x0c0077c3
 c007794:	0c0077c3 	.word	0x0c0077c3
 c007798:	0c0077bb 	.word	0x0c0077bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c00779c:	f7fe f914 	bl	c0059c8 <HAL_RCC_GetPCLK1Freq>
 c0077a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0077a2:	e014      	b.n	c0077ce <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c0077a4:	f7fe f924 	bl	c0059f0 <HAL_RCC_GetPCLK2Freq>
 c0077a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0077aa:	e010      	b.n	c0077ce <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c0077ac:	4b1a      	ldr	r3, [pc, #104]	; (c007818 <UART_SetConfig+0x5c4>)
 c0077ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c0077b0:	e00d      	b.n	c0077ce <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c0077b2:	f7fe f859 	bl	c005868 <HAL_RCC_GetSysClockFreq>
 c0077b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0077b8:	e009      	b.n	c0077ce <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c0077ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c0077be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c0077c0:	e005      	b.n	c0077ce <UART_SetConfig+0x57a>
      default:
        pclk = 0U;
 c0077c2:	2300      	movs	r3, #0
 c0077c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c0077c6:	2301      	movs	r3, #1
 c0077c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c0077cc:	bf00      	nop
    }

    if (pclk != 0U)
 c0077ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0077d0:	2b00      	cmp	r3, #0
 c0077d2:	d028      	beq.n	c007826 <UART_SetConfig+0x5d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c0077d4:	697b      	ldr	r3, [r7, #20]
 c0077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0077d8:	4a10      	ldr	r2, [pc, #64]	; (c00781c <UART_SetConfig+0x5c8>)
 c0077da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c0077de:	461a      	mov	r2, r3
 c0077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0077e2:	fbb3 f2f2 	udiv	r2, r3, r2
 c0077e6:	697b      	ldr	r3, [r7, #20]
 c0077e8:	685b      	ldr	r3, [r3, #4]
 c0077ea:	085b      	lsrs	r3, r3, #1
 c0077ec:	441a      	add	r2, r3
 c0077ee:	697b      	ldr	r3, [r7, #20]
 c0077f0:	685b      	ldr	r3, [r3, #4]
 c0077f2:	fbb2 f3f3 	udiv	r3, r2, r3
 c0077f6:	b29b      	uxth	r3, r3
 c0077f8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c0077fa:	6a3b      	ldr	r3, [r7, #32]
 c0077fc:	2b0f      	cmp	r3, #15
 c0077fe:	d90f      	bls.n	c007820 <UART_SetConfig+0x5cc>
 c007800:	6a3b      	ldr	r3, [r7, #32]
 c007802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c007806:	d20b      	bcs.n	c007820 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = usartdiv;
 c007808:	697b      	ldr	r3, [r7, #20]
 c00780a:	681b      	ldr	r3, [r3, #0]
 c00780c:	6a3a      	ldr	r2, [r7, #32]
 c00780e:	60da      	str	r2, [r3, #12]
 c007810:	e009      	b.n	c007826 <UART_SetConfig+0x5d2>
 c007812:	bf00      	nop
 c007814:	50008000 	.word	0x50008000
 c007818:	00f42400 	.word	0x00f42400
 c00781c:	0c007e44 	.word	0x0c007e44
      }
      else
      {
        ret = HAL_ERROR;
 c007820:	2301      	movs	r3, #1
 c007822:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 c007826:	697b      	ldr	r3, [r7, #20]
 c007828:	2201      	movs	r2, #1
 c00782a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 c00782e:	697b      	ldr	r3, [r7, #20]
 c007830:	2201      	movs	r2, #1
 c007832:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 c007836:	697b      	ldr	r3, [r7, #20]
 c007838:	2200      	movs	r2, #0
 c00783a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 c00783c:	697b      	ldr	r3, [r7, #20]
 c00783e:	2200      	movs	r2, #0
 c007840:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 c007842:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 c007846:	4618      	mov	r0, r3
 c007848:	3730      	adds	r7, #48	; 0x30
 c00784a:	46bd      	mov	sp, r7
 c00784c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c007850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 c007850:	b480      	push	{r7}
 c007852:	b083      	sub	sp, #12
 c007854:	af00      	add	r7, sp, #0
 c007856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c007858:	687b      	ldr	r3, [r7, #4]
 c00785a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00785c:	f003 0301 	and.w	r3, r3, #1
 c007860:	2b00      	cmp	r3, #0
 c007862:	d00a      	beq.n	c00787a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c007864:	687b      	ldr	r3, [r7, #4]
 c007866:	681b      	ldr	r3, [r3, #0]
 c007868:	685b      	ldr	r3, [r3, #4]
 c00786a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 c00786e:	687b      	ldr	r3, [r7, #4]
 c007870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c007872:	687b      	ldr	r3, [r7, #4]
 c007874:	681b      	ldr	r3, [r3, #0]
 c007876:	430a      	orrs	r2, r1
 c007878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c00787a:	687b      	ldr	r3, [r7, #4]
 c00787c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00787e:	f003 0302 	and.w	r3, r3, #2
 c007882:	2b00      	cmp	r3, #0
 c007884:	d00a      	beq.n	c00789c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c007886:	687b      	ldr	r3, [r7, #4]
 c007888:	681b      	ldr	r3, [r3, #0]
 c00788a:	685b      	ldr	r3, [r3, #4]
 c00788c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 c007890:	687b      	ldr	r3, [r7, #4]
 c007892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c007894:	687b      	ldr	r3, [r7, #4]
 c007896:	681b      	ldr	r3, [r3, #0]
 c007898:	430a      	orrs	r2, r1
 c00789a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c00789c:	687b      	ldr	r3, [r7, #4]
 c00789e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0078a0:	f003 0304 	and.w	r3, r3, #4
 c0078a4:	2b00      	cmp	r3, #0
 c0078a6:	d00a      	beq.n	c0078be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c0078a8:	687b      	ldr	r3, [r7, #4]
 c0078aa:	681b      	ldr	r3, [r3, #0]
 c0078ac:	685b      	ldr	r3, [r3, #4]
 c0078ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 c0078b2:	687b      	ldr	r3, [r7, #4]
 c0078b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c0078b6:	687b      	ldr	r3, [r7, #4]
 c0078b8:	681b      	ldr	r3, [r3, #0]
 c0078ba:	430a      	orrs	r2, r1
 c0078bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c0078be:	687b      	ldr	r3, [r7, #4]
 c0078c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0078c2:	f003 0308 	and.w	r3, r3, #8
 c0078c6:	2b00      	cmp	r3, #0
 c0078c8:	d00a      	beq.n	c0078e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c0078ca:	687b      	ldr	r3, [r7, #4]
 c0078cc:	681b      	ldr	r3, [r3, #0]
 c0078ce:	685b      	ldr	r3, [r3, #4]
 c0078d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 c0078d4:	687b      	ldr	r3, [r7, #4]
 c0078d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 c0078d8:	687b      	ldr	r3, [r7, #4]
 c0078da:	681b      	ldr	r3, [r3, #0]
 c0078dc:	430a      	orrs	r2, r1
 c0078de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c0078e0:	687b      	ldr	r3, [r7, #4]
 c0078e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0078e4:	f003 0310 	and.w	r3, r3, #16
 c0078e8:	2b00      	cmp	r3, #0
 c0078ea:	d00a      	beq.n	c007902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c0078ec:	687b      	ldr	r3, [r7, #4]
 c0078ee:	681b      	ldr	r3, [r3, #0]
 c0078f0:	689b      	ldr	r3, [r3, #8]
 c0078f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 c0078f6:	687b      	ldr	r3, [r7, #4]
 c0078f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 c0078fa:	687b      	ldr	r3, [r7, #4]
 c0078fc:	681b      	ldr	r3, [r3, #0]
 c0078fe:	430a      	orrs	r2, r1
 c007900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c007902:	687b      	ldr	r3, [r7, #4]
 c007904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c007906:	f003 0320 	and.w	r3, r3, #32
 c00790a:	2b00      	cmp	r3, #0
 c00790c:	d00a      	beq.n	c007924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c00790e:	687b      	ldr	r3, [r7, #4]
 c007910:	681b      	ldr	r3, [r3, #0]
 c007912:	689b      	ldr	r3, [r3, #8]
 c007914:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 c007918:	687b      	ldr	r3, [r7, #4]
 c00791a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 c00791c:	687b      	ldr	r3, [r7, #4]
 c00791e:	681b      	ldr	r3, [r3, #0]
 c007920:	430a      	orrs	r2, r1
 c007922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c007924:	687b      	ldr	r3, [r7, #4]
 c007926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c007928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c00792c:	2b00      	cmp	r3, #0
 c00792e:	d01a      	beq.n	c007966 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c007930:	687b      	ldr	r3, [r7, #4]
 c007932:	681b      	ldr	r3, [r3, #0]
 c007934:	685b      	ldr	r3, [r3, #4]
 c007936:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 c00793a:	687b      	ldr	r3, [r7, #4]
 c00793c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 c00793e:	687b      	ldr	r3, [r7, #4]
 c007940:	681b      	ldr	r3, [r3, #0]
 c007942:	430a      	orrs	r2, r1
 c007944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c007946:	687b      	ldr	r3, [r7, #4]
 c007948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c00794a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c00794e:	d10a      	bne.n	c007966 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c007950:	687b      	ldr	r3, [r7, #4]
 c007952:	681b      	ldr	r3, [r3, #0]
 c007954:	685b      	ldr	r3, [r3, #4]
 c007956:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 c00795a:	687b      	ldr	r3, [r7, #4]
 c00795c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c00795e:	687b      	ldr	r3, [r7, #4]
 c007960:	681b      	ldr	r3, [r3, #0]
 c007962:	430a      	orrs	r2, r1
 c007964:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c007966:	687b      	ldr	r3, [r7, #4]
 c007968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00796a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c00796e:	2b00      	cmp	r3, #0
 c007970:	d00a      	beq.n	c007988 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c007972:	687b      	ldr	r3, [r7, #4]
 c007974:	681b      	ldr	r3, [r3, #0]
 c007976:	685b      	ldr	r3, [r3, #4]
 c007978:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 c00797c:	687b      	ldr	r3, [r7, #4]
 c00797e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c007980:	687b      	ldr	r3, [r7, #4]
 c007982:	681b      	ldr	r3, [r3, #0]
 c007984:	430a      	orrs	r2, r1
 c007986:	605a      	str	r2, [r3, #4]
  }
}
 c007988:	bf00      	nop
 c00798a:	370c      	adds	r7, #12
 c00798c:	46bd      	mov	sp, r7
 c00798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007992:	4770      	bx	lr

0c007994 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 c007994:	b580      	push	{r7, lr}
 c007996:	b086      	sub	sp, #24
 c007998:	af02      	add	r7, sp, #8
 c00799a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c00799c:	687b      	ldr	r3, [r7, #4]
 c00799e:	2200      	movs	r2, #0
 c0079a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 c0079a4:	f7fc fa00 	bl	c003da8 <HAL_GetTick>
 c0079a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c0079aa:	687b      	ldr	r3, [r7, #4]
 c0079ac:	681b      	ldr	r3, [r3, #0]
 c0079ae:	681b      	ldr	r3, [r3, #0]
 c0079b0:	f003 0308 	and.w	r3, r3, #8
 c0079b4:	2b08      	cmp	r3, #8
 c0079b6:	d10e      	bne.n	c0079d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c0079b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c0079bc:	9300      	str	r3, [sp, #0]
 c0079be:	68fb      	ldr	r3, [r7, #12]
 c0079c0:	2200      	movs	r2, #0
 c0079c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 c0079c6:	6878      	ldr	r0, [r7, #4]
 c0079c8:	f000 f82f 	bl	c007a2a <UART_WaitOnFlagUntilTimeout>
 c0079cc:	4603      	mov	r3, r0
 c0079ce:	2b00      	cmp	r3, #0
 c0079d0:	d001      	beq.n	c0079d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 c0079d2:	2303      	movs	r3, #3
 c0079d4:	e025      	b.n	c007a22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c0079d6:	687b      	ldr	r3, [r7, #4]
 c0079d8:	681b      	ldr	r3, [r3, #0]
 c0079da:	681b      	ldr	r3, [r3, #0]
 c0079dc:	f003 0304 	and.w	r3, r3, #4
 c0079e0:	2b04      	cmp	r3, #4
 c0079e2:	d10e      	bne.n	c007a02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c0079e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c0079e8:	9300      	str	r3, [sp, #0]
 c0079ea:	68fb      	ldr	r3, [r7, #12]
 c0079ec:	2200      	movs	r2, #0
 c0079ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 c0079f2:	6878      	ldr	r0, [r7, #4]
 c0079f4:	f000 f819 	bl	c007a2a <UART_WaitOnFlagUntilTimeout>
 c0079f8:	4603      	mov	r3, r0
 c0079fa:	2b00      	cmp	r3, #0
 c0079fc:	d001      	beq.n	c007a02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 c0079fe:	2303      	movs	r3, #3
 c007a00:	e00f      	b.n	c007a22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 c007a02:	687b      	ldr	r3, [r7, #4]
 c007a04:	2220      	movs	r2, #32
 c007a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 c007a0a:	687b      	ldr	r3, [r7, #4]
 c007a0c:	2220      	movs	r2, #32
 c007a0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c007a12:	687b      	ldr	r3, [r7, #4]
 c007a14:	2200      	movs	r2, #0
 c007a16:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 c007a18:	687b      	ldr	r3, [r7, #4]
 c007a1a:	2200      	movs	r2, #0
 c007a1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c007a20:	2300      	movs	r3, #0
}
 c007a22:	4618      	mov	r0, r3
 c007a24:	3710      	adds	r7, #16
 c007a26:	46bd      	mov	sp, r7
 c007a28:	bd80      	pop	{r7, pc}

0c007a2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 c007a2a:	b580      	push	{r7, lr}
 c007a2c:	b084      	sub	sp, #16
 c007a2e:	af00      	add	r7, sp, #0
 c007a30:	60f8      	str	r0, [r7, #12]
 c007a32:	60b9      	str	r1, [r7, #8]
 c007a34:	603b      	str	r3, [r7, #0]
 c007a36:	4613      	mov	r3, r2
 c007a38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c007a3a:	e062      	b.n	c007b02 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c007a3c:	69bb      	ldr	r3, [r7, #24]
 c007a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 c007a42:	d05e      	beq.n	c007b02 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c007a44:	f7fc f9b0 	bl	c003da8 <HAL_GetTick>
 c007a48:	4602      	mov	r2, r0
 c007a4a:	683b      	ldr	r3, [r7, #0]
 c007a4c:	1ad3      	subs	r3, r2, r3
 c007a4e:	69ba      	ldr	r2, [r7, #24]
 c007a50:	429a      	cmp	r2, r3
 c007a52:	d302      	bcc.n	c007a5a <UART_WaitOnFlagUntilTimeout+0x30>
 c007a54:	69bb      	ldr	r3, [r7, #24]
 c007a56:	2b00      	cmp	r3, #0
 c007a58:	d11d      	bne.n	c007a96 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c007a5a:	68fb      	ldr	r3, [r7, #12]
 c007a5c:	681b      	ldr	r3, [r3, #0]
 c007a5e:	681a      	ldr	r2, [r3, #0]
 c007a60:	68fb      	ldr	r3, [r7, #12]
 c007a62:	681b      	ldr	r3, [r3, #0]
 c007a64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 c007a68:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c007a6a:	68fb      	ldr	r3, [r7, #12]
 c007a6c:	681b      	ldr	r3, [r3, #0]
 c007a6e:	689a      	ldr	r2, [r3, #8]
 c007a70:	68fb      	ldr	r3, [r7, #12]
 c007a72:	681b      	ldr	r3, [r3, #0]
 c007a74:	f022 0201 	bic.w	r2, r2, #1
 c007a78:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 c007a7a:	68fb      	ldr	r3, [r7, #12]
 c007a7c:	2220      	movs	r2, #32
 c007a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 c007a82:	68fb      	ldr	r3, [r7, #12]
 c007a84:	2220      	movs	r2, #32
 c007a86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 c007a8a:	68fb      	ldr	r3, [r7, #12]
 c007a8c:	2200      	movs	r2, #0
 c007a8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 c007a92:	2303      	movs	r3, #3
 c007a94:	e045      	b.n	c007b22 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c007a96:	68fb      	ldr	r3, [r7, #12]
 c007a98:	681b      	ldr	r3, [r3, #0]
 c007a9a:	681b      	ldr	r3, [r3, #0]
 c007a9c:	f003 0304 	and.w	r3, r3, #4
 c007aa0:	2b00      	cmp	r3, #0
 c007aa2:	d02e      	beq.n	c007b02 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c007aa4:	68fb      	ldr	r3, [r7, #12]
 c007aa6:	681b      	ldr	r3, [r3, #0]
 c007aa8:	69db      	ldr	r3, [r3, #28]
 c007aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c007aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c007ab2:	d126      	bne.n	c007b02 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c007ab4:	68fb      	ldr	r3, [r7, #12]
 c007ab6:	681b      	ldr	r3, [r3, #0]
 c007ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c007abc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c007abe:	68fb      	ldr	r3, [r7, #12]
 c007ac0:	681b      	ldr	r3, [r3, #0]
 c007ac2:	681a      	ldr	r2, [r3, #0]
 c007ac4:	68fb      	ldr	r3, [r7, #12]
 c007ac6:	681b      	ldr	r3, [r3, #0]
 c007ac8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 c007acc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c007ace:	68fb      	ldr	r3, [r7, #12]
 c007ad0:	681b      	ldr	r3, [r3, #0]
 c007ad2:	689a      	ldr	r2, [r3, #8]
 c007ad4:	68fb      	ldr	r3, [r7, #12]
 c007ad6:	681b      	ldr	r3, [r3, #0]
 c007ad8:	f022 0201 	bic.w	r2, r2, #1
 c007adc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 c007ade:	68fb      	ldr	r3, [r7, #12]
 c007ae0:	2220      	movs	r2, #32
 c007ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 c007ae6:	68fb      	ldr	r3, [r7, #12]
 c007ae8:	2220      	movs	r2, #32
 c007aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c007aee:	68fb      	ldr	r3, [r7, #12]
 c007af0:	2220      	movs	r2, #32
 c007af2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c007af6:	68fb      	ldr	r3, [r7, #12]
 c007af8:	2200      	movs	r2, #0
 c007afa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 c007afe:	2303      	movs	r3, #3
 c007b00:	e00f      	b.n	c007b22 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c007b02:	68fb      	ldr	r3, [r7, #12]
 c007b04:	681b      	ldr	r3, [r3, #0]
 c007b06:	69da      	ldr	r2, [r3, #28]
 c007b08:	68bb      	ldr	r3, [r7, #8]
 c007b0a:	4013      	ands	r3, r2
 c007b0c:	68ba      	ldr	r2, [r7, #8]
 c007b0e:	429a      	cmp	r2, r3
 c007b10:	bf0c      	ite	eq
 c007b12:	2301      	moveq	r3, #1
 c007b14:	2300      	movne	r3, #0
 c007b16:	b2db      	uxtb	r3, r3
 c007b18:	461a      	mov	r2, r3
 c007b1a:	79fb      	ldrb	r3, [r7, #7]
 c007b1c:	429a      	cmp	r2, r3
 c007b1e:	d08d      	beq.n	c007a3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c007b20:	2300      	movs	r3, #0
}
 c007b22:	4618      	mov	r0, r3
 c007b24:	3710      	adds	r7, #16
 c007b26:	46bd      	mov	sp, r7
 c007b28:	bd80      	pop	{r7, pc}

0c007b2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 c007b2a:	b480      	push	{r7}
 c007b2c:	b085      	sub	sp, #20
 c007b2e:	af00      	add	r7, sp, #0
 c007b30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 c007b32:	687b      	ldr	r3, [r7, #4]
 c007b34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c007b38:	2b01      	cmp	r3, #1
 c007b3a:	d101      	bne.n	c007b40 <HAL_UARTEx_DisableFifoMode+0x16>
 c007b3c:	2302      	movs	r3, #2
 c007b3e:	e027      	b.n	c007b90 <HAL_UARTEx_DisableFifoMode+0x66>
 c007b40:	687b      	ldr	r3, [r7, #4]
 c007b42:	2201      	movs	r2, #1
 c007b44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c007b48:	687b      	ldr	r3, [r7, #4]
 c007b4a:	2224      	movs	r2, #36	; 0x24
 c007b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c007b50:	687b      	ldr	r3, [r7, #4]
 c007b52:	681b      	ldr	r3, [r3, #0]
 c007b54:	681b      	ldr	r3, [r3, #0]
 c007b56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c007b58:	687b      	ldr	r3, [r7, #4]
 c007b5a:	681b      	ldr	r3, [r3, #0]
 c007b5c:	681a      	ldr	r2, [r3, #0]
 c007b5e:	687b      	ldr	r3, [r7, #4]
 c007b60:	681b      	ldr	r3, [r3, #0]
 c007b62:	f022 0201 	bic.w	r2, r2, #1
 c007b66:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 c007b68:	68fb      	ldr	r3, [r7, #12]
 c007b6a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 c007b6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c007b70:	687b      	ldr	r3, [r7, #4]
 c007b72:	2200      	movs	r2, #0
 c007b74:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c007b76:	687b      	ldr	r3, [r7, #4]
 c007b78:	681b      	ldr	r3, [r3, #0]
 c007b7a:	68fa      	ldr	r2, [r7, #12]
 c007b7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c007b7e:	687b      	ldr	r3, [r7, #4]
 c007b80:	2220      	movs	r2, #32
 c007b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c007b86:	687b      	ldr	r3, [r7, #4]
 c007b88:	2200      	movs	r2, #0
 c007b8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c007b8e:	2300      	movs	r3, #0
}
 c007b90:	4618      	mov	r0, r3
 c007b92:	3714      	adds	r7, #20
 c007b94:	46bd      	mov	sp, r7
 c007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007b9a:	4770      	bx	lr

0c007b9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c007b9c:	b580      	push	{r7, lr}
 c007b9e:	b084      	sub	sp, #16
 c007ba0:	af00      	add	r7, sp, #0
 c007ba2:	6078      	str	r0, [r7, #4]
 c007ba4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c007ba6:	687b      	ldr	r3, [r7, #4]
 c007ba8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c007bac:	2b01      	cmp	r3, #1
 c007bae:	d101      	bne.n	c007bb4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 c007bb0:	2302      	movs	r3, #2
 c007bb2:	e02d      	b.n	c007c10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 c007bb4:	687b      	ldr	r3, [r7, #4]
 c007bb6:	2201      	movs	r2, #1
 c007bb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c007bbc:	687b      	ldr	r3, [r7, #4]
 c007bbe:	2224      	movs	r2, #36	; 0x24
 c007bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c007bc4:	687b      	ldr	r3, [r7, #4]
 c007bc6:	681b      	ldr	r3, [r3, #0]
 c007bc8:	681b      	ldr	r3, [r3, #0]
 c007bca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c007bcc:	687b      	ldr	r3, [r7, #4]
 c007bce:	681b      	ldr	r3, [r3, #0]
 c007bd0:	681a      	ldr	r2, [r3, #0]
 c007bd2:	687b      	ldr	r3, [r7, #4]
 c007bd4:	681b      	ldr	r3, [r3, #0]
 c007bd6:	f022 0201 	bic.w	r2, r2, #1
 c007bda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 c007bdc:	687b      	ldr	r3, [r7, #4]
 c007bde:	681b      	ldr	r3, [r3, #0]
 c007be0:	689b      	ldr	r3, [r3, #8]
 c007be2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 c007be6:	687b      	ldr	r3, [r7, #4]
 c007be8:	681b      	ldr	r3, [r3, #0]
 c007bea:	683a      	ldr	r2, [r7, #0]
 c007bec:	430a      	orrs	r2, r1
 c007bee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c007bf0:	6878      	ldr	r0, [r7, #4]
 c007bf2:	f000 f84f 	bl	c007c94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c007bf6:	687b      	ldr	r3, [r7, #4]
 c007bf8:	681b      	ldr	r3, [r3, #0]
 c007bfa:	68fa      	ldr	r2, [r7, #12]
 c007bfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c007bfe:	687b      	ldr	r3, [r7, #4]
 c007c00:	2220      	movs	r2, #32
 c007c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c007c06:	687b      	ldr	r3, [r7, #4]
 c007c08:	2200      	movs	r2, #0
 c007c0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c007c0e:	2300      	movs	r3, #0
}
 c007c10:	4618      	mov	r0, r3
 c007c12:	3710      	adds	r7, #16
 c007c14:	46bd      	mov	sp, r7
 c007c16:	bd80      	pop	{r7, pc}

0c007c18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c007c18:	b580      	push	{r7, lr}
 c007c1a:	b084      	sub	sp, #16
 c007c1c:	af00      	add	r7, sp, #0
 c007c1e:	6078      	str	r0, [r7, #4]
 c007c20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c007c22:	687b      	ldr	r3, [r7, #4]
 c007c24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 c007c28:	2b01      	cmp	r3, #1
 c007c2a:	d101      	bne.n	c007c30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 c007c2c:	2302      	movs	r3, #2
 c007c2e:	e02d      	b.n	c007c8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 c007c30:	687b      	ldr	r3, [r7, #4]
 c007c32:	2201      	movs	r2, #1
 c007c34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 c007c38:	687b      	ldr	r3, [r7, #4]
 c007c3a:	2224      	movs	r2, #36	; 0x24
 c007c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c007c40:	687b      	ldr	r3, [r7, #4]
 c007c42:	681b      	ldr	r3, [r3, #0]
 c007c44:	681b      	ldr	r3, [r3, #0]
 c007c46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c007c48:	687b      	ldr	r3, [r7, #4]
 c007c4a:	681b      	ldr	r3, [r3, #0]
 c007c4c:	681a      	ldr	r2, [r3, #0]
 c007c4e:	687b      	ldr	r3, [r7, #4]
 c007c50:	681b      	ldr	r3, [r3, #0]
 c007c52:	f022 0201 	bic.w	r2, r2, #1
 c007c56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 c007c58:	687b      	ldr	r3, [r7, #4]
 c007c5a:	681b      	ldr	r3, [r3, #0]
 c007c5c:	689b      	ldr	r3, [r3, #8]
 c007c5e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 c007c62:	687b      	ldr	r3, [r7, #4]
 c007c64:	681b      	ldr	r3, [r3, #0]
 c007c66:	683a      	ldr	r2, [r7, #0]
 c007c68:	430a      	orrs	r2, r1
 c007c6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c007c6c:	6878      	ldr	r0, [r7, #4]
 c007c6e:	f000 f811 	bl	c007c94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c007c72:	687b      	ldr	r3, [r7, #4]
 c007c74:	681b      	ldr	r3, [r3, #0]
 c007c76:	68fa      	ldr	r2, [r7, #12]
 c007c78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c007c7a:	687b      	ldr	r3, [r7, #4]
 c007c7c:	2220      	movs	r2, #32
 c007c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c007c82:	687b      	ldr	r3, [r7, #4]
 c007c84:	2200      	movs	r2, #0
 c007c86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 c007c8a:	2300      	movs	r3, #0
}
 c007c8c:	4618      	mov	r0, r3
 c007c8e:	3710      	adds	r7, #16
 c007c90:	46bd      	mov	sp, r7
 c007c92:	bd80      	pop	{r7, pc}

0c007c94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 c007c94:	b480      	push	{r7}
 c007c96:	b085      	sub	sp, #20
 c007c98:	af00      	add	r7, sp, #0
 c007c9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c007c9c:	687b      	ldr	r3, [r7, #4]
 c007c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c007ca0:	2b00      	cmp	r3, #0
 c007ca2:	d108      	bne.n	c007cb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 c007ca4:	687b      	ldr	r3, [r7, #4]
 c007ca6:	2201      	movs	r2, #1
 c007ca8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 c007cac:	687b      	ldr	r3, [r7, #4]
 c007cae:	2201      	movs	r2, #1
 c007cb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 c007cb4:	e031      	b.n	c007d1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 c007cb6:	2308      	movs	r3, #8
 c007cb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 c007cba:	2308      	movs	r3, #8
 c007cbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c007cbe:	687b      	ldr	r3, [r7, #4]
 c007cc0:	681b      	ldr	r3, [r3, #0]
 c007cc2:	689b      	ldr	r3, [r3, #8]
 c007cc4:	0e5b      	lsrs	r3, r3, #25
 c007cc6:	b2db      	uxtb	r3, r3
 c007cc8:	f003 0307 	and.w	r3, r3, #7
 c007ccc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c007cce:	687b      	ldr	r3, [r7, #4]
 c007cd0:	681b      	ldr	r3, [r3, #0]
 c007cd2:	689b      	ldr	r3, [r3, #8]
 c007cd4:	0f5b      	lsrs	r3, r3, #29
 c007cd6:	b2db      	uxtb	r3, r3
 c007cd8:	f003 0307 	and.w	r3, r3, #7
 c007cdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c007cde:	7bbb      	ldrb	r3, [r7, #14]
 c007ce0:	7b3a      	ldrb	r2, [r7, #12]
 c007ce2:	4911      	ldr	r1, [pc, #68]	; (c007d28 <UARTEx_SetNbDataToProcess+0x94>)
 c007ce4:	5c8a      	ldrb	r2, [r1, r2]
 c007ce6:	fb02 f303 	mul.w	r3, r2, r3
 c007cea:	7b3a      	ldrb	r2, [r7, #12]
 c007cec:	490f      	ldr	r1, [pc, #60]	; (c007d2c <UARTEx_SetNbDataToProcess+0x98>)
 c007cee:	5c8a      	ldrb	r2, [r1, r2]
 c007cf0:	fb93 f3f2 	sdiv	r3, r3, r2
 c007cf4:	b29a      	uxth	r2, r3
 c007cf6:	687b      	ldr	r3, [r7, #4]
 c007cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c007cfc:	7bfb      	ldrb	r3, [r7, #15]
 c007cfe:	7b7a      	ldrb	r2, [r7, #13]
 c007d00:	4909      	ldr	r1, [pc, #36]	; (c007d28 <UARTEx_SetNbDataToProcess+0x94>)
 c007d02:	5c8a      	ldrb	r2, [r1, r2]
 c007d04:	fb02 f303 	mul.w	r3, r2, r3
 c007d08:	7b7a      	ldrb	r2, [r7, #13]
 c007d0a:	4908      	ldr	r1, [pc, #32]	; (c007d2c <UARTEx_SetNbDataToProcess+0x98>)
 c007d0c:	5c8a      	ldrb	r2, [r1, r2]
 c007d0e:	fb93 f3f2 	sdiv	r3, r3, r2
 c007d12:	b29a      	uxth	r2, r3
 c007d14:	687b      	ldr	r3, [r7, #4]
 c007d16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 c007d1a:	bf00      	nop
 c007d1c:	3714      	adds	r7, #20
 c007d1e:	46bd      	mov	sp, r7
 c007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007d24:	4770      	bx	lr
 c007d26:	bf00      	nop
 c007d28:	0c007e5c 	.word	0x0c007e5c
 c007d2c:	0c007e64 	.word	0x0c007e64

0c007d30 <__libc_init_array>:
 c007d30:	b570      	push	{r4, r5, r6, lr}
 c007d32:	4d0d      	ldr	r5, [pc, #52]	; (c007d68 <__libc_init_array+0x38>)
 c007d34:	2600      	movs	r6, #0
 c007d36:	4c0d      	ldr	r4, [pc, #52]	; (c007d6c <__libc_init_array+0x3c>)
 c007d38:	1b64      	subs	r4, r4, r5
 c007d3a:	10a4      	asrs	r4, r4, #2
 c007d3c:	42a6      	cmp	r6, r4
 c007d3e:	d109      	bne.n	c007d54 <__libc_init_array+0x24>
 c007d40:	4d0b      	ldr	r5, [pc, #44]	; (c007d70 <__libc_init_array+0x40>)
 c007d42:	2600      	movs	r6, #0
 c007d44:	4c0b      	ldr	r4, [pc, #44]	; (c007d74 <__libc_init_array+0x44>)
 c007d46:	f000 f82d 	bl	c007da4 <_init>
 c007d4a:	1b64      	subs	r4, r4, r5
 c007d4c:	10a4      	asrs	r4, r4, #2
 c007d4e:	42a6      	cmp	r6, r4
 c007d50:	d105      	bne.n	c007d5e <__libc_init_array+0x2e>
 c007d52:	bd70      	pop	{r4, r5, r6, pc}
 c007d54:	f855 3b04 	ldr.w	r3, [r5], #4
 c007d58:	3601      	adds	r6, #1
 c007d5a:	4798      	blx	r3
 c007d5c:	e7ee      	b.n	c007d3c <__libc_init_array+0xc>
 c007d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 c007d62:	3601      	adds	r6, #1
 c007d64:	4798      	blx	r3
 c007d66:	e7f2      	b.n	c007d4e <__libc_init_array+0x1e>
 c007d68:	0c007e74 	.word	0x0c007e74
 c007d6c:	0c007e74 	.word	0x0c007e74
 c007d70:	0c007e74 	.word	0x0c007e74
 c007d74:	0c007e78 	.word	0x0c007e78

0c007d78 <memcpy>:
 c007d78:	440a      	add	r2, r1
 c007d7a:	1e43      	subs	r3, r0, #1
 c007d7c:	4291      	cmp	r1, r2
 c007d7e:	d100      	bne.n	c007d82 <memcpy+0xa>
 c007d80:	4770      	bx	lr
 c007d82:	b510      	push	{r4, lr}
 c007d84:	f811 4b01 	ldrb.w	r4, [r1], #1
 c007d88:	4291      	cmp	r1, r2
 c007d8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 c007d8e:	d1f9      	bne.n	c007d84 <memcpy+0xc>
 c007d90:	bd10      	pop	{r4, pc}

0c007d92 <memset>:
 c007d92:	4402      	add	r2, r0
 c007d94:	4603      	mov	r3, r0
 c007d96:	4293      	cmp	r3, r2
 c007d98:	d100      	bne.n	c007d9c <memset+0xa>
 c007d9a:	4770      	bx	lr
 c007d9c:	f803 1b01 	strb.w	r1, [r3], #1
 c007da0:	e7f9      	b.n	c007d96 <memset+0x4>
	...

0c007da4 <_init>:
 c007da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c007da6:	bf00      	nop
 c007da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c007daa:	bc08      	pop	{r3}
 c007dac:	469e      	mov	lr, r3
 c007dae:	4770      	bx	lr

0c007db0 <_fini>:
 c007db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c007db2:	bf00      	nop
 c007db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c007db6:	bc08      	pop	{r3}
 c007db8:	469e      	mov	lr, r3
 c007dba:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_SystemCoreClockUpdate>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c5 bc4a 	b.w	c00389c <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e008 <SECURE_RunCallback>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c4 bfee 	b.w	c002fec <__acle_se_SECURE_RunCallback>

0c03e010 <SECURE_log_call>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c5 b8ec 	b.w	c0031f0 <__acle_se_SECURE_log_call>

0c03e018 <SECURE_record_output_data>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c5 ba07 	b.w	c00342e <__acle_se_SECURE_record_output_data>

0c03e020 <SECURE_log_cond_br_not_taken>:
 c03e020:	e97f e97f 	sg
 c03e024:	f7c5 b97a 	b.w	c00331c <__acle_se_SECURE_log_cond_br_not_taken>

0c03e028 <SECURE_Initialize_CFA_engine>:
 c03e028:	e97f e97f 	sg
 c03e02c:	f7c5 b81c 	b.w	c003068 <__acle_se_SECURE_Initialize_CFA_engine>

0c03e030 <SECURE_Initialize_Attestation>:
 c03e030:	e97f e97f 	sg
 c03e034:	f7c5 b854 	b.w	c0030e0 <__acle_se_SECURE_Initialize_Attestation>

0c03e038 <SECURE_log_ret>:
 c03e038:	e97f e97f 	sg
 c03e03c:	f7c5 b88c 	b.w	c003158 <__acle_se_SECURE_log_ret>

0c03e040 <SECURE_log_cond_br_taken>:
 c03e040:	e97f e97f 	sg
 c03e044:	f7c5 b91d 	b.w	c003282 <__acle_se_SECURE_log_cond_br_taken>

0c03e048 <SECURE_RegisterCallback>:
 c03e048:	e97f e97f 	sg
 c03e04c:	f7c4 bf6a 	b.w	c002f24 <__acle_se_SECURE_RegisterCallback>

0c03e050 <SECURE_run_attestation_wait_mode>:
 c03e050:	e97f e97f 	sg
 c03e054:	f7c5 b9af 	b.w	c0033b6 <__acle_se_SECURE_run_attestation_wait_mode>
	...
