
TRACES_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ab0  080401f8  080401f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08040ca8  08040ca8  0001800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08040ca8  08040ca8  0001800c  2**0
                  CONTENTS
  4 .ARM          00000000  08040ca8  08040ca8  0001800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08040ca8  08040ca8  0001800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08040ca8  08040ca8  00010ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08040cac  08040cac  00010cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20018000  08040cb0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  2001800c  08040cbc  0001800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001803c  08040cbc  0001803c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001800c  2**0
                  CONTENTS, READONLY
 12 .comment      00000081  00000000  00000000  00018042  2**0
                  CONTENTS, READONLY
 13 .debug_line   00004a73  00000000  00000000  000180c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00003be8  00000000  00000000  0001cb36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000dc4  00000000  00000000  0002071e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000420  00000000  00000000  000214e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fe8ff  00000000  00000000  00021908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000390  00000000  00000000  00120208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000272a0  00000000  00000000  00120598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000d8c  00000000  00000000  00147838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	; (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	; (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	; (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	e000      	b.n	804020a <__do_global_dtors_aux+0x12>
 8040208:	bf00      	nop
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	2001800c 	.word	0x2001800c
 8040214:	00000000 	.word	0x00000000
 8040218:	08040c30 	.word	0x08040c30

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	; (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	; (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	; (8040234 <frame_dummy+0x18>)
 8040226:	e000      	b.n	804022a <frame_dummy+0xe>
 8040228:	bf00      	nop
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	20018010 	.word	0x20018010
 8040234:	08040c30 	.word	0x08040c30

08040238 <delay>:
	.type	delay, %function
delay:
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 1, uses_anonymous_args = 0
	@ link register save eliminated.
	push	{r7, lr}
 8040238:	b580      	push	{r7, lr}
	sub	sp, sp, #20
 804023a:	b085      	sub	sp, #20
	add	r7, sp, #0
 804023c:	af00      	add	r7, sp, #0
	str	r0, [r7, #4]
 804023e:	6078      	str	r0, [r7, #4]
	movs	r3, #0
 8040240:	2300      	movs	r3, #0
	str	r3, [r7, #12]
 8040242:	60fb      	str	r3, [r7, #12]
	b	.L2
 8040244:	e004      	b.n	8040250 <delay+0x18>
.L3:
	bl	SECURE_log_cond_br_taken
 8040246:	f000 fcff 	bl	8040c48 <__SECURE_log_cond_br_taken_veneer>
	ldr	r3, [r7, #12]
 804024a:	68fb      	ldr	r3, [r7, #12]
	adds	r3, r3, #1
 804024c:	3301      	adds	r3, #1
	str	r3, [r7, #12]
 804024e:	60fb      	str	r3, [r7, #12]
.L2:
	ldr	r2, [r7, #12]
 8040250:	68fa      	ldr	r2, [r7, #12]
	ldr	r3, [r7, #4]
 8040252:	687b      	ldr	r3, [r7, #4]
	cmp	r2, r3
 8040254:	429a      	cmp	r2, r3
	bcc	.L3
 8040256:	d3f6      	bcc.n	8040246 <delay+0xe>
	bl	SECURE_log_cond_br_not_taken
 8040258:	f000 fd0e 	bl	8040c78 <__SECURE_log_cond_br_not_taken_veneer>
	adds	r7, r7, #20
 804025c:	3714      	adds	r7, #20
	mov	sp, r7
 804025e:	46bd      	mov	sp, r7
	@ sp needed
	pop	{r7, lr}
 8040260:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	b	SECURE_log_ret
 8040264:	f000 bd10 	b.w	8040c88 <__SECURE_log_ret_veneer>

08040268 <read_data>:
	.fpu fpv5-sp-d16
	.type	read_data, %function
read_data:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	push	{r7, lr}
 8040268:	b580      	push	{r7, lr}
	sub	sp, sp, #8
 804026a:	b082      	sub	sp, #8
	add	r7, sp, #0
 804026c:	af00      	add	r7, sp, #0
	ldr	r3, .L11
 804026e:	4b44      	ldr	r3, [pc, #272]	; (8040380 <BT2+0x18>)
	mov	r2, #256
 8040270:	f44f 7280 	mov.w	r2, #256	; 0x100
	str	r2, [r3, #40]
 8040274:	629a      	str	r2, [r3, #40]	; 0x28
	movs	r0, #250
 8040276:	20fa      	movs	r0, #250	; 0xfa
	bl	delay
 8040278:	f7ff ffde 	bl	8040238 <delay>
	ldr	r3, .L11
 804027c:	4b40      	ldr	r3, [pc, #256]	; (8040380 <BT2+0x18>)
	mov	r2, #256
 804027e:	f44f 7280 	mov.w	r2, #256	; 0x100
	str	r2, [r3, #24]
 8040282:	619a      	str	r2, [r3, #24]
	movs	r0, #20
 8040284:	2014      	movs	r0, #20
	bl	delay
 8040286:	f7ff ffd7 	bl	8040238 <delay>
	ldr	r3, .L11
 804028a:	4b3d      	ldr	r3, [pc, #244]	; (8040380 <BT2+0x18>)
	mov	r2, #256
 804028c:	f44f 7280 	mov.w	r2, #256	; 0x100
	str	r2, [r3, #40]
 8040290:	629a      	str	r2, [r3, #40]	; 0x28
	movs	r0, #40
 8040292:	2028      	movs	r0, #40	; 0x28
	bl	delay
 8040294:	f7ff ffd0 	bl	8040238 <delay>
	movs	r3, #0
 8040298:	2300      	movs	r3, #0
	str	r3, [r7, #4]
 804029a:	607b      	str	r3, [r7, #4]
	movs	r3, #0
 804029c:	2300      	movs	r3, #0
	str	r3, [r7]
 804029e:	603b      	str	r3, [r7, #0]
	b	.L5
 80402a0:	e040      	b.n	8040324 <BT1+0xa>
.L8:
	bl	SECURE_log_cond_br_taken
 80402a2:	f000 fcd1 	bl	8040c48 <__SECURE_log_cond_br_taken_veneer>
	ldr	r3, .L11
 80402a6:	4b36      	ldr	r3, [pc, #216]	; (8040380 <BT2+0x18>)
	ldr	r3, [r3, #16]
 80402a8:	691b      	ldr	r3, [r3, #16]
	lsrs	r3, r3, #8
 80402aa:	0a1b      	lsrs	r3, r3, #8
	and	r3, r3, #1
 80402ac:	f003 0301 	and.w	r3, r3, #1
	uxtb	r2, r3
 80402b0:	b2da      	uxtb	r2, r3
	ldr	r3, .L11+4
 80402b2:	4b34      	ldr	r3, [pc, #208]	; (8040384 <BT2+0x1c>)
	ldrb	r3, [r3]	@ zero_extendqisi2
 80402b4:	781b      	ldrb	r3, [r3, #0]
	add	r3, r3, r2
 80402b6:	4413      	add	r3, r2
	uxtb	r2, r3
 80402b8:	b2da      	uxtb	r2, r3
	ldr	r3, .L11+4
 80402ba:	4b32      	ldr	r3, [pc, #200]	; (8040384 <BT2+0x1c>)
	strb	r2, [r3]
 80402bc:	701a      	strb	r2, [r3, #0]
	ldr	r3, [r7]
 80402be:	683b      	ldr	r3, [r7, #0]
	cmp	r3, #3
 80402c0:	2b03      	cmp	r3, #3
	ble	BT1
 80402c2:	dd2a      	ble.n	804031a <BT1>
	bl	SECURE_log_cond_br_not_taken
 80402c4:	f000 fcd8 	bl	8040c78 <__SECURE_log_cond_br_not_taken_veneer>
	ldr	r3, [r7]
 80402c8:	683b      	ldr	r3, [r7, #0]
	and	r3, r3, #1
 80402ca:	f003 0301 	and.w	r3, r3, #1
	cmp	r3, #0
 80402ce:	2b00      	cmp	r3, #0
	bne	BT1
 80402d0:	d123      	bne.n	804031a <BT1>
	bl	SECURE_log_cond_br_not_taken
 80402d2:	f000 fcd1 	bl	8040c78 <__SECURE_log_cond_br_not_taken_veneer>
	ldr	r3, [r7, #4]
 80402d6:	687b      	ldr	r3, [r7, #4]
	asrs	r3, r3, #3
 80402d8:	10db      	asrs	r3, r3, #3
	ldr	r2, [r7, #4]
 80402da:	687a      	ldr	r2, [r7, #4]
	asrs	r2, r2, #3
 80402dc:	10d2      	asrs	r2, r2, #3
	ldr	r1, .L11+8
 80402de:	492a      	ldr	r1, [pc, #168]	; (8040388 <BT2+0x20>)
	ldrb	r2, [r1, r2]	@ zero_extendqisi2
 80402e0:	5c8a      	ldrb	r2, [r1, r2]
	lsls	r2, r2, #1
 80402e2:	0052      	lsls	r2, r2, #1
	uxtb	r1, r2
 80402e4:	b2d1      	uxtb	r1, r2
	ldr	r2, .L11+8
 80402e6:	4a28      	ldr	r2, [pc, #160]	; (8040388 <BT2+0x20>)
	strb	r1, [r2, r3]
 80402e8:	54d1      	strb	r1, [r2, r3]
	ldr	r3, .L11+4
 80402ea:	4b26      	ldr	r3, [pc, #152]	; (8040384 <BT2+0x1c>)
	ldrb	r3, [r3]	@ zero_extendqisi2
 80402ec:	781b      	ldrb	r3, [r3, #0]
	cmp	r3, #6
 80402ee:	2b06      	cmp	r3, #6
	bls	BT0
 80402f0:	d90d      	bls.n	804030e <BT0>
	bl	SECURE_log_cond_br_not_taken
 80402f2:	f000 fcc1 	bl	8040c78 <__SECURE_log_cond_br_not_taken_veneer>
	ldr	r3, [r7, #4]
 80402f6:	687b      	ldr	r3, [r7, #4]
	asrs	r3, r3, #3
 80402f8:	10db      	asrs	r3, r3, #3
	ldr	r2, [r7, #4]
 80402fa:	687a      	ldr	r2, [r7, #4]
	asrs	r2, r2, #3
 80402fc:	10d2      	asrs	r2, r2, #3
	ldr	r1, .L11+8
 80402fe:	4922      	ldr	r1, [pc, #136]	; (8040388 <BT2+0x20>)
	ldrb	r2, [r1, r2]	@ zero_extendqisi2
 8040300:	5c8a      	ldrb	r2, [r1, r2]
	orr	r2, r2, #1
 8040302:	f042 0201 	orr.w	r2, r2, #1
	uxtb	r1, r2
 8040306:	b2d1      	uxtb	r1, r2
	ldr	r2, .L11+8
 8040308:	4a1f      	ldr	r2, [pc, #124]	; (8040388 <BT2+0x20>)
	strb	r1, [r2, r3]
 804030a:	54d1      	strb	r1, [r2, r3]
	b	.L7
 804030c:	e001      	b.n	8040312 <BT0+0x4>

0804030e <BT0>:
BT0:
	bl	SECURE_log_cond_br_taken
 804030e:	f000 fc9b 	bl	8040c48 <__SECURE_log_cond_br_taken_veneer>
.L7:
	ldr	r3, [r7, #4]
 8040312:	687b      	ldr	r3, [r7, #4]
	adds	r3, r3, #1
 8040314:	3301      	adds	r3, #1
	str	r3, [r7, #4]
 8040316:	607b      	str	r3, [r7, #4]
	b	.L6
 8040318:	e001      	b.n	804031e <BT1+0x4>

0804031a <BT1>:
BT1:
	bl	SECURE_log_cond_br_taken
 804031a:	f000 fc95 	bl	8040c48 <__SECURE_log_cond_br_taken_veneer>
.L6:
	ldr	r3, [r7]
 804031e:	683b      	ldr	r3, [r7, #0]
	adds	r3, r3, #1
 8040320:	3301      	adds	r3, #1
	str	r3, [r7]
 8040322:	603b      	str	r3, [r7, #0]
.L5:
	ldr	r3, [r7]
 8040324:	683b      	ldr	r3, [r7, #0]
	cmp	r3, #82
 8040326:	2b52      	cmp	r3, #82	; 0x52
	ble	.L8
 8040328:	ddbb      	ble.n	80402a2 <read_data+0x3a>
	bl	SECURE_log_cond_br_not_taken
 804032a:	f000 fca5 	bl	8040c78 <__SECURE_log_cond_br_not_taken_veneer>
	ldr	r3, [r7, #4]
 804032e:	687b      	ldr	r3, [r7, #4]
	cmp	r3, #39
 8040330:	2b27      	cmp	r3, #39	; 0x27
	ble	BT2
 8040332:	dd19      	ble.n	8040368 <BT2>
	bl	SECURE_log_cond_br_not_taken
 8040334:	f000 fca0 	bl	8040c78 <__SECURE_log_cond_br_not_taken_veneer>
	ldr	r3, .L11+8
 8040338:	4b13      	ldr	r3, [pc, #76]	; (8040388 <BT2+0x20>)
	ldrb	r3, [r3, #4]	@ zero_extendqisi2
 804033a:	791b      	ldrb	r3, [r3, #4]
	mov	r1, r3
 804033c:	4619      	mov	r1, r3
	ldr	r3, .L11+8
 804033e:	4b12      	ldr	r3, [pc, #72]	; (8040388 <BT2+0x20>)
	ldrb	r3, [r3]	@ zero_extendqisi2
 8040340:	781b      	ldrb	r3, [r3, #0]
	mov	r2, r3
 8040342:	461a      	mov	r2, r3
	ldr	r3, .L11+8
 8040344:	4b10      	ldr	r3, [pc, #64]	; (8040388 <BT2+0x20>)
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
 8040346:	785b      	ldrb	r3, [r3, #1]
	add	r3, r3, r2
 8040348:	4413      	add	r3, r2
	ldr	r2, .L11+8
 804034a:	4a0f      	ldr	r2, [pc, #60]	; (8040388 <BT2+0x20>)
	ldrb	r2, [r2, #2]	@ zero_extendqisi2
 804034c:	7892      	ldrb	r2, [r2, #2]
	add	r3, r3, r2
 804034e:	4413      	add	r3, r2
	ldr	r2, .L11+8
 8040350:	4a0d      	ldr	r2, [pc, #52]	; (8040388 <BT2+0x20>)
	ldrb	r2, [r2, #3]	@ zero_extendqisi2
 8040352:	78d2      	ldrb	r2, [r2, #3]
	add	r3, r3, r2
 8040354:	4413      	add	r3, r2
	uxtb	r3, r3
 8040356:	b2db      	uxtb	r3, r3
	cmp	r1, r3
 8040358:	4299      	cmp	r1, r3
	bne	BT2
 804035a:	d105      	bne.n	8040368 <BT2>
	bl	SECURE_log_cond_br_not_taken
 804035c:	f000 fc8c 	bl	8040c78 <__SECURE_log_cond_br_not_taken_veneer>
	ldr	r3, .L11+12
 8040360:	4b0a      	ldr	r3, [pc, #40]	; (804038c <BT2+0x24>)
	movs	r2, #1
 8040362:	2201      	movs	r2, #1
	strb	r2, [r3]
 8040364:	701a      	strb	r2, [r3, #0]
	b	.L10
 8040366:	e004      	b.n	8040372 <BT2+0xa>

08040368 <BT2>:
BT2:
	bl	SECURE_log_cond_br_taken
 8040368:	f000 fc6e 	bl	8040c48 <__SECURE_log_cond_br_taken_veneer>
.L9:
	ldr	r3, .L11+12
 804036c:	4b07      	ldr	r3, [pc, #28]	; (804038c <BT2+0x24>)
	movs	r2, #0
 804036e:	2200      	movs	r2, #0
	strb	r2, [r3]
 8040370:	701a      	strb	r2, [r3, #0]
.L10:
	adds	r7, r7, #8
 8040372:	3708      	adds	r7, #8
	mov	sp, r7
 8040374:	46bd      	mov	sp, r7
	@ sp needed
	pop	{r7, lr}
 8040376:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	b	SECURE_log_ret
 804037a:	f000 bc85 	b.w	8040c88 <__SECURE_log_ret_veneer>
 804037e:	bf00      	nop
 8040380:	42020000 	.word	0x42020000
 8040384:	2001802e 	.word	0x2001802e
 8040388:	20018028 	.word	0x20018028
 804038c:	2001802d 	.word	0x2001802d

08040390 <get_temperature>:
	.fpu fpv5-sp-d16
	.type	get_temperature, %function
get_temperature:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	push	{r7, lr}
 8040390:	b580      	push	{r7, lr}
	sub	sp, sp, #8
 8040392:	b082      	sub	sp, #8
	add	r7, sp, #0
 8040394:	af00      	add	r7, sp, #0
	bl	read_data
 8040396:	f7ff ff67 	bl	8040268 <read_data>
	ldr	r3, .L15
 804039a:	4b0a      	ldr	r3, [pc, #40]	; (80403c4 <get_temperature+0x34>)
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
 804039c:	789b      	ldrb	r3, [r3, #2]
	strh	r3, [r7, #6]	@ movhi
 804039e:	80fb      	strh	r3, [r7, #6]
	ldr	r3, .L15
 80403a0:	4b08      	ldr	r3, [pc, #32]	; (80403c4 <get_temperature+0x34>)
	ldrb	r3, [r3, #3]	@ zero_extendqisi2
 80403a2:	78db      	ldrb	r3, [r3, #3]
	lsls	r3, r3, #8
 80403a4:	021b      	lsls	r3, r3, #8
	sxth	r2, r3
 80403a6:	b21a      	sxth	r2, r3
	ldrsh	r3, [r7, #6]
 80403a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
	orrs	r3, r3, r2
 80403ac:	4313      	orrs	r3, r2
	sxth	r3, r3
 80403ae:	b21b      	sxth	r3, r3
	strh	r3, [r7, #6]	@ movhi
 80403b0:	80fb      	strh	r3, [r7, #6]
	ldrh	r3, [r7, #6]
 80403b2:	88fb      	ldrh	r3, [r7, #6]
	mov	r0, r3
 80403b4:	4618      	mov	r0, r3
	adds	r7, r7, #8
 80403b6:	3708      	adds	r7, #8
	mov	sp, r7
 80403b8:	46bd      	mov	sp, r7
	@ sp needed
	pop	{r7, lr}
 80403ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	b	SECURE_log_ret
 80403be:	f000 bc63 	b.w	8040c88 <__SECURE_log_ret_veneer>
 80403c2:	bf00      	nop
 80403c4:	20018028 	.word	0x20018028

080403c8 <application>:
	.fpu fpv5-sp-d16
	.type	application, %function
application:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 1, uses_anonymous_args = 0
	push	{r7, lr}
 80403c8:	b580      	push	{r7, lr}
	add	r7, sp, #0
 80403ca:	af00      	add	r7, sp, #0
	bl	get_temperature
 80403cc:	f7ff ffe0 	bl	8040390 <get_temperature>
	mov	r3, r0
 80403d0:	4603      	mov	r3, r0
	mov	r2, r3
 80403d2:	461a      	mov	r2, r3
	ldr	r3, .L22
 80403d4:	4b02      	ldr	r3, [pc, #8]	; (80403e0 <application+0x18>)
	str	r2, [r3]
 80403d6:	601a      	str	r2, [r3, #0]
	pop	{r7, lr}
 80403d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	b	SECURE_log_ret
 80403dc:	f000 bc54 	b.w	8040c88 <__SECURE_log_ret_veneer>
 80403e0:	20018034 	.word	0x20018034

080403e4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80403e4:	b580      	push	{r7, lr}
 80403e6:	b088      	sub	sp, #32
 80403e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80403ea:	f107 030c 	add.w	r3, r7, #12
 80403ee:	2200      	movs	r2, #0
 80403f0:	601a      	str	r2, [r3, #0]
 80403f2:	605a      	str	r2, [r3, #4]
 80403f4:	609a      	str	r2, [r3, #8]
 80403f6:	60da      	str	r2, [r3, #12]
 80403f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80403fa:	4b28      	ldr	r3, [pc, #160]	; (804049c <MX_GPIO_Init+0xb8>)
 80403fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80403fe:	4a27      	ldr	r2, [pc, #156]	; (804049c <MX_GPIO_Init+0xb8>)
 8040400:	f043 0304 	orr.w	r3, r3, #4
 8040404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040406:	4b25      	ldr	r3, [pc, #148]	; (804049c <MX_GPIO_Init+0xb8>)
 8040408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804040a:	f003 0304 	and.w	r3, r3, #4
 804040e:	60bb      	str	r3, [r7, #8]
 8040410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040412:	4b22      	ldr	r3, [pc, #136]	; (804049c <MX_GPIO_Init+0xb8>)
 8040414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040416:	4a21      	ldr	r2, [pc, #132]	; (804049c <MX_GPIO_Init+0xb8>)
 8040418:	f043 0301 	orr.w	r3, r3, #1
 804041c:	64d3      	str	r3, [r2, #76]	; 0x4c
 804041e:	4b1f      	ldr	r3, [pc, #124]	; (804049c <MX_GPIO_Init+0xb8>)
 8040420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040422:	f003 0301 	and.w	r3, r3, #1
 8040426:	607b      	str	r3, [r7, #4]
 8040428:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 804042a:	2200      	movs	r2, #0
 804042c:	2180      	movs	r1, #128	; 0x80
 804042e:	481c      	ldr	r0, [pc, #112]	; (80404a0 <MX_GPIO_Init+0xbc>)
 8040430:	f000 fbc2 	bl	8040bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8040434:	2200      	movs	r2, #0
 8040436:	f44f 7100 	mov.w	r1, #512	; 0x200
 804043a:	481a      	ldr	r0, [pc, #104]	; (80404a4 <MX_GPIO_Init+0xc0>)
 804043c:	f000 fbbc 	bl	8040bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_BLUE_Pin;
 8040440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8040444:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040446:	2300      	movs	r3, #0
 8040448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804044a:	2300      	movs	r3, #0
 804044c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_BLUE_GPIO_Port, &GPIO_InitStruct);
 804044e:	f107 030c 	add.w	r3, r7, #12
 8040452:	4619      	mov	r1, r3
 8040454:	4812      	ldr	r0, [pc, #72]	; (80404a0 <MX_GPIO_Init+0xbc>)
 8040456:	f000 fa2f 	bl	80408b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 804045a:	2380      	movs	r3, #128	; 0x80
 804045c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804045e:	2301      	movs	r3, #1
 8040460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040462:	2300      	movs	r3, #0
 8040464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040466:	2300      	movs	r3, #0
 8040468:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 804046a:	f107 030c 	add.w	r3, r7, #12
 804046e:	4619      	mov	r1, r3
 8040470:	480b      	ldr	r0, [pc, #44]	; (80404a0 <MX_GPIO_Init+0xbc>)
 8040472:	f000 fa21 	bl	80408b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8040476:	f44f 7300 	mov.w	r3, #512	; 0x200
 804047a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804047c:	2301      	movs	r3, #1
 804047e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040480:	2300      	movs	r3, #0
 8040482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040484:	2300      	movs	r3, #0
 8040486:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8040488:	f107 030c 	add.w	r3, r7, #12
 804048c:	4619      	mov	r1, r3
 804048e:	4805      	ldr	r0, [pc, #20]	; (80404a4 <MX_GPIO_Init+0xc0>)
 8040490:	f000 fa12 	bl	80408b8 <HAL_GPIO_Init>

}
 8040494:	bf00      	nop
 8040496:	3720      	adds	r7, #32
 8040498:	46bd      	mov	sp, r7
 804049a:	bd80      	pop	{r7, pc}
 804049c:	40021000 	.word	0x40021000
 80404a0:	42020800 	.word	0x42020800
 80404a4:	42020000 	.word	0x42020000

080404a8 <SecureFault_Callback>:
  *(volatile uint32_t *)0x30000000UL = 0;
}

//secure fault generated by IDAU/SAU check */
void SecureFault_Callback(void)
{
 80404a8:	b580      	push	{r7, lr}
 80404aa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80404ac:	2201      	movs	r2, #1
 80404ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80404b2:	4803      	ldr	r0, [pc, #12]	; (80404c0 <SecureFault_Callback+0x18>)
 80404b4:	f000 fb80 	bl	8040bb8 <HAL_GPIO_WritePin>
  Error_Handler();
 80404b8:	f000 f82e 	bl	8040518 <Error_Handler>
}
 80404bc:	bf00      	nop
 80404be:	bd80      	pop	{r7, pc}
 80404c0:	42020000 	.word	0x42020000

080404c4 <SecureError_Callback>:

//secure error generated by GTZC check
void SecureError_Callback(void)
{
 80404c4:	b580      	push	{r7, lr}
 80404c6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80404c8:	2201      	movs	r2, #1
 80404ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80404ce:	4803      	ldr	r0, [pc, #12]	; (80404dc <SecureError_Callback+0x18>)
 80404d0:	f000 fb72 	bl	8040bb8 <HAL_GPIO_WritePin>
  Error_Handler();
 80404d4:	f000 f820 	bl	8040518 <Error_Handler>
}
 80404d8:	bf00      	nop
 80404da:	bd80      	pop	{r7, pc}
 80404dc:	42020000 	.word	0x42020000

080404e0 <main>:
  */

extern char input[33];
uint32_t c;
int main(void)
{
 80404e0:	b580      	push	{r7, lr}
 80404e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80404e4:	f000 f899 	bl	804061a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Initialize all configured peripherals */
   MX_GPIO_Init();
 80404e8:	f7ff ff7c 	bl	80403e4 <MX_GPIO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  //register error callbacks
  SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
 80404ec:	4907      	ldr	r1, [pc, #28]	; (804050c <main+0x2c>)
 80404ee:	2000      	movs	r0, #0
 80404f0:	f000 fbba 	bl	8040c68 <__SECURE_RegisterCallback_veneer>
  SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
 80404f4:	4906      	ldr	r1, [pc, #24]	; (8040510 <main+0x30>)
 80404f6:	2001      	movs	r0, #1
 80404f8:	f000 fbb6 	bl	8040c68 <__SECURE_RegisterCallback_veneer>
  SECURE_RegisterCallback(ATTESTATION_APP_ID,(void*)&application);
 80404fc:	4905      	ldr	r1, [pc, #20]	; (8040514 <main+0x34>)
 80404fe:	2002      	movs	r0, #2
 8040500:	f000 fbb2 	bl	8040c68 <__SECURE_RegisterCallback_veneer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SECURE_run_attestation_wait_mode();
 8040504:	f000 fbc8 	bl	8040c98 <__SECURE_run_attestation_wait_mode_veneer>
 8040508:	e7fc      	b.n	8040504 <main+0x24>
 804050a:	bf00      	nop
 804050c:	080404a9 	.word	0x080404a9
 8040510:	080404c5 	.word	0x080404c5
 8040514:	080403c9 	.word	0x080403c9

08040518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040518:	b480      	push	{r7}
 804051a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 804051c:	b672      	cpsid	i
}
 804051e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040520:	e7fe      	b.n	8040520 <Error_Handler+0x8>
	...

08040524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040524:	b480      	push	{r7}
 8040526:	b083      	sub	sp, #12
 8040528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 804052a:	4b0f      	ldr	r3, [pc, #60]	; (8040568 <HAL_MspInit+0x44>)
 804052c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804052e:	4a0e      	ldr	r2, [pc, #56]	; (8040568 <HAL_MspInit+0x44>)
 8040530:	f043 0301 	orr.w	r3, r3, #1
 8040534:	6613      	str	r3, [r2, #96]	; 0x60
 8040536:	4b0c      	ldr	r3, [pc, #48]	; (8040568 <HAL_MspInit+0x44>)
 8040538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804053a:	f003 0301 	and.w	r3, r3, #1
 804053e:	607b      	str	r3, [r7, #4]
 8040540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8040542:	4b09      	ldr	r3, [pc, #36]	; (8040568 <HAL_MspInit+0x44>)
 8040544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040546:	4a08      	ldr	r2, [pc, #32]	; (8040568 <HAL_MspInit+0x44>)
 8040548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804054c:	6593      	str	r3, [r2, #88]	; 0x58
 804054e:	4b06      	ldr	r3, [pc, #24]	; (8040568 <HAL_MspInit+0x44>)
 8040550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040556:	603b      	str	r3, [r7, #0]
 8040558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 804055a:	bf00      	nop
 804055c:	370c      	adds	r7, #12
 804055e:	46bd      	mov	sp, r7
 8040560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040564:	4770      	bx	lr
 8040566:	bf00      	nop
 8040568:	40021000 	.word	0x40021000

0804056c <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 804056c:	b480      	push	{r7}
 804056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040570:	e7fe      	b.n	8040570 <MemManage_Handler+0x4>

08040572 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040572:	b480      	push	{r7}
 8040574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040576:	e7fe      	b.n	8040576 <UsageFault_Handler+0x4>

08040578 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040578:	b480      	push	{r7}
 804057a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 804057c:	bf00      	nop
 804057e:	46bd      	mov	sp, r7
 8040580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040584:	4770      	bx	lr

08040586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040586:	b480      	push	{r7}
 8040588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 804058a:	bf00      	nop
 804058c:	46bd      	mov	sp, r7
 804058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040592:	4770      	bx	lr

08040594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040594:	b580      	push	{r7, lr}
 8040596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040598:	f000 f896 	bl	80406c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 804059c:	bf00      	nop
 804059e:	bd80      	pop	{r7, pc}

080405a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80405a0:	b480      	push	{r7}
 80405a2:	af00      	add	r7, sp, #0
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 80405a4:	bf00      	nop
 80405a6:	46bd      	mov	sp, r7
 80405a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80405ac:	4770      	bx	lr
	...

080405b0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80405b0:	b580      	push	{r7, lr}
 80405b2:	af00      	add	r7, sp, #0
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 80405b4:	f000 fb50 	bl	8040c58 <__SECURE_SystemCoreClockUpdate_veneer>
 80405b8:	4603      	mov	r3, r0
 80405ba:	4a02      	ldr	r2, [pc, #8]	; (80405c4 <SystemCoreClockUpdate+0x14>)
 80405bc:	6013      	str	r3, [r2, #0]
}
 80405be:	bf00      	nop
 80405c0:	bd80      	pop	{r7, pc}
 80405c2:	bf00      	nop
 80405c4:	20018000 	.word	0x20018000

080405c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80405c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040600 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80405cc:	f7ff ffe8 	bl	80405a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80405d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80405d2:	e003      	b.n	80405dc <LoopCopyDataInit>

080405d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80405d4:	4b0b      	ldr	r3, [pc, #44]	; (8040604 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80405d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80405d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80405da:	3104      	adds	r1, #4

080405dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80405dc:	480a      	ldr	r0, [pc, #40]	; (8040608 <LoopForever+0xa>)
	ldr	r3, =_edata
 80405de:	4b0b      	ldr	r3, [pc, #44]	; (804060c <LoopForever+0xe>)
	adds	r2, r0, r1
 80405e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80405e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80405e4:	d3f6      	bcc.n	80405d4 <CopyDataInit>
	ldr	r2, =_sbss
 80405e6:	4a0a      	ldr	r2, [pc, #40]	; (8040610 <LoopForever+0x12>)
	b	LoopFillZerobss
 80405e8:	e002      	b.n	80405f0 <LoopFillZerobss>

080405ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80405ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80405ec:	f842 3b04 	str.w	r3, [r2], #4

080405f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80405f0:	4b08      	ldr	r3, [pc, #32]	; (8040614 <LoopForever+0x16>)
	cmp	r2, r3
 80405f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80405f4:	d3f9      	bcc.n	80405ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80405f6:	f000 faf7 	bl	8040be8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80405fa:	f7ff ff71 	bl	80404e0 <main>

080405fe <LoopForever>:

LoopForever:
    b LoopForever
 80405fe:	e7fe      	b.n	80405fe <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8040600:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8040604:	08040cb0 	.word	0x08040cb0
	ldr	r0, =_sdata
 8040608:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 804060c:	2001800c 	.word	0x2001800c
	ldr	r2, =_sbss
 8040610:	2001800c 	.word	0x2001800c
	ldr	r3, = _ebss
 8040614:	2001803c 	.word	0x2001803c

08040618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8040618:	e7fe      	b.n	8040618 <ADC1_2_IRQHandler>

0804061a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 804061a:	b580      	push	{r7, lr}
 804061c:	b082      	sub	sp, #8
 804061e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8040620:	2300      	movs	r3, #0
 8040622:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8040624:	2004      	movs	r0, #4
 8040626:	f000 f915 	bl	8040854 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 804062a:	f7ff ffc1 	bl	80405b0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 804062e:	2007      	movs	r0, #7
 8040630:	f000 f80e 	bl	8040650 <HAL_InitTick>
 8040634:	4603      	mov	r3, r0
 8040636:	2b00      	cmp	r3, #0
 8040638:	d002      	beq.n	8040640 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 804063a:	2301      	movs	r3, #1
 804063c:	71fb      	strb	r3, [r7, #7]
 804063e:	e001      	b.n	8040644 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8040640:	f7ff ff70 	bl	8040524 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8040644:	79fb      	ldrb	r3, [r7, #7]
}
 8040646:	4618      	mov	r0, r3
 8040648:	3708      	adds	r7, #8
 804064a:	46bd      	mov	sp, r7
 804064c:	bd80      	pop	{r7, pc}
	...

08040650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040650:	b580      	push	{r7, lr}
 8040652:	b084      	sub	sp, #16
 8040654:	af00      	add	r7, sp, #0
 8040656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8040658:	2300      	movs	r3, #0
 804065a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 804065c:	4b17      	ldr	r3, [pc, #92]	; (80406bc <HAL_InitTick+0x6c>)
 804065e:	781b      	ldrb	r3, [r3, #0]
 8040660:	2b00      	cmp	r3, #0
 8040662:	d023      	beq.n	80406ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8040664:	4b16      	ldr	r3, [pc, #88]	; (80406c0 <HAL_InitTick+0x70>)
 8040666:	681a      	ldr	r2, [r3, #0]
 8040668:	4b14      	ldr	r3, [pc, #80]	; (80406bc <HAL_InitTick+0x6c>)
 804066a:	781b      	ldrb	r3, [r3, #0]
 804066c:	4619      	mov	r1, r3
 804066e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040672:	fbb3 f3f1 	udiv	r3, r3, r1
 8040676:	fbb2 f3f3 	udiv	r3, r2, r3
 804067a:	4618      	mov	r0, r3
 804067c:	f000 f90f 	bl	804089e <HAL_SYSTICK_Config>
 8040680:	4603      	mov	r3, r0
 8040682:	2b00      	cmp	r3, #0
 8040684:	d10f      	bne.n	80406a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040686:	687b      	ldr	r3, [r7, #4]
 8040688:	2b07      	cmp	r3, #7
 804068a:	d809      	bhi.n	80406a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 804068c:	2200      	movs	r2, #0
 804068e:	6879      	ldr	r1, [r7, #4]
 8040690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8040694:	f000 f8e9 	bl	804086a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8040698:	4a0a      	ldr	r2, [pc, #40]	; (80406c4 <HAL_InitTick+0x74>)
 804069a:	687b      	ldr	r3, [r7, #4]
 804069c:	6013      	str	r3, [r2, #0]
 804069e:	e007      	b.n	80406b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80406a0:	2301      	movs	r3, #1
 80406a2:	73fb      	strb	r3, [r7, #15]
 80406a4:	e004      	b.n	80406b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80406a6:	2301      	movs	r3, #1
 80406a8:	73fb      	strb	r3, [r7, #15]
 80406aa:	e001      	b.n	80406b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80406ac:	2301      	movs	r3, #1
 80406ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80406b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80406b2:	4618      	mov	r0, r3
 80406b4:	3710      	adds	r7, #16
 80406b6:	46bd      	mov	sp, r7
 80406b8:	bd80      	pop	{r7, pc}
 80406ba:	bf00      	nop
 80406bc:	20018008 	.word	0x20018008
 80406c0:	20018000 	.word	0x20018000
 80406c4:	20018004 	.word	0x20018004

080406c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80406c8:	b480      	push	{r7}
 80406ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80406cc:	4b06      	ldr	r3, [pc, #24]	; (80406e8 <HAL_IncTick+0x20>)
 80406ce:	781b      	ldrb	r3, [r3, #0]
 80406d0:	461a      	mov	r2, r3
 80406d2:	4b06      	ldr	r3, [pc, #24]	; (80406ec <HAL_IncTick+0x24>)
 80406d4:	681b      	ldr	r3, [r3, #0]
 80406d6:	4413      	add	r3, r2
 80406d8:	4a04      	ldr	r2, [pc, #16]	; (80406ec <HAL_IncTick+0x24>)
 80406da:	6013      	str	r3, [r2, #0]
}
 80406dc:	bf00      	nop
 80406de:	46bd      	mov	sp, r7
 80406e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80406e4:	4770      	bx	lr
 80406e6:	bf00      	nop
 80406e8:	20018008 	.word	0x20018008
 80406ec:	20018030 	.word	0x20018030

080406f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80406f0:	b480      	push	{r7}
 80406f2:	b085      	sub	sp, #20
 80406f4:	af00      	add	r7, sp, #0
 80406f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80406f8:	687b      	ldr	r3, [r7, #4]
 80406fa:	f003 0307 	and.w	r3, r3, #7
 80406fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040700:	4b0c      	ldr	r3, [pc, #48]	; (8040734 <__NVIC_SetPriorityGrouping+0x44>)
 8040702:	68db      	ldr	r3, [r3, #12]
 8040704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040706:	68ba      	ldr	r2, [r7, #8]
 8040708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 804070c:	4013      	ands	r3, r2
 804070e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040710:	68fb      	ldr	r3, [r7, #12]
 8040712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040714:	68bb      	ldr	r3, [r7, #8]
 8040716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 804071c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040722:	4a04      	ldr	r2, [pc, #16]	; (8040734 <__NVIC_SetPriorityGrouping+0x44>)
 8040724:	68bb      	ldr	r3, [r7, #8]
 8040726:	60d3      	str	r3, [r2, #12]
}
 8040728:	bf00      	nop
 804072a:	3714      	adds	r7, #20
 804072c:	46bd      	mov	sp, r7
 804072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040732:	4770      	bx	lr
 8040734:	e000ed00 	.word	0xe000ed00

08040738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040738:	b480      	push	{r7}
 804073a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 804073c:	4b04      	ldr	r3, [pc, #16]	; (8040750 <__NVIC_GetPriorityGrouping+0x18>)
 804073e:	68db      	ldr	r3, [r3, #12]
 8040740:	0a1b      	lsrs	r3, r3, #8
 8040742:	f003 0307 	and.w	r3, r3, #7
}
 8040746:	4618      	mov	r0, r3
 8040748:	46bd      	mov	sp, r7
 804074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804074e:	4770      	bx	lr
 8040750:	e000ed00 	.word	0xe000ed00

08040754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040754:	b480      	push	{r7}
 8040756:	b083      	sub	sp, #12
 8040758:	af00      	add	r7, sp, #0
 804075a:	4603      	mov	r3, r0
 804075c:	6039      	str	r1, [r7, #0]
 804075e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040764:	2b00      	cmp	r3, #0
 8040766:	db0a      	blt.n	804077e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040768:	683b      	ldr	r3, [r7, #0]
 804076a:	b2da      	uxtb	r2, r3
 804076c:	490c      	ldr	r1, [pc, #48]	; (80407a0 <__NVIC_SetPriority+0x4c>)
 804076e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040772:	0152      	lsls	r2, r2, #5
 8040774:	b2d2      	uxtb	r2, r2
 8040776:	440b      	add	r3, r1
 8040778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 804077c:	e00a      	b.n	8040794 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804077e:	683b      	ldr	r3, [r7, #0]
 8040780:	b2da      	uxtb	r2, r3
 8040782:	4908      	ldr	r1, [pc, #32]	; (80407a4 <__NVIC_SetPriority+0x50>)
 8040784:	79fb      	ldrb	r3, [r7, #7]
 8040786:	f003 030f 	and.w	r3, r3, #15
 804078a:	3b04      	subs	r3, #4
 804078c:	0152      	lsls	r2, r2, #5
 804078e:	b2d2      	uxtb	r2, r2
 8040790:	440b      	add	r3, r1
 8040792:	761a      	strb	r2, [r3, #24]
}
 8040794:	bf00      	nop
 8040796:	370c      	adds	r7, #12
 8040798:	46bd      	mov	sp, r7
 804079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804079e:	4770      	bx	lr
 80407a0:	e000e100 	.word	0xe000e100
 80407a4:	e000ed00 	.word	0xe000ed00

080407a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80407a8:	b480      	push	{r7}
 80407aa:	b089      	sub	sp, #36	; 0x24
 80407ac:	af00      	add	r7, sp, #0
 80407ae:	60f8      	str	r0, [r7, #12]
 80407b0:	60b9      	str	r1, [r7, #8]
 80407b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80407b4:	68fb      	ldr	r3, [r7, #12]
 80407b6:	f003 0307 	and.w	r3, r3, #7
 80407ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80407bc:	69fb      	ldr	r3, [r7, #28]
 80407be:	f1c3 0307 	rsb	r3, r3, #7
 80407c2:	2b03      	cmp	r3, #3
 80407c4:	bf28      	it	cs
 80407c6:	2303      	movcs	r3, #3
 80407c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80407ca:	69fb      	ldr	r3, [r7, #28]
 80407cc:	3303      	adds	r3, #3
 80407ce:	2b06      	cmp	r3, #6
 80407d0:	d902      	bls.n	80407d8 <NVIC_EncodePriority+0x30>
 80407d2:	69fb      	ldr	r3, [r7, #28]
 80407d4:	3b04      	subs	r3, #4
 80407d6:	e000      	b.n	80407da <NVIC_EncodePriority+0x32>
 80407d8:	2300      	movs	r3, #0
 80407da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80407dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80407e0:	69bb      	ldr	r3, [r7, #24]
 80407e2:	fa02 f303 	lsl.w	r3, r2, r3
 80407e6:	43da      	mvns	r2, r3
 80407e8:	68bb      	ldr	r3, [r7, #8]
 80407ea:	401a      	ands	r2, r3
 80407ec:	697b      	ldr	r3, [r7, #20]
 80407ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80407f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80407f4:	697b      	ldr	r3, [r7, #20]
 80407f6:	fa01 f303 	lsl.w	r3, r1, r3
 80407fa:	43d9      	mvns	r1, r3
 80407fc:	687b      	ldr	r3, [r7, #4]
 80407fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040800:	4313      	orrs	r3, r2
         );
}
 8040802:	4618      	mov	r0, r3
 8040804:	3724      	adds	r7, #36	; 0x24
 8040806:	46bd      	mov	sp, r7
 8040808:	f85d 7b04 	ldr.w	r7, [sp], #4
 804080c:	4770      	bx	lr
	...

08040810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040810:	b580      	push	{r7, lr}
 8040812:	b082      	sub	sp, #8
 8040814:	af00      	add	r7, sp, #0
 8040816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040818:	687b      	ldr	r3, [r7, #4]
 804081a:	3b01      	subs	r3, #1
 804081c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040820:	d301      	bcc.n	8040826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040822:	2301      	movs	r3, #1
 8040824:	e00f      	b.n	8040846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040826:	4a0a      	ldr	r2, [pc, #40]	; (8040850 <SysTick_Config+0x40>)
 8040828:	687b      	ldr	r3, [r7, #4]
 804082a:	3b01      	subs	r3, #1
 804082c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 804082e:	2107      	movs	r1, #7
 8040830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8040834:	f7ff ff8e 	bl	8040754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040838:	4b05      	ldr	r3, [pc, #20]	; (8040850 <SysTick_Config+0x40>)
 804083a:	2200      	movs	r2, #0
 804083c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 804083e:	4b04      	ldr	r3, [pc, #16]	; (8040850 <SysTick_Config+0x40>)
 8040840:	2207      	movs	r2, #7
 8040842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040844:	2300      	movs	r3, #0
}
 8040846:	4618      	mov	r0, r3
 8040848:	3708      	adds	r7, #8
 804084a:	46bd      	mov	sp, r7
 804084c:	bd80      	pop	{r7, pc}
 804084e:	bf00      	nop
 8040850:	e000e010 	.word	0xe000e010

08040854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040854:	b580      	push	{r7, lr}
 8040856:	b082      	sub	sp, #8
 8040858:	af00      	add	r7, sp, #0
 804085a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 804085c:	6878      	ldr	r0, [r7, #4]
 804085e:	f7ff ff47 	bl	80406f0 <__NVIC_SetPriorityGrouping>
}
 8040862:	bf00      	nop
 8040864:	3708      	adds	r7, #8
 8040866:	46bd      	mov	sp, r7
 8040868:	bd80      	pop	{r7, pc}

0804086a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 804086a:	b580      	push	{r7, lr}
 804086c:	b086      	sub	sp, #24
 804086e:	af00      	add	r7, sp, #0
 8040870:	4603      	mov	r3, r0
 8040872:	60b9      	str	r1, [r7, #8]
 8040874:	607a      	str	r2, [r7, #4]
 8040876:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8040878:	f7ff ff5e 	bl	8040738 <__NVIC_GetPriorityGrouping>
 804087c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 804087e:	687a      	ldr	r2, [r7, #4]
 8040880:	68b9      	ldr	r1, [r7, #8]
 8040882:	6978      	ldr	r0, [r7, #20]
 8040884:	f7ff ff90 	bl	80407a8 <NVIC_EncodePriority>
 8040888:	4602      	mov	r2, r0
 804088a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804088e:	4611      	mov	r1, r2
 8040890:	4618      	mov	r0, r3
 8040892:	f7ff ff5f 	bl	8040754 <__NVIC_SetPriority>
}
 8040896:	bf00      	nop
 8040898:	3718      	adds	r7, #24
 804089a:	46bd      	mov	sp, r7
 804089c:	bd80      	pop	{r7, pc}

0804089e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 804089e:	b580      	push	{r7, lr}
 80408a0:	b082      	sub	sp, #8
 80408a2:	af00      	add	r7, sp, #0
 80408a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80408a6:	6878      	ldr	r0, [r7, #4]
 80408a8:	f7ff ffb2 	bl	8040810 <SysTick_Config>
 80408ac:	4603      	mov	r3, r0
}
 80408ae:	4618      	mov	r0, r3
 80408b0:	3708      	adds	r7, #8
 80408b2:	46bd      	mov	sp, r7
 80408b4:	bd80      	pop	{r7, pc}
	...

080408b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80408b8:	b480      	push	{r7}
 80408ba:	b087      	sub	sp, #28
 80408bc:	af00      	add	r7, sp, #0
 80408be:	6078      	str	r0, [r7, #4]
 80408c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80408c2:	2300      	movs	r3, #0
 80408c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80408c6:	e158      	b.n	8040b7a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80408c8:	683b      	ldr	r3, [r7, #0]
 80408ca:	681a      	ldr	r2, [r3, #0]
 80408cc:	2101      	movs	r1, #1
 80408ce:	697b      	ldr	r3, [r7, #20]
 80408d0:	fa01 f303 	lsl.w	r3, r1, r3
 80408d4:	4013      	ands	r3, r2
 80408d6:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 80408d8:	68fb      	ldr	r3, [r7, #12]
 80408da:	2b00      	cmp	r3, #0
 80408dc:	f000 814a 	beq.w	8040b74 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80408e0:	683b      	ldr	r3, [r7, #0]
 80408e2:	685b      	ldr	r3, [r3, #4]
 80408e4:	2b01      	cmp	r3, #1
 80408e6:	d00b      	beq.n	8040900 <HAL_GPIO_Init+0x48>
 80408e8:	683b      	ldr	r3, [r7, #0]
 80408ea:	685b      	ldr	r3, [r3, #4]
 80408ec:	2b02      	cmp	r3, #2
 80408ee:	d007      	beq.n	8040900 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80408f0:	683b      	ldr	r3, [r7, #0]
 80408f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80408f4:	2b11      	cmp	r3, #17
 80408f6:	d003      	beq.n	8040900 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80408f8:	683b      	ldr	r3, [r7, #0]
 80408fa:	685b      	ldr	r3, [r3, #4]
 80408fc:	2b12      	cmp	r3, #18
 80408fe:	d130      	bne.n	8040962 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8040900:	687b      	ldr	r3, [r7, #4]
 8040902:	689b      	ldr	r3, [r3, #8]
 8040904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8040906:	697b      	ldr	r3, [r7, #20]
 8040908:	005b      	lsls	r3, r3, #1
 804090a:	2203      	movs	r2, #3
 804090c:	fa02 f303 	lsl.w	r3, r2, r3
 8040910:	43db      	mvns	r3, r3
 8040912:	693a      	ldr	r2, [r7, #16]
 8040914:	4013      	ands	r3, r2
 8040916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8040918:	683b      	ldr	r3, [r7, #0]
 804091a:	68da      	ldr	r2, [r3, #12]
 804091c:	697b      	ldr	r3, [r7, #20]
 804091e:	005b      	lsls	r3, r3, #1
 8040920:	fa02 f303 	lsl.w	r3, r2, r3
 8040924:	693a      	ldr	r2, [r7, #16]
 8040926:	4313      	orrs	r3, r2
 8040928:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 804092a:	687b      	ldr	r3, [r7, #4]
 804092c:	693a      	ldr	r2, [r7, #16]
 804092e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040930:	687b      	ldr	r3, [r7, #4]
 8040932:	685b      	ldr	r3, [r3, #4]
 8040934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8040936:	2201      	movs	r2, #1
 8040938:	697b      	ldr	r3, [r7, #20]
 804093a:	fa02 f303 	lsl.w	r3, r2, r3
 804093e:	43db      	mvns	r3, r3
 8040940:	693a      	ldr	r2, [r7, #16]
 8040942:	4013      	ands	r3, r2
 8040944:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8040946:	683b      	ldr	r3, [r7, #0]
 8040948:	685b      	ldr	r3, [r3, #4]
 804094a:	091b      	lsrs	r3, r3, #4
 804094c:	f003 0201 	and.w	r2, r3, #1
 8040950:	697b      	ldr	r3, [r7, #20]
 8040952:	fa02 f303 	lsl.w	r3, r2, r3
 8040956:	693a      	ldr	r2, [r7, #16]
 8040958:	4313      	orrs	r3, r2
 804095a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 804095c:	687b      	ldr	r3, [r7, #4]
 804095e:	693a      	ldr	r2, [r7, #16]
 8040960:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8040962:	687b      	ldr	r3, [r7, #4]
 8040964:	68db      	ldr	r3, [r3, #12]
 8040966:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8040968:	697b      	ldr	r3, [r7, #20]
 804096a:	005b      	lsls	r3, r3, #1
 804096c:	2203      	movs	r2, #3
 804096e:	fa02 f303 	lsl.w	r3, r2, r3
 8040972:	43db      	mvns	r3, r3
 8040974:	693a      	ldr	r2, [r7, #16]
 8040976:	4013      	ands	r3, r2
 8040978:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 804097a:	683b      	ldr	r3, [r7, #0]
 804097c:	689a      	ldr	r2, [r3, #8]
 804097e:	697b      	ldr	r3, [r7, #20]
 8040980:	005b      	lsls	r3, r3, #1
 8040982:	fa02 f303 	lsl.w	r3, r2, r3
 8040986:	693a      	ldr	r2, [r7, #16]
 8040988:	4313      	orrs	r3, r2
 804098a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 804098c:	687b      	ldr	r3, [r7, #4]
 804098e:	693a      	ldr	r2, [r7, #16]
 8040990:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040992:	683b      	ldr	r3, [r7, #0]
 8040994:	685b      	ldr	r3, [r3, #4]
 8040996:	2b02      	cmp	r3, #2
 8040998:	d003      	beq.n	80409a2 <HAL_GPIO_Init+0xea>
 804099a:	683b      	ldr	r3, [r7, #0]
 804099c:	685b      	ldr	r3, [r3, #4]
 804099e:	2b12      	cmp	r3, #18
 80409a0:	d123      	bne.n	80409ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80409a2:	697b      	ldr	r3, [r7, #20]
 80409a4:	08da      	lsrs	r2, r3, #3
 80409a6:	687b      	ldr	r3, [r7, #4]
 80409a8:	3208      	adds	r2, #8
 80409aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80409ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80409b0:	697b      	ldr	r3, [r7, #20]
 80409b2:	f003 0307 	and.w	r3, r3, #7
 80409b6:	009b      	lsls	r3, r3, #2
 80409b8:	220f      	movs	r2, #15
 80409ba:	fa02 f303 	lsl.w	r3, r2, r3
 80409be:	43db      	mvns	r3, r3
 80409c0:	693a      	ldr	r2, [r7, #16]
 80409c2:	4013      	ands	r3, r2
 80409c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80409c6:	683b      	ldr	r3, [r7, #0]
 80409c8:	691a      	ldr	r2, [r3, #16]
 80409ca:	697b      	ldr	r3, [r7, #20]
 80409cc:	f003 0307 	and.w	r3, r3, #7
 80409d0:	009b      	lsls	r3, r3, #2
 80409d2:	fa02 f303 	lsl.w	r3, r2, r3
 80409d6:	693a      	ldr	r2, [r7, #16]
 80409d8:	4313      	orrs	r3, r2
 80409da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80409dc:	697b      	ldr	r3, [r7, #20]
 80409de:	08da      	lsrs	r2, r3, #3
 80409e0:	687b      	ldr	r3, [r7, #4]
 80409e2:	3208      	adds	r2, #8
 80409e4:	6939      	ldr	r1, [r7, #16]
 80409e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80409ea:	687b      	ldr	r3, [r7, #4]
 80409ec:	681b      	ldr	r3, [r3, #0]
 80409ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80409f0:	697b      	ldr	r3, [r7, #20]
 80409f2:	005b      	lsls	r3, r3, #1
 80409f4:	2203      	movs	r2, #3
 80409f6:	fa02 f303 	lsl.w	r3, r2, r3
 80409fa:	43db      	mvns	r3, r3
 80409fc:	693a      	ldr	r2, [r7, #16]
 80409fe:	4013      	ands	r3, r2
 8040a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8040a02:	683b      	ldr	r3, [r7, #0]
 8040a04:	685b      	ldr	r3, [r3, #4]
 8040a06:	f003 0203 	and.w	r2, r3, #3
 8040a0a:	697b      	ldr	r3, [r7, #20]
 8040a0c:	005b      	lsls	r3, r3, #1
 8040a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8040a12:	693a      	ldr	r2, [r7, #16]
 8040a14:	4313      	orrs	r3, r2
 8040a16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8040a18:	687b      	ldr	r3, [r7, #4]
 8040a1a:	693a      	ldr	r2, [r7, #16]
 8040a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8040a1e:	683b      	ldr	r3, [r7, #0]
 8040a20:	685b      	ldr	r3, [r3, #4]
 8040a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040a26:	2b00      	cmp	r3, #0
 8040a28:	f000 80a4 	beq.w	8040b74 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8040a2c:	4a5a      	ldr	r2, [pc, #360]	; (8040b98 <HAL_GPIO_Init+0x2e0>)
 8040a2e:	697b      	ldr	r3, [r7, #20]
 8040a30:	089b      	lsrs	r3, r3, #2
 8040a32:	3318      	adds	r3, #24
 8040a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040a38:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8040a3a:	697b      	ldr	r3, [r7, #20]
 8040a3c:	f003 0303 	and.w	r3, r3, #3
 8040a40:	00db      	lsls	r3, r3, #3
 8040a42:	220f      	movs	r2, #15
 8040a44:	fa02 f303 	lsl.w	r3, r2, r3
 8040a48:	43db      	mvns	r3, r3
 8040a4a:	693a      	ldr	r2, [r7, #16]
 8040a4c:	4013      	ands	r3, r2
 8040a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8040a50:	687b      	ldr	r3, [r7, #4]
 8040a52:	4a52      	ldr	r2, [pc, #328]	; (8040b9c <HAL_GPIO_Init+0x2e4>)
 8040a54:	4293      	cmp	r3, r2
 8040a56:	d025      	beq.n	8040aa4 <HAL_GPIO_Init+0x1ec>
 8040a58:	687b      	ldr	r3, [r7, #4]
 8040a5a:	4a51      	ldr	r2, [pc, #324]	; (8040ba0 <HAL_GPIO_Init+0x2e8>)
 8040a5c:	4293      	cmp	r3, r2
 8040a5e:	d01f      	beq.n	8040aa0 <HAL_GPIO_Init+0x1e8>
 8040a60:	687b      	ldr	r3, [r7, #4]
 8040a62:	4a50      	ldr	r2, [pc, #320]	; (8040ba4 <HAL_GPIO_Init+0x2ec>)
 8040a64:	4293      	cmp	r3, r2
 8040a66:	d019      	beq.n	8040a9c <HAL_GPIO_Init+0x1e4>
 8040a68:	687b      	ldr	r3, [r7, #4]
 8040a6a:	4a4f      	ldr	r2, [pc, #316]	; (8040ba8 <HAL_GPIO_Init+0x2f0>)
 8040a6c:	4293      	cmp	r3, r2
 8040a6e:	d013      	beq.n	8040a98 <HAL_GPIO_Init+0x1e0>
 8040a70:	687b      	ldr	r3, [r7, #4]
 8040a72:	4a4e      	ldr	r2, [pc, #312]	; (8040bac <HAL_GPIO_Init+0x2f4>)
 8040a74:	4293      	cmp	r3, r2
 8040a76:	d00d      	beq.n	8040a94 <HAL_GPIO_Init+0x1dc>
 8040a78:	687b      	ldr	r3, [r7, #4]
 8040a7a:	4a4d      	ldr	r2, [pc, #308]	; (8040bb0 <HAL_GPIO_Init+0x2f8>)
 8040a7c:	4293      	cmp	r3, r2
 8040a7e:	d007      	beq.n	8040a90 <HAL_GPIO_Init+0x1d8>
 8040a80:	687b      	ldr	r3, [r7, #4]
 8040a82:	4a4c      	ldr	r2, [pc, #304]	; (8040bb4 <HAL_GPIO_Init+0x2fc>)
 8040a84:	4293      	cmp	r3, r2
 8040a86:	d101      	bne.n	8040a8c <HAL_GPIO_Init+0x1d4>
 8040a88:	2306      	movs	r3, #6
 8040a8a:	e00c      	b.n	8040aa6 <HAL_GPIO_Init+0x1ee>
 8040a8c:	2307      	movs	r3, #7
 8040a8e:	e00a      	b.n	8040aa6 <HAL_GPIO_Init+0x1ee>
 8040a90:	2305      	movs	r3, #5
 8040a92:	e008      	b.n	8040aa6 <HAL_GPIO_Init+0x1ee>
 8040a94:	2304      	movs	r3, #4
 8040a96:	e006      	b.n	8040aa6 <HAL_GPIO_Init+0x1ee>
 8040a98:	2303      	movs	r3, #3
 8040a9a:	e004      	b.n	8040aa6 <HAL_GPIO_Init+0x1ee>
 8040a9c:	2302      	movs	r3, #2
 8040a9e:	e002      	b.n	8040aa6 <HAL_GPIO_Init+0x1ee>
 8040aa0:	2301      	movs	r3, #1
 8040aa2:	e000      	b.n	8040aa6 <HAL_GPIO_Init+0x1ee>
 8040aa4:	2300      	movs	r3, #0
 8040aa6:	697a      	ldr	r2, [r7, #20]
 8040aa8:	f002 0203 	and.w	r2, r2, #3
 8040aac:	00d2      	lsls	r2, r2, #3
 8040aae:	4093      	lsls	r3, r2
 8040ab0:	693a      	ldr	r2, [r7, #16]
 8040ab2:	4313      	orrs	r3, r2
 8040ab4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8040ab6:	4938      	ldr	r1, [pc, #224]	; (8040b98 <HAL_GPIO_Init+0x2e0>)
 8040ab8:	697b      	ldr	r3, [r7, #20]
 8040aba:	089b      	lsrs	r3, r3, #2
 8040abc:	3318      	adds	r3, #24
 8040abe:	693a      	ldr	r2, [r7, #16]
 8040ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8040ac4:	4b34      	ldr	r3, [pc, #208]	; (8040b98 <HAL_GPIO_Init+0x2e0>)
 8040ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8040aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040acc:	68fb      	ldr	r3, [r7, #12]
 8040ace:	43db      	mvns	r3, r3
 8040ad0:	693a      	ldr	r2, [r7, #16]
 8040ad2:	4013      	ands	r3, r2
 8040ad4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8040ad6:	683b      	ldr	r3, [r7, #0]
 8040ad8:	685b      	ldr	r3, [r3, #4]
 8040ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8040ade:	2b00      	cmp	r3, #0
 8040ae0:	d003      	beq.n	8040aea <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8040ae2:	693a      	ldr	r2, [r7, #16]
 8040ae4:	68fb      	ldr	r3, [r7, #12]
 8040ae6:	4313      	orrs	r3, r2
 8040ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8040aea:	4a2b      	ldr	r2, [pc, #172]	; (8040b98 <HAL_GPIO_Init+0x2e0>)
 8040aec:	693b      	ldr	r3, [r7, #16]
 8040aee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8040af2:	4b29      	ldr	r3, [pc, #164]	; (8040b98 <HAL_GPIO_Init+0x2e0>)
 8040af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8040af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040afa:	68fb      	ldr	r3, [r7, #12]
 8040afc:	43db      	mvns	r3, r3
 8040afe:	693a      	ldr	r2, [r7, #16]
 8040b00:	4013      	ands	r3, r2
 8040b02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8040b04:	683b      	ldr	r3, [r7, #0]
 8040b06:	685b      	ldr	r3, [r3, #4]
 8040b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040b0c:	2b00      	cmp	r3, #0
 8040b0e:	d003      	beq.n	8040b18 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8040b10:	693a      	ldr	r2, [r7, #16]
 8040b12:	68fb      	ldr	r3, [r7, #12]
 8040b14:	4313      	orrs	r3, r2
 8040b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8040b18:	4a1f      	ldr	r2, [pc, #124]	; (8040b98 <HAL_GPIO_Init+0x2e0>)
 8040b1a:	693b      	ldr	r3, [r7, #16]
 8040b1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8040b20:	4b1d      	ldr	r3, [pc, #116]	; (8040b98 <HAL_GPIO_Init+0x2e0>)
 8040b22:	681b      	ldr	r3, [r3, #0]
 8040b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040b26:	68fb      	ldr	r3, [r7, #12]
 8040b28:	43db      	mvns	r3, r3
 8040b2a:	693a      	ldr	r2, [r7, #16]
 8040b2c:	4013      	ands	r3, r2
 8040b2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8040b30:	683b      	ldr	r3, [r7, #0]
 8040b32:	685b      	ldr	r3, [r3, #4]
 8040b34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8040b38:	2b00      	cmp	r3, #0
 8040b3a:	d003      	beq.n	8040b44 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8040b3c:	693a      	ldr	r2, [r7, #16]
 8040b3e:	68fb      	ldr	r3, [r7, #12]
 8040b40:	4313      	orrs	r3, r2
 8040b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8040b44:	4a14      	ldr	r2, [pc, #80]	; (8040b98 <HAL_GPIO_Init+0x2e0>)
 8040b46:	693b      	ldr	r3, [r7, #16]
 8040b48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8040b4a:	4b13      	ldr	r3, [pc, #76]	; (8040b98 <HAL_GPIO_Init+0x2e0>)
 8040b4c:	685b      	ldr	r3, [r3, #4]
 8040b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040b50:	68fb      	ldr	r3, [r7, #12]
 8040b52:	43db      	mvns	r3, r3
 8040b54:	693a      	ldr	r2, [r7, #16]
 8040b56:	4013      	ands	r3, r2
 8040b58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8040b5a:	683b      	ldr	r3, [r7, #0]
 8040b5c:	685b      	ldr	r3, [r3, #4]
 8040b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8040b62:	2b00      	cmp	r3, #0
 8040b64:	d003      	beq.n	8040b6e <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8040b66:	693a      	ldr	r2, [r7, #16]
 8040b68:	68fb      	ldr	r3, [r7, #12]
 8040b6a:	4313      	orrs	r3, r2
 8040b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8040b6e:	4a0a      	ldr	r2, [pc, #40]	; (8040b98 <HAL_GPIO_Init+0x2e0>)
 8040b70:	693b      	ldr	r3, [r7, #16]
 8040b72:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8040b74:	697b      	ldr	r3, [r7, #20]
 8040b76:	3301      	adds	r3, #1
 8040b78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8040b7a:	683b      	ldr	r3, [r7, #0]
 8040b7c:	681a      	ldr	r2, [r3, #0]
 8040b7e:	697b      	ldr	r3, [r7, #20]
 8040b80:	fa22 f303 	lsr.w	r3, r2, r3
 8040b84:	2b00      	cmp	r3, #0
 8040b86:	f47f ae9f 	bne.w	80408c8 <HAL_GPIO_Init+0x10>
  }
}
 8040b8a:	bf00      	nop
 8040b8c:	bf00      	nop
 8040b8e:	371c      	adds	r7, #28
 8040b90:	46bd      	mov	sp, r7
 8040b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b96:	4770      	bx	lr
 8040b98:	4002f400 	.word	0x4002f400
 8040b9c:	42020000 	.word	0x42020000
 8040ba0:	42020400 	.word	0x42020400
 8040ba4:	42020800 	.word	0x42020800
 8040ba8:	42020c00 	.word	0x42020c00
 8040bac:	42021000 	.word	0x42021000
 8040bb0:	42021400 	.word	0x42021400
 8040bb4:	42021800 	.word	0x42021800

08040bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8040bb8:	b480      	push	{r7}
 8040bba:	b083      	sub	sp, #12
 8040bbc:	af00      	add	r7, sp, #0
 8040bbe:	6078      	str	r0, [r7, #4]
 8040bc0:	460b      	mov	r3, r1
 8040bc2:	807b      	strh	r3, [r7, #2]
 8040bc4:	4613      	mov	r3, r2
 8040bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8040bc8:	787b      	ldrb	r3, [r7, #1]
 8040bca:	2b00      	cmp	r3, #0
 8040bcc:	d003      	beq.n	8040bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8040bce:	887a      	ldrh	r2, [r7, #2]
 8040bd0:	687b      	ldr	r3, [r7, #4]
 8040bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8040bd4:	e002      	b.n	8040bdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8040bd6:	887a      	ldrh	r2, [r7, #2]
 8040bd8:	687b      	ldr	r3, [r7, #4]
 8040bda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8040bdc:	bf00      	nop
 8040bde:	370c      	adds	r7, #12
 8040be0:	46bd      	mov	sp, r7
 8040be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040be6:	4770      	bx	lr

08040be8 <__libc_init_array>:
 8040be8:	b570      	push	{r4, r5, r6, lr}
 8040bea:	4d0d      	ldr	r5, [pc, #52]	; (8040c20 <__libc_init_array+0x38>)
 8040bec:	2600      	movs	r6, #0
 8040bee:	4c0d      	ldr	r4, [pc, #52]	; (8040c24 <__libc_init_array+0x3c>)
 8040bf0:	1b64      	subs	r4, r4, r5
 8040bf2:	10a4      	asrs	r4, r4, #2
 8040bf4:	42a6      	cmp	r6, r4
 8040bf6:	d109      	bne.n	8040c0c <__libc_init_array+0x24>
 8040bf8:	4d0b      	ldr	r5, [pc, #44]	; (8040c28 <__libc_init_array+0x40>)
 8040bfa:	2600      	movs	r6, #0
 8040bfc:	4c0b      	ldr	r4, [pc, #44]	; (8040c2c <__libc_init_array+0x44>)
 8040bfe:	f000 f817 	bl	8040c30 <_init>
 8040c02:	1b64      	subs	r4, r4, r5
 8040c04:	10a4      	asrs	r4, r4, #2
 8040c06:	42a6      	cmp	r6, r4
 8040c08:	d105      	bne.n	8040c16 <__libc_init_array+0x2e>
 8040c0a:	bd70      	pop	{r4, r5, r6, pc}
 8040c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8040c10:	3601      	adds	r6, #1
 8040c12:	4798      	blx	r3
 8040c14:	e7ee      	b.n	8040bf4 <__libc_init_array+0xc>
 8040c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8040c1a:	3601      	adds	r6, #1
 8040c1c:	4798      	blx	r3
 8040c1e:	e7f2      	b.n	8040c06 <__libc_init_array+0x1e>
 8040c20:	08040ca8 	.word	0x08040ca8
 8040c24:	08040ca8 	.word	0x08040ca8
 8040c28:	08040ca8 	.word	0x08040ca8
 8040c2c:	08040cac 	.word	0x08040cac

08040c30 <_init>:
 8040c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8040c32:	bf00      	nop
 8040c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8040c36:	bc08      	pop	{r3}
 8040c38:	469e      	mov	lr, r3
 8040c3a:	4770      	bx	lr

08040c3c <_fini>:
 8040c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8040c3e:	bf00      	nop
 8040c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8040c42:	bc08      	pop	{r3}
 8040c44:	469e      	mov	lr, r3
 8040c46:	4770      	bx	lr

08040c48 <__SECURE_log_cond_br_taken_veneer>:
 8040c48:	b401      	push	{r0}
 8040c4a:	4802      	ldr	r0, [pc, #8]	; (8040c54 <__SECURE_log_cond_br_taken_veneer+0xc>)
 8040c4c:	4684      	mov	ip, r0
 8040c4e:	bc01      	pop	{r0}
 8040c50:	4760      	bx	ip
 8040c52:	bf00      	nop
 8040c54:	0c03e041 	.word	0x0c03e041

08040c58 <__SECURE_SystemCoreClockUpdate_veneer>:
 8040c58:	b401      	push	{r0}
 8040c5a:	4802      	ldr	r0, [pc, #8]	; (8040c64 <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 8040c5c:	4684      	mov	ip, r0
 8040c5e:	bc01      	pop	{r0}
 8040c60:	4760      	bx	ip
 8040c62:	bf00      	nop
 8040c64:	0c03e001 	.word	0x0c03e001

08040c68 <__SECURE_RegisterCallback_veneer>:
 8040c68:	b401      	push	{r0}
 8040c6a:	4802      	ldr	r0, [pc, #8]	; (8040c74 <__SECURE_RegisterCallback_veneer+0xc>)
 8040c6c:	4684      	mov	ip, r0
 8040c6e:	bc01      	pop	{r0}
 8040c70:	4760      	bx	ip
 8040c72:	bf00      	nop
 8040c74:	0c03e049 	.word	0x0c03e049

08040c78 <__SECURE_log_cond_br_not_taken_veneer>:
 8040c78:	b401      	push	{r0}
 8040c7a:	4802      	ldr	r0, [pc, #8]	; (8040c84 <__SECURE_log_cond_br_not_taken_veneer+0xc>)
 8040c7c:	4684      	mov	ip, r0
 8040c7e:	bc01      	pop	{r0}
 8040c80:	4760      	bx	ip
 8040c82:	bf00      	nop
 8040c84:	0c03e021 	.word	0x0c03e021

08040c88 <__SECURE_log_ret_veneer>:
 8040c88:	b401      	push	{r0}
 8040c8a:	4802      	ldr	r0, [pc, #8]	; (8040c94 <__SECURE_log_ret_veneer+0xc>)
 8040c8c:	4684      	mov	ip, r0
 8040c8e:	bc01      	pop	{r0}
 8040c90:	4760      	bx	ip
 8040c92:	bf00      	nop
 8040c94:	0c03e039 	.word	0x0c03e039

08040c98 <__SECURE_run_attestation_wait_mode_veneer>:
 8040c98:	b401      	push	{r0}
 8040c9a:	4802      	ldr	r0, [pc, #8]	; (8040ca4 <__SECURE_run_attestation_wait_mode_veneer+0xc>)
 8040c9c:	4684      	mov	ip, r0
 8040c9e:	bc01      	pop	{r0}
 8040ca0:	4760      	bx	ip
 8040ca2:	bf00      	nop
 8040ca4:	0c03e051 	.word	0x0c03e051
